
FlightController_STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002ecec  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000149c  0802ef90  0802ef90  0003ef90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803042c  0803042c  000506d4  2**0
                  CONTENTS
  4 .ARM          00000008  0803042c  0803042c  0004042c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030434  08030434  000506d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000028  08030434  08030434  00040434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803045c  0803045c  0004045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d4  24000000  08030460  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ccd0  240006d8  08030b34  000506d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2400d3a8  08030b34  0005d3a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000506d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a5199  00000000  00000000  00050702  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00010961  00000000  00000000  000f589b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000039a8  00000000  00000000  00106200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003488  00000000  00000000  00109ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004e6ab  00000000  00000000  0010d030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00048b79  00000000  00000000  0015b6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001a0b1c  00000000  00000000  001a4254  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00344d70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010470  00000000  00000000  00344dec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240006d8 	.word	0x240006d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802ef74 	.word	0x0802ef74

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240006dc 	.word	0x240006dc
 80002dc:	0802ef74 	.word	0x0802ef74

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004be:	f1a4 0401 	sub.w	r4, r4, #1
 80004c2:	d1e9      	bne.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_ldivmod>:
 80006f8:	b97b      	cbnz	r3, 800071a <__aeabi_ldivmod+0x22>
 80006fa:	b972      	cbnz	r2, 800071a <__aeabi_ldivmod+0x22>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bfbe      	ittt	lt
 8000700:	2000      	movlt	r0, #0
 8000702:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000706:	e006      	blt.n	8000716 <__aeabi_ldivmod+0x1e>
 8000708:	bf08      	it	eq
 800070a:	2800      	cmpeq	r0, #0
 800070c:	bf1c      	itt	ne
 800070e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000712:	f04f 30ff 	movne.w	r0, #4294967295
 8000716:	f000 b9bd 	b.w	8000a94 <__aeabi_idiv0>
 800071a:	f1ad 0c08 	sub.w	ip, sp, #8
 800071e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000722:	2900      	cmp	r1, #0
 8000724:	db09      	blt.n	800073a <__aeabi_ldivmod+0x42>
 8000726:	2b00      	cmp	r3, #0
 8000728:	db1a      	blt.n	8000760 <__aeabi_ldivmod+0x68>
 800072a:	f000 f84d 	bl	80007c8 <__udivmoddi4>
 800072e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000736:	b004      	add	sp, #16
 8000738:	4770      	bx	lr
 800073a:	4240      	negs	r0, r0
 800073c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	db1b      	blt.n	800077c <__aeabi_ldivmod+0x84>
 8000744:	f000 f840 	bl	80007c8 <__udivmoddi4>
 8000748:	f8dd e004 	ldr.w	lr, [sp, #4]
 800074c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000750:	b004      	add	sp, #16
 8000752:	4240      	negs	r0, r0
 8000754:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000758:	4252      	negs	r2, r2
 800075a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800075e:	4770      	bx	lr
 8000760:	4252      	negs	r2, r2
 8000762:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000766:	f000 f82f 	bl	80007c8 <__udivmoddi4>
 800076a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800076e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000772:	b004      	add	sp, #16
 8000774:	4240      	negs	r0, r0
 8000776:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800077a:	4770      	bx	lr
 800077c:	4252      	negs	r2, r2
 800077e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000782:	f000 f821 	bl	80007c8 <__udivmoddi4>
 8000786:	f8dd e004 	ldr.w	lr, [sp, #4]
 800078a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800078e:	b004      	add	sp, #16
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	4770      	bx	lr

08000798 <__aeabi_uldivmod>:
 8000798:	b953      	cbnz	r3, 80007b0 <__aeabi_uldivmod+0x18>
 800079a:	b94a      	cbnz	r2, 80007b0 <__aeabi_uldivmod+0x18>
 800079c:	2900      	cmp	r1, #0
 800079e:	bf08      	it	eq
 80007a0:	2800      	cmpeq	r0, #0
 80007a2:	bf1c      	itt	ne
 80007a4:	f04f 31ff 	movne.w	r1, #4294967295
 80007a8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ac:	f000 b972 	b.w	8000a94 <__aeabi_idiv0>
 80007b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007b8:	f000 f806 	bl	80007c8 <__udivmoddi4>
 80007bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007c4:	b004      	add	sp, #16
 80007c6:	4770      	bx	lr

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	4688      	mov	r8, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d14b      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d6:	428a      	cmp	r2, r1
 80007d8:	4615      	mov	r5, r2
 80007da:	d967      	bls.n	80008ac <__udivmoddi4+0xe4>
 80007dc:	fab2 f282 	clz	r2, r2
 80007e0:	b14a      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e2:	f1c2 0720 	rsb	r7, r2, #32
 80007e6:	fa01 f302 	lsl.w	r3, r1, r2
 80007ea:	fa20 f707 	lsr.w	r7, r0, r7
 80007ee:	4095      	lsls	r5, r2
 80007f0:	ea47 0803 	orr.w	r8, r7, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000800:	fa1f fc85 	uxth.w	ip, r5
 8000804:	fb0e 8817 	mls	r8, lr, r7, r8
 8000808:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800080c:	fb07 f10c 	mul.w	r1, r7, ip
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18eb      	adds	r3, r5, r3
 8000816:	f107 30ff 	add.w	r0, r7, #4294967295
 800081a:	f080 811b 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8118 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000824:	3f02      	subs	r7, #2
 8000826:	442b      	add	r3, r5
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000830:	fb0e 3310 	mls	r3, lr, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fc0c 	mul.w	ip, r0, ip
 800083c:	45a4      	cmp	ip, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	192c      	adds	r4, r5, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8107 	bcs.w	8000a58 <__udivmoddi4+0x290>
 800084a:	45a4      	cmp	ip, r4
 800084c:	f240 8104 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000850:	3802      	subs	r0, #2
 8000852:	442c      	add	r4, r5
 8000854:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000858:	eba4 040c 	sub.w	r4, r4, ip
 800085c:	2700      	movs	r7, #0
 800085e:	b11e      	cbz	r6, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c6 4300 	strd	r4, r3, [r6]
 8000868:	4639      	mov	r1, r7
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d909      	bls.n	8000886 <__udivmoddi4+0xbe>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80eb 	beq.w	8000a4e <__udivmoddi4+0x286>
 8000878:	2700      	movs	r7, #0
 800087a:	e9c6 0100 	strd	r0, r1, [r6]
 800087e:	4638      	mov	r0, r7
 8000880:	4639      	mov	r1, r7
 8000882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000886:	fab3 f783 	clz	r7, r3
 800088a:	2f00      	cmp	r7, #0
 800088c:	d147      	bne.n	800091e <__udivmoddi4+0x156>
 800088e:	428b      	cmp	r3, r1
 8000890:	d302      	bcc.n	8000898 <__udivmoddi4+0xd0>
 8000892:	4282      	cmp	r2, r0
 8000894:	f200 80fa 	bhi.w	8000a8c <__udivmoddi4+0x2c4>
 8000898:	1a84      	subs	r4, r0, r2
 800089a:	eb61 0303 	sbc.w	r3, r1, r3
 800089e:	2001      	movs	r0, #1
 80008a0:	4698      	mov	r8, r3
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	d0e0      	beq.n	8000868 <__udivmoddi4+0xa0>
 80008a6:	e9c6 4800 	strd	r4, r8, [r6]
 80008aa:	e7dd      	b.n	8000868 <__udivmoddi4+0xa0>
 80008ac:	b902      	cbnz	r2, 80008b0 <__udivmoddi4+0xe8>
 80008ae:	deff      	udf	#255	; 0xff
 80008b0:	fab2 f282 	clz	r2, r2
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	f040 808f 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008ba:	1b49      	subs	r1, r1, r5
 80008bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008c0:	fa1f f885 	uxth.w	r8, r5
 80008c4:	2701      	movs	r7, #1
 80008c6:	fbb1 fcfe 	udiv	ip, r1, lr
 80008ca:	0c23      	lsrs	r3, r4, #16
 80008cc:	fb0e 111c 	mls	r1, lr, ip, r1
 80008d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008d4:	fb08 f10c 	mul.w	r1, r8, ip
 80008d8:	4299      	cmp	r1, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x124>
 80008dc:	18eb      	adds	r3, r5, r3
 80008de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4299      	cmp	r1, r3
 80008e6:	f200 80cd 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008ea:	4684      	mov	ip, r0
 80008ec:	1a59      	subs	r1, r3, r1
 80008ee:	b2a3      	uxth	r3, r4
 80008f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f4:	fb0e 1410 	mls	r4, lr, r0, r1
 80008f8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80008fc:	fb08 f800 	mul.w	r8, r8, r0
 8000900:	45a0      	cmp	r8, r4
 8000902:	d907      	bls.n	8000914 <__udivmoddi4+0x14c>
 8000904:	192c      	adds	r4, r5, r4
 8000906:	f100 33ff 	add.w	r3, r0, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x14a>
 800090c:	45a0      	cmp	r8, r4
 800090e:	f200 80b6 	bhi.w	8000a7e <__udivmoddi4+0x2b6>
 8000912:	4618      	mov	r0, r3
 8000914:	eba4 0408 	sub.w	r4, r4, r8
 8000918:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800091c:	e79f      	b.n	800085e <__udivmoddi4+0x96>
 800091e:	f1c7 0c20 	rsb	ip, r7, #32
 8000922:	40bb      	lsls	r3, r7
 8000924:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000928:	ea4e 0e03 	orr.w	lr, lr, r3
 800092c:	fa01 f407 	lsl.w	r4, r1, r7
 8000930:	fa20 f50c 	lsr.w	r5, r0, ip
 8000934:	fa21 f30c 	lsr.w	r3, r1, ip
 8000938:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800093c:	4325      	orrs	r5, r4
 800093e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000942:	0c2c      	lsrs	r4, r5, #16
 8000944:	fb08 3319 	mls	r3, r8, r9, r3
 8000948:	fa1f fa8e 	uxth.w	sl, lr
 800094c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000950:	fb09 f40a 	mul.w	r4, r9, sl
 8000954:	429c      	cmp	r4, r3
 8000956:	fa02 f207 	lsl.w	r2, r2, r7
 800095a:	fa00 f107 	lsl.w	r1, r0, r7
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1e 0303 	adds.w	r3, lr, r3
 8000964:	f109 30ff 	add.w	r0, r9, #4294967295
 8000968:	f080 8087 	bcs.w	8000a7a <__udivmoddi4+0x2b2>
 800096c:	429c      	cmp	r4, r3
 800096e:	f240 8084 	bls.w	8000a7a <__udivmoddi4+0x2b2>
 8000972:	f1a9 0902 	sub.w	r9, r9, #2
 8000976:	4473      	add	r3, lr
 8000978:	1b1b      	subs	r3, r3, r4
 800097a:	b2ad      	uxth	r5, r5
 800097c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000980:	fb08 3310 	mls	r3, r8, r0, r3
 8000984:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000988:	fb00 fa0a 	mul.w	sl, r0, sl
 800098c:	45a2      	cmp	sl, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1e 0404 	adds.w	r4, lr, r4
 8000994:	f100 33ff 	add.w	r3, r0, #4294967295
 8000998:	d26b      	bcs.n	8000a72 <__udivmoddi4+0x2aa>
 800099a:	45a2      	cmp	sl, r4
 800099c:	d969      	bls.n	8000a72 <__udivmoddi4+0x2aa>
 800099e:	3802      	subs	r0, #2
 80009a0:	4474      	add	r4, lr
 80009a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009a6:	fba0 8902 	umull	r8, r9, r0, r2
 80009aa:	eba4 040a 	sub.w	r4, r4, sl
 80009ae:	454c      	cmp	r4, r9
 80009b0:	46c2      	mov	sl, r8
 80009b2:	464b      	mov	r3, r9
 80009b4:	d354      	bcc.n	8000a60 <__udivmoddi4+0x298>
 80009b6:	d051      	beq.n	8000a5c <__udivmoddi4+0x294>
 80009b8:	2e00      	cmp	r6, #0
 80009ba:	d069      	beq.n	8000a90 <__udivmoddi4+0x2c8>
 80009bc:	ebb1 050a 	subs.w	r5, r1, sl
 80009c0:	eb64 0403 	sbc.w	r4, r4, r3
 80009c4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80009c8:	40fd      	lsrs	r5, r7
 80009ca:	40fc      	lsrs	r4, r7
 80009cc:	ea4c 0505 	orr.w	r5, ip, r5
 80009d0:	e9c6 5400 	strd	r5, r4, [r6]
 80009d4:	2700      	movs	r7, #0
 80009d6:	e747      	b.n	8000868 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f703 	lsr.w	r7, r0, r3
 80009e0:	4095      	lsls	r5, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	fa21 f303 	lsr.w	r3, r1, r3
 80009ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009ee:	4338      	orrs	r0, r7
 80009f0:	0c01      	lsrs	r1, r0, #16
 80009f2:	fbb3 f7fe 	udiv	r7, r3, lr
 80009f6:	fa1f f885 	uxth.w	r8, r5
 80009fa:	fb0e 3317 	mls	r3, lr, r7, r3
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb07 f308 	mul.w	r3, r7, r8
 8000a06:	428b      	cmp	r3, r1
 8000a08:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0c:	d907      	bls.n	8000a1e <__udivmoddi4+0x256>
 8000a0e:	1869      	adds	r1, r5, r1
 8000a10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a14:	d22f      	bcs.n	8000a76 <__udivmoddi4+0x2ae>
 8000a16:	428b      	cmp	r3, r1
 8000a18:	d92d      	bls.n	8000a76 <__udivmoddi4+0x2ae>
 8000a1a:	3f02      	subs	r7, #2
 8000a1c:	4429      	add	r1, r5
 8000a1e:	1acb      	subs	r3, r1, r3
 8000a20:	b281      	uxth	r1, r0
 8000a22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a2e:	fb00 f308 	mul.w	r3, r0, r8
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d907      	bls.n	8000a46 <__udivmoddi4+0x27e>
 8000a36:	1869      	adds	r1, r5, r1
 8000a38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3c:	d217      	bcs.n	8000a6e <__udivmoddi4+0x2a6>
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	d915      	bls.n	8000a6e <__udivmoddi4+0x2a6>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4429      	add	r1, r5
 8000a46:	1ac9      	subs	r1, r1, r3
 8000a48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a4c:	e73b      	b.n	80008c6 <__udivmoddi4+0xfe>
 8000a4e:	4637      	mov	r7, r6
 8000a50:	4630      	mov	r0, r6
 8000a52:	e709      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a54:	4607      	mov	r7, r0
 8000a56:	e6e7      	b.n	8000828 <__udivmoddi4+0x60>
 8000a58:	4618      	mov	r0, r3
 8000a5a:	e6fb      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a5c:	4541      	cmp	r1, r8
 8000a5e:	d2ab      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000a64:	eb69 020e 	sbc.w	r2, r9, lr
 8000a68:	3801      	subs	r0, #1
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	e7a4      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a6e:	4660      	mov	r0, ip
 8000a70:	e7e9      	b.n	8000a46 <__udivmoddi4+0x27e>
 8000a72:	4618      	mov	r0, r3
 8000a74:	e795      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a76:	4667      	mov	r7, ip
 8000a78:	e7d1      	b.n	8000a1e <__udivmoddi4+0x256>
 8000a7a:	4681      	mov	r9, r0
 8000a7c:	e77c      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a7e:	3802      	subs	r0, #2
 8000a80:	442c      	add	r4, r5
 8000a82:	e747      	b.n	8000914 <__udivmoddi4+0x14c>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	442b      	add	r3, r5
 8000a8a:	e72f      	b.n	80008ec <__udivmoddi4+0x124>
 8000a8c:	4638      	mov	r0, r7
 8000a8e:	e708      	b.n	80008a2 <__udivmoddi4+0xda>
 8000a90:	4637      	mov	r7, r6
 8000a92:	e6e9      	b.n	8000868 <__udivmoddi4+0xa0>

08000a94 <__aeabi_idiv0>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>:
Motor m3(&htim4, TIM_CHANNEL_1);
Motor m4(&htim4, TIM_CHANNEL_2);
Motor m5(&htim3, TIM_CHANNEL_4);
Motor m6(&htim3, TIM_CHANNEL_2);

Motor::Motor(TIM_HandleTypeDef *htim, uint32_t Channel)
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
	: htim(htim)
	, Channel(Channel)
	, pwm(1000)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ab6:	811a      	strh	r2, [r3, #8]
{ }
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_ZN2FC5Motor5startEv>:

void Motor::start(){
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res;
	res = HAL_TIM_PWM_Start(htim, Channel);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4610      	mov	r0, r2
 8000ada:	f01f f87d 	bl	801fbd8 <HAL_TIM_PWM_Start>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]
	setPWM(1000);
 8000ae2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f804 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZN2FC5Motor6setPWMEt>:

void Motor::stop(){
	HAL_TIMEx_PWMN_Stop(htim, Channel);
}

void Motor::setPWM(uint16_t pwm){
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	807b      	strh	r3, [r7, #2]
	if(pwm < MIN_PWM) 			pwm = MIN_PWM;
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b06:	d203      	bcs.n	8000b10 <_ZN2FC5Motor6setPWMEt+0x1c>
 8000b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0c:	807b      	strh	r3, [r7, #2]
 8000b0e:	e006      	b.n	8000b1e <_ZN2FC5Motor6setPWMEt+0x2a>
	else if(pwm > MAX_PWM)		pwm = MAX_PWM;
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b16:	d902      	bls.n	8000b1e <_ZN2FC5Motor6setPWMEt+0x2a>
 8000b18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b1c:	807b      	strh	r3, [r7, #2]

	this->pwm = pwm;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	887a      	ldrh	r2, [r7, #2]
 8000b22:	811a      	strh	r2, [r3, #8]

	/*
	 *  pwm(1000 ~ 2000) scale to CCR register value(10500 ~ 21000);
	 */
	uint16_t output = (pwm - MIN_PWM) * ((MAX_CCR - MIN_CCR) / (MAX_PWM - MIN_PWM)) + MIN_CCR;
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	461a      	mov	r2, r3
 8000b28:	0092      	lsls	r2, r2, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d105      	bne.n	8000b46 <_ZN2FC5Motor6setPWMEt+0x52>
 8000b3a:	89fa      	ldrh	r2, [r7, #14]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b44:	e02c      	b.n	8000ba0 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d105      	bne.n	8000b5a <_ZN2FC5Motor6setPWMEt+0x66>
 8000b4e:	89fa      	ldrh	r2, [r7, #14]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b58:	e022      	b.n	8000ba0 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d105      	bne.n	8000b6e <_ZN2FC5Motor6setPWMEt+0x7a>
 8000b62:	89fa      	ldrh	r2, [r7, #14]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b6c:	e018      	b.n	8000ba0 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b0c      	cmp	r3, #12
 8000b74:	d105      	bne.n	8000b82 <_ZN2FC5Motor6setPWMEt+0x8e>
 8000b76:	89fa      	ldrh	r2, [r7, #14]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b80:	e00e      	b.n	8000ba0 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b10      	cmp	r3, #16
 8000b88:	d105      	bne.n	8000b96 <_ZN2FC5Motor6setPWMEt+0xa2>
 8000b8a:	89fa      	ldrh	r2, [r7, #14]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b94:	e004      	b.n	8000ba0 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000b96:	89fa      	ldrh	r2, [r7, #14]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_Z41__static_initialization_and_destruction_0ii>:

} /* namespace FC */
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d122      	bne.n	8000c02 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d11d      	bne.n	8000c02 <_Z41__static_initialization_and_destruction_0ii+0x56>
Motor m1(&htim4, TIM_CHANNEL_4);
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	4910      	ldr	r1, [pc, #64]	; (8000c0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000bca:	4811      	ldr	r0, [pc, #68]	; (8000c10 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000bcc:	f7ff ff64 	bl	8000a98 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m2(&htim4, TIM_CHANNEL_3);
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000bd4:	480f      	ldr	r0, [pc, #60]	; (8000c14 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000bd6:	f7ff ff5f 	bl	8000a98 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m3(&htim4, TIM_CHANNEL_1);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	490b      	ldr	r1, [pc, #44]	; (8000c0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000bde:	480e      	ldr	r0, [pc, #56]	; (8000c18 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000be0:	f7ff ff5a 	bl	8000a98 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m4(&htim4, TIM_CHANNEL_2);
 8000be4:	2204      	movs	r2, #4
 8000be6:	4909      	ldr	r1, [pc, #36]	; (8000c0c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000bea:	f7ff ff55 	bl	8000a98 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m5(&htim3, TIM_CHANNEL_4);
 8000bee:	220c      	movs	r2, #12
 8000bf0:	490b      	ldr	r1, [pc, #44]	; (8000c20 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000bf4:	f7ff ff50 	bl	8000a98 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m6(&htim3, TIM_CHANNEL_2);
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4909      	ldr	r1, [pc, #36]	; (8000c20 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000bfe:	f7ff ff4b 	bl	8000a98 <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
} /* namespace FC */
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2400c604 	.word	0x2400c604
 8000c10:	240006f4 	.word	0x240006f4
 8000c14:	24000700 	.word	0x24000700
 8000c18:	2400070c 	.word	0x2400070c
 8000c1c:	24000718 	.word	0x24000718
 8000c20:	2400c6e8 	.word	0x2400c6e8
 8000c24:	24000724 	.word	0x24000724
 8000c28:	24000730 	.word	0x24000730

08000c2c <_GLOBAL__sub_I__ZN2FC2m1E>:
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff ffb9 	bl	8000bac <_Z41__static_initialization_and_destruction_0ii>
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0000      	movs	r0, r0
	...

08000c40 <IST8310_i2cRxCpltCallback>:

	HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
	bm_i2cFlag = bm_i2cIST8310;

}
uint8_t IST8310_i2cRxCpltCallback(){
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return 0;
 8000c44:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <IST8310_i2cRxCpltCallback+0x170>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d001      	beq.n	8000c50 <IST8310_i2cRxCpltCallback+0x10>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e098      	b.n	8000d82 <IST8310_i2cRxCpltCallback+0x142>

	bm_i2cFlag = bm_i2cIdle;
 8000c50:	4b57      	ldr	r3, [pc, #348]	; (8000db0 <IST8310_i2cRxCpltCallback+0x170>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 8000c56:	4b57      	ldr	r3, [pc, #348]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c58:	795b      	ldrb	r3, [r3, #5]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	4b55      	ldr	r3, [pc, #340]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c60:	791b      	ldrb	r3, [r3, #4]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	4b52      	ldr	r3, [pc, #328]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c6a:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 8000c6c:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c6e:	79db      	ldrb	r3, [r3, #7]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c76:	799b      	ldrb	r3, [r3, #6]
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	4b4d      	ldr	r3, [pc, #308]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c80:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 8000c82:	4b4c      	ldr	r3, [pc, #304]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c84:	7a5b      	ldrb	r3, [r3, #9]
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c8c:	7a1b      	ldrb	r3, [r3, #8]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c96:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8000c98:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000c9a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ca6:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8000d90 <IST8310_i2cRxCpltCallback+0x150>
 8000caa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb2:	dc45      	bgt.n	8000d40 <IST8310_i2cRxCpltCallback+0x100>
 8000cb4:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cb6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cc2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000d98 <IST8310_i2cRxCpltCallback+0x158>
 8000cc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cce:	d437      	bmi.n	8000d40 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000cd0:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cd2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000cd6:	ee07 3a90 	vmov	s15, r3
 8000cda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8000cde:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000d90 <IST8310_i2cRxCpltCallback+0x150>
 8000ce2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cea:	dc29      	bgt.n	8000d40 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000cec:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000cee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cfa:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000d98 <IST8310_i2cRxCpltCallback+0x158>
 8000cfe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d06:	d41b      	bmi.n	8000d40 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d0a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d0e:	ee07 3a90 	vmov	s15, r3
 8000d12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000d16:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000da0 <IST8310_i2cRxCpltCallback+0x160>
 8000d1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d22:	dc0d      	bgt.n	8000d40 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d2a:	ee07 3a90 	vmov	s15, r3
 8000d2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d32:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000da8 <IST8310_i2cRxCpltCallback+0x168>
 8000d36:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3e:	d501      	bpl.n	8000d44 <IST8310_i2cRxCpltCallback+0x104>
	{
		return 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	e01e      	b.n	8000d82 <IST8310_i2cRxCpltCallback+0x142>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d46:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d54:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d5a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d68:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <IST8310_i2cRxCpltCallback+0x174>)
 8000d7c:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	f3af 8000 	nop.w
 8000d90:	55555556 	.word	0x55555556
 8000d94:	40b4d655 	.word	0x40b4d655
 8000d98:	55555556 	.word	0x55555556
 8000d9c:	c0b4d655 	.word	0xc0b4d655
 8000da0:	aaaaaaab 	.word	0xaaaaaaab
 8000da4:	40c0472a 	.word	0x40c0472a
 8000da8:	aaaaaaab 	.word	0xaaaaaaab
 8000dac:	c0c0472a 	.word	0xc0c0472a
 8000db0:	240013ac 	.word	0x240013ac
 8000db4:	24001390 	.word	0x24001390

08000db8 <Lidar1D_init>:

#include "Lidar1D.h"

Lidar1D_t lidar1D={0,};

void Lidar1D_init(TIM_HandleTypeDef *htim, uint32_t directChannel, uint32_t indirectChannel){
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
		lidar1D.htim = htim;
 8000dc4:	4a39      	ldr	r2, [pc, #228]	; (8000eac <Lidar1D_init+0xf4>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6013      	str	r3, [r2, #0]
		lidar1D.directChannel = directChannel;
 8000dca:	4a38      	ldr	r2, [pc, #224]	; (8000eac <Lidar1D_init+0xf4>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	6053      	str	r3, [r2, #4]
		lidar1D.indirectChannel = indirectChannel;
 8000dd0:	4a36      	ldr	r2, [pc, #216]	; (8000eac <Lidar1D_init+0xf4>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6093      	str	r3, [r2, #8]
	  switch (directChannel)
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2b0c      	cmp	r3, #12
 8000dda:	d82d      	bhi.n	8000e38 <Lidar1D_init+0x80>
 8000ddc:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <Lidar1D_init+0x2c>)
 8000dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de2:	bf00      	nop
 8000de4:	08000e19 	.word	0x08000e19
 8000de8:	08000e39 	.word	0x08000e39
 8000dec:	08000e39 	.word	0x08000e39
 8000df0:	08000e39 	.word	0x08000e39
 8000df4:	08000e21 	.word	0x08000e21
 8000df8:	08000e39 	.word	0x08000e39
 8000dfc:	08000e39 	.word	0x08000e39
 8000e00:	08000e39 	.word	0x08000e39
 8000e04:	08000e29 	.word	0x08000e29
 8000e08:	08000e39 	.word	0x08000e39
 8000e0c:	08000e39 	.word	0x08000e39
 8000e10:	08000e39 	.word	0x08000e39
 8000e14:	08000e31 	.word	0x08000e31
	  {
	    case TIM_CHANNEL_1:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <Lidar1D_init+0xf4>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	731a      	strb	r2, [r3, #12]
	      break;
 8000e1e:	e00c      	b.n	8000e3a <Lidar1D_init+0x82>
	    }

	    case TIM_CHANNEL_2:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <Lidar1D_init+0xf4>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	731a      	strb	r2, [r3, #12]
	      break;
 8000e26:	e008      	b.n	8000e3a <Lidar1D_init+0x82>
	    }

	    case TIM_CHANNEL_3:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <Lidar1D_init+0xf4>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	731a      	strb	r2, [r3, #12]
	      break;
 8000e2e:	e004      	b.n	8000e3a <Lidar1D_init+0x82>
	    }

	    case TIM_CHANNEL_4:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <Lidar1D_init+0xf4>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	731a      	strb	r2, [r3, #12]
	      break;
 8000e36:	e000      	b.n	8000e3a <Lidar1D_init+0x82>
	    }
	    default:
	      break;
 8000e38:	bf00      	nop
	  }

	  switch (indirectChannel)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0c      	cmp	r3, #12
 8000e3e:	d82d      	bhi.n	8000e9c <Lidar1D_init+0xe4>
 8000e40:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <Lidar1D_init+0x90>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000e7d 	.word	0x08000e7d
 8000e4c:	08000e9d 	.word	0x08000e9d
 8000e50:	08000e9d 	.word	0x08000e9d
 8000e54:	08000e9d 	.word	0x08000e9d
 8000e58:	08000e85 	.word	0x08000e85
 8000e5c:	08000e9d 	.word	0x08000e9d
 8000e60:	08000e9d 	.word	0x08000e9d
 8000e64:	08000e9d 	.word	0x08000e9d
 8000e68:	08000e8d 	.word	0x08000e8d
 8000e6c:	08000e9d 	.word	0x08000e9d
 8000e70:	08000e9d 	.word	0x08000e9d
 8000e74:	08000e9d 	.word	0x08000e9d
 8000e78:	08000e95 	.word	0x08000e95
	  {
	    case TIM_CHANNEL_1:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <Lidar1D_init+0xf4>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	735a      	strb	r2, [r3, #13]
	      break;
 8000e82:	e00c      	b.n	8000e9e <Lidar1D_init+0xe6>
	    }

	    case TIM_CHANNEL_2:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <Lidar1D_init+0xf4>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	735a      	strb	r2, [r3, #13]
	      break;
 8000e8a:	e008      	b.n	8000e9e <Lidar1D_init+0xe6>
	    }

	    case TIM_CHANNEL_3:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <Lidar1D_init+0xf4>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	735a      	strb	r2, [r3, #13]
	      break;
 8000e92:	e004      	b.n	8000e9e <Lidar1D_init+0xe6>
	    }

	    case TIM_CHANNEL_4:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <Lidar1D_init+0xf4>)
 8000e96:	2202      	movs	r2, #2
 8000e98:	735a      	strb	r2, [r3, #13]
	      break;
 8000e9a:	e000      	b.n	8000e9e <Lidar1D_init+0xe6>
	    }
	    default:
	      break;
 8000e9c:	bf00      	nop
	  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2400073c 	.word	0x2400073c

08000eb0 <Lidar1D_run>:

HAL_StatusTypeDef Lidar1D_run(){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	if(HAL_TIM_IC_Start_IT(lidar1D.htim, lidar1D.directChannel) != HAL_OK) Error_Handler();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <Lidar1D_run+0x40>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <Lidar1D_run+0x40>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	f01e ffb4 	bl	801fe2c <HAL_TIM_IC_Start_IT>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <Lidar1D_run+0x1e>
 8000eca:	f012 fa69 	bl	80133a0 <Error_Handler>
	if(HAL_TIM_IC_Start_IT(lidar1D.htim, lidar1D.indirectChannel) != HAL_OK) Error_Handler();
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <Lidar1D_run+0x40>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <Lidar1D_run+0x40>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4610      	mov	r0, r2
 8000eda:	f01e ffa7 	bl	801fe2c <HAL_TIM_IC_Start_IT>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <Lidar1D_run+0x38>
 8000ee4:	f012 fa5c 	bl	80133a0 <Error_Handler>
	return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2400073c 	.word	0x2400073c

08000ef4 <Lidar1D_CaptureCallback>:


uint8_t Lidar1D_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(htim->Instance != lidar1D.htim->Instance) return 0;	/* success */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <Lidar1D_CaptureCallback+0x54>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d001      	beq.n	8000f0e <Lidar1D_CaptureCallback+0x1a>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e018      	b.n	8000f40 <Lidar1D_CaptureCallback+0x4c>

	if(htim->Channel == lidar1D.activeChannel1){
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7f1a      	ldrb	r2, [r3, #28]
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <Lidar1D_CaptureCallback+0x54>)
 8000f14:	7b1b      	ldrb	r3, [r3, #12]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d104      	bne.n	8000f24 <Lidar1D_CaptureCallback+0x30>
//		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		lidar1D.htim->Instance->CNT = 0;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <Lidar1D_CaptureCallback+0x54>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(htim->Channel == lidar1D.activeChannel2){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7f1a      	ldrb	r2, [r3, #28]
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <Lidar1D_CaptureCallback+0x54>)
 8000f2a:	7b5b      	ldrb	r3, [r3, #13]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d106      	bne.n	8000f3e <Lidar1D_CaptureCallback+0x4a>
		lidar1D.distance_mm = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f30:	2104      	movs	r1, #4
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f01f fc16 	bl	8020764 <HAL_TIM_ReadCapturedValue>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <Lidar1D_CaptureCallback+0x54>)
 8000f3c:	611a      	str	r2, [r3, #16]
	}
	return 1;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2400073c 	.word	0x2400073c

08000f4c <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 8000f54:	4a38      	ldr	r2, [pc, #224]	; (8001038 <MPU9250+0xec>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <MPU9250+0xec>)
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <MPU9250+0xec>)
 8000f62:	2203      	movs	r2, #3
 8000f64:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <MPU9250+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <MPU9250+0xec>)
 8000f6e:	2206      	movs	r2, #6
 8000f70:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <MPU9250+0xec>)
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <MPU9250+0xec>)
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <MPU9250+0xec>)
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 8000f8a:	2206      	movs	r2, #6
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	482b      	ldr	r0, [pc, #172]	; (800103c <MPU9250+0xf0>)
 8000f90:	f02c fe59 	bl	802dc46 <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 8000f94:	2206      	movs	r2, #6
 8000f96:	2100      	movs	r1, #0
 8000f98:	4829      	ldr	r0, [pc, #164]	; (8001040 <MPU9250+0xf4>)
 8000f9a:	f02c fe54 	bl	802dc46 <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 8000f9e:	2206      	movs	r2, #6
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4828      	ldr	r0, [pc, #160]	; (8001044 <MPU9250+0xf8>)
 8000fa4:	f02c fe4f 	bl	802dc46 <memset>
	mpu9250.tmpCount = 0;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MPU9250+0xec>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 8000fae:	220c      	movs	r2, #12
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4825      	ldr	r0, [pc, #148]	; (8001048 <MPU9250+0xfc>)
 8000fb4:	f02c fe47 	bl	802dc46 <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 8000fb8:	220c      	movs	r2, #12
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4823      	ldr	r0, [pc, #140]	; (800104c <MPU9250+0x100>)
 8000fbe:	f02c fe42 	bl	802dc46 <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4822      	ldr	r0, [pc, #136]	; (8001050 <MPU9250+0x104>)
 8000fc8:	f02c fe3d 	bl	802dc46 <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 8000fcc:	220c      	movs	r2, #12
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4820      	ldr	r0, [pc, #128]	; (8001054 <MPU9250+0x108>)
 8000fd2:	f02c fe38 	bl	802dc46 <memset>
	mpu9250.tmp = 0;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MPU9250+0xec>)
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 8000fde:	220e      	movs	r2, #14
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	481d      	ldr	r0, [pc, #116]	; (8001058 <MPU9250+0x10c>)
 8000fe4:	f02c fe2f 	bl	802dc46 <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 8000fe8:	2207      	movs	r2, #7
 8000fea:	2100      	movs	r1, #0
 8000fec:	481b      	ldr	r0, [pc, #108]	; (800105c <MPU9250+0x110>)
 8000fee:	f02c fe2a 	bl	802dc46 <memset>
	mpu9250.AK8963_lastUpdate = 0;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MPU9250+0xec>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MPU9250+0xec>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <MPU9250+0xec>)
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <MPU9250+0x114>)
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MPU9250+0xec>)
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <MPU9250+0x118>)
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MPU9250+0xec>)
 8001010:	4a15      	ldr	r2, [pc, #84]	; (8001068 <MPU9250+0x11c>)
 8001012:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 8001014:	f000 fa22 	bl	800145c <MPU9250_getMres>
	MPU9250_getGres();
 8001018:	f000 fa3c 	bl	8001494 <MPU9250_getGres>
	MPU9250_getAres();
 800101c:	f000 fa6c 	bl	80014f8 <MPU9250_getAres>

	MPU9250_resetMPU9250();
 8001020:	f000 fa98 	bl	8001554 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 8001024:	f000 fb84 	bl	8001730 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 8001028:	f000 fb0e 	bl	8001648 <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 800102c:	f000 fa9e 	bl	800156c <MPU9250_initAK8963>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	24001014 	.word	0x24001014
 800103c:	24001028 	.word	0x24001028
 8001040:	2400102e 	.word	0x2400102e
 8001044:	24001034 	.word	0x24001034
 8001048:	2400103c 	.word	0x2400103c
 800104c:	24001054 	.word	0x24001054
 8001050:	24001060 	.word	0x24001060
 8001054:	2400106c 	.word	0x2400106c
 8001058:	2400107c 	.word	0x2400107c
 800105c:	2400108a 	.word	0x2400108a
 8001060:	438c0000 	.word	0x438c0000
 8001064:	438e8000 	.word	0x438e8000
 8001068:	43a50000 	.word	0x43a50000

0800106c <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MPU9250_updateDMA+0x38>)
 8001074:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10f      	bne.n	800109c <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MPU9250_updateDMA+0x38>)
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MPU9250_updateDMA+0x38>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	230e      	movs	r3, #14
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MPU9250_updateDMA+0x3c>)
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	223b      	movs	r2, #59	; 0x3b
 8001094:	21d0      	movs	r1, #208	; 0xd0
 8001096:	f017 ff01 	bl	8018e9c <HAL_I2C_Mem_Read_DMA>
 800109a:	e000      	b.n	800109e <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 800109c:	bf00      	nop
}
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	24001014 	.word	0x24001014
 80010a8:	2400107c 	.word	0x2400107c

080010ac <MPU9250_i2cRxCpltCallback>:

uint8_t MPU9250_i2cRxCpltCallback(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af02      	add	r7, sp, #8
	static uint8_t res = 0;
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <MPU9250_i2cRxCpltCallback+0x98>)
 80010b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d12a      	bne.n	8001112 <MPU9250_i2cRxCpltCallback+0x66>
		if(MPU9250_calRawData() != MPU9250_Fail){
 80010bc:	f000 f848 	bl	8001150 <MPU9250_calRawData>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <MPU9250_i2cRxCpltCallback+0x24>
			MPU9250_calCalibValue();
 80010c6:	f000 f8c5 	bl	8001254 <MPU9250_calCalibValue>
			res = 1;
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MPU9250_i2cRxCpltCallback+0x9c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 80010d0:	f027 ff38 	bl	8028f44 <xTaskGetTickCount>
 80010d4:	4602      	mov	r2, r0
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MPU9250_i2cRxCpltCallback+0x98>)
 80010d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b0a      	cmp	r3, #10
 80010e0:	d926      	bls.n	8001130 <MPU9250_i2cRxCpltCallback+0x84>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MPU9250_i2cRxCpltCallback+0x98>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MPU9250_i2cRxCpltCallback+0x98>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	2307      	movs	r3, #7
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MPU9250_i2cRxCpltCallback+0xa0>)
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	2118      	movs	r1, #24
 80010fc:	f017 fece 	bl	8018e9c <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 8001100:	f027 ff20 	bl	8028f44 <xTaskGetTickCount>
 8001104:	4602      	mov	r2, r0
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MPU9250_i2cRxCpltCallback+0x98>)
 8001108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return res;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MPU9250_i2cRxCpltCallback+0x9c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	e014      	b.n	800113c <MPU9250_i2cRxCpltCallback+0x90>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MPU9250_i2cRxCpltCallback+0x98>)
 8001114:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001118:	2b02      	cmp	r3, #2
 800111a:	d109      	bne.n	8001130 <MPU9250_i2cRxCpltCallback+0x84>
		if(AK8963_calRawData() == MPU9250_Success){
 800111c:	f000 f90c 	bl	8001338 <AK8963_calRawData>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d104      	bne.n	8001130 <MPU9250_i2cRxCpltCallback+0x84>
			AK8963_calCalibValue();
 8001126:	f000 f945 	bl	80013b4 <AK8963_calCalibValue>
			res = 2;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MPU9250_i2cRxCpltCallback+0x9c>)
 800112c:	2202      	movs	r2, #2
 800112e:	701a      	strb	r2, [r3, #0]
		}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <MPU9250_i2cRxCpltCallback+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	return res;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <MPU9250_i2cRxCpltCallback+0x9c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24001014 	.word	0x24001014
 8001148:	24000750 	.word	0x24000750
 800114c:	2400108a 	.word	0x2400108a

08001150 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 8001154:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <MPU9250_calRawData+0x100>)
 8001156:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <MPU9250_calRawData+0x100>)
 8001160:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21b      	sxth	r3, r3
 800116a:	b29b      	uxth	r3, r3
 800116c:	425b      	negs	r3, r3
 800116e:	b29b      	uxth	r3, r3
 8001170:	b21a      	sxth	r2, r3
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <MPU9250_calRawData+0x100>)
 8001174:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <MPU9250_calRawData+0x100>)
 8001178:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b33      	ldr	r3, [pc, #204]	; (8001250 <MPU9250_calRawData+0x100>)
 8001182:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21b      	sxth	r3, r3
 800118c:	b29b      	uxth	r3, r3
 800118e:	425b      	negs	r3, r3
 8001190:	b29b      	uxth	r3, r3
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <MPU9250_calRawData+0x100>)
 8001196:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MPU9250_calRawData+0x100>)
 800119a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MPU9250_calRawData+0x100>)
 80011a4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	425b      	negs	r3, r3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MPU9250_calRawData+0x100>)
 80011b8:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MPU9250_calRawData+0x100>)
 80011bc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MPU9250_calRawData+0x100>)
 80011c6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MPU9250_calRawData+0x100>)
 80011d2:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MPU9250_calRawData+0x100>)
 80011d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MPU9250_calRawData+0x100>)
 80011e0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MPU9250_calRawData+0x100>)
 80011ec:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MPU9250_calRawData+0x100>)
 80011f0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MPU9250_calRawData+0x100>)
 80011fa:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MPU9250_calRawData+0x100>)
 8001206:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MPU9250_calRawData+0x100>)
 800120a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MPU9250_calRawData+0x100>)
 8001214:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MPU9250_calRawData+0x100>)
 8001220:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MPU9250_calRawData+0x100>)
 8001224:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10b      	bne.n	8001244 <MPU9250_calRawData+0xf4>
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MPU9250_calRawData+0x100>)
 800122e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <MPU9250_calRawData+0xf4>
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MPU9250_calRawData+0x100>)
 8001238:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <MPU9250_calRawData+0xf4>
 8001240:	2300      	movs	r3, #0
 8001242:	e000      	b.n	8001246 <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 8001244:	2301      	movs	r3, #1
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	24001014 	.word	0x24001014

08001254 <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 8001258:	4b35      	ldr	r3, [pc, #212]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 800125a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001266:	4b32      	ldr	r3, [pc, #200]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 8001268:	edd3 7a02 	vldr	s15, [r3, #8]
 800126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 8001272:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 8001278:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001284:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 8001286:	edd3 7a02 	vldr	s15, [r3, #8]
 800128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 8001290:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 8001296:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 80012a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ac:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 80012ae:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 80012b4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 80012c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001334 <MPU9250_calCalibValue+0xe0>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 80012d4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 80012da:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 80012e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001334 <MPU9250_calCalibValue+0xe0>
 80012f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 80012fa:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 8001300:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 800130e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001316:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001334 <MPU9250_calCalibValue+0xe0>
 800131a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <MPU9250_calCalibValue+0xdc>)
 8001320:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	24001014 	.word	0x24001014
 8001334:	3c8efa35 	.word	0x3c8efa35

08001338 <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <AK8963_calRawData+0x78>)
 800133e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <AK8963_calRawData+0x16>
 800134a:	2300      	movs	r3, #0
 800134c:	e02b      	b.n	80013a6 <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <AK8963_calRawData+0x78>)
 8001350:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <AK8963_calRawData+0x78>)
 800135a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <AK8963_calRawData+0x78>)
 8001366:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <AK8963_calRawData+0x78>)
 800136a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <AK8963_calRawData+0x78>)
 8001374:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <AK8963_calRawData+0x78>)
 8001380:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <AK8963_calRawData+0x78>)
 8001384:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <AK8963_calRawData+0x78>)
 800138e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	b29b      	uxth	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	b29b      	uxth	r3, r3
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <AK8963_calRawData+0x78>)
 80013a2:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	24001014 	.word	0x24001014

080013b4 <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <AK8963_calCalibValue+0xa4>)
 80013ba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <AK8963_calCalibValue+0xa4>)
 80013c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80013cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <AK8963_calCalibValue+0xa4>)
 80013d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80013d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <AK8963_calCalibValue+0xa4>)
 80013dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <AK8963_calCalibValue+0xa4>)
 80013e6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <AK8963_calCalibValue+0xa4>)
 80013ec:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <AK8963_calCalibValue+0xa4>)
 80013fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80013fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <AK8963_calCalibValue+0xa4>)
 8001404:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <AK8963_calCalibValue+0xa4>)
 800140e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <AK8963_calCalibValue+0xa4>)
 8001418:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <AK8963_calCalibValue+0xa4>)
 800141e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <AK8963_calCalibValue+0xa4>)
 800142c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <AK8963_calCalibValue+0xa4>)
 8001436:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800143a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <AK8963_calCalibValue+0xa4>)
 8001440:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <AK8963_calCalibValue+0xa4>)
 800144a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	24001014 	.word	0x24001014

0800145c <MPU9250_getMres>:

void MPU9250_getMres() {
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MPU9250_getMres+0x2c>)
 8001462:	799b      	ldrb	r3, [r3, #6]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <MPU9250_getMres+0x12>
 8001468:	2b01      	cmp	r3, #1
 800146a:	d004      	beq.n	8001476 <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 800146c:	e007      	b.n	800147e <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MPU9250_getMres+0x2c>)
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <MPU9250_getMres+0x30>)
 8001472:	611a      	str	r2, [r3, #16]
		  break;
 8001474:	e003      	b.n	800147e <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <MPU9250_getMres+0x2c>)
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <MPU9250_getMres+0x34>)
 800147a:	611a      	str	r2, [r3, #16]
		  break;
 800147c:	bf00      	nop
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	24001014 	.word	0x24001014
 800148c:	40bfebff 	.word	0x40bfebff
 8001490:	3fbfebff 	.word	0x3fbfebff

08001494 <MPU9250_getGres>:

void MPU9250_getGres() {
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MPU9250_getGres+0x50>)
 800149a:	795b      	ldrb	r3, [r3, #5]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d81b      	bhi.n	80014d8 <MPU9250_getGres+0x44>
 80014a0:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <MPU9250_getGres+0x14>)
 80014a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a6:	bf00      	nop
 80014a8:	080014b9 	.word	0x080014b9
 80014ac:	080014c1 	.word	0x080014c1
 80014b0:	080014c9 	.word	0x080014c9
 80014b4:	080014d1 	.word	0x080014d1
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <MPU9250_getGres+0x50>)
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <MPU9250_getGres+0x54>)
 80014bc:	60da      	str	r2, [r3, #12]
          break;
 80014be:	e00b      	b.n	80014d8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MPU9250_getGres+0x50>)
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <MPU9250_getGres+0x58>)
 80014c4:	60da      	str	r2, [r3, #12]
          break;
 80014c6:	e007      	b.n	80014d8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MPU9250_getGres+0x50>)
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <MPU9250_getGres+0x5c>)
 80014cc:	60da      	str	r2, [r3, #12]
          break;
 80014ce:	e003      	b.n	80014d8 <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <MPU9250_getGres+0x50>)
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <MPU9250_getGres+0x60>)
 80014d4:	60da      	str	r2, [r3, #12]
          break;
 80014d6:	bf00      	nop
  }
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	24001014 	.word	0x24001014
 80014e8:	3bfa0000 	.word	0x3bfa0000
 80014ec:	3c7a0000 	.word	0x3c7a0000
 80014f0:	3cfa0000 	.word	0x3cfa0000
 80014f4:	3d7a0000 	.word	0x3d7a0000

080014f8 <MPU9250_getAres>:


void MPU9250_getAres() {
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MPU9250_getAres+0x58>)
 80014fe:	791b      	ldrb	r3, [r3, #4]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d81f      	bhi.n	8001544 <MPU9250_getAres+0x4c>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <MPU9250_getAres+0x14>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	0800151d 	.word	0x0800151d
 8001510:	08001527 	.word	0x08001527
 8001514:	08001531 	.word	0x08001531
 8001518:	0800153b 	.word	0x0800153b
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MPU9250_getAres+0x58>)
 800151e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001522:	609a      	str	r2, [r3, #8]
          break;
 8001524:	e00e      	b.n	8001544 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MPU9250_getAres+0x58>)
 8001528:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800152c:	609a      	str	r2, [r3, #8]
          break;
 800152e:	e009      	b.n	8001544 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MPU9250_getAres+0x58>)
 8001532:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001536:	609a      	str	r2, [r3, #8]
          break;
 8001538:	e004      	b.n	8001544 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <MPU9250_getAres+0x58>)
 800153c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001540:	609a      	str	r2, [r3, #8]
          break;
 8001542:	bf00      	nop
  }
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	24001014 	.word	0x24001014

08001554 <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	216b      	movs	r1, #107	; 0x6b
 800155c:	20d0      	movs	r0, #208	; 0xd0
 800155e:	f000 fb3f 	bl	8001be0 <MPU9250_writeByte>
    HAL_Delay(10);
 8001562:	200a      	movs	r0, #10
 8001564:	f013 fbd2 	bl	8014d0c <HAL_Delay>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001572:	2200      	movs	r2, #0
 8001574:	210a      	movs	r1, #10
 8001576:	2018      	movs	r0, #24
 8001578:	f000 fb32 	bl	8001be0 <MPU9250_writeByte>
	HAL_Delay(10);
 800157c:	200a      	movs	r0, #10
 800157e:	f013 fbc5 	bl	8014d0c <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001582:	220f      	movs	r2, #15
 8001584:	210a      	movs	r1, #10
 8001586:	2018      	movs	r0, #24
 8001588:	f000 fb2a 	bl	8001be0 <MPU9250_writeByte>
	HAL_Delay(10);
 800158c:	200a      	movs	r0, #10
 800158e:	f013 fbbd 	bl	8014d0c <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2203      	movs	r2, #3
 8001596:	2110      	movs	r1, #16
 8001598:	2018      	movs	r0, #24
 800159a:	f000 fb3f 	bl	8001c1c <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 800159e:	793b      	ldrb	r3, [r7, #4]
 80015a0:	3b80      	subs	r3, #128	; 0x80
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015aa:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001640 <MPU9250_initAK8963+0xd4>
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MPU9250_initAK8963+0xd8>)
 80015bc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	3b80      	subs	r3, #128	; 0x80
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001640 <MPU9250_initAK8963+0xd4>
 80015d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MPU9250_initAK8963+0xd8>)
 80015de:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	3b80      	subs	r3, #128	; 0x80
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001640 <MPU9250_initAK8963+0xd4>
 80015f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MPU9250_initAK8963+0xd8>)
 8001600:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001604:	2200      	movs	r2, #0
 8001606:	210a      	movs	r1, #10
 8001608:	2018      	movs	r0, #24
 800160a:	f000 fae9 	bl	8001be0 <MPU9250_writeByte>
	HAL_Delay(10);
 800160e:	200a      	movs	r0, #10
 8001610:	f013 fb7c 	bl	8014d0c <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MPU9250_initAK8963+0xd8>)
 8001616:	799b      	ldrb	r3, [r3, #6]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	b25a      	sxtb	r2, r3
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MPU9250_initAK8963+0xd8>)
 800161e:	79db      	ldrb	r3, [r3, #7]
 8001620:	b25b      	sxtb	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b25b      	sxtb	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	210a      	movs	r1, #10
 800162c:	2018      	movs	r0, #24
 800162e:	f000 fad7 	bl	8001be0 <MPU9250_writeByte>
	HAL_Delay(10);
 8001632:	200a      	movs	r0, #10
 8001634:	f013 fb6a 	bl	8014d0c <HAL_Delay>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	43800000 	.word	0x43800000
 8001644:	24001014 	.word	0x24001014

08001648 <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800164e:	2200      	movs	r2, #0
 8001650:	216b      	movs	r1, #107	; 0x6b
 8001652:	20d0      	movs	r0, #208	; 0xd0
 8001654:	f000 fac4 	bl	8001be0 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	f013 fb57 	bl	8014d0c <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800165e:	2201      	movs	r2, #1
 8001660:	216b      	movs	r1, #107	; 0x6b
 8001662:	20d0      	movs	r0, #208	; 0xd0
 8001664:	f000 fabc 	bl	8001be0 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8001668:	2203      	movs	r2, #3
 800166a:	211a      	movs	r1, #26
 800166c:	20d0      	movs	r0, #208	; 0xd0
 800166e:	f000 fab7 	bl	8001be0 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001672:	2204      	movs	r2, #4
 8001674:	2119      	movs	r1, #25
 8001676:	20d0      	movs	r0, #208	; 0xd0
 8001678:	f000 fab2 	bl	8001be0 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 800167c:	211b      	movs	r1, #27
 800167e:	20d0      	movs	r0, #208	; 0xd0
 8001680:	f000 faee 	bl	8001c60 <MPU9250_readByte>
 8001684:	4603      	mov	r3, r0
 8001686:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f023 0302 	bic.w	r3, r3, #2
 800168e:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f023 0318 	bic.w	r3, r3, #24
 8001696:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <MPU9250_initMPU9250+0xe4>)
 800169a:	795b      	ldrb	r3, [r3, #5]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	b25a      	sxtb	r2, r3
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	461a      	mov	r2, r3
 80016ae:	211b      	movs	r1, #27
 80016b0:	20d0      	movs	r0, #208	; 0xd0
 80016b2:	f000 fa95 	bl	8001be0 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 80016b6:	211c      	movs	r1, #28
 80016b8:	20d0      	movs	r0, #208	; 0xd0
 80016ba:	f000 fad1 	bl	8001c60 <MPU9250_readByte>
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f023 0318 	bic.w	r3, r3, #24
 80016c8:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <MPU9250_initMPU9250+0xe4>)
 80016cc:	791b      	ldrb	r3, [r3, #4]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	b25a      	sxtb	r2, r3
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	461a      	mov	r2, r3
 80016e0:	211c      	movs	r1, #28
 80016e2:	20d0      	movs	r0, #208	; 0xd0
 80016e4:	f000 fa7c 	bl	8001be0 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 80016e8:	211d      	movs	r1, #29
 80016ea:	20d0      	movs	r0, #208	; 0xd0
 80016ec:	f000 fab8 	bl	8001c60 <MPU9250_readByte>
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f023 030f 	bic.w	r3, r3, #15
 80016fa:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f043 0303 	orr.w	r3, r3, #3
 8001702:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	461a      	mov	r2, r3
 8001708:	211d      	movs	r1, #29
 800170a:	20d0      	movs	r0, #208	; 0xd0
 800170c:	f000 fa68 	bl	8001be0 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001710:	2222      	movs	r2, #34	; 0x22
 8001712:	2137      	movs	r1, #55	; 0x37
 8001714:	20d0      	movs	r0, #208	; 0xd0
 8001716:	f000 fa63 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800171a:	2201      	movs	r2, #1
 800171c:	2138      	movs	r1, #56	; 0x38
 800171e:	20d0      	movs	r0, #208	; 0xd0
 8001720:	f000 fa5e 	bl	8001be0 <MPU9250_writeByte>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	24001014 	.word	0x24001014

08001730 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
 800173e:	2300      	movs	r3, #0
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	216b      	movs	r1, #107	; 0x6b
 8001752:	20d0      	movs	r0, #208	; 0xd0
 8001754:	f000 fa44 	bl	8001be0 <MPU9250_writeByte>
  HAL_Delay(100);
 8001758:	2064      	movs	r0, #100	; 0x64
 800175a:	f013 fad7 	bl	8014d0c <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 800175e:	2201      	movs	r2, #1
 8001760:	216b      	movs	r1, #107	; 0x6b
 8001762:	20d0      	movs	r0, #208	; 0xd0
 8001764:	f000 fa3c 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8001768:	2200      	movs	r2, #0
 800176a:	216c      	movs	r1, #108	; 0x6c
 800176c:	20d0      	movs	r0, #208	; 0xd0
 800176e:	f000 fa37 	bl	8001be0 <MPU9250_writeByte>
  HAL_Delay(200);
 8001772:	20c8      	movs	r0, #200	; 0xc8
 8001774:	f013 faca 	bl	8014d0c <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8001778:	2200      	movs	r2, #0
 800177a:	2138      	movs	r1, #56	; 0x38
 800177c:	20d0      	movs	r0, #208	; 0xd0
 800177e:	f000 fa2f 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8001782:	2200      	movs	r2, #0
 8001784:	2123      	movs	r1, #35	; 0x23
 8001786:	20d0      	movs	r0, #208	; 0xd0
 8001788:	f000 fa2a 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 800178c:	2200      	movs	r2, #0
 800178e:	216b      	movs	r1, #107	; 0x6b
 8001790:	20d0      	movs	r0, #208	; 0xd0
 8001792:	f000 fa25 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001796:	2200      	movs	r2, #0
 8001798:	2124      	movs	r1, #36	; 0x24
 800179a:	20d0      	movs	r0, #208	; 0xd0
 800179c:	f000 fa20 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80017a0:	2200      	movs	r2, #0
 80017a2:	216a      	movs	r1, #106	; 0x6a
 80017a4:	20d0      	movs	r0, #208	; 0xd0
 80017a6:	f000 fa1b 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80017aa:	220c      	movs	r2, #12
 80017ac:	216a      	movs	r1, #106	; 0x6a
 80017ae:	20d0      	movs	r0, #208	; 0xd0
 80017b0:	f000 fa16 	bl	8001be0 <MPU9250_writeByte>
  HAL_Delay(15);
 80017b4:	200f      	movs	r0, #15
 80017b6:	f013 faa9 	bl	8014d0c <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 80017ba:	2201      	movs	r2, #1
 80017bc:	211a      	movs	r1, #26
 80017be:	20d0      	movs	r0, #208	; 0xd0
 80017c0:	f000 fa0e 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 80017c4:	2200      	movs	r2, #0
 80017c6:	2119      	movs	r1, #25
 80017c8:	20d0      	movs	r0, #208	; 0xd0
 80017ca:	f000 fa09 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80017ce:	2200      	movs	r2, #0
 80017d0:	211b      	movs	r1, #27
 80017d2:	20d0      	movs	r0, #208	; 0xd0
 80017d4:	f000 fa04 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 80017d8:	2200      	movs	r2, #0
 80017da:	211c      	movs	r1, #28
 80017dc:	20d0      	movs	r0, #208	; 0xd0
 80017de:	f000 f9ff 	bl	8001be0 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 80017e2:	2240      	movs	r2, #64	; 0x40
 80017e4:	216a      	movs	r1, #106	; 0x6a
 80017e6:	20d0      	movs	r0, #208	; 0xd0
 80017e8:	f000 f9fa 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 80017ec:	2278      	movs	r2, #120	; 0x78
 80017ee:	2123      	movs	r1, #35	; 0x23
 80017f0:	20d0      	movs	r0, #208	; 0xd0
 80017f2:	f000 f9f5 	bl	8001be0 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 80017f6:	2028      	movs	r0, #40	; 0x28
 80017f8:	f013 fa88 	bl	8014d0c <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 80017fc:	2200      	movs	r2, #0
 80017fe:	2123      	movs	r1, #35	; 0x23
 8001800:	20d0      	movs	r0, #208	; 0xd0
 8001802:	f000 f9ed 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001806:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800180a:	2202      	movs	r2, #2
 800180c:	2172      	movs	r1, #114	; 0x72
 800180e:	20d0      	movs	r0, #208	; 0xd0
 8001810:	f000 fa04 	bl	8001c1c <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001814:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	b21a      	sxth	r2, r3
 800181c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	b21b      	sxth	r3, r3
 8001826:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 800182a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800182e:	4ab3      	ldr	r2, [pc, #716]	; (8001afc <MPU9250_calibrateMPU9250+0x3cc>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	08db      	lsrs	r3, r3, #3
 8001836:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 800183a:	2300      	movs	r3, #0
 800183c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001840:	e071      	b.n	8001926 <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001842:	2300      	movs	r3, #0
 8001844:	813b      	strh	r3, [r7, #8]
 8001846:	2300      	movs	r3, #0
 8001848:	817b      	strh	r3, [r7, #10]
 800184a:	2300      	movs	r3, #0
 800184c:	81bb      	strh	r3, [r7, #12]
 800184e:	2300      	movs	r3, #0
 8001850:	803b      	strh	r3, [r7, #0]
 8001852:	2300      	movs	r3, #0
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	2300      	movs	r3, #0
 8001858:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 800185a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800185e:	220c      	movs	r2, #12
 8001860:	2174      	movs	r1, #116	; 0x74
 8001862:	20d0      	movs	r0, #208	; 0xd0
 8001864:	f000 f9da 	bl	8001c1c <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001868:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b21a      	sxth	r2, r3
 8001870:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001874:	b21b      	sxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	b21b      	sxth	r3, r3
 800187a:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800187c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21a      	sxth	r2, r3
 8001884:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001888:	b21b      	sxth	r3, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	b21b      	sxth	r3, r3
 800188e:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001890:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	b21a      	sxth	r2, r3
 8001898:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800189c:	b21b      	sxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80018a4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80018b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	b21a      	sxth	r2, r3
 80018c0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 80018cc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21b      	sxth	r3, r3
 80018de:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80018e6:	4413      	add	r3, r2
 80018e8:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80018f0:	4413      	add	r3, r2
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001904:	4413      	add	r3, r2
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800190e:	4413      	add	r3, r2
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001914:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 800191c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001920:	3301      	adds	r3, #1
 8001922:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001926:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800192a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800192e:	429a      	cmp	r2, r3
 8001930:	d387      	bcc.n	8001842 <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001932:	6a3a      	ldr	r2, [r7, #32]
 8001934:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001938:	fb92 f3f3 	sdiv	r3, r2, r3
 800193c:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001944:	fb92 f3f3 	sdiv	r3, r2, r3
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 800194a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800194c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001950:	fb92 f3f3 	sdiv	r3, r2, r3
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 8001956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001958:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800195c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 8001962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001964:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001968:	fb92 f3f3 	sdiv	r3, r2, r3
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 800196e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001970:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001974:	fb92 f3f3 	sdiv	r3, r2, r3
 8001978:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 800197a:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <MPU9250_calibrateMPU9250+0x3d0>)
 800197c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198c:	ee17 3a90 	vmov	r3, s15
 8001990:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	dd05      	ble.n	80019a6 <MPU9250_calibrateMPU9250+0x276>
 800199a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800199c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a4:	e004      	b.n	80019b0 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80019a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019ac:	4413      	add	r3, r2
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80019b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b2:	425b      	negs	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	da00      	bge.n	80019ba <MPU9250_calibrateMPU9250+0x28a>
 80019b8:	3303      	adds	r3, #3
 80019ba:	109b      	asrs	r3, r3, #2
 80019bc:	121b      	asrs	r3, r3, #8
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	425b      	negs	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da00      	bge.n	80019ce <MPU9250_calibrateMPU9250+0x29e>
 80019cc:	3303      	adds	r3, #3
 80019ce:	109b      	asrs	r3, r3, #2
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	425b      	negs	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da00      	bge.n	80019e0 <MPU9250_calibrateMPU9250+0x2b0>
 80019de:	3303      	adds	r3, #3
 80019e0:	109b      	asrs	r3, r3, #2
 80019e2:	121b      	asrs	r3, r3, #8
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80019ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ec:	425b      	negs	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da00      	bge.n	80019f4 <MPU9250_calibrateMPU9250+0x2c4>
 80019f2:	3303      	adds	r3, #3
 80019f4:	109b      	asrs	r3, r3, #2
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 80019fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fe:	425b      	negs	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	da00      	bge.n	8001a06 <MPU9250_calibrateMPU9250+0x2d6>
 8001a04:	3303      	adds	r3, #3
 8001a06:	109b      	asrs	r3, r3, #2
 8001a08:	121b      	asrs	r3, r3, #8
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a12:	425b      	negs	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	da00      	bge.n	8001a1a <MPU9250_calibrateMPU9250+0x2ea>
 8001a18:	3303      	adds	r3, #3
 8001a1a:	109b      	asrs	r3, r3, #2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8001a22:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a26:	461a      	mov	r2, r3
 8001a28:	2113      	movs	r1, #19
 8001a2a:	20d0      	movs	r0, #208	; 0xd0
 8001a2c:	f000 f8d8 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8001a30:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a34:	461a      	mov	r2, r3
 8001a36:	2114      	movs	r1, #20
 8001a38:	20d0      	movs	r0, #208	; 0xd0
 8001a3a:	f000 f8d1 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 8001a3e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001a42:	461a      	mov	r2, r3
 8001a44:	2115      	movs	r1, #21
 8001a46:	20d0      	movs	r0, #208	; 0xd0
 8001a48:	f000 f8ca 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 8001a4c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001a50:	461a      	mov	r2, r3
 8001a52:	2116      	movs	r1, #22
 8001a54:	20d0      	movs	r0, #208	; 0xd0
 8001a56:	f000 f8c3 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 8001a5a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2117      	movs	r1, #23
 8001a62:	20d0      	movs	r0, #208	; 0xd0
 8001a64:	f000 f8bc 	bl	8001be0 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8001a68:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2118      	movs	r1, #24
 8001a70:	20d0      	movs	r0, #208	; 0xd0
 8001a72:	f000 f8b5 	bl	8001be0 <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8001a82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a86:	2202      	movs	r2, #2
 8001a88:	2177      	movs	r1, #119	; 0x77
 8001a8a:	20d0      	movs	r0, #208	; 0xd0
 8001a8c:	f000 f8c6 	bl	8001c1c <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a90:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8001aa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	217a      	movs	r1, #122	; 0x7a
 8001aaa:	20d0      	movs	r0, #208	; 0xd0
 8001aac:	f000 f8b6 	bl	8001c1c <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001ab0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8001ac2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	217d      	movs	r1, #125	; 0x7d
 8001aca:	20d0      	movs	r0, #208	; 0xd0
 8001acc:	f000 f8a6 	bl	8001c1c <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001ad0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	743b      	strb	r3, [r7, #16]
 8001aea:	2300      	movs	r3, #0
 8001aec:	747b      	strb	r3, [r7, #17]
 8001aee:	2300      	movs	r3, #0
 8001af0:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001af8:	e01e      	b.n	8001b38 <MPU9250_calibrateMPU9250+0x408>
 8001afa:	bf00      	nop
 8001afc:	aaaaaaab 	.word	0xaaaaaaab
 8001b00:	24001014 	.word	0x24001014
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001b0e:	4413      	add	r3, r2
 8001b10:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001b14:	461a      	mov	r2, r3
 8001b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <MPU9250_calibrateMPU9250+0x3fe>
 8001b1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b22:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001b26:	4413      	add	r3, r2
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 8001b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b32:	3301      	adds	r3, #1
 8001b34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d9e1      	bls.n	8001b04 <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da00      	bge.n	8001b4a <MPU9250_calibrateMPU9250+0x41a>
 8001b48:	3307      	adds	r3, #7
 8001b4a:	10db      	asrs	r3, r3, #3
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da00      	bge.n	8001b5c <MPU9250_calibrateMPU9250+0x42c>
 8001b5a:	3307      	adds	r3, #7
 8001b5c:	10db      	asrs	r3, r3, #3
 8001b5e:	425b      	negs	r3, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da00      	bge.n	8001b6e <MPU9250_calibrateMPU9250+0x43e>
 8001b6c:	3307      	adds	r3, #7
 8001b6e:	10db      	asrs	r3, r3, #3
 8001b70:	425b      	negs	r3, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	121b      	asrs	r3, r3, #8
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b88:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001b8c:	7c3b      	ldrb	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	121b      	asrs	r3, r3, #8
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001ba8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001bac:	7c7b      	ldrb	r3, [r7, #17]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	121b      	asrs	r3, r3, #8
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001bc8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001bcc:	7cbb      	ldrb	r3, [r7, #18]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 8001bd6:	bf00      	nop
 8001bd8:	3750      	adds	r7, #80	; 0x50
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop

08001be0 <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af04      	add	r7, sp, #16
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
 8001bea:	460b      	mov	r3, r1
 8001bec:	71bb      	strb	r3, [r7, #6]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MPU9250_writeByte+0x38>)
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	79bb      	ldrb	r3, [r7, #6]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	2364      	movs	r3, #100	; 0x64
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	2301      	movs	r3, #1
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	1d7b      	adds	r3, r7, #5
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f016 fe82 	bl	8018914 <HAL_I2C_Mem_Write>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	24001014 	.word	0x24001014

08001c1c <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af04      	add	r7, sp, #16
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	71bb      	strb	r3, [r7, #6]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MPU9250_readBytes+0x40>)
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	b299      	uxth	r1, r3
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	b29c      	uxth	r4, r3
 8001c3c:	797b      	ldrb	r3, [r7, #5]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2264      	movs	r2, #100	; 0x64
 8001c42:	9202      	str	r2, [sp, #8]
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	4622      	mov	r2, r4
 8001c4e:	f016 ff75 	bl	8018b3c <HAL_I2C_Mem_Read>
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	24001014 	.word	0x24001014

08001c60 <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	460a      	mov	r2, r1
 8001c6a:	71fb      	strb	r3, [r7, #7]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 8001c70:	f107 030f 	add.w	r3, r7, #15
 8001c74:	79b9      	ldrb	r1, [r7, #6]
 8001c76:	79f8      	ldrb	r0, [r7, #7]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f7ff ffcf 	bl	8001c1c <MPU9250_readBytes>
	return data;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <BME280_init>:
#include "bme280.h"
#include "math.h"

BME280_t bme280 = {0,};

void BME280_init(I2C_HandleTypeDef *hi2c, uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	4608      	mov	r0, r1
 8001c92:	4611      	mov	r1, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	70fb      	strb	r3, [r7, #3]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	70bb      	strb	r3, [r7, #2]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	707b      	strb	r3, [r7, #1]
	bme280.hi2c = hi2c;
 8001ca2:	4a74      	ldr	r2, [pc, #464]	; (8001e74 <BME280_init+0x1ec>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6013      	str	r3, [r2, #0]
	BME280_reset();
 8001ca8:	f000 f962 	bl	8001f70 <BME280_reset>
	// Configure the BME280
	// Set H oversampling rate
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 8001cac:	78bb      	ldrb	r3, [r7, #2]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	21f2      	movs	r1, #242	; 0xf2
 8001cb8:	20ec      	movs	r0, #236	; 0xec
 8001cba:	f000 fb8d 	bl	80023d8 <BME280_writeByte>
	// Set T and P oversampling rates and sensor mode
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 8001cbe:	787b      	ldrb	r3, [r7, #1]
 8001cc0:	015b      	lsls	r3, r3, #5
 8001cc2:	b25a      	sxtb	r2, r3
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b25a      	sxtb	r2, r3
 8001cce:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	21f4      	movs	r1, #244	; 0xf4
 8001cdc:	20ec      	movs	r0, #236	; 0xec
 8001cde:	f000 fb7b 	bl	80023d8 <BME280_writeByte>
	// Set standby time interval in normal mode and bandwidth
	BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 8001ce2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ce6:	015b      	lsls	r3, r3, #5
 8001ce8:	b25a      	sxtb	r2, r3
 8001cea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	21f5      	movs	r1, #245	; 0xf5
 8001cfc:	20ec      	movs	r0, #236	; 0xec
 8001cfe:	f000 fb6b 	bl	80023d8 <BME280_writeByte>

	//wait.
	HAL_Delay(50);
 8001d02:	2032      	movs	r0, #50	; 0x32
 8001d04:	f013 f802 	bl	8014d0c <HAL_Delay>
	uint8_t calib[26];
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	221a      	movs	r2, #26
 8001d0e:	2188      	movs	r1, #136	; 0x88
 8001d10:	20ec      	movs	r0, #236	; 0xec
 8001d12:	f000 fb7f 	bl	8002414 <BME280_readBytes>
	bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 8001d16:	7a7b      	ldrb	r3, [r7, #9]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	7a3b      	ldrb	r3, [r7, #8]
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	4313      	orrs	r3, r2
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <BME280_init+0x1ec>)
 8001d28:	821a      	strh	r2, [r3, #16]
	bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	7abb      	ldrb	r3, [r7, #10]
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b4e      	ldr	r3, [pc, #312]	; (8001e74 <BME280_init+0x1ec>)
 8001d3a:	831a      	strh	r2, [r3, #24]
	bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 8001d3c:	7b7b      	ldrb	r3, [r7, #13]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	7b3b      	ldrb	r3, [r7, #12]
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b21a      	sxth	r2, r3
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <BME280_init+0x1ec>)
 8001d4c:	835a      	strh	r2, [r3, #26]
	bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b45      	ldr	r3, [pc, #276]	; (8001e74 <BME280_init+0x1ec>)
 8001d60:	825a      	strh	r2, [r3, #18]
	bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 8001d62:	7c7b      	ldrb	r3, [r7, #17]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	7c3b      	ldrb	r3, [r7, #16]
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	4b40      	ldr	r3, [pc, #256]	; (8001e74 <BME280_init+0x1ec>)
 8001d72:	839a      	strh	r2, [r3, #28]
	bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 8001d74:	7cfb      	ldrb	r3, [r7, #19]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	7cbb      	ldrb	r3, [r7, #18]
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <BME280_init+0x1ec>)
 8001d84:	83da      	strh	r2, [r3, #30]
	bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 8001d86:	7d7b      	ldrb	r3, [r7, #21]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	7d3b      	ldrb	r3, [r7, #20]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <BME280_init+0x1ec>)
 8001d96:	841a      	strh	r2, [r3, #32]
	bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	7dbb      	ldrb	r3, [r7, #22]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <BME280_init+0x1ec>)
 8001da8:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 8001daa:	7e7b      	ldrb	r3, [r7, #25]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	7e3b      	ldrb	r3, [r7, #24]
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b21a      	sxth	r2, r3
 8001db8:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <BME280_init+0x1ec>)
 8001dba:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 8001dbc:	7efb      	ldrb	r3, [r7, #27]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	7ebb      	ldrb	r3, [r7, #26]
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <BME280_init+0x1ec>)
 8001dcc:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 8001dce:	7f7b      	ldrb	r3, [r7, #29]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	7f3b      	ldrb	r3, [r7, #28]
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	b21a      	sxth	r2, r3
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <BME280_init+0x1ec>)
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 8001de0:	7ffb      	ldrb	r3, [r7, #31]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	7fbb      	ldrb	r3, [r7, #30]
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b21a      	sxth	r2, r3
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <BME280_init+0x1ec>)
 8001df0:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280._dig_H1 = calib[25];
 8001df2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <BME280_init+0x1ec>)
 8001df8:	735a      	strb	r2, [r3, #13]
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2207      	movs	r2, #7
 8001e00:	21e1      	movs	r1, #225	; 0xe1
 8001e02:	20ec      	movs	r0, #236	; 0xec
 8001e04:	f000 fb06 	bl	8002414 <BME280_readBytes>
	bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 8001e08:	7a7b      	ldrb	r3, [r7, #9]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	7a3b      	ldrb	r3, [r7, #8]
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <BME280_init+0x1ec>)
 8001e18:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280._dig_H3 = calib[2];
 8001e1a:	7aba      	ldrb	r2, [r7, #10]
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <BME280_init+0x1ec>)
 8001e1e:	739a      	strb	r2, [r3, #14]
	bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	021a      	lsls	r2, r3, #8
 8001e24:	7b3b      	ldrb	r3, [r7, #12]
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	111b      	asrs	r3, r3, #4
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <BME280_init+0x1ec>)
 8001e32:	829a      	strh	r2, [r3, #20]
	bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 8001e34:	7b7b      	ldrb	r3, [r7, #13]
 8001e36:	021a      	lsls	r2, r3, #8
 8001e38:	7b3b      	ldrb	r3, [r7, #12]
 8001e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	111b      	asrs	r3, r3, #4
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <BME280_init+0x1ec>)
 8001e46:	82da      	strh	r2, [r3, #22]
	bme280._dig_H6 = calib[6];
 8001e48:	7bba      	ldrb	r2, [r7, #14]
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <BME280_init+0x1ec>)
 8001e4c:	73da      	strb	r2, [r3, #15]

	/* dump trash value */
	for(int i=0; i<10; i++){
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e008      	b.n	8001e66 <BME280_init+0x1de>
		BME280_readTemperature();
 8001e54:	f000 f895 	bl	8001f82 <BME280_readTemperature>
		BME280_readPressure();
 8001e58:	f000 f8a9 	bl	8001fae <BME280_readPressure>
		BME280_readHumidity();
 8001e5c:	f000 f8bd 	bl	8001fda <BME280_readHumidity>
	for(int i=0; i<10; i++){
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3301      	adds	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	2b09      	cmp	r3, #9
 8001e6a:	ddf3      	ble.n	8001e54 <BME280_init+0x1cc>
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	24000754 	.word	0x24000754

08001e78 <BME280_readIT>:

void BME280_readIT(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af02      	add	r7, sp, #8
	if(bm_i2cFlag == bm_i2cIdle){
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <BME280_readIT+0x30>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10e      	bne.n	8001ea4 <BME280_readIT+0x2c>
		HAL_I2C_Mem_Read_IT(bme280.hi2c, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <BME280_readIT+0x34>)
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <BME280_readIT+0x38>)
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2301      	movs	r3, #1
 8001e94:	22f7      	movs	r2, #247	; 0xf7
 8001e96:	21ec      	movs	r1, #236	; 0xec
 8001e98:	f016 ff6a 	bl	8018d70 <HAL_I2C_Mem_Read_IT>
		bm_i2cFlag = bm_i2cBME280;
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <BME280_readIT+0x30>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
		return;
 8001ea2:	bf00      	nop
	}
}
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	240013ac 	.word	0x240013ac
 8001eac:	24000754 	.word	0x24000754
 8001eb0:	24000758 	.word	0x24000758
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <BME280_i2cRxCpltCallback>:

uint8_t BME280_i2cRxCpltCallback(){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return 0;
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <BME280_i2cRxCpltCallback+0xb0>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d001      	beq.n	8001ec8 <BME280_i2cRxCpltCallback+0x10>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e044      	b.n	8001f52 <BME280_i2cRxCpltCallback+0x9a>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001eca:	791b      	ldrb	r3, [r3, #4]
 8001ecc:	061a      	lsls	r2, r3, #24
 8001ece:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001ed0:	795b      	ldrb	r3, [r3, #5]
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001ed8:	799b      	ldrb	r3, [r3, #6]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	4313      	orrs	r3, r2
 8001ede:	131b      	asrs	r3, r3, #12
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001ee8:	79db      	ldrb	r3, [r3, #7]
 8001eea:	061a      	lsls	r2, r3, #24
 8001eec:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001eee:	7a1b      	ldrb	r3, [r3, #8]
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001ef6:	7a5b      	ldrb	r3, [r3, #9]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	4313      	orrs	r3, r2
 8001efc:	131b      	asrs	r3, r3, #12
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001f00:	6353      	str	r3, [r2, #52]	; 0x34

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f8b8 	bl	800207c <BME280_compensate_P>
 8001f0c:	ee07 0a90 	vmov	s15, r0
 8001f10:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001f14:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001f58 <BME280_i2cRxCpltCallback+0xa0>
 8001f18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f1c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001f22:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f86a 	bl	8002004 <BME280_compensate_T>
 8001f30:	ee07 0a90 	vmov	s15, r0
 8001f34:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001f38:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001f60 <BME280_i2cRxCpltCallback+0xa8>
 8001f3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <BME280_i2cRxCpltCallback+0xb4>)
 8001f46:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

    bm_i2cFlag = bm_i2cIdle;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <BME280_i2cRxCpltCallback+0xb0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
    return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40d90000 	.word	0x40d90000
 8001f60:	00000000 	.word	0x00000000
 8001f64:	40590000 	.word	0x40590000
 8001f68:	240013ac 	.word	0x240013ac
 8001f6c:	24000754 	.word	0x24000754

08001f70 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 8001f74:	22b6      	movs	r2, #182	; 0xb6
 8001f76:	21e0      	movs	r1, #224	; 0xe0
 8001f78:	20ec      	movs	r0, #236	; 0xec
 8001f7a:	f000 fa2d 	bl	80023d8 <BME280_writeByte>
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <BME280_readTemperature>:

int32_t BME280_readTemperature(){
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_TEMP_MSB, 3, &rawData[0]);
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	21fa      	movs	r1, #250	; 0xfa
 8001f8e:	20ec      	movs	r0, #236	; 0xec
 8001f90:	f000 fa40 	bl	8002414 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8001f94:	793b      	ldrb	r3, [r7, #4]
 8001f96:	061a      	lsls	r2, r3, #24
 8001f98:	797b      	ldrb	r3, [r7, #5]
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	79bb      	ldrb	r3, [r7, #6]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	131b      	asrs	r3, r3, #12
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <BME280_readPressure>:

int32_t BME280_readPressure(){
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_PRESS_MSB, 3, &rawData[0]);
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	21f7      	movs	r1, #247	; 0xf7
 8001fba:	20ec      	movs	r0, #236	; 0xec
 8001fbc:	f000 fa2a 	bl	8002414 <BME280_readBytes>
	  return (int32_t) (((int32_t) rawData[0] << 24 | (int32_t) rawData[1] << 16 | (int32_t) rawData[2] << 8) >> 12);
 8001fc0:	793b      	ldrb	r3, [r7, #4]
 8001fc2:	061a      	lsls	r2, r3, #24
 8001fc4:	797b      	ldrb	r3, [r7, #5]
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	131b      	asrs	r3, r3, #12
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <BME280_readHumidity>:
int16_t BME280_readHumidity(){
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
	  uint8_t rawData[3];  // 20-bit pressure register data stored here
	  BME280_readBytes(BME280_ADDRESS, BME280_HUM_MSB, 2, &rawData[0]);
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	21fd      	movs	r1, #253	; 0xfd
 8001fe6:	20ec      	movs	r0, #236	; 0xec
 8001fe8:	f000 fa14 	bl	8002414 <BME280_readBytes>
	  return (int16_t) (((int16_t) rawData[0] << 8 | rawData[1]) );
 8001fec:	793b      	ldrb	r3, [r7, #4]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	797b      	ldrb	r3, [r7, #5]
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b21b      	sxth	r3, r3
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <BME280_compensate_T>:



// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	10da      	asrs	r2, r3, #3
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <BME280_compensate_T+0x74>)
 8002012:	8a1b      	ldrh	r3, [r3, #16]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <BME280_compensate_T+0x74>)
 800201a:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	12db      	asrs	r3, r3, #11
 8002024:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	111b      	asrs	r3, r3, #4
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <BME280_compensate_T+0x74>)
 800202c:	8a12      	ldrh	r2, [r2, #16]
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	1112      	asrs	r2, r2, #4
 8002034:	4910      	ldr	r1, [pc, #64]	; (8002078 <BME280_compensate_T+0x74>)
 8002036:	8a09      	ldrh	r1, [r1, #16]
 8002038:	1a52      	subs	r2, r2, r1
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	131b      	asrs	r3, r3, #12
 8002040:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <BME280_compensate_T+0x74>)
 8002042:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	139b      	asrs	r3, r3, #14
 800204c:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	4a08      	ldr	r2, [pc, #32]	; (8002078 <BME280_compensate_T+0x74>)
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
	  T = (bme280._t_fine * 5 + 128) >> 8;
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <BME280_compensate_T+0x74>)
 800205a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	3380      	adds	r3, #128	; 0x80
 8002064:	121b      	asrs	r3, r3, #8
 8002066:	60fb      	str	r3, [r7, #12]
	  return T;
 8002068:	68fb      	ldr	r3, [r7, #12]
}
 800206a:	4618      	mov	r0, r3
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	24000754 	.word	0x24000754

0800207c <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 800207c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002080:	b088      	sub	sp, #32
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 8002086:	4b65      	ldr	r3, [pc, #404]	; (800221c <BME280_compensate_P+0x1a0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4619      	mov	r1, r3
 800208c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002090:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002094:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002098:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	fb02 f203 	mul.w	r2, r2, r3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	441a      	add	r2, r3
 80020ae:	69b9      	ldr	r1, [r7, #24]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fba1 3403 	umull	r3, r4, r1, r3
 80020b6:	4422      	add	r2, r4
 80020b8:	4614      	mov	r4, r2
 80020ba:	4a58      	ldr	r2, [pc, #352]	; (800221c <BME280_compensate_P+0x1a0>)
 80020bc:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 80020c0:	b211      	sxth	r1, r2
 80020c2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80020c6:	fb01 f504 	mul.w	r5, r1, r4
 80020ca:	fb03 f002 	mul.w	r0, r3, r2
 80020ce:	4428      	add	r0, r5
 80020d0:	fba3 3401 	umull	r3, r4, r3, r1
 80020d4:	1902      	adds	r2, r0, r4
 80020d6:	4614      	mov	r4, r2
 80020d8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80020dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 80020e0:	4b4e      	ldr	r3, [pc, #312]	; (800221c <BME280_compensate_P+0x1a0>)
 80020e2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	fb04 f102 	mul.w	r1, r4, r2
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	fb03 f202 	mul.w	r2, r3, r2
 80020f8:	1888      	adds	r0, r1, r2
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	fba2 1203 	umull	r1, r2, r2, r3
 8002100:	1883      	adds	r3, r0, r2
 8002102:	461a      	mov	r2, r3
 8002104:	f04f 0500 	mov.w	r5, #0
 8002108:	f04f 0600 	mov.w	r6, #0
 800210c:	0456      	lsls	r6, r2, #17
 800210e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8002112:	044d      	lsls	r5, r1, #17
 8002114:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002118:	186b      	adds	r3, r5, r1
 800211a:	eb46 0402 	adc.w	r4, r6, r2
 800211e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 8002122:	4b3e      	ldr	r3, [pc, #248]	; (800221c <BME280_compensate_P+0x1a0>)
 8002124:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002128:	b219      	sxth	r1, r3
 800212a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800212e:	f04f 0500 	mov.w	r5, #0
 8002132:	f04f 0600 	mov.w	r6, #0
 8002136:	00ce      	lsls	r6, r1, #3
 8002138:	2500      	movs	r5, #0
 800213a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800213e:	186b      	adds	r3, r5, r1
 8002140:	eb46 0402 	adc.w	r4, r6, r2
 8002144:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	fb02 f203 	mul.w	r2, r2, r3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	441a      	add	r2, r3
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fba1 3403 	umull	r3, r4, r1, r3
 8002162:	4422      	add	r2, r4
 8002164:	4614      	mov	r4, r2
 8002166:	4a2d      	ldr	r2, [pc, #180]	; (800221c <BME280_compensate_P+0x1a0>)
 8002168:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 800216c:	b211      	sxth	r1, r2
 800216e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002172:	fb01 f504 	mul.w	r5, r1, r4
 8002176:	fb03 f002 	mul.w	r0, r3, r2
 800217a:	4428      	add	r0, r5
 800217c:	fba3 3401 	umull	r3, r4, r3, r1
 8002180:	1902      	adds	r2, r0, r4
 8002182:	4614      	mov	r4, r2
 8002184:	f04f 0100 	mov.w	r1, #0
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	0a19      	lsrs	r1, r3, #8
 800218e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002192:	1222      	asrs	r2, r4, #8
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <BME280_compensate_P+0x1a0>)
 8002196:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800219a:	b21b      	sxth	r3, r3
 800219c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80021a0:	69b8      	ldr	r0, [r7, #24]
 80021a2:	fb04 f500 	mul.w	r5, r4, r0
 80021a6:	69f8      	ldr	r0, [r7, #28]
 80021a8:	fb03 f000 	mul.w	r0, r3, r0
 80021ac:	4428      	add	r0, r5
 80021ae:	69bd      	ldr	r5, [r7, #24]
 80021b0:	fba5 5603 	umull	r5, r6, r5, r3
 80021b4:	1983      	adds	r3, r0, r6
 80021b6:	461e      	mov	r6, r3
 80021b8:	f04f 0b00 	mov.w	fp, #0
 80021bc:	f04f 0c00 	mov.w	ip, #0
 80021c0:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80021c4:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80021c8:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80021cc:	eb1b 0301 	adds.w	r3, fp, r1
 80021d0:	eb4c 0402 	adc.w	r4, ip, r2
 80021d4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 80021d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80021dc:	1c19      	adds	r1, r3, #0
 80021de:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <BME280_compensate_P+0x1a0>)
 80021e4:	8a5b      	ldrh	r3, [r3, #18]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f04f 0400 	mov.w	r4, #0
 80021ec:	fb03 f502 	mul.w	r5, r3, r2
 80021f0:	fb01 f004 	mul.w	r0, r1, r4
 80021f4:	4428      	add	r0, r5
 80021f6:	fba1 3403 	umull	r3, r4, r1, r3
 80021fa:	1902      	adds	r2, r0, r4
 80021fc:	4614      	mov	r4, r2
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	1061      	asrs	r1, r4, #1
 8002208:	17e2      	asrs	r2, r4, #31
 800220a:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 800220e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002212:	4323      	orrs	r3, r4
 8002214:	d104      	bne.n	8002220 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 8002216:	2300      	movs	r3, #0
 8002218:	e0d7      	b.n	80023ca <BME280_compensate_P+0x34e>
 800221a:	bf00      	nop
 800221c:	24000754 	.word	0x24000754
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002226:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800222a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	ea4f 0963 	mov.w	r9, r3, asr #1
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 800223a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800223e:	4645      	mov	r5, r8
 8002240:	464e      	mov	r6, r9
 8002242:	1aed      	subs	r5, r5, r3
 8002244:	eb66 0604 	sbc.w	r6, r6, r4
 8002248:	46a8      	mov	r8, r5
 800224a:	46b1      	mov	r9, r6
 800224c:	eb18 0308 	adds.w	r3, r8, r8
 8002250:	eb49 0409 	adc.w	r4, r9, r9
 8002254:	4698      	mov	r8, r3
 8002256:	46a1      	mov	r9, r4
 8002258:	eb18 0805 	adds.w	r8, r8, r5
 800225c:	eb49 0906 	adc.w	r9, r9, r6
 8002260:	f04f 0100 	mov.w	r1, #0
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800226c:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002270:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002274:	eb18 0801 	adds.w	r8, r8, r1
 8002278:	eb49 0902 	adc.w	r9, r9, r2
 800227c:	f04f 0100 	mov.w	r1, #0
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002288:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800228c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002290:	4688      	mov	r8, r1
 8002292:	4691      	mov	r9, r2
 8002294:	eb18 0805 	adds.w	r8, r8, r5
 8002298:	eb49 0906 	adc.w	r9, r9, r6
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80022a8:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80022ac:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80022b0:	4688      	mov	r8, r1
 80022b2:	4691      	mov	r9, r2
 80022b4:	eb18 0005 	adds.w	r0, r8, r5
 80022b8:	eb49 0106 	adc.w	r1, r9, r6
 80022bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c0:	f7fe fa1a 	bl	80006f8 <__aeabi_ldivmod>
 80022c4:	4603      	mov	r3, r0
 80022c6:	460c      	mov	r4, r1
 80022c8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 80022cc:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <BME280_compensate_P+0x358>)
 80022ce:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80022d2:	b219      	sxth	r1, r3
 80022d4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80022d8:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	f04f 0400 	mov.w	r4, #0
 80022e4:	0b6b      	lsrs	r3, r5, #13
 80022e6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80022ea:	1374      	asrs	r4, r6, #13
 80022ec:	fb03 f502 	mul.w	r5, r3, r2
 80022f0:	fb01 f004 	mul.w	r0, r1, r4
 80022f4:	4428      	add	r0, r5
 80022f6:	fba1 1203 	umull	r1, r2, r1, r3
 80022fa:	1883      	adds	r3, r0, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	f04f 0400 	mov.w	r4, #0
 800230a:	0b6b      	lsrs	r3, r5, #13
 800230c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002310:	1374      	asrs	r4, r6, #13
 8002312:	fb03 f502 	mul.w	r5, r3, r2
 8002316:	fb01 f004 	mul.w	r0, r1, r4
 800231a:	4428      	add	r0, r5
 800231c:	fba1 1203 	umull	r1, r2, r1, r3
 8002320:	1883      	adds	r3, r0, r2
 8002322:	461a      	mov	r2, r3
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	f04f 0400 	mov.w	r4, #0
 800232c:	0e4b      	lsrs	r3, r1, #25
 800232e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002332:	1654      	asrs	r4, r2, #25
 8002334:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 8002338:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <BME280_compensate_P+0x358>)
 800233a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800233e:	b21b      	sxth	r3, r3
 8002340:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	fb04 f102 	mul.w	r1, r4, r2
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	fb03 f202 	mul.w	r2, r3, r2
 8002350:	1888      	adds	r0, r1, r2
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	fba2 1203 	umull	r1, r2, r2, r3
 8002358:	1883      	adds	r3, r0, r2
 800235a:	461a      	mov	r2, r3
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	f04f 0400 	mov.w	r4, #0
 8002364:	0ccb      	lsrs	r3, r1, #19
 8002366:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800236a:	14d4      	asrs	r4, r2, #19
 800236c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 8002370:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002374:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002378:	eb11 0803 	adds.w	r8, r1, r3
 800237c:	eb42 0904 	adc.w	r9, r2, r4
 8002380:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002384:	eb13 0508 	adds.w	r5, r3, r8
 8002388:	eb44 0609 	adc.w	r6, r4, r9
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	0a29      	lsrs	r1, r5, #8
 8002396:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800239a:	1232      	asrs	r2, r6, #8
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <BME280_compensate_P+0x358>)
 800239e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80023a2:	b21d      	sxth	r5, r3
 80023a4:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80023a8:	f04f 0800 	mov.w	r8, #0
 80023ac:	f04f 0900 	mov.w	r9, #0
 80023b0:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80023b4:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80023b8:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80023bc:	eb18 0301 	adds.w	r3, r8, r1
 80023c0:	eb49 0402 	adc.w	r4, r9, r2
 80023c4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 80023c8:	68bb      	ldr	r3, [r7, #8]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80023d4:	24000754 	.word	0x24000754

080023d8 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af04      	add	r7, sp, #16
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
 80023e2:	460b      	mov	r3, r1
 80023e4:	71bb      	strb	r3, [r7, #6]
 80023e6:	4613      	mov	r3, r2
 80023e8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(bme280.hi2c, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <BME280_writeByte+0x38>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	b299      	uxth	r1, r3
 80023f2:	79bb      	ldrb	r3, [r7, #6]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	2364      	movs	r3, #100	; 0x64
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	2301      	movs	r3, #1
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	1d7b      	adds	r3, r7, #5
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2301      	movs	r3, #1
 8002404:	f016 fa86 	bl	8018914 <HAL_I2C_Mem_Write>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	24000754 	.word	0x24000754

08002414 <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b087      	sub	sp, #28
 8002418:	af04      	add	r7, sp, #16
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4603      	mov	r3, r0
 800241e:	71fb      	strb	r3, [r7, #7]
 8002420:	460b      	mov	r3, r1
 8002422:	71bb      	strb	r3, [r7, #6]
 8002424:	4613      	mov	r3, r2
 8002426:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(bme280.hi2c, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <BME280_readBytes+0x40>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	b299      	uxth	r1, r3
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	b29c      	uxth	r4, r3
 8002434:	797b      	ldrb	r3, [r7, #5]
 8002436:	b29b      	uxth	r3, r3
 8002438:	2264      	movs	r2, #100	; 0x64
 800243a:	9202      	str	r2, [sp, #8]
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2301      	movs	r3, #1
 8002444:	4622      	mov	r2, r4
 8002446:	f016 fb79 	bl	8018b3c <HAL_I2C_Mem_Read>
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	24000754 	.word	0x24000754

08002458 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 8002460:	4b46      	ldr	r3, [pc, #280]	; (800257c <TM_GPS_Init+0x124>)
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <TM_GPS_Init+0x128>)
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 800246e:	4844      	ldr	r0, [pc, #272]	; (8002580 <TM_GPS_Init+0x128>)
 8002470:	f001 f9a0 	bl	80037b4 <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <TM_GPS_Init+0x12c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	4a41      	ldr	r2, [pc, #260]	; (8002584 <TM_GPS_Init+0x12c>)
 800247e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 8002480:	4b40      	ldr	r3, [pc, #256]	; (8002584 <TM_GPS_Init+0x12c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002488:	4a3e      	ldr	r2, [pc, #248]	; (8002584 <TM_GPS_Init+0x12c>)
 800248a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 800248c:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <TM_GPS_Init+0x12c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	4a3b      	ldr	r2, [pc, #236]	; (8002584 <TM_GPS_Init+0x12c>)
 8002496:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002498:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <TM_GPS_Init+0x12c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f043 0320 	orr.w	r3, r3, #32
 80024a0:	4a38      	ldr	r2, [pc, #224]	; (8002584 <TM_GPS_Init+0x12c>)
 80024a2:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 80024a4:	4b37      	ldr	r3, [pc, #220]	; (8002584 <TM_GPS_Init+0x12c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	4a35      	ldr	r2, [pc, #212]	; (8002584 <TM_GPS_Init+0x12c>)
 80024ae:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <TM_GPS_Init+0x12c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	4a32      	ldr	r2, [pc, #200]	; (8002584 <TM_GPS_Init+0x12c>)
 80024ba:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <TM_GPS_Init+0x12c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f043 0310 	orr.w	r3, r3, #16
 80024c4:	4a2f      	ldr	r2, [pc, #188]	; (8002584 <TM_GPS_Init+0x12c>)
 80024c6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <TM_GPS_Init+0x12c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d0:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <TM_GPS_Init+0x12c>)
 80024d2:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <TM_GPS_Init+0x12c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	4a29      	ldr	r2, [pc, #164]	; (8002584 <TM_GPS_Init+0x12c>)
 80024de:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 80024e0:	4b28      	ldr	r3, [pc, #160]	; (8002584 <TM_GPS_Init+0x12c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <TM_GPS_Init+0x12c>)
 80024ea:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <TM_GPS_Init+0x12c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f4:	4a23      	ldr	r2, [pc, #140]	; (8002584 <TM_GPS_Init+0x12c>)
 80024f6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <TM_GPS_Init+0x12c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002500:	4a20      	ldr	r2, [pc, #128]	; (8002584 <TM_GPS_Init+0x12c>)
 8002502:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <TM_GPS_Init+0x12c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <TM_GPS_Init+0x12c>)
 800250e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <TM_GPS_Init+0x12c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <TM_GPS_Init+0x12c>)
 800251a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <TM_GPS_Init+0x12c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <TM_GPS_Init+0x12c>)
 8002526:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <TM_GPS_Init+0x12c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <TM_GPS_Init+0x12c>)
 8002532:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <TM_GPS_Init+0x12c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253c:	4a11      	ldr	r2, [pc, #68]	; (8002584 <TM_GPS_Init+0x12c>)
 800253e:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <TM_GPS_Init+0x12c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <TM_GPS_Init+0x12c>)
 800254a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <TM_GPS_Init+0x12c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <TM_GPS_Init+0x12c>)
 8002556:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <TM_GPS_Init+0x128>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <TM_GPS_Init+0x128>)
 8002562:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002566:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800256a:	4907      	ldr	r1, [pc, #28]	; (8002588 <TM_GPS_Init+0x130>)
 800256c:	4618      	mov	r0, r3
 800256e:	f01f f8bb 	bl	80216e8 <HAL_UART_Receive_DMA>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	240008e8 	.word	0x240008e8
 8002580:	24001138 	.word	0x24001138
 8002584:	240007b8 	.word	0x240007b8
 8002588:	24001264 	.word	0x24001264

0800258c <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update() {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002592:	2301      	movs	r3, #1
 8002594:	71fb      	strb	r3, [r7, #7]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 8002596:	2300      	movs	r3, #0
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	e013      	b.n	80025c4 <TM_GPS_Update+0x38>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 800259c:	4a13      	ldr	r2, [pc, #76]	; (80025ec <TM_GPS_Update+0x60>)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	4810      	ldr	r0, [pc, #64]	; (80025ec <TM_GPS_Update+0x60>)
 80025ac:	f000 f8da 	bl	8002764 <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <TM_GPS_Update+0x60>)
 80025b2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <TM_GPS_Update+0x32>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 80025ba:	2300      	movs	r3, #0
 80025bc:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80025ca:	dbe7      	blt.n	800259c <TM_GPS_Update+0x10>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <TM_GPS_Update+0x64>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <TM_GPS_Update+0x54>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <TM_GPS_Update+0x60>)
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 80025dc:	2302      	movs	r3, #2
 80025de:	e000      	b.n	80025e2 <TM_GPS_Update+0x56>
	}
	
	/* We have old data */
//	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);

	return result;
 80025e0:	79fb      	ldrb	r3, [r7, #7]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	24001138 	.word	0x24001138
 80025f0:	240008e8 	.word	0x240008e8

080025f4 <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80025fe:	4603      	mov	r3, r0
 8002600:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	2b0e      	cmp	r3, #14
 8002606:	f200 8086 	bhi.w	8002716 <TM_GPS_ConvertSpeed+0x122>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <TM_GPS_ConvertSpeed+0x1c>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	0800264d 	.word	0x0800264d
 8002614:	0800265b 	.word	0x0800265b
 8002618:	08002669 	.word	0x08002669
 800261c:	08002677 	.word	0x08002677
 8002620:	08002685 	.word	0x08002685
 8002624:	08002693 	.word	0x08002693
 8002628:	080026a1 	.word	0x080026a1
 800262c:	080026af 	.word	0x080026af
 8002630:	080026bd 	.word	0x080026bd
 8002634:	080026cb 	.word	0x080026cb
 8002638:	080026d9 	.word	0x080026d9
 800263c:	080026e7 	.word	0x080026e7
 8002640:	080026f5 	.word	0x080026f5
 8002644:	08002703 	.word	0x08002703
 8002648:	08002711 	.word	0x08002711
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 800264c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002650:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002728 <TM_GPS_ConvertSpeed+0x134>
 8002654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002658:	e05f      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 800265a:	edd7 7a01 	vldr	s15, [r7, #4]
 800265e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800272c <TM_GPS_ConvertSpeed+0x138>
 8002662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002666:	e058      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 8002668:	edd7 7a01 	vldr	s15, [r7, #4]
 800266c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002730 <TM_GPS_ConvertSpeed+0x13c>
 8002670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002674:	e051      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 8002676:	edd7 7a01 	vldr	s15, [r7, #4]
 800267a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002734 <TM_GPS_ConvertSpeed+0x140>
 800267e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002682:	e04a      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002684:	edd7 7a01 	vldr	s15, [r7, #4]
 8002688:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002738 <TM_GPS_ConvertSpeed+0x144>
 800268c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002690:	e043      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002692:	edd7 7a01 	vldr	s15, [r7, #4]
 8002696:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800273c <TM_GPS_ConvertSpeed+0x148>
 800269a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800269e:	e03c      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 80026a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002740 <TM_GPS_ConvertSpeed+0x14c>
 80026a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ac:	e035      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 80026ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002744 <TM_GPS_ConvertSpeed+0x150>
 80026b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ba:	e02e      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 80026bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002748 <TM_GPS_ConvertSpeed+0x154>
 80026c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c8:	e027      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 80026ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800274c <TM_GPS_ConvertSpeed+0x158>
 80026d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d6:	e020      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 80026d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80026dc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002750 <TM_GPS_ConvertSpeed+0x15c>
 80026e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e4:	e019      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 80026e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ea:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002754 <TM_GPS_ConvertSpeed+0x160>
 80026ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f2:	e012      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 80026f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002758 <TM_GPS_ConvertSpeed+0x164>
 80026fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002700:	e00b      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002702:	edd7 7a01 	vldr	s15, [r7, #4]
 8002706:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800275c <TM_GPS_ConvertSpeed+0x168>
 800270a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270e:	e004      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002710:	edd7 7a01 	vldr	s15, [r7, #4]
 8002714:	e001      	b.n	800271a <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 8002716:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002760 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 800271a:	eeb0 0a67 	vmov.f32	s0, s15
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	3a06bdf5 	.word	0x3a06bdf5
 800272c:	3f03afb8 	.word	0x3f03afb8
 8002730:	3fed0e56 	.word	0x3fed0e56
 8002734:	41f6f5c3 	.word	0x41f6f5c3
 8002738:	39a79d68 	.word	0x39a79d68
 800273c:	3f9353f8 	.word	0x3f9353f8
 8002740:	3fd81062 	.word	0x3fd81062
 8002744:	42ca999a 	.word	0x42ca999a
 8002748:	4201999a 	.word	0x4201999a
 800274c:	44f30000 	.word	0x44f30000
 8002750:	43426666 	.word	0x43426666
 8002754:	42508f5c 	.word	0x42508f5c
 8002758:	45438000 	.word	0x45438000
 800275c:	4331b333 	.word	0x4331b333
 8002760:	00000000 	.word	0x00000000

08002764 <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fff1 	bl	8003758 <TM_GPS_INT_FlagsOk>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f001 f819 	bl	80037b4 <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	2b24      	cmp	r3, #36	; 0x24
 800278e:	d116      	bne.n	80027be <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002790:	4b5d      	ldr	r3, [pc, #372]	; (8002908 <TM_GPS_INT_Do+0x1a4>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 8002796:	4b5d      	ldr	r3, [pc, #372]	; (800290c <TM_GPS_INT_Do+0x1a8>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 800279c:	4b5c      	ldr	r3, [pc, #368]	; (8002910 <TM_GPS_INT_Do+0x1ac>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 80027a2:	4b5c      	ldr	r3, [pc, #368]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 80027a8:	4b5a      	ldr	r3, [pc, #360]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	b2d1      	uxtb	r1, r2
 80027b0:	4a58      	ldr	r2, [pc, #352]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 80027b2:	7011      	strb	r1, [r2, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	4a58      	ldr	r2, [pc, #352]	; (8002918 <TM_GPS_INT_Do+0x1b4>)
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	5453      	strb	r3, [r2, r1]
 80027bc:	e09b      	b.n	80028f6 <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	2b2c      	cmp	r3, #44	; 0x2c
 80027c2:	d120      	bne.n	8002806 <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 80027c4:	4b51      	ldr	r3, [pc, #324]	; (800290c <TM_GPS_INT_Do+0x1a8>)
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	4053      	eors	r3, r2
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b4f      	ldr	r3, [pc, #316]	; (800290c <TM_GPS_INT_Do+0x1a8>)
 80027d0:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 80027d2:	4b50      	ldr	r3, [pc, #320]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	b2d1      	uxtb	r1, r2
 80027da:	4a4e      	ldr	r2, [pc, #312]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 80027dc:	7011      	strb	r1, [r2, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b4d      	ldr	r3, [pc, #308]	; (8002918 <TM_GPS_INT_Do+0x1b4>)
 80027e2:	2100      	movs	r1, #0
 80027e4:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f001 f808 	bl	80037fc <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f89f 	bl	8002930 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <TM_GPS_INT_Do+0x1ac>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	3301      	adds	r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b45      	ldr	r3, [pc, #276]	; (8002910 <TM_GPS_INT_Do+0x1ac>)
 80027fc:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 80027fe:	4b45      	ldr	r3, [pc, #276]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e077      	b.n	80028f6 <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	2b0a      	cmp	r3, #10
 800280a:	d113      	bne.n	8002834 <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 800280c:	4b40      	ldr	r3, [pc, #256]	; (8002910 <TM_GPS_INT_Do+0x1ac>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002812:	4b42      	ldr	r3, [pc, #264]	; (800291c <TM_GPS_INT_Do+0x1b8>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d16d      	bne.n	80028f6 <TM_GPS_INT_Do+0x192>
 800281a:	4b41      	ldr	r3, [pc, #260]	; (8002920 <TM_GPS_INT_Do+0x1bc>)
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	4b41      	ldr	r3, [pc, #260]	; (8002924 <TM_GPS_INT_Do+0x1c0>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d167      	bne.n	80028f6 <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <TM_GPS_INT_Do+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282e:	4a3e      	ldr	r2, [pc, #248]	; (8002928 <TM_GPS_INT_Do+0x1c4>)
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e060      	b.n	80028f6 <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	2b0d      	cmp	r3, #13
 8002838:	d128      	bne.n	800288c <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	b2d1      	uxtb	r1, r2
 8002842:	4a34      	ldr	r2, [pc, #208]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 8002844:	7011      	strb	r1, [r2, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	4b33      	ldr	r3, [pc, #204]	; (8002918 <TM_GPS_INT_Do+0x1b4>)
 800284a:	2100      	movs	r1, #0
 800284c:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 800284e:	4b32      	ldr	r3, [pc, #200]	; (8002918 <TM_GPS_INT_Do+0x1b4>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 ff56 	bl	8003704 <TM_GPS_INT_Hex2Dec>
 8002858:	4603      	mov	r3, r0
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	b2dc      	uxtb	r4, r3
 800285e:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <TM_GPS_INT_Do+0x1b4>)
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 ff4e 	bl	8003704 <TM_GPS_INT_Hex2Dec>
 8002868:	4603      	mov	r3, r0
 800286a:	4423      	add	r3, r4
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <TM_GPS_INT_Do+0x1c8>)
 8002870:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 8002872:	4b2e      	ldr	r3, [pc, #184]	; (800292c <TM_GPS_INT_Do+0x1c8>)
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4b25      	ldr	r3, [pc, #148]	; (800290c <TM_GPS_INT_Do+0x1a8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d002      	beq.n	8002884 <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 ff98 	bl	80037b4 <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <TM_GPS_INT_Do+0x1ac>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	e034      	b.n	80028f6 <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	2b2a      	cmp	r3, #42	; 0x2a
 8002890:	d11c      	bne.n	80028cc <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <TM_GPS_INT_Do+0x1a4>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	b2d1      	uxtb	r1, r2
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 80028a2:	7011      	strb	r1, [r2, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <TM_GPS_INT_Do+0x1b4>)
 80028a8:	2100      	movs	r1, #0
 80028aa:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 ffa5 	bl	80037fc <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f83c 	bl	8002930 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 80028b8:	4b15      	ldr	r3, [pc, #84]	; (8002910 <TM_GPS_INT_Do+0x1ac>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	3301      	adds	r3, #1
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <TM_GPS_INT_Do+0x1ac>)
 80028c2:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e014      	b.n	80028f6 <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <TM_GPS_INT_Do+0x1a4>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d106      	bne.n	80028e2 <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <TM_GPS_INT_Do+0x1a8>)
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	4053      	eors	r3, r2
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <TM_GPS_INT_Do+0x1a8>)
 80028e0:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	b2d1      	uxtb	r1, r2
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <TM_GPS_INT_Do+0x1b0>)
 80028ec:	7011      	strb	r1, [r2, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	4a09      	ldr	r2, [pc, #36]	; (8002918 <TM_GPS_INT_Do+0x1b4>)
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fdee 	bl	80034d8 <TM_GPS_INT_Return>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	bf00      	nop
 8002908:	240007b3 	.word	0x240007b3
 800290c:	240007b1 	.word	0x240007b1
 8002910:	240007af 	.word	0x240007af
 8002914:	240007b0 	.word	0x240007b0
 8002918:	240007a0 	.word	0x240007a0
 800291c:	24000000 	.word	0x24000000
 8002920:	240008f3 	.word	0x240008f3
 8002924:	240008f4 	.word	0x240008f4
 8002928:	240007b4 	.word	0x240007b4
 800292c:	240007b2 	.word	0x240007b2

08002930 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 8002930:	b580      	push	{r7, lr}
 8002932:	ed2d 8b02 	vpush	{d8}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 800293c:	4bc2      	ldr	r3, [pc, #776]	; (8002c48 <TM_GPS_INT_CheckTerm+0x318>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d134      	bne.n	80029ae <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 8002944:	49c1      	ldr	r1, [pc, #772]	; (8002c4c <TM_GPS_INT_CheckTerm+0x31c>)
 8002946:	48c2      	ldr	r0, [pc, #776]	; (8002c50 <TM_GPS_INT_CheckTerm+0x320>)
 8002948:	f000 fe76 	bl	8003638 <TM_GPS_INT_StringStartsWith>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 8002952:	4bc0      	ldr	r3, [pc, #768]	; (8002c54 <TM_GPS_INT_CheckTerm+0x324>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e023      	b.n	80029a2 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 800295a:	49bf      	ldr	r1, [pc, #764]	; (8002c58 <TM_GPS_INT_CheckTerm+0x328>)
 800295c:	48bc      	ldr	r0, [pc, #752]	; (8002c50 <TM_GPS_INT_CheckTerm+0x320>)
 800295e:	f000 fe6b 	bl	8003638 <TM_GPS_INT_StringStartsWith>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 8002968:	4bba      	ldr	r3, [pc, #744]	; (8002c54 <TM_GPS_INT_CheckTerm+0x324>)
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	e018      	b.n	80029a2 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 8002970:	49ba      	ldr	r1, [pc, #744]	; (8002c5c <TM_GPS_INT_CheckTerm+0x32c>)
 8002972:	48b7      	ldr	r0, [pc, #732]	; (8002c50 <TM_GPS_INT_CheckTerm+0x320>)
 8002974:	f000 fe60 	bl	8003638 <TM_GPS_INT_StringStartsWith>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 800297e:	4bb5      	ldr	r3, [pc, #724]	; (8002c54 <TM_GPS_INT_CheckTerm+0x324>)
 8002980:	2202      	movs	r2, #2
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	e00d      	b.n	80029a2 <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 8002986:	49b6      	ldr	r1, [pc, #728]	; (8002c60 <TM_GPS_INT_CheckTerm+0x330>)
 8002988:	48b1      	ldr	r0, [pc, #708]	; (8002c50 <TM_GPS_INT_CheckTerm+0x320>)
 800298a:	f000 fe55 	bl	8003638 <TM_GPS_INT_StringStartsWith>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 8002994:	4baf      	ldr	r3, [pc, #700]	; (8002c54 <TM_GPS_INT_CheckTerm+0x324>)
 8002996:	2203      	movs	r2, #3
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e002      	b.n	80029a2 <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 800299c:	4bad      	ldr	r3, [pc, #692]	; (8002c54 <TM_GPS_INT_CheckTerm+0x324>)
 800299e:	2204      	movs	r2, #4
 80029a0:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 80029a2:	49ab      	ldr	r1, [pc, #684]	; (8002c50 <TM_GPS_INT_CheckTerm+0x320>)
 80029a4:	48af      	ldr	r0, [pc, #700]	; (8002c64 <TM_GPS_INT_CheckTerm+0x334>)
 80029a6:	f02b fceb 	bl	802e380 <strcpy>
 80029aa:	f000 bd7b 	b.w	80034a4 <TM_GPS_INT_CheckTerm+0xb74>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 80029ae:	4ba9      	ldr	r3, [pc, #676]	; (8002c54 <TM_GPS_INT_CheckTerm+0x324>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	015b      	lsls	r3, r3, #5
 80029b4:	4aa4      	ldr	r2, [pc, #656]	; (8002c48 <TM_GPS_INT_CheckTerm+0x318>)
 80029b6:	7812      	ldrb	r2, [r2, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	3b01      	subs	r3, #1
 80029bc:	2b62      	cmp	r3, #98	; 0x62
 80029be:	f200 84d9 	bhi.w	8003374 <TM_GPS_INT_CheckTerm+0xa44>
 80029c2:	a201      	add	r2, pc, #4	; (adr r2, 80029c8 <TM_GPS_INT_CheckTerm+0x98>)
 80029c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c8:	08002eb9 	.word	0x08002eb9
 80029cc:	08002b55 	.word	0x08002b55
 80029d0:	08002c15 	.word	0x08002c15
 80029d4:	08002c79 	.word	0x08002c79
 80029d8:	08002d39 	.word	0x08002d39
 80029dc:	08002d81 	.word	0x08002d81
 80029e0:	08002d5f 	.word	0x08002d5f
 80029e4:	08003375 	.word	0x08003375
 80029e8:	08002da3 	.word	0x08002da3
 80029ec:	08003375 	.word	0x08003375
 80029f0:	08003375 	.word	0x08003375
 80029f4:	08003375 	.word	0x08003375
 80029f8:	08003375 	.word	0x08003375
 80029fc:	08003375 	.word	0x08003375
 8002a00:	08003375 	.word	0x08003375
 8002a04:	08003375 	.word	0x08003375
 8002a08:	08003375 	.word	0x08003375
 8002a0c:	08003375 	.word	0x08003375
 8002a10:	08003375 	.word	0x08003375
 8002a14:	08003375 	.word	0x08003375
 8002a18:	08003375 	.word	0x08003375
 8002a1c:	08003375 	.word	0x08003375
 8002a20:	08003375 	.word	0x08003375
 8002a24:	08003375 	.word	0x08003375
 8002a28:	08003375 	.word	0x08003375
 8002a2c:	08003375 	.word	0x08003375
 8002a30:	08003375 	.word	0x08003375
 8002a34:	08003375 	.word	0x08003375
 8002a38:	08003375 	.word	0x08003375
 8002a3c:	08003375 	.word	0x08003375
 8002a40:	08003375 	.word	0x08003375
 8002a44:	08003375 	.word	0x08003375
 8002a48:	08003375 	.word	0x08003375
 8002a4c:	080030bd 	.word	0x080030bd
 8002a50:	08003375 	.word	0x08003375
 8002a54:	08003375 	.word	0x08003375
 8002a58:	08003375 	.word	0x08003375
 8002a5c:	08003375 	.word	0x08003375
 8002a60:	08002fa1 	.word	0x08002fa1
 8002a64:	080030e1 	.word	0x080030e1
 8002a68:	08003023 	.word	0x08003023
 8002a6c:	08003375 	.word	0x08003375
 8002a70:	08003375 	.word	0x08003375
 8002a74:	08003375 	.word	0x08003375
 8002a78:	08003375 	.word	0x08003375
 8002a7c:	08003375 	.word	0x08003375
 8002a80:	08003375 	.word	0x08003375
 8002a84:	08003375 	.word	0x08003375
 8002a88:	08003375 	.word	0x08003375
 8002a8c:	08003375 	.word	0x08003375
 8002a90:	08003375 	.word	0x08003375
 8002a94:	08003375 	.word	0x08003375
 8002a98:	08003375 	.word	0x08003375
 8002a9c:	08003375 	.word	0x08003375
 8002aa0:	08003375 	.word	0x08003375
 8002aa4:	08003375 	.word	0x08003375
 8002aa8:	08003375 	.word	0x08003375
 8002aac:	08003375 	.word	0x08003375
 8002ab0:	08003375 	.word	0x08003375
 8002ab4:	08003375 	.word	0x08003375
 8002ab8:	08003375 	.word	0x08003375
 8002abc:	08003375 	.word	0x08003375
 8002ac0:	08003375 	.word	0x08003375
 8002ac4:	08003375 	.word	0x08003375
 8002ac8:	08003375 	.word	0x08003375
 8002acc:	080032e1 	.word	0x080032e1
 8002ad0:	08003305 	.word	0x08003305
 8002ad4:	08003305 	.word	0x08003305
 8002ad8:	08003305 	.word	0x08003305
 8002adc:	08003305 	.word	0x08003305
 8002ae0:	08003305 	.word	0x08003305
 8002ae4:	08003305 	.word	0x08003305
 8002ae8:	08003305 	.word	0x08003305
 8002aec:	08003305 	.word	0x08003305
 8002af0:	08003305 	.word	0x08003305
 8002af4:	08003305 	.word	0x08003305
 8002af8:	08003305 	.word	0x08003305
 8002afc:	08003305 	.word	0x08003305
 8002b00:	080031d5 	.word	0x080031d5
 8002b04:	0800315b 	.word	0x0800315b
 8002b08:	0800324f 	.word	0x0800324f
 8002b0c:	08003375 	.word	0x08003375
 8002b10:	08003375 	.word	0x08003375
 8002b14:	08003375 	.word	0x08003375
 8002b18:	08003375 	.word	0x08003375
 8002b1c:	08003375 	.word	0x08003375
 8002b20:	08003375 	.word	0x08003375
 8002b24:	08003375 	.word	0x08003375
 8002b28:	08003375 	.word	0x08003375
 8002b2c:	08003375 	.word	0x08003375
 8002b30:	08003375 	.word	0x08003375
 8002b34:	08003375 	.word	0x08003375
 8002b38:	08003375 	.word	0x08003375
 8002b3c:	08003375 	.word	0x08003375
 8002b40:	08003375 	.word	0x08003375
 8002b44:	08003375 	.word	0x08003375
 8002b48:	08003375 	.word	0x08003375
 8002b4c:	08003375 	.word	0x08003375
 8002b50:	08003351 	.word	0x08003351
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002b54:	f107 0308 	add.w	r3, r7, #8
 8002b58:	4619      	mov	r1, r3
 8002b5a:	483d      	ldr	r0, [pc, #244]	; (8002c50 <TM_GPS_INT_CheckTerm+0x320>)
 8002b5c:	f000 fd89 	bl	8003672 <TM_GPS_INT_Atoi>
 8002b60:	4603      	mov	r3, r0
 8002b62:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <TM_GPS_INT_CheckTerm+0x338>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b76:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <TM_GPS_INT_CheckTerm+0x33c>)
 8002b78:	ed83 7b00 	vstr	d7, [r3]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <TM_GPS_INT_CheckTerm+0x33c>)
 8002b7e:	ed93 6b00 	vldr	d6, [r3]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <TM_GPS_INT_CheckTerm+0x338>)
 8002b86:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2164      	movs	r1, #100	; 0x64
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b9c:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002c70 <TM_GPS_INT_CheckTerm+0x340>
 8002ba0:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8002ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ba8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bac:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <TM_GPS_INT_CheckTerm+0x33c>)
 8002bae:	ed83 7b00 	vstr	d7, [r3]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <TM_GPS_INT_CheckTerm+0x320>)
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f107 0208 	add.w	r2, r7, #8
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fd54 	bl	8003672 <TM_GPS_INT_Atoi>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	200a      	movs	r0, #10
 8002bde:	f000 fd75 	bl	80036cc <TM_GPS_INT_Pow>
 8002be2:	ee07 0a90 	vmov	s15, r0
 8002be6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002bea:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002c40 <TM_GPS_INT_CheckTerm+0x310>
 8002bee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bf2:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <TM_GPS_INT_CheckTerm+0x33c>)
 8002bf8:	ed93 7b00 	vldr	d7, [r3]
 8002bfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <TM_GPS_INT_CheckTerm+0x33c>)
 8002c02:	ed83 7b00 	vstr	d7, [r3]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <TM_GPS_INT_CheckTerm+0x344>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <TM_GPS_INT_CheckTerm+0x344>)
 8002c10:	6013      	str	r3, [r2, #0]
			break;
 8002c12:	e3b2      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <TM_GPS_INT_CheckTerm+0x320>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b53      	cmp	r3, #83	; 0x53
 8002c1a:	d107      	bne.n	8002c2c <TM_GPS_INT_CheckTerm+0x2fc>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 8002c1c:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <TM_GPS_INT_CheckTerm+0x33c>)
 8002c1e:	ed93 7b00 	vldr	d7, [r3]
 8002c22:	eeb1 7b47 	vneg.f64	d7, d7
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <TM_GPS_INT_CheckTerm+0x33c>)
 8002c28:	ed83 7b00 	vstr	d7, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <TM_GPS_INT_CheckTerm+0x344>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c34:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <TM_GPS_INT_CheckTerm+0x344>)
 8002c36:	6013      	str	r3, [r2, #0]
			break;
 8002c38:	e39f      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
 8002c3a:	bf00      	nop
 8002c3c:	f3af 8000 	nop.w
 8002c40:	00000000 	.word	0x00000000
 8002c44:	404e0000 	.word	0x404e0000
 8002c48:	240007af 	.word	0x240007af
 8002c4c:	0802ef90 	.word	0x0802ef90
 8002c50:	240007a0 	.word	0x240007a0
 8002c54:	24000000 	.word	0x24000000
 8002c58:	0802ef98 	.word	0x0802ef98
 8002c5c:	0802efa0 	.word	0x0802efa0
 8002c60:	0802efa8 	.word	0x0802efa8
 8002c64:	240008ec 	.word	0x240008ec
 8002c68:	51eb851f 	.word	0x51eb851f
 8002c6c:	240007c0 	.word	0x240007c0
 8002c70:	42700000 	.word	0x42700000
 8002c74:	240007b4 	.word	0x240007b4
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002c78:	f107 0308 	add.w	r3, r7, #8
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	48c0      	ldr	r0, [pc, #768]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002c80:	f000 fcf7 	bl	8003672 <TM_GPS_INT_Atoi>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4abe      	ldr	r2, [pc, #760]	; (8002f84 <TM_GPS_INT_CheckTerm+0x654>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c9a:	4bbb      	ldr	r3, [pc, #748]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002c9c:	ed83 7b02 	vstr	d7, [r3, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 8002ca0:	4bb9      	ldr	r3, [pc, #740]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002ca2:	ed93 6b02 	vldr	d6, [r3, #8]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4bb6      	ldr	r3, [pc, #728]	; (8002f84 <TM_GPS_INT_CheckTerm+0x654>)
 8002caa:	fba3 1302 	umull	r1, r3, r3, r2
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2164      	movs	r1, #100	; 0x64
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc0:	eddf 5ab2 	vldr	s11, [pc, #712]	; 8002f8c <TM_GPS_INT_CheckTerm+0x65c>
 8002cc4:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8002cc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ccc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002cd0:	4bad      	ldr	r3, [pc, #692]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002cd2:	ed83 7b02 	vstr	d7, [r3, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	4aa8      	ldr	r2, [pc, #672]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f107 0208 	add.w	r2, r7, #8
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fcc2 	bl	8003672 <TM_GPS_INT_Atoi>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	200a      	movs	r0, #10
 8002d02:	f000 fce3 	bl	80036cc <TM_GPS_INT_Pow>
 8002d06:	ee07 0a90 	vmov	s15, r0
 8002d0a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d0e:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8002f78 <TM_GPS_INT_CheckTerm+0x648>
 8002d12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d16:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002d1a:	4b9b      	ldr	r3, [pc, #620]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002d1c:	ed93 7b02 	vldr	d7, [r3, #8]
 8002d20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d24:	4b98      	ldr	r3, [pc, #608]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002d26:	ed83 7b02 	vstr	d7, [r3, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 8002d2a:	4b99      	ldr	r3, [pc, #612]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	4a97      	ldr	r2, [pc, #604]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002d34:	6013      	str	r3, [r2, #0]
			break;
 8002d36:	e320      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 8002d38:	4b91      	ldr	r3, [pc, #580]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b57      	cmp	r3, #87	; 0x57
 8002d3e:	d107      	bne.n	8002d50 <TM_GPS_INT_CheckTerm+0x420>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 8002d40:	4b91      	ldr	r3, [pc, #580]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002d42:	ed93 7b02 	vldr	d7, [r3, #8]
 8002d46:	eeb1 7b47 	vneg.f64	d7, d7
 8002d4a:	4b8f      	ldr	r3, [pc, #572]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002d4c:	ed83 7b02 	vstr	d7, [r3, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 8002d50:	4b8f      	ldr	r3, [pc, #572]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f043 0320 	orr.w	r3, r3, #32
 8002d58:	4a8d      	ldr	r2, [pc, #564]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002d5a:	6013      	str	r3, [r2, #0]
			break;
 8002d5c:	e30d      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	4619      	mov	r1, r3
 8002d64:	4886      	ldr	r0, [pc, #536]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002d66:	f000 fc84 	bl	8003672 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b86      	ldr	r3, [pc, #536]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002d70:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 8002d72:	4b87      	ldr	r3, [pc, #540]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	4a85      	ldr	r2, [pc, #532]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002d7c:	6013      	str	r3, [r2, #0]
			break;
 8002d7e:	e2fc      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	4619      	mov	r1, r3
 8002d86:	487e      	ldr	r0, [pc, #504]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002d88:	f000 fc73 	bl	8003672 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b7d      	ldr	r3, [pc, #500]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002d92:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 8002d94:	4b7e      	ldr	r3, [pc, #504]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	4a7c      	ldr	r2, [pc, #496]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002d9e:	6013      	str	r3, [r2, #0]
			break;
 8002da0:	e2eb      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 8002da2:	4b77      	ldr	r3, [pc, #476]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b2d      	cmp	r3, #45	; 0x2d
 8002da8:	d145      	bne.n	8002e36 <TM_GPS_INT_CheckTerm+0x506>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	4619      	mov	r1, r3
 8002db0:	4878      	ldr	r0, [pc, #480]	; (8002f94 <TM_GPS_INT_CheckTerm+0x664>)
 8002db2:	f000 fc5e 	bl	8003672 <TM_GPS_INT_Atoi>
 8002db6:	4603      	mov	r3, r0
 8002db8:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc4:	4b70      	ldr	r3, [pc, #448]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002dc6:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	4a69      	ldr	r2, [pc, #420]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002dda:	4413      	add	r3, r2
 8002ddc:	f107 0208 	add.w	r2, r7, #8
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc45 	bl	8003672 <TM_GPS_INT_Atoi>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	200a      	movs	r0, #10
 8002dfc:	f000 fc66 	bl	80036cc <TM_GPS_INT_Pow>
 8002e00:	ee07 0a90 	vmov	s15, r0
 8002e04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002e08:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002e0c:	4b5e      	ldr	r3, [pc, #376]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002e0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e1e:	4b5a      	ldr	r3, [pc, #360]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002e20:	edc3 7a04 	vstr	s15, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 8002e24:	4b58      	ldr	r3, [pc, #352]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002e26:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e2a:	eef1 7a67 	vneg.f32	s15, s15
 8002e2e:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002e30:	edc3 7a04 	vstr	s15, [r3, #16]
 8002e34:	e039      	b.n	8002eaa <TM_GPS_INT_CheckTerm+0x57a>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4850      	ldr	r0, [pc, #320]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002e3e:	f000 fc18 	bl	8003672 <TM_GPS_INT_Atoi>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	ee07 3a90 	vmov	s15, r3
 8002e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e50:	4b4d      	ldr	r3, [pc, #308]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002e52:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	4a48      	ldr	r2, [pc, #288]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002e60:	4413      	add	r3, r2
 8002e62:	f107 0208 	add.w	r2, r7, #8
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fc02 	bl	8003672 <TM_GPS_INT_Atoi>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	ee07 3a90 	vmov	s15, r3
 8002e78:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	200a      	movs	r0, #10
 8002e82:	f000 fc23 	bl	80036cc <TM_GPS_INT_Pow>
 8002e86:	ee07 0a90 	vmov	s15, r0
 8002e8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002e8e:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002e94:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ea0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ea4:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002ea6:	edc3 7a04 	vstr	s15, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 8002eaa:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f043 0310 	orr.w	r3, r3, #16
 8002eb2:	4a37      	ldr	r2, [pc, #220]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002eb4:	6013      	str	r3, [r2, #0]
			break;
 8002eb6:	e260      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002eb8:	f107 0308 	add.w	r3, r7, #8
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4830      	ldr	r0, [pc, #192]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002ec0:	f000 fbd7 	bl	8003672 <TM_GPS_INT_Atoi>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <TM_GPS_INT_CheckTerm+0x654>)
 8002ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	2164      	movs	r1, #100	; 0x64
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002ede:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eea:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002f98 <TM_GPS_INT_CheckTerm+0x668>
 8002eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ef6:	ee17 2a90 	vmov	r2, s15
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <TM_GPS_INT_CheckTerm+0x654>)
 8002efc:	fb83 1302 	smull	r1, r3, r3, r2
 8002f00:	1159      	asrs	r1, r3, #5
 8002f02:	17d3      	asrs	r3, r2, #31
 8002f04:	1acb      	subs	r3, r1, r3
 8002f06:	2164      	movs	r1, #100	; 0x64
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002f12:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002f9c <TM_GPS_INT_CheckTerm+0x66c>
 8002f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f2a:	ee17 2a90 	vmov	r2, s15
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <TM_GPS_INT_CheckTerm+0x654>)
 8002f30:	fb83 1302 	smull	r1, r3, r3, r2
 8002f34:	1159      	asrs	r1, r3, #5
 8002f36:	17d3      	asrs	r3, r2, #31
 8002f38:	1acb      	subs	r3, r1, r3
 8002f3a:	2164      	movs	r1, #100	; 0x64
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002f46:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <TM_GPS_INT_CheckTerm+0x650>)
 8002f52:	4413      	add	r3, r2
 8002f54:	f107 0208 	add.w	r2, r7, #8
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fb89 	bl	8003672 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <TM_GPS_INT_CheckTerm+0x658>)
 8002f66:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f70:	4a07      	ldr	r2, [pc, #28]	; (8002f90 <TM_GPS_INT_CheckTerm+0x660>)
 8002f72:	6013      	str	r3, [r2, #0]
			break;
 8002f74:	e201      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
 8002f76:	bf00      	nop
 8002f78:	00000000 	.word	0x00000000
 8002f7c:	404e0000 	.word	0x404e0000
 8002f80:	240007a0 	.word	0x240007a0
 8002f84:	51eb851f 	.word	0x51eb851f
 8002f88:	240007c0 	.word	0x240007c0
 8002f8c:	42700000 	.word	0x42700000
 8002f90:	240007b4 	.word	0x240007b4
 8002f94:	240007a1 	.word	0x240007a1
 8002f98:	3c23d70a 	.word	0x3c23d70a
 8002f9c:	38d1b717 	.word	0x38d1b717
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	48c8      	ldr	r0, [pc, #800]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 8002fa8:	f000 fb63 	bl	8003672 <TM_GPS_INT_Atoi>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fba:	4bc4      	ldr	r3, [pc, #784]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 8002fbc:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	4abf      	ldr	r2, [pc, #764]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 8002fca:	4413      	add	r3, r2
 8002fcc:	f107 0208 	add.w	r2, r7, #8
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb4d 	bl	8003672 <TM_GPS_INT_Atoi>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	4619      	mov	r1, r3
 8002fee:	200a      	movs	r0, #10
 8002ff0:	f000 fb6c 	bl	80036cc <TM_GPS_INT_Pow>
 8002ff4:	ee07 0a90 	vmov	s15, r0
 8002ff8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002ffc:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8003000:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003004:	4bb1      	ldr	r3, [pc, #708]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 8003006:	edd3 7a08 	vldr	s15, [r3, #32]
 800300a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300e:	4baf      	ldr	r3, [pc, #700]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 8003010:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 8003014:	4bae      	ldr	r3, [pc, #696]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	4aac      	ldr	r2, [pc, #688]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 800301e:	6013      	str	r3, [r2, #0]
			break;
 8003020:	e1ab      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003022:	f107 0308 	add.w	r3, r7, #8
 8003026:	4619      	mov	r1, r3
 8003028:	48a7      	ldr	r0, [pc, #668]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 800302a:	f000 fb22 	bl	8003672 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4ba8      	ldr	r3, [pc, #672]	; (80032d4 <TM_GPS_INT_CheckTerm+0x9a4>)
 8003032:	fba3 1302 	umull	r1, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2164      	movs	r1, #100	; 0x64
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4ba2      	ldr	r3, [pc, #648]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 8003044:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003050:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80032d8 <TM_GPS_INT_CheckTerm+0x9a8>
 8003054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800305c:	ee17 2a90 	vmov	r2, s15
 8003060:	4b9c      	ldr	r3, [pc, #624]	; (80032d4 <TM_GPS_INT_CheckTerm+0x9a4>)
 8003062:	fb83 1302 	smull	r1, r3, r3, r2
 8003066:	1159      	asrs	r1, r3, #5
 8003068:	17d3      	asrs	r3, r2, #31
 800306a:	1acb      	subs	r3, r1, r3
 800306c:	2164      	movs	r1, #100	; 0x64
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4b95      	ldr	r3, [pc, #596]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 8003078:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	ee07 3a90 	vmov	s15, r3
 8003080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003084:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80032dc <TM_GPS_INT_CheckTerm+0x9ac>
 8003088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003090:	ee17 2a90 	vmov	r2, s15
 8003094:	4b8f      	ldr	r3, [pc, #572]	; (80032d4 <TM_GPS_INT_CheckTerm+0x9a4>)
 8003096:	fb83 1302 	smull	r1, r3, r3, r2
 800309a:	1159      	asrs	r1, r3, #5
 800309c:	17d3      	asrs	r3, r2, #31
 800309e:	1acb      	subs	r3, r1, r3
 80030a0:	2164      	movs	r1, #100	; 0x64
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4b88      	ldr	r3, [pc, #544]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 80030ac:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 80030ae:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b6:	4a86      	ldr	r2, [pc, #536]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030b8:	6013      	str	r3, [r2, #0]
			break;
 80030ba:	e15e      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 80030bc:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b41      	cmp	r3, #65	; 0x41
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b7f      	ldr	r3, [pc, #508]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 80030ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030da:	4a7d      	ldr	r2, [pc, #500]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030dc:	6013      	str	r3, [r2, #0]
			break;
 80030de:	e14c      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80030e0:	f107 0308 	add.w	r3, r7, #8
 80030e4:	4619      	mov	r1, r3
 80030e6:	4878      	ldr	r0, [pc, #480]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 80030e8:	f000 fac3 	bl	8003672 <TM_GPS_INT_Atoi>
 80030ec:	4603      	mov	r3, r0
 80030ee:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	4b74      	ldr	r3, [pc, #464]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 80030fc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	3301      	adds	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	4a6f      	ldr	r2, [pc, #444]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 800310a:	4413      	add	r3, r2
 800310c:	f107 0208 	add.w	r2, r7, #8
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f000 faad 	bl	8003672 <TM_GPS_INT_Atoi>
 8003118:	4603      	mov	r3, r0
 800311a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	4619      	mov	r1, r3
 800312a:	200a      	movs	r0, #10
 800312c:	f000 face 	bl	80036cc <TM_GPS_INT_Pow>
 8003130:	ee07 0a90 	vmov	s15, r0
 8003134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003138:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800313c:	4b63      	ldr	r3, [pc, #396]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 800313e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	4b61      	ldr	r3, [pc, #388]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 8003148:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 800314c:	4b60      	ldr	r3, [pc, #384]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003154:	4a5e      	ldr	r2, [pc, #376]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003156:	6013      	str	r3, [r2, #0]
			break;
 8003158:	e10f      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	4619      	mov	r1, r3
 8003160:	4859      	ldr	r0, [pc, #356]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 8003162:	f000 fa86 	bl	8003672 <TM_GPS_INT_Atoi>
 8003166:	4603      	mov	r3, r0
 8003168:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003174:	4b55      	ldr	r3, [pc, #340]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 8003176:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	3301      	adds	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	4a51      	ldr	r2, [pc, #324]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 8003184:	4413      	add	r3, r2
 8003186:	f107 0208 	add.w	r2, r7, #8
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fa70 	bl	8003672 <TM_GPS_INT_Atoi>
 8003192:	4603      	mov	r3, r0
 8003194:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	ee07 3a90 	vmov	s15, r3
 800319c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	4619      	mov	r1, r3
 80031a4:	200a      	movs	r0, #10
 80031a6:	f000 fa91 	bl	80036cc <TM_GPS_INT_Pow>
 80031aa:	ee07 0a90 	vmov	s15, r0
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80031b6:	4b45      	ldr	r3, [pc, #276]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 80031b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80031bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c0:	4b42      	ldr	r3, [pc, #264]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 80031c2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 80031c6:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031ce:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 80031d0:	6013      	str	r3, [r2, #0]
			break;
 80031d2:	e0d2      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80031d4:	f107 0308 	add.w	r3, r7, #8
 80031d8:	4619      	mov	r1, r3
 80031da:	483b      	ldr	r0, [pc, #236]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 80031dc:	f000 fa49 	bl	8003672 <TM_GPS_INT_Atoi>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ee:	4b37      	ldr	r3, [pc, #220]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 80031f0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	3301      	adds	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 80031fe:	4413      	add	r3, r2
 8003200:	f107 0208 	add.w	r2, r7, #8
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fa33 	bl	8003672 <TM_GPS_INT_Atoi>
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	4619      	mov	r1, r3
 800321e:	200a      	movs	r0, #10
 8003220:	f000 fa54 	bl	80036cc <TM_GPS_INT_Pow>
 8003224:	ee07 0a90 	vmov	s15, r0
 8003228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003230:	4b26      	ldr	r3, [pc, #152]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 8003232:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 800323c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 8003240:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003248:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 800324a:	6013      	str	r3, [r2, #0]
			break;
 800324c:	e095      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 800324e:	f107 0308 	add.w	r3, r7, #8
 8003252:	4619      	mov	r1, r3
 8003254:	481c      	ldr	r0, [pc, #112]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 8003256:	f000 fa0c 	bl	8003672 <TM_GPS_INT_Atoi>
 800325a:	4603      	mov	r3, r0
 800325c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	ee07 3a90 	vmov	s15, r3
 8003264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 800326a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	3301      	adds	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <TM_GPS_INT_CheckTerm+0x998>)
 8003278:	4413      	add	r3, r2
 800327a:	f107 0208 	add.w	r2, r7, #8
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f9f6 	bl	8003672 <TM_GPS_INT_Atoi>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	4619      	mov	r1, r3
 8003298:	200a      	movs	r0, #10
 800329a:	f000 fa17 	bl	80036cc <TM_GPS_INT_Pow>
 800329e:	ee07 0a90 	vmov	s15, r0
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 80032ac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <TM_GPS_INT_CheckTerm+0x99c>)
 80032b6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032c2:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <TM_GPS_INT_CheckTerm+0x9a0>)
 80032c4:	6013      	str	r3, [r2, #0]
			break;
 80032c6:	e058      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
 80032c8:	240007a0 	.word	0x240007a0
 80032cc:	240007c0 	.word	0x240007c0
 80032d0:	240007b4 	.word	0x240007b4
 80032d4:	51eb851f 	.word	0x51eb851f
 80032d8:	3c23d70a 	.word	0x3c23d70a
 80032dc:	38d1b717 	.word	0x38d1b717
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80032e0:	f107 0308 	add.w	r3, r7, #8
 80032e4:	4619      	mov	r1, r3
 80032e6:	4872      	ldr	r0, [pc, #456]	; (80034b0 <TM_GPS_INT_CheckTerm+0xb80>)
 80032e8:	f000 f9c3 	bl	8003672 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <TM_GPS_INT_CheckTerm+0xb84>)
 80032f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 80032f6:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <TM_GPS_INT_CheckTerm+0xb88>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fe:	4a6e      	ldr	r2, [pc, #440]	; (80034b8 <TM_GPS_INT_CheckTerm+0xb88>)
 8003300:	6013      	str	r3, [r2, #0]
			break;
 8003302:	e03a      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003304:	f107 0308 	add.w	r3, r7, #8
 8003308:	4619      	mov	r1, r3
 800330a:	4869      	ldr	r0, [pc, #420]	; (80034b0 <TM_GPS_INT_CheckTerm+0xb80>)
 800330c:	f000 f9b1 	bl	8003672 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <TM_GPS_INT_CheckTerm+0xb8c>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	3b03      	subs	r3, #3
 8003318:	b2d1      	uxtb	r1, r2
 800331a:	4a66      	ldr	r2, [pc, #408]	; (80034b4 <TM_GPS_INT_CheckTerm+0xb84>)
 800331c:	4413      	add	r3, r2
 800331e:	460a      	mov	r2, r1
 8003320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 8003324:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <TM_GPS_INT_CheckTerm+0xb90>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b64      	ldr	r3, [pc, #400]	; (80034c0 <TM_GPS_INT_CheckTerm+0xb90>)
 800332e:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 8003330:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <TM_GPS_INT_CheckTerm+0xb84>)
 8003332:	7d1a      	ldrb	r2, [r3, #20]
 8003334:	4b62      	ldr	r3, [pc, #392]	; (80034c0 <TM_GPS_INT_CheckTerm+0xb90>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d11d      	bne.n	8003378 <TM_GPS_INT_CheckTerm+0xa48>
				ids_count = 0;						/* Reset count, we have all statements */
 800333c:	4b60      	ldr	r3, [pc, #384]	; (80034c0 <TM_GPS_INT_CheckTerm+0xb90>)
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8003342:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <TM_GPS_INT_CheckTerm+0xb88>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334a:	4a5b      	ldr	r2, [pc, #364]	; (80034b8 <TM_GPS_INT_CheckTerm+0xb88>)
 800334c:	6013      	str	r3, [r2, #0]
			}
			break;
 800334e:	e013      	b.n	8003378 <TM_GPS_INT_CheckTerm+0xa48>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003350:	f107 0308 	add.w	r3, r7, #8
 8003354:	4619      	mov	r1, r3
 8003356:	4856      	ldr	r0, [pc, #344]	; (80034b0 <TM_GPS_INT_CheckTerm+0xb80>)
 8003358:	f000 f98b 	bl	8003672 <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	4b54      	ldr	r3, [pc, #336]	; (80034b4 <TM_GPS_INT_CheckTerm+0xb84>)
 8003362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 8003366:	4b54      	ldr	r3, [pc, #336]	; (80034b8 <TM_GPS_INT_CheckTerm+0xb88>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	4a52      	ldr	r2, [pc, #328]	; (80034b8 <TM_GPS_INT_CheckTerm+0xb88>)
 8003370:	6013      	str	r3, [r2, #0]
			break;
 8003372:	e002      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
#endif
		default: 
			break;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <TM_GPS_INT_CheckTerm+0xa4a>
			break;
 8003378:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 800337a:	4b52      	ldr	r3, [pc, #328]	; (80034c4 <TM_GPS_INT_CheckTerm+0xb94>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b03      	cmp	r3, #3
 8003380:	f040 8090 	bne.w	80034a4 <TM_GPS_INT_CheckTerm+0xb74>
		if (GPS_Term_Number == 1) {
 8003384:	4b4d      	ldr	r3, [pc, #308]	; (80034bc <TM_GPS_INT_CheckTerm+0xb8c>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d109      	bne.n	80033a0 <TM_GPS_INT_CheckTerm+0xa70>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	4619      	mov	r1, r3
 8003392:	4847      	ldr	r0, [pc, #284]	; (80034b0 <TM_GPS_INT_CheckTerm+0xb80>)
 8003394:	f000 f96d 	bl	8003672 <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <TM_GPS_INT_CheckTerm+0xb98>)
 800339e:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 80033a0:	4b46      	ldr	r3, [pc, #280]	; (80034bc <TM_GPS_INT_CheckTerm+0xb8c>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d109      	bne.n	80033bc <TM_GPS_INT_CheckTerm+0xa8c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 80033a8:	f107 0308 	add.w	r3, r7, #8
 80033ac:	4619      	mov	r1, r3
 80033ae:	4840      	ldr	r0, [pc, #256]	; (80034b0 <TM_GPS_INT_CheckTerm+0xb80>)
 80033b0:	f000 f95f 	bl	8003672 <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	4b44      	ldr	r3, [pc, #272]	; (80034cc <TM_GPS_INT_CheckTerm+0xb9c>)
 80033ba:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 80033bc:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <TM_GPS_INT_CheckTerm+0xb8c>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d96f      	bls.n	80034a4 <TM_GPS_INT_CheckTerm+0xb74>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 80033c4:	f107 0308 	add.w	r3, r7, #8
 80033c8:	4619      	mov	r1, r3
 80033ca:	4839      	ldr	r0, [pc, #228]	; (80034b0 <TM_GPS_INT_CheckTerm+0xb80>)
 80033cc:	f000 f951 	bl	8003672 <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 80033d0:	4b3a      	ldr	r3, [pc, #232]	; (80034bc <TM_GPS_INT_CheckTerm+0xb8c>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	3b04      	subs	r3, #4
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <TM_GPS_INT_CheckTerm+0xba0>)
 80033da:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 80033dc:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <TM_GPS_INT_CheckTerm+0xba0>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <TM_GPS_INT_CheckTerm+0xba4>)
 80033e8:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 80033ea:	4b38      	ldr	r3, [pc, #224]	; (80034cc <TM_GPS_INT_CheckTerm+0xb9c>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	333f      	adds	r3, #63	; 0x3f
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <TM_GPS_INT_CheckTerm+0xba0>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4413      	add	r3, r2
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <TM_GPS_INT_CheckTerm+0xba0>)
 8003404:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 8003406:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <TM_GPS_INT_CheckTerm+0xba0>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b17      	cmp	r3, #23
 800340c:	d84a      	bhi.n	80034a4 <TM_GPS_INT_CheckTerm+0xb74>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 800340e:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <TM_GPS_INT_CheckTerm+0xba4>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10e      	bne.n	8003434 <TM_GPS_INT_CheckTerm+0xb04>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <TM_GPS_INT_CheckTerm+0xba0>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	b2d0      	uxtb	r0, r2
 8003420:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <TM_GPS_INT_CheckTerm+0xb84>)
 8003422:	460b      	mov	r3, r1
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	440b      	add	r3, r1
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	3346      	adds	r3, #70	; 0x46
 800342e:	4602      	mov	r2, r0
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e037      	b.n	80034a4 <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 1) {
 8003434:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <TM_GPS_INT_CheckTerm+0xba4>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10e      	bne.n	800345a <TM_GPS_INT_CheckTerm+0xb2a>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <TM_GPS_INT_CheckTerm+0xba0>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	4619      	mov	r1, r3
 8003444:	b2d0      	uxtb	r0, r2
 8003446:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <TM_GPS_INT_CheckTerm+0xb84>)
 8003448:	460b      	mov	r3, r1
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	440b      	add	r3, r1
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	3347      	adds	r3, #71	; 0x47
 8003454:	4602      	mov	r2, r0
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e024      	b.n	80034a4 <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 2) {
 800345a:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <TM_GPS_INT_CheckTerm+0xba4>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d10e      	bne.n	8003480 <TM_GPS_INT_CheckTerm+0xb50>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <TM_GPS_INT_CheckTerm+0xba0>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	4619      	mov	r1, r3
 800346a:	b290      	uxth	r0, r2
 800346c:	4a11      	ldr	r2, [pc, #68]	; (80034b4 <TM_GPS_INT_CheckTerm+0xb84>)
 800346e:	460b      	mov	r3, r1
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	440b      	add	r3, r1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	3348      	adds	r3, #72	; 0x48
 800347a:	4602      	mov	r2, r0
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	e011      	b.n	80034a4 <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 3) {
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <TM_GPS_INT_CheckTerm+0xba4>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d10d      	bne.n	80034a4 <TM_GPS_INT_CheckTerm+0xb74>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <TM_GPS_INT_CheckTerm+0xba0>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	b2d0      	uxtb	r0, r2
 8003492:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <TM_GPS_INT_CheckTerm+0xb84>)
 8003494:	460b      	mov	r3, r1
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	440b      	add	r3, r1
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	4413      	add	r3, r2
 800349e:	334a      	adds	r3, #74	; 0x4a
 80034a0:	4602      	mov	r2, r0
 80034a2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	ecbd 8b02 	vpop	{d8}
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	240007a0 	.word	0x240007a0
 80034b4:	240007c0 	.word	0x240007c0
 80034b8:	240007b4 	.word	0x240007b4
 80034bc:	240007af 	.word	0x240007af
 80034c0:	240008f7 	.word	0x240008f7
 80034c4:	24000000 	.word	0x24000000
 80034c8:	240008f3 	.word	0x240008f3
 80034cc:	240008f4 	.word	0x240008f4
 80034d0:	240008f5 	.word	0x240008f5
 80034d4:	240008f6 	.word	0x240008f6

080034d8 <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f939 	bl	8003758 <TM_GPS_INT_FlagsOk>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 808d 	beq.w	8003608 <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 80034ee:	4b50      	ldr	r3, [pc, #320]	; (8003630 <TM_GPS_INT_Return+0x158>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 80034f4:	4b4f      	ldr	r3, [pc, #316]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 80034f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003500:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 8003502:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 800350c:	4b49      	ldr	r3, [pc, #292]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 800350e:	7d1a      	ldrb	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 8003514:	4b47      	ldr	r3, [pc, #284]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 8003516:	7d5a      	ldrb	r2, [r3, #21]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 800351c:	4b45      	ldr	r3, [pc, #276]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a43      	ldr	r2, [pc, #268]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 8003528:	3316      	adds	r3, #22
 800352a:	3216      	adds	r2, #22
 800352c:	6811      	ldr	r1, [r2, #0]
 800352e:	6019      	str	r1, [r3, #0]
 8003530:	8892      	ldrh	r2, [r2, #4]
 8003532:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 8003534:	4b3f      	ldr	r3, [pc, #252]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3d      	ldr	r2, [pc, #244]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 8003540:	331c      	adds	r3, #28
 8003542:	321c      	adds	r2, #28
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	4611      	mov	r1, r2
 8003548:	8019      	strh	r1, [r3, #0]
 800354a:	3302      	adds	r3, #2
 800354c:	0c12      	lsrs	r2, r2, #16
 800354e:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 8003550:	4b38      	ldr	r3, [pc, #224]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 8003552:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 800355e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 8003564:	4b33      	ldr	r3, [pc, #204]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 800356c:	4b31      	ldr	r3, [pc, #196]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 800356e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 800357c:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 800357e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]
 800358c:	e00d      	b.n	80035aa <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	4928      	ldr	r1, [pc, #160]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 8003594:	440a      	add	r2, r1
 8003596:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	460a      	mov	r2, r1
 80035a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	3301      	adds	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b0b      	cmp	r3, #11
 80035ae:	d9ee      	bls.n	800358e <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 80035b0:	4b20      	ldr	r3, [pc, #128]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 80035b2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e019      	b.n	80035f6 <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	7bf9      	ldrb	r1, [r7, #15]
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	440b      	add	r3, r1
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4403      	add	r3, r0
 80035d2:	f103 0046 	add.w	r0, r3, #70	; 0x46
 80035d6:	4917      	ldr	r1, [pc, #92]	; (8003634 <TM_GPS_INT_Return+0x15c>)
 80035d8:	4613      	mov	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4413      	add	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	440b      	add	r3, r1
 80035e2:	f103 0246 	add.w	r2, r3, #70	; 0x46
 80035e6:	4603      	mov	r3, r0
 80035e8:	6811      	ldr	r1, [r2, #0]
 80035ea:	6019      	str	r1, [r3, #0]
 80035ec:	8892      	ldrh	r2, [r2, #4]
 80035ee:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	3301      	adds	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b17      	cmp	r3, #23
 80035fa:	d9e2      	bls.n	80035c2 <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003604:	2300      	movs	r3, #0
 8003606:	e00e      	b.n	8003626 <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <TM_GPS_INT_Return+0x158>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003618:	2302      	movs	r3, #2
 800361a:	e004      	b.n	8003626 <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003624:	2301      	movs	r3, #1
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	bf00      	nop
 8003630:	240008e8 	.word	0x240008e8
 8003634:	240007c0 	.word	0x240007c0

08003638 <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	while (*str) {
 8003642:	e00b      	b.n	800365c <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	603a      	str	r2, [r7, #0]
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	1c59      	adds	r1, r3, #1
 8003650:	6079      	str	r1, [r7, #4]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 8003658:	2300      	movs	r3, #0
 800365a:	e004      	b.n	8003666 <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ef      	bne.n	8003644 <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 8003664:	2301      	movs	r3, #1
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 8003686:	e012      	b.n	80036ae <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4619      	mov	r1, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	440b      	add	r3, r1
 80036a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	601a      	str	r2, [r3, #0]
		count++;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	3301      	adds	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b2f      	cmp	r3, #47	; 0x2f
 80036b4:	d903      	bls.n	80036be <TM_GPS_INT_Atoi+0x4c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b39      	cmp	r3, #57	; 0x39
 80036bc:	d9e4      	bls.n	8003688 <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	460a      	mov	r2, r1
 80036d6:	71fb      	strb	r3, [r7, #7]
 80036d8:	4613      	mov	r3, r2
 80036da:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 80036dc:	2301      	movs	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
	while (y--) {
 80036e0:	e004      	b.n	80036ec <TM_GPS_INT_Pow+0x20>
		ret *= x;
 80036e2:	79fa      	ldrb	r2, [r7, #7]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	60fb      	str	r3, [r7, #12]
	while (y--) {
 80036ec:	79bb      	ldrb	r3, [r7, #6]
 80036ee:	1e5a      	subs	r2, r3, #1
 80036f0:	71ba      	strb	r2, [r7, #6]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f5      	bne.n	80036e2 <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 80036f6:	68fb      	ldr	r3, [r7, #12]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	2b2f      	cmp	r3, #47	; 0x2f
 8003712:	d906      	bls.n	8003722 <TM_GPS_INT_Hex2Dec+0x1e>
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	2b39      	cmp	r3, #57	; 0x39
 8003718:	d803      	bhi.n	8003722 <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	3b30      	subs	r3, #48	; 0x30
 800371e:	b2db      	uxtb	r3, r3
 8003720:	e014      	b.n	800374c <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d906      	bls.n	8003736 <TM_GPS_INT_Hex2Dec+0x32>
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	2b46      	cmp	r3, #70	; 0x46
 800372c:	d803      	bhi.n	8003736 <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	3b37      	subs	r3, #55	; 0x37
 8003732:	b2db      	uxtb	r3, r3
 8003734:	e00a      	b.n	800374c <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	2b60      	cmp	r3, #96	; 0x60
 800373a:	d906      	bls.n	800374a <TM_GPS_INT_Hex2Dec+0x46>
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	2b66      	cmp	r3, #102	; 0x66
 8003740:	d803      	bhi.n	800374a <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	3b57      	subs	r3, #87	; 0x57
 8003746:	b2db      	uxtb	r3, r3
 8003748:	e000      	b.n	800374c <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <TM_GPS_INT_FlagsOk+0x54>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <TM_GPS_INT_FlagsOk+0x58>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d118      	bne.n	800379e <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 800376c:	2300      	movs	r3, #0
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	e00d      	b.n	800378e <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	333e      	adds	r3, #62	; 0x3e
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	7ddb      	ldrb	r3, [r3, #23]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 8003784:	2300      	movs	r3, #0
 8003786:	e00b      	b.n	80037a0 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	3301      	adds	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	429a      	cmp	r2, r3
 8003798:	d3eb      	bcc.n	8003772 <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	240007b4 	.word	0x240007b4
 80037b0:	240007b8 	.word	0x240007b8

080037b4 <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <TM_GPS_INT_ClearFlags+0x44>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e00a      	b.n	80037de <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	333e      	adds	r3, #62	; 0x3e
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	3301      	adds	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d3ee      	bcc.n	80037c8 <TM_GPS_INT_ClearFlags+0x14>
	}
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	240007b4 	.word	0x240007b4

080037fc <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 8003804:	4baf      	ldr	r3, [pc, #700]	; (8003ac4 <TM_GPS_INT_CheckEmpty+0x2c8>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 8151 	bne.w	8003ab0 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 800380e:	4bae      	ldr	r3, [pc, #696]	; (8003ac8 <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	015b      	lsls	r3, r3, #5
 8003814:	4aad      	ldr	r2, [pc, #692]	; (8003acc <TM_GPS_INT_CheckEmpty+0x2d0>)
 8003816:	7812      	ldrb	r2, [r2, #0]
 8003818:	4313      	orrs	r3, r2
 800381a:	3b01      	subs	r3, #1
 800381c:	2b62      	cmp	r3, #98	; 0x62
 800381e:	f200 8149 	bhi.w	8003ab4 <TM_GPS_INT_CheckEmpty+0x2b8>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <TM_GPS_INT_CheckEmpty+0x2c>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	08003a17 	.word	0x08003a17
 800382c:	080039b5 	.word	0x080039b5
 8003830:	080039c3 	.word	0x080039c3
 8003834:	080039d1 	.word	0x080039d1
 8003838:	080039df 	.word	0x080039df
 800383c:	080039fb 	.word	0x080039fb
 8003840:	080039ed 	.word	0x080039ed
 8003844:	08003ab5 	.word	0x08003ab5
 8003848:	08003a09 	.word	0x08003a09
 800384c:	08003ab5 	.word	0x08003ab5
 8003850:	08003ab5 	.word	0x08003ab5
 8003854:	08003ab5 	.word	0x08003ab5
 8003858:	08003ab5 	.word	0x08003ab5
 800385c:	08003ab5 	.word	0x08003ab5
 8003860:	08003ab5 	.word	0x08003ab5
 8003864:	08003ab5 	.word	0x08003ab5
 8003868:	08003ab5 	.word	0x08003ab5
 800386c:	08003ab5 	.word	0x08003ab5
 8003870:	08003ab5 	.word	0x08003ab5
 8003874:	08003ab5 	.word	0x08003ab5
 8003878:	08003ab5 	.word	0x08003ab5
 800387c:	08003ab5 	.word	0x08003ab5
 8003880:	08003ab5 	.word	0x08003ab5
 8003884:	08003ab5 	.word	0x08003ab5
 8003888:	08003ab5 	.word	0x08003ab5
 800388c:	08003ab5 	.word	0x08003ab5
 8003890:	08003ab5 	.word	0x08003ab5
 8003894:	08003ab5 	.word	0x08003ab5
 8003898:	08003ab5 	.word	0x08003ab5
 800389c:	08003ab5 	.word	0x08003ab5
 80038a0:	08003ab5 	.word	0x08003ab5
 80038a4:	08003ab5 	.word	0x08003ab5
 80038a8:	08003ab5 	.word	0x08003ab5
 80038ac:	08003a41 	.word	0x08003a41
 80038b0:	08003ab5 	.word	0x08003ab5
 80038b4:	08003ab5 	.word	0x08003ab5
 80038b8:	08003ab5 	.word	0x08003ab5
 80038bc:	08003ab5 	.word	0x08003ab5
 80038c0:	08003a25 	.word	0x08003a25
 80038c4:	08003a4f 	.word	0x08003a4f
 80038c8:	08003a33 	.word	0x08003a33
 80038cc:	08003ab5 	.word	0x08003ab5
 80038d0:	08003ab5 	.word	0x08003ab5
 80038d4:	08003ab5 	.word	0x08003ab5
 80038d8:	08003ab5 	.word	0x08003ab5
 80038dc:	08003ab5 	.word	0x08003ab5
 80038e0:	08003ab5 	.word	0x08003ab5
 80038e4:	08003ab5 	.word	0x08003ab5
 80038e8:	08003ab5 	.word	0x08003ab5
 80038ec:	08003ab5 	.word	0x08003ab5
 80038f0:	08003ab5 	.word	0x08003ab5
 80038f4:	08003ab5 	.word	0x08003ab5
 80038f8:	08003ab5 	.word	0x08003ab5
 80038fc:	08003ab5 	.word	0x08003ab5
 8003900:	08003ab5 	.word	0x08003ab5
 8003904:	08003ab5 	.word	0x08003ab5
 8003908:	08003ab5 	.word	0x08003ab5
 800390c:	08003ab5 	.word	0x08003ab5
 8003910:	08003ab5 	.word	0x08003ab5
 8003914:	08003ab5 	.word	0x08003ab5
 8003918:	08003ab5 	.word	0x08003ab5
 800391c:	08003ab5 	.word	0x08003ab5
 8003920:	08003ab5 	.word	0x08003ab5
 8003924:	08003ab5 	.word	0x08003ab5
 8003928:	08003ab5 	.word	0x08003ab5
 800392c:	08003a87 	.word	0x08003a87
 8003930:	08003a95 	.word	0x08003a95
 8003934:	08003a95 	.word	0x08003a95
 8003938:	08003a95 	.word	0x08003a95
 800393c:	08003a95 	.word	0x08003a95
 8003940:	08003a95 	.word	0x08003a95
 8003944:	08003a95 	.word	0x08003a95
 8003948:	08003a95 	.word	0x08003a95
 800394c:	08003a95 	.word	0x08003a95
 8003950:	08003a95 	.word	0x08003a95
 8003954:	08003a95 	.word	0x08003a95
 8003958:	08003a95 	.word	0x08003a95
 800395c:	08003a95 	.word	0x08003a95
 8003960:	08003a6b 	.word	0x08003a6b
 8003964:	08003a5d 	.word	0x08003a5d
 8003968:	08003a79 	.word	0x08003a79
 800396c:	08003ab5 	.word	0x08003ab5
 8003970:	08003ab5 	.word	0x08003ab5
 8003974:	08003ab5 	.word	0x08003ab5
 8003978:	08003ab5 	.word	0x08003ab5
 800397c:	08003ab5 	.word	0x08003ab5
 8003980:	08003ab5 	.word	0x08003ab5
 8003984:	08003ab5 	.word	0x08003ab5
 8003988:	08003ab5 	.word	0x08003ab5
 800398c:	08003ab5 	.word	0x08003ab5
 8003990:	08003ab5 	.word	0x08003ab5
 8003994:	08003ab5 	.word	0x08003ab5
 8003998:	08003ab5 	.word	0x08003ab5
 800399c:	08003ab5 	.word	0x08003ab5
 80039a0:	08003ab5 	.word	0x08003ab5
 80039a4:	08003ab5 	.word	0x08003ab5
 80039a8:	08003ab5 	.word	0x08003ab5
 80039ac:	08003ab5 	.word	0x08003ab5
 80039b0:	08003aa3 	.word	0x08003aa3
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 80039b4:	4b46      	ldr	r3, [pc, #280]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	4a44      	ldr	r2, [pc, #272]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e079      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 80039c2:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ca:	4a41      	ldr	r2, [pc, #260]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e072      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	4a3d      	ldr	r2, [pc, #244]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	e06b      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 80039de:	4b3c      	ldr	r3, [pc, #240]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f043 0320 	orr.w	r3, r3, #32
 80039e6:	4a3a      	ldr	r2, [pc, #232]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e064      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 80039ec:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	4a36      	ldr	r2, [pc, #216]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e05d      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 80039fa:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f043 0308 	orr.w	r3, r3, #8
 8003a02:	4a33      	ldr	r2, [pc, #204]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e056      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 8003a08:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f043 0310 	orr.w	r3, r3, #16
 8003a10:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	e04f      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 8003a16:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e048      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 8003a24:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2c:	4a28      	ldr	r2, [pc, #160]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e041      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 8003a32:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a3a:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e03a      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a48:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	e033      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e02c      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a64:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e025      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 8003a6a:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a72:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e01e      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e017      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8e:	4a10      	ldr	r2, [pc, #64]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e010      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9c:	4a0c      	ldr	r2, [pc, #48]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003a9e:	6013      	str	r3, [r2, #0]
				break;
 8003aa0:	e009      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e002      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 8003ab0:	bf00      	nop
 8003ab2:	e000      	b.n	8003ab6 <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 8003ab4:	bf00      	nop
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	240007b0 	.word	0x240007b0
 8003ac8:	24000000 	.word	0x24000000
 8003acc:	240007af 	.word	0x240007af
 8003ad0:	240007b4 	.word	0x240007b4

08003ad4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ae2:	eef0 7ae7 	vabs.f32	s15, s15
 8003ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	ed87 0a01 	vstr	s0, [r7, #4]
 8003afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b02:	fefa 7a67 	vrintp.f32	s15, s15
 8003b06:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b22:	fefb 7a67 	vrintm.f32	s15, s15
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <_Z13rt_roundf_snff>:

// Const memory section
// Definition for custom storage class: Const
const real32_T Max_angle_coef = 0.5F;  // Referenced by: '<S1>/Max_angle_coef'
real32_T rt_roundf_snf(real32_T u)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if (std::abs(u) < 8.388608E+6F) {
 8003b3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003b42:	f7ff ffc7 	bl	8003ad4 <_ZSt3absf>
 8003b46:	eeb0 7a40 	vmov.f32	s14, s0
 8003b4a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003be0 <_Z13rt_roundf_snff+0xac>
 8003b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	bf4c      	ite	mi
 8003b58:	2301      	movmi	r3, #1
 8003b5a:	2300      	movpl	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d034      	beq.n	8003bcc <_Z13rt_roundf_snff+0x98>
    if (u >= 0.5F) {
 8003b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b72:	db0c      	blt.n	8003b8e <_Z13rt_roundf_snff+0x5a>
      y = std::floor(u + 0.5F);
 8003b74:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b80:	eeb0 0a67 	vmov.f32	s0, s15
 8003b84:	f7ff ffc6 	bl	8003b14 <_ZSt5floorf>
 8003b88:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b8c:	e020      	b.n	8003bd0 <_Z13rt_roundf_snff+0x9c>
    } else if (u > -0.5F) {
 8003b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b92:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	dd08      	ble.n	8003bb2 <_Z13rt_roundf_snff+0x7e>
      y = u * 0.0F;
 8003ba0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ba4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003be4 <_Z13rt_roundf_snff+0xb0>
 8003ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bac:	edc7 7a03 	vstr	s15, [r7, #12]
 8003bb0:	e00e      	b.n	8003bd0 <_Z13rt_roundf_snff+0x9c>
    } else {
      y = std::ceil(u - 0.5F);
 8003bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc2:	f7ff ff97 	bl	8003af4 <_ZSt4ceilf>
 8003bc6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003bca:	e001      	b.n	8003bd0 <_Z13rt_roundf_snff+0x9c>
    }
  } else {
    y = u;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	60fb      	str	r3, [r7, #12]
  }

  return y;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	ee07 3a90 	vmov	s15, r3
}
 8003bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	4b000000 	.word	0x4b000000
 8003be4:	00000000 	.word	0x00000000

08003be8 <_ZN23px4_AlgorithmModelClass4stepEv>:

// Model step function
void px4_AlgorithmModelClass::step()
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  // Gain: '<Root>/Gain' incorporates:
  //   Inport: '<Root>/set_pitch'

  Second_att_control_codeblock__B.Gain =
    Second_att_control_codeblock__P.Gain_Gain *
 8003bf0:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <_ZN23px4_AlgorithmModelClass4stepEv+0x1a8>)
 8003bf2:	ed93 7a03 	vldr	s14, [r3, #12]
    Second_att_control_codeblock__U.set_pitch;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
    Second_att_control_codeblock__P.Gain_Gain *
 8003bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain =
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	edc3 7a00 	vstr	s15, [r3]

  // Gain: '<S1>/Max_angle_coef' incorporates:
  //   Inport: '<Root>/set_roll'

  Second_att_control_codeblock__B.Max_angle_coef_m[0] = Max_angle_coef *
    Second_att_control_codeblock__U.set_roll;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
  Second_att_control_codeblock__B.Max_angle_coef_m[0] = Max_angle_coef *
 8003c0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	edc3 7a01 	vstr	s15, [r3, #4]
  Second_att_control_codeblock__B.Max_angle_coef_m[1] = Max_angle_coef *
    Second_att_control_codeblock__B.Gain;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	edd3 7a00 	vldr	s15, [r3]
  Second_att_control_codeblock__B.Max_angle_coef_m[1] = Max_angle_coef *
 8003c20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	edc3 7a02 	vstr	s15, [r3, #8]

  // Sum: '<S4>/Sum' incorporates:
  //   Inport: '<Root>/Roll'

  Second_att_control_codeblock__B.pitchrollerror =
    Second_att_control_codeblock__B.Max_angle_coef_m[0] -
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	ed93 7a01 	vldr	s14, [r3, #4]
    Second_att_control_codeblock__U.Roll;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
    Second_att_control_codeblock__B.Max_angle_coef_m[0] -
 8003c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror =
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	edc3 7a03 	vstr	s15, [r3, #12]

  // Gain: '<S4>/P_pr'
  Second_att_control_codeblock__B.P_pr = Angle_rate_roll_PI_kP *
    Second_att_control_codeblock__B.pitchrollerror;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	ed93 7a03 	vldr	s14, [r3, #12]
  Second_att_control_codeblock__B.P_pr = Angle_rate_roll_PI_kP *
 8003c4a:	4b52      	ldr	r3, [pc, #328]	; (8003d94 <_ZN23px4_AlgorithmModelClass4stepEv+0x1ac>)
 8003c4c:	edd3 7a00 	vldr	s15, [r3]
 8003c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	edc3 7a04 	vstr	s15, [r3, #16]

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	615a      	str	r2, [r3, #20]

  // Gain: '<S4>/I_pr'
  Second_att_control_codeblock__B.I_pr = Angle_rate_roll_PI_kI *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	ed93 7a05 	vldr	s14, [r3, #20]
  Second_att_control_codeblock__B.I_pr = Angle_rate_roll_PI_kI *
 8003c6a:	4b4b      	ldr	r3, [pc, #300]	; (8003d98 <_ZN23px4_AlgorithmModelClass4stepEv+0x1b0>)
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	edc3 7a06 	vstr	s15, [r3, #24]

  // Sum: '<S4>/Sum16'
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	ed93 7a04 	vldr	s14, [r3, #16]
    + Second_att_control_codeblock__B.I_pr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c86:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	edc3 7a07 	vstr	s15, [r3, #28]

  // Sum: '<S5>/Sum' incorporates:
  //   Inport: '<Root>/p'

  Second_att_control_codeblock__B.pitchrollerror_b =
    Second_att_control_codeblock__B.P_pr_m - Second_att_control_codeblock__U.p;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	ed93 7a07 	vldr	s14, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_b =
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	edc3 7a08 	vstr	s15, [r3, #32]

  // Gain: '<S5>/P_pr'
  Second_att_control_codeblock__B.P_pr_b = kP_Roll_rate_PID *
    Second_att_control_codeblock__B.pitchrollerror_b;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	ed93 7a08 	vldr	s14, [r3, #32]
  Second_att_control_codeblock__B.P_pr_b = kP_Roll_rate_PID *
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <_ZN23px4_AlgorithmModelClass4stepEv+0x1b4>)
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28

  // Gain: '<S5>/I_pr'
  Second_att_control_codeblock__B.I_pr_d = kI_Roll_rate_PID *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
  Second_att_control_codeblock__B.I_pr_d = kI_Roll_rate_PID *
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <_ZN23px4_AlgorithmModelClass4stepEv+0x1b8>)
 8003cce:	edd3 7a00 	vldr	s15, [r3]
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  //
  //  About '<S7>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp =
    Second_att_control_codeblock__B.pitchrollerror_b *
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	ed93 7a08 	vldr	s14, [r3, #32]
    Second_att_control_codeblock__P.TSamp_WtEt;
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <_ZN23px4_AlgorithmModelClass4stepEv+0x1a8>)
 8003ce4:	edd3 7a08 	vldr	s15, [r3, #32]
    Second_att_control_codeblock__B.pitchrollerror_b *
 8003ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp =
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1 =
    Second_att_control_codeblock_DW.UD_DSTATE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
  Second_att_control_codeblock__B.Uk1 =
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	635a      	str	r2, [r3, #52]	; 0x34
  //
  //  Block description for '<S7>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    Second_att_control_codeblock__B.Uk1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8003d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  // Gain: '<S5>/D_pr'
  Second_att_control_codeblock__B.D_pr = kD_Roll_rate_PID *
    Second_att_control_codeblock__B.Diff;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
  Second_att_control_codeblock__B.D_pr = kD_Roll_rate_PID *
 8003d18:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <_ZN23px4_AlgorithmModelClass4stepEv+0x1bc>)
 8003d1a:	edd3 7a00 	vldr	s15, [r3]
 8003d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // Sum: '<S5>/Sum16'
  Second_att_control_codeblock__B.P_pr_d =
    (Second_att_control_codeblock__B.P_pr_b +
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
     Second_att_control_codeblock__B.I_pr_d) +
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
    (Second_att_control_codeblock__B.P_pr_b +
 8003d34:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
     Second_att_control_codeblock__B.I_pr_d) +
 8003d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_d =
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  // Saturate: '<S5>/Saturation'
  u0 = Second_att_control_codeblock__B.P_pr_d;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation_LowerSat;
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <_ZN23px4_AlgorithmModelClass4stepEv+0x1a8>)
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation_UpperSat;
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <_ZN23px4_AlgorithmModelClass4stepEv+0x1a8>)
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 8003d5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	dd03      	ble.n	8003d74 <_ZN23px4_AlgorithmModelClass4stepEv+0x18c>
    Second_att_control_codeblock__B.Saturation = u2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
 8003d72:	e01c      	b.n	8003dae <_ZN23px4_AlgorithmModelClass4stepEv+0x1c6>
  } else if (u0 < u1) {
 8003d74:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d78:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d84:	d510      	bpl.n	8003da8 <_ZN23px4_AlgorithmModelClass4stepEv+0x1c0>
    Second_att_control_codeblock__B.Saturation = u1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
 8003d8c:	e00f      	b.n	8003dae <_ZN23px4_AlgorithmModelClass4stepEv+0x1c6>
 8003d8e:	bf00      	nop
 8003d90:	24000038 	.word	0x24000038
 8003d94:	24000010 	.word	0x24000010
 8003d98:	2400000c 	.word	0x2400000c
 8003d9c:	24000030 	.word	0x24000030
 8003da0:	24000024 	.word	0x24000024
 8003da4:	2400001c 	.word	0x2400001c
  } else {
    Second_att_control_codeblock__B.Saturation = u0;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44

  // End of Saturate: '<S5>/Saturation'

  // Gain: '<S5>/Gain'
  Second_att_control_codeblock__B.Gain_p =
    Second_att_control_codeblock__P.Gain_Gain_p *
 8003dae:	4bc5      	ldr	r3, [pc, #788]	; (80040c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4dc>)
 8003db0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Saturation;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    Second_att_control_codeblock__P.Gain_Gain_p *
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain_p =
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

  // Sum: '<S4>/Sum2' incorporates:
  //   Inport: '<Root>/Pitch'

  Second_att_control_codeblock__B.pitchrollerror_m =
    Second_att_control_codeblock__B.Max_angle_coef_m[1] -
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	ed93 7a02 	vldr	s14, [r3, #8]
    Second_att_control_codeblock__U.Pitch;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
    Second_att_control_codeblock__B.Max_angle_coef_m[1] -
 8003dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_m =
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

  // Gain: '<S4>/P_pr1'
  Second_att_control_codeblock__B.P_pr1 = Angle_rate_pitch_kP *
    Second_att_control_codeblock__B.pitchrollerror_m;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
  Second_att_control_codeblock__B.P_pr1 = Angle_rate_pitch_kP *
 8003de0:	4bb9      	ldr	r3, [pc, #740]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x4e0>)
 8003de2:	edd3 7a00 	vldr	s15, [r3]
 8003de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

  // DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54

  // Gain: '<S4>/I_pr1'
  Second_att_control_codeblock__B.I_pr1 = Angle_rate_pitch_kI *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
  Second_att_control_codeblock__B.I_pr1 = Angle_rate_pitch_kI *
 8003e00:	4bb2      	ldr	r3, [pc, #712]	; (80040cc <_ZN23px4_AlgorithmModelClass4stepEv+0x4e4>)
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Sum: '<S4>/Sum1'
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
    + Second_att_control_codeblock__B.I_pr1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  // Sum: '<S5>/Sum1' incorporates:
  //   Inport: '<Root>/q'

  Second_att_control_codeblock__B.pitchrollerror_i =
    Second_att_control_codeblock__B.P_pr_o - Second_att_control_codeblock__U.q;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8003e32:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_i =
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

  // Gain: '<S5>/P_pr1'
  Second_att_control_codeblock__B.P_pr1_p = kP_Pitch_rate_PID *
    Second_att_control_codeblock__B.pitchrollerror_i;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
  Second_att_control_codeblock__B.P_pr1_p = kP_Pitch_rate_PID *
 8003e42:	4ba3      	ldr	r3, [pc, #652]	; (80040d0 <_ZN23px4_AlgorithmModelClass4stepEv+0x4e8>)
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	669a      	str	r2, [r3, #104]	; 0x68

  // Gain: '<S5>/I_pr1'
  Second_att_control_codeblock__B.I_pr1_j = kI_Pitch_rate_PID *
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
  Second_att_control_codeblock__B.I_pr1_j = kI_Pitch_rate_PID *
 8003e62:	4b9c      	ldr	r3, [pc, #624]	; (80040d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4ec>)
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
  //
  //  About '<S8>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp_h =
    Second_att_control_codeblock__B.pitchrollerror_i *
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
    Second_att_control_codeblock__P.TSamp_WtEt_l;
 8003e78:	4b92      	ldr	r3, [pc, #584]	; (80040c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4dc>)
 8003e7a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    Second_att_control_codeblock__B.pitchrollerror_i *
 8003e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp_h =
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1_i =
    Second_att_control_codeblock_DW.UD_DSTATE_e;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
  Second_att_control_codeblock__B.Uk1_i =
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	675a      	str	r2, [r3, #116]	; 0x74
  //  Block description for '<S8>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff_l =
    Second_att_control_codeblock__B.TSamp_h -
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
    Second_att_control_codeblock__B.Uk1_i;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
    Second_att_control_codeblock__B.TSamp_h -
 8003e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Diff_l =
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

  // Gain: '<S5>/D_pr1'
  Second_att_control_codeblock__B.D_pr1 = kD_Pitch_rate_PID *
    Second_att_control_codeblock__B.Diff_l;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
  Second_att_control_codeblock__B.D_pr1 = kD_Pitch_rate_PID *
 8003eae:	4b8a      	ldr	r3, [pc, #552]	; (80040d8 <_ZN23px4_AlgorithmModelClass4stepEv+0x4f0>)
 8003eb0:	edd3 7a00 	vldr	s15, [r3]
 8003eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  // Sum: '<S5>/Sum2'
  Second_att_control_codeblock__B.P_pr_j =
    (Second_att_control_codeblock__B.P_pr1_p +
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
     Second_att_control_codeblock__B.I_pr1_j) +
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
    (Second_att_control_codeblock__B.P_pr1_p +
 8003eca:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
     Second_att_control_codeblock__B.I_pr1_j) +
 8003ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_j =
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

  // Saturate: '<S5>/Saturation1'
  u0 = Second_att_control_codeblock__B.P_pr_j;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee4:	617b      	str	r3, [r7, #20]
  u1 = Second_att_control_codeblock__P.Saturation1_LowerSat;
 8003ee6:	4b77      	ldr	r3, [pc, #476]	; (80040c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4dc>)
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eea:	613b      	str	r3, [r7, #16]
  u2 = Second_att_control_codeblock__P.Saturation1_UpperSat;
 8003eec:	4b75      	ldr	r3, [pc, #468]	; (80040c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4dc>)
 8003eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef0:	60fb      	str	r3, [r7, #12]
  if (u0 > u2) {
 8003ef2:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f02:	dd04      	ble.n	8003f0e <_ZN23px4_AlgorithmModelClass4stepEv+0x326>
    Second_att_control_codeblock__B.Saturation1 = u2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003f0c:	e011      	b.n	8003f32 <_ZN23px4_AlgorithmModelClass4stepEv+0x34a>
  } else if (u0 < u1) {
 8003f0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1e:	d504      	bpl.n	8003f2a <_ZN23px4_AlgorithmModelClass4stepEv+0x342>
    Second_att_control_codeblock__B.Saturation1 = u1;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003f28:	e003      	b.n	8003f32 <_ZN23px4_AlgorithmModelClass4stepEv+0x34a>
  } else {
    Second_att_control_codeblock__B.Saturation1 = u0;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  // End of Saturate: '<S5>/Saturation1'

  // Gain: '<S5>/Gain1'
  Second_att_control_codeblock__B.Gain1 =
    Second_att_control_codeblock__P.Gain1_Gain *
 8003f32:	4b64      	ldr	r3, [pc, #400]	; (80040c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4dc>)
 8003f34:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    Second_att_control_codeblock__B.Saturation1;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
    Second_att_control_codeblock__P.Gain1_Gain *
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain1 =
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

  // Sum: '<S6>/Sum' incorporates:
  //   Inport: '<Root>/r'
  //   Inport: '<Root>/set_yaw'

  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
    - Second_att_control_codeblock__U.r;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8003f54:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum = Second_att_control_codeblock__U.set_yaw
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

  // Gain: '<S6>/Gain'
  Second_att_control_codeblock__B.Gain_f = Yaw_angel_rate_P *
    Second_att_control_codeblock__B.Sum;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
  Second_att_control_codeblock__B.Gain_f = Yaw_angel_rate_P *
 8003f64:	4b5d      	ldr	r3, [pc, #372]	; (80040dc <_ZN23px4_AlgorithmModelClass4stepEv+0x4f4>)
 8003f66:	edd3 7a00 	vldr	s15, [r3]
 8003f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

  // Gain: '<S46>/Proportional Gain'
  Second_att_control_codeblock__B.ProportionalGain = kP_Yaw_rate_PID *
    Second_att_control_codeblock__B.Gain_f;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
  Second_att_control_codeblock__B.ProportionalGain = kP_Yaw_rate_PID *
 8003f7a:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <_ZN23px4_AlgorithmModelClass4stepEv+0x4f8>)
 8003f7c:	edd3 7a00 	vldr	s15, [r3]
 8003f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

  // DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock__B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  Second_att_control_codeblock__B.Integrator =
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  // Sum: '<S50>/Sum'
  Second_att_control_codeblock__B.Sum_f =
    Second_att_control_codeblock__B.ProportionalGain +
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
    Second_att_control_codeblock__B.Integrator;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
    Second_att_control_codeblock__B.ProportionalGain +
 8003fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum_f =
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

  // MATLAB Function: '<S1>/pwm_out1' incorporates:
  //   Inport: '<Root>/set_thrust'

  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain_p -
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003fb2:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain_p -
 8003fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                       Second_att_control_codeblock__B.Sum_f) *
 8003fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003fca:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003fce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8003fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain_p -
 8003fdc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80040e4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4fc>
 8003fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe8:	f7ff fda4 	bl	8003b34 <_Z13rt_roundf_snff>
 8003fec:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8003ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ff4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80040e8 <_ZN23px4_AlgorithmModelClass4stepEv+0x500>
 8003ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004000:	d511      	bpl.n	8004026 <_ZN23px4_AlgorithmModelClass4stepEv+0x43e>
    if (u0 >= 0.0F) {
 8004002:	edd7 7a05 	vldr	s15, [r7, #20]
 8004006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	db07      	blt.n	8004020 <_ZN23px4_AlgorithmModelClass4stepEv+0x438>
      y = static_cast<uint16_T>(u0);
 8004010:	edd7 7a05 	vldr	s15, [r7, #20]
 8004014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004018:	ee17 3a90 	vmov	r3, s15
 800401c:	837b      	strh	r3, [r7, #26]
 800401e:	e005      	b.n	800402c <_ZN23px4_AlgorithmModelClass4stepEv+0x444>
    } else {
      y = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	837b      	strh	r3, [r7, #26]
 8004024:	e002      	b.n	800402c <_ZN23px4_AlgorithmModelClass4stepEv+0x444>
    }
  } else {
    y = MAX_uint16_T;
 8004026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800402a:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 800402c:	8b7b      	ldrh	r3, [r7, #26]
 800402e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004032:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d302      	bcc.n	8004042 <_ZN23px4_AlgorithmModelClass4stepEv+0x45a>
    tmp = 65535U;
 800403c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004040:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M1 = static_cast<uint16_T>(tmp);
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain_p +
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
                       Second_att_control_codeblock__B.Sum_f) *
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain_p +
 8004058:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                       Second_att_control_codeblock__B.Sum_f) *
 8004062:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004066:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800406a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004074:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain_p +
 8004078:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80040e4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4fc>
 800407c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004080:	eeb0 0a67 	vmov.f32	s0, s15
 8004084:	f7ff fd56 	bl	8003b34 <_Z13rt_roundf_snff>
 8004088:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 800408c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004090:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80040e8 <_ZN23px4_AlgorithmModelClass4stepEv+0x500>
 8004094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409c:	d526      	bpl.n	80040ec <_ZN23px4_AlgorithmModelClass4stepEv+0x504>
    if (u0 >= 0.0F) {
 800409e:	edd7 7a05 	vldr	s15, [r7, #20]
 80040a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040aa:	db07      	blt.n	80040bc <_ZN23px4_AlgorithmModelClass4stepEv+0x4d4>
      y = static_cast<uint16_T>(u0);
 80040ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80040b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b4:	ee17 3a90 	vmov	r3, s15
 80040b8:	837b      	strh	r3, [r7, #26]
 80040ba:	e01a      	b.n	80040f2 <_ZN23px4_AlgorithmModelClass4stepEv+0x50a>
    } else {
      y = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	837b      	strh	r3, [r7, #26]
 80040c0:	e017      	b.n	80040f2 <_ZN23px4_AlgorithmModelClass4stepEv+0x50a>
 80040c2:	bf00      	nop
 80040c4:	24000038 	.word	0x24000038
 80040c8:	24000008 	.word	0x24000008
 80040cc:	24000004 	.word	0x24000004
 80040d0:	2400002c 	.word	0x2400002c
 80040d4:	24000020 	.word	0x24000020
 80040d8:	24000018 	.word	0x24000018
 80040dc:	24000014 	.word	0x24000014
 80040e0:	24000034 	.word	0x24000034
 80040e4:	447a0000 	.word	0x447a0000
 80040e8:	47800000 	.word	0x47800000
    }
  } else {
    y = MAX_uint16_T;
 80040ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040f0:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80040f2:	8b7b      	ldrh	r3, [r7, #26]
 80040f4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80040f8:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d302      	bcc.n	8004108 <_ZN23px4_AlgorithmModelClass4stepEv+0x520>
    tmp = 65535U;
 8004102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004106:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M2 = static_cast<uint16_T>(tmp);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	b29a      	uxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004118:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800411c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        Second_att_control_codeblock__B.Gain1) -
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004126:	ee37 7a27 	vadd.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
                        Second_att_control_codeblock__B.Gain1) -
 8004130:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                       Second_att_control_codeblock__B.Sum_f) *
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800413e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004142:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800414c:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004150:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 80040e4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4fc>
 8004154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004158:	eeb0 0a67 	vmov.f32	s0, s15
 800415c:	f7ff fcea 	bl	8003b34 <_Z13rt_roundf_snff>
 8004160:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8004164:	edd7 7a05 	vldr	s15, [r7, #20]
 8004168:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 80040e8 <_ZN23px4_AlgorithmModelClass4stepEv+0x500>
 800416c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004174:	d511      	bpl.n	800419a <_ZN23px4_AlgorithmModelClass4stepEv+0x5b2>
    if (u0 >= 0.0F) {
 8004176:	edd7 7a05 	vldr	s15, [r7, #20]
 800417a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800417e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004182:	db07      	blt.n	8004194 <_ZN23px4_AlgorithmModelClass4stepEv+0x5ac>
      y = static_cast<uint16_T>(u0);
 8004184:	edd7 7a05 	vldr	s15, [r7, #20]
 8004188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418c:	ee17 3a90 	vmov	r3, s15
 8004190:	837b      	strh	r3, [r7, #26]
 8004192:	e005      	b.n	80041a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x5b8>
    } else {
      y = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	837b      	strh	r3, [r7, #26]
 8004198:	e002      	b.n	80041a0 <_ZN23px4_AlgorithmModelClass4stepEv+0x5b8>
    }
  } else {
    y = MAX_uint16_T;
 800419a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800419e:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80041a0:	8b7b      	ldrh	r3, [r7, #26]
 80041a2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80041a6:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ae:	d302      	bcc.n	80041b6 <_ZN23px4_AlgorithmModelClass4stepEv+0x5ce>
    tmp = 65535U;
 80041b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041b4:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M3 = static_cast<uint16_T>(tmp);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80041c6:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80041d0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80041d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 80041d8:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 80041e2:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                       Second_att_control_codeblock__B.Sum_f) *
 80041ec:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80041f0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80041f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80041fe:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004202:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 80040e4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4fc>
 8004206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420a:	eeb0 0a67 	vmov.f32	s0, s15
 800420e:	f7ff fc91 	bl	8003b34 <_Z13rt_roundf_snff>
 8004212:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8004216:	edd7 7a05 	vldr	s15, [r7, #20]
 800421a:	ed1f 7a4d 	vldr	s14, [pc, #-308]	; 80040e8 <_ZN23px4_AlgorithmModelClass4stepEv+0x500>
 800421e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004226:	d511      	bpl.n	800424c <_ZN23px4_AlgorithmModelClass4stepEv+0x664>
    if (u0 >= 0.0F) {
 8004228:	edd7 7a05 	vldr	s15, [r7, #20]
 800422c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	db07      	blt.n	8004246 <_ZN23px4_AlgorithmModelClass4stepEv+0x65e>
      y = static_cast<uint16_T>(u0);
 8004236:	edd7 7a05 	vldr	s15, [r7, #20]
 800423a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423e:	ee17 3a90 	vmov	r3, s15
 8004242:	837b      	strh	r3, [r7, #26]
 8004244:	e005      	b.n	8004252 <_ZN23px4_AlgorithmModelClass4stepEv+0x66a>
    } else {
      y = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	837b      	strh	r3, [r7, #26]
 800424a:	e002      	b.n	8004252 <_ZN23px4_AlgorithmModelClass4stepEv+0x66a>
    }
  } else {
    y = MAX_uint16_T;
 800424c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004250:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8004252:	8b7b      	ldrh	r3, [r7, #26]
 8004254:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004258:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d302      	bcc.n	8004268 <_ZN23px4_AlgorithmModelClass4stepEv+0x680>
    tmp = 65535U;
 8004262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004266:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M4 = static_cast<uint16_T>(tmp);
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800427e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004282:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 8004286:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 8004290:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                       Second_att_control_codeblock__B.Sum_f) *
 800429a:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800429e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80042a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 80042ac:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80042b0:	ed1f 7a74 	vldr	s14, [pc, #-464]	; 80040e4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4fc>
 80042b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042b8:	eeb0 0a67 	vmov.f32	s0, s15
 80042bc:	f7ff fc3a 	bl	8003b34 <_Z13rt_roundf_snff>
 80042c0:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 80042c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80042c8:	ed1f 7a79 	vldr	s14, [pc, #-484]	; 80040e8 <_ZN23px4_AlgorithmModelClass4stepEv+0x500>
 80042cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d4:	d511      	bpl.n	80042fa <_ZN23px4_AlgorithmModelClass4stepEv+0x712>
    if (u0 >= 0.0F) {
 80042d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e2:	db07      	blt.n	80042f4 <_ZN23px4_AlgorithmModelClass4stepEv+0x70c>
      y = static_cast<uint16_T>(u0);
 80042e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80042e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ec:	ee17 3a90 	vmov	r3, s15
 80042f0:	837b      	strh	r3, [r7, #26]
 80042f2:	e005      	b.n	8004300 <_ZN23px4_AlgorithmModelClass4stepEv+0x718>
    } else {
      y = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	837b      	strh	r3, [r7, #26]
 80042f8:	e002      	b.n	8004300 <_ZN23px4_AlgorithmModelClass4stepEv+0x718>
    }
  } else {
    y = MAX_uint16_T;
 80042fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042fe:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 8004300:	8b7b      	ldrh	r3, [r7, #26]
 8004302:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004306:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430e:	d302      	bcc.n	8004316 <_ZN23px4_AlgorithmModelClass4stepEv+0x72e>
    tmp = 65535U;
 8004310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004314:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M5 = static_cast<uint16_T>(tmp);
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004326:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800432a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        -Second_att_control_codeblock__B.Gain1) -
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004334:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
                        -Second_att_control_codeblock__B.Gain1) -
 800433e:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                       Second_att_control_codeblock__B.Sum_f) *
 8004348:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800434c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004350:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__U.set_thrust) * 1000.0F);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
                      Second_att_control_codeblock__U.set_thrust / 3.0F +
 800435a:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 800435e:	ed1f 7a9f 	vldr	s14, [pc, #-636]	; 80040e4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4fc>
 8004362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004366:	eeb0 0a67 	vmov.f32	s0, s15
 800436a:	f7ff fbe3 	bl	8003b34 <_Z13rt_roundf_snff>
 800436e:	ed87 0a05 	vstr	s0, [r7, #20]
  if (u0 < 65536.0F) {
 8004372:	edd7 7a05 	vldr	s15, [r7, #20]
 8004376:	ed1f 7aa4 	vldr	s14, [pc, #-656]	; 80040e8 <_ZN23px4_AlgorithmModelClass4stepEv+0x500>
 800437a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800437e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004382:	d511      	bpl.n	80043a8 <_ZN23px4_AlgorithmModelClass4stepEv+0x7c0>
    if (u0 >= 0.0F) {
 8004384:	edd7 7a05 	vldr	s15, [r7, #20]
 8004388:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004390:	db07      	blt.n	80043a2 <_ZN23px4_AlgorithmModelClass4stepEv+0x7ba>
      y = static_cast<uint16_T>(u0);
 8004392:	edd7 7a05 	vldr	s15, [r7, #20]
 8004396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439a:	ee17 3a90 	vmov	r3, s15
 800439e:	837b      	strh	r3, [r7, #26]
 80043a0:	e005      	b.n	80043ae <_ZN23px4_AlgorithmModelClass4stepEv+0x7c6>
    } else {
      y = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	837b      	strh	r3, [r7, #26]
 80043a6:	e002      	b.n	80043ae <_ZN23px4_AlgorithmModelClass4stepEv+0x7c6>
    }
  } else {
    y = MAX_uint16_T;
 80043a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043ac:	837b      	strh	r3, [r7, #26]
  }

  tmp = y + 1000U;
 80043ae:	8b7b      	ldrh	r3, [r7, #26]
 80043b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80043b4:	61fb      	str	r3, [r7, #28]
  if (tmp > 65535U) {
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043bc:	d302      	bcc.n	80043c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x7dc>
    tmp = 65535U;
 80043be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043c2:	61fb      	str	r3, [r7, #28]
  }

  Second_att_control_codeblock__B.M6 = static_cast<uint16_T>(tmp);
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

  // End of MATLAB Function: '<S1>/pwm_out1'

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M1 >
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 80043d4:	4b60      	ldr	r3, [pc, #384]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80043d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  if (Second_att_control_codeblock__B.M1 >
 80043da:	429a      	cmp	r2, r3
 80043dc:	d904      	bls.n	80043e8 <_ZN23px4_AlgorithmModelClass4stepEv+0x800>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 80043de:	4b5e      	ldr	r3, [pc, #376]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80043e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80043e4:	837b      	strh	r3, [r7, #26]
 80043e6:	e010      	b.n	800440a <_ZN23px4_AlgorithmModelClass4stepEv+0x822>
  } else if (Second_att_control_codeblock__B.M1 <
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 80043ee:	4b5a      	ldr	r3, [pc, #360]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80043f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  } else if (Second_att_control_codeblock__B.M1 <
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d204      	bcs.n	8004402 <_ZN23px4_AlgorithmModelClass4stepEv+0x81a>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80043f8:	4b57      	ldr	r3, [pc, #348]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80043fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80043fe:	837b      	strh	r3, [r7, #26]
 8004400:	e003      	b.n	800440a <_ZN23px4_AlgorithmModelClass4stepEv+0x822>
  } else {
    y = Second_att_control_codeblock__B.M1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8004408:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[0] = y;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8b7a      	ldrh	r2, [r7, #26]
 800440e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M2 >
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004418:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 800441a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  if (Second_att_control_codeblock__B.M2 >
 800441e:	429a      	cmp	r2, r3
 8004420:	d904      	bls.n	800442c <_ZN23px4_AlgorithmModelClass4stepEv+0x844>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004422:	4b4d      	ldr	r3, [pc, #308]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 8004424:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004428:	837b      	strh	r3, [r7, #26]
 800442a:	e010      	b.n	800444e <_ZN23px4_AlgorithmModelClass4stepEv+0x866>
  } else if (Second_att_control_codeblock__B.M2 <
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004432:	4b49      	ldr	r3, [pc, #292]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 8004434:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  } else if (Second_att_control_codeblock__B.M2 <
 8004438:	429a      	cmp	r2, r3
 800443a:	d204      	bcs.n	8004446 <_ZN23px4_AlgorithmModelClass4stepEv+0x85e>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 800443c:	4b46      	ldr	r3, [pc, #280]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 800443e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004442:	837b      	strh	r3, [r7, #26]
 8004444:	e003      	b.n	800444e <_ZN23px4_AlgorithmModelClass4stepEv+0x866>
  } else {
    y = Second_att_control_codeblock__B.M2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800444c:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[1] = y;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8b7a      	ldrh	r2, [r7, #26]
 8004452:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M3 >
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 800445c:	4b3e      	ldr	r3, [pc, #248]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 800445e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  if (Second_att_control_codeblock__B.M3 >
 8004462:	429a      	cmp	r2, r3
 8004464:	d904      	bls.n	8004470 <_ZN23px4_AlgorithmModelClass4stepEv+0x888>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004466:	4b3c      	ldr	r3, [pc, #240]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 8004468:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800446c:	837b      	strh	r3, [r7, #26]
 800446e:	e010      	b.n	8004492 <_ZN23px4_AlgorithmModelClass4stepEv+0x8aa>
  } else if (Second_att_control_codeblock__B.M3 <
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 8004478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  } else if (Second_att_control_codeblock__B.M3 <
 800447c:	429a      	cmp	r2, r3
 800447e:	d204      	bcs.n	800448a <_ZN23px4_AlgorithmModelClass4stepEv+0x8a2>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004480:	4b35      	ldr	r3, [pc, #212]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 8004482:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004486:	837b      	strh	r3, [r7, #26]
 8004488:	e003      	b.n	8004492 <_ZN23px4_AlgorithmModelClass4stepEv+0x8aa>
  } else {
    y = Second_att_control_codeblock__B.M3;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004490:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[2] = y;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8b7a      	ldrh	r2, [r7, #26]
 8004496:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M4 >
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 80044a0:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80044a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  if (Second_att_control_codeblock__B.M4 >
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d904      	bls.n	80044b4 <_ZN23px4_AlgorithmModelClass4stepEv+0x8cc>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 80044aa:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80044ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80044b0:	837b      	strh	r3, [r7, #26]
 80044b2:	e010      	b.n	80044d6 <_ZN23px4_AlgorithmModelClass4stepEv+0x8ee>
  } else if (Second_att_control_codeblock__B.M4 <
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 80044ba:	4b27      	ldr	r3, [pc, #156]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80044bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  } else if (Second_att_control_codeblock__B.M4 <
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d204      	bcs.n	80044ce <_ZN23px4_AlgorithmModelClass4stepEv+0x8e6>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80044c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80044ca:	837b      	strh	r3, [r7, #26]
 80044cc:	e003      	b.n	80044d6 <_ZN23px4_AlgorithmModelClass4stepEv+0x8ee>
  } else {
    y = Second_att_control_codeblock__B.M4;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80044d4:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[3] = y;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8b7a      	ldrh	r2, [r7, #26]
 80044da:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M5 >
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 80044e4:	4b1c      	ldr	r3, [pc, #112]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80044e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  if (Second_att_control_codeblock__B.M5 >
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d904      	bls.n	80044f8 <_ZN23px4_AlgorithmModelClass4stepEv+0x910>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 80044ee:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 80044f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80044f4:	837b      	strh	r3, [r7, #26]
 80044f6:	e010      	b.n	800451a <_ZN23px4_AlgorithmModelClass4stepEv+0x932>
  } else if (Second_att_control_codeblock__B.M5 <
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 80044fe:	4b16      	ldr	r3, [pc, #88]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 8004500:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  } else if (Second_att_control_codeblock__B.M5 <
 8004504:	429a      	cmp	r2, r3
 8004506:	d204      	bcs.n	8004512 <_ZN23px4_AlgorithmModelClass4stepEv+0x92a>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 800450a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800450e:	837b      	strh	r3, [r7, #26]
 8004510:	e003      	b.n	800451a <_ZN23px4_AlgorithmModelClass4stepEv+0x932>
  } else {
    y = Second_att_control_codeblock__B.M5;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8004518:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[4] = y;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8b7a      	ldrh	r2, [r7, #26]
 800451e:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118

  // Saturate: '<S1>/Saturation'
  if (Second_att_control_codeblock__B.M6 >
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8b3 20c6 	ldrh.w	r2, [r3, #198]	; 0xc6
      Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 800452a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  if (Second_att_control_codeblock__B.M6 >
 800452e:	429a      	cmp	r2, r3
 8004530:	d904      	bls.n	800453c <_ZN23px4_AlgorithmModelClass4stepEv+0x954>
    y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 8004534:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004538:	837b      	strh	r3, [r7, #26]
 800453a:	e013      	b.n	8004564 <_ZN23px4_AlgorithmModelClass4stepEv+0x97c>
  } else if (Second_att_control_codeblock__B.M6 <
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8b3 20c6 	ldrh.w	r2, [r3, #198]	; 0xc6
             Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 8004544:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  } else if (Second_att_control_codeblock__B.M6 <
 8004548:	429a      	cmp	r2, r3
 800454a:	d207      	bcs.n	800455c <_ZN23px4_AlgorithmModelClass4stepEv+0x974>
    y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 800454c:	4b02      	ldr	r3, [pc, #8]	; (8004558 <_ZN23px4_AlgorithmModelClass4stepEv+0x970>)
 800454e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004552:	837b      	strh	r3, [r7, #26]
 8004554:	e006      	b.n	8004564 <_ZN23px4_AlgorithmModelClass4stepEv+0x97c>
 8004556:	bf00      	nop
 8004558:	24000038 	.word	0x24000038
  } else {
    y = Second_att_control_codeblock__B.M6;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8004562:	837b      	strh	r3, [r7, #26]
  }

  // Outport: '<Root>/PWM_OUT' incorporates:
  //   Saturate: '<S1>/Saturation'

  Second_att_control_codeblock__Y.PWM_OUT[5] = y;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8b7a      	ldrh	r2, [r7, #26]
 8004568:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a

  // Delay: '<S5>/Delay'
  Second_att_control_codeblock__B.Delay =
    Second_att_control_codeblock_DW.Delay_DSTATE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  Second_att_control_codeblock__B.Delay =
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  // Gain: '<S5>/antiWU_Gain'
  Second_att_control_codeblock__B.antiWU_Gain =
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 8004578:	4b52      	ldr	r3, [pc, #328]	; (80046c4 <_ZN23px4_AlgorithmModelClass4stepEv+0xadc>)
 800457a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
    Second_att_control_codeblock__B.Delay;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 8004584:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain =
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  // Sum: '<S5>/Add'
  Second_att_control_codeblock__B.Add =
    Second_att_control_codeblock__B.pitchrollerror_b -
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	ed93 7a08 	vldr	s14, [r3, #32]
    Second_att_control_codeblock__B.antiWU_Gain;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
    Second_att_control_codeblock__B.pitchrollerror_b -
 800459a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add =
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  // Delay: '<S5>/Delay1'
  Second_att_control_codeblock__B.Delay1 =
    Second_att_control_codeblock_DW.Delay1_DSTATE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
  Second_att_control_codeblock__B.Delay1 =
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  // Gain: '<S5>/antiWU_Gain1'
  Second_att_control_codeblock__B.antiWU_Gain1 =
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 80045b0:	4b44      	ldr	r3, [pc, #272]	; (80046c4 <_ZN23px4_AlgorithmModelClass4stepEv+0xadc>)
 80045b2:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
    Second_att_control_codeblock__B.Delay1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 80045bc:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain1 =
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

  // Sum: '<S5>/Add1'
  Second_att_control_codeblock__B.Add1 =
    Second_att_control_codeblock__B.pitchrollerror_i -
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
    Second_att_control_codeblock__B.antiWU_Gain1;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
    Second_att_control_codeblock__B.pitchrollerror_i -
 80045d2:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add1 =
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  // Gain: '<S38>/Integral Gain'
  Second_att_control_codeblock__B.IntegralGain = kI_Yaw_rate_PID *
    Second_att_control_codeblock__B.Gain_f;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
  Second_att_control_codeblock__B.IntegralGain = kI_Yaw_rate_PID *
 80045e2:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <_ZN23px4_AlgorithmModelClass4stepEv+0xae0>)
 80045e4:	edd3 7a00 	vldr	s15, [r3]
 80045e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 80045f8:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <_ZN23px4_AlgorithmModelClass4stepEv+0xadc>)
 80045fa:	edd3 6a04 	vldr	s13, [r3, #16]
    Second_att_control_codeblock__B.pitchrollerror;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	edd3 7a03 	vldr	s15, [r3, #12]
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004604:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004618:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <_ZN23px4_AlgorithmModelClass4stepEv+0xadc>)
 800461a:	edd3 6a06 	vldr	s13, [r3, #24]
    Second_att_control_codeblock__B.Add;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004624:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 8004628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__B.TSamp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  Second_att_control_codeblock_DW.UD_DSTATE =
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

  // Update for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <_ZN23px4_AlgorithmModelClass4stepEv+0xadc>)
 8004644:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
    Second_att_control_codeblock__B.pitchrollerror_m;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 800464e:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 8004652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 8004662:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <_ZN23px4_AlgorithmModelClass4stepEv+0xadc>)
 8004664:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    Second_att_control_codeblock__B.Add1;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 800466e:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 8004672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__B.TSamp_h;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  // Update for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
    Second_att_control_codeblock__P.Integrator_gainval *
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <_ZN23px4_AlgorithmModelClass4stepEv+0xadc>)
 800468e:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
    Second_att_control_codeblock__B.IntegralGain;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
    Second_att_control_codeblock__P.Integrator_gainval *
 8004698:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 800469c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0

  // Update for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  Second_att_control_codeblock_DW.Delay_DSTATE =
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

  // Update for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
}
 80046ba:	bf00      	nop
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	24000038 	.word	0x24000038
 80046c8:	24000028 	.word	0x24000028

080046cc <_ZN23px4_AlgorithmModelClass10initializeEv>:

// Model initialize function
void px4_AlgorithmModelClass::initialize()
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC;
 80046d4:	4b19      	ldr	r3, [pc, #100]	; (800473c <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 80046d6:	695a      	ldr	r2, [r3, #20]
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC_k;
 80046de:	4b17      	ldr	r3, [pc, #92]	; (800473c <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 80046e0:	69da      	ldr	r2, [r3, #28]
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  //  Block description for '<S7>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__P.DiscreteDerivative_ICPrevScaled;
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 80046ea:	681a      	ldr	r2, [r3, #0]
  Second_att_control_codeblock_DW.UD_DSTATE =
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

  // InitializeConditions for DiscreteIntegrator: '<S4>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC;
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 80046f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC_j;
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 80046fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__P.DiscreteDerivative1_ICPrevScale;
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004708:	685a      	ldr	r2, [r3, #4]
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  // InitializeConditions for DiscreteIntegrator: '<S41>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE =
    Second_att_control_codeblock__P.DiscretePIDController_InitialCo;
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004712:	689a      	ldr	r2, [r3, #8]
  Second_att_control_codeblock_DW.Integrator_DSTATE =
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // InitializeConditions for Delay: '<S5>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__P.Delay_InitialCondition;
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 800471c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Second_att_control_codeblock_DW.Delay_DSTATE =
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

  // InitializeConditions for Delay: '<S5>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__P.Delay1_InitialCondition;
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <_ZN23px4_AlgorithmModelClass10initializeEv+0x70>)
 8004726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	24000038 	.word	0x24000038

08004740 <_ZN23px4_AlgorithmModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
px4_AlgorithmModelClass::px4_AlgorithmModelClass():
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  Second_att_control_codeblock__B()
  ,Second_att_control_codeblock_DW()
  ,Second_att_control_codeblock__U()
  ,Second_att_control_codeblock__Y()
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4618      	mov	r0, r3
 800474c:	23c8      	movs	r3, #200	; 0xc8
 800474e:	461a      	mov	r2, r3
 8004750:	2100      	movs	r1, #0
 8004752:	f029 fa78 	bl	802dc46 <memset>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	33c8      	adds	r3, #200	; 0xc8
 800475a:	2224      	movs	r2, #36	; 0x24
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f029 fa71 	bl	802dc46 <memset>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	33ec      	adds	r3, #236	; 0xec
 8004768:	2224      	movs	r2, #36	; 0x24
 800476a:	2100      	movs	r1, #0
 800476c:	4618      	mov	r0, r3
 800476e:	f029 fa6a 	bl	802dc46 <memset>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	605a      	str	r2, [r3, #4]
 800477e:	609a      	str	r2, [r3, #8]
{
  // Currently there is no constructor body generated.
}
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	0000      	movs	r0, r0
 800478c:	0000      	movs	r0, r0
	...

08004790 <_ZN25positionControlModelClass4stepEv>:
                                          //  Referenced by: '<S140>/Proportional Gain'


// Model step function
void positionControlModelClass::step()
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b08f      	sub	sp, #60	; 0x3c
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  real_T u2;

  // DataTypeConversion: '<S1>/Data Type Conversion' incorporates:
  //   Inport: '<Root>/estim_yaw'

  positionControl_B.DataTypeConversion = positionControl_U.estim_yaw;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	edd3 7aaa 	vldr	s15, [r3, #680]	; 0x2a8
 800479e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S7>/Trigonometric Function'
  cosOut = positionControl_B.DataTypeConversion;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ae:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = std::sin(cosOut);
 80047b2:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80047b6:	f026 fbe7 	bl	802af88 <sin>
 80047ba:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
  cosOut = std::cos(cosOut);
 80047be:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80047c2:	f026 fb21 	bl	802ae08 <cos>
 80047c6:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.TrigonometricFunction_o1 = sinOut;
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80047d0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  positionControl_B.TrigonometricFunction_o2 = cosOut;
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80047da:	e9c2 3404 	strd	r3, r4, [r2, #16]

  // SignalConversion generated from: '<S7>/Vector Concatenate'
  positionControl_B.MatrixConcatenate[0] =
    positionControl_B.TrigonometricFunction_o2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_B.MatrixConcatenate[0] =
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	e9c2 3406 	strd	r3, r4, [r2, #24]

  // Gain: '<S7>/Gain'
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 80047ea:	4b8e      	ldr	r3, [pc, #568]	; (8004a24 <_ZN25positionControlModelClass4stepEv+0x294>)
 80047ec:	ed93 6b3a 	vldr	d6, [r3, #232]	; 0xe8
    positionControl_B.TrigonometricFunction_o1;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	ed93 7b02 	vldr	d7, [r3, #8]
  positionControl_B.MatrixConcatenate[1] = positionControl_P.Gain_Gain *
 80047f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	ed83 7b08 	vstr	d7, [r3, #32]

  // SignalConversion generated from: '<S7>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[2] =
    positionControl_B.TrigonometricFunction_o1;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_B.MatrixConcatenate[2] =
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

  // SignalConversion generated from: '<S7>/Vector Concatenate1'
  positionControl_B.MatrixConcatenate[3] =
    positionControl_B.TrigonometricFunction_o2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_B.MatrixConcatenate[3] =
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

  // Sum: '<S1>/Add' incorporates:
  //   Inport: '<Root>/estim_x'
  //   Inport: '<Root>/set_x'

  positionControl_B.x_error = positionControl_U.set_x -
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	ed93 6bae 	vldr	d6, [r3, #696]	; 0x2b8
    positionControl_U.estim_x;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	ed93 7bb4 	vldr	d7, [r3, #720]	; 0x2d0
  positionControl_B.x_error = positionControl_U.set_x -
 8004824:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

  // Gain: '<S44>/Proportional Gain'
  positionControl_B.ProportionalGain = pos_x_P * positionControl_B.x_error;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8004834:	4b7c      	ldr	r3, [pc, #496]	; (8004a28 <_ZN25positionControlModelClass4stepEv+0x298>)
 8004836:	ed93 7b00 	vldr	d7, [r3]
 800483a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

  // DiscreteIntegrator: '<S39>/Integrator'
  positionControl_B.Integrator = positionControl_DW.Integrator_DSTATE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

  // Gain: '<S33>/Derivative Gain'
  positionControl_B.DerivativeGain = pos_x_D * positionControl_B.x_error;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8004856:	4b75      	ldr	r3, [pc, #468]	; (8004a2c <_ZN25positionControlModelClass4stepEv+0x29c>)
 8004858:	ed93 7b00 	vldr	d7, [r3]
 800485c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

  // DiscreteIntegrator: '<S34>/Filter'
  positionControl_B.Filter = positionControl_DW.Filter_DSTATE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

  // Sum: '<S34>/SumD'
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
    positionControl_B.Filter;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
  positionControl_B.SumD = positionControl_B.DerivativeGain -
 800487e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

  // Gain: '<S42>/Filter Coefficient'
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 8004888:	4b66      	ldr	r3, [pc, #408]	; (8004a24 <_ZN25positionControlModelClass4stepEv+0x294>)
 800488a:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
    positionControl_B.SumD;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
  positionControl_B.FilterCoefficient = positionControl_P.PIDController_N *
 8004894:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68

  // Sum: '<S48>/Sum'
  positionControl_B.Sum = (positionControl_B.ProportionalGain +
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
    positionControl_B.Integrator) + positionControl_B.FilterCoefficient;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
  positionControl_B.Sum = (positionControl_B.ProportionalGain +
 80048aa:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator) + positionControl_B.FilterCoefficient;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80048b4:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum = (positionControl_B.ProportionalGain +
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70

  // Saturate: '<S46>/Saturation'
  cosOut = positionControl_B.Sum;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80048c4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController_LowerSaturationLi;
 80048c8:	4b56      	ldr	r3, [pc, #344]	; (8004a24 <_ZN25positionControlModelClass4stepEv+0x294>)
 80048ca:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80048ce:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController_UpperSaturationLi;
 80048d2:	4b54      	ldr	r3, [pc, #336]	; (8004a24 <_ZN25positionControlModelClass4stepEv+0x294>)
 80048d4:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 80048d8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 80048dc:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80048e0:	ed97 7b08 	vldr	d7, [r7, #32]
 80048e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80048e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ec:	dd05      	ble.n	80048fa <_ZN25positionControlModelClass4stepEv+0x16a>
    positionControl_B.Saturation = u2;
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80048f4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80048f8:	e013      	b.n	8004922 <_ZN25positionControlModelClass4stepEv+0x192>
  } else if (cosOut < sinOut) {
 80048fa:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80048fe:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004902:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490a:	d505      	bpl.n	8004918 <_ZN25positionControlModelClass4stepEv+0x188>
    positionControl_B.Saturation = sinOut;
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004912:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8004916:	e004      	b.n	8004922 <_ZN25positionControlModelClass4stepEv+0x192>
  } else {
    positionControl_B.Saturation = cosOut;
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800491e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

  // Sum: '<S1>/Add4' incorporates:
  //   Inport: '<Root>/estim_y'
  //   Inport: '<Root>/set_y'

  positionControl_B.y_error = positionControl_U.set_y -
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	ed93 6bb0 	vldr	d6, [r3, #704]	; 0x2c0
    positionControl_U.estim_y;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	ed93 7bb6 	vldr	d7, [r3, #728]	; 0x2d8
  positionControl_B.y_error = positionControl_U.set_y -
 800492e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80

  // Gain: '<S188>/Proportional Gain'
  positionControl_B.ProportionalGain_p = pos_y_P * positionControl_B.y_error;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 800493e:	4b3c      	ldr	r3, [pc, #240]	; (8004a30 <_ZN25positionControlModelClass4stepEv+0x2a0>)
 8004940:	ed93 7b00 	vldr	d7, [r3]
 8004944:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88

  // DiscreteIntegrator: '<S183>/Integrator'
  positionControl_B.Integrator_f = positionControl_DW.Integrator_DSTATE_k;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	e9d3 349a 	ldrd	r3, r4, [r3, #616]	; 0x268
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90

  // Gain: '<S177>/Derivative Gain'
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 800495a:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <_ZN25positionControlModelClass4stepEv+0x294>)
 800495c:	ed93 6b00 	vldr	d6, [r3]
    positionControl_B.y_error;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
  positionControl_B.DerivativeGain_n = positionControl_P.pos_y_D *
 8004966:	ee26 7b07 	vmul.f64	d7, d6, d7
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98

  // DiscreteIntegrator: '<S178>/Filter'
  positionControl_B.Filter_p = positionControl_DW.Filter_DSTATE_m;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	e9d3 349c 	ldrd	r3, r4, [r3, #624]	; 0x270
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

  // Sum: '<S178>/SumD'
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	ed93 6b26 	vldr	d6, [r3, #152]	; 0x98
    positionControl_B.Filter_p;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
  positionControl_B.SumD_k = positionControl_B.DerivativeGain_n -
 8004988:	ee36 7b47 	vsub.f64	d7, d6, d7
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8

  // Gain: '<S186>/Filter Coefficient'
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <_ZN25positionControlModelClass4stepEv+0x294>)
 8004994:	ed93 6b26 	vldr	d6, [r3, #152]	; 0x98
    positionControl_B.SumD_k;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
  positionControl_B.FilterCoefficient_n = positionControl_P.PIDController4_N *
 800499e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0

  // Sum: '<S192>/Sum'
  positionControl_B.Sum_k = (positionControl_B.ProportionalGain_p +
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
    positionControl_B.Integrator_f) + positionControl_B.FilterCoefficient_n;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
  positionControl_B.Sum_k = (positionControl_B.ProportionalGain_p +
 80049b4:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_f) + positionControl_B.FilterCoefficient_n;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 80049be:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_k = (positionControl_B.ProportionalGain_p +
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8

  // Saturate: '<S190>/Saturation'
  cosOut = positionControl_B.Sum_k;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 80049ce:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController4_LowerSaturationL;
 80049d2:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <_ZN25positionControlModelClass4stepEv+0x294>)
 80049d4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80049d8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController4_UpperSaturationL;
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <_ZN25positionControlModelClass4stepEv+0x294>)
 80049de:	e9d3 3430 	ldrd	r3, r4, [r3, #192]	; 0xc0
 80049e2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 80049e6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80049ea:	ed97 7b08 	vldr	d7, [r7, #32]
 80049ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80049f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f6:	dd05      	ble.n	8004a04 <_ZN25positionControlModelClass4stepEv+0x274>
    positionControl_B.Saturation_o = u2;
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80049fe:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 8004a02:	e01c      	b.n	8004a3e <_ZN25positionControlModelClass4stepEv+0x2ae>
  } else if (cosOut < sinOut) {
 8004a04:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004a08:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004a0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	d50e      	bpl.n	8004a34 <_ZN25positionControlModelClass4stepEv+0x2a4>
    positionControl_B.Saturation_o = sinOut;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004a1c:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
 8004a20:	e00d      	b.n	8004a3e <_ZN25positionControlModelClass4stepEv+0x2ae>
 8004a22:	bf00      	nop
 8004a24:	24000100 	.word	0x24000100
 8004a28:	240000b0 	.word	0x240000b0
 8004a2c:	240000a8 	.word	0x240000a8
 8004a30:	240000c8 	.word	0x240000c8
  } else {
    positionControl_B.Saturation_o = cosOut;
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004a3a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

  // Sum: '<S1>/Add1' incorporates:
  //   Inport: '<Root>/estim_dx'
  //   Inport: '<Root>/estim_dy'

  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	ed93 6bba 	vldr	d6, [r3, #744]	; 0x2e8
    positionControl_B.Saturation;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
  positionControl_B.Add1[0] = positionControl_U.estim_dx -
 8004a4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	ed93 6bbc 	vldr	d6, [r3, #752]	; 0x2f0
    positionControl_B.Saturation_o;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
  positionControl_B.Add1[1] = positionControl_U.estim_dy -
 8004a60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0

  // Product: '<S1>/Matrix Multiply'
  cosOut = positionControl_B.MatrixConcatenate[0];
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004a70:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_B.MatrixConcatenate[1];
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004a7a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_B.MatrixConcatenate[2];
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004a84:	e9c7 3408 	strd	r3, r4, [r7, #32]
  tmp = positionControl_B.MatrixConcatenate[3];
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004a8e:	e9c7 3406 	strd	r3, r4, [r7, #24]
  tmp_0 = positionControl_B.Add1[0];
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8004a98:	e9c7 3404 	strd	r3, r4, [r7, #16]
  tmp_1 = positionControl_B.Add1[1];
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 8004aa2:	e9c7 3402 	strd	r3, r4, [r7, #8]
  cosOut *= tmp_0;
 8004aa6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004aaa:	ed97 7b04 	vldr	d7, [r7, #16]
 8004aae:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ab2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  cosOut += u2 * tmp_1;
 8004ab6:	ed97 6b08 	vldr	d6, [r7, #32]
 8004aba:	ed97 7b02 	vldr	d7, [r7, #8]
 8004abe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ac2:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004ac6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004aca:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  positionControl_B.vel_error[0] = cosOut;
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004ad4:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
  sinOut *= tmp_0;
 8004ad8:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004adc:	ed97 7b04 	vldr	d7, [r7, #16]
 8004ae0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ae4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  sinOut += tmp * tmp_1;
 8004ae8:	ed97 6b06 	vldr	d6, [r7, #24]
 8004aec:	ed97 7b02 	vldr	d7, [r7, #8]
 8004af0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004af4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8004af8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004afc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  positionControl_B.vel_error[1] = sinOut;
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004b06:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0

  // Gain: '<S236>/Proportional Gain'
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
    positionControl_B.vel_error[1];
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	ed93 6b38 	vldr	d6, [r3, #224]	; 0xe0
  positionControl_B.ProportionalGain_m = pos_y_vel_P *
 8004b10:	4b7f      	ldr	r3, [pc, #508]	; (8004d10 <_ZN25positionControlModelClass4stepEv+0x580>)
 8004b12:	ed93 7b00 	vldr	d7, [r3]
 8004b16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8

  // DiscreteIntegrator: '<S231>/Integrator'
  positionControl_B.Integrator_h = positionControl_DW.Integrator_DSTATE_f;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	e9d3 349e 	ldrd	r3, r4, [r3, #632]	; 0x278
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0

  // Gain: '<S225>/Derivative Gain'
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
    positionControl_B.vel_error[1];
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	ed93 6b38 	vldr	d6, [r3, #224]	; 0xe0
  positionControl_B.DerivativeGain_c = pos_y_vel_D *
 8004b32:	4b78      	ldr	r3, [pc, #480]	; (8004d14 <_ZN25positionControlModelClass4stepEv+0x584>)
 8004b34:	ed93 7b00 	vldr	d7, [r3]
 8004b38:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	ed83 7b3e 	vstr	d7, [r3, #248]	; 0xf8

  // DiscreteIntegrator: '<S226>/Filter'
  positionControl_B.Filter_g = positionControl_DW.Filter_DSTATE_j;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	e9d3 34a0 	ldrd	r3, r4, [r3, #640]	; 0x280
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	e9c2 3440 	strd	r3, r4, [r2, #256]	; 0x100

  // Sum: '<S226>/SumD'
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	ed93 6b3e 	vldr	d6, [r3, #248]	; 0xf8
    positionControl_B.Filter_g;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
  positionControl_B.SumD_f = positionControl_B.DerivativeGain_c -
 8004b5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108

  // Gain: '<S234>/Filter Coefficient'
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 8004b64:	4b6c      	ldr	r3, [pc, #432]	; (8004d18 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004b66:	ed93 6b28 	vldr	d6, [r3, #160]	; 0xa0
    positionControl_B.SumD_f;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	ed93 7b42 	vldr	d7, [r3, #264]	; 0x108
  positionControl_B.FilterCoefficient_e = positionControl_P.PIDController5_N *
 8004b70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110

  // Sum: '<S240>/Sum'
  positionControl_B.Sum_m = (positionControl_B.ProportionalGain_m +
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	ed93 6b3a 	vldr	d6, [r3, #232]	; 0xe8
    positionControl_B.Integrator_h) + positionControl_B.FilterCoefficient_e;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	ed93 7b3c 	vldr	d7, [r3, #240]	; 0xf0
  positionControl_B.Sum_m = (positionControl_B.ProportionalGain_m +
 8004b86:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_h) + positionControl_B.FilterCoefficient_e;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
 8004b90:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_m = (positionControl_B.ProportionalGain_m +
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118

  // Saturate: '<S238>/Saturation'
  cosOut = positionControl_B.Sum_m;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	e9d3 3446 	ldrd	r3, r4, [r3, #280]	; 0x118
 8004ba0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController5_LowerSaturationL;
 8004ba4:	4b5c      	ldr	r3, [pc, #368]	; (8004d18 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004ba6:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8004baa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController5_UpperSaturationL;
 8004bae:	4b5a      	ldr	r3, [pc, #360]	; (8004d18 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004bb0:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 8004bb4:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004bb8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004bbc:	ed97 7b08 	vldr	d7, [r7, #32]
 8004bc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc8:	dd05      	ble.n	8004bd6 <_ZN25positionControlModelClass4stepEv+0x446>
    positionControl_B.Saturation_l = u2;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004bd0:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 8004bd4:	e013      	b.n	8004bfe <_ZN25positionControlModelClass4stepEv+0x46e>
  } else if (cosOut < sinOut) {
 8004bd6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004bda:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004bde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d505      	bpl.n	8004bf4 <_ZN25positionControlModelClass4stepEv+0x464>
    positionControl_B.Saturation_l = sinOut;
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004bee:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
 8004bf2:	e004      	b.n	8004bfe <_ZN25positionControlModelClass4stepEv+0x46e>
  } else {
    positionControl_B.Saturation_l = cosOut;
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004bfa:	e9c2 3448 	strd	r3, r4, [r2, #288]	; 0x120
  }

  // End of Saturate: '<S238>/Saturation'

  // Gain: '<S1>/Gain1'
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 8004bfe:	4b46      	ldr	r3, [pc, #280]	; (8004d18 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004c00:	ed93 6b48 	vldr	d6, [r3, #288]	; 0x120
    positionControl_B.Saturation_l;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
  positionControl_B.Gain1 = positionControl_P.Gain1_Gain *
 8004c0a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	ed83 7b4a 	vstr	d7, [r3, #296]	; 0x128

  // Outport: '<Root>/des_roll' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion3'

  positionControl_Y.des_roll = static_cast<real32_T>(positionControl_B.Gain1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	ed93 7b4a 	vldr	d7, [r3, #296]	; 0x128
 8004c1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	edc3 7ac0 	vstr	s15, [r3, #768]	; 0x300

  // Gain: '<S92>/Proportional Gain'
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
    positionControl_B.vel_error[0];
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	ed93 6b36 	vldr	d6, [r3, #216]	; 0xd8
  positionControl_B.ProportionalGain_h = pos_x_vel_P *
 8004c2a:	4b3c      	ldr	r3, [pc, #240]	; (8004d1c <_ZN25positionControlModelClass4stepEv+0x58c>)
 8004c2c:	ed93 7b00 	vldr	d7, [r3]
 8004c30:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	ed83 7b4c 	vstr	d7, [r3, #304]	; 0x130

  // DiscreteIntegrator: '<S87>/Integrator'
  positionControl_B.Integrator_c = positionControl_DW.Integrator_DSTATE_m;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	e9d3 34a2 	ldrd	r3, r4, [r3, #648]	; 0x288
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	e9c2 344e 	strd	r3, r4, [r2, #312]	; 0x138

  // Gain: '<S81>/Derivative Gain'
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
    positionControl_B.vel_error[0];
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	ed93 6b36 	vldr	d6, [r3, #216]	; 0xd8
  positionControl_B.DerivativeGain_p = pos_x_vel_D *
 8004c4c:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <_ZN25positionControlModelClass4stepEv+0x590>)
 8004c4e:	ed93 7b00 	vldr	d7, [r3]
 8004c52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	ed83 7b50 	vstr	d7, [r3, #320]	; 0x140

  // DiscreteIntegrator: '<S82>/Filter'
  positionControl_B.Filter_i = positionControl_DW.Filter_DSTATE_d;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	e9d3 34a4 	ldrd	r3, r4, [r3, #656]	; 0x290
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	e9c2 3452 	strd	r3, r4, [r2, #328]	; 0x148

  // Sum: '<S82>/SumD'
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	ed93 6b50 	vldr	d6, [r3, #320]	; 0x140
    positionControl_B.Filter_i;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	ed93 7b52 	vldr	d7, [r3, #328]	; 0x148
  positionControl_B.SumD_h = positionControl_B.DerivativeGain_p -
 8004c74:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150

  // Gain: '<S90>/Filter Coefficient'
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 8004c7e:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004c80:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
    positionControl_B.SumD_h;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
  positionControl_B.FilterCoefficient_f = positionControl_P.PIDController1_N *
 8004c8a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	ed83 7b56 	vstr	d7, [r3, #344]	; 0x158

  // Sum: '<S96>/Sum'
  positionControl_B.Sum_o = (positionControl_B.ProportionalGain_h +
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	ed93 6b4c 	vldr	d6, [r3, #304]	; 0x130
    positionControl_B.Integrator_c) + positionControl_B.FilterCoefficient_f;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	ed93 7b4e 	vldr	d7, [r3, #312]	; 0x138
  positionControl_B.Sum_o = (positionControl_B.ProportionalGain_h +
 8004ca0:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_c) + positionControl_B.FilterCoefficient_f;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
 8004caa:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_o = (positionControl_B.ProportionalGain_h +
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160

  // Saturate: '<S94>/Saturation'
  cosOut = positionControl_B.Sum_o;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	e9d3 3458 	ldrd	r3, r4, [r3, #352]	; 0x160
 8004cba:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController1_LowerSaturationL;
 8004cbe:	4b16      	ldr	r3, [pc, #88]	; (8004d18 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004cc0:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004cc4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController1_UpperSaturationL;
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <_ZN25positionControlModelClass4stepEv+0x588>)
 8004cca:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 8004cce:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004cd2:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004cd6:	ed97 7b08 	vldr	d7, [r7, #32]
 8004cda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	dd05      	ble.n	8004cf0 <_ZN25positionControlModelClass4stepEv+0x560>
    positionControl_B.Saturation_j = u2;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004cea:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 8004cee:	e01e      	b.n	8004d2e <_ZN25positionControlModelClass4stepEv+0x59e>
  } else if (cosOut < sinOut) {
 8004cf0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004cf4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004cf8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d00:	d510      	bpl.n	8004d24 <_ZN25positionControlModelClass4stepEv+0x594>
    positionControl_B.Saturation_j = sinOut;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004d08:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
 8004d0c:	e00f      	b.n	8004d2e <_ZN25positionControlModelClass4stepEv+0x59e>
 8004d0e:	bf00      	nop
 8004d10:	240000e0 	.word	0x240000e0
 8004d14:	240000d0 	.word	0x240000d0
 8004d18:	24000100 	.word	0x24000100
 8004d1c:	240000c0 	.word	0x240000c0
 8004d20:	240000b8 	.word	0x240000b8
  } else {
    positionControl_B.Saturation_j = cosOut;
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004d2a:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168

  // Outport: '<Root>/des_pitch' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion2'

  positionControl_Y.des_pitch = static_cast<real32_T>
    (positionControl_B.Saturation_j);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	ed93 7b5a 	vldr	d7, [r3, #360]	; 0x168
  positionControl_Y.des_pitch = static_cast<real32_T>
 8004d34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	edc3 7ac1 	vstr	s15, [r3, #772]	; 0x304

  // Sum: '<S1>/Sum' incorporates:
  //   Inport: '<Root>/set_yaw'

  positionControl_B.Sum_my = positionControl_U.set_yaw -
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	ed93 6bac 	vldr	d6, [r3, #688]	; 0x2b0
    positionControl_B.DataTypeConversion;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	ed93 7b00 	vldr	d7, [r3]
  positionControl_B.Sum_my = positionControl_U.set_yaw -
 8004d4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

  // Gain: '<S1>/Gain'
  positionControl_B.Gain = Yaw_angleToRate_P * positionControl_B.Sum_my;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	ed93 6b5c 	vldr	d6, [r3, #368]	; 0x170
 8004d5a:	4ba5      	ldr	r3, [pc, #660]	; (8004ff0 <_ZN25positionControlModelClass4stepEv+0x860>)
 8004d5c:	ed93 7b00 	vldr	d7, [r3]
 8004d60:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	ed83 7b5e 	vstr	d7, [r3, #376]	; 0x178

  // Outport: '<Root>/des_yaw_rate' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion1'

  positionControl_Y.des_yaw_rate = static_cast<real32_T>(positionControl_B.Gain);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	ed93 7b5e 	vldr	d7, [r3, #376]	; 0x178
 8004d70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	edc3 7ac2 	vstr	s15, [r3, #776]	; 0x308

  // Sum: '<S1>/Add2' incorporates:
  //   Inport: '<Root>/estim_z'
  //   Inport: '<Root>/set_z'

  positionControl_B.alt_error = positionControl_U.set_z -
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	ed93 6bb2 	vldr	d6, [r3, #712]	; 0x2c8
    positionControl_U.estim_z;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	ed93 7bb8 	vldr	d7, [r3, #736]	; 0x2e0
  positionControl_B.alt_error = positionControl_U.set_z -
 8004d86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	ed83 7b60 	vstr	d7, [r3, #384]	; 0x180

  // Gain: '<S1>/Gain2'
  positionControl_B.Gain2 = positionControl_P.Gain2_Gain *
 8004d90:	4b98      	ldr	r3, [pc, #608]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004d92:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
    positionControl_B.alt_error;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	ed93 7b60 	vldr	d7, [r3, #384]	; 0x180
  positionControl_B.Gain2 = positionControl_P.Gain2_Gain *
 8004d9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	ed83 7b62 	vstr	d7, [r3, #392]	; 0x188

  // Gain: '<S140>/Proportional Gain'
  positionControl_B.ProportionalGain_k = pos_z_P * positionControl_B.Gain2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	ed93 6b62 	vldr	d6, [r3, #392]	; 0x188
 8004dac:	4b92      	ldr	r3, [pc, #584]	; (8004ff8 <_ZN25positionControlModelClass4stepEv+0x868>)
 8004dae:	ed93 7b00 	vldr	d7, [r3]
 8004db2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190

  // DiscreteIntegrator: '<S135>/Integrator'
  positionControl_B.Integrator_p = positionControl_DW.Integrator_DSTATE_b;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	e9d3 34a6 	ldrd	r3, r4, [r3, #664]	; 0x298
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198

  // Gain: '<S129>/Derivative Gain'
  positionControl_B.DerivativeGain_pu = pos_z_D * positionControl_B.Gain2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	ed93 6b62 	vldr	d6, [r3, #392]	; 0x188
 8004dce:	4b8b      	ldr	r3, [pc, #556]	; (8004ffc <_ZN25positionControlModelClass4stepEv+0x86c>)
 8004dd0:	ed93 7b00 	vldr	d7, [r3]
 8004dd4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0

  // DiscreteIntegrator: '<S130>/Filter'
  positionControl_B.Filter_m = positionControl_DW.Filter_DSTATE_e;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	e9d3 34a8 	ldrd	r3, r4, [r3, #672]	; 0x2a0
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	e9c2 346a 	strd	r3, r4, [r2, #424]	; 0x1a8

  // Sum: '<S130>/SumD'
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	ed93 6b68 	vldr	d6, [r3, #416]	; 0x1a0
    positionControl_B.Filter_m;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
  positionControl_B.SumD_b = positionControl_B.DerivativeGain_pu -
 8004df6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	ed83 7b6c 	vstr	d7, [r3, #432]	; 0x1b0

  // Gain: '<S138>/Filter Coefficient'
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 8004e00:	4b7c      	ldr	r3, [pc, #496]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004e02:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
    positionControl_B.SumD_b;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
  positionControl_B.FilterCoefficient_a = positionControl_P.PIDController3_N *
 8004e0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8

  // Sum: '<S144>/Sum'
  positionControl_B.Sum_c = (positionControl_B.ProportionalGain_k +
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	ed93 6b64 	vldr	d6, [r3, #400]	; 0x190
    positionControl_B.Integrator_p) + positionControl_B.FilterCoefficient_a;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
  positionControl_B.Sum_c = (positionControl_B.ProportionalGain_k +
 8004e22:	ee36 6b07 	vadd.f64	d6, d6, d7
    positionControl_B.Integrator_p) + positionControl_B.FilterCoefficient_a;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
 8004e2c:	ee36 7b07 	vadd.f64	d7, d6, d7
  positionControl_B.Sum_c = (positionControl_B.ProportionalGain_k +
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	ed83 7b70 	vstr	d7, [r3, #448]	; 0x1c0

  // Saturate: '<S142>/Saturation'
  cosOut = positionControl_B.Sum_c;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	e9d3 3470 	ldrd	r3, r4, [r3, #448]	; 0x1c0
 8004e3c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  sinOut = positionControl_P.PIDController3_LowerSaturationL;
 8004e40:	4b6c      	ldr	r3, [pc, #432]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004e42:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8004e46:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  u2 = positionControl_P.PIDController3_UpperSaturationL;
 8004e4a:	4b6a      	ldr	r3, [pc, #424]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004e4c:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 8004e50:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (cosOut > u2) {
 8004e54:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004e58:	ed97 7b08 	vldr	d7, [r7, #32]
 8004e5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e64:	dd05      	ble.n	8004e72 <_ZN25positionControlModelClass4stepEv+0x6e2>
    positionControl_B.Saturation_li = u2;
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004e6c:	e9c2 3472 	strd	r3, r4, [r2, #456]	; 0x1c8
 8004e70:	e013      	b.n	8004e9a <_ZN25positionControlModelClass4stepEv+0x70a>
  } else if (cosOut < sinOut) {
 8004e72:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8004e76:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004e7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e82:	d505      	bpl.n	8004e90 <_ZN25positionControlModelClass4stepEv+0x700>
    positionControl_B.Saturation_li = sinOut;
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004e8a:	e9c2 3472 	strd	r3, r4, [r2, #456]	; 0x1c8
 8004e8e:	e004      	b.n	8004e9a <_ZN25positionControlModelClass4stepEv+0x70a>
  } else {
    positionControl_B.Saturation_li = cosOut;
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004e96:	e9c2 3472 	strd	r3, r4, [r2, #456]	; 0x1c8

  // Outport: '<Root>/des_Thrust' incorporates:
  //   DataTypeConversion: '<S1>/Data Type Conversion4'

  positionControl_Y.des_Thrust = static_cast<real32_T>
    (positionControl_B.Saturation_li);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	ed93 7b72 	vldr	d7, [r3, #456]	; 0x1c8
  positionControl_Y.des_Thrust = static_cast<real32_T>
 8004ea0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	edc3 7ac3 	vstr	s15, [r3, #780]	; 0x30c

  // Gain: '<S36>/Integral Gain'
  positionControl_B.IntegralGain = pos_x_I * positionControl_B.x_error;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8004eb0:	4b53      	ldr	r3, [pc, #332]	; (8005000 <_ZN25positionControlModelClass4stepEv+0x870>)
 8004eb2:	ed93 7b00 	vldr	d7, [r3]
 8004eb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	ed83 7b74 	vstr	d7, [r3, #464]	; 0x1d0

  // Sum: '<S80>/SumI2'
  positionControl_B.SumI2 = positionControl_B.Saturation_j -
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	ed93 6b5a 	vldr	d6, [r3, #360]	; 0x168
    positionControl_B.Sum_o;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	ed93 7b58 	vldr	d7, [r3, #352]	; 0x160
  positionControl_B.SumI2 = positionControl_B.Saturation_j -
 8004ecc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	ed83 7b76 	vstr	d7, [r3, #472]	; 0x1d8

  // Gain: '<S80>/Kb'
  positionControl_B.Kb = positionControl_P.PIDController1_Kb *
 8004ed6:	4b47      	ldr	r3, [pc, #284]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004ed8:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
    positionControl_B.SumI2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	ed93 7b76 	vldr	d7, [r3, #472]	; 0x1d8
  positionControl_B.Kb = positionControl_P.PIDController1_Kb *
 8004ee2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	ed83 7b78 	vstr	d7, [r3, #480]	; 0x1e0

  // Gain: '<S84>/Integral Gain'
  positionControl_B.IntegralGain_k = pos_x_vel_I * positionControl_B.vel_error[0];
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	ed93 6b36 	vldr	d6, [r3, #216]	; 0xd8
 8004ef2:	4b44      	ldr	r3, [pc, #272]	; (8005004 <_ZN25positionControlModelClass4stepEv+0x874>)
 8004ef4:	ed93 7b00 	vldr	d7, [r3]
 8004ef8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	ed83 7b7a 	vstr	d7, [r3, #488]	; 0x1e8

  // Sum: '<S80>/SumI4'
  positionControl_B.SumI4 = positionControl_B.Kb +
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	ed93 6b78 	vldr	d6, [r3, #480]	; 0x1e0
    positionControl_B.IntegralGain_k;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	ed93 7b7a 	vldr	d7, [r3, #488]	; 0x1e8
  positionControl_B.SumI4 = positionControl_B.Kb +
 8004f0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	ed83 7b7c 	vstr	d7, [r3, #496]	; 0x1f0

  // Gain: '<S180>/Integral Gain'
  positionControl_B.IntegralGain_o = pos_y_I * positionControl_B.y_error;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8004f1e:	4b3a      	ldr	r3, [pc, #232]	; (8005008 <_ZN25positionControlModelClass4stepEv+0x878>)
 8004f20:	ed93 7b00 	vldr	d7, [r3]
 8004f24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	ed83 7b7e 	vstr	d7, [r3, #504]	; 0x1f8

  // Sum: '<S224>/SumI2'
  positionControl_B.SumI2_n = positionControl_B.Saturation_l -
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	ed93 6b48 	vldr	d6, [r3, #288]	; 0x120
    positionControl_B.Sum_m;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
  positionControl_B.SumI2_n = positionControl_B.Saturation_l -
 8004f3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	ed83 7b80 	vstr	d7, [r3, #512]	; 0x200

  // Gain: '<S224>/Kb'
  positionControl_B.Kb_e = positionControl_P.PIDController5_Kb *
 8004f44:	4b2b      	ldr	r3, [pc, #172]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004f46:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
    positionControl_B.SumI2_n;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	ed93 7b80 	vldr	d7, [r3, #512]	; 0x200
  positionControl_B.Kb_e = positionControl_P.PIDController5_Kb *
 8004f50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	ed83 7b82 	vstr	d7, [r3, #520]	; 0x208

  // Gain: '<S228>/Integral Gain'
  positionControl_B.IntegralGain_b = pos_y_vel_I * positionControl_B.vel_error[1];
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	ed93 6b38 	vldr	d6, [r3, #224]	; 0xe0
 8004f60:	4b2a      	ldr	r3, [pc, #168]	; (800500c <_ZN25positionControlModelClass4stepEv+0x87c>)
 8004f62:	ed93 7b00 	vldr	d7, [r3]
 8004f66:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	ed83 7b84 	vstr	d7, [r3, #528]	; 0x210

  // Sum: '<S224>/SumI4'
  positionControl_B.SumI4_c = positionControl_B.Kb_e +
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	ed93 6b82 	vldr	d6, [r3, #520]	; 0x208
    positionControl_B.IntegralGain_b;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
  positionControl_B.SumI4_c = positionControl_B.Kb_e +
 8004f7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	ed83 7b86 	vstr	d7, [r3, #536]	; 0x218

  // Gain: '<S128>/ZeroGain'
  positionControl_B.ZeroGain = positionControl_P.ZeroGain_Gain *
 8004f86:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004f88:	ed93 6b54 	vldr	d6, [r3, #336]	; 0x150
    positionControl_B.Sum_c;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	ed93 7b70 	vldr	d7, [r3, #448]	; 0x1c0
  positionControl_B.ZeroGain = positionControl_P.ZeroGain_Gain *
 8004f92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	ed83 7b88 	vstr	d7, [r3, #544]	; 0x220

  // DeadZone: '<S128>/DeadZone'
  if (positionControl_B.Sum_c >
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	ed93 6b70 	vldr	d6, [r3, #448]	; 0x1c0
      positionControl_P.PIDController3_UpperSaturationL) {
 8004fa2:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004fa4:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
  if (positionControl_B.Sum_c >
 8004fa8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb0:	dd0b      	ble.n	8004fca <_ZN25positionControlModelClass4stepEv+0x83a>
    positionControl_B.DeadZone = positionControl_B.Sum_c -
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	ed93 6b70 	vldr	d6, [r3, #448]	; 0x1c0
      positionControl_P.PIDController3_UpperSaturationL;
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004fba:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
    positionControl_B.DeadZone = positionControl_B.Sum_c -
 8004fbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	ed83 7b8a 	vstr	d7, [r3, #552]	; 0x228
 8004fc8:	e02d      	b.n	8005026 <_ZN25positionControlModelClass4stepEv+0x896>
  } else if (positionControl_B.Sum_c >=
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	ed93 6b70 	vldr	d6, [r3, #448]	; 0x1c0
             positionControl_P.PIDController3_LowerSaturationL) {
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <_ZN25positionControlModelClass4stepEv+0x864>)
 8004fd2:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
  } else if (positionControl_B.Sum_c >=
 8004fd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fde:	db17      	blt.n	8005010 <_ZN25positionControlModelClass4stepEv+0x880>
    positionControl_B.DeadZone = 0.0;
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	e9c2 348a 	strd	r3, r4, [r2, #552]	; 0x228
 8004fee:	e01a      	b.n	8005026 <_ZN25positionControlModelClass4stepEv+0x896>
 8004ff0:	240000a0 	.word	0x240000a0
 8004ff4:	24000100 	.word	0x24000100
 8004ff8:	240000f8 	.word	0x240000f8
 8004ffc:	240000e8 	.word	0x240000e8
 8005000:	240008f8 	.word	0x240008f8
 8005004:	24000900 	.word	0x24000900
 8005008:	24000908 	.word	0x24000908
 800500c:	240000d8 	.word	0x240000d8
  } else {
    positionControl_B.DeadZone = positionControl_B.Sum_c -
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	ed93 6b70 	vldr	d6, [r3, #448]	; 0x1c0
      positionControl_P.PIDController3_LowerSaturationL;
 8005016:	4b82      	ldr	r3, [pc, #520]	; (8005220 <_ZN25positionControlModelClass4stepEv+0xa90>)
 8005018:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
    positionControl_B.DeadZone = positionControl_B.Sum_c -
 800501c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	ed83 7b8a 	vstr	d7, [r3, #552]	; 0x228
  }

  // End of DeadZone: '<S128>/DeadZone'

  // RelationalOperator: '<S128>/NotEqual'
  positionControl_B.NotEqual = (positionControl_B.ZeroGain !=
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	ed93 6b88 	vldr	d6, [r3, #544]	; 0x220
    positionControl_B.DeadZone);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	ed93 7b8a 	vldr	d7, [r3, #552]	; 0x228
  positionControl_B.NotEqual = (positionControl_B.ZeroGain !=
 8005032:	eeb4 6b47 	vcmp.f64	d6, d7
 8005036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252

  // Signum: '<S128>/SignPreSat'
  cosOut = positionControl_B.DeadZone;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	e9d3 348a 	ldrd	r3, r4, [r3, #552]	; 0x228
 8005050:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 8005054:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005058:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	d506      	bpl.n	8005070 <_ZN25positionControlModelClass4stepEv+0x8e0>
    positionControl_B.SignPreSat = -1.0;
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	4c6e      	ldr	r4, [pc, #440]	; (8005224 <_ZN25positionControlModelClass4stepEv+0xa94>)
 800506a:	e9c2 348c 	strd	r3, r4, [r2, #560]	; 0x230
 800506e:	e012      	b.n	8005096 <_ZN25positionControlModelClass4stepEv+0x906>
  } else if (cosOut > 0.0) {
 8005070:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005074:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507c:	dd06      	ble.n	800508c <_ZN25positionControlModelClass4stepEv+0x8fc>
    positionControl_B.SignPreSat = 1.0;
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	4c68      	ldr	r4, [pc, #416]	; (8005228 <_ZN25positionControlModelClass4stepEv+0xa98>)
 8005086:	e9c2 348c 	strd	r3, r4, [r2, #560]	; 0x230
 800508a:	e004      	b.n	8005096 <_ZN25positionControlModelClass4stepEv+0x906>
  } else {
    positionControl_B.SignPreSat = cosOut;
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005092:	e9c2 348c 	strd	r3, r4, [r2, #560]	; 0x230
  }

  // End of Signum: '<S128>/SignPreSat'

  // DataTypeConversion: '<S128>/DataTypeConv1'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreSat), 256.0);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	ed93 7b8c 	vldr	d7, [r3, #560]	; 0x230
 800509c:	eeb0 0b47 	vmov.f64	d0, d7
 80050a0:	f025 fefa 	bl	802ae98 <floor>
 80050a4:	eeb0 7b40 	vmov.f64	d7, d0
 80050a8:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8005218 <_ZN25positionControlModelClass4stepEv+0xa88>
 80050ac:	eeb0 0b47 	vmov.f64	d0, d7
 80050b0:	f026 f82a 	bl	802b108 <fmod>
 80050b4:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 80050b8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80050bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80050c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c4:	d50d      	bpl.n	80050e2 <_ZN25positionControlModelClass4stepEv+0x952>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>
    (static_cast<uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>
 80050c6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80050ca:	eeb1 7b47 	vneg.f64	d7, d7
 80050ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80050d2:	edc7 7a00 	vstr	s15, [r7]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 80050da:	425b      	negs	r3, r3
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	b25b      	sxtb	r3, r3
 80050e0:	e008      	b.n	80050f4 <_ZN25positionControlModelClass4stepEv+0x964>
    (static_cast<uint8_T>(cosOut))));
 80050e2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80050e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80050ea:	edc7 7a00 	vstr	s15, [r7]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv1 = static_cast<int8_T>(cosOut < 0.0 ?
 80050f2:	b25b      	sxtb	r3, r3
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	f882 3250 	strb.w	r3, [r2, #592]	; 0x250

  // Gain: '<S132>/Integral Gain'
  positionControl_B.IntegralGain_l = pos_z_I * positionControl_B.Gain2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	ed93 6b62 	vldr	d6, [r3, #392]	; 0x188
 8005100:	4b4a      	ldr	r3, [pc, #296]	; (800522c <_ZN25positionControlModelClass4stepEv+0xa9c>)
 8005102:	ed93 7b00 	vldr	d7, [r3]
 8005106:	ee26 7b07 	vmul.f64	d7, d6, d7
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	ed83 7b8e 	vstr	d7, [r3, #568]	; 0x238

  // Signum: '<S128>/SignPreIntegrator'
  cosOut = positionControl_B.IntegralGain_l;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	e9d3 348e 	ldrd	r3, r4, [r3, #568]	; 0x238
 8005116:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  if (cosOut < 0.0) {
 800511a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800511e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005126:	d506      	bpl.n	8005136 <_ZN25positionControlModelClass4stepEv+0x9a6>
    positionControl_B.SignPreIntegrator = -1.0;
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	4c3d      	ldr	r4, [pc, #244]	; (8005224 <_ZN25positionControlModelClass4stepEv+0xa94>)
 8005130:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240
 8005134:	e012      	b.n	800515c <_ZN25positionControlModelClass4stepEv+0x9cc>
  } else if (cosOut > 0.0) {
 8005136:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800513a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	dd06      	ble.n	8005152 <_ZN25positionControlModelClass4stepEv+0x9c2>
    positionControl_B.SignPreIntegrator = 1.0;
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	4c37      	ldr	r4, [pc, #220]	; (8005228 <_ZN25positionControlModelClass4stepEv+0xa98>)
 800514c:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240
 8005150:	e004      	b.n	800515c <_ZN25positionControlModelClass4stepEv+0x9cc>
  } else {
    positionControl_B.SignPreIntegrator = cosOut;
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005158:	e9c2 3490 	strd	r3, r4, [r2, #576]	; 0x240
  }

  // End of Signum: '<S128>/SignPreIntegrator'

  // DataTypeConversion: '<S128>/DataTypeConv2'
  cosOut = std::fmod(std::floor(positionControl_B.SignPreIntegrator), 256.0);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	ed93 7b90 	vldr	d7, [r3, #576]	; 0x240
 8005162:	eeb0 0b47 	vmov.f64	d0, d7
 8005166:	f025 fe97 	bl	802ae98 <floor>
 800516a:	eeb0 7b40 	vmov.f64	d7, d0
 800516e:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8005218 <_ZN25positionControlModelClass4stepEv+0xa88>
 8005172:	eeb0 0b47 	vmov.f64	d0, d7
 8005176:	f025 ffc7 	bl	802b108 <fmod>
 800517a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 800517e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005182:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518a:	d50d      	bpl.n	80051a8 <_ZN25positionControlModelClass4stepEv+0xa18>
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>(static_cast<
    uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>(static_cast<
 800518c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005190:	eeb1 7b47 	vneg.f64	d7, d7
    static_cast<int32_T>(static_cast<int8_T>(-static_cast<int8_T>(static_cast<
 8005194:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005198:	edc7 7a00 	vstr	s15, [r7]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 80051a0:	425b      	negs	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	b25b      	sxtb	r3, r3
 80051a6:	e008      	b.n	80051ba <_ZN25positionControlModelClass4stepEv+0xa2a>
    uint8_T>(-cosOut)))) : static_cast<int32_T>(static_cast<int8_T>(static_cast<
 80051a8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80051ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80051b0:	edc7 7a00 	vstr	s15, [r7]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	b2db      	uxtb	r3, r3
  positionControl_B.DataTypeConv2 = static_cast<int8_T>(cosOut < 0.0 ?
 80051b8:	b25b      	sxtb	r3, r3
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	f882 3251 	strb.w	r3, [r2, #593]	; 0x251
    uint8_T>(cosOut))));

  // RelationalOperator: '<S128>/Equal1'
  positionControl_B.Equal1 = (positionControl_B.DataTypeConv1 ==
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f993 2250 	ldrsb.w	r2, [r3, #592]	; 0x250
    positionControl_B.DataTypeConv2);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f993 3251 	ldrsb.w	r3, [r3, #593]	; 0x251
  positionControl_B.Equal1 = (positionControl_B.DataTypeConv1 ==
 80051cc:	429a      	cmp	r2, r3
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253

  // Logic: '<S128>/AND3'
  positionControl_B.AND3 = (positionControl_B.NotEqual &&
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3252 	ldrb.w	r3, [r3, #594]	; 0x252
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d006      	beq.n	80051f6 <_ZN25positionControlModelClass4stepEv+0xa66>
    positionControl_B.Equal1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3253 	ldrb.w	r3, [r3, #595]	; 0x253
  positionControl_B.AND3 = (positionControl_B.NotEqual &&
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <_ZN25positionControlModelClass4stepEv+0xa66>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <_ZN25positionControlModelClass4stepEv+0xa68>
 80051f6:	2300      	movs	r3, #0
 80051f8:	461a      	mov	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254

  // Switch: '<S128>/Switch' incorporates:
  //   Constant: '<S128>/Constant1'

  if (positionControl_B.AND3) {
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 8005206:	2b00      	cmp	r3, #0
 8005208:	d012      	beq.n	8005230 <_ZN25positionControlModelClass4stepEv+0xaa0>
    positionControl_B.Switch = positionControl_P.Constant1_Value;
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <_ZN25positionControlModelClass4stepEv+0xa90>)
 800520c:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	e9c2 3492 	strd	r3, r4, [r2, #584]	; 0x248
 8005216:	e011      	b.n	800523c <_ZN25positionControlModelClass4stepEv+0xaac>
 8005218:	00000000 	.word	0x00000000
 800521c:	40700000 	.word	0x40700000
 8005220:	24000100 	.word	0x24000100
 8005224:	bff00000 	.word	0xbff00000
 8005228:	3ff00000 	.word	0x3ff00000
 800522c:	240000f0 	.word	0x240000f0
  } else {
    positionControl_B.Switch = positionControl_B.IntegralGain_l;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	e9d3 348e 	ldrd	r3, r4, [r3, #568]	; 0x238
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	e9c2 3492 	strd	r3, r4, [r2, #584]	; 0x248
  }

  // End of Switch: '<S128>/Switch'

  // Update for DiscreteIntegrator: '<S39>/Integrator'
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	ed93 6b96 	vldr	d6, [r3, #600]	; 0x258
 8005242:	4b50      	ldr	r3, [pc, #320]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 8005244:	ed93 5b3c 	vldr	d5, [r3, #240]	; 0xf0
    positionControl_B.IntegralGain;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	ed93 7b74 	vldr	d7, [r3, #464]	; 0x1d0
  positionControl_DW.Integrator_DSTATE += positionControl_P.Integrator_gainval *
 800524e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005252:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	ed83 7b96 	vstr	d7, [r3, #600]	; 0x258

  // Update for DiscreteIntegrator: '<S34>/Filter'
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	ed93 6b98 	vldr	d6, [r3, #608]	; 0x260
 8005262:	4b48      	ldr	r3, [pc, #288]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 8005264:	ed93 5b3e 	vldr	d5, [r3, #248]	; 0xf8
    positionControl_B.FilterCoefficient;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
  positionControl_DW.Filter_DSTATE += positionControl_P.Filter_gainval *
 800526e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005272:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	ed83 7b98 	vstr	d7, [r3, #608]	; 0x260

  // Update for DiscreteIntegrator: '<S183>/Integrator'
  positionControl_DW.Integrator_DSTATE_k +=
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	ed93 6b9a 	vldr	d6, [r3, #616]	; 0x268
    positionControl_P.Integrator_gainval_l * positionControl_B.IntegralGain_o;
 8005282:	4b40      	ldr	r3, [pc, #256]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 8005284:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
 800528e:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_k +=
 8005292:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	ed83 7b9a 	vstr	d7, [r3, #616]	; 0x268

  // Update for DiscreteIntegrator: '<S178>/Filter'
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	ed93 6b9c 	vldr	d6, [r3, #624]	; 0x270
 80052a2:	4b38      	ldr	r3, [pc, #224]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 80052a4:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
    positionControl_B.FilterCoefficient_n;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
  positionControl_DW.Filter_DSTATE_m += positionControl_P.Filter_gainval_l *
 80052ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80052b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	ed83 7b9c 	vstr	d7, [r3, #624]	; 0x270

  // Update for DiscreteIntegrator: '<S231>/Integrator'
  positionControl_DW.Integrator_DSTATE_f +=
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	ed93 6b9e 	vldr	d6, [r3, #632]	; 0x278
    positionControl_P.Integrator_gainval_k * positionControl_B.SumI4_c;
 80052c2:	4b30      	ldr	r3, [pc, #192]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 80052c4:	ed93 5b44 	vldr	d5, [r3, #272]	; 0x110
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	ed93 7b86 	vldr	d7, [r3, #536]	; 0x218
 80052ce:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_f +=
 80052d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	ed83 7b9e 	vstr	d7, [r3, #632]	; 0x278

  // Update for DiscreteIntegrator: '<S226>/Filter'
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	ed93 6ba0 	vldr	d6, [r3, #640]	; 0x280
 80052e2:	4b28      	ldr	r3, [pc, #160]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 80052e4:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
    positionControl_B.FilterCoefficient_e;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	ed93 7b44 	vldr	d7, [r3, #272]	; 0x110
  positionControl_DW.Filter_DSTATE_j += positionControl_P.Filter_gainval_i *
 80052ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80052f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	ed83 7ba0 	vstr	d7, [r3, #640]	; 0x280

  // Update for DiscreteIntegrator: '<S87>/Integrator'
  positionControl_DW.Integrator_DSTATE_m +=
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	ed93 6ba2 	vldr	d6, [r3, #648]	; 0x288
    positionControl_P.Integrator_gainval_lc * positionControl_B.SumI4;
 8005302:	4b20      	ldr	r3, [pc, #128]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 8005304:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	ed93 7b7c 	vldr	d7, [r3, #496]	; 0x1f0
 800530e:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_m +=
 8005312:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	ed83 7ba2 	vstr	d7, [r3, #648]	; 0x288

  // Update for DiscreteIntegrator: '<S82>/Filter'
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	ed93 6ba4 	vldr	d6, [r3, #656]	; 0x290
 8005322:	4b18      	ldr	r3, [pc, #96]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 8005324:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
    positionControl_B.FilterCoefficient_f;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	ed93 7b56 	vldr	d7, [r3, #344]	; 0x158
  positionControl_DW.Filter_DSTATE_d += positionControl_P.Filter_gainval_l5 *
 800532e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005332:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	ed83 7ba4 	vstr	d7, [r3, #656]	; 0x290

  // Update for DiscreteIntegrator: '<S135>/Integrator'
  positionControl_DW.Integrator_DSTATE_b +=
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	ed93 6ba6 	vldr	d6, [r3, #664]	; 0x298
    positionControl_P.Integrator_gainval_a * positionControl_B.Switch;
 8005342:	4b10      	ldr	r3, [pc, #64]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 8005344:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	ed93 7b92 	vldr	d7, [r3, #584]	; 0x248
 800534e:	ee25 7b07 	vmul.f64	d7, d5, d7
  positionControl_DW.Integrator_DSTATE_b +=
 8005352:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	ed83 7ba6 	vstr	d7, [r3, #664]	; 0x298

  // Update for DiscreteIntegrator: '<S130>/Filter'
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	ed93 6ba8 	vldr	d6, [r3, #672]	; 0x2a0
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <_ZN25positionControlModelClass4stepEv+0xbf4>)
 8005364:	ed93 5b52 	vldr	d5, [r3, #328]	; 0x148
    positionControl_B.FilterCoefficient_a;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	ed93 7b6e 	vldr	d7, [r3, #440]	; 0x1b8
  positionControl_DW.Filter_DSTATE_e += positionControl_P.Filter_gainval_g *
 800536e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005372:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	ed83 7ba8 	vstr	d7, [r3, #672]	; 0x2a0
}
 800537c:	bf00      	nop
 800537e:	373c      	adds	r7, #60	; 0x3c
 8005380:	46bd      	mov	sp, r7
 8005382:	bd90      	pop	{r4, r7, pc}
 8005384:	24000100 	.word	0x24000100

08005388 <_ZN25positionControlModelClass10initializeEv>:

// Model initialize function
void positionControlModelClass::initialize()
{
 8005388:	b490      	push	{r4, r7}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S39>/Integrator'
  positionControl_DW.Integrator_DSTATE =
    positionControl_P.PIDController_InitialConditio_c;
 8005390:	4b20      	ldr	r3, [pc, #128]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 8005392:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
  positionControl_DW.Integrator_DSTATE =
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	e9c2 3496 	strd	r3, r4, [r2, #600]	; 0x258

  // InitializeConditions for DiscreteIntegrator: '<S34>/Filter'
  positionControl_DW.Filter_DSTATE =
    positionControl_P.PIDController_InitialConditionF;
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 800539e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  positionControl_DW.Filter_DSTATE =
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	e9c2 3498 	strd	r3, r4, [r2, #608]	; 0x260

  // InitializeConditions for DiscreteIntegrator: '<S183>/Integrator'
  positionControl_DW.Integrator_DSTATE_k =
    positionControl_P.PIDController4_InitialConditi_i;
 80053a8:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 80053aa:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
  positionControl_DW.Integrator_DSTATE_k =
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	e9c2 349a 	strd	r3, r4, [r2, #616]	; 0x268

  // InitializeConditions for DiscreteIntegrator: '<S178>/Filter'
  positionControl_DW.Filter_DSTATE_m =
    positionControl_P.PIDController4_InitialCondition;
 80053b4:	4b17      	ldr	r3, [pc, #92]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 80053b6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
  positionControl_DW.Filter_DSTATE_m =
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	e9c2 349c 	strd	r3, r4, [r2, #624]	; 0x270

  // InitializeConditions for DiscreteIntegrator: '<S231>/Integrator'
  positionControl_DW.Integrator_DSTATE_f =
    positionControl_P.PIDController5_InitialConditi_c;
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 80053c2:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
  positionControl_DW.Integrator_DSTATE_f =
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	e9c2 349e 	strd	r3, r4, [r2, #632]	; 0x278

  // InitializeConditions for DiscreteIntegrator: '<S226>/Filter'
  positionControl_DW.Filter_DSTATE_j =
    positionControl_P.PIDController5_InitialCondition;
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 80053ce:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
  positionControl_DW.Filter_DSTATE_j =
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	e9c2 34a0 	strd	r3, r4, [r2, #640]	; 0x280

  // InitializeConditions for DiscreteIntegrator: '<S87>/Integrator'
  positionControl_DW.Integrator_DSTATE_m =
    positionControl_P.PIDController1_InitialConditi_a;
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 80053da:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
  positionControl_DW.Integrator_DSTATE_m =
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	e9c2 34a2 	strd	r3, r4, [r2, #648]	; 0x288

  // InitializeConditions for DiscreteIntegrator: '<S82>/Filter'
  positionControl_DW.Filter_DSTATE_d =
    positionControl_P.PIDController1_InitialCondition;
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 80053e6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
  positionControl_DW.Filter_DSTATE_d =
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	e9c2 34a4 	strd	r3, r4, [r2, #656]	; 0x290

  // InitializeConditions for DiscreteIntegrator: '<S135>/Integrator'
  positionControl_DW.Integrator_DSTATE_b =
    positionControl_P.PIDController3_InitialConditi_d;
 80053f0:	4b08      	ldr	r3, [pc, #32]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 80053f2:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
  positionControl_DW.Integrator_DSTATE_b =
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	e9c2 34a6 	strd	r3, r4, [r2, #664]	; 0x298

  // InitializeConditions for DiscreteIntegrator: '<S130>/Filter'
  positionControl_DW.Filter_DSTATE_e =
    positionControl_P.PIDController3_InitialCondition;
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <_ZN25positionControlModelClass10initializeEv+0x8c>)
 80053fe:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
  positionControl_DW.Filter_DSTATE_e =
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	e9c2 34a8 	strd	r3, r4, [r2, #672]	; 0x2a0
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bc90      	pop	{r4, r7}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	24000100 	.word	0x24000100

08005418 <_ZN25positionControlModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
positionControlModelClass::positionControlModelClass():
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  positionControl_B()
  ,positionControl_DW()
  ,positionControl_U()
  ,positionControl_Y()
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	f44f 7316 	mov.w	r3, #600	; 0x258
 8005428:	461a      	mov	r2, r3
 800542a:	2100      	movs	r1, #0
 800542c:	f028 fc0b 	bl	802dc46 <memset>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005436:	2250      	movs	r2, #80	; 0x50
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f028 fc03 	bl	802dc46 <memset>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005446:	2258      	movs	r2, #88	; 0x58
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f028 fbfb 	bl	802dc46 <memset>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	60da      	str	r2, [r3, #12]
{
  // Currently there is no constructor body generated.
}
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	ed87 0b00 	vstr	d0, [r7]
 8005474:	ed97 7b00 	vldr	d7, [r7]
 8005478:	eeb0 7bc7 	vabs.f64	d7, d7
 800547c:	eeb0 0b47 	vmov.f64	d0, d7
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <rtGetNaN>:
  //
  // Initialize rtNaN needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetNaN(void)
  {
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005492:	2340      	movs	r3, #64	; 0x40
 8005494:	60fb      	str	r3, [r7, #12]
    real_T nan = 0.0;
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	f04f 0400 	mov.w	r4, #0
 800549e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d108      	bne.n	80054ba <rtGetNaN+0x2e>
      nan = rtGetNaNF();
 80054a8:	f000 f81a 	bl	80054e0 <rtGetNaNF>
 80054ac:	eef0 7a40 	vmov.f32	s15, s0
 80054b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80054b4:	ed87 7b04 	vstr	d7, [r7, #16]
 80054b8:	e007      	b.n	80054ca <rtGetNaN+0x3e>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80054ba:	4b08      	ldr	r3, [pc, #32]	; (80054dc <rtGetNaN+0x50>)
 80054bc:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 80054be:	2300      	movs	r3, #0
 80054c0:	603b      	str	r3, [r7, #0]
      nan = tmpVal.fltVal;
 80054c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80054c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return nan;
 80054ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80054ce:	ec44 3b17 	vmov	d7, r3, r4
  }
 80054d2:	eeb0 0b47 	vmov.f64	d0, d7
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd90      	pop	{r4, r7, pc}
 80054dc:	fff80000 	.word	0xfff80000

080054e0 <rtGetNaNF>:
  //
  // Initialize rtNaNF needed by the generated code.
  // NaN is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetNaNF(void)
  {
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
    IEEESingle nanF = { { 0 } };
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	607b      	str	r3, [r7, #4]

    nanF.wordL.wordLuint = 0xFFC00000U;
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <rtGetNaNF+0x24>)
 80054ee:	607b      	str	r3, [r7, #4]
    return nanF.wordL.wordLreal;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	ee07 3a90 	vmov	s15, r3
  }
 80054f6:	eeb0 0a67 	vmov.f32	s0, s15
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	ffc00000 	.word	0xffc00000

08005508 <rt_InitInfAndNaN>:
  //
  // Initialize the rtInf, rtMinusInf, and rtNaN needed by the
  // generated code. NaN is initialized as non-signaling. Assumes IEEE.
  //
  static void rt_InitInfAndNaN(size_t realSize)
  {
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
    (void) (realSize);
    rtNaN = rtGetNaN();
 8005510:	f7ff ffbc 	bl	800548c <rtGetNaN>
 8005514:	eeb0 7b40 	vmov.f64	d7, d0
 8005518:	4b14      	ldr	r3, [pc, #80]	; (800556c <rt_InitInfAndNaN+0x64>)
 800551a:	ed83 7b00 	vstr	d7, [r3]
    rtNaNF = rtGetNaNF();
 800551e:	f7ff ffdf 	bl	80054e0 <rtGetNaNF>
 8005522:	eef0 7a40 	vmov.f32	s15, s0
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <rt_InitInfAndNaN+0x68>)
 8005528:	edc3 7a00 	vstr	s15, [r3]
    rtInf = rtGetInf();
 800552c:	f000 f8a0 	bl	8005670 <rtGetInf>
 8005530:	eeb0 7b40 	vmov.f64	d7, d0
 8005534:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <rt_InitInfAndNaN+0x6c>)
 8005536:	ed83 7b00 	vstr	d7, [r3]
    rtInfF = rtGetInfF();
 800553a:	f000 f8c3 	bl	80056c4 <rtGetInfF>
 800553e:	eef0 7a40 	vmov.f32	s15, s0
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <rt_InitInfAndNaN+0x70>)
 8005544:	edc3 7a00 	vstr	s15, [r3]
    rtMinusInf = rtGetMinusInf();
 8005548:	f000 f8cc 	bl	80056e4 <rtGetMinusInf>
 800554c:	eeb0 7b40 	vmov.f64	d7, d0
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <rt_InitInfAndNaN+0x74>)
 8005552:	ed83 7b00 	vstr	d7, [r3]
    rtMinusInfF = rtGetMinusInfF();
 8005556:	f000 f8ef 	bl	8005738 <rtGetMinusInfF>
 800555a:	eef0 7a40 	vmov.f32	s15, s0
 800555e:	4b08      	ldr	r3, [pc, #32]	; (8005580 <rt_InitInfAndNaN+0x78>)
 8005560:	edc3 7a00 	vstr	s15, [r3]
  }
 8005564:	bf00      	nop
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	24000920 	.word	0x24000920
 8005570:	24000930 	.word	0x24000930
 8005574:	24000910 	.word	0x24000910
 8005578:	24000928 	.word	0x24000928
 800557c:	24000918 	.word	0x24000918
 8005580:	2400092c 	.word	0x2400092c

08005584 <rtIsInf>:

  // Test if value is infinite
  static boolean_T rtIsInf(real_T value)
  {
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	ed87 0b00 	vstr	d0, [r7]
    return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800558e:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <rtIsInf+0x44>)
 8005590:	ed93 7b00 	vldr	d7, [r3]
 8005594:	ed97 6b00 	vldr	d6, [r7]
 8005598:	eeb4 6b47 	vcmp.f64	d6, d7
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a0:	d009      	beq.n	80055b6 <rtIsInf+0x32>
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <rtIsInf+0x48>)
 80055a4:	ed93 7b00 	vldr	d7, [r3]
 80055a8:	ed97 6b00 	vldr	d6, [r7]
 80055ac:	eeb4 6b47 	vcmp.f64	d6, d7
 80055b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b4:	d101      	bne.n	80055ba <rtIsInf+0x36>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <rtIsInf+0x38>
 80055ba:	2300      	movs	r3, #0
  }
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	24000910 	.word	0x24000910
 80055cc:	24000918 	.word	0x24000918

080055d0 <rtIsNaN>:
    return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
  }

  // Test if value is not a number
  static boolean_T rtIsNaN(real_T value)
  {
 80055d0:	b590      	push	{r4, r7, lr}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	ed87 0b00 	vstr	d0, [r7]
    boolean_T result = (boolean_T) 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	75fb      	strb	r3, [r7, #23]
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80055de:	2340      	movs	r3, #64	; 0x40
 80055e0:	613b      	str	r3, [r7, #16]
    if (bitsPerReal == 32U) {
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d10a      	bne.n	80055fe <rtIsNaN+0x2e>
      result = rtIsNaNF((real32_T)value);
 80055e8:	ed97 7b00 	vldr	d7, [r7]
 80055ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80055f0:	eeb0 0a67 	vmov.f32	s0, s15
 80055f4:	f000 f820 	bl	8005638 <rtIsNaNF>
 80055f8:	4603      	mov	r3, r0
 80055fa:	75fb      	strb	r3, [r7, #23]
 80055fc:	e015      	b.n	800562a <rtIsNaN+0x5a>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.fltVal = value;
 80055fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005602:	e9c7 3402 	strd	r3, r4, [r7, #8]
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <rtIsNaN+0x64>)
 800560a:	4013      	ands	r3, r2
                           0x7FF00000 &&
 800560c:	4a09      	ldr	r2, [pc, #36]	; (8005634 <rtIsNaN+0x64>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d109      	bne.n	8005626 <rtIsNaN+0x56>
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f3c3 0313 	ubfx	r3, r3, #0, #20
                           0x7FF00000 &&
 8005618:	2b00      	cmp	r3, #0
 800561a:	d102      	bne.n	8005622 <rtIsNaN+0x52>
                            (tmpVal.bitVal.words.wordL != 0) ));
 800561c:	68bb      	ldr	r3, [r7, #8]
                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <rtIsNaN+0x56>
                           0x7FF00000 &&
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <rtIsNaN+0x58>
 8005626:	2300      	movs	r3, #0
      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==
 8005628:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 800562a:	7dfb      	ldrb	r3, [r7, #23]
  }
 800562c:	4618      	mov	r0, r3
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	bd90      	pop	{r4, r7, pc}
 8005634:	7ff00000 	.word	0x7ff00000

08005638 <rtIsNaNF>:

  // Test if single-precision value is not a number
  static boolean_T rtIsNaNF(real32_T value)
  {
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	ed87 0a01 	vstr	s0, [r7, #4]
    IEEESingle tmp;
    tmp.wordL.wordLreal = value;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 800564c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005650:	d106      	bne.n	8005660 <rtIsNaNF+0x28>
                       (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f3c3 0316 	ubfx	r3, r3, #0, #23
    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <rtIsNaNF+0x28>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <rtIsNaNF+0x2a>
 8005660:	2300      	movs	r3, #0
  }
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <rtGetInf>:
  //
  // Initialize rtInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetInf(void)
  {
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8005676:	2340      	movs	r3, #64	; 0x40
 8005678:	60fb      	str	r3, [r7, #12]
    real_T inf = 0.0;
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	f04f 0400 	mov.w	r4, #0
 8005682:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b20      	cmp	r3, #32
 800568a:	d108      	bne.n	800569e <rtGetInf+0x2e>
      inf = rtGetInfF();
 800568c:	f000 f81a 	bl	80056c4 <rtGetInfF>
 8005690:	eef0 7a40 	vmov.f32	s15, s0
 8005694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005698:	ed87 7b04 	vstr	d7, [r7, #16]
 800569c:	e007      	b.n	80056ae <rtGetInf+0x3e>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0x7FF00000U;
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <rtGetInf+0x50>)
 80056a0:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	603b      	str	r3, [r7, #0]
      inf = tmpVal.fltVal;
 80056a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80056aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return inf;
 80056ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80056b2:	ec44 3b17 	vmov	d7, r3, r4
  }
 80056b6:	eeb0 0b47 	vmov.f64	d0, d7
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd90      	pop	{r4, r7, pc}
 80056c0:	7ff00000 	.word	0x7ff00000

080056c4 <rtGetInfF>:
  //
  // Initialize rtInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetInfF(void)
  {
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
    IEEESingle infF;
    infF.wordL.wordLuint = 0x7F800000U;
 80056ca:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80056ce:	607b      	str	r3, [r7, #4]
    return infF.wordL.wordLreal;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	ee07 3a90 	vmov	s15, r3
  }
 80056d6:	eeb0 0a67 	vmov.f32	s0, s15
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <rtGetMinusInf>:
  //
  // Initialize rtMinusInf needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real_T rtGetMinusInf(void)
  {
 80056e4:	b590      	push	{r4, r7, lr}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80056ea:	2340      	movs	r3, #64	; 0x40
 80056ec:	60fb      	str	r3, [r7, #12]
    real_T minf = 0.0;
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	f04f 0400 	mov.w	r4, #0
 80056f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    if (bitsPerReal == 32U) {
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d108      	bne.n	8005712 <rtGetMinusInf+0x2e>
      minf = rtGetMinusInfF();
 8005700:	f000 f81a 	bl	8005738 <rtGetMinusInfF>
 8005704:	eef0 7a40 	vmov.f32	s15, s0
 8005708:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800570c:	ed87 7b04 	vstr	d7, [r7, #16]
 8005710:	e007      	b.n	8005722 <rtGetMinusInf+0x3e>
      union {
        LittleEndianIEEEDouble bitVal;
        real_T fltVal;
      } tmpVal;

      tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8005712:	4b08      	ldr	r3, [pc, #32]	; (8005734 <rtGetMinusInf+0x50>)
 8005714:	607b      	str	r3, [r7, #4]
      tmpVal.bitVal.words.wordL = 0x00000000U;
 8005716:	2300      	movs	r3, #0
 8005718:	603b      	str	r3, [r7, #0]
      minf = tmpVal.fltVal;
 800571a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800571e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    }

    return minf;
 8005722:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005726:	ec44 3b17 	vmov	d7, r3, r4
  }
 800572a:	eeb0 0b47 	vmov.f64	d0, d7
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	bd90      	pop	{r4, r7, pc}
 8005734:	fff00000 	.word	0xfff00000

08005738 <rtGetMinusInfF>:
  //
  // Initialize rtMinusInfF needed by the generated code.
  // Inf is initialized as non-signaling. Assumes IEEE.
  //
  static real32_T rtGetMinusInfF(void)
  {
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
    IEEESingle minfF;
    minfF.wordL.wordLuint = 0xFF800000U;
 800573e:	4b06      	ldr	r3, [pc, #24]	; (8005758 <rtGetMinusInfF+0x20>)
 8005740:	607b      	str	r3, [r7, #4]
    return minfF.wordL.wordLreal;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	ee07 3a90 	vmov	s15, r3
  }
 8005748:	eeb0 0a67 	vmov.f32	s0, s15
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	ff800000 	.word	0xff800000

0800575c <_ZN27positionEstimatorModelClass13Correct2_InitEPNS_11DW_Correct2EPNS_10P_Correct2E>:
//    '<S1>/Correct2'
//    '<S1>/Correct4'
//
void positionEstimatorModelClass::Correct2_Init(DW_Correct2 *localDW, P_Correct2
  *localP)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  // SystemInitialize for Outport: '<S5>/yBlockOrdering'
  localDW->blockOrdering = localP->yBlockOrdering_Y0;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	781a      	ldrb	r2, [r3, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_>:
//    '<S1>/Correct4'
//
void positionEstimatorModelClass::Correct2(boolean_T rtu_Enable, real_T
  rtu_yMeas, real_T rtu_R, boolean_T rtu_uBlockOrdering, DW_Correct2 *localDW,
  real_T rtd_P_i[9], real_T rtd_x[3])
{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b0c3      	sub	sp, #268	; 0x10c
 8005784:	af00      	add	r7, sp, #0
 8005786:	61f8      	str	r0, [r7, #28]
 8005788:	4608      	mov	r0, r1
 800578a:	ed87 0b04 	vstr	d0, [r7, #16]
 800578e:	f107 0108 	add.w	r1, r7, #8
 8005792:	ed81 1b00 	vstr	d1, [r1]
 8005796:	4611      	mov	r1, r2
 8005798:	1d3a      	adds	r2, r7, #4
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	4603      	mov	r3, r0
 800579e:	76fb      	strb	r3, [r7, #27]
 80057a0:	460b      	mov	r3, r1
 80057a2:	76bb      	strb	r3, [r7, #26]
  real_T imvec_1;

  // Outputs for Enabled SubSystem: '<S1>/Correct2' incorporates:
  //   EnablePort: '<S5>/Enable'

  if (rtu_Enable) {
 80057a4:	7efb      	ldrb	r3, [r7, #27]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 82fc 	beq.w	8005da4 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x624>
    // DataStoreRead: '<S5>/Data Store ReadX'
    localDW->DataStoreReadX[0] = rtd_x[0];
 80057ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057b4:	1d3a      	adds	r2, r7, #4
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	e9c2 3400 	strd	r3, r4, [r2]
    localDW->DataStoreReadX[1] = rtd_x[1];
 80057bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057c0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80057c4:	1d3a      	adds	r2, r7, #4
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	e9c2 3402 	strd	r3, r4, [r2, #8]
    localDW->DataStoreReadX[2] = rtd_x[2];
 80057cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057d0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80057d4:	1d3a      	adds	r2, r7, #4
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	e9c2 3404 	strd	r3, r4, [r2, #16]

    // MATLAB Function: '<S5>/Correct'
    localDW->blockOrdering = rtu_uBlockOrdering;
 80057dc:	1d3b      	adds	r3, r7, #4
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	7eba      	ldrb	r2, [r7, #26]
 80057e2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    blockOrdering = localDW->blockOrdering;
 80057e6:	1d3b      	adds	r3, r7, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80057ee:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
    localDW->blockOrdering = blockOrdering;
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 80057fa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    for (i = 0; i < 9; i++) {
 80057fe:	2300      	movs	r3, #0
 8005800:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005808:	2b08      	cmp	r3, #8
 800580a:	dc3e      	bgt.n	800588a <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x10a>
      // DataStoreRead: '<S5>/Data Store ReadP'
      localDW->DataStoreReadP[i] = rtd_P_i[i];
 800580c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005816:	4413      	add	r3, r2
 8005818:	e9d3 3400 	ldrd	r3, r4, [r3]
 800581c:	1d3a      	adds	r2, r7, #4
 800581e:	6811      	ldr	r1, [r2, #0]
 8005820:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005824:	3203      	adds	r2, #3
 8005826:	00d2      	lsls	r2, r2, #3
 8005828:	440a      	add	r2, r1
 800582a:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S5>/Correct'
      localDW->P_c[i] = localDW->DataStoreReadP[i];
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005836:	3303      	adds	r3, #3
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005840:	1d3a      	adds	r2, r7, #4
 8005842:	6811      	ldr	r1, [r2, #0]
 8005844:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005848:	320f      	adds	r2, #15
 800584a:	00d2      	lsls	r2, r2, #3
 800584c:	440a      	add	r2, r1
 800584e:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = localDW->P_c[i];
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585a:	330f      	adds	r3, #15
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4413      	add	r3, r2
 8005860:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005864:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      localDW->P_c[i] = epsilon;
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005870:	330f      	adds	r3, #15
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	441a      	add	r2, r3
 8005876:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800587a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800587e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005882:	3301      	adds	r3, #1
 8005884:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005888:	e7bc      	b.n	8005804 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x84>
    }

    // MATLAB Function: '<S5>/Correct'
    for (i = 0; i < 3; i++) {
 800588a:	2300      	movs	r3, #0
 800588c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005894:	2b02      	cmp	r3, #2
 8005896:	dc63      	bgt.n	8005960 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x1e0>
      imvec[0] = localDW->DataStoreReadX[0];
 8005898:	1d3b      	adds	r3, r7, #4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058a0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
      epsilon = 1.4901161193847656E-8 * std::abs(localDW->DataStoreReadX[i]);
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	ed93 7b00 	vldr	d7, [r3]
 80058b4:	eeb0 0b47 	vmov.f64	d0, d7
 80058b8:	f7ff fdd7 	bl	800546a <_ZSt3absd>
 80058bc:	eeb0 6b40 	vmov.f64	d6, d0
 80058c0:	ed9f 7bc5 	vldr	d7, [pc, #788]	; 8005bd8 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x458>
 80058c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80058c8:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 80058cc:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 80058d0:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8005bd8 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x458>
 80058d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80058d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058dc:	d406      	bmi.n	80058ec <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x16c>
 80058de:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80058e2:	f7ff fe75 	bl	80055d0 <rtIsNaN>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x170>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x172>
 80058f0:	2300      	movs	r3, #0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x180>
        epsilon = 1.4901161193847656E-8;
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	4cb9      	ldr	r4, [pc, #740]	; (8005be0 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x460>)
 80058fc:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      }

      imvec[i] = localDW->DataStoreReadX[i] + epsilon;
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4413      	add	r3, r2
 800590c:	ed93 6b00 	vldr	d6, [r3]
 8005910:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8005914:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005922:	4413      	add	r3, r2
 8005924:	3b58      	subs	r3, #88	; 0x58
 8005926:	ed83 7b00 	vstr	d7, [r3]
      dHdx[i] = (imvec[0] - localDW->DataStoreReadX[0]) / epsilon;
 800592a:	ed97 6b2c 	vldr	d6, [r7, #176]	; 0xb0
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	ed93 7b00 	vldr	d7, [r3]
 8005936:	ee36 5b47 	vsub.f64	d5, d6, d7
 800593a:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 800593e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800594c:	4413      	add	r3, r2
 800594e:	3b40      	subs	r3, #64	; 0x40
 8005950:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 8005954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005958:	3301      	adds	r3, #1
 800595a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800595e:	e797      	b.n	8005890 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x110>
    }

    epsilon = 0.0;
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
    for (i = 0; i < 3; i++) {
 800596c:	2300      	movs	r3, #0
 800596e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005976:	2b02      	cmp	r3, #2
 8005978:	dc58      	bgt.n	8005a2c <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x2ac>
      y = localDW->P_c[3 * i] * dHdx[0];
 800597a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	1d3a      	adds	r2, r7, #4
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	330f      	adds	r3, #15
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	ed93 6b00 	vldr	d6, [r3]
 8005992:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8005996:	ee26 7b07 	vmul.f64	d7, d6, d7
 800599a:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
      y += localDW->P_c[3 * i + 1] * dHdx[1];
 800599e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80059a2:	4613      	mov	r3, r2
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	4413      	add	r3, r2
 80059a8:	3301      	adds	r3, #1
 80059aa:	1d3a      	adds	r2, r7, #4
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	330f      	adds	r3, #15
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	ed93 6b00 	vldr	d6, [r3]
 80059b8:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 80059bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80059c0:	ed97 6b3a 	vldr	d6, [r7, #232]	; 0xe8
 80059c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80059c8:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
      y += localDW->P_c[3 * i + 2] * dHdx[2];
 80059cc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80059d0:	4613      	mov	r3, r2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	4413      	add	r3, r2
 80059d6:	3302      	adds	r3, #2
 80059d8:	1d3a      	adds	r2, r7, #4
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	330f      	adds	r3, #15
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	ed93 6b00 	vldr	d6, [r3]
 80059e6:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80059ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80059ee:	ed97 6b3a 	vldr	d6, [r7, #232]	; 0xe8
 80059f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80059f6:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
      epsilon += y * dHdx[i];
 80059fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005a04:	4413      	add	r3, r2
 8005a06:	3b40      	subs	r3, #64	; 0x40
 8005a08:	ed93 6b00 	vldr	d6, [r3]
 8005a0c:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 8005a10:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a14:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 8005a18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a1c:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
    for (i = 0; i < 3; i++) {
 8005a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a24:	3301      	adds	r3, #1
 8005a26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a2a:	e7a2      	b.n	8005972 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x1f2>
    }

    epsilon += rtu_R;
 8005a2c:	f107 0308 	add.w	r3, r7, #8
 8005a30:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 8005a34:	ed93 7b00 	vldr	d7, [r3]
 8005a38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a3c:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
    y = rtu_yMeas - localDW->DataStoreReadX[0];
 8005a40:	1d3b      	adds	r3, r7, #4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	ed93 7b00 	vldr	d7, [r3]
 8005a48:	ed97 6b04 	vldr	d6, [r7, #16]
 8005a4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a50:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
    for (i = 0; i < 3; i++) {
 8005a54:	2300      	movs	r3, #0
 8005a56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	dc69      	bgt.n	8005b36 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x3b6>
      imvec_1 = localDW->P_c[i] * dHdx[0];
 8005a62:	1d3b      	adds	r3, r7, #4
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a6a:	330f      	adds	r3, #15
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	ed93 6b00 	vldr	d6, [r3]
 8005a74:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8005a78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a7c:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
      imvec_1 += localDW->P_c[i + 3] * dHdx[1];
 8005a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a84:	3303      	adds	r3, #3
 8005a86:	1d3a      	adds	r2, r7, #4
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	330f      	adds	r3, #15
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	ed93 6b00 	vldr	d6, [r3]
 8005a94:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8005a98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a9c:	ed97 6b38 	vldr	d6, [r7, #224]	; 0xe0
 8005aa0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005aa4:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
      imvec_1 += localDW->P_c[i + 6] * dHdx[2];
 8005aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aac:	3306      	adds	r3, #6
 8005aae:	1d3a      	adds	r2, r7, #4
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	330f      	adds	r3, #15
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	ed93 6b00 	vldr	d6, [r3]
 8005abc:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8005ac0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005ac4:	ed97 6b38 	vldr	d6, [r7, #224]	; 0xe0
 8005ac8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005acc:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
      imvec_1 /= epsilon;
 8005ad0:	ed97 5b38 	vldr	d5, [r7, #224]	; 0xe0
 8005ad4:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 8005ad8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005adc:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
      localDW->xNew[i] = imvec_1 * y + localDW->DataStoreReadX[i];
 8005ae0:	ed97 6b38 	vldr	d6, [r7, #224]	; 0xe0
 8005ae4:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 8005ae8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005aec:	1d3b      	adds	r3, r7, #4
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4413      	add	r3, r2
 8005af8:	ed93 7b00 	vldr	d7, [r3]
 8005afc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b08:	330c      	adds	r3, #12
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	ed83 7b00 	vstr	d7, [r3]
      imvec[i] = imvec_1;
 8005b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005b22:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8005b26:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 8005b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2e:	3301      	adds	r3, #1
 8005b30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b34:	e791      	b.n	8005a5a <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x2da>
    }

    for (i = 0; i < 3; i++) {
 8005b36:	2300      	movs	r3, #0
 8005b38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	dc4f      	bgt.n	8005be4 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x464>
      epsilon = dHdx[i];
 8005b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005b4e:	4413      	add	r3, r2
 8005b50:	3b40      	subs	r3, #64	; 0x40
 8005b52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b56:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
      imvec_0[3 * i] = imvec[0] * epsilon;
 8005b5a:	ed97 6b2c 	vldr	d6, [r7, #176]	; 0xb0
 8005b5e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005b62:	4613      	mov	r3, r2
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4413      	add	r3, r2
 8005b68:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8005b6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005b76:	4413      	add	r3, r2
 8005b78:	3ba0      	subs	r3, #160	; 0xa0
 8005b7a:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[3 * i + 1] = imvec[1] * epsilon;
 8005b7e:	ed97 6b2e 	vldr	d6, [r7, #184]	; 0xb8
 8005b82:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005b86:	4613      	mov	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8005b92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3ba0      	subs	r3, #160	; 0xa0
 8005ba0:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[3 * i + 2] = imvec[2] * epsilon;
 8005ba4:	ed97 6b30 	vldr	d6, [r7, #192]	; 0xc0
 8005ba8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005bac:	4613      	mov	r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8005bb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005bc2:	4413      	add	r3, r2
 8005bc4:	3ba0      	subs	r3, #160	; 0xa0
 8005bc6:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 8005bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bce:	3301      	adds	r3, #1
 8005bd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bd4:	e7b2      	b.n	8005b3c <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x3bc>
 8005bd6:	bf00      	nop
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	3e500000 	.word	0x3e500000
 8005be0:	3e500000 	.word	0x3e500000
    }

    for (i = 0; i < 3; i++) {
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	f300 808c 	bgt.w	8005d0c <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x58c>
      for (i_0 = 0; i_0 < 3; i_0++) {
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	dc7e      	bgt.n	8005d00 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x580>
        imvec_1 = localDW->P_c[3 * i] * imvec_0[i_0];
 8005c02:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005c06:	4613      	mov	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	1d3a      	adds	r2, r7, #4
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	330f      	adds	r3, #15
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	ed93 6b00 	vldr	d6, [r3]
 8005c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005c24:	4413      	add	r3, r2
 8005c26:	3ba0      	subs	r3, #160	; 0xa0
 8005c28:	ed93 7b00 	vldr	d7, [r3]
 8005c2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005c30:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
        imvec_1 += localDW->P_c[3 * i + 1] * imvec_0[i_0 + 3];
 8005c34:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005c38:	4613      	mov	r3, r2
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3301      	adds	r3, #1
 8005c40:	1d3a      	adds	r2, r7, #4
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	330f      	adds	r3, #15
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4413      	add	r3, r2
 8005c4a:	ed93 6b00 	vldr	d6, [r3]
 8005c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c52:	3303      	adds	r3, #3
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3ba0      	subs	r3, #160	; 0xa0
 8005c5e:	ed93 7b00 	vldr	d7, [r3]
 8005c62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005c66:	ed97 6b38 	vldr	d6, [r7, #224]	; 0xe0
 8005c6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c6e:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
        imvec_1 += localDW->P_c[3 * i + 2] * imvec_0[i_0 + 6];
 8005c72:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005c76:	4613      	mov	r3, r2
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	1d3a      	adds	r2, r7, #4
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	330f      	adds	r3, #15
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	ed93 6b00 	vldr	d6, [r3]
 8005c8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c90:	3306      	adds	r3, #6
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005c98:	4413      	add	r3, r2
 8005c9a:	3ba0      	subs	r3, #160	; 0xa0
 8005c9c:	ed93 7b00 	vldr	d7, [r3]
 8005ca0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005ca4:	ed97 6b38 	vldr	d6, [r7, #224]	; 0xe0
 8005ca8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cac:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
        tmp[i_0 + 3 * i] = localDW->P_c[3 * i + i_0] - imvec_1;
 8005cb0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	441a      	add	r2, r3
 8005cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cbe:	4413      	add	r3, r2
 8005cc0:	1d3a      	adds	r2, r7, #4
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	330f      	adds	r3, #15
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4413      	add	r3, r2
 8005cca:	ed93 6b00 	vldr	d6, [r3]
 8005cce:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	441a      	add	r2, r3
 8005cd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cdc:	4413      	add	r3, r2
 8005cde:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8005ce2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005cec:	4413      	add	r3, r2
 8005cee:	3be8      	subs	r3, #232	; 0xe8
 8005cf0:	ed83 7b00 	vstr	d7, [r3]
      for (i_0 = 0; i_0 < 3; i_0++) {
 8005cf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cfe:	e77c      	b.n	8005bfa <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x47a>
    for (i = 0; i < 3; i++) {
 8005d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d04:	3301      	adds	r3, #1
 8005d06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d0a:	e76e      	b.n	8005bea <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x46a>
      }
    }

    for (i = 0; i < 9; i++) {
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	dc28      	bgt.n	8005d6c <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x5ec>
      localDW->P_c[i] = tmp[i];
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8005d24:	4413      	add	r3, r2
 8005d26:	3be8      	subs	r3, #232	; 0xe8
 8005d28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d2c:	1d3a      	adds	r2, r7, #4
 8005d2e:	6811      	ldr	r1, [r2, #0]
 8005d30:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8005d34:	320f      	adds	r2, #15
 8005d36:	00d2      	lsls	r2, r2, #3
 8005d38:	440a      	add	r2, r1
 8005d3a:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S5>/Data Store WriteP'
      rtd_P_i[i] = localDW->P_c[i];
 8005d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005d48:	441a      	add	r2, r3
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	6819      	ldr	r1, [r3, #0]
 8005d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d52:	330f      	adds	r3, #15
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	440b      	add	r3, r1
 8005d58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d5c:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8005d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d64:	3301      	adds	r3, #1
 8005d66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d6a:	e7d2      	b.n	8005d12 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_+0x592>
    }

    // DataStoreWrite: '<S5>/Data Store WriteX'
    rtd_x[0] = localDW->xNew[0];
 8005d6c:	1d3b      	adds	r3, r7, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8005d74:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005d78:	e9c2 3400 	strd	r3, r4, [r2]
    rtd_x[1] = localDW->xNew[1];
 8005d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d80:	f103 0208 	add.w	r2, r3, #8
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005d8c:	e9c2 3400 	strd	r3, r4, [r2]
    rtd_x[2] = localDW->xNew[2];
 8005d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d94:	f103 0210 	add.w	r2, r3, #16
 8005d98:	1d3b      	adds	r3, r7, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005da0:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Outputs for SubSystem: '<S1>/Correct2'
}
 8005da4:	bf00      	nop
 8005da6:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd90      	pop	{r4, r7, pc}
 8005dae:	bf00      	nop

08005db0 <_Z11rt_modd_snfdd>:

real_T rt_modd_snf(real_T u0, real_T u1)
{
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b08b      	sub	sp, #44	; 0x2c
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	ed87 0b02 	vstr	d0, [r7, #8]
 8005dba:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  boolean_T yEq;
  real_T q;
  y = u0;
 8005dbe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005dc2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  if (u1 == 0.0) {
 8005dc6:	ed97 7b00 	vldr	d7, [r7]
 8005dca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd2:	d10c      	bne.n	8005dee <_Z11rt_modd_snfdd+0x3e>
    if (u0 == 0.0) {
 8005dd4:	ed97 7b02 	vldr	d7, [r7, #8]
 8005dd8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de0:	f040 80e2 	bne.w	8005fa8 <_Z11rt_modd_snfdd+0x1f8>
      y = u1;
 8005de4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005de8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8005dec:	e0dc      	b.n	8005fa8 <_Z11rt_modd_snfdd+0x1f8>
    }
  } else if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {
 8005dee:	ed97 0b02 	vldr	d0, [r7, #8]
 8005df2:	f7ff fbed 	bl	80055d0 <rtIsNaN>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <_Z11rt_modd_snfdd+0x68>
 8005dfc:	ed97 0b00 	vldr	d0, [r7]
 8005e00:	f7ff fbe6 	bl	80055d0 <rtIsNaN>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <_Z11rt_modd_snfdd+0x68>
 8005e0a:	ed97 0b02 	vldr	d0, [r7, #8]
 8005e0e:	f7ff fbb9 	bl	8005584 <rtIsInf>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <_Z11rt_modd_snfdd+0x6c>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <_Z11rt_modd_snfdd+0x6e>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <_Z11rt_modd_snfdd+0x7e>
    y = (rtNaN);
 8005e22:	4b6b      	ldr	r3, [pc, #428]	; (8005fd0 <_Z11rt_modd_snfdd+0x220>)
 8005e24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e28:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8005e2c:	e0bc      	b.n	8005fa8 <_Z11rt_modd_snfdd+0x1f8>
  } else if (u0 == 0.0) {
 8005e2e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005e32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3a:	d108      	bne.n	8005e4e <_Z11rt_modd_snfdd+0x9e>
    y = 0.0 / u1;
 8005e3c:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8005fc0 <_Z11rt_modd_snfdd+0x210>
 8005e40:	ed97 6b00 	vldr	d6, [r7]
 8005e44:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005e48:	ed87 7b08 	vstr	d7, [r7, #32]
 8005e4c:	e0ac      	b.n	8005fa8 <_Z11rt_modd_snfdd+0x1f8>
  } else if (rtIsInf(u1)) {
 8005e4e:	ed97 0b00 	vldr	d0, [r7]
 8005e52:	f7ff fb97 	bl	8005584 <rtIsInf>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01d      	beq.n	8005ea2 <_Z11rt_modd_snfdd+0xf2>
    if ((u1 < 0.0) != (u0 < 0.0)) {
 8005e66:	ed97 7b00 	vldr	d7, [r7]
 8005e6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e72:	bf4c      	ite	mi
 8005e74:	2301      	movmi	r3, #1
 8005e76:	2300      	movpl	r3, #0
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	ed97 7b02 	vldr	d7, [r7, #8]
 8005e7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e86:	bf4c      	ite	mi
 8005e88:	2301      	movmi	r3, #1
 8005e8a:	2300      	movpl	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	4053      	eors	r3, r2
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 8088 	beq.w	8005fa8 <_Z11rt_modd_snfdd+0x1f8>
      y = u1;
 8005e98:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005e9c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8005ea0:	e082      	b.n	8005fa8 <_Z11rt_modd_snfdd+0x1f8>
    }
  } else {
    y = std::fmod(u0, u1);
 8005ea2:	ed97 1b00 	vldr	d1, [r7]
 8005ea6:	ed97 0b02 	vldr	d0, [r7, #8]
 8005eaa:	f025 f92d 	bl	802b108 <fmod>
 8005eae:	ed87 0b08 	vstr	d0, [r7, #32]
    yEq = (y == 0.0);
 8005eb2:	ed97 7b08 	vldr	d7, [r7, #32]
 8005eb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	77fb      	strb	r3, [r7, #31]
    if ((!yEq) && (u1 > std::floor(u1))) {
 8005ec8:	7ffb      	ldrb	r3, [r7, #31]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d140      	bne.n	8005f50 <_Z11rt_modd_snfdd+0x1a0>
 8005ece:	ed97 0b00 	vldr	d0, [r7]
 8005ed2:	f024 ffe1 	bl	802ae98 <floor>
 8005ed6:	eeb0 6b40 	vmov.f64	d6, d0
 8005eda:	ed97 7b00 	vldr	d7, [r7]
 8005ede:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee6:	dd33      	ble.n	8005f50 <_Z11rt_modd_snfdd+0x1a0>
      q = std::abs(u0 / u1);
 8005ee8:	ed97 6b02 	vldr	d6, [r7, #8]
 8005eec:	ed97 7b00 	vldr	d7, [r7]
 8005ef0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8005ef4:	eeb0 0b45 	vmov.f64	d0, d5
 8005ef8:	f7ff fab7 	bl	800546a <_ZSt3absd>
 8005efc:	ed87 0b04 	vstr	d0, [r7, #16]
      yEq = !(std::abs(q - std::floor(q + 0.5)) > DBL_EPSILON * q);
 8005f00:	ed97 7b04 	vldr	d7, [r7, #16]
 8005f04:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8005f08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f0c:	eeb0 0b47 	vmov.f64	d0, d7
 8005f10:	f024 ffc2 	bl	802ae98 <floor>
 8005f14:	eeb0 6b40 	vmov.f64	d6, d0
 8005f18:	ed97 7b04 	vldr	d7, [r7, #16]
 8005f1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f20:	eeb0 0b47 	vmov.f64	d0, d7
 8005f24:	f7ff faa1 	bl	800546a <_ZSt3absd>
 8005f28:	eeb0 5b40 	vmov.f64	d5, d0
 8005f2c:	ed97 7b04 	vldr	d7, [r7, #16]
 8005f30:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8005fc8 <_Z11rt_modd_snfdd+0x218>
 8005f34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f38:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f40:	bfcc      	ite	gt
 8005f42:	2301      	movgt	r3, #1
 8005f44:	2300      	movle	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	f083 0301 	eor.w	r3, r3, #1
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	77fb      	strb	r3, [r7, #31]
    }

    if (yEq) {
 8005f50:	7ffb      	ldrb	r3, [r7, #31]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <_Z11rt_modd_snfdd+0x1b8>
      y = u1 * 0.0;
 8005f56:	ed97 7b00 	vldr	d7, [r7]
 8005f5a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8005fc0 <_Z11rt_modd_snfdd+0x210>
 8005f5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005f62:	ed87 7b08 	vstr	d7, [r7, #32]
 8005f66:	e01f      	b.n	8005fa8 <_Z11rt_modd_snfdd+0x1f8>
    } else {
      if ((u0 < 0.0) != (u1 < 0.0)) {
 8005f68:	ed97 7b02 	vldr	d7, [r7, #8]
 8005f6c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f74:	bf4c      	ite	mi
 8005f76:	2301      	movmi	r3, #1
 8005f78:	2300      	movpl	r3, #0
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	ed97 7b00 	vldr	d7, [r7]
 8005f80:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f88:	bf4c      	ite	mi
 8005f8a:	2301      	movmi	r3, #1
 8005f8c:	2300      	movpl	r3, #0
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	4053      	eors	r3, r2
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <_Z11rt_modd_snfdd+0x1f8>
        y += u1;
 8005f98:	ed97 6b08 	vldr	d6, [r7, #32]
 8005f9c:	ed97 7b00 	vldr	d7, [r7]
 8005fa0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005fa4:	ed87 7b08 	vstr	d7, [r7, #32]
      }
    }
  }

  return y;
 8005fa8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005fac:	ec44 3b17 	vmov	d7, r3, r4
}
 8005fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8005fb4:	372c      	adds	r7, #44	; 0x2c
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd90      	pop	{r4, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	f3af 8000 	nop.w
	...
 8005fcc:	3cb00000 	.word	0x3cb00000
 8005fd0:	24000920 	.word	0x24000920
 8005fd4:	00000000 	.word	0x00000000

08005fd8 <_Z13rt_atan2d_snfdd>:

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	ed87 0b02 	vstr	d0, [r7, #8]
 8005fe2:	ed87 1b00 	vstr	d1, [r7]
  real_T y;
  int32_T tmp;
  int32_T tmp_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
 8005fe6:	ed97 0b02 	vldr	d0, [r7, #8]
 8005fea:	f7ff faf1 	bl	80055d0 <rtIsNaN>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <_Z13rt_atan2d_snfdd+0x2a>
 8005ff4:	ed97 0b00 	vldr	d0, [r7]
 8005ff8:	f7ff faea 	bl	80055d0 <rtIsNaN>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <_Z13rt_atan2d_snfdd+0x2e>
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <_Z13rt_atan2d_snfdd+0x30>
 8006006:	2300      	movs	r3, #0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <_Z13rt_atan2d_snfdd+0x40>
    y = (rtNaN);
 800600c:	4b44      	ldr	r3, [pc, #272]	; (8006120 <_Z13rt_atan2d_snfdd+0x148>)
 800600e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006012:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8006016:	e06f      	b.n	80060f8 <_Z13rt_atan2d_snfdd+0x120>
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
 8006018:	ed97 0b02 	vldr	d0, [r7, #8]
 800601c:	f7ff fab2 	bl	8005584 <rtIsInf>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <_Z13rt_atan2d_snfdd+0x60>
 8006026:	ed97 0b00 	vldr	d0, [r7]
 800602a:	f7ff faab 	bl	8005584 <rtIsInf>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <_Z13rt_atan2d_snfdd+0x60>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <_Z13rt_atan2d_snfdd+0x62>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d02c      	beq.n	8006098 <_Z13rt_atan2d_snfdd+0xc0>
    if (u1 > 0.0) {
 800603e:	ed97 7b00 	vldr	d7, [r7]
 8006042:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604a:	dd02      	ble.n	8006052 <_Z13rt_atan2d_snfdd+0x7a>
      tmp = 1;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e002      	b.n	8006058 <_Z13rt_atan2d_snfdd+0x80>
    } else {
      tmp = -1;
 8006052:	f04f 33ff 	mov.w	r3, #4294967295
 8006056:	617b      	str	r3, [r7, #20]
    }

    if (u0 > 0.0) {
 8006058:	ed97 7b02 	vldr	d7, [r7, #8]
 800605c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006064:	dd02      	ble.n	800606c <_Z13rt_atan2d_snfdd+0x94>
      tmp_0 = 1;
 8006066:	2301      	movs	r3, #1
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e002      	b.n	8006072 <_Z13rt_atan2d_snfdd+0x9a>
    } else {
      tmp_0 = -1;
 800606c:	f04f 33ff 	mov.w	r3, #4294967295
 8006070:	613b      	str	r3, [r7, #16]
    }

    y = atan2(static_cast<real_T>(tmp_0), static_cast<real_T>(tmp));
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	ee06 3a90 	vmov	s13, r3
 8006082:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006086:	eeb0 1b46 	vmov.f64	d1, d6
 800608a:	eeb0 0b47 	vmov.f64	d0, d7
 800608e:	f025 f839 	bl	802b104 <atan2>
 8006092:	ed87 0b06 	vstr	d0, [r7, #24]
 8006096:	e02f      	b.n	80060f8 <_Z13rt_atan2d_snfdd+0x120>
  } else if (u1 == 0.0) {
 8006098:	ed97 7b00 	vldr	d7, [r7]
 800609c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80060a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a4:	d120      	bne.n	80060e8 <_Z13rt_atan2d_snfdd+0x110>
    if (u0 > 0.0) {
 80060a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80060aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80060ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b2:	dd05      	ble.n	80060c0 <_Z13rt_atan2d_snfdd+0xe8>
      y = RT_PI / 2.0;
 80060b4:	a416      	add	r4, pc, #88	; (adr r4, 8006110 <_Z13rt_atan2d_snfdd+0x138>)
 80060b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80060ba:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80060be:	e01b      	b.n	80060f8 <_Z13rt_atan2d_snfdd+0x120>
    } else if (u0 < 0.0) {
 80060c0:	ed97 7b02 	vldr	d7, [r7, #8]
 80060c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80060c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060cc:	d505      	bpl.n	80060da <_Z13rt_atan2d_snfdd+0x102>
      y = -(RT_PI / 2.0);
 80060ce:	a412      	add	r4, pc, #72	; (adr r4, 8006118 <_Z13rt_atan2d_snfdd+0x140>)
 80060d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80060d4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80060d8:	e00e      	b.n	80060f8 <_Z13rt_atan2d_snfdd+0x120>
    } else {
      y = 0.0;
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	f04f 0400 	mov.w	r4, #0
 80060e2:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80060e6:	e007      	b.n	80060f8 <_Z13rt_atan2d_snfdd+0x120>
    }
  } else {
    y = atan2(u0, u1);
 80060e8:	ed97 1b00 	vldr	d1, [r7]
 80060ec:	ed97 0b02 	vldr	d0, [r7, #8]
 80060f0:	f025 f808 	bl	802b104 <atan2>
 80060f4:	ed87 0b06 	vstr	d0, [r7, #24]
  }

  return y;
 80060f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80060fc:	ec44 3b17 	vmov	d7, r3, r4
}
 8006100:	eeb0 0b47 	vmov.f64	d0, d7
 8006104:	3724      	adds	r7, #36	; 0x24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd90      	pop	{r4, r7, pc}
 800610a:	bf00      	nop
 800610c:	f3af 8000 	nop.w
 8006110:	54442d18 	.word	0x54442d18
 8006114:	3ff921fb 	.word	0x3ff921fb
 8006118:	54442d18 	.word	0x54442d18
 800611c:	bff921fb 	.word	0xbff921fb
 8006120:	24000920 	.word	0x24000920

08006124 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>:

// Function for MATLAB Function: '<S16>/Correct'
void positionEstimatorModelClass::EKFCorrector_correctStateAndCov(real_T x[6],
  real_T P_0[36], const real_T y[4], const real_T Pxy[24], const real_T Pyy[16],
  const real_T dHdx[24])
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 800612a:	af00      	add	r7, sp, #0
 800612c:	f107 040c 	add.w	r4, r7, #12
 8006130:	6020      	str	r0, [r4, #0]
 8006132:	f107 0008 	add.w	r0, r7, #8
 8006136:	6001      	str	r1, [r0, #0]
 8006138:	1d39      	adds	r1, r7, #4
 800613a:	600a      	str	r2, [r1, #0]
 800613c:	463a      	mov	r2, r7
 800613e:	6013      	str	r3, [r2, #0]
  int32_T d;
  int32_T ijA;
  real_T X_1[36];
  real_T P_1[36];
  int8_T ipiv_0;
  for (b_j = 0; b_j < 16; b_j++) {
 8006140:	2300      	movs	r3, #0
 8006142:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006146:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800614a:	2b0f      	cmp	r3, #15
 800614c:	dc15      	bgt.n	800617a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x56>
    A[b_j] = Pyy[b_j];
 800614e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8006158:	4413      	add	r3, r2
 800615a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800615e:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006162:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006166:	00d2      	lsls	r2, r2, #3
 8006168:	440a      	add	r2, r1
 800616a:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 16; b_j++) {
 800616e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006172:	3301      	adds	r3, #1
 8006174:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006178:	e7e5      	b.n	8006146 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x22>
  }

  ipiv[0] = 1;
 800617a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800617e:	2201      	movs	r2, #1
 8006180:	701a      	strb	r2, [r3, #0]
  ipiv[1] = 2;
 8006182:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006186:	2202      	movs	r2, #2
 8006188:	705a      	strb	r2, [r3, #1]
  ipiv[2] = 3;
 800618a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800618e:	2203      	movs	r2, #3
 8006190:	709a      	strb	r2, [r3, #2]
  ipiv[3] = 4;
 8006192:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006196:	2204      	movs	r2, #4
 8006198:	70da      	strb	r2, [r3, #3]
  for (b_j = 0; b_j < 3; b_j++) {
 800619a:	2300      	movs	r3, #0
 800619c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80061a0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	f300 81ea 	bgt.w	800657e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x45a>
    c = b_j * 5;
 80061aa:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
    jA = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c;
 80061be:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80061c2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    smax = std::abs(A[c]);
 80061c6:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80061ca:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	4413      	add	r3, r2
 80061d2:	ed93 7b00 	vldr	d7, [r3]
 80061d6:	eeb0 0b47 	vmov.f64	d0, d7
 80061da:	f7ff f946 	bl	800546a <_ZSt3absd>
 80061de:	ed87 0bee 	vstr	d0, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 80061e2:	2302      	movs	r3, #2
 80061e4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80061e8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80061ec:	f1c3 0304 	rsb	r3, r3, #4
 80061f0:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80061f4:	429a      	cmp	r2, r3
 80061f6:	dc2a      	bgt.n	800624e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x12a>
      ix++;
 80061f8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80061fc:	3301      	adds	r3, #1
 80061fe:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      b_y = std::abs(A[ix]);
 8006202:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006206:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	4413      	add	r3, r2
 800620e:	ed93 7b00 	vldr	d7, [r3]
 8006212:	eeb0 0b47 	vmov.f64	d0, d7
 8006216:	f7ff f928 	bl	800546a <_ZSt3absd>
 800621a:	ed87 0be8 	vstr	d0, [r7, #928]	; 0x3a0
      if (b_y > smax) {
 800621e:	ed97 6be8 	vldr	d6, [r7, #928]	; 0x3a0
 8006222:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006226:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800622a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622e:	dd08      	ble.n	8006242 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x11e>
        jA = iy - 1;
 8006230:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006234:	3b01      	subs	r3, #1
 8006236:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
        smax = b_y;
 800623a:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 800623e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    for (iy = 2; iy <= 4 - b_j; iy++) {
 8006242:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006246:	3301      	adds	r3, #1
 8006248:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800624c:	e7cc      	b.n	80061e8 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc4>
      }
    }

    if (A[c + jA] != 0.0) {
 800624e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006252:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006256:	4413      	add	r3, r2
 8006258:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	4413      	add	r3, r2
 8006260:	ed93 7b00 	vldr	d7, [r3]
 8006264:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626c:	f000 8103 	beq.w	8006476 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x352>
      if (jA != 0) {
 8006270:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80cb 	beq.w	8006410 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x2ec>
        ipiv[b_j] = static_cast<int8_T>((b_j + jA) + 1);
 800627a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800627e:	b2da      	uxtb	r2, r3
 8006280:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	4413      	add	r3, r2
 8006288:	b2db      	uxtb	r3, r3
 800628a:	3301      	adds	r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	b259      	sxtb	r1, r3
 8006290:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8006294:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006298:	4413      	add	r3, r2
 800629a:	460a      	mov	r2, r1
 800629c:	701a      	strb	r2, [r3, #0]
        ix = b_j;
 800629e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80062a2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy = b_j + jA;
 80062a6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80062aa:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80062ae:	4413      	add	r3, r2
 80062b0:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 80062b4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80062b8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4413      	add	r3, r2
 80062c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062c4:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 80062c8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80062cc:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062d8:	f507 7116 	add.w	r1, r7, #600	; 0x258
 80062dc:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80062e0:	00d2      	lsls	r2, r2, #3
 80062e2:	440a      	add	r2, r1
 80062e4:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80062e8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80062ec:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	441a      	add	r2, r3
 80062f4:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80062f8:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 80062fc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006300:	3304      	adds	r3, #4
 8006302:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006306:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800630a:	3304      	adds	r3, #4
 800630c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 8006310:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006314:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006320:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006324:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006328:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4413      	add	r3, r2
 8006330:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006334:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006338:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800633c:	00d2      	lsls	r2, r2, #3
 800633e:	440a      	add	r2, r1
 8006340:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 8006344:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006348:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	441a      	add	r2, r3
 8006350:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006354:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 8006358:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800635c:	3304      	adds	r3, #4
 800635e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 8006362:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006366:	3304      	adds	r3, #4
 8006368:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 800636c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006370:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4413      	add	r3, r2
 8006378:	e9d3 3400 	ldrd	r3, r4, [r3]
 800637c:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 8006380:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006384:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	4413      	add	r3, r2
 800638c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006390:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8006394:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8006398:	00d2      	lsls	r2, r2, #3
 800639a:	440a      	add	r2, r1
 800639c:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80063a0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80063a4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	441a      	add	r2, r3
 80063ac:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 80063b0:	e9c2 3400 	strd	r3, r4, [r2]
        ix += 4;
 80063b4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80063b8:	3304      	adds	r3, #4
 80063ba:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        iy += 4;
 80063be:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80063c2:	3304      	adds	r3, #4
 80063c4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        smax = A[ix];
 80063c8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80063cc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	4413      	add	r3, r2
 80063d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063d8:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        A[ix] = A[iy];
 80063dc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80063e0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	4413      	add	r3, r2
 80063e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063ec:	f507 7116 	add.w	r1, r7, #600	; 0x258
 80063f0:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80063f4:	00d2      	lsls	r2, r2, #3
 80063f6:	440a      	add	r2, r1
 80063f8:	e9c2 3400 	strd	r3, r4, [r2]
        A[iy] = smax;
 80063fc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006400:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	441a      	add	r2, r3
 8006408:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800640c:	e9c2 3400 	strd	r3, r4, [r2]
      }

      jA = (c - b_j) + 4;
 8006410:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006414:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	3304      	adds	r3, #4
 800641c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (ix = c + 1; ix < jA; ix++) {
 8006420:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006424:	3301      	adds	r3, #1
 8006426:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800642a:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800642e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006432:	429a      	cmp	r2, r3
 8006434:	da1f      	bge.n	8006476 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x352>
        A[ix] /= A[c];
 8006436:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800643a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4413      	add	r3, r2
 8006442:	ed93 5b00 	vldr	d5, [r3]
 8006446:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800644a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	ed93 6b00 	vldr	d6, [r3]
 8006456:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800645a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800645e:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4413      	add	r3, r2
 8006466:	ed83 7b00 	vstr	d7, [r3]
      for (ix = c + 1; ix < jA; ix++) {
 800646a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800646e:	3301      	adds	r3, #1
 8006470:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8006474:	e7d9      	b.n	800642a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x306>
      }
    }

    jA = c;
 8006476:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800647a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = c + 4;
 800647e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006482:	3304      	adds	r3, #4
 8006484:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800648e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006492:	f1c3 0302 	rsb	r3, r3, #2
 8006496:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800649a:	429a      	cmp	r2, r3
 800649c:	dc69      	bgt.n	8006572 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x44e>
      if (A[ix] != 0.0) {
 800649e:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80064a2:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4413      	add	r3, r2
 80064aa:	ed93 7b00 	vldr	d7, [r3]
 80064ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80064b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b6:	d04c      	beq.n	8006552 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x42e>
        smax = -A[ix];
 80064b8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80064bc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	4413      	add	r3, r2
 80064c4:	ed93 7b00 	vldr	d7, [r3]
 80064c8:	eeb1 7b47 	vneg.f64	d7, d7
 80064cc:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
        c_ix = c + 1;
 80064d0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80064d4:	3301      	adds	r3, #1
 80064d6:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        d = (jA - b_j) + 8;
 80064da:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80064de:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	3308      	adds	r3, #8
 80064e6:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
        for (ijA = jA + 5; ijA < d; ijA++) {
 80064ea:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80064ee:	3305      	adds	r3, #5
 80064f0:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80064f4:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 80064f8:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80064fc:	429a      	cmp	r2, r3
 80064fe:	da28      	bge.n	8006552 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x42e>
          A[ijA] += A[c_ix] * smax;
 8006500:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006504:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4413      	add	r3, r2
 800650c:	ed93 6b00 	vldr	d6, [r3]
 8006510:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006514:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	4413      	add	r3, r2
 800651c:	ed93 5b00 	vldr	d5, [r3]
 8006520:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006524:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006528:	ee36 7b07 	vadd.f64	d7, d6, d7
 800652c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006530:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	4413      	add	r3, r2
 8006538:	ed83 7b00 	vstr	d7, [r3]
          c_ix++;
 800653c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8006540:	3301      	adds	r3, #1
 8006542:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
        for (ijA = jA + 5; ijA < d; ijA++) {
 8006546:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800654a:	3301      	adds	r3, #1
 800654c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8006550:	e7d0      	b.n	80064f4 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x3d0>
        }
      }

      ix += 4;
 8006552:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006556:	3304      	adds	r3, #4
 8006558:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
      jA += 4;
 800655c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006560:	3304      	adds	r3, #4
 8006562:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    for (iy = 0; iy <= 2 - b_j; iy++) {
 8006566:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800656a:	3301      	adds	r3, #1
 800656c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006570:	e78d      	b.n	800648e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x36a>
  for (b_j = 0; b_j < 3; b_j++) {
 8006572:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006576:	3301      	adds	r3, #1
 8006578:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800657c:	e610      	b.n	80061a0 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7c>
    }
  }

  for (b_j = 0; b_j < 24; b_j++) {
 800657e:	2300      	movs	r3, #0
 8006580:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006584:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006588:	2b17      	cmp	r3, #23
 800658a:	dc16      	bgt.n	80065ba <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x496>
    X_0[b_j] = Pxy[b_j];
 800658c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8006596:	4413      	add	r3, r2
 8006598:	e9d3 3400 	ldrd	r3, r4, [r3]
 800659c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80065a0:	00d2      	lsls	r2, r2, #3
 80065a2:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80065a6:	440a      	add	r2, r1
 80065a8:	3af8      	subs	r2, #248	; 0xf8
 80065aa:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 24; b_j++) {
 80065ae:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80065b2:	3301      	adds	r3, #1
 80065b4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80065b8:	e7e4      	b.n	8006584 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x460>
  }

  for (b_j = 0; b_j < 4; b_j++) {
 80065ba:	2300      	movs	r3, #0
 80065bc:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80065c0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	f300 80b4 	bgt.w	8006732 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x60e>
    jA = 6 * b_j;
 80065ca:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80065ce:	4613      	mov	r3, r2
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	4413      	add	r3, r2
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = b_j << 2;
 80065da:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = 0; iy < b_j; iy++) {
 80065e4:	2300      	movs	r3, #0
 80065e6:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80065ea:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80065ee:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80065f2:	429a      	cmp	r2, r3
 80065f4:	da5d      	bge.n	80066b2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x58e>
      c_ix = 6 * iy;
 80065f6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80065fa:	4613      	mov	r3, r2
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	4413      	add	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 8006606:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800660a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800660e:	4413      	add	r3, r2
 8006610:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4413      	add	r3, r2
 8006618:	ed93 7b00 	vldr	d7, [r3]
 800661c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006624:	d03f      	beq.n	80066a6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x582>
        for (c = 0; c < 6; c++) {
 8006626:	2300      	movs	r3, #0
 8006628:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800662c:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006630:	2b05      	cmp	r3, #5
 8006632:	dc38      	bgt.n	80066a6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x582>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 8006634:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006638:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800663c:	4413      	add	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006644:	4413      	add	r3, r2
 8006646:	3bf8      	subs	r3, #248	; 0xf8
 8006648:	ed93 6b00 	vldr	d6, [r3]
 800664c:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006650:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006654:	4413      	add	r3, r2
 8006656:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4413      	add	r3, r2
 800665e:	ed93 5b00 	vldr	d5, [r3]
 8006662:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006666:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800666a:	4413      	add	r3, r2
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006672:	4413      	add	r3, r2
 8006674:	3bf8      	subs	r3, #248	; 0xf8
 8006676:	ed93 7b00 	vldr	d7, [r3]
 800667a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800667e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006682:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006686:	4413      	add	r3, r2
 8006688:	ee36 7b47 	vsub.f64	d7, d6, d7
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006692:	4413      	add	r3, r2
 8006694:	3bf8      	subs	r3, #248	; 0xf8
 8006696:	ed83 7b00 	vstr	d7, [r3]
        for (c = 0; c < 6; c++) {
 800669a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800669e:	3301      	adds	r3, #1
 80066a0:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80066a4:	e7c2      	b.n	800662c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x508>
    for (iy = 0; iy < b_j; iy++) {
 80066a6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80066aa:	3301      	adds	r3, #1
 80066ac:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80066b0:	e79b      	b.n	80065ea <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x4c6>
        }
      }
    }

    smax = 1.0 / A[b_j + ix];
 80066b2:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80066b6:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80066ba:	4413      	add	r3, r2
 80066bc:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4413      	add	r3, r2
 80066c4:	ed93 6b00 	vldr	d6, [r3]
 80066c8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80066cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80066d0:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    for (c = 0; c < 6; c++) {
 80066d4:	2300      	movs	r3, #0
 80066d6:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80066da:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80066de:	2b05      	cmp	r3, #5
 80066e0:	dc21      	bgt.n	8006726 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x602>
      X_0[c + jA] *= smax;
 80066e2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80066e6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80066ea:	4413      	add	r3, r2
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80066f2:	4413      	add	r3, r2
 80066f4:	3bf8      	subs	r3, #248	; 0xf8
 80066f6:	ed93 6b00 	vldr	d6, [r3]
 80066fa:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80066fe:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006702:	4413      	add	r3, r2
 8006704:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006708:	ee26 7b07 	vmul.f64	d7, d6, d7
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006712:	4413      	add	r3, r2
 8006714:	3bf8      	subs	r3, #248	; 0xf8
 8006716:	ed83 7b00 	vstr	d7, [r3]
    for (c = 0; c < 6; c++) {
 800671a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800671e:	3301      	adds	r3, #1
 8006720:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006724:	e7d9      	b.n	80066da <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x5b6>
  for (b_j = 0; b_j < 4; b_j++) {
 8006726:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800672a:	3301      	adds	r3, #1
 800672c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006730:	e746      	b.n	80065c0 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x49c>
    }
  }

  for (b_j = 3; b_j >= 0; b_j--) {
 8006732:	2303      	movs	r3, #3
 8006734:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006738:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800673c:	2b00      	cmp	r3, #0
 800673e:	db7b      	blt.n	8006838 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x714>
    jA = 6 * b_j;
 8006740:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006744:	4613      	mov	r3, r2
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	4413      	add	r3, r2
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    ix = (b_j << 2) - 1;
 8006750:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	3b01      	subs	r3, #1
 8006758:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    for (iy = b_j + 2; iy < 5; iy++) {
 800675c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006760:	3302      	adds	r3, #2
 8006762:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8006766:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 800676a:	2b04      	cmp	r3, #4
 800676c:	dc5e      	bgt.n	800682c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x708>
      c_ix = (iy - 1) * 6;
 800676e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006772:	1e5a      	subs	r2, r3, #1
 8006774:	4613      	mov	r3, r2
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	4413      	add	r3, r2
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
      if (A[iy + ix] != 0.0) {
 8006780:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8006784:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8006788:	4413      	add	r3, r2
 800678a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4413      	add	r3, r2
 8006792:	ed93 7b00 	vldr	d7, [r3]
 8006796:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800679a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679e:	d03f      	beq.n	8006820 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6fc>
        for (c = 0; c < 6; c++) {
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80067a6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80067aa:	2b05      	cmp	r3, #5
 80067ac:	dc38      	bgt.n	8006820 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x6fc>
          X_0[c + jA] -= A[iy + ix] * X_0[c + c_ix];
 80067ae:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80067b2:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80067b6:	4413      	add	r3, r2
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80067be:	4413      	add	r3, r2
 80067c0:	3bf8      	subs	r3, #248	; 0xf8
 80067c2:	ed93 6b00 	vldr	d6, [r3]
 80067c6:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80067ca:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80067ce:	4413      	add	r3, r2
 80067d0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4413      	add	r3, r2
 80067d8:	ed93 5b00 	vldr	d5, [r3]
 80067dc:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80067e0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80067e4:	4413      	add	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80067ec:	4413      	add	r3, r2
 80067ee:	3bf8      	subs	r3, #248	; 0xf8
 80067f0:	ed93 7b00 	vldr	d7, [r3]
 80067f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80067f8:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80067fc:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006800:	4413      	add	r3, r2
 8006802:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 800680c:	4413      	add	r3, r2
 800680e:	3bf8      	subs	r3, #248	; 0xf8
 8006810:	ed83 7b00 	vstr	d7, [r3]
        for (c = 0; c < 6; c++) {
 8006814:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006818:	3301      	adds	r3, #1
 800681a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800681e:	e7c2      	b.n	80067a6 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x682>
    for (iy = b_j + 2; iy < 5; iy++) {
 8006820:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8006824:	3301      	adds	r3, #1
 8006826:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800682a:	e79c      	b.n	8006766 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x642>
  for (b_j = 3; b_j >= 0; b_j--) {
 800682c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006830:	3b01      	subs	r3, #1
 8006832:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006836:	e77f      	b.n	8006738 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x614>
        }
      }
    }
  }

  for (b_j = 2; b_j >= 0; b_j--) {
 8006838:	2302      	movs	r3, #2
 800683a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800683e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006842:	2b00      	cmp	r3, #0
 8006844:	db6f      	blt.n	8006926 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x802>
    ipiv_0 = ipiv[b_j];
 8006846:	f507 7215 	add.w	r2, r7, #596	; 0x254
 800684a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800684e:	4413      	add	r3, r2
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	f887 339b 	strb.w	r3, [r7, #923]	; 0x39b
    if (b_j + 1 != ipiv_0) {
 8006856:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 8006860:	429a      	cmp	r2, r3
 8006862:	d05a      	beq.n	800691a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7f6>
      jA = ipiv_0 - 1;
 8006864:	f997 339b 	ldrsb.w	r3, [r7, #923]	; 0x39b
 8006868:	3b01      	subs	r3, #1
 800686a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
      for (c = 0; c < 6; c++) {
 800686e:	2300      	movs	r3, #0
 8006870:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006874:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006878:	2b05      	cmp	r3, #5
 800687a:	dc4e      	bgt.n	800691a <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x7f6>
        smax = X_0[6 * b_j + c];
 800687c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8006880:	4613      	mov	r3, r2
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	4413      	add	r3, r2
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	461a      	mov	r2, r3
 800688a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800688e:	4413      	add	r3, r2
 8006890:	00db      	lsls	r3, r3, #3
 8006892:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006896:	4413      	add	r3, r2
 8006898:	3bf8      	subs	r3, #248	; 0xf8
 800689a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800689e:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
        X_0[c + 6 * b_j] = X_0[6 * jA + c];
 80068a2:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80068a6:	4613      	mov	r3, r2
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	4413      	add	r3, r2
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	461a      	mov	r2, r3
 80068b0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80068b4:	18d1      	adds	r1, r2, r3
 80068b6:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80068ba:	4613      	mov	r3, r2
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	4413      	add	r3, r2
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	461a      	mov	r2, r3
 80068c4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80068c8:	441a      	add	r2, r3
 80068ca:	00cb      	lsls	r3, r1, #3
 80068cc:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80068d0:	440b      	add	r3, r1
 80068d2:	3bf8      	subs	r3, #248	; 0xf8
 80068d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068d8:	00d2      	lsls	r2, r2, #3
 80068da:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
 80068de:	440a      	add	r2, r1
 80068e0:	3af8      	subs	r2, #248	; 0xf8
 80068e2:	e9c2 3400 	strd	r3, r4, [r2]
        X_0[c + 6 * jA] = smax;
 80068e6:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80068ea:	4613      	mov	r3, r2
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	4413      	add	r3, r2
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	461a      	mov	r2, r3
 80068f4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80068f8:	4413      	add	r3, r2
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006900:	4413      	add	r3, r2
 8006902:	f1a3 02f8 	sub.w	r2, r3, #248	; 0xf8
 8006906:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800690a:	e9c2 3400 	strd	r3, r4, [r2]
      for (c = 0; c < 6; c++) {
 800690e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006912:	3301      	adds	r3, #1
 8006914:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006918:	e7ac      	b.n	8006874 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x750>
  for (b_j = 2; b_j >= 0; b_j--) {
 800691a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800691e:	3b01      	subs	r3, #1
 8006920:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006924:	e78b      	b.n	800683e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x71a>
      }
    }
  }

  for (b_j = 0; b_j < 6; b_j++) {
 8006926:	2300      	movs	r3, #0
 8006928:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800692c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006930:	2b05      	cmp	r3, #5
 8006932:	f300 81fe 	bgt.w	8006d32 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc0e>
    smax = X_0[b_j] * y[0];
 8006936:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006940:	4413      	add	r3, r2
 8006942:	3bf8      	subs	r3, #248	; 0xf8
 8006944:	ed93 6b00 	vldr	d6, [r3]
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	ed93 7b00 	vldr	d7, [r3]
 8006950:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006954:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 6] * y[1];
 8006958:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800695c:	3306      	adds	r3, #6
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006964:	4413      	add	r3, r2
 8006966:	3bf8      	subs	r3, #248	; 0xf8
 8006968:	ed93 6b00 	vldr	d6, [r3]
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	ed93 7b00 	vldr	d7, [r3]
 8006976:	ee26 7b07 	vmul.f64	d7, d6, d7
 800697a:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 800697e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006982:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 12] * y[2];
 8006986:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800698a:	330c      	adds	r3, #12
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006992:	4413      	add	r3, r2
 8006994:	3bf8      	subs	r3, #248	; 0xf8
 8006996:	ed93 6b00 	vldr	d6, [r3]
 800699a:	463b      	mov	r3, r7
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3310      	adds	r3, #16
 80069a0:	ed93 7b00 	vldr	d7, [r3]
 80069a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80069a8:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 80069ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80069b0:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    smax += X_0[b_j + 18] * y[3];
 80069b4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069b8:	3312      	adds	r3, #18
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 80069c0:	4413      	add	r3, r2
 80069c2:	3bf8      	subs	r3, #248	; 0xf8
 80069c4:	ed93 6b00 	vldr	d6, [r3]
 80069c8:	463b      	mov	r3, r7
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3318      	adds	r3, #24
 80069ce:	ed93 7b00 	vldr	d7, [r3]
 80069d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80069d6:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 80069da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80069de:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
    x[b_j] += smax;
 80069e2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	f107 0208 	add.w	r2, r7, #8
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	4413      	add	r3, r2
 80069f0:	ed93 6b00 	vldr	d6, [r3]
 80069f4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	f107 0208 	add.w	r2, r7, #8
 80069fe:	6812      	ldr	r2, [r2, #0]
 8006a00:	4413      	add	r3, r2
 8006a02:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006a06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a0a:	ed83 7b00 	vstr	d7, [r3]
    for (c = 0; c < 6; c++) {
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006a14:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006a18:	2b05      	cmp	r3, #5
 8006a1a:	f300 8118 	bgt.w	8006c4e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xb2a>
      X_1[b_j + 6 * c] = 0.0;
 8006a1e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006a22:	4613      	mov	r3, r2
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	4413      	add	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006a30:	4413      	add	r3, r2
 8006a32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	441a      	add	r2, r3
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	f04f 0400 	mov.w	r4, #0
 8006a42:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006a46:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	4413      	add	r3, r2
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	461a      	mov	r2, r3
 8006a54:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006a58:	4413      	add	r3, r2
 8006a5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4413      	add	r3, r2
 8006a62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a66:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[c << 2] * X_0[b_j];
 8006a6a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006a76:	4413      	add	r3, r2
 8006a78:	ed93 6b00 	vldr	d6, [r3]
 8006a7c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006a86:	4413      	add	r3, r2
 8006a88:	3bf8      	subs	r3, #248	; 0xf8
 8006a8a:	ed93 7b00 	vldr	d7, [r3]
 8006a8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006a92:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006a96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a9a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006a9e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	441a      	add	r2, r3
 8006aba:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006abe:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006ac2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	4413      	add	r3, r2
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	4413      	add	r3, r2
 8006ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ae2:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 1] * X_0[b_j + 6];
 8006ae6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	3301      	adds	r3, #1
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006af4:	4413      	add	r3, r2
 8006af6:	ed93 6b00 	vldr	d6, [r3]
 8006afa:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006afe:	3306      	adds	r3, #6
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006b06:	4413      	add	r3, r2
 8006b08:	3bf8      	subs	r3, #248	; 0xf8
 8006b0a:	ed93 7b00 	vldr	d7, [r3]
 8006b0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006b12:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006b16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b1a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006b1e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b30:	4413      	add	r3, r2
 8006b32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	441a      	add	r2, r3
 8006b3a:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006b3e:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006b42:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006b46:	4613      	mov	r3, r2
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	4413      	add	r3, r2
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b54:	4413      	add	r3, r2
 8006b56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	4413      	add	r3, r2
 8006b5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b62:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 2] * X_0[b_j + 12];
 8006b66:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006b74:	4413      	add	r3, r2
 8006b76:	ed93 6b00 	vldr	d6, [r3]
 8006b7a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006b7e:	330c      	adds	r3, #12
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006b86:	4413      	add	r3, r2
 8006b88:	3bf8      	subs	r3, #248	; 0xf8
 8006b8a:	ed93 7b00 	vldr	d7, [r3]
 8006b8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006b92:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006b96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b9a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006b9e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	4413      	add	r3, r2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	461a      	mov	r2, r3
 8006bac:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	441a      	add	r2, r3
 8006bba:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006bbe:	e9c2 3400 	strd	r3, r4, [r2]
      smax = X_1[6 * c + b_j];
 8006bc2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	4413      	add	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	4413      	add	r3, r2
 8006bde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006be2:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      smax += dHdx[(c << 2) + 3] * X_0[b_j + 18];
 8006be6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	3303      	adds	r3, #3
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8006bf4:	4413      	add	r3, r2
 8006bf6:	ed93 6b00 	vldr	d6, [r3]
 8006bfa:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006bfe:	3312      	adds	r3, #18
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 8006c06:	4413      	add	r3, r2
 8006c08:	3bf8      	subs	r3, #248	; 0xf8
 8006c0a:	ed93 7b00 	vldr	d7, [r3]
 8006c0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c12:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006c16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c1a:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      X_1[b_j + 6 * c] = smax;
 8006c1e:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006c22:	4613      	mov	r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c30:	4413      	add	r3, r2
 8006c32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	441a      	add	r2, r3
 8006c3a:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 8006c3e:	e9c2 3400 	strd	r3, r4, [r2]
    for (c = 0; c < 6; c++) {
 8006c42:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006c46:	3301      	adds	r3, #1
 8006c48:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006c4c:	e6e2      	b.n	8006a14 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x8f0>
    }

    for (c = 0; c < 6; c++) {
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006c54:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006c58:	2b05      	cmp	r3, #5
 8006c5a:	dc64      	bgt.n	8006d26 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc02>
      smax = 0.0;
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	f04f 0400 	mov.w	r4, #0
 8006c64:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8006c6e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	dc2d      	bgt.n	8006cd2 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xbae>
        smax += X_1[6 * jA + b_j] * P_0[6 * c + jA];
 8006c76:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	4413      	add	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	461a      	mov	r2, r3
 8006c84:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006c88:	4413      	add	r3, r2
 8006c8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	4413      	add	r3, r2
 8006c92:	ed93 6b00 	vldr	d6, [r3]
 8006c96:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	4413      	add	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006ca8:	4413      	add	r3, r2
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	1d3a      	adds	r2, r7, #4
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	ed93 7b00 	vldr	d7, [r3]
 8006cb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006cba:	ed97 6bee 	vldr	d6, [r7, #952]	; 0x3b8
 8006cbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006cc2:	ed87 7bee 	vstr	d7, [r7, #952]	; 0x3b8
      for (jA = 0; jA < 6; jA++) {
 8006cc6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8006cca:	3301      	adds	r3, #1
 8006ccc:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8006cd0:	e7cd      	b.n	8006c6e <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xb4a>
      }

      P_1[b_j + 6 * c] = P_0[6 * c + b_j] - smax;
 8006cd2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	4413      	add	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006ce4:	4413      	add	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	1d3a      	adds	r2, r7, #4
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	4413      	add	r3, r2
 8006cee:	ed93 6b00 	vldr	d6, [r3]
 8006cf2:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d04:	4413      	add	r3, r2
 8006d06:	ed97 7bee 	vldr	d7, [r7, #952]	; 0x3b8
 8006d0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d0e:	f107 0210 	add.w	r2, r7, #16
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	4413      	add	r3, r2
 8006d16:	ed83 7b00 	vstr	d7, [r3]
    for (c = 0; c < 6; c++) {
 8006d1a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8006d1e:	3301      	adds	r3, #1
 8006d20:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8006d24:	e796      	b.n	8006c54 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xb30>
  for (b_j = 0; b_j < 6; b_j++) {
 8006d26:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006d30:	e5fc      	b.n	800692c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0x808>
    }
  }

  for (b_j = 0; b_j < 36; b_j++) {
 8006d32:	2300      	movs	r3, #0
 8006d34:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006d38:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d3c:	2b23      	cmp	r3, #35	; 0x23
 8006d3e:	dc15      	bgt.n	8006d6c <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc48>
    P_0[b_j] = P_1[b_j];
 8006d40:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	1d3a      	adds	r2, r7, #4
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	441a      	add	r2, r3
 8006d4c:	f107 0110 	add.w	r1, r7, #16
 8006d50:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	440b      	add	r3, r1
 8006d58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d5c:	e9c2 3400 	strd	r3, r4, [r2]
  for (b_j = 0; b_j < 36; b_j++) {
 8006d60:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8006d64:	3301      	adds	r3, #1
 8006d66:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8006d6a:	e7e5      	b.n	8006d38 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_+0xc14>
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	f507 7775 	add.w	r7, r7, #980	; 0x3d4
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd90      	pop	{r4, r7, pc}
	...

08006d78 <_ZN27positionEstimatorModelClass4stepEv>:

// Model step function
void positionEstimatorModelClass::step()
{
 8006d78:	b5b0      	push	{r4, r5, r7, lr}
 8006d7a:	ed2d 8b02 	vpush	{d8}
 8006d7e:	f5ad 6d0e 	sub.w	sp, sp, #2272	; 0x8e0
 8006d82:	af04      	add	r7, sp, #16
 8006d84:	1d3b      	adds	r3, r7, #4
 8006d86:	6018      	str	r0, [r3, #0]
    0.0, 0.005, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  // Abs: '<S36>/Abs' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Abs = std::abs(rtU.HOME_lla[0]);
 8006d88:	1d3b      	adds	r3, r7, #4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 8006d90:	ed93 7b00 	vldr	d7, [r3]
 8006d94:	eeb0 0b47 	vmov.f64	d0, d7
 8006d98:	f7fe fb67 	bl	800546a <_ZSt3absd>
 8006d9c:	eeb0 7b40 	vmov.f64	d7, d0
 8006da0:	1d3b      	adds	r3, r7, #4
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8006da8:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S37>/Compare' incorporates:
  //   Constant: '<S37>/Constant'

  rtDW.Compare = (rtDW.Abs > rtP.CompareToConstant_const);
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8006db4:	ed93 6b00 	vldr	d6, [r3]
 8006db8:	4ba0      	ldr	r3, [pc, #640]	; (800703c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006dba:	ed93 7b00 	vldr	d7, [r3]
 8006dbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc6:	bfcc      	ite	gt
 8006dc8:	2301      	movgt	r3, #1
 8006dca:	2300      	movle	r3, #0
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	1d3b      	adds	r3, r7, #4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f883 2d58 	strb.w	r2, [r3, #3416]	; 0xd58

  // Switch: '<S36>/Switch' incorporates:
  //   Inport: '<Root>/HOME_lla'

  if (rtDW.Compare) {
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f893 3d58 	ldrb.w	r3, [r3, #3416]	; 0xd58
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d045      	beq.n	8006e70 <_ZN27positionEstimatorModelClass4stepEv+0xf8>
    // Bias: '<S36>/Bias' incorporates:
    //   Inport: '<Root>/HOME_lla'

    rtDW.Bias_m = rtU.HOME_lla[0] + rtP.Bias_Bias_al;
 8006de4:	1d3b      	adds	r3, r7, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 8006dec:	ed93 6b00 	vldr	d6, [r3]
 8006df0:	4b92      	ldr	r3, [pc, #584]	; (800703c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006df2:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 8006df6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006dfa:	1d3b      	adds	r3, r7, #4
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f503 634c 	add.w	r3, r3, #3264	; 0xcc0
 8006e02:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S36>/Math Function1' incorporates:
    //   Constant: '<S36>/Constant2'

    rtDW.MathFunction1_i = rt_modd_snf(rtDW.Bias_m, rtP.Constant2_Value_j);
 8006e06:	1d3b      	adds	r3, r7, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f503 634c 	add.w	r3, r3, #3264	; 0xcc0
 8006e0e:	ed93 7b00 	vldr	d7, [r3]
 8006e12:	4b8a      	ldr	r3, [pc, #552]	; (800703c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006e14:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 8006e18:	eeb0 1b46 	vmov.f64	d1, d6
 8006e1c:	eeb0 0b47 	vmov.f64	d0, d7
 8006e20:	f7fe ffc6 	bl	8005db0 <_Z11rt_modd_snfdd>
 8006e24:	eeb0 7b40 	vmov.f64	d7, d0
 8006e28:	1d3b      	adds	r3, r7, #4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8006e30:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S36>/Bias1'
    rtDW.Bias1_k = rtDW.MathFunction1_i + rtP.Bias1_Bias_k;
 8006e34:	1d3b      	adds	r3, r7, #4
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8006e3c:	ed93 6b00 	vldr	d6, [r3]
 8006e40:	4b7e      	ldr	r3, [pc, #504]	; (800703c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006e42:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8006e46:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e4a:	1d3b      	adds	r3, r7, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 8006e52:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch = rtDW.Bias1_k;
 8006e56:	1d3b      	adds	r3, r7, #4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 8006e5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e62:	1d3a      	adds	r2, r7, #4
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	f502 6233 	add.w	r2, r2, #2864	; 0xb30
 8006e6a:	e9c2 3400 	strd	r3, r4, [r2]
 8006e6e:	e00b      	b.n	8006e88 <_ZN27positionEstimatorModelClass4stepEv+0x110>
  } else {
    rtDW.Switch = rtU.HOME_lla[0];
 8006e70:	1d3b      	adds	r3, r7, #4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 8006e78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e7c:	1d3a      	adds	r2, r7, #4
 8006e7e:	6812      	ldr	r2, [r2, #0]
 8006e80:	f502 6233 	add.w	r2, r2, #2864	; 0xb30
 8006e84:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Switch: '<S36>/Switch'

  // Abs: '<S33>/Abs1'
  rtDW.Abs1 = std::abs(rtDW.Switch);
 8006e88:	1d3b      	adds	r3, r7, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 8006e90:	ed93 7b00 	vldr	d7, [r3]
 8006e94:	eeb0 0b47 	vmov.f64	d0, d7
 8006e98:	f7fe fae7 	bl	800546a <_ZSt3absd>
 8006e9c:	eeb0 7b40 	vmov.f64	d7, d0
 8006ea0:	1d3b      	adds	r3, r7, #4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8006ea8:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S35>/Compare' incorporates:
  //   Constant: '<S35>/Constant'

  rtDW.Compare_c = (rtDW.Abs1 > rtP.CompareToConstant_const_d);
 8006eac:	1d3b      	adds	r3, r7, #4
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8006eb4:	ed93 6b00 	vldr	d6, [r3]
 8006eb8:	4b60      	ldr	r3, [pc, #384]	; (800703c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006eba:	ed93 7b02 	vldr	d7, [r3, #8]
 8006ebe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec6:	bfcc      	ite	gt
 8006ec8:	2301      	movgt	r3, #1
 8006eca:	2300      	movle	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	1d3b      	adds	r3, r7, #4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f883 2d59 	strb.w	r2, [r3, #3417]	; 0xd59
  // Switch: '<S33>/Switch' incorporates:
  //   Constant: '<S24>/Constant'
  //   Constant: '<S24>/Constant1'
  //   Switch: '<S24>/Switch1'

  if (rtDW.Compare_c) {
 8006ed8:	1d3b      	adds	r3, r7, #4
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f893 3d59 	ldrb.w	r3, [r3, #3417]	; 0xd59
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 80b3 	beq.w	800704c <_ZN27positionEstimatorModelClass4stepEv+0x2d4>
    // Bias: '<S33>/Bias'
    rtDW.Bias_d = rtDW.Abs1 + rtP.Bias_Bias_e;
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f603 3338 	addw	r3, r3, #2872	; 0xb38
 8006eee:	ed93 6b00 	vldr	d6, [r3]
 8006ef2:	4b52      	ldr	r3, [pc, #328]	; (800703c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006ef4:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8006ef8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006efc:	1d3b      	adds	r3, r7, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f603 43d8 	addw	r3, r3, #3288	; 0xcd8
 8006f04:	ed83 7b00 	vstr	d7, [r3]

    // Gain: '<S33>/Gain'
    rtDW.Gain = rtP.Gain_Gain_n * rtDW.Bias_d;
 8006f08:	4b4c      	ldr	r3, [pc, #304]	; (800703c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006f0a:	ed93 6b28 	vldr	d6, [r3, #160]	; 0xa0
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f603 43d8 	addw	r3, r3, #3288	; 0xcd8
 8006f16:	ed93 7b00 	vldr	d7, [r3]
 8006f1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 8006f26:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S33>/Bias1'
    rtDW.Bias1_o = rtDW.Gain + rtP.Bias1_Bias_c;
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f503 634e 	add.w	r3, r3, #3296	; 0xce0
 8006f32:	ed93 6b00 	vldr	d6, [r3]
 8006f36:	4b41      	ldr	r3, [pc, #260]	; (800703c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8006f38:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8006f3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f40:	1d3b      	adds	r3, r7, #4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f603 43e8 	addw	r3, r3, #3304	; 0xce8
 8006f48:	ed83 7b00 	vstr	d7, [r3]

    // Signum: '<S33>/Sign1'
    u = rtDW.Switch;
 8006f4c:	1d3b      	adds	r3, r7, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 8006f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f58:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8006f5c:	e9c2 3400 	strd	r3, r4, [r2]
    if (u < 0.0) {
 8006f60:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006f64:	ed93 7b00 	vldr	d7, [r3]
 8006f68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f70:	d509      	bpl.n	8006f86 <_ZN27positionEstimatorModelClass4stepEv+0x20e>
      rtDW.Sign1 = -1.0;
 8006f72:	1d3b      	adds	r3, r7, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f503 624f 	add.w	r2, r3, #3312	; 0xcf0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	4c30      	ldr	r4, [pc, #192]	; (8007040 <_ZN27positionEstimatorModelClass4stepEv+0x2c8>)
 8006f80:	e9c2 3400 	strd	r3, r4, [r2]
 8006f84:	e02f      	b.n	8006fe6 <_ZN27positionEstimatorModelClass4stepEv+0x26e>
    } else if (u > 0.0) {
 8006f86:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006f8a:	ed93 7b00 	vldr	d7, [r3]
 8006f8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f96:	dd09      	ble.n	8006fac <_ZN27positionEstimatorModelClass4stepEv+0x234>
      rtDW.Sign1 = 1.0;
 8006f98:	1d3b      	adds	r3, r7, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f503 624f 	add.w	r2, r3, #3312	; 0xcf0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	4c27      	ldr	r4, [pc, #156]	; (8007044 <_ZN27positionEstimatorModelClass4stepEv+0x2cc>)
 8006fa6:	e9c2 3400 	strd	r3, r4, [r2]
 8006faa:	e01c      	b.n	8006fe6 <_ZN27positionEstimatorModelClass4stepEv+0x26e>
    } else if (u == 0.0) {
 8006fac:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8006fb0:	ed93 7b00 	vldr	d7, [r3]
 8006fb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbc:	d10a      	bne.n	8006fd4 <_ZN27positionEstimatorModelClass4stepEv+0x25c>
      rtDW.Sign1 = 0.0;
 8006fbe:	1d3b      	adds	r3, r7, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f503 624f 	add.w	r2, r3, #3312	; 0xcf0
 8006fc6:	f04f 0300 	mov.w	r3, #0
 8006fca:	f04f 0400 	mov.w	r4, #0
 8006fce:	e9c2 3400 	strd	r3, r4, [r2]
 8006fd2:	e008      	b.n	8006fe6 <_ZN27positionEstimatorModelClass4stepEv+0x26e>
    } else {
      rtDW.Sign1 = (rtNaN);
 8006fd4:	4b1c      	ldr	r3, [pc, #112]	; (8007048 <_ZN27positionEstimatorModelClass4stepEv+0x2d0>)
 8006fd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fda:	1d3a      	adds	r2, r7, #4
 8006fdc:	6812      	ldr	r2, [r2, #0]
 8006fde:	f502 624f 	add.w	r2, r2, #3312	; 0xcf0
 8006fe2:	e9c2 3400 	strd	r3, r4, [r2]
    }

    // End of Signum: '<S33>/Sign1'

    // Product: '<S33>/Divide1'
    rtDW.Divide1 = rtDW.Sign1 * rtDW.Bias1_o;
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f503 634f 	add.w	r3, r3, #3312	; 0xcf0
 8006fee:	ed93 6b00 	vldr	d6, [r3]
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f603 43e8 	addw	r3, r3, #3304	; 0xce8
 8006ffa:	ed93 7b00 	vldr	d7, [r3]
 8006ffe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007002:	1d3b      	adds	r3, r7, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f603 43f8 	addw	r3, r3, #3320	; 0xcf8
 800700a:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_b = rtDW.Divide1;
 800700e:	1d3b      	adds	r3, r7, #4
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f603 43f8 	addw	r3, r3, #3320	; 0xcf8
 8007016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800701a:	1d3a      	adds	r2, r7, #4
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	f502 6234 	add.w	r2, r2, #2880	; 0xb40
 8007022:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1 = rtP.Constant_Value_m;
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <_ZN27positionEstimatorModelClass4stepEv+0x2c4>)
 8007028:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800702c:	1d3a      	adds	r2, r7, #4
 800702e:	6812      	ldr	r2, [r2, #0]
 8007030:	f602 3248 	addw	r2, r2, #2888	; 0xb48
 8007034:	e9c2 3400 	strd	r3, r4, [r2]
 8007038:	e01d      	b.n	8007076 <_ZN27positionEstimatorModelClass4stepEv+0x2fe>
 800703a:	bf00      	nop
 800703c:	24000258 	.word	0x24000258
 8007040:	bff00000 	.word	0xbff00000
 8007044:	3ff00000 	.word	0x3ff00000
 8007048:	24000920 	.word	0x24000920
  } else {
    rtDW.Switch_b = rtDW.Switch;
 800704c:	1d3b      	adds	r3, r7, #4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 8007054:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007058:	1d3a      	adds	r2, r7, #4
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	f502 6234 	add.w	r2, r2, #2880	; 0xb40
 8007060:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1 = rtP.Constant1_Value_f;
 8007064:	4b98      	ldr	r3, [pc, #608]	; (80072c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007066:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800706a:	1d3a      	adds	r2, r7, #4
 800706c:	6812      	ldr	r2, [r2, #0]
 800706e:	f602 3248 	addw	r2, r2, #2888	; 0xb48
 8007072:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Switch: '<S33>/Switch'

  // Sum: '<S24>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'

  rtDW.Sum = rtDW.Switch1 + rtU.HOME_lla[1];
 8007076:	1d3b      	adds	r3, r7, #4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 800707e:	ed93 6b00 	vldr	d6, [r3]
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f603 53d8 	addw	r3, r3, #3544	; 0xdd8
 800708a:	ed93 7b00 	vldr	d7, [r3]
 800708e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007092:	1d3b      	adds	r3, r7, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 800709a:	ed83 7b00 	vstr	d7, [r3]

  // Abs: '<S34>/Abs'
  rtDW.Abs_i = std::abs(rtDW.Sum);
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 80070a6:	ed93 7b00 	vldr	d7, [r3]
 80070aa:	eeb0 0b47 	vmov.f64	d0, d7
 80070ae:	f7fe f9dc 	bl	800546a <_ZSt3absd>
 80070b2:	eeb0 7b40 	vmov.f64	d7, d0
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 80070be:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S38>/Compare' incorporates:
  //   Constant: '<S38>/Constant'

  rtDW.Compare_d = (rtDW.Abs_i > rtP.CompareToConstant_const_j);
 80070c2:	1d3b      	adds	r3, r7, #4
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f603 3358 	addw	r3, r3, #2904	; 0xb58
 80070ca:	ed93 6b00 	vldr	d6, [r3]
 80070ce:	4b7e      	ldr	r3, [pc, #504]	; (80072c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 80070d0:	ed93 7b04 	vldr	d7, [r3, #16]
 80070d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80070d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070dc:	bfcc      	ite	gt
 80070de:	2301      	movgt	r3, #1
 80070e0:	2300      	movle	r3, #0
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	1d3b      	adds	r3, r7, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f883 2d5a 	strb.w	r2, [r3, #3418]	; 0xd5a

  // Switch: '<S34>/Switch'
  if (rtDW.Compare_d) {
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f893 3d5a 	ldrb.w	r3, [r3, #3418]	; 0xd5a
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d045      	beq.n	8007186 <_ZN27positionEstimatorModelClass4stepEv+0x40e>
    // Bias: '<S34>/Bias'
    rtDW.Bias = rtDW.Sum + rtP.Bias_Bias_d;
 80070fa:	1d3b      	adds	r3, r7, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 8007102:	ed93 6b00 	vldr	d6, [r3]
 8007106:	4b70      	ldr	r3, [pc, #448]	; (80072c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007108:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 800710c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007110:	1d3b      	adds	r3, r7, #4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8007118:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S34>/Math Function1' incorporates:
    //   Constant: '<S34>/Constant2'

    rtDW.MathFunction1 = rt_modd_snf(rtDW.Bias, rtP.Constant2_Value_k);
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8007124:	ed93 7b00 	vldr	d7, [r3]
 8007128:	4b67      	ldr	r3, [pc, #412]	; (80072c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 800712a:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 800712e:	eeb0 1b46 	vmov.f64	d1, d6
 8007132:	eeb0 0b47 	vmov.f64	d0, d7
 8007136:	f7fe fe3b 	bl	8005db0 <_Z11rt_modd_snfdd>
 800713a:	eeb0 7b40 	vmov.f64	d7, d0
 800713e:	1d3b      	adds	r3, r7, #4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8007146:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S34>/Bias1'
    rtDW.Bias1 = rtDW.MathFunction1 + rtP.Bias1_Bias_cz;
 800714a:	1d3b      	adds	r3, r7, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8007152:	ed93 6b00 	vldr	d6, [r3]
 8007156:	4b5c      	ldr	r3, [pc, #368]	; (80072c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007158:	ed93 7b36 	vldr	d7, [r3, #216]	; 0xd8
 800715c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007160:	1d3b      	adds	r3, r7, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007168:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_h = rtDW.Bias1;
 800716c:	1d3b      	adds	r3, r7, #4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007174:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007178:	1d3a      	adds	r2, r7, #4
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	f502 6236 	add.w	r2, r2, #2912	; 0xb60
 8007180:	e9c2 3400 	strd	r3, r4, [r2]
 8007184:	e00b      	b.n	800719e <_ZN27positionEstimatorModelClass4stepEv+0x426>
  } else {
    rtDW.Switch_h = rtDW.Sum;
 8007186:	1d3b      	adds	r3, r7, #4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 800718e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007192:	1d3a      	adds	r2, r7, #4
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	f502 6236 	add.w	r2, r2, #2912	; 0xb60
 800719a:	e9c2 3400 	strd	r3, r4, [r2]

  // Sum: '<S22>/Sum1' incorporates:
  //   Inport: '<Root>/lat'
  //   Inport: '<Root>/lon'

  rtDW.Sum1[0] = rtU.lat - rtDW.Switch_b;
 800719e:	1d3b      	adds	r3, r7, #4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f603 5398 	addw	r3, r3, #3480	; 0xd98
 80071a6:	ed93 6b00 	vldr	d6, [r3]
 80071aa:	1d3b      	adds	r3, r7, #4
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80071b2:	ed93 7b00 	vldr	d7, [r3]
 80071b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80071ba:	1d3b      	adds	r3, r7, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
  rtDW.Sum1[1] = rtU.lon - rtDW.Switch_h;
 80071c2:	1d3b      	adds	r3, r7, #4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f503 635a 	add.w	r3, r3, #3488	; 0xda0
 80071ca:	ed93 6b00 	vldr	d6, [r3]
 80071ce:	1d3b      	adds	r3, r7, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
 80071d6:	ed93 7b00 	vldr	d7, [r3]
 80071da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	ed83 7b66 	vstr	d7, [r3, #408]	; 0x198

  // Abs: '<S30>/Abs'
  rtDW.Abs_b = std::abs(rtDW.Sum1[0]);
 80071e6:	1d3b      	adds	r3, r7, #4
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 80071ee:	eeb0 0b47 	vmov.f64	d0, d7
 80071f2:	f7fe f93a 	bl	800546a <_ZSt3absd>
 80071f6:	eeb0 7b40 	vmov.f64	d7, d0
 80071fa:	1d3b      	adds	r3, r7, #4
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8007202:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S31>/Compare' incorporates:
  //   Constant: '<S31>/Constant'

  rtDW.Compare_ds = (rtDW.Abs_b > rtP.CompareToConstant_const_n);
 8007206:	1d3b      	adds	r3, r7, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 800720e:	ed93 6b00 	vldr	d6, [r3]
 8007212:	4b2d      	ldr	r3, [pc, #180]	; (80072c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007214:	ed93 7b06 	vldr	d7, [r3, #24]
 8007218:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800721c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007220:	bfcc      	ite	gt
 8007222:	2301      	movgt	r3, #1
 8007224:	2300      	movle	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	461a      	mov	r2, r3
 800722a:	1d3b      	adds	r3, r7, #4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f883 2d5b 	strb.w	r2, [r3, #3419]	; 0xd5b

  // Switch: '<S30>/Switch'
  if (rtDW.Compare_ds) {
 8007232:	1d3b      	adds	r3, r7, #4
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f893 3d5b 	ldrb.w	r3, [r3, #3419]	; 0xd5b
 800723a:	2b00      	cmp	r3, #0
 800723c:	d046      	beq.n	80072cc <_ZN27positionEstimatorModelClass4stepEv+0x554>
    // Bias: '<S30>/Bias'
    rtDW.Bias_e = rtDW.Sum1[0] + rtP.Bias_Bias_b;
 800723e:	1d3b      	adds	r3, r7, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	ed93 6b64 	vldr	d6, [r3, #400]	; 0x190
 8007246:	4b20      	ldr	r3, [pc, #128]	; (80072c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007248:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800724c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007250:	1d3b      	adds	r3, r7, #4
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f603 5318 	addw	r3, r3, #3352	; 0xd18
 8007258:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S30>/Math Function1' incorporates:
    //   Constant: '<S30>/Constant2'

    rtDW.MathFunction1_o = rt_modd_snf(rtDW.Bias_e, rtP.Constant2_Value);
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f603 5318 	addw	r3, r3, #3352	; 0xd18
 8007264:	ed93 7b00 	vldr	d7, [r3]
 8007268:	4b17      	ldr	r3, [pc, #92]	; (80072c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 800726a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800726e:	eeb0 1b46 	vmov.f64	d1, d6
 8007272:	eeb0 0b47 	vmov.f64	d0, d7
 8007276:	f7fe fd9b 	bl	8005db0 <_Z11rt_modd_snfdd>
 800727a:	eeb0 7b40 	vmov.f64	d7, d0
 800727e:	1d3b      	adds	r3, r7, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8007286:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S30>/Bias1'
    rtDW.Bias1_oh = rtDW.MathFunction1_o + rtP.Bias1_Bias_p;
 800728a:	1d3b      	adds	r3, r7, #4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8007292:	ed93 6b00 	vldr	d6, [r3]
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <_ZN27positionEstimatorModelClass4stepEv+0x550>)
 8007298:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800729c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80072a0:	1d3b      	adds	r3, r7, #4
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 80072a8:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_f = rtDW.Bias1_oh;
 80072ac:	1d3b      	adds	r3, r7, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f603 5328 	addw	r3, r3, #3368	; 0xd28
 80072b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072b8:	1d3a      	adds	r2, r7, #4
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	f502 6237 	add.w	r2, r2, #2928	; 0xb70
 80072c0:	e9c2 3400 	strd	r3, r4, [r2]
 80072c4:	e00c      	b.n	80072e0 <_ZN27positionEstimatorModelClass4stepEv+0x568>
 80072c6:	bf00      	nop
 80072c8:	24000258 	.word	0x24000258
  } else {
    rtDW.Switch_f = rtDW.Sum1[0];
 80072cc:	1d3b      	adds	r3, r7, #4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 80072d4:	1d3a      	adds	r2, r7, #4
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	f502 6237 	add.w	r2, r2, #2928	; 0xb70
 80072dc:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Switch: '<S30>/Switch'

  // Abs: '<S27>/Abs1'
  rtDW.Abs1_j = std::abs(rtDW.Switch_f);
 80072e0:	1d3b      	adds	r3, r7, #4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 80072e8:	ed93 7b00 	vldr	d7, [r3]
 80072ec:	eeb0 0b47 	vmov.f64	d0, d7
 80072f0:	f7fe f8bb 	bl	800546a <_ZSt3absd>
 80072f4:	eeb0 7b40 	vmov.f64	d7, d0
 80072f8:	1d3b      	adds	r3, r7, #4
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 8007300:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S29>/Compare' incorporates:
  //   Constant: '<S29>/Constant'

  rtDW.Compare_m = (rtDW.Abs1_j > rtP.CompareToConstant_const_e);
 8007304:	1d3b      	adds	r3, r7, #4
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 800730c:	ed93 6b00 	vldr	d6, [r3]
 8007310:	4bad      	ldr	r3, [pc, #692]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007312:	ed93 7b08 	vldr	d7, [r3, #32]
 8007316:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800731a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731e:	bfcc      	ite	gt
 8007320:	2301      	movgt	r3, #1
 8007322:	2300      	movle	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	461a      	mov	r2, r3
 8007328:	1d3b      	adds	r3, r7, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f883 2d5c 	strb.w	r2, [r3, #3420]	; 0xd5c
  // Switch: '<S27>/Switch' incorporates:
  //   Constant: '<S23>/Constant'
  //   Constant: '<S23>/Constant1'
  //   Switch: '<S23>/Switch1'

  if (rtDW.Compare_m) {
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f893 3d5c 	ldrb.w	r3, [r3, #3420]	; 0xd5c
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 80aa 	beq.w	8007492 <_ZN27positionEstimatorModelClass4stepEv+0x71a>
    // Bias: '<S27>/Bias'
    rtDW.Bias_mj = rtDW.Abs1_j + rtP.Bias_Bias;
 800733e:	1d3b      	adds	r3, r7, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 8007346:	ed93 6b00 	vldr	d6, [r3]
 800734a:	4b9f      	ldr	r3, [pc, #636]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800734c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8007350:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007354:	1d3b      	adds	r3, r7, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f503 6353 	add.w	r3, r3, #3376	; 0xd30
 800735c:	ed83 7b00 	vstr	d7, [r3]

    // Gain: '<S27>/Gain'
    rtDW.Gain_c = rtP.Gain_Gain * rtDW.Bias_mj;
 8007360:	4b99      	ldr	r3, [pc, #612]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007362:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f503 6353 	add.w	r3, r3, #3376	; 0xd30
 800736e:	ed93 7b00 	vldr	d7, [r3]
 8007372:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f603 5338 	addw	r3, r3, #3384	; 0xd38
 800737e:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S27>/Bias1'
    rtDW.Bias1_n = rtDW.Gain_c + rtP.Bias1_Bias;
 8007382:	1d3b      	adds	r3, r7, #4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f603 5338 	addw	r3, r3, #3384	; 0xd38
 800738a:	ed93 6b00 	vldr	d6, [r3]
 800738e:	4b8e      	ldr	r3, [pc, #568]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007390:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8007394:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007398:	1d3b      	adds	r3, r7, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 80073a0:	ed83 7b00 	vstr	d7, [r3]

    // Signum: '<S27>/Sign1'
    u = rtDW.Switch_f;
 80073a4:	1d3b      	adds	r3, r7, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 80073ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073b0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80073b4:	e9c2 3400 	strd	r3, r4, [r2]
    if (u < 0.0) {
 80073b8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80073bc:	ed93 7b00 	vldr	d7, [r3]
 80073c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80073c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c8:	d509      	bpl.n	80073de <_ZN27positionEstimatorModelClass4stepEv+0x666>
      rtDW.Sign1_g = -1.0;
 80073ca:	1d3b      	adds	r3, r7, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f603 5248 	addw	r2, r3, #3400	; 0xd48
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	4c7d      	ldr	r4, [pc, #500]	; (80075cc <_ZN27positionEstimatorModelClass4stepEv+0x854>)
 80073d8:	e9c2 3400 	strd	r3, r4, [r2]
 80073dc:	e02f      	b.n	800743e <_ZN27positionEstimatorModelClass4stepEv+0x6c6>
    } else if (u > 0.0) {
 80073de:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80073e2:	ed93 7b00 	vldr	d7, [r3]
 80073e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80073ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ee:	dd09      	ble.n	8007404 <_ZN27positionEstimatorModelClass4stepEv+0x68c>
      rtDW.Sign1_g = 1.0;
 80073f0:	1d3b      	adds	r3, r7, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f603 5248 	addw	r2, r3, #3400	; 0xd48
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	4c74      	ldr	r4, [pc, #464]	; (80075d0 <_ZN27positionEstimatorModelClass4stepEv+0x858>)
 80073fe:	e9c2 3400 	strd	r3, r4, [r2]
 8007402:	e01c      	b.n	800743e <_ZN27positionEstimatorModelClass4stepEv+0x6c6>
    } else if (u == 0.0) {
 8007404:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007408:	ed93 7b00 	vldr	d7, [r3]
 800740c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007414:	d10a      	bne.n	800742c <_ZN27positionEstimatorModelClass4stepEv+0x6b4>
      rtDW.Sign1_g = 0.0;
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f603 5248 	addw	r2, r3, #3400	; 0xd48
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	f04f 0400 	mov.w	r4, #0
 8007426:	e9c2 3400 	strd	r3, r4, [r2]
 800742a:	e008      	b.n	800743e <_ZN27positionEstimatorModelClass4stepEv+0x6c6>
    } else {
      rtDW.Sign1_g = (rtNaN);
 800742c:	4b69      	ldr	r3, [pc, #420]	; (80075d4 <_ZN27positionEstimatorModelClass4stepEv+0x85c>)
 800742e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007432:	1d3a      	adds	r2, r7, #4
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	f602 5248 	addw	r2, r2, #3400	; 0xd48
 800743a:	e9c2 3400 	strd	r3, r4, [r2]
    }

    // End of Signum: '<S27>/Sign1'

    // Product: '<S27>/Divide1'
    rtDW.Divide1_h = rtDW.Sign1_g * rtDW.Bias1_n;
 800743e:	1d3b      	adds	r3, r7, #4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 8007446:	ed93 6b00 	vldr	d6, [r3]
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f503 6354 	add.w	r3, r3, #3392	; 0xd40
 8007452:	ed93 7b00 	vldr	d7, [r3]
 8007456:	ee26 7b07 	vmul.f64	d7, d6, d7
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 8007462:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_j = rtDW.Divide1_h;
 8007466:	1d3b      	adds	r3, r7, #4
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 800746e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007472:	1d3a      	adds	r2, r7, #4
 8007474:	6812      	ldr	r2, [r2, #0]
 8007476:	f502 6238 	add.w	r2, r2, #2944	; 0xb80
 800747a:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1_b = rtP.Constant_Value;
 800747e:	4b52      	ldr	r3, [pc, #328]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007480:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007484:	1d3a      	adds	r2, r7, #4
 8007486:	6812      	ldr	r2, [r2, #0]
 8007488:	f602 3288 	addw	r2, r2, #2952	; 0xb88
 800748c:	e9c2 3400 	strd	r3, r4, [r2]
 8007490:	e014      	b.n	80074bc <_ZN27positionEstimatorModelClass4stepEv+0x744>
  } else {
    rtDW.Switch_j = rtDW.Switch_f;
 8007492:	1d3b      	adds	r3, r7, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 800749a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800749e:	1d3a      	adds	r2, r7, #4
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	f502 6238 	add.w	r2, r2, #2944	; 0xb80
 80074a6:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.Switch1_b = rtP.Constant1_Value;
 80074aa:	4b47      	ldr	r3, [pc, #284]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 80074ac:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80074b0:	1d3a      	adds	r2, r7, #4
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	f602 3288 	addw	r2, r2, #2952	; 0xb88
 80074b8:	e9c2 3400 	strd	r3, r4, [r2]
  }

  // End of Switch: '<S27>/Switch'

  // Sum: '<S23>/Sum'
  rtDW.Sum_j = rtDW.Switch1_b + rtDW.Sum1[1];
 80074bc:	1d3b      	adds	r3, r7, #4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 80074c4:	ed93 6b00 	vldr	d6, [r3]
 80074c8:	1d3b      	adds	r3, r7, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	ed93 7b66 	vldr	d7, [r3, #408]	; 0x198
 80074d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80074d4:	1d3b      	adds	r3, r7, #4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 80074dc:	ed83 7b00 	vstr	d7, [r3]

  // Abs: '<S28>/Abs'
  rtDW.Abs_b0 = std::abs(rtDW.Sum_j);
 80074e0:	1d3b      	adds	r3, r7, #4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 80074e8:	ed93 7b00 	vldr	d7, [r3]
 80074ec:	eeb0 0b47 	vmov.f64	d0, d7
 80074f0:	f7fd ffbb 	bl	800546a <_ZSt3absd>
 80074f4:	eeb0 7b40 	vmov.f64	d7, d0
 80074f8:	1d3b      	adds	r3, r7, #4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8007500:	ed83 7b00 	vstr	d7, [r3]

  // RelationalOperator: '<S32>/Compare' incorporates:
  //   Constant: '<S32>/Constant'

  rtDW.Compare_k = (rtDW.Abs_b0 > rtP.CompareToConstant_const_ei);
 8007504:	1d3b      	adds	r3, r7, #4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 800750c:	ed93 6b00 	vldr	d6, [r3]
 8007510:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 8007512:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8007516:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800751a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751e:	bfcc      	ite	gt
 8007520:	2301      	movgt	r3, #1
 8007522:	2300      	movle	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	1d3b      	adds	r3, r7, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f883 2d5d 	strb.w	r2, [r3, #3421]	; 0xd5d

  // Switch: '<S28>/Switch'
  if (rtDW.Compare_k) {
 8007530:	1d3b      	adds	r3, r7, #4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f893 3d5d 	ldrb.w	r3, [r3, #3421]	; 0xd5d
 8007538:	2b00      	cmp	r3, #0
 800753a:	d04d      	beq.n	80075d8 <_ZN27positionEstimatorModelClass4stepEv+0x860>
    // Bias: '<S28>/Bias'
    rtDW.Bias_j = rtDW.Sum_j + rtP.Bias_Bias_a;
 800753c:	1d3b      	adds	r3, r7, #4
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8007544:	ed93 6b00 	vldr	d6, [r3]
 8007548:	4b1f      	ldr	r3, [pc, #124]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800754a:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800754e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007552:	1d3b      	adds	r3, r7, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 800755a:	ed83 7b00 	vstr	d7, [r3]

    // Math: '<S28>/Math Function1' incorporates:
    //   Constant: '<S28>/Constant2'

    rtDW.MathFunction1_h = rt_modd_snf(rtDW.Bias_j, rtP.Constant2_Value_g);
 800755e:	1d3b      	adds	r3, r7, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8007566:	ed93 7b00 	vldr	d7, [r3]
 800756a:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800756c:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8007570:	eeb0 1b46 	vmov.f64	d1, d6
 8007574:	eeb0 0b47 	vmov.f64	d0, d7
 8007578:	f7fe fc1a 	bl	8005db0 <_Z11rt_modd_snfdd>
 800757c:	eeb0 7b40 	vmov.f64	d7, d0
 8007580:	1d3b      	adds	r3, r7, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8007588:	ed83 7b00 	vstr	d7, [r3]

    // Bias: '<S28>/Bias1'
    rtDW.Bias1_p = rtDW.MathFunction1_h + rtP.Bias1_Bias_l;
 800758c:	1d3b      	adds	r3, r7, #4
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8007594:	ed93 6b00 	vldr	d6, [r3]
 8007598:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <_ZN27positionEstimatorModelClass4stepEv+0x850>)
 800759a:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 800759e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80075a2:	1d3b      	adds	r3, r7, #4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 80075aa:	ed83 7b00 	vstr	d7, [r3]
    rtDW.Switch_m = rtDW.Bias1_p;
 80075ae:	1d3b      	adds	r3, r7, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 80075b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075ba:	1d3a      	adds	r2, r7, #4
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	f502 623a 	add.w	r2, r2, #2976	; 0xba0
 80075c2:	e9c2 3400 	strd	r3, r4, [r2]
 80075c6:	e013      	b.n	80075f0 <_ZN27positionEstimatorModelClass4stepEv+0x878>
 80075c8:	24000258 	.word	0x24000258
 80075cc:	bff00000 	.word	0xbff00000
 80075d0:	3ff00000 	.word	0x3ff00000
 80075d4:	24000920 	.word	0x24000920
  } else {
    rtDW.Switch_m = rtDW.Sum_j;
 80075d8:	1d3b      	adds	r3, r7, #4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 80075e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075e4:	1d3a      	adds	r2, r7, #4
 80075e6:	6812      	ldr	r2, [r2, #0]
 80075e8:	f502 623a 	add.w	r2, r2, #2976	; 0xba0
 80075ec:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Switch: '<S28>/Switch'

  // UnitConversion: '<S26>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion[0] = 0.017453292519943295 * rtDW.Switch_j;
 80075f0:	1d3b      	adds	r3, r7, #4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 80075f8:	ed93 7b00 	vldr	d7, [r3]
 80075fc:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8007968 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 8007600:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007604:	1d3b      	adds	r3, r7, #4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
  rtDW.UnitConversion[1] = 0.017453292519943295 * rtDW.Switch_m;
 800760c:	1d3b      	adds	r3, r7, #4
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8007614:	ed93 7b00 	vldr	d7, [r3]
 8007618:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 8007968 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 800761c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007620:	1d3b      	adds	r3, r7, #4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	ed83 7b6a 	vstr	d7, [r3, #424]	; 0x1a8

  // Sum: '<S43>/Sum' incorporates:
  //   Constant: '<S43>/Constant'
  //   Constant: '<S43>/f'

  rtDW.Sum_a = rtP.f_Value - rtP.Constant_Value_c;
 8007628:	4bd1      	ldr	r3, [pc, #836]	; (8007970 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800762a:	ed93 6b42 	vldr	d6, [r3, #264]	; 0x108
 800762e:	4bd0      	ldr	r3, [pc, #832]	; (8007970 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 8007630:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8007634:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007638:	1d3b      	adds	r3, r7, #4
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8007640:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S44>/Product1'
  rtDW.Product1 = rtDW.Sum_a * rtDW.Sum_a;
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 800764c:	ed93 6b00 	vldr	d6, [r3]
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8007658:	ed93 7b00 	vldr	d7, [r3]
 800765c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007660:	1d3b      	adds	r3, r7, #4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 8007668:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S44>/Sum1' incorporates:
  //   Constant: '<S44>/Constant'

  rtDW.Sum1_e = rtP.Constant_Value_a - rtDW.Product1;
 800766c:	4bc0      	ldr	r3, [pc, #768]	; (8007970 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800766e:	ed93 6b3e 	vldr	d6, [r3, #248]	; 0xf8
 8007672:	1d3b      	adds	r3, r7, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f503 633b 	add.w	r3, r3, #2992	; 0xbb0
 800767a:	ed93 7b00 	vldr	d7, [r3]
 800767e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007682:	1d3b      	adds	r3, r7, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800768a:	ed83 7b00 	vstr	d7, [r3]

  // Sqrt: '<S44>/sqrt'
  rtDW.sqrt_c = std::sqrt(rtDW.Sum1_e);
 800768e:	1d3b      	adds	r3, r7, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8007696:	ed93 7b00 	vldr	d7, [r3]
 800769a:	eeb0 0b47 	vmov.f64	d0, d7
 800769e:	f023 feb7 	bl	802b410 <sqrt>
 80076a2:	eeb0 7b40 	vmov.f64	d7, d0
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 80076ae:	ed83 7b00 	vstr	d7, [r3]

  // UnitConversion: '<S41>/Unit Conversion'
  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_m = 0.017453292519943295 * rtDW.Switch_b;
 80076b2:	1d3b      	adds	r3, r7, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80076ba:	ed93 7b00 	vldr	d7, [r3]
 80076be:	ed9f 6baa 	vldr	d6, [pc, #680]	; 8007968 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 80076c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076c6:	1d3b      	adds	r3, r7, #4
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80076ce:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S42>/Trigonometric Function1'
  rtDW.TrigonometricFunction1 = std::sin(rtDW.UnitConversion_m);
 80076d2:	1d3b      	adds	r3, r7, #4
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 80076da:	ed93 7b00 	vldr	d7, [r3]
 80076de:	eeb0 0b47 	vmov.f64	d0, d7
 80076e2:	f023 fc51 	bl	802af88 <sin>
 80076e6:	eeb0 7b40 	vmov.f64	d7, d0
 80076ea:	1d3b      	adds	r3, r7, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 80076f2:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S42>/Product1'
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 80076f6:	1d3b      	adds	r3, r7, #4
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 80076fe:	ed93 6b00 	vldr	d6, [r3]
 8007702:	1d3b      	adds	r3, r7, #4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 800770a:	ed93 7b00 	vldr	d7, [r3]
 800770e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007712:	1d3b      	adds	r3, r7, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 800771a:	ed93 7b00 	vldr	d7, [r3]
 800771e:	ee26 6b07 	vmul.f64	d6, d6, d7
    rtDW.TrigonometricFunction1;
 8007722:	1d3b      	adds	r3, r7, #4
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 800772a:	ed93 7b00 	vldr	d7, [r3]
  rtDW.Product1_n = rtDW.sqrt_c * rtDW.sqrt_c * rtDW.TrigonometricFunction1 *
 800772e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007732:	1d3b      	adds	r3, r7, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 800773a:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S42>/Sum1' incorporates:
  //   Constant: '<S42>/Constant'

  rtDW.Sum1_c = rtP.Constant_Value_f - rtDW.Product1_n;
 800773e:	4b8c      	ldr	r3, [pc, #560]	; (8007970 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 8007740:	ed93 6b3c 	vldr	d6, [r3, #240]	; 0xf0
 8007744:	1d3b      	adds	r3, r7, #4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 800774c:	ed93 7b00 	vldr	d7, [r3]
 8007750:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007754:	1d3b      	adds	r3, r7, #4
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 800775c:	ed83 7b00 	vstr	d7, [r3]

  // Sqrt: '<S40>/sqrt'
  rtDW.sqrt_d = std::sqrt(rtDW.Sum1_c);
 8007760:	1d3b      	adds	r3, r7, #4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8007768:	ed93 7b00 	vldr	d7, [r3]
 800776c:	eeb0 0b47 	vmov.f64	d0, d7
 8007770:	f023 fe4e 	bl	802b410 <sqrt>
 8007774:	eeb0 7b40 	vmov.f64	d7, d0
 8007778:	1d3b      	adds	r3, r7, #4
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8007780:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S40>/Product1' incorporates:
  //   Constant: '<S40>/Constant1'

  rtDW.Rn = rtP.Constant1_Value_d / rtDW.sqrt_d;
 8007784:	4b7a      	ldr	r3, [pc, #488]	; (8007970 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 8007786:	ed93 5b3a 	vldr	d5, [r3, #232]	; 0xe8
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8007792:	ed93 6b00 	vldr	d6, [r3]
 8007796:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800779a:	1d3b      	adds	r3, r7, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 80077a2:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S40>/Product2'
  rtDW.Product2 = rtDW.sqrt_c * rtDW.sqrt_c;
 80077a6:	1d3b      	adds	r3, r7, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 80077ae:	ed93 6b00 	vldr	d6, [r3]
 80077b2:	1d3b      	adds	r3, r7, #4
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 80077ba:	ed93 7b00 	vldr	d7, [r3]
 80077be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80077c2:	1d3b      	adds	r3, r7, #4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 80077ca:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S40>/Sum1' incorporates:
  //   Constant: '<S40>/Constant'

  rtDW.Sum1_g = rtP.Constant_Value_ch - rtDW.Product2;
 80077ce:	4b68      	ldr	r3, [pc, #416]	; (8007970 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 80077d0:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 80077dc:	ed93 7b00 	vldr	d7, [r3]
 80077e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80077e4:	1d3b      	adds	r3, r7, #4
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80077ec:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S40>/Product3'
  rtDW.Rm = rtDW.Rn * rtDW.Sum1_g / rtDW.Sum1_c;
 80077f0:	1d3b      	adds	r3, r7, #4
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 80077f8:	ed93 6b00 	vldr	d6, [r3]
 80077fc:	1d3b      	adds	r3, r7, #4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007804:	ed93 7b00 	vldr	d7, [r3]
 8007808:	ee26 5b07 	vmul.f64	d5, d6, d7
 800780c:	1d3b      	adds	r3, r7, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8007814:	ed93 6b00 	vldr	d6, [r3]
 8007818:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8007824:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S40>/Trigonometric Function1' incorporates:
  //   Constant: '<S40>/Constant2'

  rtDW.TrigonometricFunction1_l = rt_atan2d_snf(rtP.Constant2_Value_h, rtDW.Rm);
 8007828:	4b51      	ldr	r3, [pc, #324]	; (8007970 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800782a:	ed93 7b38 	vldr	d7, [r3, #224]	; 0xe0
 800782e:	1d3b      	adds	r3, r7, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8007836:	ed93 6b00 	vldr	d6, [r3]
 800783a:	eeb0 1b46 	vmov.f64	d1, d6
 800783e:	eeb0 0b47 	vmov.f64	d0, d7
 8007842:	f7fe fbc9 	bl	8005fd8 <_Z13rt_atan2d_snfdd>
 8007846:	eeb0 7b40 	vmov.f64	d7, d0
 800784a:	1d3b      	adds	r3, r7, #4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8007852:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S25>/dNorth'
  rtDW.dNorth = rtDW.UnitConversion[0] / rtDW.TrigonometricFunction1_l;
 8007856:	1d3b      	adds	r3, r7, #4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	ed93 5b68 	vldr	d5, [r3, #416]	; 0x1a0
 800785e:	1d3b      	adds	r3, r7, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8007866:	ed93 6b00 	vldr	d6, [r3]
 800786a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 8007876:	ed83 7b00 	vstr	d7, [r3]
  // UnitConversion: '<S39>/Unit Conversion' incorporates:
  //   Constant: '<S3>/flat-x_from_N'

  // Unit Conversion - from: deg to: rad
  // Expression: output = (0.0174533*input) + (0)
  rtDW.UnitConversion_p = 0.017453292519943295 * rtP.flatx_from_N_Value;
 800787a:	4b3d      	ldr	r3, [pc, #244]	; (8007970 <_ZN27positionEstimatorModelClass4stepEv+0xbf8>)
 800787c:	ed93 7b46 	vldr	d7, [r3, #280]	; 0x118
 8007880:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8007968 <_ZN27positionEstimatorModelClass4stepEv+0xbf0>
 8007884:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007888:	1d3b      	adds	r3, r7, #4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8007890:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S25>/SinCos'
  a22 = rtDW.UnitConversion_p;
 8007894:	1d3b      	adds	r3, r7, #4
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 800789c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078a0:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 80078a4:	e9c2 3400 	strd	r3, r4, [r2]
  epsilon = std::sin(a22);
 80078a8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80078ac:	ed93 0b00 	vldr	d0, [r3]
 80078b0:	f023 fb6a 	bl	802af88 <sin>
 80078b4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80078b8:	ed83 0b00 	vstr	d0, [r3]
  a22 = std::cos(a22);
 80078bc:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80078c0:	ed93 0b00 	vldr	d0, [r3]
 80078c4:	f023 faa0 	bl	802ae08 <cos>
 80078c8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80078cc:	ed83 0b00 	vstr	d0, [r3]
  rtDW.SinCos_o1 = epsilon;
 80078d0:	1d3b      	adds	r3, r7, #4
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f603 4228 	addw	r2, r3, #3112	; 0xc28
 80078d8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80078dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078e0:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.SinCos_o2 = a22;
 80078e4:	1d3b      	adds	r3, r7, #4
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f503 6243 	add.w	r2, r3, #3120	; 0xc30
 80078ec:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80078f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078f4:	e9c2 3400 	strd	r3, r4, [r2]

  // Product: '<S25>/x*cos'
  rtDW.xcos = rtDW.dNorth * rtDW.SinCos_o2;
 80078f8:	1d3b      	adds	r3, r7, #4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 8007900:	ed93 6b00 	vldr	d6, [r3]
 8007904:	1d3b      	adds	r3, r7, #4
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 800790c:	ed93 7b00 	vldr	d7, [r3]
 8007910:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007914:	1d3b      	adds	r3, r7, #4
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 800791c:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S40>/Trigonometric Function'
  rtDW.TrigonometricFunction = std::cos(rtDW.UnitConversion_m);
 8007920:	1d3b      	adds	r3, r7, #4
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 8007928:	ed93 7b00 	vldr	d7, [r3]
 800792c:	eeb0 0b47 	vmov.f64	d0, d7
 8007930:	f023 fa6a 	bl	802ae08 <cos>
 8007934:	eeb0 7b40 	vmov.f64	d7, d0
 8007938:	1d3b      	adds	r3, r7, #4
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8007940:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S40>/Product4'
  rtDW.Product4 = rtDW.Rn * rtDW.TrigonometricFunction;
 8007944:	1d3b      	adds	r3, r7, #4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f503 633f 	add.w	r3, r3, #3056	; 0xbf0
 800794c:	ed93 6b00 	vldr	d6, [r3]
 8007950:	1d3b      	adds	r3, r7, #4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8007958:	ed93 7b00 	vldr	d7, [r3]
 800795c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007960:	1d3b      	adds	r3, r7, #4
 8007962:	e007      	b.n	8007974 <_ZN27positionEstimatorModelClass4stepEv+0xbfc>
 8007964:	f3af 8000 	nop.w
 8007968:	a2529d39 	.word	0xa2529d39
 800796c:	3f91df46 	.word	0x3f91df46
 8007970:	24000258 	.word	0x24000258
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f603 4348 	addw	r3, r3, #3144	; 0xc48
 800797a:	ed83 7b00 	vstr	d7, [r3]

  // Trigonometry: '<S40>/Trigonometric Function2' incorporates:
  //   Constant: '<S40>/Constant3'

  rtDW.TrigonometricFunction2 = rt_atan2d_snf(rtP.Constant3_Value, rtDW.Product4);
 800797e:	4bc4      	ldr	r3, [pc, #784]	; (8007c90 <_ZN27positionEstimatorModelClass4stepEv+0xf18>)
 8007980:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8007984:	1d3b      	adds	r3, r7, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f603 4348 	addw	r3, r3, #3144	; 0xc48
 800798c:	ed93 6b00 	vldr	d6, [r3]
 8007990:	eeb0 1b46 	vmov.f64	d1, d6
 8007994:	eeb0 0b47 	vmov.f64	d0, d7
 8007998:	f7fe fb1e 	bl	8005fd8 <_Z13rt_atan2d_snfdd>
 800799c:	eeb0 7b40 	vmov.f64	d7, d0
 80079a0:	1d3b      	adds	r3, r7, #4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 80079a8:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S25>/dEast'
  rtDW.dEast = 1.0 / rtDW.TrigonometricFunction2 * rtDW.UnitConversion[1];
 80079ac:	1d3b      	adds	r3, r7, #4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 80079b4:	ed93 7b00 	vldr	d7, [r3]
 80079b8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80079bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80079c0:	1d3b      	adds	r3, r7, #4
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 80079c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80079cc:	1d3b      	adds	r3, r7, #4
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 80079d4:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S25>/y*sin'
  rtDW.ysin = rtDW.dEast * rtDW.SinCos_o1;
 80079d8:	1d3b      	adds	r3, r7, #4
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 80079e0:	ed93 6b00 	vldr	d6, [r3]
 80079e4:	1d3b      	adds	r3, r7, #4
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 80079ec:	ed93 7b00 	vldr	d7, [r3]
 80079f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80079f4:	1d3b      	adds	r3, r7, #4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 80079fc:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S25>/Sum2'
  rtDW.Px = rtDW.xcos + rtDW.ysin;
 8007a00:	1d3b      	adds	r3, r7, #4
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8007a08:	ed93 6b00 	vldr	d6, [r3]
 8007a0c:	1d3b      	adds	r3, r7, #4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8007a14:	ed93 7b00 	vldr	d7, [r3]
 8007a18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007a1c:	1d3b      	adds	r3, r7, #4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 8007a24:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S25>/x*sin'
  rtDW.xsin = rtDW.dNorth * rtDW.SinCos_o1;
 8007a28:	1d3b      	adds	r3, r7, #4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 8007a30:	ed93 6b00 	vldr	d6, [r3]
 8007a34:	1d3b      	adds	r3, r7, #4
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8007a3c:	ed93 7b00 	vldr	d7, [r3]
 8007a40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007a44:	1d3b      	adds	r3, r7, #4
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 8007a4c:	ed83 7b00 	vstr	d7, [r3]

  // Product: '<S25>/y*cos'
  rtDW.ycos = rtDW.dEast * rtDW.SinCos_o2;
 8007a50:	1d3b      	adds	r3, r7, #4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f603 4358 	addw	r3, r3, #3160	; 0xc58
 8007a58:	ed93 6b00 	vldr	d6, [r3]
 8007a5c:	1d3b      	adds	r3, r7, #4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8007a64:	ed93 7b00 	vldr	d7, [r3]
 8007a68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007a6c:	1d3b      	adds	r3, r7, #4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8007a74:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S25>/Sum3'
  rtDW.Py = rtDW.ycos - rtDW.xsin;
 8007a78:	1d3b      	adds	r3, r7, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8007a80:	ed93 6b00 	vldr	d6, [r3]
 8007a84:	1d3b      	adds	r3, r7, #4
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 8007a8c:	ed93 7b00 	vldr	d7, [r3]
 8007a90:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007a94:	1d3b      	adds	r3, r7, #4
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8007a9c:	ed83 7b00 	vstr	d7, [r3]

  // DataTypeConversion: '<S2>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1 = (rtU.AhrsFlag != 0.0);
 8007aa0:	1d3b      	adds	r3, r7, #4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f503 6357 	add.w	r3, r3, #3440	; 0xd70
 8007aa8:	ed93 7b00 	vldr	d7, [r3]
 8007aac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab4:	bf14      	ite	ne
 8007ab6:	2301      	movne	r3, #1
 8007ab8:	2300      	moveq	r3, #0
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	1d3b      	adds	r3, r7, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f883 2d5e 	strb.w	r2, [r3, #3422]	; 0xd5e

  // Outputs for Enabled SubSystem: '<S2>/Correct1' incorporates:
  //   EnablePort: '<S15>/Enable'

  if (rtDW.DataTypeConversion_Enable1) {
 8007ac6:	1d3b      	adds	r3, r7, #4
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f893 3d5e 	ldrb.w	r3, [r3, #3422]	; 0xd5e
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 85af 	beq.w	8008632 <_ZN27positionEstimatorModelClass4stepEv+0x18ba>
    // DataStoreRead: '<S15>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007ada:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	dc18      	bgt.n	8007b14 <_ZN27positionEstimatorModelClass4stepEv+0xd9c>
      rtDW.DataStoreReadX_p[i] = rtDW.x_p[i];
 8007ae2:	1d3b      	adds	r3, r7, #4
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007aea:	f203 135f 	addw	r3, r3, #351	; 0x15f
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4413      	add	r3, r2
 8007af2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007af6:	1d3a      	adds	r2, r7, #4
 8007af8:	6811      	ldr	r1, [r2, #0]
 8007afa:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007afe:	32c4      	adds	r2, #196	; 0xc4
 8007b00:	00d2      	lsls	r2, r2, #3
 8007b02:	440a      	add	r2, r1
 8007b04:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8007b08:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007b12:	e7e2      	b.n	8007ada <_ZN27positionEstimatorModelClass4stepEv+0xd62>
    // SignalConversion generated from: '<S19>/ SFunction ' incorporates:
    //   Inport: '<Root>/ax'
    //   Inport: '<Root>/ay'
    //   MATLAB Function: '<S15>/Correct'

    rtDW.TmpSignalConversionAtSFunctio_i[0] = rtU.ax;
 8007b14:	1d3b      	adds	r3, r7, #4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f603 5378 	addw	r3, r3, #3448	; 0xd78
 8007b1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b20:	1d3a      	adds	r2, r7, #4
 8007b22:	6812      	ldr	r2, [r2, #0]
 8007b24:	f502 62ca 	add.w	r2, r2, #1616	; 0x650
 8007b28:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.TmpSignalConversionAtSFunctio_i[1] = rtU.ay;
 8007b2c:	1d3b      	adds	r3, r7, #4
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8007b34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b38:	1d3a      	adds	r2, r7, #4
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	f502 62cb 	add.w	r2, r2, #1624	; 0x658
 8007b40:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S15>/Correct' incorporates:
    //   Constant: '<S2>/BlockOrdering'

    rtDW.blockOrdering_f = rtP.BlockOrdering_Value;
 8007b44:	4b52      	ldr	r3, [pc, #328]	; (8007c90 <_ZN27positionEstimatorModelClass4stepEv+0xf18>)
 8007b46:	f893 23fc 	ldrb.w	r2, [r3, #1020]	; 0x3fc
 8007b4a:	1d3b      	adds	r3, r7, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f883 2d65 	strb.w	r2, [r3, #3429]	; 0xd65
    blockOrdering = rtDW.blockOrdering_f;
 8007b52:	1d3b      	adds	r3, r7, #4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f893 3d65 	ldrb.w	r3, [r3, #3429]	; 0xd65
 8007b5a:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_f = blockOrdering;
 8007b5e:	1d3b      	adds	r3, r7, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8007b66:	f883 2d65 	strb.w	r2, [r3, #3429]	; 0xd65
    for (i = 0; i < 36; i++) {
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007b70:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007b74:	2b23      	cmp	r3, #35	; 0x23
 8007b76:	dc32      	bgt.n	8007bde <_ZN27positionEstimatorModelClass4stepEv+0xe66>
      // DataStoreRead: '<S15>/Data Store ReadP'
      rtDW.P_k[i] = rtDW.P_n_c[i];
 8007b78:	1d3b      	adds	r3, r7, #4
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007b80:	f203 133b 	addw	r3, r3, #315	; 0x13b
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	4413      	add	r3, r2
 8007b88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b8c:	1d3a      	adds	r2, r7, #4
 8007b8e:	6811      	ldr	r1, [r2, #0]
 8007b90:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007b94:	32d2      	adds	r2, #210	; 0xd2
 8007b96:	00d2      	lsls	r2, r2, #3
 8007b98:	440a      	add	r2, r1
 8007b9a:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S15>/Correct'
      u = rtDW.P_k[i];
 8007b9e:	1d3b      	adds	r3, r7, #4
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007ba6:	33d2      	adds	r3, #210	; 0xd2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4413      	add	r3, r2
 8007bac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bb0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007bb4:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_k[i] = u;
 8007bb8:	1d3b      	adds	r3, r7, #4
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007bc0:	33d2      	adds	r3, #210	; 0xd2
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	441a      	add	r2, r3
 8007bc6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007bca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bce:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 8007bd2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007bdc:	e7c8      	b.n	8007b70 <_ZN27positionEstimatorModelClass4stepEv+0xdf8>
    }

    // MATLAB Function: '<S15>/Correct' incorporates:
    //   Constant: '<S2>/R1'

    for (r1 = 0; r1 < 6; r1++) {
 8007bde:	2300      	movs	r3, #0
 8007be0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007be4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	f300 80b1 	bgt.w	8007d50 <_ZN27positionEstimatorModelClass4stepEv+0xfd8>
      for (i = 0; i < 6; i++) {
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007bf4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007bf8:	2b05      	cmp	r3, #5
 8007bfa:	dc16      	bgt.n	8007c2a <_ZN27positionEstimatorModelClass4stepEv+0xeb2>
        imvec[i] = rtDW.DataStoreReadX_p[i];
 8007bfc:	1d3b      	adds	r3, r7, #4
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007c04:	33c4      	adds	r3, #196	; 0xc4
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	4413      	add	r3, r2
 8007c0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c0e:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8007c12:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007c16:	00d2      	lsls	r2, r2, #3
 8007c18:	440a      	add	r2, r1
 8007c1a:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 6; i++) {
 8007c1e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007c22:	3301      	adds	r3, #1
 8007c24:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007c28:	e7e4      	b.n	8007bf4 <_ZN27positionEstimatorModelClass4stepEv+0xe7c>
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_p[r1]);
 8007c2a:	1d3b      	adds	r3, r7, #4
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007c32:	33c4      	adds	r3, #196	; 0xc4
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	4413      	add	r3, r2
 8007c38:	ed93 7b00 	vldr	d7, [r3]
 8007c3c:	eeb0 0b47 	vmov.f64	d0, d7
 8007c40:	f7fd fc13 	bl	800546a <_ZSt3absd>
 8007c44:	eeb0 6b40 	vmov.f64	d6, d0
 8007c48:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007c88 <_ZN27positionEstimatorModelClass4stepEv+0xf10>
 8007c4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007c50:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007c54:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8007c58:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007c5c:	ed93 7b00 	vldr	d7, [r3]
 8007c60:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8007c88 <_ZN27positionEstimatorModelClass4stepEv+0xf10>
 8007c64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6c:	d408      	bmi.n	8007c80 <_ZN27positionEstimatorModelClass4stepEv+0xf08>
 8007c6e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007c72:	ed93 0b00 	vldr	d0, [r3]
 8007c76:	f7fd fcab 	bl	80055d0 <rtIsNaN>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d009      	beq.n	8007c94 <_ZN27positionEstimatorModelClass4stepEv+0xf1c>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e008      	b.n	8007c96 <_ZN27positionEstimatorModelClass4stepEv+0xf1e>
 8007c84:	f3af 8000 	nop.w
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	3e500000 	.word	0x3e500000
 8007c90:	24000258 	.word	0x24000258
 8007c94:	2300      	movs	r3, #0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d006      	beq.n	8007ca8 <_ZN27positionEstimatorModelClass4stepEv+0xf30>
        epsilon = 1.4901161193847656E-8;
 8007c9a:	f04f 0300 	mov.w	r3, #0
 8007c9e:	4ce5      	ldr	r4, [pc, #916]	; (8008034 <_ZN27positionEstimatorModelClass4stepEv+0x12bc>)
 8007ca0:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007ca4:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec[r1] = rtDW.DataStoreReadX_p[r1] + epsilon;
 8007ca8:	1d3b      	adds	r3, r7, #4
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007cb0:	33c4      	adds	r3, #196	; 0xc4
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	4413      	add	r3, r2
 8007cb6:	ed93 6b00 	vldr	d6, [r3]
 8007cba:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8007cbe:	ed93 7b00 	vldr	d7, [r3]
 8007cc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007cc6:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8007cca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	ed83 7b00 	vstr	d7, [r3]
      dHdx[r1 << 1] = (imvec[4] - rtDW.DataStoreReadX_p[4]) / epsilon;
 8007cd6:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007cda:	ed93 6b08 	vldr	d6, [r3, #32]
 8007cde:	1d3b      	adds	r3, r7, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8007ce6:	ed93 7b00 	vldr	d7, [r3]
 8007cea:	ee36 5b47 	vsub.f64	d5, d6, d7
 8007cee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007cf8:	ed92 6b00 	vldr	d6, [r2]
 8007cfc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007d00:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	4413      	add	r3, r2
 8007d08:	ed83 7b00 	vstr	d7, [r3]
      dHdx[(r1 << 1) + 1] = (imvec[5] - rtDW.DataStoreReadX_p[5]) / epsilon;
 8007d0c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007d10:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8007d14:	1d3b      	adds	r3, r7, #4
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8007d1c:	ed93 7b00 	vldr	d7, [r3]
 8007d20:	ee36 5b47 	vsub.f64	d5, d6, d7
 8007d24:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8007d30:	ed92 6b00 	vldr	d6, [r2]
 8007d34:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007d38:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	4413      	add	r3, r2
 8007d40:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 6; r1++) {
 8007d44:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d48:	3301      	adds	r3, #1
 8007d4a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007d4e:	e749      	b.n	8007be4 <_ZN27positionEstimatorModelClass4stepEv+0xe6c>
    }

    for (r1 = 0; r1 < 6; r1++) {
 8007d50:	2300      	movs	r3, #0
 8007d52:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007d56:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	f300 808a 	bgt.w	8007e74 <_ZN27positionEstimatorModelClass4stepEv+0x10fc>
      for (i = 0; i < 2; i++) {
 8007d60:	2300      	movs	r3, #0
 8007d62:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007d66:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	dc7c      	bgt.n	8007e68 <_ZN27positionEstimatorModelClass4stepEv+0x10f0>
        Pxy[r1 + 6 * i] = 0.0;
 8007d6e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007d72:	4613      	mov	r3, r2
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	4413      	add	r3, r2
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007d80:	4413      	add	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007d88:	4413      	add	r3, r2
 8007d8a:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	f04f 0400 	mov.w	r4, #0
 8007d96:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007da0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007da4:	2b05      	cmp	r3, #5
 8007da6:	dc59      	bgt.n	8007e5c <_ZN27positionEstimatorModelClass4stepEv+0x10e4>
          u = Pxy[6 * i + r1];
 8007da8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007dac:	4613      	mov	r3, r2
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	4413      	add	r3, r2
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	461a      	mov	r2, r3
 8007db6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007dba:	4413      	add	r3, r2
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007dc2:	4413      	add	r3, r2
 8007dc4:	3b90      	subs	r3, #144	; 0x90
 8007dc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dca:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007dce:	e9c2 3400 	strd	r3, r4, [r2]
          u += rtDW.P_k[6 * k + r1] * dHdx[(k << 1) + i];
 8007dd2:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	4413      	add	r3, r2
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	461a      	mov	r2, r3
 8007de0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007de4:	4413      	add	r3, r2
 8007de6:	1d3a      	adds	r2, r7, #4
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	33d2      	adds	r3, #210	; 0xd2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4413      	add	r3, r2
 8007df0:	ed93 6b00 	vldr	d6, [r3]
 8007df4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007df8:	005a      	lsls	r2, r3, #1
 8007dfa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007dfe:	4413      	add	r3, r2
 8007e00:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007e04:	00db      	lsls	r3, r3, #3
 8007e06:	4413      	add	r3, r2
 8007e08:	ed93 7b00 	vldr	d7, [r3]
 8007e0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007e10:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e14:	ed93 6b00 	vldr	d6, [r3]
 8007e18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007e1c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e20:	ed83 7b00 	vstr	d7, [r3]
          Pxy[r1 + 6 * i] = u;
 8007e24:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007e28:	4613      	mov	r3, r2
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	4413      	add	r3, r2
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	461a      	mov	r2, r3
 8007e32:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007e36:	4413      	add	r3, r2
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007e3e:	4413      	add	r3, r2
 8007e40:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
 8007e44:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007e48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e4c:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007e50:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007e54:	3301      	adds	r3, #1
 8007e56:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007e5a:	e7a1      	b.n	8007da0 <_ZN27positionEstimatorModelClass4stepEv+0x1028>
      for (i = 0; i < 2; i++) {
 8007e5c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007e60:	3301      	adds	r3, #1
 8007e62:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007e66:	e77e      	b.n	8007d66 <_ZN27positionEstimatorModelClass4stepEv+0xfee>
    for (r1 = 0; r1 < 6; r1++) {
 8007e68:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007e72:	e770      	b.n	8007d56 <_ZN27positionEstimatorModelClass4stepEv+0xfde>
        }
      }
    }

    for (r1 = 0; r1 < 2; r1++) {
 8007e74:	2300      	movs	r3, #0
 8007e76:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8007e7a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	f300 80e2 	bgt.w	8008048 <_ZN27positionEstimatorModelClass4stepEv+0x12d0>
      for (i = 0; i < 6; i++) {
 8007e84:	2300      	movs	r3, #0
 8007e86:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007e8a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007e8e:	2b05      	cmp	r3, #5
 8007e90:	dc6b      	bgt.n	8007f6a <_ZN27positionEstimatorModelClass4stepEv+0x11f2>
        gain[r1 + (i << 1)] = 0.0;
 8007e92:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007e96:	005a      	lsls	r2, r3, #1
 8007e98:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	441a      	add	r2, r3
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	f04f 0400 	mov.w	r4, #0
 8007eae:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007eb8:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007ebc:	2b05      	cmp	r3, #5
 8007ebe:	dc4e      	bgt.n	8007f5e <_ZN27positionEstimatorModelClass4stepEv+0x11e6>
          u = gain[(i << 1) + r1];
 8007ec0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007ec4:	005a      	lsls	r2, r3, #1
 8007ec6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007eca:	4413      	add	r3, r2
 8007ecc:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	4413      	add	r3, r2
 8007ed4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ed8:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007edc:	e9c2 3400 	strd	r3, r4, [r2]
          u += dHdx[(k << 1) + r1] * rtDW.P_k[6 * i + k];
 8007ee0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007ee4:	005a      	lsls	r2, r3, #1
 8007ee6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007eea:	4413      	add	r3, r2
 8007eec:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	4413      	add	r3, r2
 8007ef4:	ed93 6b00 	vldr	d6, [r3]
 8007ef8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8007efc:	4613      	mov	r3, r2
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	4413      	add	r3, r2
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	461a      	mov	r2, r3
 8007f06:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007f0a:	4413      	add	r3, r2
 8007f0c:	1d3a      	adds	r2, r7, #4
 8007f0e:	6812      	ldr	r2, [r2, #0]
 8007f10:	33d2      	adds	r3, #210	; 0xd2
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	4413      	add	r3, r2
 8007f16:	ed93 7b00 	vldr	d7, [r3]
 8007f1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007f1e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007f22:	ed93 6b00 	vldr	d6, [r3]
 8007f26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007f2a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007f2e:	ed83 7b00 	vstr	d7, [r3]
          gain[r1 + (i << 1)] = u;
 8007f32:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007f36:	005a      	lsls	r2, r3, #1
 8007f38:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	441a      	add	r2, r3
 8007f46:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007f4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f4e:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007f52:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007f56:	3301      	adds	r3, #1
 8007f58:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007f5c:	e7ac      	b.n	8007eb8 <_ZN27positionEstimatorModelClass4stepEv+0x1140>
      for (i = 0; i < 6; i++) {
 8007f5e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007f62:	3301      	adds	r3, #1
 8007f64:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007f68:	e78f      	b.n	8007e8a <_ZN27positionEstimatorModelClass4stepEv+0x1112>
        }
      }

      for (i = 0; i < 2; i++) {
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8007f70:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	dc61      	bgt.n	800803c <_ZN27positionEstimatorModelClass4stepEv+0x12c4>
        u = 0.0;
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	f04f 0400 	mov.w	r4, #0
 8007f80:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8007f84:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007f8e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	dc29      	bgt.n	8007fea <_ZN27positionEstimatorModelClass4stepEv+0x1272>
          u += gain[(k << 1) + r1] * dHdx[(k << 1) + i];
 8007f96:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007f9a:	005a      	lsls	r2, r3, #1
 8007f9c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	ed93 6b00 	vldr	d6, [r3]
 8007fae:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007fb2:	005a      	lsls	r2, r3, #1
 8007fb4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007fb8:	4413      	add	r3, r2
 8007fba:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	4413      	add	r3, r2
 8007fc2:	ed93 7b00 	vldr	d7, [r3]
 8007fc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007fca:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007fce:	ed93 6b00 	vldr	d6, [r3]
 8007fd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007fd6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8007fda:	ed83 7b00 	vstr	d7, [r3]
        for (k = 0; k < 6; k++) {
 8007fde:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8007fe8:	e7d1      	b.n	8007f8e <_ZN27positionEstimatorModelClass4stepEv+0x1216>
        }

        Pyy[r1 + (i << 1)] = rtP.R1_Value[(i << 1) + r1] + u;
 8007fea:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8007fee:	005a      	lsls	r2, r3, #1
 8007ff0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8007ff4:	4413      	add	r3, r2
 8007ff6:	4a10      	ldr	r2, [pc, #64]	; (8008038 <_ZN27positionEstimatorModelClass4stepEv+0x12c0>)
 8007ff8:	3336      	adds	r3, #54	; 0x36
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	ed93 6b00 	vldr	d6, [r3]
 8008002:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008006:	005a      	lsls	r2, r3, #1
 8008008:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800800c:	4413      	add	r3, r2
 800800e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008012:	ed92 7b00 	vldr	d7, [r2]
 8008016:	ee36 7b07 	vadd.f64	d7, d6, d7
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008020:	4413      	add	r3, r2
 8008022:	3bb0      	subs	r3, #176	; 0xb0
 8008024:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 2; i++) {
 8008028:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800802c:	3301      	adds	r3, #1
 800802e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008032:	e79d      	b.n	8007f70 <_ZN27positionEstimatorModelClass4stepEv+0x11f8>
 8008034:	3e500000 	.word	0x3e500000
 8008038:	24000258 	.word	0x24000258
    for (r1 = 0; r1 < 2; r1++) {
 800803c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008040:	3301      	adds	r3, #1
 8008042:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008046:	e718      	b.n	8007e7a <_ZN27positionEstimatorModelClass4stepEv+0x1102>
      }
    }

    if (std::abs(Pyy[1]) > std::abs(Pyy[0])) {
 8008048:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800804c:	ed93 7b00 	vldr	d7, [r3]
 8008050:	eeb0 0b47 	vmov.f64	d0, d7
 8008054:	f7fd fa09 	bl	800546a <_ZSt3absd>
 8008058:	eeb0 8b40 	vmov.f64	d8, d0
 800805c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8008060:	ed93 7b00 	vldr	d7, [r3]
 8008064:	eeb0 0b47 	vmov.f64	d0, d7
 8008068:	f7fd f9ff 	bl	800546a <_ZSt3absd>
 800806c:	eeb0 7b40 	vmov.f64	d7, d0
 8008070:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008078:	bfcc      	ite	gt
 800807a:	2301      	movgt	r3, #1
 800807c:	2300      	movle	r3, #0
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d006      	beq.n	8008092 <_ZN27positionEstimatorModelClass4stepEv+0x131a>
      r1 = 1;
 8008084:	2301      	movs	r3, #1
 8008086:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008090:	e005      	b.n	800809e <_ZN27positionEstimatorModelClass4stepEv+0x1326>
    } else {
      r1 = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
      i = 1;
 8008098:	2301      	movs	r3, #1
 800809a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    }

    epsilon = Pyy[i] / Pyy[r1];
 800809e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80080a8:	4413      	add	r3, r2
 80080aa:	3bb0      	subs	r3, #176	; 0xb0
 80080ac:	ed93 5b00 	vldr	d5, [r3]
 80080b0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80080ba:	4413      	add	r3, r2
 80080bc:	3bb0      	subs	r3, #176	; 0xb0
 80080be:	ed93 6b00 	vldr	d6, [r3]
 80080c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80080c6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80080ca:	ed83 7b00 	vstr	d7, [r3]
    a22 = Pyy[i + 2] - Pyy[r1 + 2] * epsilon;
 80080ce:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80080d2:	3302      	adds	r3, #2
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80080da:	4413      	add	r3, r2
 80080dc:	3bb0      	subs	r3, #176	; 0xb0
 80080de:	ed93 6b00 	vldr	d6, [r3]
 80080e2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80080e6:	3302      	adds	r3, #2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80080ee:	4413      	add	r3, r2
 80080f0:	3bb0      	subs	r3, #176	; 0xb0
 80080f2:	ed93 5b00 	vldr	d5, [r3]
 80080f6:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80080fa:	ed93 7b00 	vldr	d7, [r3]
 80080fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008102:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008106:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800810a:	ed83 7b00 	vstr	d7, [r3]
    for (k = 0; k < 6; k++) {
 800810e:	2300      	movs	r3, #0
 8008110:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008114:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008118:	2b05      	cmp	r3, #5
 800811a:	f300 80a0 	bgt.w	800825e <_ZN27positionEstimatorModelClass4stepEv+0x14e6>
      gain[k + 6 * r1] = Pxy[k] / Pyy[r1];
 800811e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008128:	4413      	add	r3, r2
 800812a:	3b90      	subs	r3, #144	; 0x90
 800812c:	ed93 5b00 	vldr	d5, [r3]
 8008130:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 800813a:	4413      	add	r3, r2
 800813c:	3bb0      	subs	r3, #176	; 0xb0
 800813e:	ed93 6b00 	vldr	d6, [r3]
 8008142:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008146:	4613      	mov	r3, r2
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	4413      	add	r3, r2
 800814c:	005b      	lsls	r3, r3, #1
 800814e:	461a      	mov	r2, r3
 8008150:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008154:	4413      	add	r3, r2
 8008156:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800815a:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4413      	add	r3, r2
 8008162:	ed83 7b00 	vstr	d7, [r3]
      gain[k + 6 * i] = (Pxy[k + 6] - gain[6 * r1 + k] * Pyy[r1 + 2]) / a22;
 8008166:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800816a:	3306      	adds	r3, #6
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008172:	4413      	add	r3, r2
 8008174:	3b90      	subs	r3, #144	; 0x90
 8008176:	ed93 6b00 	vldr	d6, [r3]
 800817a:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800817e:	4613      	mov	r3, r2
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	4413      	add	r3, r2
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	461a      	mov	r2, r3
 8008188:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800818c:	4413      	add	r3, r2
 800818e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	4413      	add	r3, r2
 8008196:	ed93 5b00 	vldr	d5, [r3]
 800819a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800819e:	3302      	adds	r3, #2
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80081a6:	4413      	add	r3, r2
 80081a8:	3bb0      	subs	r3, #176	; 0xb0
 80081aa:	ed93 7b00 	vldr	d7, [r3]
 80081ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80081b2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80081b6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80081ba:	4613      	mov	r3, r2
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	4413      	add	r3, r2
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	461a      	mov	r2, r3
 80081c4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80081c8:	4413      	add	r3, r2
 80081ca:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 80081ce:	ed92 6b00 	vldr	d6, [r2]
 80081d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80081d6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	4413      	add	r3, r2
 80081de:	ed83 7b00 	vstr	d7, [r3]
      gain[k + 6 * r1] -= gain[6 * i + k] * epsilon;
 80081e2:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80081e6:	4613      	mov	r3, r2
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	4413      	add	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	461a      	mov	r2, r3
 80081f0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80081f4:	4413      	add	r3, r2
 80081f6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	4413      	add	r3, r2
 80081fe:	ed93 6b00 	vldr	d6, [r3]
 8008202:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008206:	4613      	mov	r3, r2
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	4413      	add	r3, r2
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	461a      	mov	r2, r3
 8008210:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008214:	4413      	add	r3, r2
 8008216:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4413      	add	r3, r2
 800821e:	ed93 5b00 	vldr	d5, [r3]
 8008222:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008226:	ed93 7b00 	vldr	d7, [r3]
 800822a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800822e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8008232:	4613      	mov	r3, r2
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	4413      	add	r3, r2
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	461a      	mov	r2, r3
 800823c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008240:	4413      	add	r3, r2
 8008242:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008246:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	4413      	add	r3, r2
 800824e:	ed83 7b00 	vstr	d7, [r3]
    for (k = 0; k < 6; k++) {
 8008252:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008256:	3301      	adds	r3, #1
 8008258:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800825c:	e75a      	b.n	8008114 <_ZN27positionEstimatorModelClass4stepEv+0x139c>
    }

    a22 = rtDW.TmpSignalConversionAtSFunctio_i[0] - rtDW.DataStoreReadX_p[4];
 800825e:	1d3b      	adds	r3, r7, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8008266:	ed93 6b00 	vldr	d6, [r3]
 800826a:	1d3b      	adds	r3, r7, #4
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8008272:	ed93 7b00 	vldr	d7, [r3]
 8008276:	ee36 7b47 	vsub.f64	d7, d6, d7
 800827a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800827e:	ed83 7b00 	vstr	d7, [r3]
    epsilon = rtDW.TmpSignalConversionAtSFunctio_i[1] - rtDW.DataStoreReadX_p[5];
 8008282:	1d3b      	adds	r3, r7, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 800828a:	ed93 6b00 	vldr	d6, [r3]
 800828e:	1d3b      	adds	r3, r7, #4
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8008296:	ed93 7b00 	vldr	d7, [r3]
 800829a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800829e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80082a2:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 6; r1++) {
 80082a6:	2300      	movs	r3, #0
 80082a8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80082ac:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80082b0:	2b05      	cmp	r3, #5
 80082b2:	f300 816d 	bgt.w	8008590 <_ZN27positionEstimatorModelClass4stepEv+0x1818>
      u = gain[r1] * a22;
 80082b6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80082ba:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	4413      	add	r3, r2
 80082c2:	ed93 7b00 	vldr	d7, [r3]
 80082c6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80082ca:	ed93 6b00 	vldr	d6, [r3]
 80082ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80082d2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80082d6:	ed83 7b00 	vstr	d7, [r3]
      u += gain[r1 + 6] * epsilon;
 80082da:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80082de:	3306      	adds	r3, #6
 80082e0:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	4413      	add	r3, r2
 80082e8:	ed93 6b00 	vldr	d6, [r3]
 80082ec:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80082f0:	ed93 7b00 	vldr	d7, [r3]
 80082f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80082f8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80082fc:	ed93 6b00 	vldr	d6, [r3]
 8008300:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008304:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008308:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_n[r1] = rtDW.DataStoreReadX_p[r1] + u;
 800830c:	1d3b      	adds	r3, r7, #4
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008314:	33c4      	adds	r3, #196	; 0xc4
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	4413      	add	r3, r2
 800831a:	ed93 6b00 	vldr	d6, [r3]
 800831e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008322:	ed93 7b00 	vldr	d7, [r3]
 8008326:	ee36 7b07 	vadd.f64	d7, d6, d7
 800832a:	1d3b      	adds	r3, r7, #4
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008332:	33cc      	adds	r3, #204	; 0xcc
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	4413      	add	r3, r2
 8008338:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 6; i++) {
 800833c:	2300      	movs	r3, #0
 800833e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008342:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008346:	2b05      	cmp	r3, #5
 8008348:	f300 80a6 	bgt.w	8008498 <_ZN27positionEstimatorModelClass4stepEv+0x1720>
        gain_0[r1 + 6 * i] = 0.0;
 800834c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008350:	4613      	mov	r3, r2
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	4413      	add	r3, r2
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	461a      	mov	r2, r3
 800835a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800835e:	4413      	add	r3, r2
 8008360:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	441a      	add	r2, r3
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	f04f 0400 	mov.w	r4, #0
 8008370:	e9c2 3400 	strd	r3, r4, [r2]
        u = gain_0[6 * i + r1];
 8008374:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008378:	4613      	mov	r3, r2
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	4413      	add	r3, r2
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	461a      	mov	r2, r3
 8008382:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008386:	4413      	add	r3, r2
 8008388:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	4413      	add	r3, r2
 8008390:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008394:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008398:	e9c2 3400 	strd	r3, r4, [r2]
        u += dHdx[i << 1] * gain[r1];
 800839c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	ed93 6b00 	vldr	d6, [r3]
 80083ae:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80083b2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	4413      	add	r3, r2
 80083ba:	ed93 7b00 	vldr	d7, [r3]
 80083be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80083c2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80083c6:	ed93 6b00 	vldr	d6, [r3]
 80083ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80083ce:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80083d2:	ed83 7b00 	vstr	d7, [r3]
        gain_0[r1 + 6 * i] = u;
 80083d6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80083da:	4613      	mov	r3, r2
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4413      	add	r3, r2
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	461a      	mov	r2, r3
 80083e4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80083e8:	4413      	add	r3, r2
 80083ea:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	441a      	add	r2, r3
 80083f2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80083f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083fa:	e9c2 3400 	strd	r3, r4, [r2]
        u = gain_0[6 * i + r1];
 80083fe:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008402:	4613      	mov	r3, r2
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	4413      	add	r3, r2
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	461a      	mov	r2, r3
 800840c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008410:	4413      	add	r3, r2
 8008412:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	4413      	add	r3, r2
 800841a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800841e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008422:	e9c2 3400 	strd	r3, r4, [r2]
        u += dHdx[(i << 1) + 1] * gain[r1 + 6];
 8008426:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	3301      	adds	r3, #1
 800842e:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	4413      	add	r3, r2
 8008436:	ed93 6b00 	vldr	d6, [r3]
 800843a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800843e:	3306      	adds	r3, #6
 8008440:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	4413      	add	r3, r2
 8008448:	ed93 7b00 	vldr	d7, [r3]
 800844c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008450:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008454:	ed93 6b00 	vldr	d6, [r3]
 8008458:	ee36 7b07 	vadd.f64	d7, d6, d7
 800845c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008460:	ed83 7b00 	vstr	d7, [r3]
        gain_0[r1 + 6 * i] = u;
 8008464:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008468:	4613      	mov	r3, r2
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	4413      	add	r3, r2
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	461a      	mov	r2, r3
 8008472:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008476:	4413      	add	r3, r2
 8008478:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	441a      	add	r2, r3
 8008480:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008484:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008488:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 6; i++) {
 800848c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008490:	3301      	adds	r3, #1
 8008492:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008496:	e754      	b.n	8008342 <_ZN27positionEstimatorModelClass4stepEv+0x15ca>
      }

      for (i = 0; i < 6; i++) {
 8008498:	2300      	movs	r3, #0
 800849a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800849e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	dc6e      	bgt.n	8008584 <_ZN27positionEstimatorModelClass4stepEv+0x180c>
        u = 0.0;
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	f04f 0400 	mov.w	r4, #0
 80084ae:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80084b2:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 80084b6:	2300      	movs	r3, #0
 80084b8:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 80084bc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80084c0:	2b05      	cmp	r3, #5
 80084c2:	dc32      	bgt.n	800852a <_ZN27positionEstimatorModelClass4stepEv+0x17b2>
          u += gain_0[6 * k + r1] * rtDW.P_k[6 * i + k];
 80084c4:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 80084c8:	4613      	mov	r3, r2
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	4413      	add	r3, r2
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	461a      	mov	r2, r3
 80084d2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80084d6:	4413      	add	r3, r2
 80084d8:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	4413      	add	r3, r2
 80084e0:	ed93 6b00 	vldr	d6, [r3]
 80084e4:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80084e8:	4613      	mov	r3, r2
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	4413      	add	r3, r2
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	461a      	mov	r2, r3
 80084f2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 80084f6:	4413      	add	r3, r2
 80084f8:	1d3a      	adds	r2, r7, #4
 80084fa:	6812      	ldr	r2, [r2, #0]
 80084fc:	33d2      	adds	r3, #210	; 0xd2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4413      	add	r3, r2
 8008502:	ed93 7b00 	vldr	d7, [r3]
 8008506:	ee26 7b07 	vmul.f64	d7, d6, d7
 800850a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800850e:	ed93 6b00 	vldr	d6, [r3]
 8008512:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008516:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800851a:	ed83 7b00 	vstr	d7, [r3]
        for (k = 0; k < 6; k++) {
 800851e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008522:	3301      	adds	r3, #1
 8008524:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008528:	e7c8      	b.n	80084bc <_ZN27positionEstimatorModelClass4stepEv+0x1744>
        }

        a_0[r1 + 6 * i] = rtDW.P_k[6 * i + r1] - u;
 800852a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	461a      	mov	r2, r3
 8008538:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800853c:	4413      	add	r3, r2
 800853e:	1d3a      	adds	r2, r7, #4
 8008540:	6812      	ldr	r2, [r2, #0]
 8008542:	33d2      	adds	r3, #210	; 0xd2
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	4413      	add	r3, r2
 8008548:	ed93 6b00 	vldr	d6, [r3]
 800854c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008550:	4613      	mov	r3, r2
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	4413      	add	r3, r2
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	461a      	mov	r2, r3
 800855a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800855e:	4413      	add	r3, r2
 8008560:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008564:	ed92 7b00 	vldr	d7, [r2]
 8008568:	ee36 7b47 	vsub.f64	d7, d6, d7
 800856c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	4413      	add	r3, r2
 8008574:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 6; i++) {
 8008578:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800857c:	3301      	adds	r3, #1
 800857e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008582:	e78c      	b.n	800849e <_ZN27positionEstimatorModelClass4stepEv+0x1726>
    for (r1 = 0; r1 < 6; r1++) {
 8008584:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008588:	3301      	adds	r3, #1
 800858a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800858e:	e68d      	b.n	80082ac <_ZN27positionEstimatorModelClass4stepEv+0x1534>
      }
    }

    for (i = 0; i < 36; i++) {
 8008590:	2300      	movs	r3, #0
 8008592:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008596:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800859a:	2b23      	cmp	r3, #35	; 0x23
 800859c:	dc29      	bgt.n	80085f2 <_ZN27positionEstimatorModelClass4stepEv+0x187a>
      rtDW.P_k[i] = a_0[i];
 800859e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80085a2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4413      	add	r3, r2
 80085aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085ae:	1d3a      	adds	r2, r7, #4
 80085b0:	6811      	ldr	r1, [r2, #0]
 80085b2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80085b6:	32d2      	adds	r2, #210	; 0xd2
 80085b8:	00d2      	lsls	r2, r2, #3
 80085ba:	440a      	add	r2, r1
 80085bc:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S15>/Data Store WriteP'
      rtDW.P_n_c[i] = rtDW.P_k[i];
 80085c0:	1d3b      	adds	r3, r7, #4
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80085c8:	33d2      	adds	r3, #210	; 0xd2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	4413      	add	r3, r2
 80085ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085d2:	1d3a      	adds	r2, r7, #4
 80085d4:	6811      	ldr	r1, [r2, #0]
 80085d6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80085da:	f202 123b 	addw	r2, r2, #315	; 0x13b
 80085de:	00d2      	lsls	r2, r2, #3
 80085e0:	440a      	add	r2, r1
 80085e2:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 80085e6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80085ea:	3301      	adds	r3, #1
 80085ec:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80085f0:	e7d1      	b.n	8008596 <_ZN27positionEstimatorModelClass4stepEv+0x181e>
    }

    // DataStoreWrite: '<S15>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 80085f2:	2300      	movs	r3, #0
 80085f4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80085f8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80085fc:	2b05      	cmp	r3, #5
 80085fe:	dc18      	bgt.n	8008632 <_ZN27positionEstimatorModelClass4stepEv+0x18ba>
      rtDW.x_p[i] = rtDW.xNew_n[i];
 8008600:	1d3b      	adds	r3, r7, #4
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008608:	33cc      	adds	r3, #204	; 0xcc
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	4413      	add	r3, r2
 800860e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008612:	1d3a      	adds	r2, r7, #4
 8008614:	6811      	ldr	r1, [r2, #0]
 8008616:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800861a:	f202 125f 	addw	r2, r2, #351	; 0x15f
 800861e:	00d2      	lsls	r2, r2, #3
 8008620:	440a      	add	r2, r1
 8008622:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8008626:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800862a:	3301      	adds	r3, #1
 800862c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008630:	e7e2      	b.n	80085f8 <_ZN27positionEstimatorModelClass4stepEv+0x1880>

  // Logic: '<Root>/Logical Operator' incorporates:
  //   Inport: '<Root>/GPS_switch'
  //   Inport: '<Root>/GpsFlag'

  rtDW.LogicalOperator = ((rtU.GPS_switch != 0.0) && (rtU.GpsFlag != 0.0));
 8008632:	1d3b      	adds	r3, r7, #4
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f603 53e8 	addw	r3, r3, #3560	; 0xde8
 800863a:	ed93 7b00 	vldr	d7, [r3]
 800863e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008646:	d00c      	beq.n	8008662 <_ZN27positionEstimatorModelClass4stepEv+0x18ea>
 8008648:	1d3b      	adds	r3, r7, #4
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f503 6359 	add.w	r3, r3, #3472	; 0xd90
 8008650:	ed93 7b00 	vldr	d7, [r3]
 8008654:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865c:	d001      	beq.n	8008662 <_ZN27positionEstimatorModelClass4stepEv+0x18ea>
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <_ZN27positionEstimatorModelClass4stepEv+0x18ec>
 8008662:	2300      	movs	r3, #0
 8008664:	461a      	mov	r2, r3
 8008666:	1d3b      	adds	r3, r7, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f883 2d5f 	strb.w	r2, [r3, #3423]	; 0xd5f

  // Outputs for Enabled SubSystem: '<S2>/Correct2' incorporates:
  //   EnablePort: '<S16>/Enable'

  if (rtDW.LogicalOperator) {
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f893 3d5f 	ldrb.w	r3, [r3, #3423]	; 0xd5f
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 83be 	beq.w	8008df8 <_ZN27positionEstimatorModelClass4stepEv+0x2080>
    // DataStoreRead: '<S16>/Data Store ReadX'
    for (i = 0; i < 6; i++) {
 800867c:	2300      	movs	r3, #0
 800867e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008682:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008686:	2b05      	cmp	r3, #5
 8008688:	dc18      	bgt.n	80086bc <_ZN27positionEstimatorModelClass4stepEv+0x1944>
      rtDW.DataStoreReadX_j[i] = rtDW.x_p[i];
 800868a:	1d3b      	adds	r3, r7, #4
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008692:	f203 135f 	addw	r3, r3, #351	; 0x15f
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	4413      	add	r3, r2
 800869a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800869e:	1d3a      	adds	r2, r7, #4
 80086a0:	6811      	ldr	r1, [r2, #0]
 80086a2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80086a6:	3290      	adds	r2, #144	; 0x90
 80086a8:	00d2      	lsls	r2, r2, #3
 80086aa:	440a      	add	r2, r1
 80086ac:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 80086b0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80086b4:	3301      	adds	r3, #1
 80086b6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80086ba:	e7e2      	b.n	8008682 <_ZN27positionEstimatorModelClass4stepEv+0x190a>
    // SignalConversion generated from: '<S20>/ SFunction ' incorporates:
    //   Inport: '<Root>/vx'
    //   Inport: '<Root>/vy'
    //   MATLAB Function: '<S16>/Correct'

    rtDW.TmpSignalConversionAtSFunctionI[0] = rtDW.Px;
 80086bc:	1d3b      	adds	r3, r7, #4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 80086c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086c8:	1d3a      	adds	r2, r7, #4
 80086ca:	6812      	ldr	r2, [r2, #0]
 80086cc:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80086d0:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.TmpSignalConversionAtSFunctionI[1] = rtDW.Py;
 80086d4:	1d3b      	adds	r3, r7, #4
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80086dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086e0:	1d3a      	adds	r2, r7, #4
 80086e2:	6812      	ldr	r2, [r2, #0]
 80086e4:	f502 6297 	add.w	r2, r2, #1208	; 0x4b8
 80086e8:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.TmpSignalConversionAtSFunctionI[2] = rtU.vx;
 80086ec:	1d3b      	adds	r3, r7, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f503 635b 	add.w	r3, r3, #3504	; 0xdb0
 80086f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086f8:	1d3a      	adds	r2, r7, #4
 80086fa:	6812      	ldr	r2, [r2, #0]
 80086fc:	f502 6298 	add.w	r2, r2, #1216	; 0x4c0
 8008700:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.TmpSignalConversionAtSFunctionI[3] = rtU.vy;
 8008704:	1d3b      	adds	r3, r7, #4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
 800870c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008710:	1d3a      	adds	r2, r7, #4
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	f502 6299 	add.w	r2, r2, #1224	; 0x4c8
 8008718:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S16>/Correct'
    rtDW.blockOrdering = rtDW.blockOrdering_f;
 800871c:	1d3b      	adds	r3, r7, #4
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f893 2d65 	ldrb.w	r2, [r3, #3429]	; 0xd65
 8008724:	1d3b      	adds	r3, r7, #4
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f883 2d64 	strb.w	r2, [r3, #3428]	; 0xd64
    blockOrdering = rtDW.blockOrdering;
 800872c:	1d3b      	adds	r3, r7, #4
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f893 3d64 	ldrb.w	r3, [r3, #3428]	; 0xd64
 8008734:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering = blockOrdering;
 8008738:	1d3b      	adds	r3, r7, #4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8008740:	f883 2d64 	strb.w	r2, [r3, #3428]	; 0xd64
    for (i = 0; i < 36; i++) {
 8008744:	2300      	movs	r3, #0
 8008746:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800874a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800874e:	2b23      	cmp	r3, #35	; 0x23
 8008750:	dc32      	bgt.n	80087b8 <_ZN27positionEstimatorModelClass4stepEv+0x1a40>
      // DataStoreRead: '<S16>/Data Store ReadP'
      rtDW.P_f[i] = rtDW.P_n_c[i];
 8008752:	1d3b      	adds	r3, r7, #4
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800875a:	f203 133b 	addw	r3, r3, #315	; 0x13b
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	4413      	add	r3, r2
 8008762:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008766:	1d3a      	adds	r2, r7, #4
 8008768:	6811      	ldr	r1, [r2, #0]
 800876a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800876e:	32a0      	adds	r2, #160	; 0xa0
 8008770:	00d2      	lsls	r2, r2, #3
 8008772:	440a      	add	r2, r1
 8008774:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S16>/Correct'
      u = rtDW.P_f[i];
 8008778:	1d3b      	adds	r3, r7, #4
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008780:	33a0      	adds	r3, #160	; 0xa0
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	4413      	add	r3, r2
 8008786:	e9d3 3400 	ldrd	r3, r4, [r3]
 800878a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800878e:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_f[i] = u;
 8008792:	1d3b      	adds	r3, r7, #4
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800879a:	33a0      	adds	r3, #160	; 0xa0
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	441a      	add	r2, r3
 80087a0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80087a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087a8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 80087ac:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80087b0:	3301      	adds	r3, #1
 80087b2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80087b6:	e7c8      	b.n	800874a <_ZN27positionEstimatorModelClass4stepEv+0x19d2>
    }

    // MATLAB Function: '<S16>/Correct' incorporates:
    //   Constant: '<S2>/R2'

    for (r1 = 0; r1 < 6; r1++) {
 80087b8:	2300      	movs	r3, #0
 80087ba:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80087be:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80087c2:	2b05      	cmp	r3, #5
 80087c4:	f300 80e1 	bgt.w	800898a <_ZN27positionEstimatorModelClass4stepEv+0x1c12>
      for (i = 0; i < 6; i++) {
 80087c8:	2300      	movs	r3, #0
 80087ca:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80087ce:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80087d2:	2b05      	cmp	r3, #5
 80087d4:	dc16      	bgt.n	8008804 <_ZN27positionEstimatorModelClass4stepEv+0x1a8c>
        imvec[i] = rtDW.DataStoreReadX_j[i];
 80087d6:	1d3b      	adds	r3, r7, #4
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80087de:	3390      	adds	r3, #144	; 0x90
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	4413      	add	r3, r2
 80087e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80087e8:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 80087ec:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80087f0:	00d2      	lsls	r2, r2, #3
 80087f2:	440a      	add	r2, r1
 80087f4:	e9c2 3400 	strd	r3, r4, [r2]
      for (i = 0; i < 6; i++) {
 80087f8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80087fc:	3301      	adds	r3, #1
 80087fe:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008802:	e7e4      	b.n	80087ce <_ZN27positionEstimatorModelClass4stepEv+0x1a56>
      }

      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_j[r1]);
 8008804:	1d3b      	adds	r3, r7, #4
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800880c:	3390      	adds	r3, #144	; 0x90
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	4413      	add	r3, r2
 8008812:	ed93 7b00 	vldr	d7, [r3]
 8008816:	eeb0 0b47 	vmov.f64	d0, d7
 800881a:	f7fc fe26 	bl	800546a <_ZSt3absd>
 800881e:	eeb0 6b40 	vmov.f64	d6, d0
 8008822:	ed9f 7bb9 	vldr	d7, [pc, #740]	; 8008b08 <_ZN27positionEstimatorModelClass4stepEv+0x1d90>
 8008826:	ee26 7b07 	vmul.f64	d7, d6, d7
 800882a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800882e:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8008832:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008836:	ed93 7b00 	vldr	d7, [r3]
 800883a:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 8008b08 <_ZN27positionEstimatorModelClass4stepEv+0x1d90>
 800883e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008846:	d408      	bmi.n	800885a <_ZN27positionEstimatorModelClass4stepEv+0x1ae2>
 8008848:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800884c:	ed93 0b00 	vldr	d0, [r3]
 8008850:	f7fc febe 	bl	80055d0 <rtIsNaN>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <_ZN27positionEstimatorModelClass4stepEv+0x1ae6>
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <_ZN27positionEstimatorModelClass4stepEv+0x1ae8>
 800885e:	2300      	movs	r3, #0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d006      	beq.n	8008872 <_ZN27positionEstimatorModelClass4stepEv+0x1afa>
        epsilon = 1.4901161193847656E-8;
 8008864:	f04f 0300 	mov.w	r3, #0
 8008868:	4ca9      	ldr	r4, [pc, #676]	; (8008b10 <_ZN27positionEstimatorModelClass4stepEv+0x1d98>)
 800886a:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800886e:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec[r1] = rtDW.DataStoreReadX_j[r1] + epsilon;
 8008872:	1d3b      	adds	r3, r7, #4
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800887a:	3390      	adds	r3, #144	; 0x90
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	4413      	add	r3, r2
 8008880:	ed93 6b00 	vldr	d6, [r3]
 8008884:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8008888:	ed93 7b00 	vldr	d7, [r3]
 800888c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008890:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8008894:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	4413      	add	r3, r2
 800889c:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[r1 << 2] = (imvec[0] - rtDW.DataStoreReadX_j[0]) / epsilon;
 80088a0:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80088a4:	ed93 6b00 	vldr	d6, [r3]
 80088a8:	1d3b      	adds	r3, r7, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80088b0:	ed93 7b00 	vldr	d7, [r3]
 80088b4:	ee36 5b47 	vsub.f64	d5, d6, d7
 80088b8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80088c2:	ed92 6b00 	vldr	d6, [r2]
 80088c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80088ca:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	4413      	add	r3, r2
 80088d2:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[(r1 << 2) + 1] = (imvec[1] - rtDW.DataStoreReadX_j[1]) / epsilon;
 80088d6:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80088da:	ed93 6b02 	vldr	d6, [r3, #8]
 80088de:	1d3b      	adds	r3, r7, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 80088e6:	ed93 7b00 	vldr	d7, [r3]
 80088ea:	ee36 5b47 	vsub.f64	d5, d6, d7
 80088ee:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	3301      	adds	r3, #1
 80088f6:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80088fa:	ed92 6b00 	vldr	d6, [r2]
 80088fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008902:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	4413      	add	r3, r2
 800890a:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[(r1 << 2) + 2] = (imvec[2] - rtDW.DataStoreReadX_j[2]) / epsilon;
 800890e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8008912:	ed93 6b04 	vldr	d6, [r3, #16]
 8008916:	1d3b      	adds	r3, r7, #4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800891e:	ed93 7b00 	vldr	d7, [r3]
 8008922:	ee36 5b47 	vsub.f64	d5, d6, d7
 8008926:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	3302      	adds	r3, #2
 800892e:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8008932:	ed92 6b00 	vldr	d6, [r2]
 8008936:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800893a:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	4413      	add	r3, r2
 8008942:	ed83 7b00 	vstr	d7, [r3]
      dHdx_0[(r1 << 2) + 3] = (imvec[3] - rtDW.DataStoreReadX_j[3]) / epsilon;
 8008946:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800894a:	ed93 6b06 	vldr	d6, [r3, #24]
 800894e:	1d3b      	adds	r3, r7, #4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8008956:	ed93 7b00 	vldr	d7, [r3]
 800895a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800895e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	3303      	adds	r3, #3
 8008966:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800896a:	ed92 6b00 	vldr	d6, [r2]
 800896e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008972:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	4413      	add	r3, r2
 800897a:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 6; r1++) {
 800897e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008982:	3301      	adds	r3, #1
 8008984:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008988:	e719      	b.n	80087be <_ZN27positionEstimatorModelClass4stepEv+0x1a46>
    }

    for (i = 0; i < 6; i++) {
 800898a:	2300      	movs	r3, #0
 800898c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008990:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008994:	2b05      	cmp	r3, #5
 8008996:	dc16      	bgt.n	80089c6 <_ZN27positionEstimatorModelClass4stepEv+0x1c4e>
      imvec[i] = rtDW.DataStoreReadX_j[i];
 8008998:	1d3b      	adds	r3, r7, #4
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80089a0:	3390      	adds	r3, #144	; 0x90
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	4413      	add	r3, r2
 80089a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089aa:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 80089ae:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80089b2:	00d2      	lsls	r2, r2, #3
 80089b4:	440a      	add	r2, r1
 80089b6:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 80089ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80089be:	3301      	adds	r3, #1
 80089c0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80089c4:	e7e4      	b.n	8008990 <_ZN27positionEstimatorModelClass4stepEv+0x1c18>
    }

    for (r1 = 0; r1 < 4; r1++) {
 80089c6:	2300      	movs	r3, #0
 80089c8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80089cc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	f300 809f 	bgt.w	8008b14 <_ZN27positionEstimatorModelClass4stepEv+0x1d9c>
      for (i = 0; i < 6; i++) {
 80089d6:	2300      	movs	r3, #0
 80089d8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80089dc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80089e0:	2b05      	cmp	r3, #5
 80089e2:	dc6b      	bgt.n	8008abc <_ZN27positionEstimatorModelClass4stepEv+0x1d44>
        dHdx_2[r1 + (i << 2)] = 0.0;
 80089e4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80089e8:	009a      	lsls	r2, r3, #2
 80089ea:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80089ee:	4413      	add	r3, r2
 80089f0:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	441a      	add	r2, r3
 80089f8:	f04f 0300 	mov.w	r3, #0
 80089fc:	f04f 0400 	mov.w	r4, #0
 8008a00:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008a04:	2300      	movs	r3, #0
 8008a06:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008a0a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008a0e:	2b05      	cmp	r3, #5
 8008a10:	dc4e      	bgt.n	8008ab0 <_ZN27positionEstimatorModelClass4stepEv+0x1d38>
          u = dHdx_2[(i << 2) + r1];
 8008a12:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008a16:	009a      	lsls	r2, r3, #2
 8008a18:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	4413      	add	r3, r2
 8008a26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a2a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008a2e:	e9c2 3400 	strd	r3, r4, [r2]
          u += dHdx_0[(k << 2) + r1] * rtDW.P_f[6 * i + k];
 8008a32:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008a36:	009a      	lsls	r2, r3, #2
 8008a38:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	4413      	add	r3, r2
 8008a46:	ed93 6b00 	vldr	d6, [r3]
 8008a4a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008a4e:	4613      	mov	r3, r2
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	4413      	add	r3, r2
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	461a      	mov	r2, r3
 8008a58:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008a5c:	4413      	add	r3, r2
 8008a5e:	1d3a      	adds	r2, r7, #4
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	33a0      	adds	r3, #160	; 0xa0
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	4413      	add	r3, r2
 8008a68:	ed93 7b00 	vldr	d7, [r3]
 8008a6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008a70:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008a74:	ed93 6b00 	vldr	d6, [r3]
 8008a78:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008a7c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008a80:	ed83 7b00 	vstr	d7, [r3]
          dHdx_2[r1 + (i << 2)] = u;
 8008a84:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008a88:	009a      	lsls	r2, r3, #2
 8008a8a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008a8e:	4413      	add	r3, r2
 8008a90:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	441a      	add	r2, r3
 8008a98:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008a9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008aa0:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008aa4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008aae:	e7ac      	b.n	8008a0a <_ZN27positionEstimatorModelClass4stepEv+0x1c92>
      for (i = 0; i < 6; i++) {
 8008ab0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008aba:	e78f      	b.n	80089dc <_ZN27positionEstimatorModelClass4stepEv+0x1c64>
        }
      }

      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 8008abc:	1d3b      	adds	r3, r7, #4
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ac4:	3396      	adds	r3, #150	; 0x96
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	4413      	add	r3, r2
 8008aca:	ed93 6b00 	vldr	d6, [r3]
        rtDW.DataStoreReadX_j[r1];
 8008ace:	1d3b      	adds	r3, r7, #4
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ad6:	3390      	adds	r3, #144	; 0x90
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	4413      	add	r3, r2
 8008adc:	ed93 7b00 	vldr	d7, [r3]
      Pyy[r1] = rtDW.TmpSignalConversionAtSFunctionI[r1] -
 8008ae0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008ae4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8008aee:	4413      	add	r3, r2
 8008af0:	3bb0      	subs	r3, #176	; 0xb0
 8008af2:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 4; r1++) {
 8008af6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008afa:	3301      	adds	r3, #1
 8008afc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008b00:	e764      	b.n	80089cc <_ZN27positionEstimatorModelClass4stepEv+0x1c54>
 8008b02:	bf00      	nop
 8008b04:	f3af 8000 	nop.w
 8008b08:	00000000 	.word	0x00000000
 8008b0c:	3e500000 	.word	0x3e500000
 8008b10:	3e500000 	.word	0x3e500000
    }

    for (r1 = 0; r1 < 6; r1++) {
 8008b14:	2300      	movs	r3, #0
 8008b16:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008b1a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b1e:	2b05      	cmp	r3, #5
 8008b20:	f300 8085 	bgt.w	8008c2e <_ZN27positionEstimatorModelClass4stepEv+0x1eb6>
      for (i = 0; i < 4; i++) {
 8008b24:	2300      	movs	r3, #0
 8008b26:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008b2a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	dc77      	bgt.n	8008c22 <_ZN27positionEstimatorModelClass4stepEv+0x1eaa>
        tmp[r1 + 6 * i] = 0.0;
 8008b32:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008b36:	4613      	mov	r3, r2
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	4413      	add	r3, r2
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b44:	4413      	add	r3, r2
 8008b46:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	441a      	add	r2, r3
 8008b4e:	f04f 0300 	mov.w	r3, #0
 8008b52:	f04f 0400 	mov.w	r4, #0
 8008b56:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008b60:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008b64:	2b05      	cmp	r3, #5
 8008b66:	dc56      	bgt.n	8008c16 <_ZN27positionEstimatorModelClass4stepEv+0x1e9e>
          u = tmp[6 * i + r1];
 8008b68:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	4413      	add	r3, r2
 8008b72:	005b      	lsls	r3, r3, #1
 8008b74:	461a      	mov	r2, r3
 8008b76:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	4413      	add	r3, r2
 8008b84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b88:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008b8c:	e9c2 3400 	strd	r3, r4, [r2]
          u += rtDW.P_f[6 * k + r1] * dHdx_0[(k << 2) + i];
 8008b90:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8008b94:	4613      	mov	r3, r2
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	4413      	add	r3, r2
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008ba2:	4413      	add	r3, r2
 8008ba4:	1d3a      	adds	r2, r7, #4
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	33a0      	adds	r3, #160	; 0xa0
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	4413      	add	r3, r2
 8008bae:	ed93 6b00 	vldr	d6, [r3]
 8008bb2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008bb6:	009a      	lsls	r2, r3, #2
 8008bb8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	ed93 7b00 	vldr	d7, [r3]
 8008bca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008bce:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008bd2:	ed93 6b00 	vldr	d6, [r3]
 8008bd6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008bda:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008bde:	ed83 7b00 	vstr	d7, [r3]
          tmp[r1 + 6 * i] = u;
 8008be2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008be6:	4613      	mov	r3, r2
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	4413      	add	r3, r2
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	441a      	add	r2, r3
 8008bfe:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008c02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c06:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008c0a:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c0e:	3301      	adds	r3, #1
 8008c10:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008c14:	e7a4      	b.n	8008b60 <_ZN27positionEstimatorModelClass4stepEv+0x1de8>
      for (i = 0; i < 4; i++) {
 8008c16:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c20:	e783      	b.n	8008b2a <_ZN27positionEstimatorModelClass4stepEv+0x1db2>
    for (r1 = 0; r1 < 6; r1++) {
 8008c22:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008c26:	3301      	adds	r3, #1
 8008c28:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008c2c:	e775      	b.n	8008b1a <_ZN27positionEstimatorModelClass4stepEv+0x1da2>
        }
      }
    }

    for (r1 = 0; r1 < 4; r1++) {
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008c34:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	dc69      	bgt.n	8008d10 <_ZN27positionEstimatorModelClass4stepEv+0x1f98>
      for (i = 0; i < 4; i++) {
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008c42:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	dc5c      	bgt.n	8008d04 <_ZN27positionEstimatorModelClass4stepEv+0x1f8c>
        u = 0.0;
 8008c4a:	f04f 0300 	mov.w	r3, #0
 8008c4e:	f04f 0400 	mov.w	r4, #0
 8008c52:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008c56:	e9c2 3400 	strd	r3, r4, [r2]
        for (k = 0; k < 6; k++) {
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008c60:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c64:	2b05      	cmp	r3, #5
 8008c66:	dc29      	bgt.n	8008cbc <_ZN27positionEstimatorModelClass4stepEv+0x1f44>
          u += dHdx_2[(k << 2) + r1] * dHdx_0[(k << 2) + i];
 8008c68:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c6c:	009a      	lsls	r2, r3, #2
 8008c6e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008c72:	4413      	add	r3, r2
 8008c74:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	4413      	add	r3, r2
 8008c7c:	ed93 6b00 	vldr	d6, [r3]
 8008c80:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008c84:	009a      	lsls	r2, r3, #2
 8008c86:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	4413      	add	r3, r2
 8008c94:	ed93 7b00 	vldr	d7, [r3]
 8008c98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008c9c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008ca0:	ed93 6b00 	vldr	d6, [r3]
 8008ca4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008ca8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8008cac:	ed83 7b00 	vstr	d7, [r3]
        for (k = 0; k < 6; k++) {
 8008cb0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 8008cba:	e7d1      	b.n	8008c60 <_ZN27positionEstimatorModelClass4stepEv+0x1ee8>
        }

        dHdx_3[r1 + (i << 2)] = rtP.R2_Value[(i << 2) + r1] + u;
 8008cbc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cc0:	009a      	lsls	r2, r3, #2
 8008cc2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008cc6:	4413      	add	r3, r2
 8008cc8:	4a6b      	ldr	r2, [pc, #428]	; (8008e78 <_ZN27positionEstimatorModelClass4stepEv+0x2100>)
 8008cca:	3325      	adds	r3, #37	; 0x25
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	4413      	add	r3, r2
 8008cd0:	ed93 6b00 	vldr	d6, [r3]
 8008cd4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cd8:	009a      	lsls	r2, r3, #2
 8008cda:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008cde:	4413      	add	r3, r2
 8008ce0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8008ce4:	ed92 7b00 	vldr	d7, [r2]
 8008ce8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008cec:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	4413      	add	r3, r2
 8008cf4:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 4; i++) {
 8008cf8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d02:	e79e      	b.n	8008c42 <_ZN27positionEstimatorModelClass4stepEv+0x1eca>
    for (r1 = 0; r1 < 4; r1++) {
 8008d04:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8008d08:	3301      	adds	r3, #1
 8008d0a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8008d0e:	e791      	b.n	8008c34 <_ZN27positionEstimatorModelClass4stepEv+0x1ebc>
      }
    }

    EKFCorrector_correctStateAndCov(imvec, rtDW.P_f, Pyy, tmp, dHdx_3, dHdx_0);
 8008d10:	1d3b      	adds	r3, r7, #4
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f503 62a0 	add.w	r2, r3, #1280	; 0x500
 8008d18:	f507 6402 	add.w	r4, r7, #2080	; 0x820
 8008d1c:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8008d20:	1d38      	adds	r0, r7, #4
 8008d22:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8008d26:	9302      	str	r3, [sp, #8]
 8008d28:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4623      	mov	r3, r4
 8008d36:	6800      	ldr	r0, [r0, #0]
 8008d38:	f7fd f9f4 	bl	8006124 <_ZN27positionEstimatorModelClass31EKFCorrector_correctStateAndCovEPdS0_PKdS2_S2_S2_>
    for (i = 0; i < 6; i++) {
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d42:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d46:	2b05      	cmp	r3, #5
 8008d48:	dc16      	bgt.n	8008d78 <_ZN27positionEstimatorModelClass4stepEv+0x2000>
      rtDW.xNew_g[i] = imvec[i];
 8008d4a:	f507 62e6 	add.w	r2, r7, #1840	; 0x730
 8008d4e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	4413      	add	r3, r2
 8008d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d5a:	1d3a      	adds	r2, r7, #4
 8008d5c:	6811      	ldr	r1, [r2, #0]
 8008d5e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008d62:	329a      	adds	r2, #154	; 0x9a
 8008d64:	00d2      	lsls	r2, r2, #3
 8008d66:	440a      	add	r2, r1
 8008d68:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8008d6c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d70:	3301      	adds	r3, #1
 8008d72:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d76:	e7e4      	b.n	8008d42 <_ZN27positionEstimatorModelClass4stepEv+0x1fca>
    }

    // DataStoreWrite: '<S16>/Data Store WriteP'
    for (i = 0; i < 36; i++) {
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008d7e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d82:	2b23      	cmp	r3, #35	; 0x23
 8008d84:	dc18      	bgt.n	8008db8 <_ZN27positionEstimatorModelClass4stepEv+0x2040>
      rtDW.P_n_c[i] = rtDW.P_f[i];
 8008d86:	1d3b      	adds	r3, r7, #4
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008d8e:	33a0      	adds	r3, #160	; 0xa0
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	4413      	add	r3, r2
 8008d94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d98:	1d3a      	adds	r2, r7, #4
 8008d9a:	6811      	ldr	r1, [r2, #0]
 8008d9c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008da0:	f202 123b 	addw	r2, r2, #315	; 0x13b
 8008da4:	00d2      	lsls	r2, r2, #3
 8008da6:	440a      	add	r2, r1
 8008da8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 8008dac:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008db0:	3301      	adds	r3, #1
 8008db2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008db6:	e7e2      	b.n	8008d7e <_ZN27positionEstimatorModelClass4stepEv+0x2006>
    }

    // End of DataStoreWrite: '<S16>/Data Store WriteP'

    // DataStoreWrite: '<S16>/Data Store WriteX'
    for (i = 0; i < 6; i++) {
 8008db8:	2300      	movs	r3, #0
 8008dba:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008dbe:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008dc2:	2b05      	cmp	r3, #5
 8008dc4:	dc18      	bgt.n	8008df8 <_ZN27positionEstimatorModelClass4stepEv+0x2080>
      rtDW.x_p[i] = rtDW.xNew_g[i];
 8008dc6:	1d3b      	adds	r3, r7, #4
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008dce:	339a      	adds	r3, #154	; 0x9a
 8008dd0:	00db      	lsls	r3, r3, #3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008dd8:	1d3a      	adds	r2, r7, #4
 8008dda:	6811      	ldr	r1, [r2, #0]
 8008ddc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008de0:	f202 125f 	addw	r2, r2, #351	; 0x15f
 8008de4:	00d2      	lsls	r2, r2, #3
 8008de6:	440a      	add	r2, r1
 8008de8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 8008dec:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008df0:	3301      	adds	r3, #1
 8008df2:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008df6:	e7e2      	b.n	8008dbe <_ZN27positionEstimatorModelClass4stepEv+0x2046>

  // End of Outputs for SubSystem: '<S2>/Correct2'

  // Outputs for Atomic SubSystem: '<S2>/Output'
  // DataStoreRead: '<S17>/Data Store Read'
  for (i = 0; i < 6; i++) {
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008dfe:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008e02:	2b05      	cmp	r3, #5
 8008e04:	dc18      	bgt.n	8008e38 <_ZN27positionEstimatorModelClass4stepEv+0x20c0>
    rtDW.DataStoreRead[i] = rtDW.x_p[i];
 8008e06:	1d3b      	adds	r3, r7, #4
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008e0e:	f203 135f 	addw	r3, r3, #351	; 0x15f
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	4413      	add	r3, r2
 8008e16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e1a:	1d3a      	adds	r2, r7, #4
 8008e1c:	6811      	ldr	r1, [r2, #0]
 8008e1e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008e22:	3266      	adds	r2, #102	; 0x66
 8008e24:	00d2      	lsls	r2, r2, #3
 8008e26:	440a      	add	r2, r1
 8008e28:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 8008e2c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008e30:	3301      	adds	r3, #1
 8008e32:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008e36:	e7e2      	b.n	8008dfe <_ZN27positionEstimatorModelClass4stepEv+0x2086>
  }

  // End of DataStoreRead: '<S17>/Data Store Read'

  // DataStoreRead: '<S17>/Data Store Read1'
  for (i = 0; i < 36; i++) {
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008e3e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008e42:	2b23      	cmp	r3, #35	; 0x23
 8008e44:	dc1a      	bgt.n	8008e7c <_ZN27positionEstimatorModelClass4stepEv+0x2104>
    rtDW.DataStoreRead1[i] = rtDW.P_n_c[i];
 8008e46:	1d3b      	adds	r3, r7, #4
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008e4e:	f203 133b 	addw	r3, r3, #315	; 0x13b
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	4413      	add	r3, r2
 8008e56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e5a:	1d3a      	adds	r2, r7, #4
 8008e5c:	6811      	ldr	r1, [r2, #0]
 8008e5e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8008e62:	326c      	adds	r2, #108	; 0x6c
 8008e64:	00d2      	lsls	r2, r2, #3
 8008e66:	440a      	add	r2, r1
 8008e68:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 8008e6c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008e70:	3301      	adds	r3, #1
 8008e72:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008e76:	e7e2      	b.n	8008e3e <_ZN27positionEstimatorModelClass4stepEv+0x20c6>
 8008e78:	24000258 	.word	0x24000258
  }

  // End of DataStoreRead: '<S17>/Data Store Read1'

  // Inport: '<S17>/uBlockOrdering'
  rtDW.uBlockOrdering = rtDW.blockOrdering;
 8008e7c:	1d3b      	adds	r3, r7, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f893 2d64 	ldrb.w	r2, [r3, #3428]	; 0xd64
 8008e84:	1d3b      	adds	r3, r7, #4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f883 2d63 	strb.w	r2, [r3, #3427]	; 0xd63

  // End of Outputs for SubSystem: '<S2>/Output'

  // Outport: '<Root>/estiX'
  rtY.estiX = rtDW.DataStoreRead[0];
 8008e8c:	1d3b      	adds	r3, r7, #4
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	e9d3 34cc 	ldrd	r3, r4, [r3, #816]	; 0x330
 8008e94:	1d3a      	adds	r2, r7, #4
 8008e96:	6812      	ldr	r2, [r2, #0]
 8008e98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e9c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiY'
  rtY.estiY = rtDW.DataStoreRead[1];
 8008ea0:	1d3b      	adds	r3, r7, #4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	e9d3 34ce 	ldrd	r3, r4, [r3, #824]	; 0x338
 8008ea8:	1d3a      	adds	r2, r7, #4
 8008eaa:	6812      	ldr	r2, [r2, #0]
 8008eac:	f602 6208 	addw	r2, r2, #3592	; 0xe08
 8008eb0:	e9c2 3400 	strd	r3, r4, [r2]

  // Gain: '<Root>/NED_convert1' incorporates:
  //   Inport: '<Root>/Lidar_height'

  rtDW.NED_convert1 = rtP.NED_convert1_Gain * rtU.Lidar_height;
 8008eb4:	4bac      	ldr	r3, [pc, #688]	; (8009168 <_ZN27positionEstimatorModelClass4stepEv+0x23f0>)
 8008eb6:	ed93 6b76 	vldr	d6, [r3, #472]	; 0x1d8
 8008eba:	1d3b      	adds	r3, r7, #4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f503 635f 	add.w	r3, r3, #3568	; 0xdf0
 8008ec2:	ed93 7b00 	vldr	d7, [r3]
 8008ec6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008eca:	1d3b      	adds	r3, r7, #4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 8008ed2:	ed83 7b00 	vstr	d7, [r3]

  // Gain: '<Root>/NED_convert' incorporates:
  //   Inport: '<Root>/baroZ'

  rtDW.NED_convert = rtP.NED_convert_Gain * rtU.baroZ;
 8008ed6:	4ba4      	ldr	r3, [pc, #656]	; (8009168 <_ZN27positionEstimatorModelClass4stepEv+0x23f0>)
 8008ed8:	ed93 6b7c 	vldr	d6, [r3, #496]	; 0x1f0
 8008edc:	1d3b      	adds	r3, r7, #4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 8008ee4:	ed93 7b00 	vldr	d7, [r3]
 8008ee8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008eec:	1d3b      	adds	r3, r7, #4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 8008ef4:	ed83 7b00 	vstr	d7, [r3]

  // Sum: '<S22>/Sum' incorporates:
  //   Inport: '<Root>/HOME_lla'
  //   Inport: '<Root>/alt'

  rtDW.alt = rtU.alt + rtU.HOME_lla[2];
 8008ef8:	1d3b      	adds	r3, r7, #4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f603 53a8 	addw	r3, r3, #3496	; 0xda8
 8008f00:	ed93 6b00 	vldr	d6, [r3]
 8008f04:	1d3b      	adds	r3, r7, #4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f503 635e 	add.w	r3, r3, #3552	; 0xde0
 8008f0c:	ed93 7b00 	vldr	d7, [r3]
 8008f10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008f14:	1d3b      	adds	r3, r7, #4
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8008f1c:	ed83 7b00 	vstr	d7, [r3]

  // UnaryMinus: '<S22>/Ze2height'
  rtDW.Pz = -rtDW.alt;
 8008f20:	1d3b      	adds	r3, r7, #4
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8008f28:	ed93 7b00 	vldr	d7, [r3]
 8008f2c:	eeb1 7b47 	vneg.f64	d7, d7
 8008f30:	1d3b      	adds	r3, r7, #4
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 8008f38:	ed83 7b00 	vstr	d7, [r3]

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable1' incorporates:
  //   Inport: '<Root>/AhrsFlag'

  rtDW.DataTypeConversion_Enable1_a = (rtU.AhrsFlag != 0.0);
 8008f3c:	1d3b      	adds	r3, r7, #4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f503 6357 	add.w	r3, r3, #3440	; 0xd70
 8008f44:	ed93 7b00 	vldr	d7, [r3]
 8008f48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f50:	bf14      	ite	ne
 8008f52:	2301      	movne	r3, #1
 8008f54:	2300      	moveq	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	461a      	mov	r2, r3
 8008f5a:	1d3b      	adds	r3, r7, #4
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60

  // Outputs for Enabled SubSystem: '<S1>/Correct1' incorporates:
  //   EnablePort: '<S4>/Enable'

  if (rtDW.DataTypeConversion_Enable1_a) {
 8008f62:	1d3b      	adds	r3, r7, #4
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f893 3d60 	ldrb.w	r3, [r3, #3424]	; 0xd60
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 8385 	beq.w	800967a <_ZN27positionEstimatorModelClass4stepEv+0x2902>
    // DataStoreRead: '<S4>/Data Store ReadX'
    rtDW.DataStoreReadX_o[0] = rtDW.x[0];
 8008f70:	1d3b      	adds	r3, r7, #4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8008f78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f7c:	1d3a      	adds	r2, r7, #4
 8008f7e:	6812      	ldr	r2, [r2, #0]
 8008f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f84:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[1] = rtDW.x[1];
 8008f88:	1d3b      	adds	r3, r7, #4
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8008f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f94:	1d3a      	adds	r2, r7, #4
 8008f96:	6812      	ldr	r2, [r2, #0]
 8008f98:	f602 1208 	addw	r2, r2, #2312	; 0x908
 8008f9c:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_o[2] = rtDW.x[2];
 8008fa0:	1d3b      	adds	r3, r7, #4
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8008fa8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fac:	1d3a      	adds	r2, r7, #4
 8008fae:	6812      	ldr	r2, [r2, #0]
 8008fb0:	f502 6211 	add.w	r2, r2, #2320	; 0x910
 8008fb4:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/BlockOrdering'

    rtDW.blockOrdering_k = rtP.BlockOrdering_Value_b;
 8008fb8:	4b6b      	ldr	r3, [pc, #428]	; (8009168 <_ZN27positionEstimatorModelClass4stepEv+0x23f0>)
 8008fba:	f893 23fd 	ldrb.w	r2, [r3, #1021]	; 0x3fd
 8008fbe:	1d3b      	adds	r3, r7, #4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f883 2d68 	strb.w	r2, [r3, #3432]	; 0xd68
    blockOrdering = rtDW.blockOrdering_k;
 8008fc6:	1d3b      	adds	r3, r7, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f893 3d68 	ldrb.w	r3, [r3, #3432]	; 0xd68
 8008fce:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_k = blockOrdering;
 8008fd2:	1d3b      	adds	r3, r7, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 8008fda:	f883 2d68 	strb.w	r2, [r3, #3432]	; 0xd68
    for (i = 0; i < 9; i++) {
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8008fe4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	dc35      	bgt.n	8009058 <_ZN27positionEstimatorModelClass4stepEv+0x22e0>
      // DataStoreRead: '<S4>/Data Store ReadP'
      rtDW.P_g[i] = rtDW.P_i_m[i];
 8008fec:	1d3b      	adds	r3, r7, #4
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8008ff4:	f203 132f 	addw	r3, r3, #303	; 0x12f
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009000:	1d3a      	adds	r2, r7, #4
 8009002:	6811      	ldr	r1, [r2, #0]
 8009004:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009008:	f502 7293 	add.w	r2, r2, #294	; 0x126
 800900c:	00d2      	lsls	r2, r2, #3
 800900e:	440a      	add	r2, r1
 8009010:	e9c2 3400 	strd	r3, r4, [r2]

      // MATLAB Function: '<S4>/Correct'
      u = rtDW.P_g[i];
 8009014:	1d3b      	adds	r3, r7, #4
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800901c:	f503 7393 	add.w	r3, r3, #294	; 0x126
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	4413      	add	r3, r2
 8009024:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009028:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800902c:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_g[i] = u;
 8009030:	1d3b      	adds	r3, r7, #4
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009038:	f503 7393 	add.w	r3, r3, #294	; 0x126
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	441a      	add	r2, r3
 8009040:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009044:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009048:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800904c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009050:	3301      	adds	r3, #1
 8009052:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009056:	e7c5      	b.n	8008fe4 <_ZN27positionEstimatorModelClass4stepEv+0x226c>

    // MATLAB Function: '<S4>/Correct' incorporates:
    //   Constant: '<S1>/R1'
    //   Inport: '<Root>/az'

    for (r1 = 0; r1 < 3; r1++) {
 8009058:	2300      	movs	r3, #0
 800905a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800905e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009062:	2b02      	cmp	r3, #2
 8009064:	f300 8084 	bgt.w	8009170 <_ZN27positionEstimatorModelClass4stepEv+0x23f8>
      imvec_0[2] = rtDW.DataStoreReadX_o[2];
 8009068:	1d3b      	adds	r3, r7, #4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8009070:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009074:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009078:	e9c2 3404 	strd	r3, r4, [r2, #16]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_o[r1]);
 800907c:	1d3b      	adds	r3, r7, #4
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009084:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	4413      	add	r3, r2
 800908c:	ed93 7b00 	vldr	d7, [r3]
 8009090:	eeb0 0b47 	vmov.f64	d0, d7
 8009094:	f7fc f9e9 	bl	800546a <_ZSt3absd>
 8009098:	eeb0 6b40 	vmov.f64	d6, d0
 800909c:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009160 <_ZN27positionEstimatorModelClass4stepEv+0x23e8>
 80090a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80090a4:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80090a8:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 80090ac:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80090b0:	ed93 7b00 	vldr	d7, [r3]
 80090b4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8009160 <_ZN27positionEstimatorModelClass4stepEv+0x23e8>
 80090b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80090bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c0:	d408      	bmi.n	80090d4 <_ZN27positionEstimatorModelClass4stepEv+0x235c>
 80090c2:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80090c6:	ed93 0b00 	vldr	d0, [r3]
 80090ca:	f7fc fa81 	bl	80055d0 <rtIsNaN>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <_ZN27positionEstimatorModelClass4stepEv+0x2360>
 80090d4:	2301      	movs	r3, #1
 80090d6:	e000      	b.n	80090da <_ZN27positionEstimatorModelClass4stepEv+0x2362>
 80090d8:	2300      	movs	r3, #0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d006      	beq.n	80090ec <_ZN27positionEstimatorModelClass4stepEv+0x2374>
        epsilon = 1.4901161193847656E-8;
 80090de:	f04f 0300 	mov.w	r3, #0
 80090e2:	4c22      	ldr	r4, [pc, #136]	; (800916c <_ZN27positionEstimatorModelClass4stepEv+0x23f4>)
 80090e4:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 80090e8:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_o[r1] + epsilon;
 80090ec:	1d3b      	adds	r3, r7, #4
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80090f4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80090f8:	00db      	lsls	r3, r3, #3
 80090fa:	4413      	add	r3, r2
 80090fc:	ed93 6b00 	vldr	d6, [r3]
 8009100:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009104:	ed93 7b00 	vldr	d7, [r3]
 8009108:	ee36 7b07 	vadd.f64	d7, d6, d7
 800910c:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009110:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	4413      	add	r3, r2
 8009118:	ed83 7b00 	vstr	d7, [r3]
      dHdx_1[r1] = (imvec_0[2] - rtDW.DataStoreReadX_o[2]) / epsilon;
 800911c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009120:	ed93 6b04 	vldr	d6, [r3, #16]
 8009124:	1d3b      	adds	r3, r7, #4
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800912c:	ed93 7b00 	vldr	d7, [r3]
 8009130:	ee36 5b47 	vsub.f64	d5, d6, d7
 8009134:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009138:	ed93 6b00 	vldr	d6, [r3]
 800913c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009140:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8009144:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009148:	00db      	lsls	r3, r3, #3
 800914a:	4413      	add	r3, r2
 800914c:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009150:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009154:	3301      	adds	r3, #1
 8009156:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800915a:	e780      	b.n	800905e <_ZN27positionEstimatorModelClass4stepEv+0x22e6>
 800915c:	f3af 8000 	nop.w
 8009160:	00000000 	.word	0x00000000
 8009164:	3e500000 	.word	0x3e500000
 8009168:	24000258 	.word	0x24000258
 800916c:	3e500000 	.word	0x3e500000
    }

    u = 0.0;
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	f04f 0400 	mov.w	r4, #0
 8009178:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800917c:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009180:	2300      	movs	r3, #0
 8009182:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009186:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800918a:	2b02      	cmp	r3, #2
 800918c:	dc70      	bgt.n	8009270 <_ZN27positionEstimatorModelClass4stepEv+0x24f8>
      a22 = rtDW.P_g[3 * r1] * dHdx_1[0];
 800918e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009192:	4613      	mov	r3, r2
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	4413      	add	r3, r2
 8009198:	1d3a      	adds	r2, r7, #4
 800919a:	6812      	ldr	r2, [r2, #0]
 800919c:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	4413      	add	r3, r2
 80091a4:	ed93 6b00 	vldr	d6, [r3]
 80091a8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80091ac:	ed93 7b00 	vldr	d7, [r3]
 80091b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80091b4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80091b8:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_g[3 * r1 + 1] * dHdx_1[1];
 80091bc:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80091c0:	4613      	mov	r3, r2
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	4413      	add	r3, r2
 80091c6:	3301      	adds	r3, #1
 80091c8:	1d3a      	adds	r2, r7, #4
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	4413      	add	r3, r2
 80091d4:	ed93 6b00 	vldr	d6, [r3]
 80091d8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80091dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80091e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80091e4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80091e8:	ed93 6b00 	vldr	d6, [r3]
 80091ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80091f0:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80091f4:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_g[3 * r1 + 2] * dHdx_1[2];
 80091f8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80091fc:	4613      	mov	r3, r2
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	4413      	add	r3, r2
 8009202:	3302      	adds	r3, #2
 8009204:	1d3a      	adds	r2, r7, #4
 8009206:	6812      	ldr	r2, [r2, #0]
 8009208:	f503 7393 	add.w	r3, r3, #294	; 0x126
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	4413      	add	r3, r2
 8009210:	ed93 6b00 	vldr	d6, [r3]
 8009214:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009218:	ed93 7b04 	vldr	d7, [r3, #16]
 800921c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009220:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009224:	ed93 6b00 	vldr	d6, [r3]
 8009228:	ee36 7b07 	vadd.f64	d7, d6, d7
 800922c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009230:	ed83 7b00 	vstr	d7, [r3]
      u += a22 * dHdx_1[r1];
 8009234:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8009238:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	4413      	add	r3, r2
 8009240:	ed93 6b00 	vldr	d6, [r3]
 8009244:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009248:	ed93 7b00 	vldr	d7, [r3]
 800924c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009250:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009254:	ed93 6b00 	vldr	d6, [r3]
 8009258:	ee36 7b07 	vadd.f64	d7, d6, d7
 800925c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009260:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009264:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009268:	3301      	adds	r3, #1
 800926a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800926e:	e78a      	b.n	8009186 <_ZN27positionEstimatorModelClass4stepEv+0x240e>
    }

    epsilon = u + rtP.R1_Value_j;
 8009270:	4bd5      	ldr	r3, [pc, #852]	; (80095c8 <_ZN27positionEstimatorModelClass4stepEv+0x2850>)
 8009272:	ed93 7b86 	vldr	d7, [r3, #536]	; 0x218
 8009276:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800927a:	ed93 6b00 	vldr	d6, [r3]
 800927e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009282:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009286:	ed83 7b00 	vstr	d7, [r3]
    a22 = rtU.az - rtDW.DataStoreReadX_o[2];
 800928a:	1d3b      	adds	r3, r7, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f603 5388 	addw	r3, r3, #3464	; 0xd88
 8009292:	ed93 6b00 	vldr	d6, [r3]
 8009296:	1d3b      	adds	r3, r7, #4
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800929e:	ed93 7b00 	vldr	d7, [r3]
 80092a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80092a6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80092aa:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 80092ae:	2300      	movs	r3, #0
 80092b0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80092b4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	f300 808a 	bgt.w	80093d2 <_ZN27positionEstimatorModelClass4stepEv+0x265a>
      u = rtDW.P_g[i] * dHdx_1[0];
 80092be:	1d3b      	adds	r3, r7, #4
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80092c6:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	4413      	add	r3, r2
 80092ce:	ed93 6b00 	vldr	d6, [r3]
 80092d2:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80092d6:	ed93 7b00 	vldr	d7, [r3]
 80092da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80092de:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80092e2:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_g[i + 3] * dHdx_1[1];
 80092e6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80092ea:	3303      	adds	r3, #3
 80092ec:	1d3a      	adds	r2, r7, #4
 80092ee:	6812      	ldr	r2, [r2, #0]
 80092f0:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80092f4:	00db      	lsls	r3, r3, #3
 80092f6:	4413      	add	r3, r2
 80092f8:	ed93 6b00 	vldr	d6, [r3]
 80092fc:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009300:	ed93 7b02 	vldr	d7, [r3, #8]
 8009304:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009308:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800930c:	ed93 6b00 	vldr	d6, [r3]
 8009310:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009314:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009318:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_g[i + 6] * dHdx_1[2];
 800931c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009320:	3306      	adds	r3, #6
 8009322:	1d3a      	adds	r2, r7, #4
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	f503 7393 	add.w	r3, r3, #294	; 0x126
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	4413      	add	r3, r2
 800932e:	ed93 6b00 	vldr	d6, [r3]
 8009332:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009336:	ed93 7b04 	vldr	d7, [r3, #16]
 800933a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800933e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009342:	ed93 6b00 	vldr	d6, [r3]
 8009346:	ee36 7b07 	vadd.f64	d7, d6, d7
 800934a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800934e:	ed83 7b00 	vstr	d7, [r3]
      u /= epsilon;
 8009352:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009356:	ed93 5b00 	vldr	d5, [r3]
 800935a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800935e:	ed93 6b00 	vldr	d6, [r3]
 8009362:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009366:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800936a:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_o[i] = u * a22 + rtDW.DataStoreReadX_o[i];
 800936e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009372:	ed93 6b00 	vldr	d6, [r3]
 8009376:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800937a:	ed93 7b00 	vldr	d7, [r3]
 800937e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009382:	1d3b      	adds	r3, r7, #4
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800938a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	4413      	add	r3, r2
 8009392:	ed93 7b00 	vldr	d7, [r3]
 8009396:	ee36 7b07 	vadd.f64	d7, d6, d7
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093a2:	f203 1323 	addw	r3, r3, #291	; 0x123
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[i] = u;
 80093ae:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80093b2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	441a      	add	r2, r3
 80093ba:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80093be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80093c2:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 80093c6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80093ca:	3301      	adds	r3, #1
 80093cc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80093d0:	e770      	b.n	80092b4 <_ZN27positionEstimatorModelClass4stepEv+0x253c>
    }

    for (r1 = 0; r1 < 3; r1++) {
 80093d2:	2300      	movs	r3, #0
 80093d4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80093d8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80093dc:	2b02      	cmp	r3, #2
 80093de:	dc52      	bgt.n	8009486 <_ZN27positionEstimatorModelClass4stepEv+0x270e>
      u = dHdx_1[r1];
 80093e0:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80093e4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80093e8:	00db      	lsls	r3, r3, #3
 80093ea:	4413      	add	r3, r2
 80093ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80093f0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80093f4:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 80093f8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80093fc:	ed93 6b00 	vldr	d6, [r3]
 8009400:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009404:	4613      	mov	r3, r2
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	4413      	add	r3, r2
 800940a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800940e:	ed92 7b00 	vldr	d7, [r2]
 8009412:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009416:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	4413      	add	r3, r2
 800941e:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 8009422:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009426:	ed93 6b02 	vldr	d6, [r3, #8]
 800942a:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800942e:	4613      	mov	r3, r2
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	4413      	add	r3, r2
 8009434:	3301      	adds	r3, #1
 8009436:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800943a:	ed92 7b00 	vldr	d7, [r2]
 800943e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009442:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	4413      	add	r3, r2
 800944a:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 800944e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009452:	ed93 6b04 	vldr	d6, [r3, #16]
 8009456:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800945a:	4613      	mov	r3, r2
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	4413      	add	r3, r2
 8009460:	3302      	adds	r3, #2
 8009462:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009466:	ed92 7b00 	vldr	d7, [r2]
 800946a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800946e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	4413      	add	r3, r2
 8009476:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 800947a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800947e:	3301      	adds	r3, #1
 8009480:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009484:	e7a8      	b.n	80093d8 <_ZN27positionEstimatorModelClass4stepEv+0x2660>
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009486:	2300      	movs	r3, #0
 8009488:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800948c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009490:	2b02      	cmp	r3, #2
 8009492:	f300 809b 	bgt.w	80095cc <_ZN27positionEstimatorModelClass4stepEv+0x2854>
      for (i = 0; i < 3; i++) {
 8009496:	2300      	movs	r3, #0
 8009498:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800949c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	f300 808b 	bgt.w	80095bc <_ZN27positionEstimatorModelClass4stepEv+0x2844>
        u = rtDW.P_g[3 * r1] * imvec_1[i];
 80094a6:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80094aa:	4613      	mov	r3, r2
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	4413      	add	r3, r2
 80094b0:	1d3a      	adds	r2, r7, #4
 80094b2:	6812      	ldr	r2, [r2, #0]
 80094b4:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	4413      	add	r3, r2
 80094bc:	ed93 6b00 	vldr	d6, [r3]
 80094c0:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80094c4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094c8:	00db      	lsls	r3, r3, #3
 80094ca:	4413      	add	r3, r2
 80094cc:	ed93 7b00 	vldr	d7, [r3]
 80094d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80094d4:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80094d8:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_g[3 * r1 + 1] * imvec_1[i + 3];
 80094dc:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80094e0:	4613      	mov	r3, r2
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	4413      	add	r3, r2
 80094e6:	3301      	adds	r3, #1
 80094e8:	1d3a      	adds	r2, r7, #4
 80094ea:	6812      	ldr	r2, [r2, #0]
 80094ec:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	4413      	add	r3, r2
 80094f4:	ed93 6b00 	vldr	d6, [r3]
 80094f8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80094fc:	3303      	adds	r3, #3
 80094fe:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009502:	00db      	lsls	r3, r3, #3
 8009504:	4413      	add	r3, r2
 8009506:	ed93 7b00 	vldr	d7, [r3]
 800950a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800950e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009512:	ed93 6b00 	vldr	d6, [r3]
 8009516:	ee36 7b07 	vadd.f64	d7, d6, d7
 800951a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800951e:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_g[3 * r1 + 2] * imvec_1[i + 6];
 8009522:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009526:	4613      	mov	r3, r2
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	4413      	add	r3, r2
 800952c:	3302      	adds	r3, #2
 800952e:	1d3a      	adds	r2, r7, #4
 8009530:	6812      	ldr	r2, [r2, #0]
 8009532:	f503 7393 	add.w	r3, r3, #294	; 0x126
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	4413      	add	r3, r2
 800953a:	ed93 6b00 	vldr	d6, [r3]
 800953e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009542:	3306      	adds	r3, #6
 8009544:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	4413      	add	r3, r2
 800954c:	ed93 7b00 	vldr	d7, [r3]
 8009550:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009554:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009558:	ed93 6b00 	vldr	d6, [r3]
 800955c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009560:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009564:	ed83 7b00 	vstr	d7, [r3]
        a[i + 3 * r1] = rtDW.P_g[3 * r1 + i] - u;
 8009568:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800956c:	4613      	mov	r3, r2
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	441a      	add	r2, r3
 8009572:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009576:	4413      	add	r3, r2
 8009578:	1d3a      	adds	r2, r7, #4
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	f503 7393 	add.w	r3, r3, #294	; 0x126
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	4413      	add	r3, r2
 8009584:	ed93 6b00 	vldr	d6, [r3]
 8009588:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800958c:	4613      	mov	r3, r2
 800958e:	005b      	lsls	r3, r3, #1
 8009590:	441a      	add	r2, r3
 8009592:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009596:	4413      	add	r3, r2
 8009598:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800959c:	ed92 7b00 	vldr	d7, [r2]
 80095a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095a4:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	4413      	add	r3, r2
 80095ac:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 3; i++) {
 80095b0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095b4:	3301      	adds	r3, #1
 80095b6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80095ba:	e76f      	b.n	800949c <_ZN27positionEstimatorModelClass4stepEv+0x2724>
    for (r1 = 0; r1 < 3; r1++) {
 80095bc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80095c0:	3301      	adds	r3, #1
 80095c2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80095c6:	e761      	b.n	800948c <_ZN27positionEstimatorModelClass4stepEv+0x2714>
 80095c8:	24000258 	.word	0x24000258
      }
    }

    for (i = 0; i < 9; i++) {
 80095cc:	2300      	movs	r3, #0
 80095ce:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80095d2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095d6:	2b08      	cmp	r3, #8
 80095d8:	dc2b      	bgt.n	8009632 <_ZN27positionEstimatorModelClass4stepEv+0x28ba>
      rtDW.P_g[i] = a[i];
 80095da:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80095de:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 80095e2:	00db      	lsls	r3, r3, #3
 80095e4:	4413      	add	r3, r2
 80095e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095ea:	1d3a      	adds	r2, r7, #4
 80095ec:	6811      	ldr	r1, [r2, #0]
 80095ee:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 80095f2:	f502 7293 	add.w	r2, r2, #294	; 0x126
 80095f6:	00d2      	lsls	r2, r2, #3
 80095f8:	440a      	add	r2, r1
 80095fa:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S4>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_g[i];
 80095fe:	1d3b      	adds	r3, r7, #4
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009606:	f503 7393 	add.w	r3, r3, #294	; 0x126
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	4413      	add	r3, r2
 800960e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009612:	1d3a      	adds	r2, r7, #4
 8009614:	6811      	ldr	r1, [r2, #0]
 8009616:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800961a:	f202 122f 	addw	r2, r2, #303	; 0x12f
 800961e:	00d2      	lsls	r2, r2, #3
 8009620:	440a      	add	r2, r1
 8009622:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009626:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800962a:	3301      	adds	r3, #1
 800962c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009630:	e7cf      	b.n	80095d2 <_ZN27positionEstimatorModelClass4stepEv+0x285a>
    }

    // DataStoreWrite: '<S4>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_o[0];
 8009632:	1d3b      	adds	r3, r7, #4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800963a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800963e:	1d3a      	adds	r2, r7, #4
 8009640:	6812      	ldr	r2, [r2, #0]
 8009642:	f502 621c 	add.w	r2, r2, #2496	; 0x9c0
 8009646:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_o[1];
 800964a:	1d3b      	adds	r3, r7, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8009652:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009656:	1d3a      	adds	r2, r7, #4
 8009658:	6812      	ldr	r2, [r2, #0]
 800965a:	f602 12c8 	addw	r2, r2, #2504	; 0x9c8
 800965e:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_o[2];
 8009662:	1d3b      	adds	r3, r7, #4
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800966a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800966e:	1d3a      	adds	r2, r7, #4
 8009670:	6812      	ldr	r2, [r2, #0]
 8009672:	f502 621d 	add.w	r2, r2, #2512	; 0x9d0
 8009676:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Correct1'

  // Outputs for Enabled SubSystem: '<S1>/Correct2'
  // Constant: '<S1>/R2'
  Correct2(rtDW.LogicalOperator, rtDW.Pz, rtP.R2_Value_g, rtDW.blockOrdering_k,
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f893 1d5f 	ldrb.w	r1, [r3, #3423]	; 0xd5f
 8009682:	1d3b      	adds	r3, r7, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800968a:	ed93 7b00 	vldr	d7, [r3]
 800968e:	4ba0      	ldr	r3, [pc, #640]	; (8009910 <_ZN27positionEstimatorModelClass4stepEv+0x2b98>)
 8009690:	ed93 6b82 	vldr	d6, [r3, #520]	; 0x208
 8009694:	1d3b      	adds	r3, r7, #4
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f893 4d68 	ldrb.w	r4, [r3, #3432]	; 0xd68
 800969c:	1d3b      	adds	r3, r7, #4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f103 05c8 	add.w	r5, r3, #200	; 0xc8
 80096a4:	1d3b      	adds	r3, r7, #4
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80096ac:	1d3a      	adds	r2, r7, #4
 80096ae:	6812      	ldr	r2, [r2, #0]
 80096b0:	f502 621c 	add.w	r2, r2, #2496	; 0x9c0
 80096b4:	1d38      	adds	r0, r7, #4
 80096b6:	9201      	str	r2, [sp, #4]
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	462b      	mov	r3, r5
 80096bc:	4622      	mov	r2, r4
 80096be:	eeb0 1b46 	vmov.f64	d1, d6
 80096c2:	eeb0 0b47 	vmov.f64	d0, d7
 80096c6:	6800      	ldr	r0, [r0, #0]
 80096c8:	f7fc f85a 	bl	8005780 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_>
  // End of Outputs for SubSystem: '<S1>/Correct2'

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable3' incorporates:
  //   Inport: '<Root>/BaroFlag'

  rtDW.DataTypeConversion_Enable3 = (rtU.BaroFlag != 0.0);
 80096cc:	1d3b      	adds	r3, r7, #4
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 80096d4:	ed93 7b00 	vldr	d7, [r3]
 80096d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80096dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e0:	bf14      	ite	ne
 80096e2:	2301      	movne	r3, #1
 80096e4:	2300      	moveq	r3, #0
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61

  // Outputs for Enabled SubSystem: '<S1>/Correct3' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (rtDW.DataTypeConversion_Enable3) {
 80096f2:	1d3b      	adds	r3, r7, #4
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 8391 	beq.w	8009e22 <_ZN27positionEstimatorModelClass4stepEv+0x30aa>
    // DataStoreRead: '<S6>/Data Store ReadX'
    rtDW.DataStoreReadX_i[0] = rtDW.x[0];
 8009700:	1d3b      	adds	r3, r7, #4
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8009708:	e9d3 3400 	ldrd	r3, r4, [r3]
 800970c:	1d3a      	adds	r2, r7, #4
 800970e:	6812      	ldr	r2, [r2, #0]
 8009710:	f602 0288 	addw	r2, r2, #2184	; 0x888
 8009714:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[1] = rtDW.x[1];
 8009718:	1d3b      	adds	r3, r7, #4
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8009720:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009724:	1d3a      	adds	r2, r7, #4
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	f502 6209 	add.w	r2, r2, #2192	; 0x890
 800972c:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.DataStoreReadX_i[2] = rtDW.x[2];
 8009730:	1d3b      	adds	r3, r7, #4
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8009738:	e9d3 3400 	ldrd	r3, r4, [r3]
 800973c:	1d3a      	adds	r2, r7, #4
 800973e:	6812      	ldr	r2, [r2, #0]
 8009740:	f602 0298 	addw	r2, r2, #2200	; 0x898
 8009744:	e9c2 3400 	strd	r3, r4, [r2]

    // DataStoreRead: '<S6>/Data Store ReadP'
    for (i = 0; i < 9; i++) {
 8009748:	2300      	movs	r3, #0
 800974a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800974e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009752:	2b08      	cmp	r3, #8
 8009754:	dc19      	bgt.n	800978a <_ZN27positionEstimatorModelClass4stepEv+0x2a12>
      rtDW.P_a[i] = rtDW.P_i_m[i];
 8009756:	1d3b      	adds	r3, r7, #4
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800975e:	f203 132f 	addw	r3, r3, #303	; 0x12f
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	4413      	add	r3, r2
 8009766:	e9d3 3400 	ldrd	r3, r4, [r3]
 800976a:	1d3a      	adds	r2, r7, #4
 800976c:	6811      	ldr	r1, [r2, #0]
 800976e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009772:	f202 1217 	addw	r2, r2, #279	; 0x117
 8009776:	00d2      	lsls	r2, r2, #3
 8009778:	440a      	add	r2, r1
 800977a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800977e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009782:	3301      	adds	r3, #1
 8009784:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009788:	e7e1      	b.n	800974e <_ZN27positionEstimatorModelClass4stepEv+0x29d6>
    // End of DataStoreRead: '<S6>/Data Store ReadP'

    // MATLAB Function: '<S6>/Correct' incorporates:
    //   Constant: '<S1>/R3'

    rtDW.blockOrdering_p = rtDW.Correct2_a.blockOrdering;
 800978a:	1d3b      	adds	r3, r7, #4
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f893 2188 	ldrb.w	r2, [r3, #392]	; 0x188
 8009792:	1d3b      	adds	r3, r7, #4
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f883 2d67 	strb.w	r2, [r3, #3431]	; 0xd67
    blockOrdering = rtDW.blockOrdering_p;
 800979a:	1d3b      	adds	r3, r7, #4
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f893 3d67 	ldrb.w	r3, [r3, #3431]	; 0xd67
 80097a2:	f887 38a7 	strb.w	r3, [r7, #2215]	; 0x8a7
    rtDW.blockOrdering_p = blockOrdering;
 80097a6:	1d3b      	adds	r3, r7, #4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f897 28a7 	ldrb.w	r2, [r7, #2215]	; 0x8a7
 80097ae:	f883 2d67 	strb.w	r2, [r3, #3431]	; 0xd67
    for (r1 = 0; r1 < 9; r1++) {
 80097b2:	2300      	movs	r3, #0
 80097b4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80097b8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80097bc:	2b08      	cmp	r3, #8
 80097be:	dc21      	bgt.n	8009804 <_ZN27positionEstimatorModelClass4stepEv+0x2a8c>
      u = rtDW.P_a[r1];
 80097c0:	1d3b      	adds	r3, r7, #4
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80097c8:	f203 1317 	addw	r3, r3, #279	; 0x117
 80097cc:	00db      	lsls	r3, r3, #3
 80097ce:	4413      	add	r3, r2
 80097d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097d4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 80097d8:	e9c2 3400 	strd	r3, r4, [r2]
      rtDW.P_a[r1] = u;
 80097dc:	1d3b      	adds	r3, r7, #4
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80097e4:	f203 1317 	addw	r3, r3, #279	; 0x117
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	441a      	add	r2, r3
 80097ec:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80097f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097f4:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 9; r1++) {
 80097f8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80097fc:	3301      	adds	r3, #1
 80097fe:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009802:	e7d9      	b.n	80097b8 <_ZN27positionEstimatorModelClass4stepEv+0x2a40>
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009804:	2300      	movs	r3, #0
 8009806:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800980a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800980e:	2b02      	cmp	r3, #2
 8009810:	f300 8082 	bgt.w	8009918 <_ZN27positionEstimatorModelClass4stepEv+0x2ba0>
      imvec_0[0] = rtDW.DataStoreReadX_i[0];
 8009814:	1d3b      	adds	r3, r7, #4
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800981c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009820:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009824:	e9c2 3400 	strd	r3, r4, [r2]
      epsilon = 1.4901161193847656E-8 * std::abs(rtDW.DataStoreReadX_i[r1]);
 8009828:	1d3b      	adds	r3, r7, #4
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009830:	f203 1311 	addw	r3, r3, #273	; 0x111
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	4413      	add	r3, r2
 8009838:	ed93 7b00 	vldr	d7, [r3]
 800983c:	eeb0 0b47 	vmov.f64	d0, d7
 8009840:	f7fb fe13 	bl	800546a <_ZSt3absd>
 8009844:	eeb0 6b40 	vmov.f64	d6, d0
 8009848:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009908 <_ZN27positionEstimatorModelClass4stepEv+0x2b90>
 800984c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009850:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009854:	ed83 7b00 	vstr	d7, [r3]
      if ((1.4901161193847656E-8 > epsilon) || rtIsNaN(epsilon)) {
 8009858:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800985c:	ed93 7b00 	vldr	d7, [r3]
 8009860:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8009908 <_ZN27positionEstimatorModelClass4stepEv+0x2b90>
 8009864:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986c:	d408      	bmi.n	8009880 <_ZN27positionEstimatorModelClass4stepEv+0x2b08>
 800986e:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009872:	ed93 0b00 	vldr	d0, [r3]
 8009876:	f7fb feab 	bl	80055d0 <rtIsNaN>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <_ZN27positionEstimatorModelClass4stepEv+0x2b0c>
 8009880:	2301      	movs	r3, #1
 8009882:	e000      	b.n	8009886 <_ZN27positionEstimatorModelClass4stepEv+0x2b0e>
 8009884:	2300      	movs	r3, #0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d006      	beq.n	8009898 <_ZN27positionEstimatorModelClass4stepEv+0x2b20>
        epsilon = 1.4901161193847656E-8;
 800988a:	f04f 0300 	mov.w	r3, #0
 800988e:	4c21      	ldr	r4, [pc, #132]	; (8009914 <_ZN27positionEstimatorModelClass4stepEv+0x2b9c>)
 8009890:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8009894:	e9c2 3400 	strd	r3, r4, [r2]
      }

      imvec_0[r1] = rtDW.DataStoreReadX_i[r1] + epsilon;
 8009898:	1d3b      	adds	r3, r7, #4
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80098a0:	f203 1311 	addw	r3, r3, #273	; 0x111
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	4413      	add	r3, r2
 80098a8:	ed93 6b00 	vldr	d6, [r3]
 80098ac:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80098b0:	ed93 7b00 	vldr	d7, [r3]
 80098b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80098b8:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80098bc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80098c0:	00db      	lsls	r3, r3, #3
 80098c2:	4413      	add	r3, r2
 80098c4:	ed83 7b00 	vstr	d7, [r3]
      dHdx_1[r1] = (imvec_0[0] - rtDW.DataStoreReadX_i[0]) / epsilon;
 80098c8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80098cc:	ed93 6b00 	vldr	d6, [r3]
 80098d0:	1d3b      	adds	r3, r7, #4
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80098d8:	ed93 7b00 	vldr	d7, [r3]
 80098dc:	ee36 5b47 	vsub.f64	d5, d6, d7
 80098e0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 80098e4:	ed93 6b00 	vldr	d6, [r3]
 80098e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80098ec:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80098f0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	4413      	add	r3, r2
 80098f8:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 80098fc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009900:	3301      	adds	r3, #1
 8009902:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009906:	e780      	b.n	800980a <_ZN27positionEstimatorModelClass4stepEv+0x2a92>
 8009908:	00000000 	.word	0x00000000
 800990c:	3e500000 	.word	0x3e500000
 8009910:	24000258 	.word	0x24000258
 8009914:	3e500000 	.word	0x3e500000
    }

    u = 0.0;
 8009918:	f04f 0300 	mov.w	r3, #0
 800991c:	f04f 0400 	mov.w	r4, #0
 8009920:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009924:	e9c2 3400 	strd	r3, r4, [r2]
    for (r1 = 0; r1 < 3; r1++) {
 8009928:	2300      	movs	r3, #0
 800992a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800992e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009932:	2b02      	cmp	r3, #2
 8009934:	dc70      	bgt.n	8009a18 <_ZN27positionEstimatorModelClass4stepEv+0x2ca0>
      a22 = rtDW.P_a[3 * r1] * dHdx_1[0];
 8009936:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800993a:	4613      	mov	r3, r2
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	4413      	add	r3, r2
 8009940:	1d3a      	adds	r2, r7, #4
 8009942:	6812      	ldr	r2, [r2, #0]
 8009944:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	4413      	add	r3, r2
 800994c:	ed93 6b00 	vldr	d6, [r3]
 8009950:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009954:	ed93 7b00 	vldr	d7, [r3]
 8009958:	ee26 7b07 	vmul.f64	d7, d6, d7
 800995c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009960:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_a[3 * r1 + 1] * dHdx_1[1];
 8009964:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009968:	4613      	mov	r3, r2
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	4413      	add	r3, r2
 800996e:	3301      	adds	r3, #1
 8009970:	1d3a      	adds	r2, r7, #4
 8009972:	6812      	ldr	r2, [r2, #0]
 8009974:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	4413      	add	r3, r2
 800997c:	ed93 6b00 	vldr	d6, [r3]
 8009980:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009984:	ed93 7b02 	vldr	d7, [r3, #8]
 8009988:	ee26 7b07 	vmul.f64	d7, d6, d7
 800998c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009990:	ed93 6b00 	vldr	d6, [r3]
 8009994:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009998:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800999c:	ed83 7b00 	vstr	d7, [r3]
      a22 += rtDW.P_a[3 * r1 + 2] * dHdx_1[2];
 80099a0:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80099a4:	4613      	mov	r3, r2
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	4413      	add	r3, r2
 80099aa:	3302      	adds	r3, #2
 80099ac:	1d3a      	adds	r2, r7, #4
 80099ae:	6812      	ldr	r2, [r2, #0]
 80099b0:	f203 1317 	addw	r3, r3, #279	; 0x117
 80099b4:	00db      	lsls	r3, r3, #3
 80099b6:	4413      	add	r3, r2
 80099b8:	ed93 6b00 	vldr	d6, [r3]
 80099bc:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80099c0:	ed93 7b04 	vldr	d7, [r3, #16]
 80099c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80099c8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80099cc:	ed93 6b00 	vldr	d6, [r3]
 80099d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80099d4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80099d8:	ed83 7b00 	vstr	d7, [r3]
      u += a22 * dHdx_1[r1];
 80099dc:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80099e0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80099e4:	00db      	lsls	r3, r3, #3
 80099e6:	4413      	add	r3, r2
 80099e8:	ed93 6b00 	vldr	d6, [r3]
 80099ec:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80099f0:	ed93 7b00 	vldr	d7, [r3]
 80099f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80099f8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80099fc:	ed93 6b00 	vldr	d6, [r3]
 8009a00:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009a04:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009a08:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009a0c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009a10:	3301      	adds	r3, #1
 8009a12:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009a16:	e78a      	b.n	800992e <_ZN27positionEstimatorModelClass4stepEv+0x2bb6>
    }

    epsilon = u + rtP.R3_Value;
 8009a18:	4bd5      	ldr	r3, [pc, #852]	; (8009d70 <_ZN27positionEstimatorModelClass4stepEv+0x2ff8>)
 8009a1a:	ed93 7b7e 	vldr	d7, [r3, #504]	; 0x1f8
 8009a1e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009a22:	ed93 6b00 	vldr	d6, [r3]
 8009a26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009a2a:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009a2e:	ed83 7b00 	vstr	d7, [r3]
    a22 = rtDW.NED_convert - rtDW.DataStoreReadX_i[0];
 8009a32:	1d3b      	adds	r3, r7, #4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f503 6349 	add.w	r3, r3, #3216	; 0xc90
 8009a3a:	ed93 6b00 	vldr	d6, [r3]
 8009a3e:	1d3b      	adds	r3, r7, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8009a46:	ed93 7b00 	vldr	d7, [r3]
 8009a4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a4e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009a52:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 8009a56:	2300      	movs	r3, #0
 8009a58:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009a5c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	f300 808a 	bgt.w	8009b7a <_ZN27positionEstimatorModelClass4stepEv+0x2e02>
      u = rtDW.P_a[i] * dHdx_1[0];
 8009a66:	1d3b      	adds	r3, r7, #4
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a6e:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	4413      	add	r3, r2
 8009a76:	ed93 6b00 	vldr	d6, [r3]
 8009a7a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009a7e:	ed93 7b00 	vldr	d7, [r3]
 8009a82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a86:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009a8a:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_a[i + 3] * dHdx_1[1];
 8009a8e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009a92:	3303      	adds	r3, #3
 8009a94:	1d3a      	adds	r2, r7, #4
 8009a96:	6812      	ldr	r2, [r2, #0]
 8009a98:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009a9c:	00db      	lsls	r3, r3, #3
 8009a9e:	4413      	add	r3, r2
 8009aa0:	ed93 6b00 	vldr	d6, [r3]
 8009aa4:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009aa8:	ed93 7b02 	vldr	d7, [r3, #8]
 8009aac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ab0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009ab4:	ed93 6b00 	vldr	d6, [r3]
 8009ab8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009abc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009ac0:	ed83 7b00 	vstr	d7, [r3]
      u += rtDW.P_a[i + 6] * dHdx_1[2];
 8009ac4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009ac8:	3306      	adds	r3, #6
 8009aca:	1d3a      	adds	r2, r7, #4
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009ad2:	00db      	lsls	r3, r3, #3
 8009ad4:	4413      	add	r3, r2
 8009ad6:	ed93 6b00 	vldr	d6, [r3]
 8009ada:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8009ade:	ed93 7b04 	vldr	d7, [r3, #16]
 8009ae2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ae6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009aea:	ed93 6b00 	vldr	d6, [r3]
 8009aee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009af2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009af6:	ed83 7b00 	vstr	d7, [r3]
      u /= epsilon;
 8009afa:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009afe:	ed93 5b00 	vldr	d5, [r3]
 8009b02:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8009b06:	ed93 6b00 	vldr	d6, [r3]
 8009b0a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009b0e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009b12:	ed83 7b00 	vstr	d7, [r3]
      rtDW.xNew_p[i] = u * a22 + rtDW.DataStoreReadX_i[i];
 8009b16:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009b1a:	ed93 6b00 	vldr	d6, [r3]
 8009b1e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8009b22:	ed93 7b00 	vldr	d7, [r3]
 8009b26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b2a:	1d3b      	adds	r3, r7, #4
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b32:	f203 1311 	addw	r3, r3, #273	; 0x111
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	4413      	add	r3, r2
 8009b3a:	ed93 7b00 	vldr	d7, [r3]
 8009b3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009b42:	1d3b      	adds	r3, r7, #4
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b4a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	4413      	add	r3, r2
 8009b52:	ed83 7b00 	vstr	d7, [r3]
      imvec_0[i] = u;
 8009b56:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8009b5a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b5e:	00db      	lsls	r3, r3, #3
 8009b60:	441a      	add	r2, r3
 8009b62:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009b66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b6a:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 8009b6e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009b72:	3301      	adds	r3, #1
 8009b74:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009b78:	e770      	b.n	8009a5c <_ZN27positionEstimatorModelClass4stepEv+0x2ce4>
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009b80:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	dc52      	bgt.n	8009c2e <_ZN27positionEstimatorModelClass4stepEv+0x2eb6>
      u = dHdx_1[r1];
 8009b88:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8009b8c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	4413      	add	r3, r2
 8009b94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b98:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009b9c:	e9c2 3400 	strd	r3, r4, [r2]
      imvec_1[3 * r1] = imvec_0[0] * u;
 8009ba0:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009ba4:	ed93 6b00 	vldr	d6, [r3]
 8009ba8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009bac:	4613      	mov	r3, r2
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009bb6:	ed92 7b00 	vldr	d7, [r2]
 8009bba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009bbe:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 1] = imvec_0[1] * u;
 8009bca:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009bce:	ed93 6b02 	vldr	d6, [r3, #8]
 8009bd2:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	4413      	add	r3, r2
 8009bdc:	3301      	adds	r3, #1
 8009bde:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009be2:	ed92 7b00 	vldr	d7, [r2]
 8009be6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009bea:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[3 * r1 + 2] = imvec_0[2] * u;
 8009bf6:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8009bfa:	ed93 6b04 	vldr	d6, [r3, #16]
 8009bfe:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009c02:	4613      	mov	r3, r2
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	4413      	add	r3, r2
 8009c08:	3302      	adds	r3, #2
 8009c0a:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009c0e:	ed92 7b00 	vldr	d7, [r2]
 8009c12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009c16:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	4413      	add	r3, r2
 8009c1e:	ed83 7b00 	vstr	d7, [r3]
    for (r1 = 0; r1 < 3; r1++) {
 8009c22:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009c26:	3301      	adds	r3, #1
 8009c28:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009c2c:	e7a8      	b.n	8009b80 <_ZN27positionEstimatorModelClass4stepEv+0x2e08>
    }

    for (r1 = 0; r1 < 3; r1++) {
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009c34:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	f300 809b 	bgt.w	8009d74 <_ZN27positionEstimatorModelClass4stepEv+0x2ffc>
      for (i = 0; i < 3; i++) {
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009c44:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	f300 808b 	bgt.w	8009d64 <_ZN27positionEstimatorModelClass4stepEv+0x2fec>
        u = rtDW.P_a[3 * r1] * imvec_1[i];
 8009c4e:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009c52:	4613      	mov	r3, r2
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	4413      	add	r3, r2
 8009c58:	1d3a      	adds	r2, r7, #4
 8009c5a:	6812      	ldr	r2, [r2, #0]
 8009c5c:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009c60:	00db      	lsls	r3, r3, #3
 8009c62:	4413      	add	r3, r2
 8009c64:	ed93 6b00 	vldr	d6, [r3]
 8009c68:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009c6c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	4413      	add	r3, r2
 8009c74:	ed93 7b00 	vldr	d7, [r3]
 8009c78:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009c7c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009c80:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_a[3 * r1 + 1] * imvec_1[i + 3];
 8009c84:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009c88:	4613      	mov	r3, r2
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	4413      	add	r3, r2
 8009c8e:	3301      	adds	r3, #1
 8009c90:	1d3a      	adds	r2, r7, #4
 8009c92:	6812      	ldr	r2, [r2, #0]
 8009c94:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	4413      	add	r3, r2
 8009c9c:	ed93 6b00 	vldr	d6, [r3]
 8009ca0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009ca4:	3303      	adds	r3, #3
 8009ca6:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	4413      	add	r3, r2
 8009cae:	ed93 7b00 	vldr	d7, [r3]
 8009cb2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009cb6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009cba:	ed93 6b00 	vldr	d6, [r3]
 8009cbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009cc2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009cc6:	ed83 7b00 	vstr	d7, [r3]
        u += rtDW.P_a[3 * r1 + 2] * imvec_1[i + 6];
 8009cca:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009cce:	4613      	mov	r3, r2
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	4413      	add	r3, r2
 8009cd4:	3302      	adds	r3, #2
 8009cd6:	1d3a      	adds	r2, r7, #4
 8009cd8:	6812      	ldr	r2, [r2, #0]
 8009cda:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	4413      	add	r3, r2
 8009ce2:	ed93 6b00 	vldr	d6, [r3]
 8009ce6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009cea:	3306      	adds	r3, #6
 8009cec:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8009cf0:	00db      	lsls	r3, r3, #3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	ed93 7b00 	vldr	d7, [r3]
 8009cf8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009cfc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009d00:	ed93 6b00 	vldr	d6, [r3]
 8009d04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009d08:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8009d0c:	ed83 7b00 	vstr	d7, [r3]
        a[i + 3 * r1] = rtDW.P_a[3 * r1 + i] - u;
 8009d10:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009d14:	4613      	mov	r3, r2
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	441a      	add	r2, r3
 8009d1a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d1e:	4413      	add	r3, r2
 8009d20:	1d3a      	adds	r2, r7, #4
 8009d22:	6812      	ldr	r2, [r2, #0]
 8009d24:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009d28:	00db      	lsls	r3, r3, #3
 8009d2a:	4413      	add	r3, r2
 8009d2c:	ed93 6b00 	vldr	d6, [r3]
 8009d30:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8009d34:	4613      	mov	r3, r2
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	441a      	add	r2, r3
 8009d3a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d3e:	4413      	add	r3, r2
 8009d40:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8009d44:	ed92 7b00 	vldr	d7, [r2]
 8009d48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009d4c:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8009d50:	00db      	lsls	r3, r3, #3
 8009d52:	4413      	add	r3, r2
 8009d54:	ed83 7b00 	vstr	d7, [r3]
      for (i = 0; i < 3; i++) {
 8009d58:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009d62:	e76f      	b.n	8009c44 <_ZN27positionEstimatorModelClass4stepEv+0x2ecc>
    for (r1 = 0; r1 < 3; r1++) {
 8009d64:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8009d68:	3301      	adds	r3, #1
 8009d6a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 8009d6e:	e761      	b.n	8009c34 <_ZN27positionEstimatorModelClass4stepEv+0x2ebc>
 8009d70:	24000258 	.word	0x24000258
      }
    }

    for (i = 0; i < 9; i++) {
 8009d74:	2300      	movs	r3, #0
 8009d76:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009d7a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d7e:	2b08      	cmp	r3, #8
 8009d80:	dc2b      	bgt.n	8009dda <_ZN27positionEstimatorModelClass4stepEv+0x3062>
      rtDW.P_a[i] = a[i];
 8009d82:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8009d86:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	4413      	add	r3, r2
 8009d8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d92:	1d3a      	adds	r2, r7, #4
 8009d94:	6811      	ldr	r1, [r2, #0]
 8009d96:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009d9a:	f202 1217 	addw	r2, r2, #279	; 0x117
 8009d9e:	00d2      	lsls	r2, r2, #3
 8009da0:	440a      	add	r2, r1
 8009da2:	e9c2 3400 	strd	r3, r4, [r2]

      // DataStoreWrite: '<S6>/Data Store WriteP'
      rtDW.P_i_m[i] = rtDW.P_a[i];
 8009da6:	1d3b      	adds	r3, r7, #4
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009dae:	f203 1317 	addw	r3, r3, #279	; 0x117
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	4413      	add	r3, r2
 8009db6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009dba:	1d3a      	adds	r2, r7, #4
 8009dbc:	6811      	ldr	r1, [r2, #0]
 8009dbe:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009dc2:	f202 122f 	addw	r2, r2, #303	; 0x12f
 8009dc6:	00d2      	lsls	r2, r2, #3
 8009dc8:	440a      	add	r2, r1
 8009dca:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 8009dce:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009dd8:	e7cf      	b.n	8009d7a <_ZN27positionEstimatorModelClass4stepEv+0x3002>
    }

    // End of MATLAB Function: '<S6>/Correct'

    // DataStoreWrite: '<S6>/Data Store WriteX'
    rtDW.x[0] = rtDW.xNew_p[0];
 8009dda:	1d3b      	adds	r3, r7, #4
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8009de2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009de6:	1d3a      	adds	r2, r7, #4
 8009de8:	6812      	ldr	r2, [r2, #0]
 8009dea:	f502 621c 	add.w	r2, r2, #2496	; 0x9c0
 8009dee:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtDW.xNew_p[1];
 8009df2:	1d3b      	adds	r3, r7, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8
 8009dfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009dfe:	1d3a      	adds	r2, r7, #4
 8009e00:	6812      	ldr	r2, [r2, #0]
 8009e02:	f602 12c8 	addw	r2, r2, #2504	; 0x9c8
 8009e06:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtDW.xNew_p[2];
 8009e0a:	1d3b      	adds	r3, r7, #4
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8009e12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e16:	1d3a      	adds	r2, r7, #4
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	f502 621d 	add.w	r2, r2, #2512	; 0x9d0
 8009e1e:	e9c2 3400 	strd	r3, r4, [r2]
  // End of Outputs for SubSystem: '<S1>/Correct3'

  // DataTypeConversion: '<S1>/DataTypeConversion_Enable4' incorporates:
  //   Inport: '<Root>/LidarFlag'

  rtDW.DataTypeConversion_Enable4 = (rtU.LidarFlag != 0.0);
 8009e22:	1d3b      	adds	r3, r7, #4
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f603 53f8 	addw	r3, r3, #3576	; 0xdf8
 8009e2a:	ed93 7b00 	vldr	d7, [r3]
 8009e2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e36:	bf14      	ite	ne
 8009e38:	2301      	movne	r3, #1
 8009e3a:	2300      	moveq	r3, #0
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	1d3b      	adds	r3, r7, #4
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f883 2d62 	strb.w	r2, [r3, #3426]	; 0xd62

  // Outputs for Enabled SubSystem: '<S1>/Correct4'
  // Constant: '<S1>/R4'
  Correct2(rtDW.DataTypeConversion_Enable4, rtDW.NED_convert1, rtP.R4_Value,
 8009e48:	1d3b      	adds	r3, r7, #4
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f893 1d62 	ldrb.w	r1, [r3, #3426]	; 0xd62
 8009e50:	1d3b      	adds	r3, r7, #4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f603 4388 	addw	r3, r3, #3208	; 0xc88
 8009e58:	ed93 7b00 	vldr	d7, [r3]
 8009e5c:	4b89      	ldr	r3, [pc, #548]	; (800a084 <_ZN27positionEstimatorModelClass4stepEv+0x330c>)
 8009e5e:	ed93 6b78 	vldr	d6, [r3, #480]	; 0x1e0
 8009e62:	1d3b      	adds	r3, r7, #4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f893 4d67 	ldrb.w	r4, [r3, #3431]	; 0xd67
 8009e6a:	1d3b      	adds	r3, r7, #4
 8009e6c:	681d      	ldr	r5, [r3, #0]
 8009e6e:	1d3b      	adds	r3, r7, #4
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8009e76:	1d3a      	adds	r2, r7, #4
 8009e78:	6812      	ldr	r2, [r2, #0]
 8009e7a:	f502 621c 	add.w	r2, r2, #2496	; 0x9c0
 8009e7e:	1d38      	adds	r0, r7, #4
 8009e80:	9201      	str	r2, [sp, #4]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	462b      	mov	r3, r5
 8009e86:	4622      	mov	r2, r4
 8009e88:	eeb0 1b46 	vmov.f64	d1, d6
 8009e8c:	eeb0 0b47 	vmov.f64	d0, d7
 8009e90:	6800      	ldr	r0, [r0, #0]
 8009e92:	f7fb fc75 	bl	8005780 <_ZN27positionEstimatorModelClass8Correct2EhddhPNS_11DW_Correct2EPdS2_>

  // End of Outputs for SubSystem: '<S1>/Correct4'

  // Outputs for Atomic SubSystem: '<S1>/Output'
  // DataStoreRead: '<S8>/Data Store Read'
  rtDW.DataStoreRead_f[0] = rtDW.x[0];
 8009e96:	1d3b      	adds	r3, r7, #4
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8009e9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ea2:	1d3a      	adds	r2, r7, #4
 8009ea4:	6812      	ldr	r2, [r2, #0]
 8009ea6:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8009eaa:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[1] = rtDW.x[1];
 8009eae:	1d3b      	adds	r3, r7, #4
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8009eb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009eba:	1d3a      	adds	r2, r7, #4
 8009ebc:	6812      	ldr	r2, [r2, #0]
 8009ebe:	f502 6203 	add.w	r2, r2, #2096	; 0x830
 8009ec2:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreRead_f[2] = rtDW.x[2];
 8009ec6:	1d3b      	adds	r3, r7, #4
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8009ece:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ed2:	1d3a      	adds	r2, r7, #4
 8009ed4:	6812      	ldr	r2, [r2, #0]
 8009ed6:	f602 0238 	addw	r2, r2, #2104	; 0x838
 8009eda:	e9c2 3400 	strd	r3, r4, [r2]

  // DataStoreRead: '<S8>/Data Store Read1'
  for (i = 0; i < 9; i++) {
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009ee4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009ee8:	2b08      	cmp	r3, #8
 8009eea:	dc19      	bgt.n	8009f20 <_ZN27positionEstimatorModelClass4stepEv+0x31a8>
    rtDW.DataStoreRead1_h[i] = rtDW.P_i_m[i];
 8009eec:	1d3b      	adds	r3, r7, #4
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009ef4:	f203 132f 	addw	r3, r3, #303	; 0x12f
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	4413      	add	r3, r2
 8009efc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f00:	1d3a      	adds	r2, r7, #4
 8009f02:	6811      	ldr	r1, [r2, #0]
 8009f04:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 8009f08:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8009f0c:	00d2      	lsls	r2, r2, #3
 8009f0e:	440a      	add	r2, r1
 8009f10:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 8009f14:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 8009f18:	3301      	adds	r3, #1
 8009f1a:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8009f1e:	e7e1      	b.n	8009ee4 <_ZN27positionEstimatorModelClass4stepEv+0x316c>
  }

  // End of DataStoreRead: '<S8>/Data Store Read1'

  // Inport: '<S8>/uBlockOrdering'
  rtDW.uBlockOrdering_b = rtDW.Correct4.blockOrdering;
 8009f20:	1d3b      	adds	r3, r7, #4
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8009f28:	1d3b      	adds	r3, r7, #4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f883 2d66 	strb.w	r2, [r3, #3430]	; 0xd66

  // End of Outputs for SubSystem: '<S1>/Output'

  // Outport: '<Root>/estiZ'
  rtY.estiZ = rtDW.DataStoreRead_f[0];
 8009f30:	1d3b      	adds	r3, r7, #4
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8009f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f3c:	1d3a      	adds	r2, r7, #4
 8009f3e:	6812      	ldr	r2, [r2, #0]
 8009f40:	f502 6261 	add.w	r2, r2, #3600	; 0xe10
 8009f44:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVX'
  rtY.estiVX = rtDW.DataStoreRead[2];
 8009f48:	1d3b      	adds	r3, r7, #4
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	e9d3 34d0 	ldrd	r3, r4, [r3, #832]	; 0x340
 8009f50:	1d3a      	adds	r2, r7, #4
 8009f52:	6812      	ldr	r2, [r2, #0]
 8009f54:	f602 6218 	addw	r2, r2, #3608	; 0xe18
 8009f58:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVY'
  rtY.estiVY = rtDW.DataStoreRead[3];
 8009f5c:	1d3b      	adds	r3, r7, #4
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	e9d3 34d2 	ldrd	r3, r4, [r3, #840]	; 0x348
 8009f64:	1d3a      	adds	r2, r7, #4
 8009f66:	6812      	ldr	r2, [r2, #0]
 8009f68:	f502 6262 	add.w	r2, r2, #3616	; 0xe20
 8009f6c:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiVZ'
  rtY.estiVZ = rtDW.DataStoreRead_f[1];
 8009f70:	1d3b      	adds	r3, r7, #4
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8009f78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f7c:	1d3a      	adds	r2, r7, #4
 8009f7e:	6812      	ldr	r2, [r2, #0]
 8009f80:	f602 6228 	addw	r2, r2, #3624	; 0xe28
 8009f84:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAX'
  rtY.estiAX = rtDW.DataStoreRead[4];
 8009f88:	1d3b      	adds	r3, r7, #4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8009f90:	1d3a      	adds	r2, r7, #4
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	f502 6263 	add.w	r2, r2, #3632	; 0xe30
 8009f98:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAY'
  rtY.estiAY = rtDW.DataStoreRead[5];
 8009f9c:	1d3b      	adds	r3, r7, #4
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	e9d3 34d6 	ldrd	r3, r4, [r3, #856]	; 0x358
 8009fa4:	1d3a      	adds	r2, r7, #4
 8009fa6:	6812      	ldr	r2, [r2, #0]
 8009fa8:	f602 6238 	addw	r2, r2, #3640	; 0xe38
 8009fac:	e9c2 3400 	strd	r3, r4, [r2]

  // Outport: '<Root>/estiAZ'
  rtY.estiAZ = rtDW.DataStoreRead_f[2];
 8009fb0:	1d3b      	adds	r3, r7, #4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f603 0338 	addw	r3, r3, #2104	; 0x838
 8009fb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fbc:	1d3a      	adds	r2, r7, #4
 8009fbe:	6812      	ldr	r2, [r2, #0]
 8009fc0:	f502 6264 	add.w	r2, r2, #3648	; 0xe40
 8009fc4:	e9c2 3400 	strd	r3, r4, [r2]

  // Outputs for Atomic SubSystem: '<S1>/Predict'
  // DataStoreRead: '<S9>/Data Store ReadX'
  rtDW.DataStoreReadX_g[0] = rtDW.x[0];
 8009fc8:	1d3b      	adds	r3, r7, #4
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8009fd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fd4:	1d3a      	adds	r2, r7, #4
 8009fd6:	6812      	ldr	r2, [r2, #0]
 8009fd8:	f502 62f6 	add.w	r2, r2, #1968	; 0x7b0
 8009fdc:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[1] = rtDW.x[1];
 8009fe0:	1d3b      	adds	r3, r7, #4
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8009fe8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fec:	1d3a      	adds	r2, r7, #4
 8009fee:	6812      	ldr	r2, [r2, #0]
 8009ff0:	f502 62f7 	add.w	r2, r2, #1976	; 0x7b8
 8009ff4:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.DataStoreReadX_g[2] = rtDW.x[2];
 8009ff8:	1d3b      	adds	r3, r7, #4
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 800a000:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a004:	1d3a      	adds	r2, r7, #4
 800a006:	6812      	ldr	r2, [r2, #0]
 800a008:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 800a00c:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800a010:	2300      	movs	r3, #0
 800a012:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a016:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a01a:	2b08      	cmp	r3, #8
 800a01c:	dc34      	bgt.n	800a088 <_ZN27positionEstimatorModelClass4stepEv+0x3310>
    // DataStoreRead: '<S9>/Data Store ReadP'
    rtDW.P_i[i] = rtDW.P_i_m[i];
 800a01e:	1d3b      	adds	r3, r7, #4
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a026:	f203 132f 	addw	r3, r3, #303	; 0x12f
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	4413      	add	r3, r2
 800a02e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a032:	1d3a      	adds	r2, r7, #4
 800a034:	6811      	ldr	r1, [r2, #0]
 800a036:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a03a:	32fc      	adds	r2, #252	; 0xfc
 800a03c:	00d2      	lsls	r2, r2, #3
 800a03e:	440a      	add	r2, r1
 800a040:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S9>/Predict'
    u = rtDW.P_i[i];
 800a044:	1d3b      	adds	r3, r7, #4
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a04c:	33fc      	adds	r3, #252	; 0xfc
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	4413      	add	r3, r2
 800a052:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a056:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a05a:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_i[i] = u;
 800a05e:	1d3b      	adds	r3, r7, #4
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a066:	33fc      	adds	r3, #252	; 0xfc
 800a068:	00db      	lsls	r3, r3, #3
 800a06a:	441a      	add	r2, r3
 800a06c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a070:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a074:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800a078:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a07c:	3301      	adds	r3, #1
 800a07e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a082:	e7c8      	b.n	800a016 <_ZN27positionEstimatorModelClass4stepEv+0x329e>
 800a084:	24000258 	.word	0x24000258
  }

  // MATLAB Function: '<S9>/Predict' incorporates:
  //   Constant: '<S1>/Q'

  for (r1 = 0; r1 < 3; r1++) {
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a08e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a092:	2b02      	cmp	r3, #2
 800a094:	f300 823a 	bgt.w	800a50c <_ZN27positionEstimatorModelClass4stepEv+0x3794>
    u = 0.0;
 800a098:	f04f 0300 	mov.w	r3, #0
 800a09c:	f04f 0400 	mov.w	r4, #0
 800a0a0:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a0a4:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a0ae:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	f300 810a 	bgt.w	800a2cc <_ZN27positionEstimatorModelClass4stepEv+0x3554>
      u += a_1[3 * i + r1] * rtDW.DataStoreReadX_g[i];
 800a0b8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a0bc:	4613      	mov	r3, r2
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	441a      	add	r2, r3
 800a0c2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a0c6:	4413      	add	r3, r2
 800a0c8:	4a7f      	ldr	r2, [pc, #508]	; (800a2c8 <_ZN27positionEstimatorModelClass4stepEv+0x3550>)
 800a0ca:	00db      	lsls	r3, r3, #3
 800a0cc:	4413      	add	r3, r2
 800a0ce:	ed93 6b00 	vldr	d6, [r3]
 800a0d2:	1d3b      	adds	r3, r7, #4
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a0da:	33f6      	adds	r3, #246	; 0xf6
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	4413      	add	r3, r2
 800a0e0:	ed93 7b00 	vldr	d7, [r3]
 800a0e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a0e8:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a0ec:	ed93 6b00 	vldr	d6, [r3]
 800a0f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a0f4:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a0f8:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = 0.0;
 800a0fc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a100:	4613      	mov	r3, r2
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	441a      	add	r2, r3
 800a106:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a10a:	4413      	add	r3, r2
 800a10c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a110:	00db      	lsls	r3, r3, #3
 800a112:	441a      	add	r2, r3
 800a114:	f04f 0300 	mov.w	r3, #0
 800a118:	f04f 0400 	mov.w	r4, #0
 800a11c:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800a120:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a124:	4613      	mov	r3, r2
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	441a      	add	r2, r3
 800a12a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a12e:	4413      	add	r3, r2
 800a130:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	4413      	add	r3, r2
 800a138:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a13c:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a140:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i] * a_1[r1];
 800a144:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a148:	4613      	mov	r3, r2
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	4413      	add	r3, r2
 800a14e:	1d3a      	adds	r2, r7, #4
 800a150:	6812      	ldr	r2, [r2, #0]
 800a152:	33fc      	adds	r3, #252	; 0xfc
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	4413      	add	r3, r2
 800a158:	ed93 6b00 	vldr	d6, [r3]
 800a15c:	4a5a      	ldr	r2, [pc, #360]	; (800a2c8 <_ZN27positionEstimatorModelClass4stepEv+0x3550>)
 800a15e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	4413      	add	r3, r2
 800a166:	ed93 7b00 	vldr	d7, [r3]
 800a16a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a16e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a172:	ed93 6b00 	vldr	d6, [r3]
 800a176:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a17a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a17e:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = a22;
 800a182:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a186:	4613      	mov	r3, r2
 800a188:	005b      	lsls	r3, r3, #1
 800a18a:	441a      	add	r2, r3
 800a18c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a190:	4413      	add	r3, r2
 800a192:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	441a      	add	r2, r3
 800a19a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a19e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1a2:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800a1a6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	441a      	add	r2, r3
 800a1b0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	4413      	add	r3, r2
 800a1be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1c2:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a1c6:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 1] * a_1[r1 + 3];
 800a1ca:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	4413      	add	r3, r2
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	1d3a      	adds	r2, r7, #4
 800a1d8:	6812      	ldr	r2, [r2, #0]
 800a1da:	33fc      	adds	r3, #252	; 0xfc
 800a1dc:	00db      	lsls	r3, r3, #3
 800a1de:	4413      	add	r3, r2
 800a1e0:	ed93 6b00 	vldr	d6, [r3]
 800a1e4:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a1e8:	3303      	adds	r3, #3
 800a1ea:	4a37      	ldr	r2, [pc, #220]	; (800a2c8 <_ZN27positionEstimatorModelClass4stepEv+0x3550>)
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	4413      	add	r3, r2
 800a1f0:	ed93 7b00 	vldr	d7, [r3]
 800a1f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a1f8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a1fc:	ed93 6b00 	vldr	d6, [r3]
 800a200:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a204:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a208:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = a22;
 800a20c:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a210:	4613      	mov	r3, r2
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	441a      	add	r2, r3
 800a216:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a21a:	4413      	add	r3, r2
 800a21c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a220:	00db      	lsls	r3, r3, #3
 800a222:	441a      	add	r2, r3
 800a224:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a228:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a22c:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = imvec_1[3 * i + r1];
 800a230:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a234:	4613      	mov	r3, r2
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	441a      	add	r2, r3
 800a23a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a23e:	4413      	add	r3, r2
 800a240:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	4413      	add	r3, r2
 800a248:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a24c:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a250:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += rtDW.P_i[3 * i + 2] * a_1[r1 + 6];
 800a254:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a258:	4613      	mov	r3, r2
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	4413      	add	r3, r2
 800a25e:	3302      	adds	r3, #2
 800a260:	1d3a      	adds	r2, r7, #4
 800a262:	6812      	ldr	r2, [r2, #0]
 800a264:	33fc      	adds	r3, #252	; 0xfc
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	4413      	add	r3, r2
 800a26a:	ed93 6b00 	vldr	d6, [r3]
 800a26e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a272:	3306      	adds	r3, #6
 800a274:	4a14      	ldr	r2, [pc, #80]	; (800a2c8 <_ZN27positionEstimatorModelClass4stepEv+0x3550>)
 800a276:	00db      	lsls	r3, r3, #3
 800a278:	4413      	add	r3, r2
 800a27a:	ed93 7b00 	vldr	d7, [r3]
 800a27e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a282:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a286:	ed93 6b00 	vldr	d6, [r3]
 800a28a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a28e:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a292:	ed83 7b00 	vstr	d7, [r3]
      imvec_1[r1 + 3 * i] = a22;
 800a296:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a29a:	4613      	mov	r3, r2
 800a29c:	005b      	lsls	r3, r3, #1
 800a29e:	441a      	add	r2, r3
 800a2a0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	441a      	add	r2, r3
 800a2ae:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a2b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2b6:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a2ba:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a2be:	3301      	adds	r3, #1
 800a2c0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a2c4:	e6f3      	b.n	800a0ae <_ZN27positionEstimatorModelClass4stepEv+0x3336>
 800a2c6:	bf00      	nop
 800a2c8:	0802f1f0 	.word	0x0802f1f0
    }

    rtDW.xNew_k[r1] = u;
 800a2cc:	1d3b      	adds	r3, r7, #4
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a2d4:	33f9      	adds	r3, #249	; 0xf9
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	441a      	add	r2, r3
 800a2da:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a2de:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2e2:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 3; i++) {
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a2ec:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	f300 8105 	bgt.w	800a500 <_ZN27positionEstimatorModelClass4stepEv+0x3788>
      a[r1 + 3 * i] = 0.0;
 800a2f6:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	005b      	lsls	r3, r3, #1
 800a2fe:	441a      	add	r2, r3
 800a300:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a304:	4413      	add	r3, r2
 800a306:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	441a      	add	r2, r3
 800a30e:	f04f 0300 	mov.w	r3, #0
 800a312:	f04f 0400 	mov.w	r4, #0
 800a316:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800a31a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a31e:	4613      	mov	r3, r2
 800a320:	005b      	lsls	r3, r3, #1
 800a322:	441a      	add	r2, r3
 800a324:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a328:	4413      	add	r3, r2
 800a32a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a336:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a33a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i] * imvec_1[r1];
 800a33e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a342:	4613      	mov	r3, r2
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	4413      	add	r3, r2
 800a348:	4acd      	ldr	r2, [pc, #820]	; (800a680 <_ZN27positionEstimatorModelClass4stepEv+0x3908>)
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	4413      	add	r3, r2
 800a34e:	ed93 6b00 	vldr	d6, [r3]
 800a352:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a356:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	4413      	add	r3, r2
 800a35e:	ed93 7b00 	vldr	d7, [r3]
 800a362:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a366:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a36a:	ed93 6b00 	vldr	d6, [r3]
 800a36e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a372:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a376:	ed83 7b00 	vstr	d7, [r3]
      a[r1 + 3 * i] = a22;
 800a37a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a37e:	4613      	mov	r3, r2
 800a380:	005b      	lsls	r3, r3, #1
 800a382:	441a      	add	r2, r3
 800a384:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a388:	4413      	add	r3, r2
 800a38a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	441a      	add	r2, r3
 800a392:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a396:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a39a:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800a39e:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	441a      	add	r2, r3
 800a3a8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a3b2:	00db      	lsls	r3, r3, #3
 800a3b4:	4413      	add	r3, r2
 800a3b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3ba:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a3be:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 1] * imvec_1[r1 + 3];
 800a3c2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	4413      	add	r3, r2
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	4aac      	ldr	r2, [pc, #688]	; (800a680 <_ZN27positionEstimatorModelClass4stepEv+0x3908>)
 800a3d0:	00db      	lsls	r3, r3, #3
 800a3d2:	4413      	add	r3, r2
 800a3d4:	ed93 6b00 	vldr	d6, [r3]
 800a3d8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a3dc:	3303      	adds	r3, #3
 800a3de:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a3e2:	00db      	lsls	r3, r3, #3
 800a3e4:	4413      	add	r3, r2
 800a3e6:	ed93 7b00 	vldr	d7, [r3]
 800a3ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a3ee:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a3f2:	ed93 6b00 	vldr	d6, [r3]
 800a3f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a3fa:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a3fe:	ed83 7b00 	vstr	d7, [r3]
      a[r1 + 3 * i] = a22;
 800a402:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a406:	4613      	mov	r3, r2
 800a408:	005b      	lsls	r3, r3, #1
 800a40a:	441a      	add	r2, r3
 800a40c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a410:	4413      	add	r3, r2
 800a412:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	441a      	add	r2, r3
 800a41a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a41e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a422:	e9c2 3400 	strd	r3, r4, [r2]
      a22 = a[3 * i + r1];
 800a426:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a42a:	4613      	mov	r3, r2
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	441a      	add	r2, r3
 800a430:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a434:	4413      	add	r3, r2
 800a436:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	4413      	add	r3, r2
 800a43e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a442:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a446:	e9c2 3400 	strd	r3, r4, [r2]
      a22 += b[3 * i + 2] * imvec_1[r1 + 6];
 800a44a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a44e:	4613      	mov	r3, r2
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	4413      	add	r3, r2
 800a454:	3302      	adds	r3, #2
 800a456:	4a8a      	ldr	r2, [pc, #552]	; (800a680 <_ZN27positionEstimatorModelClass4stepEv+0x3908>)
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	4413      	add	r3, r2
 800a45c:	ed93 6b00 	vldr	d6, [r3]
 800a460:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a464:	3306      	adds	r3, #6
 800a466:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	4413      	add	r3, r2
 800a46e:	ed93 7b00 	vldr	d7, [r3]
 800a472:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a476:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a47a:	ed93 6b00 	vldr	d6, [r3]
 800a47e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a482:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a486:	ed83 7b00 	vstr	d7, [r3]
      a[r1 + 3 * i] = a22;
 800a48a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a48e:	4613      	mov	r3, r2
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	441a      	add	r2, r3
 800a494:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a498:	4413      	add	r3, r2
 800a49a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	441a      	add	r2, r3
 800a4a2:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a4a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4aa:	e9c2 3400 	strd	r3, r4, [r2]
      b_a[i + 3 * r1] = b_a_1[i] * rtP.Q_Value * b_a_1[r1];
 800a4ae:	4a75      	ldr	r2, [pc, #468]	; (800a684 <_ZN27positionEstimatorModelClass4stepEv+0x390c>)
 800a4b0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	4413      	add	r3, r2
 800a4b8:	ed93 6b00 	vldr	d6, [r3]
 800a4bc:	4b72      	ldr	r3, [pc, #456]	; (800a688 <_ZN27positionEstimatorModelClass4stepEv+0x3910>)
 800a4be:	ed93 7b8a 	vldr	d7, [r3, #552]	; 0x228
 800a4c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a4c6:	4a6f      	ldr	r2, [pc, #444]	; (800a684 <_ZN27positionEstimatorModelClass4stepEv+0x390c>)
 800a4c8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a4cc:	00db      	lsls	r3, r3, #3
 800a4ce:	4413      	add	r3, r2
 800a4d0:	ed93 7b00 	vldr	d7, [r3]
 800a4d4:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a4d8:	4613      	mov	r3, r2
 800a4da:	005b      	lsls	r3, r3, #1
 800a4dc:	441a      	add	r2, r3
 800a4de:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4e2:	4413      	add	r3, r2
 800a4e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a4e8:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	4413      	add	r3, r2
 800a4f0:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 3; i++) {
 800a4f4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a4fe:	e6f5      	b.n	800a2ec <_ZN27positionEstimatorModelClass4stepEv+0x3574>
  for (r1 = 0; r1 < 3; r1++) {
 800a500:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a504:	3301      	adds	r3, #1
 800a506:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a50a:	e5c0      	b.n	800a08e <_ZN27positionEstimatorModelClass4stepEv+0x3316>
    }
  }

  for (i = 0; i < 9; i++) {
 800a50c:	2300      	movs	r3, #0
 800a50e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a512:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a516:	2b08      	cmp	r3, #8
 800a518:	dc33      	bgt.n	800a582 <_ZN27positionEstimatorModelClass4stepEv+0x380a>
    rtDW.P_i[i] = a[i] + b_a[i];
 800a51a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800a51e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	4413      	add	r3, r2
 800a526:	ed93 6b00 	vldr	d6, [r3]
 800a52a:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800a52e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	4413      	add	r3, r2
 800a536:	ed93 7b00 	vldr	d7, [r3]
 800a53a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a53e:	1d3b      	adds	r3, r7, #4
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a546:	33fc      	adds	r3, #252	; 0xfc
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	4413      	add	r3, r2
 800a54c:	ed83 7b00 	vstr	d7, [r3]

    // DataStoreWrite: '<S9>/Data Store WriteP'
    rtDW.P_i_m[i] = rtDW.P_i[i];
 800a550:	1d3b      	adds	r3, r7, #4
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a558:	33fc      	adds	r3, #252	; 0xfc
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	4413      	add	r3, r2
 800a55e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a562:	1d3a      	adds	r2, r7, #4
 800a564:	6811      	ldr	r1, [r2, #0]
 800a566:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a56a:	f202 122f 	addw	r2, r2, #303	; 0x12f
 800a56e:	00d2      	lsls	r2, r2, #3
 800a570:	440a      	add	r2, r1
 800a572:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 9; i++) {
 800a576:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a57a:	3301      	adds	r3, #1
 800a57c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a580:	e7c7      	b.n	800a512 <_ZN27positionEstimatorModelClass4stepEv+0x379a>
  }

  // DataStoreWrite: '<S9>/Data Store WriteX'
  rtDW.x[0] = rtDW.xNew_k[0];
 800a582:	1d3b      	adds	r3, r7, #4
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 800a58a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a58e:	1d3a      	adds	r2, r7, #4
 800a590:	6812      	ldr	r2, [r2, #0]
 800a592:	f502 621c 	add.w	r2, r2, #2496	; 0x9c0
 800a596:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[1] = rtDW.xNew_k[1];
 800a59a:	1d3b      	adds	r3, r7, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a5a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5a6:	1d3a      	adds	r2, r7, #4
 800a5a8:	6812      	ldr	r2, [r2, #0]
 800a5aa:	f602 12c8 	addw	r2, r2, #2504	; 0x9c8
 800a5ae:	e9c2 3400 	strd	r3, r4, [r2]
  rtDW.x[2] = rtDW.xNew_k[2];
 800a5b2:	1d3b      	adds	r3, r7, #4
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f503 63fb 	add.w	r3, r3, #2008	; 0x7d8
 800a5ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5be:	1d3a      	adds	r2, r7, #4
 800a5c0:	6812      	ldr	r2, [r2, #0]
 800a5c2:	f502 621d 	add.w	r2, r2, #2512	; 0x9d0
 800a5c6:	e9c2 3400 	strd	r3, r4, [r2]

  // End of Outputs for SubSystem: '<S1>/Predict'

  // Outputs for Atomic SubSystem: '<S2>/Predict'
  // DataStoreRead: '<S18>/Data Store ReadX'
  for (i = 0; i < 6; i++) {
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a5d0:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a5d4:	2b05      	cmp	r3, #5
 800a5d6:	dc18      	bgt.n	800a60a <_ZN27positionEstimatorModelClass4stepEv+0x3892>
    rtDW.DataStoreReadX[i] = rtDW.x_p[i];
 800a5d8:	1d3b      	adds	r3, r7, #4
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a5e0:	f203 135f 	addw	r3, r3, #351	; 0x15f
 800a5e4:	00db      	lsls	r3, r3, #3
 800a5e6:	4413      	add	r3, r2
 800a5e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5ec:	1d3a      	adds	r2, r7, #4
 800a5ee:	6811      	ldr	r1, [r2, #0]
 800a5f0:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a5f4:	3236      	adds	r2, #54	; 0x36
 800a5f6:	00d2      	lsls	r2, r2, #3
 800a5f8:	440a      	add	r2, r1
 800a5fa:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800a5fe:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a602:	3301      	adds	r3, #1
 800a604:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a608:	e7e2      	b.n	800a5d0 <_ZN27positionEstimatorModelClass4stepEv+0x3858>
  }

  // End of DataStoreRead: '<S18>/Data Store ReadX'
  for (i = 0; i < 36; i++) {
 800a60a:	2300      	movs	r3, #0
 800a60c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a610:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a614:	2b23      	cmp	r3, #35	; 0x23
 800a616:	dc39      	bgt.n	800a68c <_ZN27positionEstimatorModelClass4stepEv+0x3914>
    // DataStoreRead: '<S18>/Data Store ReadP'
    rtDW.P_n[i] = rtDW.P_n_c[i];
 800a618:	1d3b      	adds	r3, r7, #4
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a620:	f203 133b 	addw	r3, r3, #315	; 0x13b
 800a624:	00db      	lsls	r3, r3, #3
 800a626:	4413      	add	r3, r2
 800a628:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a62c:	1d3a      	adds	r2, r7, #4
 800a62e:	6811      	ldr	r1, [r2, #0]
 800a630:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a634:	3242      	adds	r2, #66	; 0x42
 800a636:	00d2      	lsls	r2, r2, #3
 800a638:	440a      	add	r2, r1
 800a63a:	e9c2 3400 	strd	r3, r4, [r2]

    // MATLAB Function: '<S18>/Predict'
    u = rtDW.P_n[i];
 800a63e:	1d3b      	adds	r3, r7, #4
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a646:	3342      	adds	r3, #66	; 0x42
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	4413      	add	r3, r2
 800a64c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a650:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a654:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.P_n[i] = u;
 800a658:	1d3b      	adds	r3, r7, #4
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a660:	3342      	adds	r3, #66	; 0x42
 800a662:	00db      	lsls	r3, r3, #3
 800a664:	441a      	add	r2, r3
 800a666:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a66a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a66e:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800a672:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a676:	3301      	adds	r3, #1
 800a678:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a67c:	e7c8      	b.n	800a610 <_ZN27positionEstimatorModelClass4stepEv+0x3898>
 800a67e:	bf00      	nop
 800a680:	0802f238 	.word	0x0802f238
 800a684:	0802f280 	.word	0x0802f280
 800a688:	24000258 	.word	0x24000258
  }

  // MATLAB Function: '<S18>/Predict' incorporates:
  //   Constant: '<S2>/Q'

  for (r1 = 0; r1 < 6; r1++) {
 800a68c:	2300      	movs	r3, #0
 800a68e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a692:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a696:	2b05      	cmp	r3, #5
 800a698:	f300 8169 	bgt.w	800a96e <_ZN27positionEstimatorModelClass4stepEv+0x3bf6>
    u = 0.0;
 800a69c:	f04f 0300 	mov.w	r3, #0
 800a6a0:	f04f 0400 	mov.w	r4, #0
 800a6a4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800a6a8:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a6b2:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	f300 809f 	bgt.w	800a7fa <_ZN27positionEstimatorModelClass4stepEv+0x3a82>
      u += a_2[6 * i + r1] * rtDW.DataStoreReadX[i];
 800a6bc:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	005b      	lsls	r3, r3, #1
 800a6c4:	4413      	add	r3, r2
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a6ce:	4413      	add	r3, r2
 800a6d0:	4ad8      	ldr	r2, [pc, #864]	; (800aa34 <_ZN27positionEstimatorModelClass4stepEv+0x3cbc>)
 800a6d2:	00db      	lsls	r3, r3, #3
 800a6d4:	4413      	add	r3, r2
 800a6d6:	ed93 6b00 	vldr	d6, [r3]
 800a6da:	1d3b      	adds	r3, r7, #4
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a6e2:	3336      	adds	r3, #54	; 0x36
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	4413      	add	r3, r2
 800a6e8:	ed93 7b00 	vldr	d7, [r3]
 800a6ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a6f0:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a6f4:	ed93 6b00 	vldr	d6, [r3]
 800a6f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a6fc:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a700:	ed83 7b00 	vstr	d7, [r3]
      gain_0[r1 + 6 * i] = 0.0;
 800a704:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a708:	4613      	mov	r3, r2
 800a70a:	005b      	lsls	r3, r3, #1
 800a70c:	4413      	add	r3, r2
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	461a      	mov	r2, r3
 800a712:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a716:	4413      	add	r3, r2
 800a718:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	441a      	add	r2, r3
 800a720:	f04f 0300 	mov.w	r3, #0
 800a724:	f04f 0400 	mov.w	r4, #0
 800a728:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800a72c:	2300      	movs	r3, #0
 800a72e:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800a732:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800a736:	2b05      	cmp	r3, #5
 800a738:	dc59      	bgt.n	800a7ee <_ZN27positionEstimatorModelClass4stepEv+0x3a76>
        a22 = gain_0[6 * i + r1];
 800a73a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a73e:	4613      	mov	r3, r2
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	4413      	add	r3, r2
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	461a      	mov	r2, r3
 800a748:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a74c:	4413      	add	r3, r2
 800a74e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	4413      	add	r3, r2
 800a756:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a75a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a75e:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += a_2[6 * k + r1] * rtDW.P_n[6 * i + k];
 800a762:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800a766:	4613      	mov	r3, r2
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	4413      	add	r3, r2
 800a76c:	005b      	lsls	r3, r3, #1
 800a76e:	461a      	mov	r2, r3
 800a770:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a774:	4413      	add	r3, r2
 800a776:	4aaf      	ldr	r2, [pc, #700]	; (800aa34 <_ZN27positionEstimatorModelClass4stepEv+0x3cbc>)
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	4413      	add	r3, r2
 800a77c:	ed93 6b00 	vldr	d6, [r3]
 800a780:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a784:	4613      	mov	r3, r2
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	4413      	add	r3, r2
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	461a      	mov	r2, r3
 800a78e:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800a792:	4413      	add	r3, r2
 800a794:	1d3a      	adds	r2, r7, #4
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	3342      	adds	r3, #66	; 0x42
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	4413      	add	r3, r2
 800a79e:	ed93 7b00 	vldr	d7, [r3]
 800a7a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a7a6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a7aa:	ed93 6b00 	vldr	d6, [r3]
 800a7ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a7b2:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a7b6:	ed83 7b00 	vstr	d7, [r3]
        gain_0[r1 + 6 * i] = a22;
 800a7ba:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a7be:	4613      	mov	r3, r2
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	4413      	add	r3, r2
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800a7d2:	00db      	lsls	r3, r3, #3
 800a7d4:	441a      	add	r2, r3
 800a7d6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a7da:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7de:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800a7e2:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800a7ec:	e7a1      	b.n	800a732 <_ZN27positionEstimatorModelClass4stepEv+0x39ba>
    for (i = 0; i < 6; i++) {
 800a7ee:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a7f8:	e75b      	b.n	800a6b2 <_ZN27positionEstimatorModelClass4stepEv+0x393a>
      }
    }

    rtDW.xNew[r1] = u;
 800a7fa:	1d3b      	adds	r3, r7, #4
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a802:	333c      	adds	r3, #60	; 0x3c
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	441a      	add	r2, r3
 800a808:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800a80c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a810:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800a814:	2300      	movs	r3, #0
 800a816:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a81a:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a81e:	2b05      	cmp	r3, #5
 800a820:	f300 809f 	bgt.w	800a962 <_ZN27positionEstimatorModelClass4stepEv+0x3bea>
      a_0[r1 + 6 * i] = 0.0;
 800a824:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a828:	4613      	mov	r3, r2
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	4413      	add	r3, r2
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	461a      	mov	r2, r3
 800a832:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a836:	4413      	add	r3, r2
 800a838:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800a83c:	00db      	lsls	r3, r3, #3
 800a83e:	441a      	add	r2, r3
 800a840:	f04f 0300 	mov.w	r3, #0
 800a844:	f04f 0400 	mov.w	r4, #0
 800a848:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800a84c:	2300      	movs	r3, #0
 800a84e:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800a852:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800a856:	2b05      	cmp	r3, #5
 800a858:	dc58      	bgt.n	800a90c <_ZN27positionEstimatorModelClass4stepEv+0x3b94>
        a22 = a_0[6 * i + r1];
 800a85a:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a85e:	4613      	mov	r3, r2
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	4413      	add	r3, r2
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	461a      	mov	r2, r3
 800a868:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a86c:	4413      	add	r3, r2
 800a86e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	4413      	add	r3, r2
 800a876:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a87a:	f607 02a8 	addw	r2, r7, #2216	; 0x8a8
 800a87e:	e9c2 3400 	strd	r3, r4, [r2]
        a22 += gain_0[6 * k + r1] * b_0[6 * i + k];
 800a882:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800a886:	4613      	mov	r3, r2
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	4413      	add	r3, r2
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	461a      	mov	r2, r3
 800a890:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a894:	4413      	add	r3, r2
 800a896:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	ed93 6b00 	vldr	d6, [r3]
 800a8a2:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	4413      	add	r3, r2
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800a8b4:	4413      	add	r3, r2
 800a8b6:	4a60      	ldr	r2, [pc, #384]	; (800aa38 <_ZN27positionEstimatorModelClass4stepEv+0x3cc0>)
 800a8b8:	00db      	lsls	r3, r3, #3
 800a8ba:	4413      	add	r3, r2
 800a8bc:	ed93 7b00 	vldr	d7, [r3]
 800a8c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a8c4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a8c8:	ed93 6b00 	vldr	d6, [r3]
 800a8cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a8d0:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a8d4:	ed83 7b00 	vstr	d7, [r3]
        a_0[r1 + 6 * i] = a22;
 800a8d8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a8dc:	4613      	mov	r3, r2
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	4413      	add	r3, r2
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800a8f0:	00db      	lsls	r3, r3, #3
 800a8f2:	441a      	add	r2, r3
 800a8f4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800a8f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8fc:	e9c2 3400 	strd	r3, r4, [r2]
      for (k = 0; k < 6; k++) {
 800a900:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800a904:	3301      	adds	r3, #1
 800a906:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
 800a90a:	e7a2      	b.n	800a852 <_ZN27positionEstimatorModelClass4stepEv+0x3ada>
      }

      b_a_0[i + 6 * r1] = b_a_2[i] * rtP.Q_Value_c * b_a_2[r1];
 800a90c:	4a4b      	ldr	r2, [pc, #300]	; (800aa3c <_ZN27positionEstimatorModelClass4stepEv+0x3cc4>)
 800a90e:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a912:	00db      	lsls	r3, r3, #3
 800a914:	4413      	add	r3, r2
 800a916:	ed93 6b00 	vldr	d6, [r3]
 800a91a:	4b49      	ldr	r3, [pc, #292]	; (800aa40 <_ZN27positionEstimatorModelClass4stepEv+0x3cc8>)
 800a91c:	ed93 7ba6 	vldr	d7, [r3, #664]	; 0x298
 800a920:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a924:	4a45      	ldr	r2, [pc, #276]	; (800aa3c <_ZN27positionEstimatorModelClass4stepEv+0x3cc4>)
 800a926:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a92a:	00db      	lsls	r3, r3, #3
 800a92c:	4413      	add	r3, r2
 800a92e:	ed93 7b00 	vldr	d7, [r3]
 800a932:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800a936:	4613      	mov	r3, r2
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	4413      	add	r3, r2
 800a93c:	005b      	lsls	r3, r3, #1
 800a93e:	461a      	mov	r2, r3
 800a940:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a944:	4413      	add	r3, r2
 800a946:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a94a:	f107 0208 	add.w	r2, r7, #8
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	4413      	add	r3, r2
 800a952:	ed83 7b00 	vstr	d7, [r3]
    for (i = 0; i < 6; i++) {
 800a956:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a95a:	3301      	adds	r3, #1
 800a95c:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a960:	e75b      	b.n	800a81a <_ZN27positionEstimatorModelClass4stepEv+0x3aa2>
  for (r1 = 0; r1 < 6; r1++) {
 800a962:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800a966:	3301      	adds	r3, #1
 800a968:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a96c:	e691      	b.n	800a692 <_ZN27positionEstimatorModelClass4stepEv+0x391a>
    }
  }

  for (i = 0; i < 36; i++) {
 800a96e:	2300      	movs	r3, #0
 800a970:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a974:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a978:	2b23      	cmp	r3, #35	; 0x23
 800a97a:	dc33      	bgt.n	800a9e4 <_ZN27positionEstimatorModelClass4stepEv+0x3c6c>
    rtDW.P_n[i] = a_0[i] + b_a_0[i];
 800a97c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800a980:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	4413      	add	r3, r2
 800a988:	ed93 6b00 	vldr	d6, [r3]
 800a98c:	f107 0208 	add.w	r2, r7, #8
 800a990:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a994:	00db      	lsls	r3, r3, #3
 800a996:	4413      	add	r3, r2
 800a998:	ed93 7b00 	vldr	d7, [r3]
 800a99c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a9a0:	1d3b      	adds	r3, r7, #4
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9a8:	3342      	adds	r3, #66	; 0x42
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	4413      	add	r3, r2
 800a9ae:	ed83 7b00 	vstr	d7, [r3]

    // DataStoreWrite: '<S18>/Data Store WriteP'
    rtDW.P_n_c[i] = rtDW.P_n[i];
 800a9b2:	1d3b      	adds	r3, r7, #4
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9ba:	3342      	adds	r3, #66	; 0x42
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	4413      	add	r3, r2
 800a9c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9c4:	1d3a      	adds	r2, r7, #4
 800a9c6:	6811      	ldr	r1, [r2, #0]
 800a9c8:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800a9cc:	f202 123b 	addw	r2, r2, #315	; 0x13b
 800a9d0:	00d2      	lsls	r2, r2, #3
 800a9d2:	440a      	add	r2, r1
 800a9d4:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 36; i++) {
 800a9d8:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9dc:	3301      	adds	r3, #1
 800a9de:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a9e2:	e7c7      	b.n	800a974 <_ZN27positionEstimatorModelClass4stepEv+0x3bfc>
  }

  // DataStoreWrite: '<S18>/Data Store WriteX'
  for (i = 0; i < 6; i++) {
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a9ea:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9ee:	2b05      	cmp	r3, #5
 800a9f0:	dc18      	bgt.n	800aa24 <_ZN27positionEstimatorModelClass4stepEv+0x3cac>
    rtDW.x_p[i] = rtDW.xNew[i];
 800a9f2:	1d3b      	adds	r3, r7, #4
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800a9fa:	333c      	adds	r3, #60	; 0x3c
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	4413      	add	r3, r2
 800aa00:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa04:	1d3a      	adds	r2, r7, #4
 800aa06:	6811      	ldr	r1, [r2, #0]
 800aa08:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
 800aa0c:	f202 125f 	addw	r2, r2, #351	; 0x15f
 800aa10:	00d2      	lsls	r2, r2, #3
 800aa12:	440a      	add	r2, r1
 800aa14:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 6; i++) {
 800aa18:	f8d7 38bc 	ldr.w	r3, [r7, #2236]	; 0x8bc
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800aa22:	e7e2      	b.n	800a9ea <_ZN27positionEstimatorModelClass4stepEv+0x3c72>
  }

  // End of DataStoreWrite: '<S18>/Data Store WriteX'
  // End of Outputs for SubSystem: '<S2>/Predict'
}
 800aa24:	bf00      	nop
 800aa26:	f507 670d 	add.w	r7, r7, #2256	; 0x8d0
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	ecbd 8b02 	vpop	{d8}
 800aa30:	bdb0      	pop	{r4, r5, r7, pc}
 800aa32:	bf00      	nop
 800aa34:	0802f298 	.word	0x0802f298
 800aa38:	0802f3e8 	.word	0x0802f3e8
 800aa3c:	0802f3b8 	.word	0x0802f3b8
 800aa40:	24000258 	.word	0x24000258

0800aa44 <_ZN27positionEstimatorModelClass10initializeEv>:

// Model initialize function
void positionEstimatorModelClass::initialize()
{
 800aa44:	b590      	push	{r4, r7, lr}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));
 800aa4c:	2008      	movs	r0, #8
 800aa4e:	f7fa fd5b 	bl	8005508 <rt_InitInfAndNaN>

  {
    int32_T i;

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - P'
    for (i = 0; i < 9; i++) {
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	dc12      	bgt.n	800aa82 <_ZN27positionEstimatorModelClass10initializeEv+0x3e>
      rtDW.P_i_m[i] = rtP.DataStoreMemoryP_InitialValue[i];
 800aa5c:	4a41      	ldr	r2, [pc, #260]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3347      	adds	r3, #71	; 0x47
 800aa62:	00db      	lsls	r3, r3, #3
 800aa64:	4413      	add	r3, r2
 800aa66:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa6a:	6879      	ldr	r1, [r7, #4]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	f202 122f 	addw	r2, r2, #303	; 0x12f
 800aa72:	00d2      	lsls	r2, r2, #3
 800aa74:	440a      	add	r2, r1
 800aa76:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 9; i++) {
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	e7e9      	b.n	800aa56 <_ZN27positionEstimatorModelClass10initializeEv+0x12>
    }

    // End of Start for DataStoreMemory: '<S1>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S1>/DataStoreMemory - x'
    rtDW.x[0] = rtP.DataStoreMemoryx_InitialValue[0];
 800aa82:	4b38      	ldr	r3, [pc, #224]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800aa84:	e9d3 34a0 	ldrd	r3, r4, [r3, #640]	; 0x280
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	f502 621c 	add.w	r2, r2, #2496	; 0x9c0
 800aa8e:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[1] = rtP.DataStoreMemoryx_InitialValue[1];
 800aa92:	4b34      	ldr	r3, [pc, #208]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800aa94:	e9d3 34a2 	ldrd	r3, r4, [r3, #648]	; 0x288
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	f602 12c8 	addw	r2, r2, #2504	; 0x9c8
 800aa9e:	e9c2 3400 	strd	r3, r4, [r2]
    rtDW.x[2] = rtP.DataStoreMemoryx_InitialValue[2];
 800aaa2:	4b30      	ldr	r3, [pc, #192]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800aaa4:	e9d3 34a4 	ldrd	r3, r4, [r3, #656]	; 0x290
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	f502 621d 	add.w	r2, r2, #2512	; 0x9d0
 800aaae:	e9c2 3400 	strd	r3, r4, [r2]

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - P'
    for (i = 0; i < 36; i++) {
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b23      	cmp	r3, #35	; 0x23
 800aaba:	dc12      	bgt.n	800aae2 <_ZN27positionEstimatorModelClass10initializeEv+0x9e>
      rtDW.P_n_c[i] = rtP.DataStoreMemoryP_InitialValue_m[i];
 800aabc:	4a29      	ldr	r2, [pc, #164]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3355      	adds	r3, #85	; 0x55
 800aac2:	00db      	lsls	r3, r3, #3
 800aac4:	4413      	add	r3, r2
 800aac6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaca:	6879      	ldr	r1, [r7, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	f202 123b 	addw	r2, r2, #315	; 0x13b
 800aad2:	00d2      	lsls	r2, r2, #3
 800aad4:	440a      	add	r2, r1
 800aad6:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 36; i++) {
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	3301      	adds	r3, #1
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	e7e9      	b.n	800aab6 <_ZN27positionEstimatorModelClass10initializeEv+0x72>
    }

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - P'

    // Start for DataStoreMemory: '<S2>/DataStoreMemory - x'
    for (i = 0; i < 6; i++) {
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b05      	cmp	r3, #5
 800aaea:	dc12      	bgt.n	800ab12 <_ZN27positionEstimatorModelClass10initializeEv+0xce>
      rtDW.x_p[i] = rtP.DataStoreMemoryx_InitialValue_j[i];
 800aaec:	4a1d      	ldr	r2, [pc, #116]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3379      	adds	r3, #121	; 0x79
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	f202 125f 	addw	r2, r2, #351	; 0x15f
 800ab02:	00d2      	lsls	r2, r2, #3
 800ab04:	440a      	add	r2, r1
 800ab06:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 6; i++) {
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	e7e9      	b.n	800aae6 <_ZN27positionEstimatorModelClass10initializeEv+0xa2>

    // End of Start for DataStoreMemory: '<S2>/DataStoreMemory - x'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct1'
    // SystemInitialize for Outport: '<S15>/yBlockOrdering'
    rtDW.blockOrdering_f = rtP.yBlockOrdering_Y0_a;
 800ab12:	4b14      	ldr	r3, [pc, #80]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800ab14:	f893 23fa 	ldrb.w	r2, [r3, #1018]	; 0x3fa
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f883 2d65 	strb.w	r2, [r3, #3429]	; 0xd65

    // End of SystemInitialize for SubSystem: '<S2>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S2>/Correct2'
    // SystemInitialize for Outport: '<S16>/yBlockOrdering'
    rtDW.blockOrdering = rtP.yBlockOrdering_Y0_g;
 800ab1e:	4b11      	ldr	r3, [pc, #68]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800ab20:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f883 2d64 	strb.w	r2, [r3, #3428]	; 0xd64

    // End of SystemInitialize for SubSystem: '<S2>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct1'
    // SystemInitialize for Outport: '<S4>/yBlockOrdering'
    rtDW.blockOrdering_k = rtP.yBlockOrdering_Y0;
 800ab2a:	4b0e      	ldr	r3, [pc, #56]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800ab2c:	f893 23f8 	ldrb.w	r2, [r3, #1016]	; 0x3f8
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f883 2d68 	strb.w	r2, [r3, #3432]	; 0xd68

    // End of SystemInitialize for SubSystem: '<S1>/Correct1'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct2'
    Correct2_Init(&rtDW.Correct2_a, &rtP.Correct2_a);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	33c8      	adds	r3, #200	; 0xc8
 800ab3a:	4a0b      	ldr	r2, [pc, #44]	; (800ab68 <_ZN27positionEstimatorModelClass10initializeEv+0x124>)
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7fa fe0c 	bl	800575c <_ZN27positionEstimatorModelClass13Correct2_InitEPNS_11DW_Correct2EPNS_10P_Correct2E>

    // End of SystemInitialize for SubSystem: '<S1>/Correct2'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct3'
    // SystemInitialize for Outport: '<S6>/yBlockOrdering'
    rtDW.blockOrdering_p = rtP.yBlockOrdering_Y0_b;
 800ab44:	4b07      	ldr	r3, [pc, #28]	; (800ab64 <_ZN27positionEstimatorModelClass10initializeEv+0x120>)
 800ab46:	f893 23f9 	ldrb.w	r2, [r3, #1017]	; 0x3f9
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f883 2d67 	strb.w	r2, [r3, #3431]	; 0xd67

    // End of SystemInitialize for SubSystem: '<S1>/Correct3'

    // SystemInitialize for Enabled SubSystem: '<S1>/Correct4'
    Correct2_Init(&rtDW.Correct4, &rtP.Correct4);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a06      	ldr	r2, [pc, #24]	; (800ab6c <_ZN27positionEstimatorModelClass10initializeEv+0x128>)
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7fa fe00 	bl	800575c <_ZN27positionEstimatorModelClass13Correct2_InitEPNS_11DW_Correct2EPNS_10P_Correct2E>

    // End of SystemInitialize for SubSystem: '<S1>/Correct4'
  }
}
 800ab5c:	bf00      	nop
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd90      	pop	{r4, r7, pc}
 800ab64:	24000258 	.word	0x24000258
 800ab68:	24000657 	.word	0x24000657
 800ab6c:	24000656 	.word	0x24000656

0800ab70 <_ZN27positionEstimatorModelClassC1Ev>:

// Constructor
positionEstimatorModelClass::positionEstimatorModelClass():
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  rtDW()
  ,rtU()
  ,rtY()
  ,rtM()
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f44f 6357 	mov.w	r3, #3440	; 0xd70
 800ab80:	461a      	mov	r2, r3
 800ab82:	2100      	movs	r1, #0
 800ab84:	f023 f85f 	bl	802dc46 <memset>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f503 6357 	add.w	r3, r3, #3440	; 0xd70
 800ab8e:	2290      	movs	r2, #144	; 0x90
 800ab90:	2100      	movs	r1, #0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f023 f857 	bl	802dc46 <memset>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab9e:	2248      	movs	r2, #72	; 0x48
 800aba0:	2100      	movs	r1, #0
 800aba2:	4618      	mov	r0, r3
 800aba4:	f023 f84f 	bl	802dc46 <memset>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f8c3 2e48 	str.w	r2, [r3, #3656]	; 0xe48
{
  // Currently there is no constructor body generated.
}
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4618      	mov	r0, r3
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800abba:	b480      	push	{r7}
 800abbc:	b085      	sub	sp, #20
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	603b      	str	r3, [r7, #0]
 800abc6:	4603      	mov	r3, r0
 800abc8:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800abca:	bf00      	nop
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	603b      	str	r3, [r7, #0]
 800abe2:	4603      	mov	r3, r0
 800abe4:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <_out_char+0x1e>
    _putchar(character);
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	4618      	mov	r0, r3
 800abf0:	f007 f982 	bl	8011ef8 <_putchar>
  }
}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	e002      	b.n	800ac12 <_strnlen_s+0x16>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <_strnlen_s+0x28>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	1e5a      	subs	r2, r3, #1
 800ac1e:	603a      	str	r2, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1f3      	bne.n	800ac0c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	1ad3      	subs	r3, r2, r3
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	2b2f      	cmp	r3, #47	; 0x2f
 800ac44:	d904      	bls.n	800ac50 <_is_digit+0x1a>
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	2b39      	cmp	r3, #57	; 0x39
 800ac4a:	d801      	bhi.n	800ac50 <_is_digit+0x1a>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e000      	b.n	800ac52 <_is_digit+0x1c>
 800ac50:	2300      	movs	r3, #0
 800ac52:	f003 0301 	and.w	r3, r3, #1
 800ac56:	b2db      	uxtb	r3, r3
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800ac70:	e00e      	b.n	800ac90 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	1c59      	adds	r1, r3, #1
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	6011      	str	r1, [r2, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	4403      	add	r3, r0
 800ac8c:	3b30      	subs	r3, #48	; 0x30
 800ac8e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff ffcd 	bl	800ac36 <_is_digit>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1e7      	bne.n	800ac72 <_atoi+0xe>
  }
  return i;
 800aca2:	68fb      	ldr	r3, [r7, #12]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800acac:	b590      	push	{r4, r7, lr}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800acbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d125      	bne.n	800ad14 <_out_rev+0x68>
 800acc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d120      	bne.n	800ad14 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800acd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd4:	617b      	str	r3, [r7, #20]
 800acd6:	e00a      	b.n	800acee <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	1c53      	adds	r3, r2, #1
 800acdc:	607b      	str	r3, [r7, #4]
 800acde:	68fc      	ldr	r4, [r7, #12]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	68b9      	ldr	r1, [r7, #8]
 800ace4:	2020      	movs	r0, #32
 800ace6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	3301      	adds	r3, #1
 800acec:	617b      	str	r3, [r7, #20]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d3f0      	bcc.n	800acd8 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800acf6:	e00d      	b.n	800ad14 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800acf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfa:	3b01      	subs	r3, #1
 800acfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	4413      	add	r3, r2
 800ad04:	7818      	ldrb	r0, [r3, #0]
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	1c53      	adds	r3, r2, #1
 800ad0a:	607b      	str	r3, [r7, #4]
 800ad0c:	68fc      	ldr	r4, [r7, #12]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	68b9      	ldr	r1, [r7, #8]
 800ad12:	47a0      	blx	r4
  while (len) {
 800ad14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1ee      	bne.n	800acf8 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1c:	f003 0302 	and.w	r3, r3, #2
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00e      	beq.n	800ad42 <_out_rev+0x96>
    while (idx - start_idx < width) {
 800ad24:	e007      	b.n	800ad36 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	1c53      	adds	r3, r2, #1
 800ad2a:	607b      	str	r3, [r7, #4]
 800ad2c:	68fc      	ldr	r4, [r7, #12]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	68b9      	ldr	r1, [r7, #8]
 800ad32:	2020      	movs	r0, #32
 800ad34:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d8f1      	bhi.n	800ad26 <_out_rev+0x7a>
    }
  }

  return idx;
 800ad42:	687b      	ldr	r3, [r7, #4]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	371c      	adds	r7, #28
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd90      	pop	{r4, r7, pc}

0800ad4c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af04      	add	r7, sp, #16
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d136      	bne.n	800add2 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800ad64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d018      	beq.n	800ad9c <_ntoa_format+0x50>
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	f003 0301 	and.w	r3, r3, #1
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d013      	beq.n	800ad9c <_ntoa_format+0x50>
 800ad74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d104      	bne.n	800ad86 <_ntoa_format+0x3a>
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	f003 030c 	and.w	r3, r3, #12
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00a      	beq.n	800ad9c <_ntoa_format+0x50>
      width--;
 800ad86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ad8c:	e006      	b.n	800ad9c <_ntoa_format+0x50>
      buf[len++] = '0';
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	61fa      	str	r2, [r7, #28]
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	4413      	add	r3, r2
 800ad98:	2230      	movs	r2, #48	; 0x30
 800ad9a:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ad9c:	69fa      	ldr	r2, [r7, #28]
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d20a      	bcs.n	800adba <_ntoa_format+0x6e>
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	2b1f      	cmp	r3, #31
 800ada8:	d9f1      	bls.n	800ad8e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800adaa:	e006      	b.n	800adba <_ntoa_format+0x6e>
      buf[len++] = '0';
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	1c5a      	adds	r2, r3, #1
 800adb0:	61fa      	str	r2, [r7, #28]
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	4413      	add	r3, r2
 800adb6:	2230      	movs	r2, #48	; 0x30
 800adb8:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d006      	beq.n	800add2 <_ntoa_format+0x86>
 800adc4:	69fa      	ldr	r2, [r7, #28]
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc8:	429a      	cmp	r2, r3
 800adca:	d202      	bcs.n	800add2 <_ntoa_format+0x86>
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	2b1f      	cmp	r3, #31
 800add0:	d9ec      	bls.n	800adac <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	f003 0310 	and.w	r3, r3, #16
 800add8:	2b00      	cmp	r3, #0
 800adda:	d058      	beq.n	800ae8e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d116      	bne.n	800ae14 <_ntoa_format+0xc8>
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d013      	beq.n	800ae14 <_ntoa_format+0xc8>
 800adec:	69fa      	ldr	r2, [r7, #28]
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d003      	beq.n	800adfc <_ntoa_format+0xb0>
 800adf4:	69fa      	ldr	r2, [r7, #28]
 800adf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d10b      	bne.n	800ae14 <_ntoa_format+0xc8>
      len--;
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d005      	beq.n	800ae14 <_ntoa_format+0xc8>
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	2b10      	cmp	r3, #16
 800ae0c:	d102      	bne.n	800ae14 <_ntoa_format+0xc8>
        len--;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	2b10      	cmp	r3, #16
 800ae18:	d10f      	bne.n	800ae3a <_ntoa_format+0xee>
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	f003 0320 	and.w	r3, r3, #32
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <_ntoa_format+0xee>
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	2b1f      	cmp	r3, #31
 800ae28:	d807      	bhi.n	800ae3a <_ntoa_format+0xee>
      buf[len++] = 'x';
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	1c5a      	adds	r2, r3, #1
 800ae2e:	61fa      	str	r2, [r7, #28]
 800ae30:	69ba      	ldr	r2, [r7, #24]
 800ae32:	4413      	add	r3, r2
 800ae34:	2278      	movs	r2, #120	; 0x78
 800ae36:	701a      	strb	r2, [r3, #0]
 800ae38:	e01f      	b.n	800ae7a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	2b10      	cmp	r3, #16
 800ae3e:	d10f      	bne.n	800ae60 <_ntoa_format+0x114>
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	f003 0320 	and.w	r3, r3, #32
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00a      	beq.n	800ae60 <_ntoa_format+0x114>
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	2b1f      	cmp	r3, #31
 800ae4e:	d807      	bhi.n	800ae60 <_ntoa_format+0x114>
      buf[len++] = 'X';
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	61fa      	str	r2, [r7, #28]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	4413      	add	r3, r2
 800ae5a:	2258      	movs	r2, #88	; 0x58
 800ae5c:	701a      	strb	r2, [r3, #0]
 800ae5e:	e00c      	b.n	800ae7a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d109      	bne.n	800ae7a <_ntoa_format+0x12e>
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	2b1f      	cmp	r3, #31
 800ae6a:	d806      	bhi.n	800ae7a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	1c5a      	adds	r2, r3, #1
 800ae70:	61fa      	str	r2, [r7, #28]
 800ae72:	69ba      	ldr	r2, [r7, #24]
 800ae74:	4413      	add	r3, r2
 800ae76:	2262      	movs	r2, #98	; 0x62
 800ae78:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	2b1f      	cmp	r3, #31
 800ae7e:	d806      	bhi.n	800ae8e <_ntoa_format+0x142>
      buf[len++] = '0';
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	61fa      	str	r2, [r7, #28]
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	4413      	add	r3, r2
 800ae8a:	2230      	movs	r2, #48	; 0x30
 800ae8c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	2b1f      	cmp	r3, #31
 800ae92:	d824      	bhi.n	800aede <_ntoa_format+0x192>
    if (negative) {
 800ae94:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d007      	beq.n	800aeac <_ntoa_format+0x160>
      buf[len++] = '-';
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	61fa      	str	r2, [r7, #28]
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	4413      	add	r3, r2
 800aea6:	222d      	movs	r2, #45	; 0x2d
 800aea8:	701a      	strb	r2, [r3, #0]
 800aeaa:	e018      	b.n	800aede <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	f003 0304 	and.w	r3, r3, #4
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d007      	beq.n	800aec6 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	61fa      	str	r2, [r7, #28]
 800aebc:	69ba      	ldr	r2, [r7, #24]
 800aebe:	4413      	add	r3, r2
 800aec0:	222b      	movs	r2, #43	; 0x2b
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e00b      	b.n	800aede <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec8:	f003 0308 	and.w	r3, r3, #8
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d006      	beq.n	800aede <_ntoa_format+0x192>
      buf[len++] = ' ';
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	61fa      	str	r2, [r7, #28]
 800aed6:	69ba      	ldr	r2, [r7, #24]
 800aed8:	4413      	add	r3, r2
 800aeda:	2220      	movs	r2, #32
 800aedc:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	9303      	str	r3, [sp, #12]
 800aee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee4:	9302      	str	r3, [sp, #8]
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f7ff fed9 	bl	800acac <_out_rev>
 800aefa:	4603      	mov	r3, r0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b096      	sub	sp, #88	; 0x58
 800af08:	af08      	add	r7, sp, #32
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800af16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d103      	bne.n	800af24 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800af1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af1e:	f023 0310 	bic.w	r3, r3, #16
 800af22:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800af24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <_ntoa_long+0x30>
 800af2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af30:	2b00      	cmp	r3, #0
 800af32:	d033      	beq.n	800af9c <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800af34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af38:	fbb3 f2f2 	udiv	r2, r3, r2
 800af3c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800af3e:	fb01 f202 	mul.w	r2, r1, r2
 800af42:	1a9b      	subs	r3, r3, r2
 800af44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800af48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af4c:	2b09      	cmp	r3, #9
 800af4e:	d804      	bhi.n	800af5a <_ntoa_long+0x56>
 800af50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af54:	3330      	adds	r3, #48	; 0x30
 800af56:	b2da      	uxtb	r2, r3
 800af58:	e00d      	b.n	800af76 <_ntoa_long+0x72>
 800af5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af5c:	f003 0320 	and.w	r3, r3, #32
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <_ntoa_long+0x64>
 800af64:	2241      	movs	r2, #65	; 0x41
 800af66:	e000      	b.n	800af6a <_ntoa_long+0x66>
 800af68:	2261      	movs	r2, #97	; 0x61
 800af6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800af6e:	4413      	add	r3, r2
 800af70:	b2db      	uxtb	r3, r3
 800af72:	3b0a      	subs	r3, #10
 800af74:	b2da      	uxtb	r2, r3
 800af76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af78:	1c59      	adds	r1, r3, #1
 800af7a:	6379      	str	r1, [r7, #52]	; 0x34
 800af7c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800af80:	440b      	add	r3, r1
 800af82:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800af86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af8e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800af90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af92:	2b00      	cmp	r3, #0
 800af94:	d002      	beq.n	800af9c <_ntoa_long+0x98>
 800af96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af98:	2b1f      	cmp	r3, #31
 800af9a:	d9cb      	bls.n	800af34 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800af9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af9e:	9306      	str	r3, [sp, #24]
 800afa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afa2:	9305      	str	r3, [sp, #20]
 800afa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa6:	9304      	str	r3, [sp, #16]
 800afa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afaa:	9303      	str	r3, [sp, #12]
 800afac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800afb0:	9302      	str	r3, [sp, #8]
 800afb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	f107 0310 	add.w	r3, r7, #16
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	68b9      	ldr	r1, [r7, #8]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f7ff fec2 	bl	800ad4c <_ntoa_format>
 800afc8:	4603      	mov	r3, r0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3738      	adds	r7, #56	; 0x38
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800afd2:	b590      	push	{r4, r7, lr}
 800afd4:	b097      	sub	sp, #92	; 0x5c
 800afd6:	af08      	add	r7, sp, #32
 800afd8:	60f8      	str	r0, [r7, #12]
 800afda:	60b9      	str	r1, [r7, #8]
 800afdc:	607a      	str	r2, [r7, #4]
 800afde:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800afe4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800afe8:	4323      	orrs	r3, r4
 800afea:	d103      	bne.n	800aff4 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800afec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afee:	f023 0310 	bic.w	r3, r3, #16
 800aff2:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800aff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <_ntoa_long_long+0x34>
 800affe:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800b002:	4323      	orrs	r3, r4
 800b004:	d039      	beq.n	800b07a <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 800b006:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b00a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b00e:	f7f5 fbc3 	bl	8000798 <__aeabi_uldivmod>
 800b012:	461c      	mov	r4, r3
 800b014:	4613      	mov	r3, r2
 800b016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800b01a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b01e:	2b09      	cmp	r3, #9
 800b020:	d804      	bhi.n	800b02c <_ntoa_long_long+0x5a>
 800b022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b026:	3330      	adds	r3, #48	; 0x30
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	e00d      	b.n	800b048 <_ntoa_long_long+0x76>
 800b02c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b02e:	f003 0320 	and.w	r3, r3, #32
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <_ntoa_long_long+0x68>
 800b036:	2241      	movs	r2, #65	; 0x41
 800b038:	e000      	b.n	800b03c <_ntoa_long_long+0x6a>
 800b03a:	2261      	movs	r2, #97	; 0x61
 800b03c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b040:	4413      	add	r3, r2
 800b042:	b2db      	uxtb	r3, r3
 800b044:	3b0a      	subs	r3, #10
 800b046:	b2da      	uxtb	r2, r3
 800b048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04a:	1c59      	adds	r1, r3, #1
 800b04c:	6379      	str	r1, [r7, #52]	; 0x34
 800b04e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b052:	440b      	add	r3, r1
 800b054:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800b058:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b05c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b060:	f7f5 fb9a 	bl	8000798 <__aeabi_uldivmod>
 800b064:	4603      	mov	r3, r0
 800b066:	460c      	mov	r4, r1
 800b068:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800b06c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800b070:	4323      	orrs	r3, r4
 800b072:	d002      	beq.n	800b07a <_ntoa_long_long+0xa8>
 800b074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b076:	2b1f      	cmp	r3, #31
 800b078:	d9c5      	bls.n	800b006 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800b07a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b07c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b07e:	9206      	str	r2, [sp, #24]
 800b080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b082:	9205      	str	r2, [sp, #20]
 800b084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b086:	9204      	str	r2, [sp, #16]
 800b088:	9303      	str	r3, [sp, #12]
 800b08a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800b08e:	9302      	str	r3, [sp, #8]
 800b090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b092:	9301      	str	r3, [sp, #4]
 800b094:	f107 0310 	add.w	r3, r7, #16
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	68b9      	ldr	r1, [r7, #8]
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7ff fe53 	bl	800ad4c <_ntoa_format>
 800b0a6:	4603      	mov	r3, r0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	373c      	adds	r7, #60	; 0x3c
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd90      	pop	{r4, r7, pc}

0800b0b0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b0b0:	b590      	push	{r4, r7, lr}
 800b0b2:	b09d      	sub	sp, #116	; 0x74
 800b0b4:	af04      	add	r7, sp, #16
 800b0b6:	6178      	str	r0, [r7, #20]
 800b0b8:	6139      	str	r1, [r7, #16]
 800b0ba:	60fa      	str	r2, [r7, #12]
 800b0bc:	60bb      	str	r3, [r7, #8]
 800b0be:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800b0c6:	f04f 0300 	mov.w	r3, #0
 800b0ca:	f04f 0400 	mov.w	r4, #0
 800b0ce:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800b0d2:	ed97 6b00 	vldr	d6, [r7]
 800b0d6:	ed97 7b00 	vldr	d7, [r7]
 800b0da:	eeb4 6b47 	vcmp.f64	d6, d7
 800b0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e2:	d00f      	beq.n	800b104 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800b0e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0ea:	9302      	str	r3, [sp, #8]
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	4bb7      	ldr	r3, [pc, #732]	; (800b3d0 <_ftoa+0x320>)
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	6939      	ldr	r1, [r7, #16]
 800b0fa:	6978      	ldr	r0, [r7, #20]
 800b0fc:	f7ff fdd6 	bl	800acac <_out_rev>
 800b100:	4603      	mov	r3, r0
 800b102:	e21e      	b.n	800b542 <_ftoa+0x492>
  if (value < -DBL_MAX)
 800b104:	ed97 7b00 	vldr	d7, [r7]
 800b108:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 800b3a8 <_ftoa+0x2f8>
 800b10c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b114:	d50f      	bpl.n	800b136 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800b116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b118:	9303      	str	r3, [sp, #12]
 800b11a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b11c:	9302      	str	r3, [sp, #8]
 800b11e:	2304      	movs	r3, #4
 800b120:	9301      	str	r3, [sp, #4]
 800b122:	4bac      	ldr	r3, [pc, #688]	; (800b3d4 <_ftoa+0x324>)
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	6939      	ldr	r1, [r7, #16]
 800b12c:	6978      	ldr	r0, [r7, #20]
 800b12e:	f7ff fdbd 	bl	800acac <_out_rev>
 800b132:	4603      	mov	r3, r0
 800b134:	e205      	b.n	800b542 <_ftoa+0x492>
  if (value > DBL_MAX)
 800b136:	ed97 7b00 	vldr	d7, [r7]
 800b13a:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 800b3b0 <_ftoa+0x300>
 800b13e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b146:	dd1d      	ble.n	800b184 <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800b148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b14a:	f003 0304 	and.w	r3, r3, #4
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <_ftoa+0xa6>
 800b152:	4ba1      	ldr	r3, [pc, #644]	; (800b3d8 <_ftoa+0x328>)
 800b154:	e000      	b.n	800b158 <_ftoa+0xa8>
 800b156:	4ba1      	ldr	r3, [pc, #644]	; (800b3dc <_ftoa+0x32c>)
 800b158:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b15a:	f002 0204 	and.w	r2, r2, #4
 800b15e:	2a00      	cmp	r2, #0
 800b160:	d001      	beq.n	800b166 <_ftoa+0xb6>
 800b162:	2204      	movs	r2, #4
 800b164:	e000      	b.n	800b168 <_ftoa+0xb8>
 800b166:	2203      	movs	r2, #3
 800b168:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b16a:	9103      	str	r1, [sp, #12]
 800b16c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b16e:	9102      	str	r1, [sp, #8]
 800b170:	9201      	str	r2, [sp, #4]
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	6939      	ldr	r1, [r7, #16]
 800b17a:	6978      	ldr	r0, [r7, #20]
 800b17c:	f7ff fd96 	bl	800acac <_out_rev>
 800b180:	4603      	mov	r3, r0
 800b182:	e1de      	b.n	800b542 <_ftoa+0x492>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800b184:	ed97 7b00 	vldr	d7, [r7]
 800b188:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 800b3b8 <_ftoa+0x308>
 800b18c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b194:	dc08      	bgt.n	800b1a8 <_ftoa+0xf8>
 800b196:	ed97 7b00 	vldr	d7, [r7]
 800b19a:	ed9f 6b89 	vldr	d6, [pc, #548]	; 800b3c0 <_ftoa+0x310>
 800b19e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a6:	d50f      	bpl.n	800b1c8 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800b1a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1aa:	9302      	str	r3, [sp, #8]
 800b1ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1ae:	9301      	str	r3, [sp, #4]
 800b1b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	ed97 0b00 	vldr	d0, [r7]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	6939      	ldr	r1, [r7, #16]
 800b1be:	6978      	ldr	r0, [r7, #20]
 800b1c0:	f000 f9c6 	bl	800b550 <_etoa>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	e1bc      	b.n	800b542 <_ftoa+0x492>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800b1ce:	ed97 7b00 	vldr	d7, [r7]
 800b1d2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1da:	d50a      	bpl.n	800b1f2 <_ftoa+0x142>
    negative = true;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800b1e2:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800b3c8 <_ftoa+0x318>
 800b1e6:	ed97 7b00 	vldr	d7, [r7]
 800b1ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b1ee:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800b1f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10e      	bne.n	800b21a <_ftoa+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800b1fc:	2306      	movs	r3, #6
 800b1fe:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800b200:	e00b      	b.n	800b21a <_ftoa+0x16a>
    buf[len++] = '0';
 800b202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b208:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b20c:	4413      	add	r3, r2
 800b20e:	2230      	movs	r2, #48	; 0x30
 800b210:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800b214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b216:	3b01      	subs	r3, #1
 800b218:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800b21a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b21c:	2b1f      	cmp	r3, #31
 800b21e:	d802      	bhi.n	800b226 <_ftoa+0x176>
 800b220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b222:	2b09      	cmp	r3, #9
 800b224:	d8ed      	bhi.n	800b202 <_ftoa+0x152>
  }

  int whole = (int)value;
 800b226:	ed97 7b00 	vldr	d7, [r7]
 800b22a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b22e:	ee17 3a90 	vmov	r3, s15
 800b232:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800b234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b23e:	ed97 6b00 	vldr	d6, [r7]
 800b242:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b246:	4a66      	ldr	r2, [pc, #408]	; (800b3e0 <_ftoa+0x330>)
 800b248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b24a:	00db      	lsls	r3, r3, #3
 800b24c:	4413      	add	r3, r2
 800b24e:	ed93 7b00 	vldr	d7, [r3]
 800b252:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b256:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800b25a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800b25e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800b262:	ee17 3a90 	vmov	r3, s15
 800b266:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800b268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b272:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800b276:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b27a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800b27e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800b282:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b286:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28e:	dd18      	ble.n	800b2c2 <_ftoa+0x212>
    ++frac;
 800b290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b292:	3301      	adds	r3, #1
 800b294:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800b296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800b2a0:	4a4f      	ldr	r2, [pc, #316]	; (800b3e0 <_ftoa+0x330>)
 800b2a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2a4:	00db      	lsls	r3, r3, #3
 800b2a6:	4413      	add	r3, r2
 800b2a8:	ed93 7b00 	vldr	d7, [r3]
 800b2ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b4:	db19      	blt.n	800b2ea <_ftoa+0x23a>
      frac = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800b2ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2bc:	3301      	adds	r3, #1
 800b2be:	657b      	str	r3, [r7, #84]	; 0x54
 800b2c0:	e013      	b.n	800b2ea <_ftoa+0x23a>
    }
  }
  else if (diff < 0.5) {
 800b2c2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800b2c6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b2ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d2:	d40a      	bmi.n	800b2ea <_ftoa+0x23a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800b2d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d004      	beq.n	800b2e4 <_ftoa+0x234>
 800b2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <_ftoa+0x23a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800b2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800b2ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d12e      	bne.n	800b34e <_ftoa+0x29e>
    diff = value - (double)whole;
 800b2f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b2fa:	ed97 6b00 	vldr	d6, [r7]
 800b2fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b302:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800b306:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800b30a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b30e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b316:	bf4c      	ite	mi
 800b318:	2301      	movmi	r3, #1
 800b31a:	2300      	movpl	r3, #0
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	f083 0301 	eor.w	r3, r3, #1
 800b322:	b2db      	uxtb	r3, r3
 800b324:	2b00      	cmp	r3, #0
 800b326:	d108      	bne.n	800b33a <_ftoa+0x28a>
 800b328:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800b32c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b330:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b338:	dd73      	ble.n	800b422 <_ftoa+0x372>
 800b33a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b33c:	f003 0301 	and.w	r3, r3, #1
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 8091 	beq.w	800b468 <_ftoa+0x3b8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800b346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b348:	3301      	adds	r3, #1
 800b34a:	657b      	str	r3, [r7, #84]	; 0x54
 800b34c:	e08c      	b.n	800b468 <_ftoa+0x3b8>
    }
  }
  else {
    unsigned int count = prec;
 800b34e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b350:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b352:	e020      	b.n	800b396 <_ftoa+0x2e6>
      --count;
 800b354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b356:	3b01      	subs	r3, #1
 800b358:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800b35a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b35c:	4b21      	ldr	r3, [pc, #132]	; (800b3e4 <_ftoa+0x334>)
 800b35e:	fba3 2301 	umull	r2, r3, r3, r1
 800b362:	08da      	lsrs	r2, r3, #3
 800b364:	4613      	mov	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	005b      	lsls	r3, r3, #1
 800b36c:	1aca      	subs	r2, r1, r3
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b372:	1c59      	adds	r1, r3, #1
 800b374:	65f9      	str	r1, [r7, #92]	; 0x5c
 800b376:	3230      	adds	r2, #48	; 0x30
 800b378:	b2d2      	uxtb	r2, r2
 800b37a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b37e:	440b      	add	r3, r1
 800b380:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800b384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b386:	4a17      	ldr	r2, [pc, #92]	; (800b3e4 <_ftoa+0x334>)
 800b388:	fba2 2303 	umull	r2, r3, r2, r3
 800b38c:	08db      	lsrs	r3, r3, #3
 800b38e:	653b      	str	r3, [r7, #80]	; 0x50
 800b390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <_ftoa+0x2ee>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b398:	2b1f      	cmp	r3, #31
 800b39a:	d9db      	bls.n	800b354 <_ftoa+0x2a4>
 800b39c:	e02d      	b.n	800b3fa <_ftoa+0x34a>
        break;
 800b39e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800b3a0:	e02b      	b.n	800b3fa <_ftoa+0x34a>
 800b3a2:	bf00      	nop
 800b3a4:	f3af 8000 	nop.w
 800b3a8:	ffffffff 	.word	0xffffffff
 800b3ac:	ffefffff 	.word	0xffefffff
 800b3b0:	ffffffff 	.word	0xffffffff
 800b3b4:	7fefffff 	.word	0x7fefffff
 800b3b8:	00000000 	.word	0x00000000
 800b3bc:	41cdcd65 	.word	0x41cdcd65
 800b3c0:	00000000 	.word	0x00000000
 800b3c4:	c1cdcd65 	.word	0xc1cdcd65
	...
 800b3d0:	0802efb0 	.word	0x0802efb0
 800b3d4:	0802efb4 	.word	0x0802efb4
 800b3d8:	0802efbc 	.word	0x0802efbc
 800b3dc:	0802efc4 	.word	0x0802efc4
 800b3e0:	0802f508 	.word	0x0802f508
 800b3e4:	cccccccd 	.word	0xcccccccd
      buf[len++] = '0';
 800b3e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b3ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b3f2:	4413      	add	r3, r2
 800b3f4:	2230      	movs	r2, #48	; 0x30
 800b3f6:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800b3fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3fc:	2b1f      	cmp	r3, #31
 800b3fe:	d804      	bhi.n	800b40a <_ftoa+0x35a>
 800b400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b402:	1e5a      	subs	r2, r3, #1
 800b404:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1ee      	bne.n	800b3e8 <_ftoa+0x338>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b40a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b40c:	2b1f      	cmp	r3, #31
 800b40e:	d82b      	bhi.n	800b468 <_ftoa+0x3b8>
      // add decimal
      buf[len++] = '.';
 800b410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b416:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b41a:	4413      	add	r3, r2
 800b41c:	222e      	movs	r2, #46	; 0x2e
 800b41e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b422:	e021      	b.n	800b468 <_ftoa+0x3b8>
    buf[len++] = (char)(48 + (whole % 10));
 800b424:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b426:	4b49      	ldr	r3, [pc, #292]	; (800b54c <_ftoa+0x49c>)
 800b428:	fb83 1302 	smull	r1, r3, r3, r2
 800b42c:	1099      	asrs	r1, r3, #2
 800b42e:	17d3      	asrs	r3, r2, #31
 800b430:	1ac9      	subs	r1, r1, r3
 800b432:	460b      	mov	r3, r1
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	440b      	add	r3, r1
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	1ad1      	subs	r1, r2, r3
 800b43c:	b2ca      	uxtb	r2, r1
 800b43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b440:	1c59      	adds	r1, r3, #1
 800b442:	65f9      	str	r1, [r7, #92]	; 0x5c
 800b444:	3230      	adds	r2, #48	; 0x30
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b44c:	440b      	add	r3, r1
 800b44e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800b452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b454:	4a3d      	ldr	r2, [pc, #244]	; (800b54c <_ftoa+0x49c>)
 800b456:	fb82 1203 	smull	r1, r2, r2, r3
 800b45a:	1092      	asrs	r2, r2, #2
 800b45c:	17db      	asrs	r3, r3, #31
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	657b      	str	r3, [r7, #84]	; 0x54
 800b462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <_ftoa+0x3c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b46a:	2b1f      	cmp	r3, #31
 800b46c:	d9da      	bls.n	800b424 <_ftoa+0x374>
 800b46e:	e000      	b.n	800b472 <_ftoa+0x3c2>
      break;
 800b470:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800b472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b474:	f003 0302 	and.w	r3, r3, #2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d124      	bne.n	800b4c6 <_ftoa+0x416>
 800b47c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b47e:	f003 0301 	and.w	r3, r3, #1
 800b482:	2b00      	cmp	r3, #0
 800b484:	d01f      	beq.n	800b4c6 <_ftoa+0x416>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800b486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d015      	beq.n	800b4b8 <_ftoa+0x408>
 800b48c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b490:	2b00      	cmp	r3, #0
 800b492:	d104      	bne.n	800b49e <_ftoa+0x3ee>
 800b494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b496:	f003 030c 	and.w	r3, r3, #12
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00c      	beq.n	800b4b8 <_ftoa+0x408>
      width--;
 800b49e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800b4a4:	e008      	b.n	800b4b8 <_ftoa+0x408>
      buf[len++] = '0';
 800b4a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b4ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b4b0:	4413      	add	r3, r2
 800b4b2:	2230      	movs	r2, #48	; 0x30
 800b4b4:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800b4b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d202      	bcs.n	800b4c6 <_ftoa+0x416>
 800b4c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4c2:	2b1f      	cmp	r3, #31
 800b4c4:	d9ef      	bls.n	800b4a6 <_ftoa+0x3f6>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800b4c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4c8:	2b1f      	cmp	r3, #31
 800b4ca:	d82a      	bhi.n	800b522 <_ftoa+0x472>
    if (negative) {
 800b4cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d009      	beq.n	800b4e8 <_ftoa+0x438>
      buf[len++] = '-';
 800b4d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4d6:	1c5a      	adds	r2, r3, #1
 800b4d8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b4da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b4de:	4413      	add	r3, r2
 800b4e0:	222d      	movs	r2, #45	; 0x2d
 800b4e2:	f803 2c48 	strb.w	r2, [r3, #-72]
 800b4e6:	e01c      	b.n	800b522 <_ftoa+0x472>
    }
    else if (flags & FLAGS_PLUS) {
 800b4e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4ea:	f003 0304 	and.w	r3, r3, #4
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d009      	beq.n	800b506 <_ftoa+0x456>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800b4f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4f4:	1c5a      	adds	r2, r3, #1
 800b4f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b4f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b4fc:	4413      	add	r3, r2
 800b4fe:	222b      	movs	r2, #43	; 0x2b
 800b500:	f803 2c48 	strb.w	r2, [r3, #-72]
 800b504:	e00d      	b.n	800b522 <_ftoa+0x472>
    }
    else if (flags & FLAGS_SPACE) {
 800b506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b508:	f003 0308 	and.w	r3, r3, #8
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d008      	beq.n	800b522 <_ftoa+0x472>
      buf[len++] = ' ';
 800b510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b516:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b51a:	4413      	add	r3, r2
 800b51c:	2220      	movs	r2, #32
 800b51e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800b522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b524:	9303      	str	r3, [sp, #12]
 800b526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b528:	9302      	str	r3, [sp, #8]
 800b52a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b52c:	9301      	str	r3, [sp, #4]
 800b52e:	f107 0318 	add.w	r3, r7, #24
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	6939      	ldr	r1, [r7, #16]
 800b53a:	6978      	ldr	r0, [r7, #20]
 800b53c:	f7ff fbb6 	bl	800acac <_out_rev>
 800b540:	4603      	mov	r3, r0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3764      	adds	r7, #100	; 0x64
 800b546:	46bd      	mov	sp, r7
 800b548:	bd90      	pop	{r4, r7, pc}
 800b54a:	bf00      	nop
 800b54c:	66666667 	.word	0x66666667

0800b550 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800b550:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b554:	b09a      	sub	sp, #104	; 0x68
 800b556:	af06      	add	r7, sp, #24
 800b558:	6178      	str	r0, [r7, #20]
 800b55a:	6139      	str	r1, [r7, #16]
 800b55c:	60fa      	str	r2, [r7, #12]
 800b55e:	60bb      	str	r3, [r7, #8]
 800b560:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800b564:	ed97 6b00 	vldr	d6, [r7]
 800b568:	ed97 7b00 	vldr	d7, [r7]
 800b56c:	eeb4 6b47 	vcmp.f64	d6, d7
 800b570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b574:	d111      	bne.n	800b59a <_etoa+0x4a>
 800b576:	ed97 7b00 	vldr	d7, [r7]
 800b57a:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 800b890 <_etoa+0x340>
 800b57e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b586:	dc08      	bgt.n	800b59a <_etoa+0x4a>
 800b588:	ed97 7b00 	vldr	d7, [r7]
 800b58c:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 800b898 <_etoa+0x348>
 800b590:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b598:	d50f      	bpl.n	800b5ba <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800b59a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b59c:	9302      	str	r3, [sp, #8]
 800b59e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	ed97 0b00 	vldr	d0, [r7]
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	6939      	ldr	r1, [r7, #16]
 800b5b0:	6978      	ldr	r0, [r7, #20]
 800b5b2:	f7ff fd7d 	bl	800b0b0 <_ftoa>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	e1cd      	b.n	800b956 <_etoa+0x406>
  }

  // determine the sign
  const bool negative = value < 0;
 800b5ba:	ed97 7b00 	vldr	d7, [r7]
 800b5be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c6:	bf4c      	ite	mi
 800b5c8:	2301      	movmi	r3, #1
 800b5ca:	2300      	movpl	r3, #0
 800b5cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 800b5d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d005      	beq.n	800b5e4 <_etoa+0x94>
    value = -value;
 800b5d8:	ed97 7b00 	vldr	d7, [r7]
 800b5dc:	eeb1 7b47 	vneg.f64	d7, d7
 800b5e0:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800b5e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800b5ee:	2306      	movs	r3, #6
 800b5f0:	663b      	str	r3, [r7, #96]	; 0x60
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800b5f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b5f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800b5fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b5fe:	f04f 0300 	mov.w	r3, #0
 800b602:	f04f 0400 	mov.w	r4, #0
 800b606:	0d13      	lsrs	r3, r2, #20
 800b608:	2400      	movs	r4, #0
 800b60a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b60e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b612:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800b614:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b618:	f04f 31ff 	mov.w	r1, #4294967295
 800b61c:	4ab0      	ldr	r2, [pc, #704]	; (800b8e0 <_etoa+0x390>)
 800b61e:	ea03 0b01 	and.w	fp, r3, r1
 800b622:	ea04 0c02 	and.w	ip, r4, r2
 800b626:	f04f 0100 	mov.w	r1, #0
 800b62a:	4aae      	ldr	r2, [pc, #696]	; (800b8e4 <_etoa+0x394>)
 800b62c:	ea4b 0301 	orr.w	r3, fp, r1
 800b630:	ea4c 0402 	orr.w	r4, ip, r2
 800b634:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800b638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63a:	ee07 3a90 	vmov	s15, r3
 800b63e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b642:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800b8a0 <_etoa+0x350>
 800b646:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b64a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800b8a8 <_etoa+0x358>
 800b64e:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b652:	ed97 7b06 	vldr	d7, [r7, #24]
 800b656:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800b65a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b65e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800b8b0 <_etoa+0x360>
 800b662:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b666:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b66a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b66e:	ee17 3a90 	vmov	r3, s15
 800b672:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800b674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b676:	ee07 3a90 	vmov	s15, r3
 800b67a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b67e:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 800b8b8 <_etoa+0x368>
 800b682:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b686:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b68a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b68e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b692:	ee17 3a90 	vmov	r3, s15
 800b696:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800b698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b69a:	ee07 3a90 	vmov	s15, r3
 800b69e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b6a2:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800b8c0 <_etoa+0x370>
 800b6a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ac:	ee07 3a90 	vmov	s15, r3
 800b6b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b6b4:	ed9f 5b84 	vldr	d5, [pc, #528]	; 800b8c8 <_etoa+0x378>
 800b6b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b6bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b6c0:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 800b6c4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800b6c8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800b6cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b6d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800b6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6d6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800b6da:	4619      	mov	r1, r3
 800b6dc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800b6e0:	f04f 0300 	mov.w	r3, #0
 800b6e4:	f04f 0400 	mov.w	r4, #0
 800b6e8:	050c      	lsls	r4, r1, #20
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800b6f0:	ed97 6b06 	vldr	d6, [r7, #24]
 800b6f4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800b6f8:	ee37 4b07 	vadd.f64	d4, d7, d7
 800b6fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b700:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800b704:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b708:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800b70c:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 800b710:	ee83 7b02 	vdiv.f64	d7, d3, d2
 800b714:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b718:	ee37 3b03 	vadd.f64	d3, d7, d3
 800b71c:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800b720:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800b724:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 800b728:	ee37 3b03 	vadd.f64	d3, d7, d3
 800b72c:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800b730:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800b734:	ee35 5b07 	vadd.f64	d5, d5, d7
 800b738:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800b73c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800b740:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b744:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b748:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 800b74c:	ed97 7b06 	vldr	d7, [r7, #24]
 800b750:	ed97 6b00 	vldr	d6, [r7]
 800b754:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b75c:	d50a      	bpl.n	800b774 <_etoa+0x224>
    expval--;
 800b75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b760:	3b01      	subs	r3, #1
 800b762:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800b764:	ed97 6b06 	vldr	d6, [r7, #24]
 800b768:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800b76c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b770:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800b774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b776:	2b63      	cmp	r3, #99	; 0x63
 800b778:	dc05      	bgt.n	800b786 <_etoa+0x236>
 800b77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b77c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800b780:	db01      	blt.n	800b786 <_etoa+0x236>
 800b782:	2304      	movs	r3, #4
 800b784:	e000      	b.n	800b788 <_etoa+0x238>
 800b786:	2305      	movs	r3, #5
 800b788:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800b78a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b78c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b790:	2b00      	cmp	r3, #0
 800b792:	d031      	beq.n	800b7f8 <_etoa+0x2a8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800b794:	ed97 7b00 	vldr	d7, [r7]
 800b798:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800b8d0 <_etoa+0x380>
 800b79c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a4:	db1d      	blt.n	800b7e2 <_etoa+0x292>
 800b7a6:	ed97 7b00 	vldr	d7, [r7]
 800b7aa:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800b8d8 <_etoa+0x388>
 800b7ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b6:	d514      	bpl.n	800b7e2 <_etoa+0x292>
      if ((int)prec > expval) {
 800b7b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	da05      	bge.n	800b7cc <_etoa+0x27c>
        prec = (unsigned)((int)prec - expval - 1);
 800b7c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	663b      	str	r3, [r7, #96]	; 0x60
 800b7ca:	e001      	b.n	800b7d0 <_etoa+0x280>
      }
      else {
        prec = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	663b      	str	r3, [r7, #96]	; 0x60
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800b7d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b7d6:	66bb      	str	r3, [r7, #104]	; 0x68
      // no characters in exponent
      minwidth = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7e0:	e00a      	b.n	800b7f8 <_etoa+0x2a8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800b7e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d007      	beq.n	800b7f8 <_etoa+0x2a8>
 800b7e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <_etoa+0x2a8>
        --prec;
 800b7f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	663b      	str	r3, [r7, #96]	; 0x60
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800b7f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800b7fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b800:	429a      	cmp	r2, r3
 800b802:	d904      	bls.n	800b80e <_etoa+0x2be>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800b804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	647b      	str	r3, [r7, #68]	; 0x44
 800b80c:	e001      	b.n	800b812 <_etoa+0x2c2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800b80e:	2300      	movs	r3, #0
 800b810:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800b812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b814:	f003 0302 	and.w	r3, r3, #2
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d004      	beq.n	800b826 <_etoa+0x2d6>
 800b81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <_etoa+0x2d6>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800b826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d007      	beq.n	800b83c <_etoa+0x2ec>
    value /= conv.F;
 800b82c:	ed97 6b06 	vldr	d6, [r7, #24]
 800b830:	ed97 5b00 	vldr	d5, [r7]
 800b834:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b838:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800b840:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b844:	2b00      	cmp	r3, #0
 800b846:	d004      	beq.n	800b852 <_etoa+0x302>
 800b848:	ed97 7b00 	vldr	d7, [r7]
 800b84c:	eeb1 7b47 	vneg.f64	d7, d7
 800b850:	e001      	b.n	800b856 <_etoa+0x306>
 800b852:	ed97 7b00 	vldr	d7, [r7]
 800b856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b85c:	9302      	str	r3, [sp, #8]
 800b85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	eeb0 0b47 	vmov.f64	d0, d7
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	6939      	ldr	r1, [r7, #16]
 800b870:	6978      	ldr	r0, [r7, #20]
 800b872:	f7ff fc1d 	bl	800b0b0 <_ftoa>
 800b876:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800b878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d06a      	beq.n	800b954 <_etoa+0x404>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800b87e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b00      	cmp	r3, #0
 800b886:	d02f      	beq.n	800b8e8 <_etoa+0x398>
 800b888:	2045      	movs	r0, #69	; 0x45
 800b88a:	e02e      	b.n	800b8ea <_etoa+0x39a>
 800b88c:	f3af 8000 	nop.w
 800b890:	ffffffff 	.word	0xffffffff
 800b894:	7fefffff 	.word	0x7fefffff
 800b898:	ffffffff 	.word	0xffffffff
 800b89c:	ffefffff 	.word	0xffefffff
 800b8a0:	509f79fb 	.word	0x509f79fb
 800b8a4:	3fd34413 	.word	0x3fd34413
 800b8a8:	8b60c8b3 	.word	0x8b60c8b3
 800b8ac:	3fc68a28 	.word	0x3fc68a28
 800b8b0:	636f4361 	.word	0x636f4361
 800b8b4:	3fd287a7 	.word	0x3fd287a7
 800b8b8:	0979a371 	.word	0x0979a371
 800b8bc:	400a934f 	.word	0x400a934f
 800b8c0:	bbb55516 	.word	0xbbb55516
 800b8c4:	40026bb1 	.word	0x40026bb1
 800b8c8:	fefa39ef 	.word	0xfefa39ef
 800b8cc:	3fe62e42 	.word	0x3fe62e42
 800b8d0:	eb1c432d 	.word	0xeb1c432d
 800b8d4:	3f1a36e2 	.word	0x3f1a36e2
 800b8d8:	00000000 	.word	0x00000000
 800b8dc:	412e8480 	.word	0x412e8480
 800b8e0:	000fffff 	.word	0x000fffff
 800b8e4:	3ff00000 	.word	0x3ff00000
 800b8e8:	2065      	movs	r0, #101	; 0x65
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	1c53      	adds	r3, r2, #1
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	697c      	ldr	r4, [r7, #20]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	6939      	ldr	r1, [r7, #16]
 800b8f6:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800b8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	bfb8      	it	lt
 800b8fe:	425b      	neglt	r3, r3
 800b900:	4618      	mov	r0, r3
 800b902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b904:	0fdb      	lsrs	r3, r3, #31
 800b906:	b2db      	uxtb	r3, r3
 800b908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b90a:	3a01      	subs	r2, #1
 800b90c:	2105      	movs	r1, #5
 800b90e:	9105      	str	r1, [sp, #20]
 800b910:	9204      	str	r2, [sp, #16]
 800b912:	2200      	movs	r2, #0
 800b914:	9203      	str	r2, [sp, #12]
 800b916:	220a      	movs	r2, #10
 800b918:	9202      	str	r2, [sp, #8]
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	9000      	str	r0, [sp, #0]
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	6939      	ldr	r1, [r7, #16]
 800b924:	6978      	ldr	r0, [r7, #20]
 800b926:	f7ff faed 	bl	800af04 <_ntoa_long>
 800b92a:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800b92c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b92e:	f003 0302 	and.w	r3, r3, #2
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00e      	beq.n	800b954 <_etoa+0x404>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800b936:	e007      	b.n	800b948 <_etoa+0x3f8>
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	1c53      	adds	r3, r2, #1
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	697c      	ldr	r4, [r7, #20]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	6939      	ldr	r1, [r7, #16]
 800b944:	2020      	movs	r0, #32
 800b946:	47a0      	blx	r4
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	1ad3      	subs	r3, r2, r3
 800b94e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b950:	429a      	cmp	r2, r3
 800b952:	d8f1      	bhi.n	800b938 <_etoa+0x3e8>
    }
  }
  return idx;
 800b954:	68fb      	ldr	r3, [r7, #12]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3750      	adds	r7, #80	; 0x50
 800b95a:	46bd      	mov	sp, r7
 800b95c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b960 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800b960:	b5b0      	push	{r4, r5, r7, lr}
 800b962:	b0a0      	sub	sp, #128	; 0x80
 800b964:	af0a      	add	r7, sp, #40	; 0x28
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800b96e:	2300      	movs	r3, #0
 800b970:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	f040 848e 	bne.w	800c296 <_vsnprintf+0x936>
    // use null output function
    out = _out_null;
 800b97a:	4ba0      	ldr	r3, [pc, #640]	; (800bbfc <_vsnprintf+0x29c>)
 800b97c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800b97e:	f000 bc8a 	b.w	800c296 <_vsnprintf+0x936>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	2b25      	cmp	r3, #37	; 0x25
 800b988:	d00d      	beq.n	800b9a6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	7818      	ldrb	r0, [r3, #0]
 800b98e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b990:	1c53      	adds	r3, r2, #1
 800b992:	647b      	str	r3, [r7, #68]	; 0x44
 800b994:	68fc      	ldr	r4, [r7, #12]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	47a0      	blx	r4
      format++;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	603b      	str	r3, [r7, #0]
      continue;
 800b9a2:	f000 bc78 	b.w	800c296 <_vsnprintf+0x936>
    }
    else {
      // yes, evaluate it
      format++;
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	3b20      	subs	r3, #32
 800b9b6:	2b10      	cmp	r3, #16
 800b9b8:	d856      	bhi.n	800ba68 <_vsnprintf+0x108>
 800b9ba:	a201      	add	r2, pc, #4	; (adr r2, 800b9c0 <_vsnprintf+0x60>)
 800b9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c0:	0800ba41 	.word	0x0800ba41
 800b9c4:	0800ba69 	.word	0x0800ba69
 800b9c8:	0800ba69 	.word	0x0800ba69
 800b9cc:	0800ba55 	.word	0x0800ba55
 800b9d0:	0800ba69 	.word	0x0800ba69
 800b9d4:	0800ba69 	.word	0x0800ba69
 800b9d8:	0800ba69 	.word	0x0800ba69
 800b9dc:	0800ba69 	.word	0x0800ba69
 800b9e0:	0800ba69 	.word	0x0800ba69
 800b9e4:	0800ba69 	.word	0x0800ba69
 800b9e8:	0800ba69 	.word	0x0800ba69
 800b9ec:	0800ba2d 	.word	0x0800ba2d
 800b9f0:	0800ba69 	.word	0x0800ba69
 800b9f4:	0800ba19 	.word	0x0800ba19
 800b9f8:	0800ba69 	.word	0x0800ba69
 800b9fc:	0800ba69 	.word	0x0800ba69
 800ba00:	0800ba05 	.word	0x0800ba05
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800ba04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba06:	f043 0301 	orr.w	r3, r3, #1
 800ba0a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	2301      	movs	r3, #1
 800ba14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba16:	e02a      	b.n	800ba6e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800ba18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba1a:	f043 0302 	orr.w	r3, r3, #2
 800ba1e:	657b      	str	r3, [r7, #84]	; 0x54
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	3301      	adds	r3, #1
 800ba24:	603b      	str	r3, [r7, #0]
 800ba26:	2301      	movs	r3, #1
 800ba28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba2a:	e020      	b.n	800ba6e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800ba2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba2e:	f043 0304 	orr.w	r3, r3, #4
 800ba32:	657b      	str	r3, [r7, #84]	; 0x54
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	3301      	adds	r3, #1
 800ba38:	603b      	str	r3, [r7, #0]
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba3e:	e016      	b.n	800ba6e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800ba40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba42:	f043 0308 	orr.w	r3, r3, #8
 800ba46:	657b      	str	r3, [r7, #84]	; 0x54
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	603b      	str	r3, [r7, #0]
 800ba4e:	2301      	movs	r3, #1
 800ba50:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba52:	e00c      	b.n	800ba6e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800ba54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba56:	f043 0310 	orr.w	r3, r3, #16
 800ba5a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	603b      	str	r3, [r7, #0]
 800ba62:	2301      	movs	r3, #1
 800ba64:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba66:	e002      	b.n	800ba6e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba6c:	bf00      	nop
      }
    } while (n);
 800ba6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d19d      	bne.n	800b9b0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800ba74:	2300      	movs	r3, #0
 800ba76:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7ff f8da 	bl	800ac36 <_is_digit>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d005      	beq.n	800ba94 <_vsnprintf+0x134>
      width = _atoi(&format);
 800ba88:	463b      	mov	r3, r7
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7ff f8ea 	bl	800ac64 <_atoi>
 800ba90:	6538      	str	r0, [r7, #80]	; 0x50
 800ba92:	e018      	b.n	800bac6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	2b2a      	cmp	r3, #42	; 0x2a
 800ba9a:	d114      	bne.n	800bac6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800ba9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba9e:	1d1a      	adds	r2, r3, #4
 800baa0:	66ba      	str	r2, [r7, #104]	; 0x68
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	da07      	bge.n	800babc <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800baac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baae:	f043 0302 	orr.w	r3, r3, #2
 800bab2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	425b      	negs	r3, r3
 800bab8:	653b      	str	r3, [r7, #80]	; 0x50
 800baba:	e001      	b.n	800bac0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	3301      	adds	r3, #1
 800bac4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800bac6:	2300      	movs	r3, #0
 800bac8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2b2e      	cmp	r3, #46	; 0x2e
 800bad0:	d124      	bne.n	800bb1c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800bad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bad8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	3301      	adds	r3, #1
 800bade:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7ff f8a6 	bl	800ac36 <_is_digit>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800baf0:	463b      	mov	r3, r7
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff f8b6 	bl	800ac64 <_atoi>
 800baf8:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bafa:	e00f      	b.n	800bb1c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b2a      	cmp	r3, #42	; 0x2a
 800bb02:	d10b      	bne.n	800bb1c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800bb04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb06:	1d1a      	adds	r2, r3, #4
 800bb08:	66ba      	str	r2, [r7, #104]	; 0x68
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bb14:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	3b68      	subs	r3, #104	; 0x68
 800bb22:	2b12      	cmp	r3, #18
 800bb24:	d866      	bhi.n	800bbf4 <_vsnprintf+0x294>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <_vsnprintf+0x1cc>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb9f 	.word	0x0800bb9f
 800bb30:	0800bbf5 	.word	0x0800bbf5
 800bb34:	0800bbd5 	.word	0x0800bbd5
 800bb38:	0800bbf5 	.word	0x0800bbf5
 800bb3c:	0800bb79 	.word	0x0800bb79
 800bb40:	0800bbf5 	.word	0x0800bbf5
 800bb44:	0800bbf5 	.word	0x0800bbf5
 800bb48:	0800bbf5 	.word	0x0800bbf5
 800bb4c:	0800bbf5 	.word	0x0800bbf5
 800bb50:	0800bbf5 	.word	0x0800bbf5
 800bb54:	0800bbf5 	.word	0x0800bbf5
 800bb58:	0800bbf5 	.word	0x0800bbf5
 800bb5c:	0800bbc5 	.word	0x0800bbc5
 800bb60:	0800bbf5 	.word	0x0800bbf5
 800bb64:	0800bbf5 	.word	0x0800bbf5
 800bb68:	0800bbf5 	.word	0x0800bbf5
 800bb6c:	0800bbf5 	.word	0x0800bbf5
 800bb70:	0800bbf5 	.word	0x0800bbf5
 800bb74:	0800bbe5 	.word	0x0800bbe5
      case 'l' :
        flags |= FLAGS_LONG;
 800bb78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb7e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	2b6c      	cmp	r3, #108	; 0x6c
 800bb8c:	d134      	bne.n	800bbf8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800bb8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb94:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	603b      	str	r3, [r7, #0]
        }
        break;
 800bb9c:	e02c      	b.n	800bbf8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800bb9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b68      	cmp	r3, #104	; 0x68
 800bbb2:	d125      	bne.n	800bc00 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800bbb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbba:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	603b      	str	r3, [r7, #0]
        }
        break;
 800bbc2:	e01d      	b.n	800bc00 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800bbc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	603b      	str	r3, [r7, #0]
        break;
 800bbd2:	e016      	b.n	800bc02 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800bbd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bbda:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	603b      	str	r3, [r7, #0]
        break;
 800bbe2:	e00e      	b.n	800bc02 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800bbe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbea:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	603b      	str	r3, [r7, #0]
        break;
 800bbf2:	e006      	b.n	800bc02 <_vsnprintf+0x2a2>
      default :
        break;
 800bbf4:	bf00      	nop
 800bbf6:	e004      	b.n	800bc02 <_vsnprintf+0x2a2>
        break;
 800bbf8:	bf00      	nop
 800bbfa:	e002      	b.n	800bc02 <_vsnprintf+0x2a2>
 800bbfc:	0800abbb 	.word	0x0800abbb
        break;
 800bc00:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	3b25      	subs	r3, #37	; 0x25
 800bc08:	2b53      	cmp	r3, #83	; 0x53
 800bc0a:	f200 8337 	bhi.w	800c27c <_vsnprintf+0x91c>
 800bc0e:	a201      	add	r2, pc, #4	; (adr r2, 800bc14 <_vsnprintf+0x2b4>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800c265 	.word	0x0800c265
 800bc18:	0800c27d 	.word	0x0800c27d
 800bc1c:	0800c27d 	.word	0x0800c27d
 800bc20:	0800c27d 	.word	0x0800c27d
 800bc24:	0800c27d 	.word	0x0800c27d
 800bc28:	0800c27d 	.word	0x0800c27d
 800bc2c:	0800c27d 	.word	0x0800c27d
 800bc30:	0800c27d 	.word	0x0800c27d
 800bc34:	0800c27d 	.word	0x0800c27d
 800bc38:	0800c27d 	.word	0x0800c27d
 800bc3c:	0800c27d 	.word	0x0800c27d
 800bc40:	0800c27d 	.word	0x0800c27d
 800bc44:	0800c27d 	.word	0x0800c27d
 800bc48:	0800c27d 	.word	0x0800c27d
 800bc4c:	0800c27d 	.word	0x0800c27d
 800bc50:	0800c27d 	.word	0x0800c27d
 800bc54:	0800c27d 	.word	0x0800c27d
 800bc58:	0800c27d 	.word	0x0800c27d
 800bc5c:	0800c27d 	.word	0x0800c27d
 800bc60:	0800c27d 	.word	0x0800c27d
 800bc64:	0800c27d 	.word	0x0800c27d
 800bc68:	0800c27d 	.word	0x0800c27d
 800bc6c:	0800c27d 	.word	0x0800c27d
 800bc70:	0800c27d 	.word	0x0800c27d
 800bc74:	0800c27d 	.word	0x0800c27d
 800bc78:	0800c27d 	.word	0x0800c27d
 800bc7c:	0800c27d 	.word	0x0800c27d
 800bc80:	0800c27d 	.word	0x0800c27d
 800bc84:	0800c27d 	.word	0x0800c27d
 800bc88:	0800c27d 	.word	0x0800c27d
 800bc8c:	0800c27d 	.word	0x0800c27d
 800bc90:	0800c27d 	.word	0x0800c27d
 800bc94:	0800c039 	.word	0x0800c039
 800bc98:	0800bff1 	.word	0x0800bff1
 800bc9c:	0800c039 	.word	0x0800c039
 800bca0:	0800c27d 	.word	0x0800c27d
 800bca4:	0800c27d 	.word	0x0800c27d
 800bca8:	0800c27d 	.word	0x0800c27d
 800bcac:	0800c27d 	.word	0x0800c27d
 800bcb0:	0800c27d 	.word	0x0800c27d
 800bcb4:	0800c27d 	.word	0x0800c27d
 800bcb8:	0800c27d 	.word	0x0800c27d
 800bcbc:	0800c27d 	.word	0x0800c27d
 800bcc0:	0800c27d 	.word	0x0800c27d
 800bcc4:	0800c27d 	.word	0x0800c27d
 800bcc8:	0800c27d 	.word	0x0800c27d
 800bccc:	0800c27d 	.word	0x0800c27d
 800bcd0:	0800c27d 	.word	0x0800c27d
 800bcd4:	0800c27d 	.word	0x0800c27d
 800bcd8:	0800c27d 	.word	0x0800c27d
 800bcdc:	0800c27d 	.word	0x0800c27d
 800bce0:	0800bd65 	.word	0x0800bd65
 800bce4:	0800c27d 	.word	0x0800c27d
 800bce8:	0800c27d 	.word	0x0800c27d
 800bcec:	0800c27d 	.word	0x0800c27d
 800bcf0:	0800c27d 	.word	0x0800c27d
 800bcf4:	0800c27d 	.word	0x0800c27d
 800bcf8:	0800c27d 	.word	0x0800c27d
 800bcfc:	0800c27d 	.word	0x0800c27d
 800bd00:	0800c27d 	.word	0x0800c27d
 800bd04:	0800c27d 	.word	0x0800c27d
 800bd08:	0800bd65 	.word	0x0800bd65
 800bd0c:	0800c0a1 	.word	0x0800c0a1
 800bd10:	0800bd65 	.word	0x0800bd65
 800bd14:	0800c039 	.word	0x0800c039
 800bd18:	0800bff1 	.word	0x0800bff1
 800bd1c:	0800c039 	.word	0x0800c039
 800bd20:	0800c27d 	.word	0x0800c27d
 800bd24:	0800bd65 	.word	0x0800bd65
 800bd28:	0800c27d 	.word	0x0800c27d
 800bd2c:	0800c27d 	.word	0x0800c27d
 800bd30:	0800c27d 	.word	0x0800c27d
 800bd34:	0800c27d 	.word	0x0800c27d
 800bd38:	0800c27d 	.word	0x0800c27d
 800bd3c:	0800bd65 	.word	0x0800bd65
 800bd40:	0800c1d9 	.word	0x0800c1d9
 800bd44:	0800c27d 	.word	0x0800c27d
 800bd48:	0800c27d 	.word	0x0800c27d
 800bd4c:	0800c115 	.word	0x0800c115
 800bd50:	0800c27d 	.word	0x0800c27d
 800bd54:	0800bd65 	.word	0x0800bd65
 800bd58:	0800c27d 	.word	0x0800c27d
 800bd5c:	0800c27d 	.word	0x0800c27d
 800bd60:	0800bd65 	.word	0x0800bd65
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	2b78      	cmp	r3, #120	; 0x78
 800bd6a:	d003      	beq.n	800bd74 <_vsnprintf+0x414>
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b58      	cmp	r3, #88	; 0x58
 800bd72:	d102      	bne.n	800bd7a <_vsnprintf+0x41a>
          base = 16U;
 800bd74:	2310      	movs	r3, #16
 800bd76:	643b      	str	r3, [r7, #64]	; 0x40
 800bd78:	e013      	b.n	800bda2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	2b6f      	cmp	r3, #111	; 0x6f
 800bd80:	d102      	bne.n	800bd88 <_vsnprintf+0x428>
          base =  8U;
 800bd82:	2308      	movs	r3, #8
 800bd84:	643b      	str	r3, [r7, #64]	; 0x40
 800bd86:	e00c      	b.n	800bda2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b62      	cmp	r3, #98	; 0x62
 800bd8e:	d102      	bne.n	800bd96 <_vsnprintf+0x436>
          base =  2U;
 800bd90:	2302      	movs	r3, #2
 800bd92:	643b      	str	r3, [r7, #64]	; 0x40
 800bd94:	e005      	b.n	800bda2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800bd96:	230a      	movs	r3, #10
 800bd98:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800bd9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd9c:	f023 0310 	bic.w	r3, r3, #16
 800bda0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b58      	cmp	r3, #88	; 0x58
 800bda8:	d103      	bne.n	800bdb2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800bdaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdac:	f043 0320 	orr.w	r3, r3, #32
 800bdb0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	2b69      	cmp	r3, #105	; 0x69
 800bdb8:	d007      	beq.n	800bdca <_vsnprintf+0x46a>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	2b64      	cmp	r3, #100	; 0x64
 800bdc0:	d003      	beq.n	800bdca <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800bdc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdc4:	f023 030c 	bic.w	r3, r3, #12
 800bdc8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800bdca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800bdd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdd6:	f023 0301 	bic.w	r3, r3, #1
 800bdda:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	2b69      	cmp	r3, #105	; 0x69
 800bde2:	d004      	beq.n	800bdee <_vsnprintf+0x48e>
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b64      	cmp	r3, #100	; 0x64
 800bdea:	f040 808d 	bne.w	800bf08 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800bdee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d02e      	beq.n	800be56 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800bdf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdfa:	3307      	adds	r3, #7
 800bdfc:	f023 0307 	bic.w	r3, r3, #7
 800be00:	f103 0208 	add.w	r2, r3, #8
 800be04:	66ba      	str	r2, [r7, #104]	; 0x68
 800be06:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be0a:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800be0e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	f174 0200 	sbcs.w	r2, r4, #0
 800be18:	da02      	bge.n	800be20 <_vsnprintf+0x4c0>
 800be1a:	425b      	negs	r3, r3
 800be1c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800be20:	4619      	mov	r1, r3
 800be22:	4622      	mov	r2, r4
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	0fdb      	lsrs	r3, r3, #31
 800be28:	b2d8      	uxtb	r0, r3
 800be2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2c:	f04f 0400 	mov.w	r4, #0
 800be30:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800be32:	9508      	str	r5, [sp, #32]
 800be34:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800be36:	9507      	str	r5, [sp, #28]
 800be38:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800be3a:	9506      	str	r5, [sp, #24]
 800be3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be40:	9002      	str	r0, [sp, #8]
 800be42:	e9cd 1200 	strd	r1, r2, [sp]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f7ff f8c0 	bl	800afd2 <_ntoa_long_long>
 800be52:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800be54:	e0c8      	b.n	800bfe8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800be56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01e      	beq.n	800be9e <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800be60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be62:	1d1a      	adds	r2, r3, #4
 800be64:	66ba      	str	r2, [r7, #104]	; 0x68
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	bfb8      	it	lt
 800be70:	425b      	neglt	r3, r3
 800be72:	4619      	mov	r1, r3
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	0fdb      	lsrs	r3, r3, #31
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be7c:	9205      	str	r2, [sp, #20]
 800be7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be80:	9204      	str	r2, [sp, #16]
 800be82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be84:	9203      	str	r2, [sp, #12]
 800be86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be88:	9202      	str	r2, [sp, #8]
 800be8a:	9301      	str	r3, [sp, #4]
 800be8c:	9100      	str	r1, [sp, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be92:	68b9      	ldr	r1, [r7, #8]
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f7ff f835 	bl	800af04 <_ntoa_long>
 800be9a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800be9c:	e0a4      	b.n	800bfe8 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800be9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d005      	beq.n	800beb4 <_vsnprintf+0x554>
 800bea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beaa:	1d1a      	adds	r2, r3, #4
 800beac:	66ba      	str	r2, [r7, #104]	; 0x68
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	e00e      	b.n	800bed2 <_vsnprintf+0x572>
 800beb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d005      	beq.n	800beca <_vsnprintf+0x56a>
 800bebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bec0:	1d1a      	adds	r2, r3, #4
 800bec2:	66ba      	str	r2, [r7, #104]	; 0x68
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	b21b      	sxth	r3, r3
 800bec8:	e003      	b.n	800bed2 <_vsnprintf+0x572>
 800beca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800becc:	1d1a      	adds	r2, r3, #4
 800bece:	66ba      	str	r2, [r7, #104]	; 0x68
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	bfb8      	it	lt
 800beda:	425b      	neglt	r3, r3
 800bedc:	4619      	mov	r1, r3
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	0fdb      	lsrs	r3, r3, #31
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bee6:	9205      	str	r2, [sp, #20]
 800bee8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800beea:	9204      	str	r2, [sp, #16]
 800beec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800beee:	9203      	str	r2, [sp, #12]
 800bef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bef2:	9202      	str	r2, [sp, #8]
 800bef4:	9301      	str	r3, [sp, #4]
 800bef6:	9100      	str	r1, [sp, #0]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800befc:	68b9      	ldr	r1, [r7, #8]
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f7ff f800 	bl	800af04 <_ntoa_long>
 800bf04:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800bf06:	e06f      	b.n	800bfe8 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800bf08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d020      	beq.n	800bf54 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800bf12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf14:	3307      	adds	r3, #7
 800bf16:	f023 0307 	bic.w	r3, r3, #7
 800bf1a:	f103 0208 	add.w	r2, r3, #8
 800bf1e:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf20:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf26:	4611      	mov	r1, r2
 800bf28:	f04f 0200 	mov.w	r2, #0
 800bf2c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bf2e:	9008      	str	r0, [sp, #32]
 800bf30:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bf32:	9007      	str	r0, [sp, #28]
 800bf34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bf36:	9006      	str	r0, [sp, #24]
 800bf38:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	9202      	str	r2, [sp, #8]
 800bf40:	e9cd 3400 	strd	r3, r4, [sp]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf48:	68b9      	ldr	r1, [r7, #8]
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f7ff f841 	bl	800afd2 <_ntoa_long_long>
 800bf50:	6478      	str	r0, [r7, #68]	; 0x44
 800bf52:	e049      	b.n	800bfe8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800bf54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d016      	beq.n	800bf8c <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800bf5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf60:	1d1a      	adds	r2, r3, #4
 800bf62:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf68:	9205      	str	r2, [sp, #20]
 800bf6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf6c:	9204      	str	r2, [sp, #16]
 800bf6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf70:	9203      	str	r2, [sp, #12]
 800bf72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf74:	9202      	str	r2, [sp, #8]
 800bf76:	2200      	movs	r2, #0
 800bf78:	9201      	str	r2, [sp, #4]
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf80:	68b9      	ldr	r1, [r7, #8]
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f7fe ffbe 	bl	800af04 <_ntoa_long>
 800bf88:	6478      	str	r0, [r7, #68]	; 0x44
 800bf8a:	e02d      	b.n	800bfe8 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800bf8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d005      	beq.n	800bfa2 <_vsnprintf+0x642>
 800bf96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf98:	1d1a      	adds	r2, r3, #4
 800bf9a:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	e00e      	b.n	800bfc0 <_vsnprintf+0x660>
 800bfa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d005      	beq.n	800bfb8 <_vsnprintf+0x658>
 800bfac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfae:	1d1a      	adds	r2, r3, #4
 800bfb0:	66ba      	str	r2, [r7, #104]	; 0x68
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	e003      	b.n	800bfc0 <_vsnprintf+0x660>
 800bfb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfba:	1d1a      	adds	r2, r3, #4
 800bfbc:	66ba      	str	r2, [r7, #104]	; 0x68
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800bfc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfc4:	9305      	str	r3, [sp, #20]
 800bfc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfc8:	9304      	str	r3, [sp, #16]
 800bfca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfcc:	9303      	str	r3, [sp, #12]
 800bfce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd0:	9302      	str	r3, [sp, #8]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f7fe ff8f 	bl	800af04 <_ntoa_long>
 800bfe6:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	3301      	adds	r3, #1
 800bfec:	603b      	str	r3, [r7, #0]
        break;
 800bfee:	e152      	b.n	800c296 <_vsnprintf+0x936>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b46      	cmp	r3, #70	; 0x46
 800bff6:	d103      	bne.n	800c000 <_vsnprintf+0x6a0>
 800bff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bffa:	f043 0320 	orr.w	r3, r3, #32
 800bffe:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800c000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c002:	3307      	adds	r3, #7
 800c004:	f023 0307 	bic.w	r3, r3, #7
 800c008:	f103 0208 	add.w	r2, r3, #8
 800c00c:	66ba      	str	r2, [r7, #104]	; 0x68
 800c00e:	ed93 7b00 	vldr	d7, [r3]
 800c012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c014:	9302      	str	r3, [sp, #8]
 800c016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	eeb0 0b47 	vmov.f64	d0, d7
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c026:	68b9      	ldr	r1, [r7, #8]
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f7ff f841 	bl	800b0b0 <_ftoa>
 800c02e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	3301      	adds	r3, #1
 800c034:	603b      	str	r3, [r7, #0]
        break;
 800c036:	e12e      	b.n	800c296 <_vsnprintf+0x936>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	2b67      	cmp	r3, #103	; 0x67
 800c03e:	d003      	beq.n	800c048 <_vsnprintf+0x6e8>
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	2b47      	cmp	r3, #71	; 0x47
 800c046:	d103      	bne.n	800c050 <_vsnprintf+0x6f0>
 800c048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c04a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c04e:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b45      	cmp	r3, #69	; 0x45
 800c056:	d003      	beq.n	800c060 <_vsnprintf+0x700>
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	2b47      	cmp	r3, #71	; 0x47
 800c05e:	d103      	bne.n	800c068 <_vsnprintf+0x708>
 800c060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c062:	f043 0320 	orr.w	r3, r3, #32
 800c066:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800c068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c06a:	3307      	adds	r3, #7
 800c06c:	f023 0307 	bic.w	r3, r3, #7
 800c070:	f103 0208 	add.w	r2, r3, #8
 800c074:	66ba      	str	r2, [r7, #104]	; 0x68
 800c076:	ed93 7b00 	vldr	d7, [r3]
 800c07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c07c:	9302      	str	r3, [sp, #8]
 800c07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	eeb0 0b47 	vmov.f64	d0, d7
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f7ff fa5d 	bl	800b550 <_etoa>
 800c096:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	3301      	adds	r3, #1
 800c09c:	603b      	str	r3, [r7, #0]
        break;
 800c09e:	e0fa      	b.n	800c296 <_vsnprintf+0x936>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800c0a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0a6:	f003 0302 	and.w	r3, r3, #2
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10e      	bne.n	800c0cc <_vsnprintf+0x76c>
          while (l++ < width) {
 800c0ae:	e007      	b.n	800c0c0 <_vsnprintf+0x760>
            out(' ', buffer, idx++, maxlen);
 800c0b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0b2:	1c53      	adds	r3, r2, #1
 800c0b4:	647b      	str	r3, [r7, #68]	; 0x44
 800c0b6:	68fc      	ldr	r4, [r7, #12]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68b9      	ldr	r1, [r7, #8]
 800c0bc:	2020      	movs	r0, #32
 800c0be:	47a0      	blx	r4
          while (l++ < width) {
 800c0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c2:	1c5a      	adds	r2, r3, #1
 800c0c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c0c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d8f1      	bhi.n	800c0b0 <_vsnprintf+0x750>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800c0cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0ce:	1d1a      	adds	r2, r3, #4
 800c0d0:	66ba      	str	r2, [r7, #104]	; 0x68
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	b2d8      	uxtb	r0, r3
 800c0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0d8:	1c53      	adds	r3, r2, #1
 800c0da:	647b      	str	r3, [r7, #68]	; 0x44
 800c0dc:	68fc      	ldr	r4, [r7, #12]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	68b9      	ldr	r1, [r7, #8]
 800c0e2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800c0e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0e6:	f003 0302 	and.w	r3, r3, #2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00e      	beq.n	800c10c <_vsnprintf+0x7ac>
          while (l++ < width) {
 800c0ee:	e007      	b.n	800c100 <_vsnprintf+0x7a0>
            out(' ', buffer, idx++, maxlen);
 800c0f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0f2:	1c53      	adds	r3, r2, #1
 800c0f4:	647b      	str	r3, [r7, #68]	; 0x44
 800c0f6:	68fc      	ldr	r4, [r7, #12]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	2020      	movs	r0, #32
 800c0fe:	47a0      	blx	r4
          while (l++ < width) {
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c106:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c108:	429a      	cmp	r2, r3
 800c10a:	d8f1      	bhi.n	800c0f0 <_vsnprintf+0x790>
          }
        }
        format++;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	3301      	adds	r3, #1
 800c110:	603b      	str	r3, [r7, #0]
        break;
 800c112:	e0c0      	b.n	800c296 <_vsnprintf+0x936>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800c114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c116:	1d1a      	adds	r2, r3, #4
 800c118:	66ba      	str	r2, [r7, #104]	; 0x68
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800c11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <_vsnprintf+0x7c8>
 800c124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c126:	e001      	b.n	800c12c <_vsnprintf+0x7cc>
 800c128:	f04f 33ff 	mov.w	r3, #4294967295
 800c12c:	4619      	mov	r1, r3
 800c12e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c130:	f7fe fd64 	bl	800abfc <_strnlen_s>
 800c134:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800c136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d005      	beq.n	800c14c <_vsnprintf+0x7ec>
          l = (l < precision ? l : precision);
 800c140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c144:	4293      	cmp	r3, r2
 800c146:	bf28      	it	cs
 800c148:	4613      	movcs	r3, r2
 800c14a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800c14c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c14e:	f003 0302 	and.w	r3, r3, #2
 800c152:	2b00      	cmp	r3, #0
 800c154:	d11a      	bne.n	800c18c <_vsnprintf+0x82c>
          while (l++ < width) {
 800c156:	e007      	b.n	800c168 <_vsnprintf+0x808>
            out(' ', buffer, idx++, maxlen);
 800c158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c15a:	1c53      	adds	r3, r2, #1
 800c15c:	647b      	str	r3, [r7, #68]	; 0x44
 800c15e:	68fc      	ldr	r4, [r7, #12]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68b9      	ldr	r1, [r7, #8]
 800c164:	2020      	movs	r0, #32
 800c166:	47a0      	blx	r4
          while (l++ < width) {
 800c168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16a:	1c5a      	adds	r2, r3, #1
 800c16c:	637a      	str	r2, [r7, #52]	; 0x34
 800c16e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c170:	429a      	cmp	r2, r3
 800c172:	d8f1      	bhi.n	800c158 <_vsnprintf+0x7f8>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800c174:	e00a      	b.n	800c18c <_vsnprintf+0x82c>
          out(*(p++), buffer, idx++, maxlen);
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	63ba      	str	r2, [r7, #56]	; 0x38
 800c17c:	7818      	ldrb	r0, [r3, #0]
 800c17e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c180:	1c53      	adds	r3, r2, #1
 800c182:	647b      	str	r3, [r7, #68]	; 0x44
 800c184:	68fc      	ldr	r4, [r7, #12]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68b9      	ldr	r1, [r7, #8]
 800c18a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d009      	beq.n	800c1a8 <_vsnprintf+0x848>
 800c194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d0eb      	beq.n	800c176 <_vsnprintf+0x816>
 800c19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1a0:	1e5a      	subs	r2, r3, #1
 800c1a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1e6      	bne.n	800c176 <_vsnprintf+0x816>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800c1a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1aa:	f003 0302 	and.w	r3, r3, #2
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00e      	beq.n	800c1d0 <_vsnprintf+0x870>
          while (l++ < width) {
 800c1b2:	e007      	b.n	800c1c4 <_vsnprintf+0x864>
            out(' ', buffer, idx++, maxlen);
 800c1b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1b6:	1c53      	adds	r3, r2, #1
 800c1b8:	647b      	str	r3, [r7, #68]	; 0x44
 800c1ba:	68fc      	ldr	r4, [r7, #12]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	2020      	movs	r0, #32
 800c1c2:	47a0      	blx	r4
          while (l++ < width) {
 800c1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	637a      	str	r2, [r7, #52]	; 0x34
 800c1ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d8f1      	bhi.n	800c1b4 <_vsnprintf+0x854>
          }
        }
        format++;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	603b      	str	r3, [r7, #0]
        break;
 800c1d6:	e05e      	b.n	800c296 <_vsnprintf+0x936>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800c1d8:	2308      	movs	r3, #8
 800c1da:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800c1dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1de:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800c1e2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800c1ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d01d      	beq.n	800c22e <_vsnprintf+0x8ce>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800c1f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1f4:	1d1a      	adds	r2, r3, #4
 800c1f6:	66ba      	str	r2, [r7, #104]	; 0x68
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f04f 0400 	mov.w	r4, #0
 800c1fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c200:	9208      	str	r2, [sp, #32]
 800c202:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c204:	9207      	str	r2, [sp, #28]
 800c206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c208:	9206      	str	r2, [sp, #24]
 800c20a:	f04f 0110 	mov.w	r1, #16
 800c20e:	f04f 0200 	mov.w	r2, #0
 800c212:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800c216:	2200      	movs	r2, #0
 800c218:	9202      	str	r2, [sp, #8]
 800c21a:	e9cd 3400 	strd	r3, r4, [sp]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c222:	68b9      	ldr	r1, [r7, #8]
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7fe fed4 	bl	800afd2 <_ntoa_long_long>
 800c22a:	6478      	str	r0, [r7, #68]	; 0x44
 800c22c:	e016      	b.n	800c25c <_vsnprintf+0x8fc>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800c22e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c230:	1d1a      	adds	r2, r3, #4
 800c232:	66ba      	str	r2, [r7, #104]	; 0x68
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	461a      	mov	r2, r3
 800c238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c23a:	9305      	str	r3, [sp, #20]
 800c23c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c23e:	9304      	str	r3, [sp, #16]
 800c240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c242:	9303      	str	r3, [sp, #12]
 800c244:	2310      	movs	r3, #16
 800c246:	9302      	str	r3, [sp, #8]
 800c248:	2300      	movs	r3, #0
 800c24a:	9301      	str	r3, [sp, #4]
 800c24c:	9200      	str	r2, [sp, #0]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c252:	68b9      	ldr	r1, [r7, #8]
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f7fe fe55 	bl	800af04 <_ntoa_long>
 800c25a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	3301      	adds	r3, #1
 800c260:	603b      	str	r3, [r7, #0]
        break;
 800c262:	e018      	b.n	800c296 <_vsnprintf+0x936>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800c264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c266:	1c53      	adds	r3, r2, #1
 800c268:	647b      	str	r3, [r7, #68]	; 0x44
 800c26a:	68fc      	ldr	r4, [r7, #12]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	68b9      	ldr	r1, [r7, #8]
 800c270:	2025      	movs	r0, #37	; 0x25
 800c272:	47a0      	blx	r4
        format++;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	3301      	adds	r3, #1
 800c278:	603b      	str	r3, [r7, #0]
        break;
 800c27a:	e00c      	b.n	800c296 <_vsnprintf+0x936>

      default :
        out(*format, buffer, idx++, maxlen);
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	7818      	ldrb	r0, [r3, #0]
 800c280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c282:	1c53      	adds	r3, r2, #1
 800c284:	647b      	str	r3, [r7, #68]	; 0x44
 800c286:	68fc      	ldr	r4, [r7, #12]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68b9      	ldr	r1, [r7, #8]
 800c28c:	47a0      	blx	r4
        format++;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	3301      	adds	r3, #1
 800c292:	603b      	str	r3, [r7, #0]
        break;
 800c294:	bf00      	nop
  while (*format)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f47f ab71 	bne.w	800b982 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800c2a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d302      	bcc.n	800c2ae <_vsnprintf+0x94e>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	1e5a      	subs	r2, r3, #1
 800c2ac:	e000      	b.n	800c2b0 <_vsnprintf+0x950>
 800c2ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2b0:	68fc      	ldr	r4, [r7, #12]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68b9      	ldr	r1, [r7, #8]
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800c2ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3758      	adds	r7, #88	; 0x58
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bdb0      	pop	{r4, r5, r7, pc}

0800c2c4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800c2c4:	b40f      	push	{r0, r1, r2, r3}
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b086      	sub	sp, #24
 800c2ca:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800c2cc:	f107 031c 	add.w	r3, r7, #28
 800c2d0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800c2d2:	1d39      	adds	r1, r7, #4
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	f04f 32ff 	mov.w	r2, #4294967295
 800c2de:	4806      	ldr	r0, [pc, #24]	; (800c2f8 <printf_+0x34>)
 800c2e0:	f7ff fb3e 	bl	800b960 <_vsnprintf>
 800c2e4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2f2:	b004      	add	sp, #16
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	0800abd7 	.word	0x0800abd7

0800c2fc <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	ed87 0a01 	vstr	s0, [r7, #4]
 800c306:	ed97 0a01 	vldr	s0, [r7, #4]
 800c30a:	f01f f8cd 	bl	802b4a8 <asinf>
 800c30e:	eef0 7a40 	vmov.f32	s15, s0
 800c312:	eeb0 0a67 	vmov.f32	s0, s15
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	ed87 0a01 	vstr	s0, [r7, #4]
 800c326:	edc7 0a00 	vstr	s1, [r7]
 800c32a:	edd7 0a00 	vldr	s1, [r7]
 800c32e:	ed97 0a01 	vldr	s0, [r7, #4]
 800c332:	f01f f90d 	bl	802b550 <atan2f>
 800c336:	eef0 7a40 	vmov.f32	s15, s0
 800c33a:	eeb0 0a67 	vmov.f32	s0, s15
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c34e:	ed97 0a01 	vldr	s0, [r7, #4]
 800c352:	f01f f901 	bl	802b558 <sqrtf>
 800c356:	eef0 7a40 	vmov.f32	s15, s0
 800c35a:	eeb0 0a67 	vmov.f32	s0, s15
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:
	 *  \return variable is updated(true), variable is not updated(false)
	 *
	 *  setFunction :
	 *  \param[in]		variable		msgBus data is changed to input data
	 */
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 800c364:	b4b0      	push	{r4, r5, r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
 800c36e:	2300      	movs	r3, #0
 800c370:	73fb      	strb	r3, [r7, #15]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c37e:	42a2      	cmp	r2, r4
 800c380:	bf08      	it	eq
 800c382:	4299      	cmpeq	r1, r3
 800c384:	d001      	beq.n	800c38a <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x26>
 800c386:	2301      	movs	r3, #1
 800c388:	73fb      	strb	r3, [r7, #15]
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4614      	mov	r4, r2
 800c390:	461d      	mov	r5, r3
 800c392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c396:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c39a:	e884 0003 	stmia.w	r4, {r0, r1}
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3714      	adds	r7, #20
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bcb0      	pop	{r4, r5, r7}
 800c3a8:	4770      	bx	lr

0800c3aa <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 800c3aa:	b4b0      	push	{r4, r5, r7}
 800c3ac:	b085      	sub	sp, #20
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800c3c4:	42a2      	cmp	r2, r4
 800c3c6:	bf08      	it	eq
 800c3c8:	4299      	cmpeq	r1, r3
 800c3ca:	d001      	beq.n	800c3d0 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x26>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	73fb      	strb	r3, [r7, #15]
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4615      	mov	r5, r2
 800c3d6:	f103 0418 	add.w	r4, r3, #24
 800c3da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c3dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c3de:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c3e2:	e885 0003 	stmia.w	r5, {r0, r1}
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bcb0      	pop	{r4, r5, r7}
 800c3f0:	4770      	bx	lr

0800c3f2 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 800c3f2:	b4b0      	push	{r4, r5, r7}
 800c3f4:	b085      	sub	sp, #20
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	6039      	str	r1, [r7, #0]
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	e9d3 1200 	ldrd	r1, r2, [r3]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800c40c:	42a2      	cmp	r2, r4
 800c40e:	bf08      	it	eq
 800c410:	4299      	cmpeq	r1, r3
 800c412:	d001      	beq.n	800c418 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x26>
 800c414:	2301      	movs	r3, #1
 800c416:	73fb      	strb	r3, [r7, #15]
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4615      	mov	r5, r2
 800c41e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800c422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c426:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c42a:	e885 0003 	stmia.w	r5, {r0, r1}
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	bcb0      	pop	{r4, r5, r7}
 800c438:	4770      	bx	lr

0800c43a <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:

    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
    SIMPLE_FUNC_IMPL(VehiclePositionSP, VehiclePositionSP, vehiclePositionSP)
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800c43a:	b4b0      	push	{r4, r5, r7}
 800c43c:	b083      	sub	sp, #12
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800c44c:	4615      	mov	r5, r2
 800c44e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c456:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c45a:	e884 0003 	stmia.w	r4, {r0, r1}
 800c45e:	bf00      	nop
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	bcb0      	pop	{r4, r5, r7}
 800c466:	4770      	bx	lr

0800c468 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 800c468:	b4b0      	push	{r4, r5, r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	f503 7494 	add.w	r4, r3, #296	; 0x128
 800c47a:	4615      	mov	r5, r2
 800c47c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c47e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c480:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c484:	e884 0003 	stmia.w	r4, {r0, r1}
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bcb0      	pop	{r4, r5, r7}
 800c490:	4770      	bx	lr
	...

0800c494 <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 800c494:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800c498:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800c49a:	4b0e      	ldr	r3, [pc, #56]	; (800c4d4 <_ZL11microsecondv+0x40>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	f04f 0200 	mov.w	r2, #0
 800c4a4:	f04f 0b00 	mov.w	fp, #0
 800c4a8:	f04f 0c00 	mov.w	ip, #0
 800c4ac:	468c      	mov	ip, r1
 800c4ae:	f04f 0b00 	mov.w	fp, #0
 800c4b2:	4a09      	ldr	r2, [pc, #36]	; (800c4d8 <_ZL11microsecondv+0x44>)
 800c4b4:	6812      	ldr	r2, [r2, #0]
 800c4b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	f04f 0200 	mov.w	r2, #0
 800c4be:	ea4b 0301 	orr.w	r3, fp, r1
 800c4c2:	ea4c 0402 	orr.w	r4, ip, r2
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	24000934 	.word	0x24000934
 800c4d8:	2400c780 	.word	0x2400c780

0800c4dc <_ZN2FC10ModuleAHRSC1Ev>:
#include "Lib/Matrix/matrix/Quaternion.hpp"
#include "cmath"

namespace FC{

ModuleAHRS::ModuleAHRS()
 800c4dc:	b590      	push	{r4, r7, lr}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	, lastUpdate{0}
	, beta{0.6f}
	, q0{1.0f}
	, q1{0.0f}
	, q2{0.0f}
	, q3{0.0f}
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	6053      	str	r3, [r2, #4]
 800c4ee:	6093      	str	r3, [r2, #8]
 800c4f0:	60d3      	str	r3, [r2, #12]
 800c4f2:	6113      	str	r3, [r2, #16]
 800c4f4:	6153      	str	r3, [r2, #20]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	3318      	adds	r3, #24
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]
 800c4fe:	605a      	str	r2, [r3, #4]
 800c500:	609a      	str	r2, [r3, #8]
 800c502:	60da      	str	r2, [r3, #12]
 800c504:	611a      	str	r2, [r3, #16]
 800c506:	615a      	str	r2, [r3, #20]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3330      	adds	r3, #48	; 0x30
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
 800c510:	605a      	str	r2, [r3, #4]
 800c512:	609a      	str	r2, [r3, #8]
 800c514:	60da      	str	r2, [r3, #12]
 800c516:	611a      	str	r2, [r3, #16]
 800c518:	615a      	str	r2, [r3, #20]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	3348      	adds	r3, #72	; 0x48
 800c51e:	2228      	movs	r2, #40	; 0x28
 800c520:	2100      	movs	r1, #0
 800c522:	4618      	mov	r0, r3
 800c524:	f021 fb8f 	bl	802dc46 <memset>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	3370      	adds	r3, #112	; 0x70
 800c52c:	2200      	movs	r2, #0
 800c52e:	601a      	str	r2, [r3, #0]
 800c530:	605a      	str	r2, [r3, #4]
 800c532:	609a      	str	r2, [r3, #8]
 800c534:	60da      	str	r2, [r3, #12]
 800c536:	611a      	str	r2, [r3, #16]
 800c538:	615a      	str	r2, [r3, #20]
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	f04f 0300 	mov.w	r3, #0
 800c540:	f04f 0400 	mov.w	r4, #0
 800c544:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a0e      	ldr	r2, [pc, #56]	; (800c584 <_ZN2FC10ModuleAHRSC1Ev+0xa8>)
 800c54c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c556:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f04f 0200 	mov.w	r2, #0
 800c560:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f04f 0200 	mov.w	r2, #0
 800c56a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f04f 0200 	mov.w	r2, #0
 800c574:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
{

}
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd90      	pop	{r4, r7, pc}
 800c582:	bf00      	nop
 800c584:	3f19999a 	.word	0x3f19999a

0800c588 <_ZN2FC10ModuleAHRS7oneStepEv>:

void ModuleAHRS::oneStep(){
 800c588:	b590      	push	{r4, r7, lr}
 800c58a:	b09d      	sub	sp, #116	; 0x74
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
	/* receive data */
	msgBus.getBodyAccel(&this->bodyAccelSub);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4619      	mov	r1, r3
 800c594:	48c1      	ldr	r0, [pc, #772]	; (800c89c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800c596:	f7ff fee5 	bl	800c364 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
	msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3318      	adds	r3, #24
 800c59e:	4619      	mov	r1, r3
 800c5a0:	48be      	ldr	r0, [pc, #760]	; (800c89c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800c5a2:	f7ff ff02 	bl	800c3aa <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
//						   bodyAccelSub.xyz[2],
//						   bodyMagSub.xyz[0],
//						   bodyMagSub.xyz[1],
//						   bodyMagSub.xyz[2]);
//	}
	msgBus.getBodyMag(&this->bodyMagSub);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	3330      	adds	r3, #48	; 0x30
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	48bb      	ldr	r0, [pc, #748]	; (800c89c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800c5ae:	f7ff ff20 	bl	800c3f2 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
	MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	edd3 7a08 	vldr	s15, [r3, #32]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	ed93 6a02 	vldr	s12, [r3, #8]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	edd3 5a03 	vldr	s11, [r3, #12]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	ed93 5a04 	vldr	s10, [r3, #16]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 800c5e8:	eeb0 3a64 	vmov.f32	s6, s9
 800c5ec:	eef0 2a45 	vmov.f32	s5, s10
 800c5f0:	eeb0 2a65 	vmov.f32	s4, s11
 800c5f4:	eef0 1a46 	vmov.f32	s3, s12
 800c5f8:	eeb0 1a66 	vmov.f32	s2, s13
 800c5fc:	eef0 0a47 	vmov.f32	s1, s14
 800c600:	eeb0 0a67 	vmov.f32	s0, s15
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f94f 	bl	800c8a8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
					   bodyMagSub.xyz[1],
					   bodyMagSub.xyz[2]);

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
	roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c62a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c62e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800c63e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c64e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c652:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c67a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c67e:	eef0 0a67 	vmov.f32	s1, s15
 800c682:	eeb0 0a46 	vmov.f32	s0, s12
 800c686:	f7ff fe49 	bl	800c31c <_ZSt5atan2ff>
 800c68a:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c69a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c6aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c6b6:	eeb0 0a67 	vmov.f32	s0, s15
 800c6ba:	f7ff fe1f 	bl	800c2fc <_ZSt4asinf>
 800c6be:	eef0 7a40 	vmov.f32	s15, s0
 800c6c2:	eef1 7a67 	vneg.f32	s15, s15
 800c6c6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c6d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c6e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6ee:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800c6fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c70e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c712:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c726:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c73a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c73e:	eef0 0a67 	vmov.f32	s1, s15
 800c742:	eeb0 0a46 	vmov.f32	s0, s12
 800c746:	f7ff fde9 	bl	800c31c <_ZSt5atan2ff>
 800c74a:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64

	matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800c766:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c76a:	eef0 1a46 	vmov.f32	s3, s12
 800c76e:	eeb0 1a66 	vmov.f32	s2, s13
 800c772:	eef0 0a47 	vmov.f32	s1, s14
 800c776:	eeb0 0a67 	vmov.f32	s0, s15
 800c77a:	4618      	mov	r0, r3
 800c77c:	f001 fb5f 	bl	800de3e <_ZN6matrix10QuaternionIfEC1Effff>
	matrix::Dcmf dcm(quat/*.inversed()*/);		/* body -> NED DCM */
 800c780:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f001 fbab 	bl	800dee6 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
	matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
								   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	edd3 7a02 	vldr	s15, [r3, #8]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	ed93 7a03 	vldr	s14, [r3, #12]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	edd3 6a04 	vldr	s13, [r3, #16]
 800c7a2:	f107 0318 	add.w	r3, r7, #24
 800c7a6:	eeb0 1a66 	vmov.f32	s2, s13
 800c7aa:	eef0 0a47 	vmov.f32	s1, s14
 800c7ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f001 fce0 	bl	800e178 <_ZN6matrix7Vector3IfEC1Efff>

	matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 800c7b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c7bc:	f107 0218 	add.w	r2, r7, #24
 800c7c0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f001 fd04 	bl	800e1d2 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 800c7ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c7ce:	f107 030c 	add.w	r3, r7, #12
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f001 fd4d 	bl	800e274 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

	attitudePub.timestamp = microsecond();
 800c7da:	f7ff fe5b 	bl	800c494 <_ZL11microsecondv>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	attitudePub.q[0] = this->q0;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	651a      	str	r2, [r3, #80]	; 0x50
	attitudePub.q[1] = this->q1;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	655a      	str	r2, [r3, #84]	; 0x54
	attitudePub.q[2] = this->q2;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	659a      	str	r2, [r3, #88]	; 0x58
	attitudePub.q[3] = this->q3;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	65da      	str	r2, [r3, #92]	; 0x5c
	attitudePub.roll = roll;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c814:	661a      	str	r2, [r3, #96]	; 0x60
	attitudePub.pitch = pitch;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c81a:	665a      	str	r2, [r3, #100]	; 0x64
	attitudePub.yaw = yaw;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c820:	669a      	str	r2, [r3, #104]	; 0x68

	msgBus.setAttitude(attitudePub);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	3348      	adds	r3, #72	; 0x48
 800c826:	4619      	mov	r1, r3
 800c828:	481c      	ldr	r0, [pc, #112]	; (800c89c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800c82a:	f7ff fe06 	bl	800c43a <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

	nedAccelPub.timestamp = microsecond();
 800c82e:	f7ff fe31 	bl	800c494 <_ZL11microsecondv>
 800c832:	4603      	mov	r3, r0
 800c834:	460c      	mov	r4, r1
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	nedAccelPub.xyz[0] = tempNedAccel(0);
 800c83c:	f107 030c 	add.w	r3, r7, #12
 800c840:	2100      	movs	r1, #0
 800c842:	4618      	mov	r0, r3
 800c844:	f001 fd3c 	bl	800e2c0 <_ZN6matrix6VectorIfLj3EEclEj>
 800c848:	4603      	mov	r3, r0
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	679a      	str	r2, [r3, #120]	; 0x78
	nedAccelPub.xyz[1] = tempNedAccel(1);
 800c850:	f107 030c 	add.w	r3, r7, #12
 800c854:	2101      	movs	r1, #1
 800c856:	4618      	mov	r0, r3
 800c858:	f001 fd32 	bl	800e2c0 <_ZN6matrix6VectorIfLj3EEclEj>
 800c85c:	4603      	mov	r3, r0
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	67da      	str	r2, [r3, #124]	; 0x7c
	nedAccelPub.xyz[2] = tempNedAccel(2);
 800c864:	f107 030c 	add.w	r3, r7, #12
 800c868:	2102      	movs	r1, #2
 800c86a:	4618      	mov	r0, r3
 800c86c:	f001 fd28 	bl	800e2c0 <_ZN6matrix6VectorIfLj3EEclEj>
 800c870:	4603      	mov	r3, r0
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	msgBus.setNedAccel(nedAccelPub);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	3370      	adds	r3, #112	; 0x70
 800c87e:	4619      	mov	r1, r3
 800c880:	4806      	ldr	r0, [pc, #24]	; (800c89c <_ZN2FC10ModuleAHRS7oneStepEv+0x314>)
 800c882:	f7ff fdf1 	bl	800c468 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>

	/* Freq class variable */
	freqCnt++;
 800c886:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <_ZN2FC10ModuleAHRS7oneStepEv+0x318>)
 800c888:	881b      	ldrh	r3, [r3, #0]
 800c88a:	3301      	adds	r3, #1
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	4b04      	ldr	r3, [pc, #16]	; (800c8a0 <_ZN2FC10ModuleAHRS7oneStepEv+0x318>)
 800c890:	801a      	strh	r2, [r3, #0]
}
 800c892:	bf00      	nop
 800c894:	3774      	adds	r7, #116	; 0x74
 800c896:	46bd      	mov	sp, r7
 800c898:	bd90      	pop	{r4, r7, pc}
 800c89a:	bf00      	nop
 800c89c:	240009b8 	.word	0x240009b8
 800c8a0:	24000938 	.word	0x24000938
 800c8a4:	00000000 	.word	0x00000000

0800c8a8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 800c8a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c8ac:	b0ae      	sub	sp, #184	; 0xb8
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6278      	str	r0, [r7, #36]	; 0x24
 800c8b2:	ed87 0a08 	vstr	s0, [r7, #32]
 800c8b6:	edc7 0a07 	vstr	s1, [r7, #28]
 800c8ba:	ed87 1a06 	vstr	s2, [r7, #24]
 800c8be:	edc7 1a05 	vstr	s3, [r7, #20]
 800c8c2:	ed87 2a04 	vstr	s4, [r7, #16]
 800c8c6:	edc7 2a03 	vstr	s5, [r7, #12]
 800c8ca:	ed87 3a02 	vstr	s6, [r7, #8]
 800c8ce:	edc7 3a01 	vstr	s7, [r7, #4]
 800c8d2:	ed87 4a00 	vstr	s8, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800c8d6:	edd7 7a02 	vldr	s15, [r7, #8]
 800c8da:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8e2:	d11e      	bne.n	800c922 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
 800c8e4:	edd7 7a01 	vldr	s15, [r7, #4]
 800c8e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f0:	d117      	bne.n	800c922 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
 800c8f2:	edd7 7a00 	vldr	s15, [r7]
 800c8f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8fe:	d110      	bne.n	800c922 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0x7a>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800c900:	edd7 2a03 	vldr	s5, [r7, #12]
 800c904:	ed97 2a04 	vldr	s4, [r7, #16]
 800c908:	edd7 1a05 	vldr	s3, [r7, #20]
 800c90c:	ed97 1a06 	vldr	s2, [r7, #24]
 800c910:	edd7 0a07 	vldr	s1, [r7, #28]
 800c914:	ed97 0a08 	vldr	s0, [r7, #32]
 800c918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c91a:	f000 feed 	bl	800d6f8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 800c91e:	f000 bed9 	b.w	800d6d4 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe2c>
		return;
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c924:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800c928:	eeb1 7a67 	vneg.f32	s14, s15
 800c92c:	edd7 7a08 	vldr	s15, [r7, #32]
 800c930:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c93a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c93e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c942:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800c94c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c954:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c958:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c95c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c960:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800c964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c966:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c96a:	edd7 7a08 	vldr	s15, [r7, #32]
 800c96e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c974:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800c978:	edd7 7a06 	vldr	s15, [r7, #24]
 800c97c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c980:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800c98a:	edd7 7a07 	vldr	s15, [r7, #28]
 800c98e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c992:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c996:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c99a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c99e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c9a8:	edd7 7a07 	vldr	s15, [r7, #28]
 800c9ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800c9b6:	edd7 7a06 	vldr	s15, [r7, #24]
 800c9ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9be:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c4:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800c9c8:	edd7 7a08 	vldr	s15, [r7, #32]
 800c9cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c9d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c9dc:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800c9e6:	edd7 7a06 	vldr	s15, [r7, #24]
 800c9ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f0:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800c9f4:	edd7 7a07 	vldr	s15, [r7, #28]
 800c9f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800ca06:	edd7 7a08 	vldr	s15, [r7, #32]
 800ca0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ca16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca1a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800ca1e:	ed97 7a05 	vldr	s14, [r7, #20]
 800ca22:	edd7 7a05 	vldr	s15, [r7, #20]
 800ca26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca2a:	edd7 6a04 	vldr	s13, [r7, #16]
 800ca2e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ca32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca36:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca3a:	edd7 6a03 	vldr	s13, [r7, #12]
 800ca3e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca4a:	eeb0 0a67 	vmov.f32	s0, s15
 800ca4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca50:	f001 f998 	bl	800dd84 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800ca54:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 800ca58:	ed97 7a05 	vldr	s14, [r7, #20]
 800ca5c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ca60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca64:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 800ca68:	ed97 7a04 	vldr	s14, [r7, #16]
 800ca6c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ca70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca74:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 800ca78:	ed97 7a03 	vldr	s14, [r7, #12]
 800ca7c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ca80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca84:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800ca88:	ed97 7a02 	vldr	s14, [r7, #8]
 800ca8c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ca90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca94:	edd7 6a01 	vldr	s13, [r7, #4]
 800ca98:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800caa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800caa4:	edd7 6a00 	vldr	s13, [r7]
 800caa8:	edd7 7a00 	vldr	s15, [r7]
 800caac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cab4:	eeb0 0a67 	vmov.f32	s0, s15
 800cab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800caba:	f001 f963 	bl	800dd84 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800cabe:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 800cac2:	ed97 7a02 	vldr	s14, [r7, #8]
 800cac6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800caca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cace:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 800cad2:	ed97 7a01 	vldr	s14, [r7, #4]
 800cad6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800cada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cade:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 800cae2:	ed97 7a00 	vldr	s14, [r7]
 800cae6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800caea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caee:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800caf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cafc:	ed97 7a02 	vldr	s14, [r7, #8]
 800cb00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb04:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cb0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb12:	ed97 7a01 	vldr	s14, [r7, #4]
 800cb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cb24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb28:	ed97 7a00 	vldr	s14, [r7]
 800cb2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb30:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800cb3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb3e:	ed97 7a02 	vldr	s14, [r7, #8]
 800cb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb46:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cb50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb54:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800cb5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb62:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 800cb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb68:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cb6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb70:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cb7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb7e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cb88:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cb92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb96:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cba0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cbaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbae:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800cbbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 800cbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbce:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800cbd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbd6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cbe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbea:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 800cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cbfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbfe:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 800cc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc04:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800cc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc12:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc26:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc3a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cc4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc4e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc54:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cc5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc62:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 800cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc68:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cc72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc76:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800cc7a:	ed97 7a02 	vldr	s14, [r7, #8]
 800cc7e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800cc82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc88:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800cc8c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cc90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cc94:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800cc9e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800cca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ccaa:	edd7 6a02 	vldr	s13, [r7, #8]
 800ccae:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800ccb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ccba:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800ccbe:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ccd4:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800ccd8:	edd7 7a00 	vldr	s15, [r7]
 800ccdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ccee:	edd7 6a02 	vldr	s13, [r7, #8]
 800ccf2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ccf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ccfe:	edd7 6a02 	vldr	s13, [r7, #8]
 800cd02:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800cd06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd0e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800cd18:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800cd1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd20:	edd7 6a01 	vldr	s13, [r7, #4]
 800cd24:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800cd28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800cd36:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800cd3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800cd48:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800cd4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd50:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd54:	edd7 6a01 	vldr	s13, [r7, #4]
 800cd58:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800cd5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd60:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cd64:	edd7 6a01 	vldr	s13, [r7, #4]
 800cd68:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800cd6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd70:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd74:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800cd78:	edd7 7a00 	vldr	s15, [r7]
 800cd7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cd86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd8e:	edd7 6a01 	vldr	s13, [r7, #4]
 800cd92:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800cd96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd9e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 800cda2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800cda6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800cdaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdae:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800cdb2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800cdb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdbe:	eeb0 0a67 	vmov.f32	s0, s15
 800cdc2:	f7ff fabf 	bl	800c344 <_ZSt4sqrtf>
 800cdc6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800cdca:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800cdce:	eeb1 7a67 	vneg.f32	s14, s15
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800cdd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdde:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800cde2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cde6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdee:	edd7 6a00 	vldr	s13, [r7]
 800cdf2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800cdf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce00:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800ce04:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800ce08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce10:	edd7 6a00 	vldr	s13, [r7]
 800ce14:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800ce18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce20:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800ce24:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800ce32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce36:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce3a:	edd7 6a00 	vldr	s13, [r7]
 800ce3e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ce42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce46:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ce4a:	edd7 6a00 	vldr	s13, [r7]
 800ce4e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800ce52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce5a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 800ce5e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ce62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ce66:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 800ce6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ce6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ce72:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800ce76:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800ce7a:	eeb1 7a67 	vneg.f32	s14, s15
 800ce7e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800ce82:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ce86:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800ce8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ce8e:	edd7 7a05 	vldr	s15, [r7, #20]
 800ce92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ce96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce9a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800ce9e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800cea2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800cea6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ceaa:	edd7 7a04 	vldr	s15, [r7, #16]
 800ceae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ceb2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ceb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ceba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec0:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800cec4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cec8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cecc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ced0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ced4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ced8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800cedc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800cee0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800cee4:	ee26 6a27 	vmul.f32	s12, s12, s15
 800cee8:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800ceec:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800cef0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800cef4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cef8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800cefc:	ee36 6a27 	vadd.f32	s12, s12, s15
 800cf00:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf04:	ee76 7a67 	vsub.f32	s15, s12, s15
 800cf08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cf10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800cf14:	eef1 6a67 	vneg.f32	s13, s15
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800cf1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf24:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800cf28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cf2c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800cf30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800cf34:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800cf38:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800cf3c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800cf40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800cf44:	ee26 6a27 	vmul.f32	s12, s12, s15
 800cf48:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800cf4c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800cf50:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800cf54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cf58:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800cf5c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800cf60:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf64:	ee76 7a67 	vsub.f32	s15, s12, s15
 800cf68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800cf76:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800cf7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800cf7e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800cf82:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800cf86:	ee36 6a27 	vadd.f32	s12, s12, s15
 800cf8a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800cf8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800cf92:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800cf96:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800cf9a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800cf9e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800cfa2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800cfa6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cfaa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800cfae:	ee36 6a27 	vadd.f32	s12, s12, s15
 800cfb2:	edd7 7a00 	vldr	s15, [r7]
 800cfb6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800cfba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cfbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfc2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800cfc6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800cfca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800cfce:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800cfd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cfd6:	edd7 7a05 	vldr	s15, [r7, #20]
 800cfda:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cfde:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800cfe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfe6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800cfea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800cfee:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800cff2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800cff6:	edd7 7a04 	vldr	s15, [r7, #16]
 800cffa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cffe:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d006:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d010:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d014:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d018:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d01c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d020:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d024:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d028:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d02c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d030:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d034:	edd7 7a03 	vldr	s15, [r7, #12]
 800d038:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d03c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d040:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d04a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d04e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d052:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d056:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d05a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d05e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d062:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d066:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d06a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d06e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800d072:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800d076:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d07a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d07e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d082:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d086:	edd7 7a02 	vldr	s15, [r7, #8]
 800d08a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d08e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d092:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d098:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d09c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d0a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a6:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800d0aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d0ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d0b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d0b6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800d0ba:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d0be:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d0c2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d0c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d0ca:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d0ce:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d0d2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d0d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d0da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d0de:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d0e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d0ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d0f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d0fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800d106:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d10a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d10e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d112:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800d116:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d11a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d11e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d122:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d126:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d12a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d12e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d132:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d136:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d13a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d13e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d142:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d146:	edd7 7a00 	vldr	s15, [r7]
 800d14a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d14e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d152:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d156:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800d15a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d15e:	eeb1 7a67 	vneg.f32	s14, s15
 800d162:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d166:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d16a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d16e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d172:	edd7 7a05 	vldr	s15, [r7, #20]
 800d176:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d17a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d17e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800d182:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d186:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800d18a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d18e:	edd7 7a04 	vldr	s15, [r7, #16]
 800d192:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d196:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800d19a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d19e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d1a8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d1ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d1b0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d1b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d1b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d1bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d1c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d1c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d1c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d1cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d1d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d1dc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d1e0:	eef1 6a67 	vneg.f32	s13, s15
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d1ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800d1f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d1f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d1fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d200:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d204:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d208:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d20c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d210:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d214:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d218:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d21c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800d220:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800d224:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d228:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d22c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d230:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d234:	edd7 7a02 	vldr	s15, [r7, #8]
 800d238:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d23c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d240:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d24a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d24e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d254:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800d258:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d25c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d260:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d264:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800d268:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d26c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d270:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d274:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d278:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d27c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d280:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d284:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d288:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d28c:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d290:	edd7 7a01 	vldr	s15, [r7, #4]
 800d294:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d29c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800d2a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d2aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800d2b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d2b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d2bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d2c0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800d2c4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d2c8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d2cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d2d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d2d4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d2d8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d2dc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d2e0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d2e4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d2e8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d2ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d2f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d2f4:	edd7 7a00 	vldr	s15, [r7]
 800d2f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d2fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d300:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d304:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800d308:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d30c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800d310:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d314:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d318:	edd7 7a05 	vldr	s15, [r7, #20]
 800d31c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d320:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800d324:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d328:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800d32c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d330:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800d334:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d338:	edd7 7a04 	vldr	s15, [r7, #16]
 800d33c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d340:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800d344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d34c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d350:	eef1 6a67 	vneg.f32	s13, s15
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d35a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800d364:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d368:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d36c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d370:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d374:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d378:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d37c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d380:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d384:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d388:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d38c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800d390:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800d394:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d398:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d39c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d3a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d3a4:	edd7 7a02 	vldr	s15, [r7, #8]
 800d3a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d3ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d3b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d3b8:	eef1 6a67 	vneg.f32	s13, s15
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3be:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d3c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c8:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 800d3cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d3d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d3d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d3d8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800d3dc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d3e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d3e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d3e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d3ec:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d3f0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d3f4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d3f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d3fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d400:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d404:	edd7 7a01 	vldr	s15, [r7, #4]
 800d408:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d40c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d410:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d41a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d41e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d422:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800d426:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d42a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d42e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800d432:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d436:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d43a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800d43e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d442:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800d446:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d44a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d44e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800d452:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d456:	edd7 7a00 	vldr	s15, [r7]
 800d45a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d45e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d462:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d466:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800d46a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d46e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d472:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d476:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800d47a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d47e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d482:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d486:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800d48a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d48e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d492:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d496:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d49a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d49e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d4aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4ac:	f000 fc6a 	bl	800dd84 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800d4b0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 800d4b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d4b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d4bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4c0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 800d4c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d4c8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 800d4d4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d4d8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 800d4e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d4e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d4ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f6:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800d4fa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d502:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800d506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d50a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800d514:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d51c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800d520:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d524:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 800d528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52a:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800d52e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d536:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800d53a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d53e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 800d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d544:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800d548:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d54c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d550:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800d554:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d558:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)/1000000.0;	/*[second]*/
 800d55c:	f7fe ff9a 	bl	800c494 <_ZL11microsecondv>
 800d560:	460a      	mov	r2, r1
 800d562:	4601      	mov	r1, r0
 800d564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d566:	e9d3 bc22 	ldrd	fp, ip, [r3, #136]	; 0x88
 800d56a:	460b      	mov	r3, r1
 800d56c:	4614      	mov	r4, r2
 800d56e:	ebb3 030b 	subs.w	r3, r3, fp
 800d572:	eb64 040c 	sbc.w	r4, r4, ip
 800d576:	4618      	mov	r0, r3
 800d578:	4621      	mov	r1, r4
 800d57a:	f7f3 f887 	bl	800068c <__aeabi_ul2d>
 800d57e:	ec41 0b15 	vmov	d5, r0, r1
 800d582:	ed9f 6b57 	vldr	d6, [pc, #348]	; 800d6e0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe38>
 800d586:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800d58a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d58e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 800d592:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d596:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d59a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800d6e8 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe40>
 800d59e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a6:	dd01      	ble.n	800d5ac <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xd04>
 800d5a8:	4b51      	ldr	r3, [pc, #324]	; (800d6f0 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe48>)
 800d5aa:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d5b2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d5b6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800d5ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ca:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800d5ce:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d5d2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800d5d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e0:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800d5ea:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d5ee:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800d5f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fc:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800d606:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d60a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800d60e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d612:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d618:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800d61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d624:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d634:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d63c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d642:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d64c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d650:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d664:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d668:	eeb0 0a67 	vmov.f32	s0, s15
 800d66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d66e:	f000 fb89 	bl	800dd84 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800d672:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d67c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d680:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800d68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800d690:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d694:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800d6a4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d6a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800d6b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800d6bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800d6c6:	f7fe fee5 	bl	800c494 <_ZL11microsecondv>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800d6d4:	37b8      	adds	r7, #184	; 0xb8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800d6dc:	f3af 8000 	nop.w
 800d6e0:	00000000 	.word	0x00000000
 800d6e4:	412e8480 	.word	0x412e8480
 800d6e8:	47ae147b 	.word	0x47ae147b
 800d6ec:	3f847ae1 	.word	0x3f847ae1
 800d6f0:	3c23d70a 	.word	0x3c23d70a
 800d6f4:	00000000 	.word	0x00000000

0800d6f8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800d6f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800d6fc:	b0a0      	sub	sp, #128	; 0x80
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	61f8      	str	r0, [r7, #28]
 800d702:	ed87 0a06 	vstr	s0, [r7, #24]
 800d706:	edc7 0a05 	vstr	s1, [r7, #20]
 800d70a:	ed87 1a04 	vstr	s2, [r7, #16]
 800d70e:	edc7 1a03 	vstr	s3, [r7, #12]
 800d712:	ed87 2a02 	vstr	s4, [r7, #8]
 800d716:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d720:	eeb1 7a67 	vneg.f32	s14, s15
 800d724:	edd7 7a06 	vldr	s15, [r7, #24]
 800d728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d732:	edd7 7a05 	vldr	s15, [r7, #20]
 800d736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d73a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d744:	edd7 7a04 	vldr	s15, [r7, #16]
 800d748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d74c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d750:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d754:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d758:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d762:	edd7 7a06 	vldr	s15, [r7, #24]
 800d766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d770:	edd7 7a04 	vldr	s15, [r7, #16]
 800d774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d782:	edd7 7a05 	vldr	s15, [r7, #20]
 800d786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d78a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d78e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d792:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d796:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d7a0:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d7ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800d7b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800d7c0:	edd7 7a06 	vldr	s15, [r7, #24]
 800d7c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d7d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7d4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d7de:	edd7 7a04 	vldr	s15, [r7, #16]
 800d7e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800d7ec:	edd7 7a05 	vldr	s15, [r7, #20]
 800d7f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800d7fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800d802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d80a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d80e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d812:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800d816:	ed97 7a03 	vldr	s14, [r7, #12]
 800d81a:	edd7 7a03 	vldr	s15, [r7, #12]
 800d81e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d822:	edd7 6a02 	vldr	s13, [r7, #8]
 800d826:	edd7 7a02 	vldr	s15, [r7, #8]
 800d82a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d82e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d832:	edd7 6a01 	vldr	s13, [r7, #4]
 800d836:	edd7 7a01 	vldr	s15, [r7, #4]
 800d83a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d83e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d842:	eeb0 0a67 	vmov.f32	s0, s15
 800d846:	69f8      	ldr	r0, [r7, #28]
 800d848:	f000 fa9c 	bl	800dd84 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800d84c:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 800d850:	ed97 7a03 	vldr	s14, [r7, #12]
 800d854:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d85c:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 800d860:	ed97 7a02 	vldr	s14, [r7, #8]
 800d864:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d86c:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 800d870:	ed97 7a01 	vldr	s14, [r7, #4]
 800d874:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800d878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d87c:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d886:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d88a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d894:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d898:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d8a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d8a6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d8b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d8b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d8be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800d8c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8c6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d8d0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800d8d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8d8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d8e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800d8e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8ea:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d8f4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800d8f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8fc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d906:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800d90a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d90e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800d91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d922:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d936:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800d946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d94a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800d95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d95e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800d962:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800d966:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d96a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d96e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800d972:	edd7 7a03 	vldr	s15, [r7, #12]
 800d976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d97a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d97e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d982:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d98a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d98e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800d992:	edd7 7a02 	vldr	s15, [r7, #8]
 800d996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d99a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d99e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800d9a2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800d9a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d9aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9ae:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800d9b2:	edd7 7a03 	vldr	s15, [r7, #12]
 800d9b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d9c2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d9c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800d9d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d9d8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800d9dc:	edd7 7a02 	vldr	s15, [r7, #8]
 800d9e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d9ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9f0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800d9f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d9f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da00:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800da04:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800da08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da10:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800da14:	edd7 7a01 	vldr	s15, [r7, #4]
 800da18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da20:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800da24:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800da28:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800da2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800da30:	69fb      	ldr	r3, [r7, #28]
 800da32:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800da36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da3a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800da3e:	edd7 7a03 	vldr	s15, [r7, #12]
 800da42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da46:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da4a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800da4e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800da52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da5a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800da5e:	edd7 7a02 	vldr	s15, [r7, #8]
 800da62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da66:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da6a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800da6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800da72:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800da76:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800da7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da82:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800da86:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800da8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da92:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800da96:	edd7 7a01 	vldr	s15, [r7, #4]
 800da9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daa2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800daa6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800daaa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800daae:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800dab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dabc:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800dac0:	edd7 7a03 	vldr	s15, [r7, #12]
 800dac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dacc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dad0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800dad4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800dade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dae6:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800daea:	edd7 7a02 	vldr	s15, [r7, #8]
 800daee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800daf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daf6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800dafa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dafe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800db02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db06:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800db0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800db0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db16:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800db1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800db1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db26:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800db2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db36:	eeb0 0a67 	vmov.f32	s0, s15
 800db3a:	69f8      	ldr	r0, [r7, #28]
 800db3c:	f000 f922 	bl	800dd84 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800db40:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 800db44:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db48:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800db4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 800db54:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800db58:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800db5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db60:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 800db64:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800db68:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800db6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db70:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 800db74:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db78:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800db7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db80:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800db8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800db8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db92:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800db96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db9a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800dba4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbac:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800dbb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbb4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800dbbe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dbc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbc6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800dbca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbce:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800dbd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dbdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbe0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800dbe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbe8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)/1000000.0;			/*[second]*/
 800dbec:	f7fe fc52 	bl	800c494 <_ZL11microsecondv>
 800dbf0:	460a      	mov	r2, r1
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	e9d3 bc22 	ldrd	fp, ip, [r3, #136]	; 0x88
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4614      	mov	r4, r2
 800dbfe:	ebb3 030b 	subs.w	r3, r3, fp
 800dc02:	eb64 040c 	sbc.w	r4, r4, ip
 800dc06:	4618      	mov	r0, r3
 800dc08:	4621      	mov	r1, r4
 800dc0a:	f7f2 fd3f 	bl	800068c <__aeabi_ul2d>
 800dc0e:	ec41 0b15 	vmov	d5, r0, r1
 800dc12:	ed9f 6b57 	vldr	d6, [pc, #348]	; 800dd70 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x678>
 800dc16:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800dc1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dc1e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 800dc22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800dc26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dc2a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800dd78 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x680>
 800dc2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc36:	dd01      	ble.n	800dc3c <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x544>
 800dc38:	4b51      	ldr	r3, [pc, #324]	; (800dd80 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x688>)
 800dc3a:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800dc42:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800dc46:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800dc4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800dc5e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800dc62:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800dc66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800dc7a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800dc7e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800dc82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800dc96:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800dc9a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800dc9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800dcb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800dcc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800dcdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800dcf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dcf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dcf8:	eeb0 0a67 	vmov.f32	s0, s15
 800dcfc:	69f8      	ldr	r0, [r7, #28]
 800dcfe:	f000 f841 	bl	800dd84 <_ZN2FC10ModuleAHRS7invSqrtEf>
 800dd02:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800dd0c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800dd10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800dd20:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800dd24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800dd34:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800dd38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800dd48:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800dd4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	lastUpdate = microsecond();
 800dd56:	f7fe fb9d 	bl	800c494 <_ZL11microsecondv>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	460c      	mov	r4, r1
 800dd5e:	69fa      	ldr	r2, [r7, #28]
 800dd60:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800dd64:	bf00      	nop
 800dd66:	3780      	adds	r7, #128	; 0x80
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800dd6e:	bf00      	nop
 800dd70:	00000000 	.word	0x00000000
 800dd74:	412e8480 	.word	0x412e8480
 800dd78:	47ae147b 	.word	0x47ae147b
 800dd7c:	3f847ae1 	.word	0x3f847ae1
 800dd80:	3c23d70a 	.word	0x3c23d70a

0800dd84 <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 800dd84:	b480      	push	{r7}
 800dd86:	b087      	sub	sp, #28
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 800dd90:	edd7 7a00 	vldr	s15, [r7]
 800dd94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dd98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd9c:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800dda4:	f107 0310 	add.w	r3, r7, #16
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	105a      	asrs	r2, r3, #1
 800ddb0:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 800ddb2:	1a9b      	subs	r3, r3, r2
 800ddb4:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800ddb6:	f107 030c 	add.w	r3, r7, #12
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800ddbe:	ed97 7a04 	vldr	s14, [r7, #16]
 800ddc2:	edd7 7a05 	vldr	s15, [r7, #20]
 800ddc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddca:	edd7 7a04 	vldr	s15, [r7, #16]
 800ddce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddd2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800ddd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ddda:	edd7 7a04 	vldr	s15, [r7, #16]
 800ddde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dde2:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	ee07 3a90 	vmov	s15, r3
}
 800ddec:	eeb0 0a67 	vmov.f32	s0, s15
 800ddf0:	371c      	adds	r7, #28
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	5f3759df 	.word	0x5f3759df

0800de00 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	461a      	mov	r2, r3
 800de0c:	2300      	movs	r3, #0
 800de0e:	6013      	str	r3, [r2, #0]
 800de10:	6053      	str	r3, [r2, #4]
 800de12:	6093      	str	r3, [r2, #8]
 800de14:	60d3      	str	r3, [r2, #12]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4618      	mov	r0, r3
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff ffe6 	bl	800de00 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4618      	mov	r0, r3
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 800de3e:	b580      	push	{r7, lr}
 800de40:	b088      	sub	sp, #32
 800de42:	af00      	add	r7, sp, #0
 800de44:	6178      	str	r0, [r7, #20]
 800de46:	ed87 0a04 	vstr	s0, [r7, #16]
 800de4a:	edc7 0a03 	vstr	s1, [r7, #12]
 800de4e:	ed87 1a02 	vstr	s2, [r7, #8]
 800de52:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff ffe3 	bl	800de24 <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	2100      	movs	r1, #0
 800de66:	4618      	mov	r0, r3
 800de68:	f000 fa4a 	bl	800e300 <_ZN6matrix6VectorIfLj4EEclEj>
 800de6c:	4602      	mov	r2, r0
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	6013      	str	r3, [r2, #0]
        q(1) = b;
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	2101      	movs	r1, #1
 800de76:	4618      	mov	r0, r3
 800de78:	f000 fa42 	bl	800e300 <_ZN6matrix6VectorIfLj4EEclEj>
 800de7c:	4602      	mov	r2, r0
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	6013      	str	r3, [r2, #0]
        q(2) = c;
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	2102      	movs	r1, #2
 800de86:	4618      	mov	r0, r3
 800de88:	f000 fa3a 	bl	800e300 <_ZN6matrix6VectorIfLj4EEclEj>
 800de8c:	4602      	mov	r2, r0
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	6013      	str	r3, [r2, #0]
        q(3) = d;
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	2103      	movs	r1, #3
 800de96:	4618      	mov	r0, r3
 800de98:	f000 fa32 	bl	800e300 <_ZN6matrix6VectorIfLj4EEclEj>
 800de9c:	4602      	mov	r2, r0
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6013      	str	r3, [r2, #0]
    }
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	4618      	mov	r0, r3
 800dea6:	3720      	adds	r7, #32
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4618      	mov	r0, r3
 800deb8:	2324      	movs	r3, #36	; 0x24
 800deba:	461a      	mov	r2, r3
 800debc:	2100      	movs	r1, #0
 800debe:	f01f fec2 	bl	802dc46 <memset>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	4618      	mov	r0, r3
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7ff ffe8 	bl	800deac <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 800dee6:	b580      	push	{r7, lr}
 800dee8:	ed2d 8b02 	vpush	{d8}
 800deec:	b092      	sub	sp, #72	; 0x48
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
 800def2:	6039      	str	r1, [r7, #0]
    {
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4618      	mov	r0, r3
 800def8:	f7ff ffe8 	bl	800decc <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	2100      	movs	r1, #0
 800df04:	4618      	mov	r0, r3
 800df06:	f000 fa1b 	bl	800e340 <_ZNK6matrix6VectorIfLj4EEclEj>
 800df0a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	2101      	movs	r1, #1
 800df12:	4618      	mov	r0, r3
 800df14:	f000 fa14 	bl	800e340 <_ZNK6matrix6VectorIfLj4EEclEj>
 800df18:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	2102      	movs	r1, #2
 800df20:	4618      	mov	r0, r3
 800df22:	f000 fa0d 	bl	800e340 <_ZNK6matrix6VectorIfLj4EEclEj>
 800df26:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	2103      	movs	r1, #3
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 fa06 	bl	800e340 <_ZNK6matrix6VectorIfLj4EEclEj>
 800df34:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 800df38:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800df3c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800df40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df44:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 800df48:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800df4c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800df50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df54:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 800df58:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800df5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800df60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df64:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 800df68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800df6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800df70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 800df78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800df7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800df80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df84:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 800df88:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800df8c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800df90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df94:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 800df98:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800df9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dfa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa4:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 800dfa8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800dfac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800dfb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb4:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 800dfb8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800dfbc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dfc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfc4:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 800dfc8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dfcc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800dfd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfd4:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 800dfd8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800dfdc:	edd7 7a08 	vldr	s15, [r7, #32]
 800dfe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dfe4:	edd7 7a05 	vldr	s15, [r7, #20]
 800dfe8:	ee37 8a67 	vsub.f32	s16, s14, s15
 800dfec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfee:	2200      	movs	r2, #0
 800dff0:	2100      	movs	r1, #0
 800dff2:	4618      	mov	r0, r3
 800dff4:	f000 f9c6 	bl	800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800dff8:	4603      	mov	r3, r0
 800dffa:	edd7 7a03 	vldr	s15, [r7, #12]
 800dffe:	ee78 7a67 	vsub.f32	s15, s16, s15
 800e002:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 800e006:	ed97 7a07 	vldr	s14, [r7, #28]
 800e00a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e00e:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e014:	2201      	movs	r2, #1
 800e016:	2100      	movs	r1, #0
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 f9b3 	bl	800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e01e:	4603      	mov	r3, r0
 800e020:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e024:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 800e028:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e02c:	edd7 7a06 	vldr	s15, [r7, #24]
 800e030:	ee37 8a27 	vadd.f32	s16, s14, s15
 800e034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e036:	2202      	movs	r2, #2
 800e038:	2100      	movs	r1, #0
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 f9a2 	bl	800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e040:	4603      	mov	r3, r0
 800e042:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e046:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 800e04a:	ed97 7a07 	vldr	s14, [r7, #28]
 800e04e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e052:	ee37 8a27 	vadd.f32	s16, s14, s15
 800e056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e058:	2200      	movs	r2, #0
 800e05a:	2101      	movs	r1, #1
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 f991 	bl	800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e062:	4603      	mov	r3, r0
 800e064:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e068:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 800e06c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e070:	edd7 7a08 	vldr	s15, [r7, #32]
 800e074:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e078:	edd7 7a05 	vldr	s15, [r7, #20]
 800e07c:	ee37 8a27 	vadd.f32	s16, s14, s15
 800e080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e082:	2201      	movs	r2, #1
 800e084:	2101      	movs	r1, #1
 800e086:	4618      	mov	r0, r3
 800e088:	f000 f97c 	bl	800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e08c:	4603      	mov	r3, r0
 800e08e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e092:	ee78 7a67 	vsub.f32	s15, s16, s15
 800e096:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 800e09a:	ed97 7a04 	vldr	s14, [r7, #16]
 800e09e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e0a2:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e0a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0a8:	2202      	movs	r2, #2
 800e0aa:	2101      	movs	r1, #1
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f000 f969 	bl	800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e0b8:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 800e0bc:	ed97 7a06 	vldr	s14, [r7, #24]
 800e0c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e0c4:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	2102      	movs	r1, #2
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f000 f958 	bl	800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e0da:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 800e0de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e0e2:	edd7 7a04 	vldr	s15, [r7, #16]
 800e0e6:	ee37 8a27 	vadd.f32	s16, s14, s15
 800e0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	2102      	movs	r1, #2
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f000 f947 	bl	800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	ee78 7a08 	vadd.f32	s15, s16, s16
 800e0fc:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 800e100:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e104:	edd7 7a08 	vldr	s15, [r7, #32]
 800e108:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e10c:	edd7 7a05 	vldr	s15, [r7, #20]
 800e110:	ee37 8a67 	vsub.f32	s16, s14, s15
 800e114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e116:	2202      	movs	r2, #2
 800e118:	2102      	movs	r1, #2
 800e11a:	4618      	mov	r0, r3
 800e11c:	f000 f932 	bl	800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800e120:	4603      	mov	r3, r0
 800e122:	edd7 7a03 	vldr	s15, [r7, #12]
 800e126:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e12a:	edc3 7a00 	vstr	s15, [r3]
    }
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4618      	mov	r0, r3
 800e132:	3748      	adds	r7, #72	; 0x48
 800e134:	46bd      	mov	sp, r7
 800e136:	ecbd 8b02 	vpop	{d8}
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	461a      	mov	r2, r3
 800e148:	2300      	movs	r3, #0
 800e14a:	6013      	str	r3, [r2, #0]
 800e14c:	6053      	str	r3, [r2, #4]
 800e14e:	6093      	str	r3, [r2, #8]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4618      	mov	r0, r3
 800e154:	370c      	adds	r7, #12
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr

0800e15e <_ZN6matrix6VectorIfLj3EEC1Ev>:
 800e15e:	b580      	push	{r7, lr}
 800e160:	b082      	sub	sp, #8
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff ffe7 	bl	800e13c <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	ed87 0a02 	vstr	s0, [r7, #8]
 800e184:	edc7 0a01 	vstr	s1, [r7, #4]
 800e188:	ed87 1a00 	vstr	s2, [r7]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	4618      	mov	r0, r3
 800e190:	f7ff ffe5 	bl	800e15e <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	617b      	str	r3, [r7, #20]
        v(0) = x;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2100      	movs	r1, #0
 800e19c:	4618      	mov	r0, r3
 800e19e:	f000 f88f 	bl	800e2c0 <_ZN6matrix6VectorIfLj3EEclEj>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	6013      	str	r3, [r2, #0]
        v(1) = y;
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	2101      	movs	r1, #1
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f000 f887 	bl	800e2c0 <_ZN6matrix6VectorIfLj3EEclEj>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6013      	str	r3, [r2, #0]
        v(2) = z;
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	2102      	movs	r1, #2
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f000 f87f 	bl	800e2c0 <_ZN6matrix6VectorIfLj3EEclEj>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	6013      	str	r3, [r2, #0]
    }
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3718      	adds	r7, #24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	ed2d 8b02 	vpush	{d8}
 800e1d8:	b088      	sub	sp, #32
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	60f8      	str	r0, [r7, #12]
 800e1de:	60b9      	str	r1, [r7, #8]
 800e1e0:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	6013      	str	r3, [r2, #0]
 800e1ee:	6053      	str	r3, [r2, #4]
 800e1f0:	6093      	str	r3, [r2, #8]
        res.setZero();
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f000 f8f4 	bl	800e3e0 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	61fb      	str	r3, [r7, #28]
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	2b02      	cmp	r3, #2
 800e200:	d831      	bhi.n	800e266 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 800e202:	2300      	movs	r3, #0
 800e204:	61bb      	str	r3, [r7, #24]
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d128      	bne.n	800e25e <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 800e20c:	2300      	movs	r3, #0
 800e20e:	617b      	str	r3, [r7, #20]
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	2b02      	cmp	r3, #2
 800e214:	d81f      	bhi.n	800e256 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 800e216:	697a      	ldr	r2, [r7, #20]
 800e218:	69f9      	ldr	r1, [r7, #28]
 800e21a:	6938      	ldr	r0, [r7, #16]
 800e21c:	f000 f918 	bl	800e450 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 800e220:	eeb0 8a40 	vmov.f32	s16, s0
 800e224:	69ba      	ldr	r2, [r7, #24]
 800e226:	6979      	ldr	r1, [r7, #20]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 f943 	bl	800e4b4 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 800e22e:	eef0 7a40 	vmov.f32	s15, s0
 800e232:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e236:	69ba      	ldr	r2, [r7, #24]
 800e238:	69f9      	ldr	r1, [r7, #28]
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f000 f8de 	bl	800e3fc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800e240:	4603      	mov	r3, r0
 800e242:	edd3 7a00 	vldr	s15, [r3]
 800e246:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e24a:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	3301      	adds	r3, #1
 800e252:	617b      	str	r3, [r7, #20]
 800e254:	e7dc      	b.n	800e210 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	3301      	adds	r3, #1
 800e25a:	61bb      	str	r3, [r7, #24]
 800e25c:	e7d3      	b.n	800e206 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	3301      	adds	r3, #1
 800e262:	61fb      	str	r3, [r7, #28]
 800e264:	e7ca      	b.n	800e1fc <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 800e266:	bf00      	nop
    }
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	3720      	adds	r7, #32
 800e26c:	46bd      	mov	sp, r7
 800e26e:	ecbd 8b02 	vpop	{d8}
 800e272:	bd80      	pop	{r7, pc}

0800e274 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6839      	ldr	r1, [r7, #0]
 800e282:	4618      	mov	r0, r3
 800e284:	f000 f944 	bl	800e510 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4618      	mov	r0, r3
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 800e292:	b580      	push	{r7, lr}
 800e294:	b082      	sub	sp, #8
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	6039      	str	r1, [r7, #0]
    {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	6013      	str	r3, [r2, #0]
 800e2a4:	6053      	str	r3, [r2, #4]
 800e2a6:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6839      	ldr	r1, [r7, #0]
 800e2ac:	220c      	movs	r2, #12
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f01f fcbe 	bl	802dc30 <memcpy>
    }
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
	...

0800e2c0 <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d905      	bls.n	800e2dc <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 800e2d0:	4b08      	ldr	r3, [pc, #32]	; (800e2f4 <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 800e2d2:	4a09      	ldr	r2, [pc, #36]	; (800e2f8 <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 800e2d4:	2137      	movs	r1, #55	; 0x37
 800e2d6:	4809      	ldr	r0, [pc, #36]	; (800e2fc <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 800e2d8:	f01f fc50 	bl	802db7c <__assert_func>

        MatrixM1 &v = *this;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	6839      	ldr	r1, [r7, #0]
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f000 f889 	bl	800e3fc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 800e2ea:	4603      	mov	r3, r0
    }
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	0802efc8 	.word	0x0802efc8
 800e2f8:	0802f9bc 	.word	0x0802f9bc
 800e2fc:	0802efd0 	.word	0x0802efd0

0800e300 <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	2b03      	cmp	r3, #3
 800e30e:	d905      	bls.n	800e31c <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 800e310:	4b08      	ldr	r3, [pc, #32]	; (800e334 <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 800e312:	4a09      	ldr	r2, [pc, #36]	; (800e338 <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 800e314:	2137      	movs	r1, #55	; 0x37
 800e316:	4809      	ldr	r0, [pc, #36]	; (800e33c <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 800e318:	f01f fc30 	bl	802db7c <__assert_func>
        MatrixM1 &v = *this;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800e320:	2200      	movs	r2, #0
 800e322:	6839      	ldr	r1, [r7, #0]
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f000 f903 	bl	800e530 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 800e32a:	4603      	mov	r3, r0
    }
 800e32c:	4618      	mov	r0, r3
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	0802efc8 	.word	0x0802efc8
 800e338:	0802f558 	.word	0x0802f558
 800e33c:	0802efd0 	.word	0x0802efd0

0800e340 <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
        assert(i < M);
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	2b03      	cmp	r3, #3
 800e34e:	d905      	bls.n	800e35c <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 800e350:	4b09      	ldr	r3, [pc, #36]	; (800e378 <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 800e352:	4a0a      	ldr	r2, [pc, #40]	; (800e37c <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 800e354:	212e      	movs	r1, #46	; 0x2e
 800e356:	480a      	ldr	r0, [pc, #40]	; (800e380 <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 800e358:	f01f fc10 	bl	802db7c <__assert_func>
        const MatrixM1 &v = *this;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 800e360:	2200      	movs	r2, #0
 800e362:	6839      	ldr	r1, [r7, #0]
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f000 f90d 	bl	800e584 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 800e36a:	eef0 7a40 	vmov.f32	s15, s0
    }
 800e36e:	eeb0 0a67 	vmov.f32	s0, s15
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	0802efc8 	.word	0x0802efc8
 800e37c:	0802f65c 	.word	0x0802f65c
 800e380:	0802efd0 	.word	0x0802efd0

0800e384 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	2b02      	cmp	r3, #2
 800e394:	d905      	bls.n	800e3a2 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800e396:	4b0e      	ldr	r3, [pc, #56]	; (800e3d0 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 800e398:	4a0e      	ldr	r2, [pc, #56]	; (800e3d4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800e39a:	216e      	movs	r1, #110	; 0x6e
 800e39c:	480e      	ldr	r0, [pc, #56]	; (800e3d8 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800e39e:	f01f fbed 	bl	802db7c <__assert_func>
        assert(j < N);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2b02      	cmp	r3, #2
 800e3a6:	d905      	bls.n	800e3b4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800e3a8:	4b0c      	ldr	r3, [pc, #48]	; (800e3dc <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800e3aa:	4a0a      	ldr	r2, [pc, #40]	; (800e3d4 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 800e3ac:	2170      	movs	r1, #112	; 0x70
 800e3ae:	480a      	ldr	r0, [pc, #40]	; (800e3d8 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800e3b0:	f01f fbe4 	bl	802db7c <__assert_func>
        return _data[i][j];
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	4413      	add	r3, r2
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	4413      	add	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	4413      	add	r3, r2
    }
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	0802efc8 	.word	0x0802efc8
 800e3d4:	0802f76c 	.word	0x0802f76c
 800e3d8:	0802f000 	.word	0x0802f000
 800e3dc:	0802f030 	.word	0x0802f030

0800e3e0 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	220c      	movs	r2, #12
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f01f fc29 	bl	802dc46 <memset>
    }
 800e3f4:	bf00      	nop
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d905      	bls.n	800e41a <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800e40e:	4b0c      	ldr	r3, [pc, #48]	; (800e440 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 800e410:	4a0c      	ldr	r2, [pc, #48]	; (800e444 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800e412:	216e      	movs	r1, #110	; 0x6e
 800e414:	480c      	ldr	r0, [pc, #48]	; (800e448 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800e416:	f01f fbb1 	bl	802db7c <__assert_func>
        assert(j < N);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d005      	beq.n	800e42c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800e420:	4b0a      	ldr	r3, [pc, #40]	; (800e44c <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800e422:	4a08      	ldr	r2, [pc, #32]	; (800e444 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 800e424:	2170      	movs	r1, #112	; 0x70
 800e426:	4808      	ldr	r0, [pc, #32]	; (800e448 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800e428:	f01f fba8 	bl	802db7c <__assert_func>
        return _data[i][j];
 800e42c:	68ba      	ldr	r2, [r7, #8]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	4413      	add	r3, r2
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	4413      	add	r3, r2
    }
 800e438:	4618      	mov	r0, r3
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	0802efc8 	.word	0x0802efc8
 800e444:	0802f92c 	.word	0x0802f92c
 800e448:	0802f000 	.word	0x0802f000
 800e44c:	0802f030 	.word	0x0802f030

0800e450 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d905      	bls.n	800e46e <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 800e462:	4b10      	ldr	r3, [pc, #64]	; (800e4a4 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 800e464:	4a10      	ldr	r2, [pc, #64]	; (800e4a8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800e466:	2164      	movs	r1, #100	; 0x64
 800e468:	4810      	ldr	r0, [pc, #64]	; (800e4ac <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800e46a:	f01f fb87 	bl	802db7c <__assert_func>
        assert(j < N);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2b02      	cmp	r3, #2
 800e472:	d905      	bls.n	800e480 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 800e474:	4b0e      	ldr	r3, [pc, #56]	; (800e4b0 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 800e476:	4a0c      	ldr	r2, [pc, #48]	; (800e4a8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 800e478:	2166      	movs	r1, #102	; 0x66
 800e47a:	480c      	ldr	r0, [pc, #48]	; (800e4ac <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 800e47c:	f01f fb7e 	bl	802db7c <__assert_func>
        return _data[i][j];
 800e480:	68f9      	ldr	r1, [r7, #12]
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	4613      	mov	r3, r2
 800e486:	005b      	lsls	r3, r3, #1
 800e488:	4413      	add	r3, r2
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	4413      	add	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	440b      	add	r3, r1
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	ee07 3a90 	vmov	s15, r3
    }
 800e498:	eeb0 0a67 	vmov.f32	s0, s15
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	0802efc8 	.word	0x0802efc8
 800e4a8:	0802f7fc 	.word	0x0802f7fc
 800e4ac:	0802f000 	.word	0x0802f000
 800e4b0:	0802f030 	.word	0x0802f030

0800e4b4 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b02      	cmp	r3, #2
 800e4c4:	d905      	bls.n	800e4d2 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 800e4c6:	4b0e      	ldr	r3, [pc, #56]	; (800e500 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 800e4c8:	4a0e      	ldr	r2, [pc, #56]	; (800e504 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800e4ca:	2164      	movs	r1, #100	; 0x64
 800e4cc:	480e      	ldr	r0, [pc, #56]	; (800e508 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800e4ce:	f01f fb55 	bl	802db7c <__assert_func>
        assert(j < N);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d005      	beq.n	800e4e4 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 800e4d8:	4b0c      	ldr	r3, [pc, #48]	; (800e50c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 800e4da:	4a0a      	ldr	r2, [pc, #40]	; (800e504 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 800e4dc:	2166      	movs	r1, #102	; 0x66
 800e4de:	480a      	ldr	r0, [pc, #40]	; (800e508 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 800e4e0:	f01f fb4c 	bl	802db7c <__assert_func>
        return _data[i][j];
 800e4e4:	68fa      	ldr	r2, [r7, #12]
 800e4e6:	68b9      	ldr	r1, [r7, #8]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	440b      	add	r3, r1
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	ee07 3a90 	vmov	s15, r3
    }
 800e4f6:	eeb0 0a67 	vmov.f32	s0, s15
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	0802efc8 	.word	0x0802efc8
 800e504:	0802f894 	.word	0x0802f894
 800e508:	0802f000 	.word	0x0802f000
 800e50c:	0802f030 	.word	0x0802f030

0800e510 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6839      	ldr	r1, [r7, #0]
 800e51e:	4618      	mov	r0, r3
 800e520:	f7ff feb7 	bl	800e292 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4618      	mov	r0, r3
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
	...

0800e530 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	2b03      	cmp	r3, #3
 800e540:	d905      	bls.n	800e54e <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800e542:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 800e544:	4a0c      	ldr	r2, [pc, #48]	; (800e578 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800e546:	216e      	movs	r1, #110	; 0x6e
 800e548:	480c      	ldr	r0, [pc, #48]	; (800e57c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800e54a:	f01f fb17 	bl	802db7c <__assert_func>
        assert(j < N);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d005      	beq.n	800e560 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800e554:	4b0a      	ldr	r3, [pc, #40]	; (800e580 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800e556:	4a08      	ldr	r2, [pc, #32]	; (800e578 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 800e558:	2170      	movs	r1, #112	; 0x70
 800e55a:	4808      	ldr	r0, [pc, #32]	; (800e57c <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800e55c:	f01f fb0e 	bl	802db7c <__assert_func>
        return _data[i][j];
 800e560:	68ba      	ldr	r2, [r7, #8]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4413      	add	r3, r2
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	68fa      	ldr	r2, [r7, #12]
 800e56a:	4413      	add	r3, r2
    }
 800e56c:	4618      	mov	r0, r3
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	0802efc8 	.word	0x0802efc8
 800e578:	0802f5cc 	.word	0x0802f5cc
 800e57c:	0802f000 	.word	0x0802f000
 800e580:	0802f030 	.word	0x0802f030

0800e584 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	2b03      	cmp	r3, #3
 800e594:	d905      	bls.n	800e5a2 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 800e596:	4b0e      	ldr	r3, [pc, #56]	; (800e5d0 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 800e598:	4a0e      	ldr	r2, [pc, #56]	; (800e5d4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800e59a:	2164      	movs	r1, #100	; 0x64
 800e59c:	480e      	ldr	r0, [pc, #56]	; (800e5d8 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800e59e:	f01f faed 	bl	802db7c <__assert_func>
        assert(j < N);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d005      	beq.n	800e5b4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 800e5a8:	4b0c      	ldr	r3, [pc, #48]	; (800e5dc <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 800e5aa:	4a0a      	ldr	r2, [pc, #40]	; (800e5d4 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 800e5ac:	2166      	movs	r1, #102	; 0x66
 800e5ae:	480a      	ldr	r0, [pc, #40]	; (800e5d8 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 800e5b0:	f01f fae4 	bl	802db7c <__assert_func>
        return _data[i][j];
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	68b9      	ldr	r1, [r7, #8]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	440b      	add	r3, r1
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	ee07 3a90 	vmov	s15, r3
    }
 800e5c6:	eeb0 0a67 	vmov.f32	s0, s15
 800e5ca:	3710      	adds	r7, #16
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	0802efc8 	.word	0x0802efc8
 800e5d4:	0802f6d4 	.word	0x0802f6d4
 800e5d8:	0802f000 	.word	0x0802f000
 800e5dc:	0802f030 	.word	0x0802f030

0800e5e0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 800e5e0:	b490      	push	{r4, r7}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	73fb      	strb	r3, [r7, #15]
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	e9d3 342e 	ldrd	r3, r4, [r3, #184]	; 0xb8
 800e5fa:	42a2      	cmp	r2, r4
 800e5fc:	bf08      	it	eq
 800e5fe:	4299      	cmpeq	r1, r3
 800e600:	d001      	beq.n	800e606 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE+0x26>
 800e602:	2301      	movs	r3, #1
 800e604:	73fb      	strb	r3, [r7, #15]
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4614      	mov	r4, r2
 800e60c:	33b8      	adds	r3, #184	; 0xb8
 800e60e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e614:	7bfb      	ldrb	r3, [r7, #15]
 800e616:	4618      	mov	r0, r3
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bc90      	pop	{r4, r7}
 800e61e:	4770      	bx	lr

0800e620 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 800e620:	b4b0      	push	{r4, r5, r7}
 800e622:	b085      	sub	sp, #20
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
 800e62a:	2300      	movs	r3, #0
 800e62c:	73fb      	strb	r3, [r7, #15]
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	e9d3 1200 	ldrd	r1, r2, [r3]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	e9d3 3432 	ldrd	r3, r4, [r3, #200]	; 0xc8
 800e63a:	42a2      	cmp	r2, r4
 800e63c:	bf08      	it	eq
 800e63e:	4299      	cmpeq	r1, r3
 800e640:	d001      	beq.n	800e646 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE+0x26>
 800e642:	2301      	movs	r3, #1
 800e644:	73fb      	strb	r3, [r7, #15]
 800e646:	683a      	ldr	r2, [r7, #0]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4615      	mov	r5, r2
 800e64c:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800e650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e652:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e654:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e658:	e885 0003 	stmia.w	r5, {r0, r1}
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
 800e65e:	4618      	mov	r0, r3
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	bcb0      	pop	{r4, r5, r7}
 800e666:	4770      	bx	lr

0800e668 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>:
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 800e668:	b4b0      	push	{r4, r5, r7}
 800e66a:	b085      	sub	sp, #20
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
 800e672:	2300      	movs	r3, #0
 800e674:	73fb      	strb	r3, [r7, #15]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	e9d3 1200 	ldrd	r1, r2, [r3]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e682:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e686:	42a2      	cmp	r2, r4
 800e688:	bf08      	it	eq
 800e68a:	4299      	cmpeq	r1, r3
 800e68c:	d001      	beq.n	800e692 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x2a>
 800e68e:	2301      	movs	r3, #1
 800e690:	73fb      	strb	r3, [r7, #15]
 800e692:	683a      	ldr	r2, [r7, #0]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4615      	mov	r5, r2
 800e698:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800e69c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e69e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e6a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e6a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e6a8:	e885 0003 	stmia.w	r5, {r0, r1}
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bcb0      	pop	{r4, r5, r7}
 800e6b6:	4770      	bx	lr

0800e6b8 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>:

    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)

    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 800e6b8:	b490      	push	{r4, r7}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	73fb      	strb	r3, [r7, #15]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800e6d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e6d6:	42a2      	cmp	r2, r4
 800e6d8:	bf08      	it	eq
 800e6da:	4299      	cmpeq	r1, r3
 800e6dc:	d001      	beq.n	800e6e2 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x2a>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	73fb      	strb	r3, [r7, #15]
 800e6e2:	683a      	ldr	r2, [r7, #0]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	4614      	mov	r4, r2
 800e6e8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800e6ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e6f2:	7bfb      	ldrb	r3, [r7, #15]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bc90      	pop	{r4, r7}
 800e6fc:	4770      	bx	lr

0800e6fe <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>:

    SIMPLE_FUNC_IMPL(Health, Health, health)

    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 800e6fe:	b4b0      	push	{r4, r5, r7}
 800e700:	b083      	sub	sp, #12
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	6039      	str	r1, [r7, #0]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 800e710:	4615      	mov	r5, r2
 800e712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e716:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e71a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e71e:	bf00      	nop
 800e720:	370c      	adds	r7, #12
 800e722:	46bd      	mov	sp, r7
 800e724:	bcb0      	pop	{r4, r5, r7}
 800e726:	4770      	bx	lr

0800e728 <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>:
  ~px4_AlgorithmModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_Second_att_control_codeb_T
 800e728:	b4b0      	push	{r4, r5, r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
    * pExtU_Second_att_control_codeb_T)
  {
    Second_att_control_codeblock__U = *pExtU_Second_att_control_codeb_T;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 800e73a:	4615      	mov	r5, r2
 800e73c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e73e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	6023      	str	r3, [r4, #0]
  }
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bcb0      	pop	{r4, r5, r7}
 800e750:	4770      	bx	lr

0800e752 <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const px4_AlgorithmModelClass::ExtY_Second_att_control_codeb_T
    & getExternalOutputs() const
 800e752:	b480      	push	{r7}
 800e754:	b083      	sub	sp, #12
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  {
    return Second_att_control_codeblock__Y;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f503 7388 	add.w	r3, r3, #272	; 0x110
  }
 800e760:	4618      	mov	r0, r3
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800e76c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800e770:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800e772:	4b0e      	ldr	r3, [pc, #56]	; (800e7ac <_ZL11microsecondv+0x40>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4619      	mov	r1, r3
 800e778:	f04f 0200 	mov.w	r2, #0
 800e77c:	f04f 0b00 	mov.w	fp, #0
 800e780:	f04f 0c00 	mov.w	ip, #0
 800e784:	468c      	mov	ip, r1
 800e786:	f04f 0b00 	mov.w	fp, #0
 800e78a:	4a09      	ldr	r2, [pc, #36]	; (800e7b0 <_ZL11microsecondv+0x44>)
 800e78c:	6812      	ldr	r2, [r2, #0]
 800e78e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e790:	4611      	mov	r1, r2
 800e792:	f04f 0200 	mov.w	r2, #0
 800e796:	ea4b 0301 	orr.w	r3, fp, r1
 800e79a:	ea4c 0402 	orr.w	r4, ip, r2
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	2400093c 	.word	0x2400093c
 800e7b0:	2400c780 	.word	0x2400c780

0800e7b4 <_ZN2FC24ModuleAttitudeControllerC1Ev>:
#include "Usec.h"
#include "printf.h"

namespace FC {

ModuleAttitudeController::ModuleAttitudeController(){}
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7f5 ffbe 	bl	8004740 <_ZN23px4_AlgorithmModelClassC1Ev>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3708      	adds	r7, #8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <_ZN2FC24ModuleAttitudeController7oneStepEv>:

void ModuleAttitudeController::oneStep(){
 800e7d0:	b5b0      	push	{r4, r5, r7, lr}
 800e7d2:	b092      	sub	sp, #72	; 0x48
 800e7d4:	af04      	add	r7, sp, #16
 800e7d6:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e7de:	4619      	mov	r1, r3
 800e7e0:	4840      	ldr	r0, [pc, #256]	; (800e8e4 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800e7e2:	f7ff ff69 	bl	800e6b8 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>

	/* not armed */
	if(modeFlagSub.armMode != Command::Arm){
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800e7ec:	2b08      	cmp	r3, #8
 800e7ee:	d012      	beq.n	800e816 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x46>
		setMotor(1000, 1000, 1000, 1000, 1000, 1000);
 800e7f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e7f4:	9302      	str	r3, [sp, #8]
 800e7f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e7fa:	9301      	str	r3, [sp, #4]
 800e7fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e80a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f8f4 	bl	800e9fc <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
 800e814:	e062      	b.n	800e8dc <_ZN2FC24ModuleAttitudeController7oneStepEv+0x10c>
//		armFlag = true;
//		initialize();
//	}

	/* manual control */
	if(modeFlagSub.flightMode == Command::ControlAttitude){
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d103      	bne.n	800e828 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x58>
		setFromRC();
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f000 f88b 	bl	800e93c <_ZN2FC24ModuleAttitudeController9setFromRCEv>
 800e826:	e002      	b.n	800e82e <_ZN2FC24ModuleAttitudeController7oneStepEv+0x5e>
	}
	/* position control */
	else{
		setFromPositionController();
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 f85d 	bl	800e8e8 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>
	}

	ExtU_Second_att_control_codeb_T input;
	input.set_pitch = targetPitch;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800e834:	633b      	str	r3, [r7, #48]	; 0x30
	input.set_roll = targetRoll;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e83c:	62fb      	str	r3, [r7, #44]	; 0x2c
	input.set_yaw = targetYawRate;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800e844:	637b      	str	r3, [r7, #52]	; 0x34
	input.set_thrust = targetThrottle;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800e84c:	62bb      	str	r3, [r7, #40]	; 0x28

	msgBus.getAttitude(&attitudeSub);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800e854:	4619      	mov	r1, r3
 800e856:	4823      	ldr	r0, [pc, #140]	; (800e8e4 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800e858:	f7ff ff06 	bl	800e668 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	msgBus.getBodyAngularVelocity(&bodyAngularVelocitySub);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800e862:	4619      	mov	r1, r3
 800e864:	481f      	ldr	r0, [pc, #124]	; (800e8e4 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x114>)
 800e866:	f7fd fda0 	bl	800c3aa <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	input.Roll = attitudeSub.roll;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800e870:	617b      	str	r3, [r7, #20]
	input.Pitch = attitudeSub.pitch;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e878:	61bb      	str	r3, [r7, #24]
	input.p = bodyAngularVelocitySub.xyz[0];
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e880:	61fb      	str	r3, [r7, #28]
	input.q = bodyAngularVelocitySub.xyz[1];
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e888:	623b      	str	r3, [r7, #32]
	input.r = bodyAngularVelocitySub.xyz[2];
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e890:	627b      	str	r3, [r7, #36]	; 0x24

	/* matlab codegen function */
	setExternalInputs(&input);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f107 0214 	add.w	r2, r7, #20
 800e898:	4611      	mov	r1, r2
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7ff ff44 	bl	800e728 <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>
	step();
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7f5 f9a0 	bl	8003be8 <_ZN23px4_AlgorithmModelClass4stepEv>
	ExtY_Second_att_control_codeb_T output = getExternalOutputs();
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7ff ff51 	bl	800e752 <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	f107 0308 	add.w	r3, r7, #8
 800e8b6:	6810      	ldr	r0, [r2, #0]
 800e8b8:	6851      	ldr	r1, [r2, #4]
 800e8ba:	6892      	ldr	r2, [r2, #8]
 800e8bc:	c307      	stmia	r3!, {r0, r1, r2}

	/* set motor pwm */
	setMotor((uint16_t)output.PWM_OUT[0],
 800e8be:	8938      	ldrh	r0, [r7, #8]
			 (uint16_t)output.PWM_OUT[1],
 800e8c0:	897c      	ldrh	r4, [r7, #10]
			 (uint16_t)output.PWM_OUT[2],
 800e8c2:	89bd      	ldrh	r5, [r7, #12]
			 (uint16_t)output.PWM_OUT[3],
 800e8c4:	89fb      	ldrh	r3, [r7, #14]
			 (uint16_t)output.PWM_OUT[4],
 800e8c6:	8a3a      	ldrh	r2, [r7, #16]
			 (uint16_t)output.PWM_OUT[5]);
 800e8c8:	8a79      	ldrh	r1, [r7, #18]
	setMotor((uint16_t)output.PWM_OUT[0],
 800e8ca:	9102      	str	r1, [sp, #8]
 800e8cc:	9201      	str	r2, [sp, #4]
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	462b      	mov	r3, r5
 800e8d2:	4622      	mov	r2, r4
 800e8d4:	4601      	mov	r1, r0
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f890 	bl	800e9fc <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
}
 800e8dc:	3738      	adds	r7, #56	; 0x38
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	240009b8 	.word	0x240009b8

0800e8e8 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>:

void ModuleAttitudeController::setFromPositionController(){
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
	msgBus.getVehicleAttitueSP(&vehicleAttitudeSpSub);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	480f      	ldr	r0, [pc, #60]	; (800e938 <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv+0x50>)
 800e8fa:	f7ff fe91 	bl	800e620 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
	targetRoll = vehicleAttitudeSpSub.roll;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	targetPitch = vehicleAttitudeSpSub.pitch;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	targetYawRate = vehicleAttitudeSpSub.yawRate;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	targetThrottle = vehicleAttitudeSpSub.throttle;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
}
 800e92e:	bf00      	nop
 800e930:	3708      	adds	r7, #8
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	240009b8 	.word	0x240009b8

0800e93c <_ZN2FC24ModuleAttitudeController9setFromRCEv>:

void ModuleAttitudeController::setFromRC(){
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
	msgBus.getController(&controllerSub);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e94a:	4619      	mov	r1, r3
 800e94c:	4829      	ldr	r0, [pc, #164]	; (800e9f4 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xb8>)
 800e94e:	f7ff fe47 	bl	800e5e0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
//	targetRoll = (float)(controllerSub.roll - 1500)/500.0;				/* map 1000~2000 to -1 ~ 1 */
//	targetPitch = -(float)(controllerSub.pitch - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
//	targetYawRate = (float)(controllerSub.yaw - 1500)/500.0;			/* map 1000~2000 to -1 ~ 1 */
//	targetThrottle = (float)(controllerSub.throttle - 1000)/1000.0;		/* map 1000~2000 to 0 ~ 1 */
	targetRoll = map(controllerSub.roll, 1000, 2000, -1.0, 1.0);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 800e958:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e95c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e960:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e964:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e968:	4618      	mov	r0, r3
 800e96a:	f002 fb73 	bl	8011054 <_ZN2FC3mapEtttff>
 800e96e:	eef0 7a40 	vmov.f32	s15, s0
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	edc3 7a6c 	vstr	s15, [r3, #432]	; 0x1b0
	targetPitch = map(controllerSub.pitch, 1000, 2000, -1.0, 1.0);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 800e97e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e982:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e986:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e98a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e98e:	4618      	mov	r0, r3
 800e990:	f002 fb60 	bl	8011054 <_ZN2FC3mapEtttff>
 800e994:	eef0 7a40 	vmov.f32	s15, s0
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
	targetYawRate = map(controllerSub.yaw, 1000, 2000, -1.0, 1.0);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8b3 317c 	ldrh.w	r3, [r3, #380]	; 0x17c
 800e9a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e9a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e9ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e9b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f002 fb4d 	bl	8011054 <_ZN2FC3mapEtttff>
 800e9ba:	eef0 7a40 	vmov.f32	s15, s0
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
	targetThrottle = map(controllerSub.throttle, 1000, 2000, 0.0, 1.0);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 800e9ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800e9ce:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800e9f8 <_ZN2FC24ModuleAttitudeController9setFromRCEv+0xbc>
 800e9d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e9d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f002 fb3a 	bl	8011054 <_ZN2FC3mapEtttff>
 800e9e0:	eef0 7a40 	vmov.f32	s15, s0
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	edc3 7a6f 	vstr	s15, [r3, #444]	; 0x1bc
}
 800e9ea:	bf00      	nop
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	240009b8 	.word	0x240009b8
 800e9f8:	00000000 	.word	0x00000000

0800e9fc <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>:

void ModuleAttitudeController::setMotor(uint16_t pwm1, uint16_t pwm2, uint16_t pwm3, uint16_t pwm4, uint16_t pwm5, uint16_t pwm6){
 800e9fc:	b590      	push	{r4, r7, lr}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	4608      	mov	r0, r1
 800ea06:	4611      	mov	r1, r2
 800ea08:	461a      	mov	r2, r3
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	817b      	strh	r3, [r7, #10]
 800ea0e:	460b      	mov	r3, r1
 800ea10:	813b      	strh	r3, [r7, #8]
 800ea12:	4613      	mov	r3, r2
 800ea14:	80fb      	strh	r3, [r7, #6]
	m1.setPWM(pwm1);
 800ea16:	897b      	ldrh	r3, [r7, #10]
 800ea18:	4619      	mov	r1, r3
 800ea1a:	4824      	ldr	r0, [pc, #144]	; (800eaac <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb0>)
 800ea1c:	f7f2 f86a 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
	m2.setPWM(pwm2);
 800ea20:	893b      	ldrh	r3, [r7, #8]
 800ea22:	4619      	mov	r1, r3
 800ea24:	4822      	ldr	r0, [pc, #136]	; (800eab0 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb4>)
 800ea26:	f7f2 f865 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
	m3.setPWM(pwm3);
 800ea2a:	88fb      	ldrh	r3, [r7, #6]
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	4821      	ldr	r0, [pc, #132]	; (800eab4 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb8>)
 800ea30:	f7f2 f860 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
	m4.setPWM(pwm4);
 800ea34:	8c3b      	ldrh	r3, [r7, #32]
 800ea36:	4619      	mov	r1, r3
 800ea38:	481f      	ldr	r0, [pc, #124]	; (800eab8 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xbc>)
 800ea3a:	f7f2 f85b 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
	m5.setPWM(pwm5);
 800ea3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea40:	4619      	mov	r1, r3
 800ea42:	481e      	ldr	r0, [pc, #120]	; (800eabc <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc0>)
 800ea44:	f7f2 f856 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
	m6.setPWM(pwm6);
 800ea48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	481c      	ldr	r0, [pc, #112]	; (800eac0 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc4>)
 800ea4e:	f7f2 f851 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
//	m23.setPWM(pwm6);
//	m24.setPWM(pwm6);
//	m25.setPWM(pwm6);


	motorPwmSub.timestamp = microsecond();
 800ea52:	f7ff fe8b 	bl	800e76c <_ZL11microsecondv>
 800ea56:	4603      	mov	r3, r0
 800ea58:	460c      	mov	r4, r1
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 800ea60:	e9c2 3400 	strd	r3, r4, [r2]
	motorPwmSub.m1 = pwm1;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	897a      	ldrh	r2, [r7, #10]
 800ea68:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
	motorPwmSub.m2 = pwm2;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	893a      	ldrh	r2, [r7, #8]
 800ea70:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
	motorPwmSub.m3 = pwm3;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	88fa      	ldrh	r2, [r7, #6]
 800ea78:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
	motorPwmSub.m4 = pwm4;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	8c3a      	ldrh	r2, [r7, #32]
 800ea80:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
	motorPwmSub.m5 = pwm5;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea88:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
	motorPwmSub.m6 = pwm6;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ea90:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa

	msgBus.setMotorPWM(motorPwmSub);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	4809      	ldr	r0, [pc, #36]	; (800eac4 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc8>)
 800ea9e:	f7ff fe2e 	bl	800e6fe <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>
}
 800eaa2:	bf00      	nop
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd90      	pop	{r4, r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	240006f4 	.word	0x240006f4
 800eab0:	24000700 	.word	0x24000700
 800eab4:	2400070c 	.word	0x2400070c
 800eab8:	24000718 	.word	0x24000718
 800eabc:	24000724 	.word	0x24000724
 800eac0:	24000730 	.word	0x24000730
 800eac4:	240009b8 	.word	0x240009b8

0800eac8 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 800eac8:	b590      	push	{r4, r7, lr}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
 800ead2:	2300      	movs	r3, #0
 800ead4:	73fb      	strb	r3, [r7, #15]
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	e9d3 1200 	ldrd	r1, r2, [r3]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800eae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eae6:	42a2      	cmp	r2, r4
 800eae8:	bf08      	it	eq
 800eaea:	4299      	cmpeq	r1, r3
 800eaec:	d001      	beq.n	800eaf2 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE+0x2a>
 800eaee:	2301      	movs	r3, #1
 800eaf0:	73fb      	strb	r3, [r7, #15]
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800eafc:	2248      	movs	r2, #72	; 0x48
 800eafe:	4619      	mov	r1, r3
 800eb00:	f01f f896 	bl	802dc30 <memcpy>
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
 800eb06:	4618      	mov	r0, r3
 800eb08:	3714      	adds	r7, #20
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd90      	pop	{r4, r7, pc}
	...

0800eb10 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>:
	  this->CLK = CLK/10;		/* 10 : AutoReload Register+1 */
	__HAL_TIM_SET_PRESCALER(htim, this->CLK / 4000);
}


bool ModuleBuzzer::sendCommand(BuzzerCommand cmd){
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Buzzer_QueueHandle) != 0){
 800eb18:	4b0d      	ldr	r3, [pc, #52]	; (800eb50 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f018 fd77 	bl	8027610 <osMessageQueueGetSpace>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	bf14      	ite	ne
 800eb28:	2301      	movne	r3, #1
 800eb2a:	2300      	moveq	r3, #0
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d008      	beq.n	800eb44 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x34>
		osMessageQueuePut(Buzzer_QueueHandle, (void*)&cmd, 0, 0);
 800eb32:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 800eb34:	6818      	ldr	r0, [r3, #0]
 800eb36:	1d39      	adds	r1, r7, #4
 800eb38:	2300      	movs	r3, #0
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f018 fc82 	bl	8027444 <osMessageQueuePut>
		return true;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e000      	b.n	800eb46 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x36>
	}
	return false;
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	24000940 	.word	0x24000940

0800eb54 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>:
    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 800eb54:	b490      	push	{r4, r7}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	683a      	ldr	r2, [r7, #0]
 800eb62:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 800eb66:	4613      	mov	r3, r2
 800eb68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eb6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eb6e:	bf00      	nop
 800eb70:	3708      	adds	r7, #8
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bc90      	pop	{r4, r7}
 800eb76:	4770      	bx	lr

0800eb78 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800eb78:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800eb7c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800eb7e:	4b0e      	ldr	r3, [pc, #56]	; (800ebb8 <_ZL11microsecondv+0x40>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4619      	mov	r1, r3
 800eb84:	f04f 0200 	mov.w	r2, #0
 800eb88:	f04f 0b00 	mov.w	fp, #0
 800eb8c:	f04f 0c00 	mov.w	ip, #0
 800eb90:	468c      	mov	ip, r1
 800eb92:	f04f 0b00 	mov.w	fp, #0
 800eb96:	4a09      	ldr	r2, [pc, #36]	; (800ebbc <_ZL11microsecondv+0x44>)
 800eb98:	6812      	ldr	r2, [r2, #0]
 800eb9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800eb9c:	4611      	mov	r1, r2
 800eb9e:	f04f 0200 	mov.w	r2, #0
 800eba2:	ea4b 0301 	orr.w	r3, fp, r1
 800eba6:	ea4c 0402 	orr.w	r4, ip, r2
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	4621      	mov	r1, r4
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	24000944 	.word	0x24000944
 800ebbc:	2400c780 	.word	0x2400c780

0800ebc0 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum PcSignal signal){
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(PC_TaskHandle, signal);
 800ebca:	4b05      	ldr	r3, [pc, #20]	; (800ebe0 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE+0x20>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	79fa      	ldrb	r2, [r7, #7]
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f018 f836 	bl	8026c44 <osThreadFlagsSet>
	}
 800ebd8:	bf00      	nop
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	24009510 	.word	0x24009510

0800ebe4 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum AcSignal signal){
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	4603      	mov	r3, r0
 800ebec:	71fb      	strb	r3, [r7, #7]
		osThreadFlagsSet(AC_TaskHandle, signal);
 800ebee:	4b05      	ldr	r3, [pc, #20]	; (800ec04 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE+0x20>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	79fa      	ldrb	r2, [r7, #7]
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f018 f824 	bl	8026c44 <osThreadFlagsSet>
	}
 800ebfc:	bf00      	nop
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	240094b0 	.word	0x240094b0

0800ec08 <_ZN2FC15ModuleCommanderC1Ev>:
  .cb_size = sizeof(Commander_QueueControlBlock),
  .mq_mem = &Commander_QueueBuffer,
  .mq_size = sizeof(Commander_QueueBuffer)
};

ModuleCommander::ModuleCommander(){
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	461a      	mov	r2, r3
 800ec14:	2300      	movs	r3, #0
 800ec16:	6013      	str	r3, [r2, #0]
 800ec18:	6053      	str	r3, [r2, #4]
 800ec1a:	6093      	str	r3, [r2, #8]
 800ec1c:	60d3      	str	r3, [r2, #12]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	3310      	adds	r3, #16
 800ec22:	2220      	movs	r2, #32
 800ec24:	2100      	movs	r1, #0
 800ec26:	4618      	mov	r0, r3
 800ec28:	f01f f80d 	bl	802dc46 <memset>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	3330      	adds	r3, #48	; 0x30
 800ec30:	2200      	movs	r2, #0
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	605a      	str	r2, [r3, #4]
 800ec36:	609a      	str	r2, [r3, #8]
 800ec38:	60da      	str	r2, [r3, #12]
	  /* creation of Command_Queue */
	  Commander_QueueHandle = osMessageQueueNew (3, sizeof(Command), &Commander_Queue_attributes);
 800ec3a:	4a06      	ldr	r2, [pc, #24]	; (800ec54 <_ZN2FC15ModuleCommanderC1Ev+0x4c>)
 800ec3c:	2104      	movs	r1, #4
 800ec3e:	2003      	movs	r0, #3
 800ec40:	f018 fb7a 	bl	8027338 <osMessageQueueNew>
 800ec44:	4602      	mov	r2, r0
 800ec46:	4b04      	ldr	r3, [pc, #16]	; (800ec58 <_ZN2FC15ModuleCommanderC1Ev+0x50>)
 800ec48:	601a      	str	r2, [r3, #0]
}
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3708      	adds	r7, #8
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	0802fa30 	.word	0x0802fa30
 800ec58:	24000948 	.word	0x24000948

0800ec5c <_ZN2FC15ModuleCommander4mainEv>:

void ModuleCommander::main(){
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b092      	sub	sp, #72	; 0x48
 800ec60:	af00      	add	r7, sp, #0
	ModuleCommander moduleCommander;
 800ec62:	f107 0308 	add.w	r3, r7, #8
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7ff ffce 	bl	800ec08 <_ZN2FC15ModuleCommanderC1Ev>

	osDelay(1500);
 800ec6c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800ec70:	f018 f962 	bl	8026f38 <osDelay>
	sensorAccel.setBias();
 800ec74:	4814      	ldr	r0, [pc, #80]	; (800ecc8 <_ZN2FC15ModuleCommander4mainEv+0x6c>)
 800ec76:	f001 f951 	bl	800ff1c <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 800ec7a:	4814      	ldr	r0, [pc, #80]	; (800eccc <_ZN2FC15ModuleCommander4mainEv+0x70>)
 800ec7c:	f001 fd4c 	bl	8010718 <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setSeaLevelPressure(26.0); /* inha univ. altitude */
 800ec80:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 800ec84:	4812      	ldr	r0, [pc, #72]	; (800ecd0 <_ZN2FC15ModuleCommander4mainEv+0x74>)
 800ec86:	f001 fb2b 	bl	80102e0 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>
	sensorBaro.setRefAltitude();
 800ec8a:	4811      	ldr	r0, [pc, #68]	; (800ecd0 <_ZN2FC15ModuleCommander4mainEv+0x74>)
 800ec8c:	f001 fb41 	bl	8010312 <_ZN2FC10SensorBaro14setRefAltitudeEv>
	osDelay(500);
 800ec90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ec94:	f018 f950 	bl	8026f38 <osDelay>

	while(1){
		Command rcvCommand;
		if(osMessageQueueGet(Commander_QueueHandle, (void*)&rcvCommand, NULL, osWaitForever) == osOK){
 800ec98:	4b0e      	ldr	r3, [pc, #56]	; (800ecd4 <_ZN2FC15ModuleCommander4mainEv+0x78>)
 800ec9a:	6818      	ldr	r0, [r3, #0]
 800ec9c:	1d39      	adds	r1, r7, #4
 800ec9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eca2:	2200      	movs	r2, #0
 800eca4:	f018 fc42 	bl	802752c <osMessageQueueGet>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	bf0c      	ite	eq
 800ecae:	2301      	moveq	r3, #1
 800ecb0:	2300      	movne	r3, #0
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d0ef      	beq.n	800ec98 <_ZN2FC15ModuleCommander4mainEv+0x3c>
			moduleCommander.commandHandler(rcvCommand);
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	f107 0308 	add.w	r3, r7, #8
 800ecbe:	4611      	mov	r1, r2
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 f83d 	bl	800ed40 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>
		}
	}
 800ecc6:	e7e7      	b.n	800ec98 <_ZN2FC15ModuleCommander4mainEv+0x3c>
 800ecc8:	24000e48 	.word	0x24000e48
 800eccc:	24000f28 	.word	0x24000f28
 800ecd0:	24000e88 	.word	0x24000e88
 800ecd4:	24000948 	.word	0x24000948

0800ecd8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>:
}

bool ModuleCommander::sendCommand(Command cmd){
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Commander_QueueHandle) != 0){
 800ece0:	4b0d      	ldr	r3, [pc, #52]	; (800ed18 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4618      	mov	r0, r3
 800ece6:	f018 fc93 	bl	8027610 <osMessageQueueGetSpace>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	bf14      	ite	ne
 800ecf0:	2301      	movne	r3, #1
 800ecf2:	2300      	moveq	r3, #0
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d008      	beq.n	800ed0c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x34>
		osMessageQueuePut(Commander_QueueHandle, (void*)&cmd, 0, 0);
 800ecfa:	4b07      	ldr	r3, [pc, #28]	; (800ed18 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 800ecfc:	6818      	ldr	r0, [r3, #0]
 800ecfe:	1d39      	adds	r1, r7, #4
 800ed00:	2300      	movs	r3, #0
 800ed02:	2200      	movs	r2, #0
 800ed04:	f018 fb9e 	bl	8027444 <osMessageQueuePut>
		return true;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e000      	b.n	800ed0e <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x36>
	}
	return false;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	24000948 	.word	0x24000948

0800ed1c <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>:

void ModuleCommander::sendSignal(enum CmdSignal signal){
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	71fb      	strb	r3, [r7, #7]
	osThreadFlagsSet(Commander_TaskHandle, signal);
 800ed26:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE+0x20>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	79fa      	ldrb	r2, [r7, #7]
 800ed2c:	4611      	mov	r1, r2
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f017 ff88 	bl	8026c44 <osThreadFlagsSet>
}
 800ed34:	bf00      	nop
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	24009020 	.word	0x24009020

0800ed40 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>:

bool ModuleCommander::commandHandler(Command cmd){
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
	switch(cmd){
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	2b0a      	cmp	r3, #10
 800ed4e:	d847      	bhi.n	800ede0 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa0>
 800ed50:	a201      	add	r2, pc, #4	; (adr r2, 800ed58 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x18>)
 800ed52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed56:	bf00      	nop
 800ed58:	0800ed85 	.word	0x0800ed85
 800ed5c:	0800ed8f 	.word	0x0800ed8f
 800ed60:	0800ed8f 	.word	0x0800ed8f
 800ed64:	0800ed9b 	.word	0x0800ed9b
 800ed68:	0800eda5 	.word	0x0800eda5
 800ed6c:	0800edaf 	.word	0x0800edaf
 800ed70:	0800edb9 	.word	0x0800edb9
 800ed74:	0800ede1 	.word	0x0800ede1
 800ed78:	0800edc3 	.word	0x0800edc3
 800ed7c:	0800edcd 	.word	0x0800edcd
 800ed80:	0800edd7 	.word	0x0800edd7
	case Command::ControlAttitude:
		return toAttitude();
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 f831 	bl	800edec <_ZN2FC15ModuleCommander10toAttitudeEv>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	e029      	b.n	800ede2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::ControlALT:
	case Command::ControlPosition:
		return toPosition(cmd);
 800ed8e:	6839      	ldr	r1, [r7, #0]
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 f84f 	bl	800ee34 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE>
 800ed96:	4603      	mov	r3, r0
 800ed98:	e023      	b.n	800ede2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoWaypoint:
		return toWaypoint();
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 f886 	bl	800eeac <_ZN2FC15ModuleCommander10toWaypointEv>
 800eda0:	4603      	mov	r3, r0
 800eda2:	e01e      	b.n	800ede2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoRTL:
		return toRTL();
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f000 f88c 	bl	800eec2 <_ZN2FC15ModuleCommander5toRTLEv>
 800edaa:	4603      	mov	r3, r0
 800edac:	e019      	b.n	800ede2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoTakeoff:
		return toTakeoff();
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f892 	bl	800eed8 <_ZN2FC15ModuleCommander9toTakeoffEv>
 800edb4:	4603      	mov	r3, r0
 800edb6:	e014      	b.n	800ede2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::AutoLand:
		return toLand();
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f000 f898 	bl	800eeee <_ZN2FC15ModuleCommander6toLandEv>
 800edbe:	4603      	mov	r3, r0
 800edc0:	e00f      	b.n	800ede2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;

	case Command::Arm:
		return toArm();
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 f89e 	bl	800ef04 <_ZN2FC15ModuleCommander5toArmEv>
 800edc8:	4603      	mov	r3, r0
 800edca:	e00a      	b.n	800ede2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	case Command::DisArm:
		return toDisArm();
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f8dd 	bl	800ef8c <_ZN2FC15ModuleCommander8toDisArmEv>
 800edd2:	4603      	mov	r3, r0
 800edd4:	e005      	b.n	800ede2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;

	case Command::MotorCalibration:
		return toMotorCalibration();
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f8fa 	bl	800efd0 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>
 800eddc:	4603      	mov	r3, r0
 800edde:	e000      	b.n	800ede2 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0xa2>
		break;
	}
	return false;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop

0800edec <_ZN2FC15ModuleCommander10toAttitudeEv>:

bool ModuleCommander::toAttitude(){
 800edec:	b590      	push	{r4, r7, lr}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
	/*
	 * check condition of attitude control
	 */


	resetController();
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f93b 	bl	800f070 <_ZN2FC15ModuleCommander15resetControllerEv>
	/* change to attitude */
	modeFlagPub.timestamp = microsecond();
 800edfa:	f7ff febd 	bl	800eb78 <_ZL11microsecondv>
 800edfe:	4603      	mov	r3, r0
 800ee00:	460c      	mov	r4, r1
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = Command::ControlAttitude;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	3330      	adds	r3, #48	; 0x30
 800ee12:	4619      	mov	r1, r3
 800ee14:	4806      	ldr	r0, [pc, #24]	; (800ee30 <_ZN2FC15ModuleCommander10toAttitudeEv+0x44>)
 800ee16:	f7ff fe9d 	bl	800eb54 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 f912 	bl	800f044 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800ee20:	2002      	movs	r0, #2
 800ee22:	f7ff fe75 	bl	800eb10 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 800ee26:	2301      	movs	r3, #1
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd90      	pop	{r4, r7, pc}
 800ee30:	240009b8 	.word	0x240009b8

0800ee34 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE>:

bool ModuleCommander::toPosition(Command cmd){
 800ee34:	b590      	push	{r4, r7, lr}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
	//TODO check condition of position controller

	/* set position controller */
	ModulePositionController::setSignal(PC_start);
 800ee3e:	2002      	movs	r0, #2
 800ee40:	f7ff febe 	bl	800ebc0 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
	if(!(osThreadFlagsWait(CMD_ACK, osFlagsWaitAny, 500) & CMD_ACK)){
 800ee44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ee48:	2100      	movs	r1, #0
 800ee4a:	2001      	movs	r0, #1
 800ee4c:	f017 ffe0 	bl	8026e10 <osThreadFlagsWait>
 800ee50:	4603      	mov	r3, r0
 800ee52:	f003 0301 	and.w	r3, r3, #1
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	bf0c      	ite	eq
 800ee5a:	2301      	moveq	r3, #1
 800ee5c:	2300      	movne	r3, #0
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d004      	beq.n	800ee6e <_ZN2FC15ModuleCommander10toPositionENS_7CommandE+0x3a>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 800ee64:	2003      	movs	r0, #3
 800ee66:	f7ff fe53 	bl	800eb10 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	e018      	b.n	800eea0 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE+0x6c>
	}

	/* reset */
	resetController();
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f8fe 	bl	800f070 <_ZN2FC15ModuleCommander15resetControllerEv>

	/* mode set */
	modeFlagPub.timestamp = microsecond();
 800ee74:	f7ff fe80 	bl	800eb78 <_ZL11microsecondv>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.flightMode = cmd;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	683a      	ldr	r2, [r7, #0]
 800ee86:	63da      	str	r2, [r3, #60]	; 0x3c
	msgBus.setModeFlag(modeFlagPub);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	3330      	adds	r3, #48	; 0x30
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	4806      	ldr	r0, [pc, #24]	; (800eea8 <_ZN2FC15ModuleCommander10toPositionENS_7CommandE+0x74>)
 800ee90:	f7ff fe60 	bl	800eb54 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 f8d5 	bl	800f044 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800ee9a:	2002      	movs	r0, #2
 800ee9c:	f7ff fe38 	bl	800eb10 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd90      	pop	{r4, r7, pc}
 800eea8:	240009b8 	.word	0x240009b8

0800eeac <_ZN2FC15ModuleCommander10toWaypointEv>:

bool ModuleCommander::toWaypoint(){
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
	//TODO change to waypoint autopilot
}
 800eeb4:	bf00      	nop
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <_ZN2FC15ModuleCommander5toRTLEv>:

bool ModuleCommander::toRTL(){
 800eec2:	b480      	push	{r7}
 800eec4:	b083      	sub	sp, #12
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
	//TODO change to auto RTL
}
 800eeca:	bf00      	nop
 800eecc:	4618      	mov	r0, r3
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <_ZN2FC15ModuleCommander9toTakeoffEv>:

bool ModuleCommander::toTakeoff(){
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
	//TODO change to auto takeoff
}
 800eee0:	bf00      	nop
 800eee2:	4618      	mov	r0, r3
 800eee4:	370c      	adds	r7, #12
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr

0800eeee <_ZN2FC15ModuleCommander6toLandEv>:

bool ModuleCommander::toLand(){
 800eeee:	b480      	push	{r7}
 800eef0:	b083      	sub	sp, #12
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
	//TODO change to auto land
}
 800eef6:	bf00      	nop
 800eef8:	4618      	mov	r0, r3
 800eefa:	370c      	adds	r7, #12
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr

0800ef04 <_ZN2FC15ModuleCommander5toArmEv>:

bool ModuleCommander::toArm(){
 800ef04:	b590      	push	{r4, r7, lr}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
	//TODO check arm condition

	/* toArm condition */
	msgBus.getController(&controllerSub);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	481a      	ldr	r0, [pc, #104]	; (800ef7c <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 800ef12:	f7ff fb65 	bl	800e5e0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
	if(controllerSub.throttle > 1050){
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	89db      	ldrh	r3, [r3, #14]
 800ef1a:	f240 421a 	movw	r2, #1050	; 0x41a
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d904      	bls.n	800ef2c <_ZN2FC15ModuleCommander5toArmEv+0x28>
		ModuleBuzzer::sendCommand(BuzzerCommand::Denied);
 800ef22:	2003      	movs	r0, #3
 800ef24:	f7ff fdf4 	bl	800eb10 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
		return false; /* can't arm */
 800ef28:	2300      	movs	r3, #0
 800ef2a:	e022      	b.n	800ef72 <_ZN2FC15ModuleCommander5toArmEv+0x6e>
	}

	/* arm initialize */
	sensorAccel.setBias();
 800ef2c:	4814      	ldr	r0, [pc, #80]	; (800ef80 <_ZN2FC15ModuleCommander5toArmEv+0x7c>)
 800ef2e:	f000 fff5 	bl	800ff1c <_ZN2FC11SensorAccel7setBiasEv>
	sensorGyro.setBias();
 800ef32:	4814      	ldr	r0, [pc, #80]	; (800ef84 <_ZN2FC15ModuleCommander5toArmEv+0x80>)
 800ef34:	f001 fbf0 	bl	8010718 <_ZN2FC10SensorGyro7setBiasEv>
	sensorBaro.setRefAltitude();
 800ef38:	4813      	ldr	r0, [pc, #76]	; (800ef88 <_ZN2FC15ModuleCommander5toArmEv+0x84>)
 800ef3a:	f001 f9ea 	bl	8010312 <_ZN2FC10SensorBaro14setRefAltitudeEv>
	resetController();
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 f896 	bl	800f070 <_ZN2FC15ModuleCommander15resetControllerEv>
	osDelay(150);					/* wait sensor calibration */
 800ef44:	2096      	movs	r0, #150	; 0x96
 800ef46:	f017 fff7 	bl	8026f38 <osDelay>

	modeFlagPub.timestamp = microsecond();
 800ef4a:	f7ff fe15 	bl	800eb78 <_ZL11microsecondv>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	460c      	mov	r4, r1
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::Arm;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2208      	movs	r2, #8
 800ef5c:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	3330      	adds	r3, #48	; 0x30
 800ef62:	4619      	mov	r1, r3
 800ef64:	4805      	ldr	r0, [pc, #20]	; (800ef7c <_ZN2FC15ModuleCommander5toArmEv+0x78>)
 800ef66:	f7ff fdf5 	bl	800eb54 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800ef6a:	2002      	movs	r0, #2
 800ef6c:	f7ff fdd0 	bl	800eb10 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 800ef70:	2301      	movs	r3, #1
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	370c      	adds	r7, #12
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd90      	pop	{r4, r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	240009b8 	.word	0x240009b8
 800ef80:	24000e48 	.word	0x24000e48
 800ef84:	24000f28 	.word	0x24000f28
 800ef88:	24000e88 	.word	0x24000e88

0800ef8c <_ZN2FC15ModuleCommander8toDisArmEv>:

bool ModuleCommander::toDisArm(){
 800ef8c:	b590      	push	{r4, r7, lr}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
//	   pwm.m4 > DISARM_PWM && pwm.m5 > DISARM_PWM && pwm.m6 > DISARM_PWM){
//		/* can't disarm */
//
//	}

	modeFlagPub.timestamp = microsecond();
 800ef94:	f7ff fdf0 	bl	800eb78 <_ZL11microsecondv>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	modeFlagPub.armMode = Command::DisArm;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2209      	movs	r2, #9
 800efa6:	639a      	str	r2, [r3, #56]	; 0x38
	msgBus.setModeFlag(modeFlagPub);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	3330      	adds	r3, #48	; 0x30
 800efac:	4619      	mov	r1, r3
 800efae:	4807      	ldr	r0, [pc, #28]	; (800efcc <_ZN2FC15ModuleCommander8toDisArmEv+0x40>)
 800efb0:	f7ff fdd0 	bl	800eb54 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	stopTheOtherTask();
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 f845 	bl	800f044 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800efba:	2002      	movs	r0, #2
 800efbc:	f7ff fda8 	bl	800eb10 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
	return true;
 800efc0:	2301      	movs	r3, #1
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	370c      	adds	r7, #12
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd90      	pop	{r4, r7, pc}
 800efca:	bf00      	nop
 800efcc:	240009b8 	.word	0x240009b8

0800efd0 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>:

bool ModuleCommander::toMotorCalibration(){
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b086      	sub	sp, #24
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
	osKernelLock();
 800efd8:	f017 fd2e 	bl	8026a38 <osKernelLock>

	struct Controller ctl;

	while(1){
		msgBus.getController(&ctl);
 800efdc:	f107 0308 	add.w	r3, r7, #8
 800efe0:	4619      	mov	r1, r3
 800efe2:	4811      	ldr	r0, [pc, #68]	; (800f028 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x58>)
 800efe4:	f7ff fafc 	bl	800e5e0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

		m1.setPWM(ctl.throttle);
 800efe8:	8afb      	ldrh	r3, [r7, #22]
 800efea:	4619      	mov	r1, r3
 800efec:	480f      	ldr	r0, [pc, #60]	; (800f02c <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x5c>)
 800efee:	f7f1 fd81 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
		m2.setPWM(ctl.throttle);
 800eff2:	8afb      	ldrh	r3, [r7, #22]
 800eff4:	4619      	mov	r1, r3
 800eff6:	480e      	ldr	r0, [pc, #56]	; (800f030 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x60>)
 800eff8:	f7f1 fd7c 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
		m3.setPWM(ctl.throttle);
 800effc:	8afb      	ldrh	r3, [r7, #22]
 800effe:	4619      	mov	r1, r3
 800f000:	480c      	ldr	r0, [pc, #48]	; (800f034 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x64>)
 800f002:	f7f1 fd77 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
		m4.setPWM(ctl.throttle);
 800f006:	8afb      	ldrh	r3, [r7, #22]
 800f008:	4619      	mov	r1, r3
 800f00a:	480b      	ldr	r0, [pc, #44]	; (800f038 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x68>)
 800f00c:	f7f1 fd72 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
		m5.setPWM(ctl.throttle);
 800f010:	8afb      	ldrh	r3, [r7, #22]
 800f012:	4619      	mov	r1, r3
 800f014:	4809      	ldr	r0, [pc, #36]	; (800f03c <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x6c>)
 800f016:	f7f1 fd6d 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
		m6.setPWM(ctl.throttle);
 800f01a:	8afb      	ldrh	r3, [r7, #22]
 800f01c:	4619      	mov	r1, r3
 800f01e:	4808      	ldr	r0, [pc, #32]	; (800f040 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x70>)
 800f020:	f7f1 fd68 	bl	8000af4 <_ZN2FC5Motor6setPWMEt>
		msgBus.getController(&ctl);
 800f024:	e7da      	b.n	800efdc <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0xc>
 800f026:	bf00      	nop
 800f028:	240009b8 	.word	0x240009b8
 800f02c:	240006f4 	.word	0x240006f4
 800f030:	24000700 	.word	0x24000700
 800f034:	2400070c 	.word	0x2400070c
 800f038:	24000718 	.word	0x24000718
 800f03c:	24000724 	.word	0x24000724
 800f040:	24000730 	.word	0x24000730

0800f044 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv>:
	}
	osKernelUnlock();
}

bool ModuleCommander::stopTheOtherTask(){
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f050:	2b00      	cmp	r3, #0
 800f052:	d004      	beq.n	800f05e <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x1a>
 800f054:	2b00      	cmp	r3, #0
 800f056:	db06      	blt.n	800f066 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
 800f058:	2b03      	cmp	r3, #3
 800f05a:	dc04      	bgt.n	800f066 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x22>
	case Command::ControlPosition:
	case Command::ControlALT:
		//TODO stop auto controller
	case Command::AutoWaypoint:
		//??
		break;
 800f05c:	e002      	b.n	800f064 <_ZN2FC15ModuleCommander16stopTheOtherTaskEv+0x20>
		ModulePositionController::setSignal(PC_stop);
 800f05e:	2004      	movs	r0, #4
 800f060:	f7ff fdae 	bl	800ebc0 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		break;
 800f064:	bf00      	nop
	}
}
 800f066:	bf00      	nop
 800f068:	4618      	mov	r0, r3
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <_ZN2FC15ModuleCommander15resetControllerEv>:

void ModuleCommander::resetController(){
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
	switch(modeFlagPub.flightMode){
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d006      	beq.n	800f08e <_ZN2FC15ModuleCommander15resetControllerEv+0x1e>
 800f080:	2b00      	cmp	r3, #0
 800f082:	db08      	blt.n	800f096 <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
 800f084:	2b03      	cmp	r3, #3
 800f086:	dc06      	bgt.n	800f096 <_ZN2FC15ModuleCommander15resetControllerEv+0x26>
	case Command::AutoWaypoint:
		//TODO initialize auto controller
		/* not break */
	case Command::ControlPosition:
	case Command::ControlALT:
		ModulePositionController::setSignal(PC_reset);
 800f088:	2008      	movs	r0, #8
 800f08a:	f7ff fd99 	bl	800ebc0 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
		/* not break */
	case Command::ControlAttitude:
		ModuleAttitudeController::setSignal(AC_reset);
 800f08e:	2002      	movs	r0, #2
 800f090:	f7ff fda8 	bl	800ebe4 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
		break;
 800f094:	bf00      	nop
	}
}
 800f096:	bf00      	nop
 800f098:	3708      	adds	r7, #8
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}

0800f09e <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>:
  ~positionEstimatorModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU* pExtU)
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b082      	sub	sp, #8
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
 800f0a6:	6039      	str	r1, [r7, #0]
  {
    rtU = *pExtU;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	683a      	ldr	r2, [r7, #0]
 800f0ac:	f503 6357 	add.w	r3, r3, #3440	; 0xd70
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	2290      	movs	r2, #144	; 0x90
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f01e fdbb 	bl	802dc30 <memcpy>
  }
 800f0ba:	bf00      	nop
 800f0bc:	3708      	adds	r7, #8
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const positionEstimatorModelClass::ExtY & getExternalOutputs() const
 800f0c2:	b480      	push	{r7}
 800f0c4:	b083      	sub	sp, #12
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
  {
    return rtY;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
  }
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 800f0dc:	b590      	push	{r4, r7, lr}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	73fb      	strb	r3, [r7, #15]
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 800f0f6:	42a2      	cmp	r2, r4
 800f0f8:	bf08      	it	eq
 800f0fa:	4299      	cmpeq	r1, r3
 800f0fc:	d001      	beq.n	800f102 <_ZN2FC6MsgBus6getGPSEPNS_3GPSE+0x26>
 800f0fe:	2301      	movs	r3, #1
 800f100:	73fb      	strb	r3, [r7, #15]
 800f102:	683a      	ldr	r2, [r7, #0]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4610      	mov	r0, r2
 800f108:	3348      	adds	r3, #72	; 0x48
 800f10a:	2248      	movs	r2, #72	; 0x48
 800f10c:	4619      	mov	r1, r3
 800f10e:	f01e fd8f 	bl	802dc30 <memcpy>
 800f112:	7bfb      	ldrb	r3, [r7, #15]
 800f114:	4618      	mov	r0, r3
 800f116:	3714      	adds	r7, #20
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd90      	pop	{r4, r7, pc}

0800f11c <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 800f11c:	b4b0      	push	{r4, r5, r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
 800f126:	2300      	movs	r3, #0
 800f128:	73fb      	strb	r3, [r7, #15]
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800f136:	42a2      	cmp	r2, r4
 800f138:	bf08      	it	eq
 800f13a:	4299      	cmpeq	r1, r3
 800f13c:	d001      	beq.n	800f142 <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE+0x26>
 800f13e:	2301      	movs	r3, #1
 800f140:	73fb      	strb	r3, [r7, #15]
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4615      	mov	r5, r2
 800f148:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800f14c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f14e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f150:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f154:	e885 0003 	stmia.w	r5, {r0, r1}
 800f158:	7bfb      	ldrb	r3, [r7, #15]
 800f15a:	4618      	mov	r0, r3
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	bcb0      	pop	{r4, r5, r7}
 800f162:	4770      	bx	lr

0800f164 <_ZN2FC6MsgBus8getLidarEPNS_5LidarE>:
    SIMPLE_FUNC_IMPL(Lidar, Lidar, lidar)
 800f164:	b490      	push	{r4, r7}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
 800f16e:	2300      	movs	r3, #0
 800f170:	73fb      	strb	r3, [r7, #15]
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 800f17e:	42a2      	cmp	r2, r4
 800f180:	bf08      	it	eq
 800f182:	4299      	cmpeq	r1, r3
 800f184:	d001      	beq.n	800f18a <_ZN2FC6MsgBus8getLidarEPNS_5LidarE+0x26>
 800f186:	2301      	movs	r3, #1
 800f188:	73fb      	strb	r3, [r7, #15]
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4614      	mov	r4, r2
 800f190:	33a8      	adds	r3, #168	; 0xa8
 800f192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f198:	7bfb      	ldrb	r3, [r7, #15]
 800f19a:	4618      	mov	r0, r3
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bc90      	pop	{r4, r7}
 800f1a2:	4770      	bx	lr

0800f1a4 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 800f1a4:	b4b0      	push	{r4, r5, r7}
 800f1a6:	b085      	sub	sp, #20
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	73fb      	strb	r3, [r7, #15]
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800f1be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f1c2:	42a2      	cmp	r2, r4
 800f1c4:	bf08      	it	eq
 800f1c6:	4299      	cmpeq	r1, r3
 800f1c8:	d001      	beq.n	800f1ce <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE+0x2a>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	73fb      	strb	r3, [r7, #15]
 800f1ce:	683a      	ldr	r2, [r7, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4615      	mov	r5, r2
 800f1d4:	f503 7494 	add.w	r4, r3, #296	; 0x128
 800f1d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f1da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f1dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f1e0:	e885 0003 	stmia.w	r5, {r0, r1}
 800f1e4:	7bfb      	ldrb	r3, [r7, #15]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3714      	adds	r7, #20
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bcb0      	pop	{r4, r5, r7}
 800f1ee:	4770      	bx	lr

0800f1f0 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>:
    SIMPLE_FUNC_IMPL(LocalPosition, LocalPosition, localPosition)
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	683a      	ldr	r2, [r7, #0]
 800f1fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f202:	4611      	mov	r1, r2
 800f204:	2248      	movs	r2, #72	; 0x48
 800f206:	4618      	mov	r0, r3
 800f208:	f01e fd12 	bl	802dc30 <memcpy>
 800f20c:	bf00      	nop
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800f214:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f218:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800f21a:	4b0e      	ldr	r3, [pc, #56]	; (800f254 <_ZL11microsecondv+0x40>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4619      	mov	r1, r3
 800f220:	f04f 0200 	mov.w	r2, #0
 800f224:	f04f 0b00 	mov.w	fp, #0
 800f228:	f04f 0c00 	mov.w	ip, #0
 800f22c:	468c      	mov	ip, r1
 800f22e:	f04f 0b00 	mov.w	fp, #0
 800f232:	4a09      	ldr	r2, [pc, #36]	; (800f258 <_ZL11microsecondv+0x44>)
 800f234:	6812      	ldr	r2, [r2, #0]
 800f236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f238:	4611      	mov	r1, r2
 800f23a:	f04f 0200 	mov.w	r2, #0
 800f23e:	ea4b 0301 	orr.w	r3, fp, r1
 800f242:	ea4c 0402 	orr.w	r4, ip, r2
}
 800f246:	4618      	mov	r0, r3
 800f248:	4621      	mov	r1, r4
 800f24a:	46bd      	mov	sp, r7
 800f24c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	240009a8 	.word	0x240009a8
 800f258:	2400c780 	.word	0x2400c780

0800f25c <_ZN2FC9ModuleINSC1Ev>:
#include "printf.h"

namespace FC {


ModuleINS::ModuleINS()
 800f25c:	b590      	push	{r4, r7, lr}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
	: refLat(0)
	, refLon(0)
	, refAlt(0)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4618      	mov	r0, r3
 800f268:	f7fb fc82 	bl	800ab70 <_ZN27positionEstimatorModelClassC1Ev>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f603 7248 	addw	r2, r3, #3912	; 0xf48
 800f272:	f04f 0300 	mov.w	r3, #0
 800f276:	f04f 0400 	mov.w	r4, #0
 800f27a:	e9c2 3400 	strd	r3, r4, [r2]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f503 6275 	add.w	r2, r3, #3920	; 0xf50
 800f284:	f04f 0300 	mov.w	r3, #0
 800f288:	f04f 0400 	mov.w	r4, #0
 800f28c:	e9c2 3400 	strd	r3, r4, [r2]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f603 7358 	addw	r3, r3, #3928	; 0xf58
 800f296:	f04f 0200 	mov.w	r2, #0
 800f29a:	601a      	str	r2, [r3, #0]
{}
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	370c      	adds	r7, #12
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd90      	pop	{r4, r7, pc}
	...

0800f2a8 <_ZN2FC9ModuleINS7onestepEv>:

void ModuleINS::onestep(){
 800f2a8:	b590      	push	{r4, r7, lr}
 800f2aa:	b0b9      	sub	sp, #228	; 0xe4
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
	ExtU input;
	if(msgBus.getNedAccel(&nedAccelSub)){
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f603 6378 	addw	r3, r3, #3704	; 0xe78
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	488f      	ldr	r0, [pc, #572]	; (800f4f8 <_ZN2FC9ModuleINS7onestepEv+0x250>)
 800f2ba:	f7ff ff73 	bl	800f1a4 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d024      	beq.n	800f30e <_ZN2FC9ModuleINS7onestepEv+0x66>
		input.AhrsFlag = true;
 800f2c4:	f04f 0300 	mov.w	r3, #0
 800f2c8:	4c8c      	ldr	r4, [pc, #560]	; (800f4fc <_ZN2FC9ModuleINS7onestepEv+0x254>)
 800f2ca:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		input.ax = nedAccelSub.xyz[0];
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 800f2d4:	edd3 7a00 	vldr	s15, [r3]
 800f2d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f2dc:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
		input.ay = nedAccelSub.xyz[1];
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f603 6384 	addw	r3, r3, #3716	; 0xe84
 800f2e6:	edd3 7a00 	vldr	s15, [r3]
 800f2ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f2ee:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		input.az = nedAccelSub.xyz[2] - FC_GRAVITY_ACCEERATION;		/* subtract gravity */
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f603 6388 	addw	r3, r3, #3720	; 0xe88
 800f2f8:	edd3 7a00 	vldr	s15, [r3]
 800f2fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f300:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 800f4f0 <_ZN2FC9ModuleINS7onestepEv+0x248>
 800f304:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f308:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
 800f30c:	e005      	b.n	800f31a <_ZN2FC9ModuleINS7onestepEv+0x72>
	}
	else input.AhrsFlag = false;
 800f30e:	f04f 0300 	mov.w	r3, #0
 800f312:	f04f 0400 	mov.w	r4, #0
 800f316:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	if(msgBus.getGPS(&gpsSub)){
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f503 6369 	add.w	r3, r3, #3728	; 0xe90
 800f320:	4619      	mov	r1, r3
 800f322:	4875      	ldr	r0, [pc, #468]	; (800f4f8 <_ZN2FC9ModuleINS7onestepEv+0x250>)
 800f324:	f7ff feda 	bl	800f0dc <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d006      	beq.n	800f33c <_ZN2FC9ModuleINS7onestepEv+0x94>
		input.GpsFlag = false;
 800f32e:	f04f 0300 	mov.w	r3, #0
 800f332:	f04f 0400 	mov.w	r4, #0
 800f336:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 800f33a:	e005      	b.n	800f348 <_ZN2FC9ModuleINS7onestepEv+0xa0>
	}
	else input.GpsFlag = false;
 800f33c:	f04f 0300 	mov.w	r3, #0
 800f340:	f04f 0400 	mov.w	r4, #0
 800f344:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70

	if(msgBus.getBarometer(&baroSub)){
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f603 63d8 	addw	r3, r3, #3800	; 0xed8
 800f34e:	4619      	mov	r1, r3
 800f350:	4869      	ldr	r0, [pc, #420]	; (800f4f8 <_ZN2FC9ModuleINS7onestepEv+0x250>)
 800f352:	f7ff fee3 	bl	800f11c <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d00e      	beq.n	800f37a <_ZN2FC9ModuleINS7onestepEv+0xd2>
		input.BaroFlag = true;
 800f35c:	f04f 0300 	mov.w	r3, #0
 800f360:	4c66      	ldr	r4, [pc, #408]	; (800f4fc <_ZN2FC9ModuleINS7onestepEv+0x254>)
 800f362:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		input.baroZ = baroSub.altitude;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f603 63e8 	addw	r3, r3, #3816	; 0xee8
 800f36c:	edd3 7a00 	vldr	s15, [r3]
 800f370:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f374:	ed87 7b2a 	vstr	d7, [r7, #168]	; 0xa8
 800f378:	e005      	b.n	800f386 <_ZN2FC9ModuleINS7onestepEv+0xde>
	}
	else input.BaroFlag = false;
 800f37a:	f04f 0300 	mov.w	r3, #0
 800f37e:	f04f 0400 	mov.w	r4, #0
 800f382:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0

	if(msgBus.getLidar(&lidar) && lidar.valid){
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f503 636f 	add.w	r3, r3, #3824	; 0xef0
 800f38c:	4619      	mov	r1, r3
 800f38e:	485a      	ldr	r0, [pc, #360]	; (800f4f8 <_ZN2FC9ModuleINS7onestepEv+0x250>)
 800f390:	f7ff fee8 	bl	800f164 <_ZN2FC6MsgBus8getLidarEPNS_5LidarE>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d006      	beq.n	800f3a8 <_ZN2FC9ModuleINS7onestepEv+0x100>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f893 3efc 	ldrb.w	r3, [r3, #3836]	; 0xefc
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <_ZN2FC9ModuleINS7onestepEv+0x100>
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e000      	b.n	800f3aa <_ZN2FC9ModuleINS7onestepEv+0x102>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00e      	beq.n	800f3cc <_ZN2FC9ModuleINS7onestepEv+0x124>
		input.LidarFlag = true;
 800f3ae:	f04f 0300 	mov.w	r3, #0
 800f3b2:	4c52      	ldr	r4, [pc, #328]	; (800f4fc <_ZN2FC9ModuleINS7onestepEv+0x254>)
 800f3b4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		input.Lidar_height = lidar.altitude;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f603 63f8 	addw	r3, r3, #3832	; 0xef8
 800f3be:	edd3 7a00 	vldr	s15, [r3]
 800f3c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f3c6:	ed87 7b34 	vstr	d7, [r7, #208]	; 0xd0
 800f3ca:	e005      	b.n	800f3d8 <_ZN2FC9ModuleINS7onestepEv+0x130>
	}
	else input.LidarFlag = false;
 800f3cc:	f04f 0300 	mov.w	r3, #0
 800f3d0:	f04f 0400 	mov.w	r4, #0
 800f3d4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

	setExternalInputs(&input);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f3de:	4611      	mov	r1, r2
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff fe5c 	bl	800f09e <_ZN27positionEstimatorModelClass17setExternalInputsEPKNS_4ExtUE>
	step();
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7f7 fcc5 	bl	8006d78 <_ZN27positionEstimatorModelClass4stepEv>
	ExtY output = getExternalOutputs();
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7ff fe66 	bl	800f0c2 <_ZNK27positionEstimatorModelClass18getExternalOutputsEv>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	f107 0308 	add.w	r3, r7, #8
 800f3fc:	4611      	mov	r1, r2
 800f3fe:	2248      	movs	r2, #72	; 0x48
 800f400:	4618      	mov	r0, r3
 800f402:	f01e fc15 	bl	802dc30 <memcpy>


	localPositionPub.timestamp = microsecond();
 800f406:	f7ff ff05 	bl	800f214 <_ZL11microsecondv>
 800f40a:	4603      	mov	r3, r0
 800f40c:	460c      	mov	r4, r1
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	f502 6270 	add.w	r2, r2, #3840	; 0xf00
 800f414:	e9c2 3400 	strd	r3, r4, [r2]
	localPositionPub.ax = (float)output.estiAX;
 800f418:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800f41c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f503 6372 	add.w	r3, r3, #3872	; 0xf20
 800f426:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.ay = (float)output.estiAY;
 800f42a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800f42e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f603 7324 	addw	r3, r3, #3876	; 0xf24
 800f438:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.az = (float)output.estiAZ;
 800f43c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800f440:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f603 7328 	addw	r3, r3, #3880	; 0xf28
 800f44a:	edc3 7a00 	vstr	s15, [r3]

	localPositionPub.vx = (float)output.estiVX;
 800f44e:	ed97 7b08 	vldr	d7, [r7, #32]
 800f452:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f603 7314 	addw	r3, r3, #3860	; 0xf14
 800f45c:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.vy = (float)output.estiVY;
 800f460:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800f464:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f603 7318 	addw	r3, r3, #3864	; 0xf18
 800f46e:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.vz = (float)output.estiVZ;
 800f472:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800f476:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f603 731c 	addw	r3, r3, #3868	; 0xf1c
 800f480:	edc3 7a00 	vstr	s15, [r3]

	localPositionPub.x = (float)output.estiX;
 800f484:	ed97 7b02 	vldr	d7, [r7, #8]
 800f488:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f603 7308 	addw	r3, r3, #3848	; 0xf08
 800f492:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.y = (float)output.estiY;
 800f496:	ed97 7b04 	vldr	d7, [r7, #16]
 800f49a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f603 730c 	addw	r3, r3, #3852	; 0xf0c
 800f4a4:	edc3 7a00 	vstr	s15, [r3]
	localPositionPub.z = (float)output.estiZ;
 800f4a8:	ed97 7b06 	vldr	d7, [r7, #24]
 800f4ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f503 6371 	add.w	r3, r3, #3856	; 0xf10
 800f4b6:	edc3 7a00 	vstr	s15, [r3]

	msgBus.getAttitude(&attitudeSub);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	480d      	ldr	r0, [pc, #52]	; (800f4f8 <_ZN2FC9ModuleINS7onestepEv+0x250>)
 800f4c4:	f7ff f8d0 	bl	800e668 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	localPositionPub.yaw = attitudeSub.yaw;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f603 732c 	addw	r3, r3, #3884	; 0xf2c
 800f4d6:	601a      	str	r2, [r3, #0]

	msgBus.setLocalPosition(localPositionPub);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 800f4de:	4619      	mov	r1, r3
 800f4e0:	4805      	ldr	r0, [pc, #20]	; (800f4f8 <_ZN2FC9ModuleINS7onestepEv+0x250>)
 800f4e2:	f7ff fe85 	bl	800f1f0 <_ZN2FC6MsgBus16setLocalPositionERKNS_13LocalPositionE>
}
 800f4e6:	bf00      	nop
 800f4e8:	37e4      	adds	r7, #228	; 0xe4
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd90      	pop	{r4, r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	3a92a305 	.word	0x3a92a305
 800f4f4:	40239d01 	.word	0x40239d01
 800f4f8:	240009b8 	.word	0x240009b8
 800f4fc:	3ff00000 	.word	0x3ff00000

0800f500 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	ed87 0a01 	vstr	s0, [r7, #4]
 800f50a:	ed97 0a01 	vldr	s0, [r7, #4]
 800f50e:	f01b fd77 	bl	802b000 <cosf>
 800f512:	eef0 7a40 	vmov.f32	s15, s0
 800f516:	eeb0 0a67 	vmov.f32	s0, s15
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	ed87 0a01 	vstr	s0, [r7, #4]
 800f52a:	ed97 0a01 	vldr	s0, [r7, #4]
 800f52e:	f01b fda7 	bl	802b080 <sinf>
 800f532:	eef0 7a40 	vmov.f32	s15, s0
 800f536:	eeb0 0a67 	vmov.f32	s0, s15
 800f53a:	3708      	adds	r7, #8
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <_ZN25positionControlModelClass17setExternalInputsEPKNS_22ExtU_positionControl_TE>:
  void setBlockParameters(const P_positionControl_T *ppositionControl_P);

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_positionControl_T* pExtU_positionControl_T)
 800f540:	b580      	push	{r7, lr}
 800f542:	b082      	sub	sp, #8
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
  {
    positionControl_U = *pExtU_positionControl_T;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	683a      	ldr	r2, [r7, #0]
 800f54e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f552:	4611      	mov	r1, r2
 800f554:	2258      	movs	r2, #88	; 0x58
 800f556:	4618      	mov	r0, r3
 800f558:	f01e fb6a 	bl	802dc30 <memcpy>
  }
 800f55c:	bf00      	nop
 800f55e:	3708      	adds	r7, #8
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <_ZNK25positionControlModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const positionControlModelClass::ExtY_positionControl_T & getExternalOutputs()
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
    const
  {
    return positionControl_Y;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f503 7340 	add.w	r3, r3, #768	; 0x300
  }
 800f572:	4618      	mov	r0, r3
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>:
    SIMPLE_FUNC_IMPL(VehicleAttitueSP, VehicleAttitueSP, vehicleAttitudeSP)
 800f57e:	b4b0      	push	{r4, r5, r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	6039      	str	r1, [r7, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	683a      	ldr	r2, [r7, #0]
 800f58c:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800f590:	4615      	mov	r5, r2
 800f592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f596:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f59a:	e884 0003 	stmia.w	r4, {r0, r1}
 800f59e:	bf00      	nop
 800f5a0:	370c      	adds	r7, #12
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bcb0      	pop	{r4, r5, r7}
 800f5a6:	4770      	bx	lr

0800f5a8 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800f5a8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800f5ac:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800f5ae:	4b0e      	ldr	r3, [pc, #56]	; (800f5e8 <_ZL11microsecondv+0x40>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	f04f 0200 	mov.w	r2, #0
 800f5b8:	f04f 0b00 	mov.w	fp, #0
 800f5bc:	f04f 0c00 	mov.w	ip, #0
 800f5c0:	468c      	mov	ip, r1
 800f5c2:	f04f 0b00 	mov.w	fp, #0
 800f5c6:	4a09      	ldr	r2, [pc, #36]	; (800f5ec <_ZL11microsecondv+0x44>)
 800f5c8:	6812      	ldr	r2, [r2, #0]
 800f5ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f5cc:	4611      	mov	r1, r2
 800f5ce:	f04f 0200 	mov.w	r2, #0
 800f5d2:	ea4b 0301 	orr.w	r3, fp, r1
 800f5d6:	ea4c 0402 	orr.w	r4, ip, r2
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	4621      	mov	r1, r4
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	240009ac 	.word	0x240009ac
 800f5ec:	2400c780 	.word	0x2400c780

0800f5f0 <_ZN2FC24ModulePositionControllerC1Ev>:
#include "Usec.h"
#include "cmath"
#include "printf.h"
namespace FC {

ModulePositionController::ModulePositionController() {
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f5 ff0c 	bl	8005418 <_ZN25positionControlModelClassC1Ev>
	// TODO Auto-generated constructor stub
}
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4618      	mov	r0, r3
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
	...

0800f60c <_ZN2FC24ModulePositionController7oneStepEv>:

void ModulePositionController::oneStep(){
 800f60c:	b590      	push	{r4, r7, lr}
 800f60e:	b09d      	sub	sp, #116	; 0x74
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f61a:	4619      	mov	r1, r3
 800f61c:	486e      	ldr	r0, [pc, #440]	; (800f7d8 <_ZN2FC24ModulePositionController7oneStepEv+0x1cc>)
 800f61e:	f7ff f84b 	bl	800e6b8 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	msgBus.getLocalPosition(&localPositionSub);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800f628:	4619      	mov	r1, r3
 800f62a:	486b      	ldr	r0, [pc, #428]	; (800f7d8 <_ZN2FC24ModulePositionController7oneStepEv+0x1cc>)
 800f62c:	f7ff fa4c 	bl	800eac8 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>

	if(modeFlagSub.flightMode == Command::ControlPosition || modeFlagSub.flightMode == Command::ControlALT){
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 800f636:	2b02      	cmp	r3, #2
 800f638:	d004      	beq.n	800f644 <_ZN2FC24ModulePositionController7oneStepEv+0x38>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 800f640:	2b01      	cmp	r3, #1
 800f642:	d103      	bne.n	800f64c <_ZN2FC24ModulePositionController7oneStepEv+0x40>
		setFromRC();
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f000 f8c9 	bl	800f7dc <_ZN2FC24ModulePositionController9setFromRCEv>
 800f64a:	e002      	b.n	800f652 <_ZN2FC24ModulePositionController7oneStepEv+0x46>
	}
	else{
		setFromAutoController();
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 fa0b 	bl	800fa68 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>
	}

	ExtU_positionControl_T input;

	input.set_x = targetX;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	edd3 7aec 	vldr	s15, [r3, #944]	; 0x3b0
 800f658:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f65c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	input.set_y = targetY;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	edd3 7aed 	vldr	s15, [r3, #948]	; 0x3b4
 800f666:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f66a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	input.set_z = targetZ;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	edd3 7aee 	vldr	s15, [r3, #952]	; 0x3b8
 800f674:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f678:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	input.set_yaw = targetYaw;;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	edd3 7aef 	vldr	s15, [r3, #956]	; 0x3bc
 800f682:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f686:	ed87 7b08 	vstr	d7, [r7, #32]

	input.estim_dx = localPositionSub.vx;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	edd3 7ac9 	vldr	s15, [r3, #804]	; 0x324
 800f690:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f694:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	input.estim_dy = localPositionSub.vy;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	edd3 7aca 	vldr	s15, [r3, #808]	; 0x328
 800f69e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f6a2:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
	input.estim_dz = localPositionSub.vz;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	edd3 7acb 	vldr	s15, [r3, #812]	; 0x32c
 800f6ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f6b0:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	input.estim_x = localPositionSub.x;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	edd3 7ac6 	vldr	s15, [r3, #792]	; 0x318
 800f6ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f6be:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	input.estim_y = localPositionSub.y;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	edd3 7ac7 	vldr	s15, [r3, #796]	; 0x31c
 800f6c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f6cc:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	input.estim_z = localPositionSub.z;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	edd3 7ac8 	vldr	s15, [r3, #800]	; 0x320
 800f6d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f6da:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	input.estim_yaw = localPositionSub.yaw;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800f6e4:	61bb      	str	r3, [r7, #24]

	setExternalInputs(&input);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f107 0218 	add.w	r2, r7, #24
 800f6ec:	4611      	mov	r1, r2
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7ff ff26 	bl	800f540 <_ZN25positionControlModelClass17setExternalInputsEPKNS_22ExtU_positionControl_TE>
	step();
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7f5 f84a 	bl	8004790 <_ZN25positionControlModelClass4stepEv>
	ExtY_positionControl_T output = getExternalOutputs();
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7ff ff30 	bl	800f564 <_ZNK25positionControlModelClass18getExternalOutputsEv>
 800f704:	4603      	mov	r3, r0
 800f706:	f107 0408 	add.w	r4, r7, #8
 800f70a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f70c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	vehicleAttitudeSpPub.timestamp = microsecond();
 800f710:	f7ff ff4a 	bl	800f5a8 <_ZL11microsecondv>
 800f714:	4603      	mov	r3, r0
 800f716:	460c      	mov	r4, r1
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	f502 7266 	add.w	r2, r2, #920	; 0x398
 800f71e:	e9c2 3400 	strd	r3, r4, [r2]
	vehicleAttitudeSpPub.throttle = output.des_Thrust;
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac


	/* position control mode */
	if(modeFlagSub.flightMode == Command::ControlPosition){
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 800f730:	2b02      	cmp	r3, #2
 800f732:	d10c      	bne.n	800f74e <_ZN2FC24ModulePositionController7oneStepEv+0x142>
		vehicleAttitudeSpPub.pitch = output.des_pitch;
 800f734:	68fa      	ldr	r2, [r7, #12]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
		vehicleAttitudeSpPub.roll = output.des_roll;
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
		vehicleAttitudeSpPub.yawRate = output.des_yaw_rate;
 800f744:	693a      	ldr	r2, [r7, #16]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
 800f74c:	e038      	b.n	800f7c0 <_ZN2FC24ModulePositionController7oneStepEv+0x1b4>
	}
	/* alt hold mode */
	else {
		vehicleAttitudeSpPub.pitch = map(controllerSub.pitch, 1000, 2000, -1.0, 1.0);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8b3 3372 	ldrh.w	r3, [r3, #882]	; 0x372
 800f754:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800f758:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f75c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f764:	4618      	mov	r0, r3
 800f766:	f001 fc75 	bl	8011054 <_ZN2FC3mapEtttff>
 800f76a:	eef0 7a40 	vmov.f32	s15, s0
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	edc3 7ae9 	vstr	s15, [r3, #932]	; 0x3a4
		vehicleAttitudeSpPub.roll = map(controllerSub.roll, 1000, 2000, -1.0, 1.0);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8b3 3370 	ldrh.w	r3, [r3, #880]	; 0x370
 800f77a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800f77e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f782:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f786:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f78a:	4618      	mov	r0, r3
 800f78c:	f001 fc62 	bl	8011054 <_ZN2FC3mapEtttff>
 800f790:	eef0 7a40 	vmov.f32	s15, s0
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	edc3 7ae8 	vstr	s15, [r3, #928]	; 0x3a0
		vehicleAttitudeSpPub.yawRate = map(controllerSub.yaw, 1000, 2000, -1.0, 1.0);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8b3 3374 	ldrh.w	r3, [r3, #884]	; 0x374
 800f7a0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800f7a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f7a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f7ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f001 fc4f 	bl	8011054 <_ZN2FC3mapEtttff>
 800f7b6:	eef0 7a40 	vmov.f32	s15, s0
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	edc3 7aea 	vstr	s15, [r3, #936]	; 0x3a8
	}
	msgBus.setVehicleAttitueSP(vehicleAttitudeSpPub);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f503 7366 	add.w	r3, r3, #920	; 0x398
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4803      	ldr	r0, [pc, #12]	; (800f7d8 <_ZN2FC24ModulePositionController7oneStepEv+0x1cc>)
 800f7ca:	f7ff fed8 	bl	800f57e <_ZN2FC6MsgBus19setVehicleAttitueSPERKNS_16VehicleAttitueSPE>
}
 800f7ce:	bf00      	nop
 800f7d0:	3774      	adds	r7, #116	; 0x74
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd90      	pop	{r4, r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	240009b8 	.word	0x240009b8

0800f7dc <_ZN2FC24ModulePositionController9setFromRCEv>:

void ModulePositionController::setFromRC(){
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	ed2d 8b02 	vpush	{d8}
 800f7e2:	b086      	sub	sp, #24
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
	static bool rollStickSet = false;
	static bool pitchStickSet = false;
	float roll;
	float pitch;

	msgBus.getController(&controllerSub);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f503 735a 	add.w	r3, r3, #872	; 0x368
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	4896      	ldr	r0, [pc, #600]	; (800fa4c <_ZN2FC24ModulePositionController9setFromRCEv+0x270>)
 800f7f2:	f7fe fef5 	bl	800e5e0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

	if( 1500 - STICK_THRESHOLD < controllerSub.throttle && controllerSub.throttle < 1500 + STICK_THRESHOLD){
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8b3 3376 	ldrh.w	r3, [r3, #886]	; 0x376
 800f7fc:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f800:	d916      	bls.n	800f830 <_ZN2FC24ModulePositionController9setFromRCEv+0x54>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8b3 3376 	ldrh.w	r3, [r3, #886]	; 0x376
 800f808:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f80c:	d210      	bcs.n	800f830 <_ZN2FC24ModulePositionController9setFromRCEv+0x54>
		// set altitude
		if(!throtleStickSet){
 800f80e:	4b90      	ldr	r3, [pc, #576]	; (800fa50 <_ZN2FC24ModulePositionController9setFromRCEv+0x274>)
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	f083 0301 	eor.w	r3, r3, #1
 800f816:	b2db      	uxtb	r3, r3
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d024      	beq.n	800f866 <_ZN2FC24ModulePositionController9setFromRCEv+0x8a>
			targetZ = localPositionSub.z;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 2320 	ldr.w	r2, [r3, #800]	; 0x320
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
			throtleStickSet = true;
 800f828:	4b89      	ldr	r3, [pc, #548]	; (800fa50 <_ZN2FC24ModulePositionController9setFromRCEv+0x274>)
 800f82a:	2201      	movs	r2, #1
 800f82c:	701a      	strb	r2, [r3, #0]
		if(!throtleStickSet){
 800f82e:	e01a      	b.n	800f866 <_ZN2FC24ModulePositionController9setFromRCEv+0x8a>
		}
	}
	else{
		targetZ = localPositionSub.z - map(controllerSub.throttle, 1000, 2000, -MAX_VELTICAL, MAX_VELTICAL);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	ed93 8ac8 	vldr	s16, [r3, #800]	; 0x320
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8b3 3376 	ldrh.w	r3, [r3, #886]	; 0x376
 800f83c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800f840:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f844:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f84c:	4618      	mov	r0, r3
 800f84e:	f001 fc01 	bl	8011054 <_ZN2FC3mapEtttff>
 800f852:	eef0 7a40 	vmov.f32	s15, s0
 800f856:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	edc3 7aee 	vstr	s15, [r3, #952]	; 0x3b8
		throtleStickSet = false;
 800f860:	4b7b      	ldr	r3, [pc, #492]	; (800fa50 <_ZN2FC24ModulePositionController9setFromRCEv+0x274>)
 800f862:	2200      	movs	r2, #0
 800f864:	701a      	strb	r2, [r3, #0]
	}

	if( 1500 - STICK_THRESHOLD < controllerSub.yaw && controllerSub.yaw < 1500 + STICK_THRESHOLD){
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8b3 3374 	ldrh.w	r3, [r3, #884]	; 0x374
 800f86c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f870:	d916      	bls.n	800f8a0 <_ZN2FC24ModulePositionController9setFromRCEv+0xc4>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8b3 3374 	ldrh.w	r3, [r3, #884]	; 0x374
 800f878:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f87c:	d210      	bcs.n	800f8a0 <_ZN2FC24ModulePositionController9setFromRCEv+0xc4>
		// set altitude
		if(!yawStickSet){
 800f87e:	4b75      	ldr	r3, [pc, #468]	; (800fa54 <_ZN2FC24ModulePositionController9setFromRCEv+0x278>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	f083 0301 	eor.w	r3, r3, #1
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d030      	beq.n	800f8ee <_ZN2FC24ModulePositionController9setFromRCEv+0x112>
			targetYaw = localPositionSub.yaw;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
			yawStickSet = true;
 800f898:	4b6e      	ldr	r3, [pc, #440]	; (800fa54 <_ZN2FC24ModulePositionController9setFromRCEv+0x278>)
 800f89a:	2201      	movs	r2, #1
 800f89c:	701a      	strb	r2, [r3, #0]
		if(!yawStickSet){
 800f89e:	e026      	b.n	800f8ee <_ZN2FC24ModulePositionController9setFromRCEv+0x112>
		}
	}
	else{
		targetYaw = localPositionSub.yaw + map(controllerSub.yaw, 1000, 2000, -MAX_YAW, MAX_YAW);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	ed93 8acf 	vldr	s16, [r3, #828]	; 0x33c
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8b3 3374 	ldrh.w	r3, [r3, #884]	; 0x374
 800f8ac:	eddf 0a6a 	vldr	s1, [pc, #424]	; 800fa58 <_ZN2FC24ModulePositionController9setFromRCEv+0x27c>
 800f8b0:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800fa5c <_ZN2FC24ModulePositionController9setFromRCEv+0x280>
 800f8b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f8b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f001 fbc9 	bl	8011054 <_ZN2FC3mapEtttff>
 800f8c2:	eef0 7a40 	vmov.f32	s15, s0
 800f8c6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	edc3 7aef 	vstr	s15, [r3, #956]	; 0x3bc
		targetYaw = radianThreshold(targetYaw);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	edd3 7aef 	vldr	s15, [r3, #956]	; 0x3bc
 800f8d6:	eeb0 0a67 	vmov.f32	s0, s15
 800f8da:	f001 fbed 	bl	80110b8 <_ZN2FC15radianThresholdEf>
 800f8de:	eef0 7a40 	vmov.f32	s15, s0
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	edc3 7aef 	vstr	s15, [r3, #956]	; 0x3bc
		yawStickSet = false;
 800f8e8:	4b5a      	ldr	r3, [pc, #360]	; (800fa54 <_ZN2FC24ModulePositionController9setFromRCEv+0x278>)
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	701a      	strb	r2, [r3, #0]
	}

	if(1500 - STICK_THRESHOLD < controllerSub.roll && controllerSub.roll < 1500 + STICK_THRESHOLD){
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8b3 3370 	ldrh.w	r3, [r3, #880]	; 0x370
 800f8f4:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f8f8:	d913      	bls.n	800f922 <_ZN2FC24ModulePositionController9setFromRCEv+0x146>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8b3 3370 	ldrh.w	r3, [r3, #880]	; 0x370
 800f900:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f904:	d20d      	bcs.n	800f922 <_ZN2FC24ModulePositionController9setFromRCEv+0x146>
		if(!rollStickSet){
 800f906:	4b56      	ldr	r3, [pc, #344]	; (800fa60 <_ZN2FC24ModulePositionController9setFromRCEv+0x284>)
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	f083 0301 	eor.w	r3, r3, #1
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	2b00      	cmp	r3, #0
 800f912:	d019      	beq.n	800f948 <_ZN2FC24ModulePositionController9setFromRCEv+0x16c>
			roll = 0;
 800f914:	f04f 0300 	mov.w	r3, #0
 800f918:	617b      	str	r3, [r7, #20]
			rollStickSet = true;
 800f91a:	4b51      	ldr	r3, [pc, #324]	; (800fa60 <_ZN2FC24ModulePositionController9setFromRCEv+0x284>)
 800f91c:	2201      	movs	r2, #1
 800f91e:	701a      	strb	r2, [r3, #0]
		if(!rollStickSet){
 800f920:	e012      	b.n	800f948 <_ZN2FC24ModulePositionController9setFromRCEv+0x16c>
		}
	}
	else{
		roll = map(controllerSub.roll, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* roll */
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8b3 3370 	ldrh.w	r3, [r3, #880]	; 0x370
 800f928:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800f92c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f930:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f938:	4618      	mov	r0, r3
 800f93a:	f001 fb8b 	bl	8011054 <_ZN2FC3mapEtttff>
 800f93e:	ed87 0a05 	vstr	s0, [r7, #20]
		rollStickSet = false;
 800f942:	4b47      	ldr	r3, [pc, #284]	; (800fa60 <_ZN2FC24ModulePositionController9setFromRCEv+0x284>)
 800f944:	2200      	movs	r2, #0
 800f946:	701a      	strb	r2, [r3, #0]
	}
	if(1500 - STICK_THRESHOLD < controllerSub.pitch && controllerSub.pitch < 1500 + STICK_THRESHOLD){
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8b3 3372 	ldrh.w	r3, [r3, #882]	; 0x372
 800f94e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f952:	d913      	bls.n	800f97c <_ZN2FC24ModulePositionController9setFromRCEv+0x1a0>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8b3 3372 	ldrh.w	r3, [r3, #882]	; 0x372
 800f95a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f95e:	d20d      	bcs.n	800f97c <_ZN2FC24ModulePositionController9setFromRCEv+0x1a0>
		if(!pitchStickSet){
 800f960:	4b40      	ldr	r3, [pc, #256]	; (800fa64 <_ZN2FC24ModulePositionController9setFromRCEv+0x288>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	f083 0301 	eor.w	r3, r3, #1
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d019      	beq.n	800f9a2 <_ZN2FC24ModulePositionController9setFromRCEv+0x1c6>
			pitch = 0;
 800f96e:	f04f 0300 	mov.w	r3, #0
 800f972:	613b      	str	r3, [r7, #16]
			pitchStickSet = true;
 800f974:	4b3b      	ldr	r3, [pc, #236]	; (800fa64 <_ZN2FC24ModulePositionController9setFromRCEv+0x288>)
 800f976:	2201      	movs	r2, #1
 800f978:	701a      	strb	r2, [r3, #0]
		if(!pitchStickSet){
 800f97a:	e012      	b.n	800f9a2 <_ZN2FC24ModulePositionController9setFromRCEv+0x1c6>
		}
	}
	else{
		pitch = map(controllerSub.pitch, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* pitch */
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8b3 3372 	ldrh.w	r3, [r3, #882]	; 0x372
 800f982:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800f986:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f98a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800f98e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f992:	4618      	mov	r0, r3
 800f994:	f001 fb5e 	bl	8011054 <_ZN2FC3mapEtttff>
 800f998:	ed87 0a04 	vstr	s0, [r7, #16]
		pitchStickSet = false;
 800f99c:	4b31      	ldr	r3, [pc, #196]	; (800fa64 <_ZN2FC24ModulePositionController9setFromRCEv+0x288>)
 800f99e:	2200      	movs	r2, #0
 800f9a0:	701a      	strb	r2, [r3, #0]
	}
//	float roll = map(controllerSub.roll, 1000, 2000, -MAX_HORISION, MAX_HORISION);		/* roll */
//	float pitch = map(controllerSub.pitch, 1000, 2000, -MAX_HORISION, MAX_HORISION);	/* pitch */
//	targetYaw = map(controllerSub.yaw, 1000, 2000, -MAX_YAW, MAX_YAW);

	if( !rollStickSet || !pitchStickSet){
 800f9a2:	4b2f      	ldr	r3, [pc, #188]	; (800fa60 <_ZN2FC24ModulePositionController9setFromRCEv+0x284>)
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	f083 0301 	eor.w	r3, r3, #1
 800f9aa:	b2db      	uxtb	r3, r3
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d106      	bne.n	800f9be <_ZN2FC24ModulePositionController9setFromRCEv+0x1e2>
 800f9b0:	4b2c      	ldr	r3, [pc, #176]	; (800fa64 <_ZN2FC24ModulePositionController9setFromRCEv+0x288>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	f083 0301 	eor.w	r3, r3, #1
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d03f      	beq.n	800fa3e <_ZN2FC24ModulePositionController9setFromRCEv+0x262>
		float cosYaw = cos(localPositionSub.yaw);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	edd3 7acf 	vldr	s15, [r3, #828]	; 0x33c
 800f9c4:	eeb0 0a67 	vmov.f32	s0, s15
 800f9c8:	f7ff fd9a 	bl	800f500 <_ZSt3cosf>
 800f9cc:	ed87 0a03 	vstr	s0, [r7, #12]
		float sinYaw = sin(localPositionSub.yaw);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	edd3 7acf 	vldr	s15, [r3, #828]	; 0x33c
 800f9d6:	eeb0 0a67 	vmov.f32	s0, s15
 800f9da:	f7ff fda1 	bl	800f520 <_ZSt3sinf>
 800f9de:	ed87 0a02 	vstr	s0, [r7, #8]
		targetX = localPositionSub.x + pitch*cosYaw + -roll*sinYaw;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	ed93 7ac6 	vldr	s14, [r3, #792]	; 0x318
 800f9e8:	edd7 6a04 	vldr	s13, [r7, #16]
 800f9ec:	edd7 7a03 	vldr	s15, [r7, #12]
 800f9f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f9f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f9f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800f9fc:	eef1 6a67 	vneg.f32	s13, s15
 800fa00:	edd7 7a02 	vldr	s15, [r7, #8]
 800fa04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	edc3 7aec 	vstr	s15, [r3, #944]	; 0x3b0
		targetY = localPositionSub.y + pitch*sinYaw + roll*cosYaw;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	ed93 7ac7 	vldr	s14, [r3, #796]	; 0x31c
 800fa18:	edd7 6a04 	vldr	s13, [r7, #16]
 800fa1c:	edd7 7a02 	vldr	s15, [r7, #8]
 800fa20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa24:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fa28:	edd7 6a05 	vldr	s13, [r7, #20]
 800fa2c:	edd7 7a03 	vldr	s15, [r7, #12]
 800fa30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	edc3 7aed 	vstr	s15, [r3, #948]	; 0x3b4
	}
//	targetZ += localPositionSub.z;
//	targetYaw += localPositionSub.yaw;
}
 800fa3e:	bf00      	nop
 800fa40:	3718      	adds	r7, #24
 800fa42:	46bd      	mov	sp, r7
 800fa44:	ecbd 8b02 	vpop	{d8}
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	240009b8 	.word	0x240009b8
 800fa50:	240009b0 	.word	0x240009b0
 800fa54:	240009b1 	.word	0x240009b1
 800fa58:	3fc90fd8 	.word	0x3fc90fd8
 800fa5c:	bfc90fd8 	.word	0xbfc90fd8
 800fa60:	240009b2 	.word	0x240009b2
 800fa64:	240009b3 	.word	0x240009b3

0800fa68 <_ZN2FC24ModulePositionController21setFromAutoControllerEv>:

void ModulePositionController::setFromAutoController(){
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
	//TODO add struct VehiclePositionSP, convert to target
}
 800fa70:	bf00      	nop
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr

0800fa7c <_ZN2FC6MsgBusC1Ev>:
	MsgBus()
 800fa7c:	b590      	push	{r4, r7, lr}
 800fa7e:	b083      	sub	sp, #12
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
		, health{0}
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	461a      	mov	r2, r3
 800fa88:	2300      	movs	r3, #0
 800fa8a:	6013      	str	r3, [r2, #0]
 800fa8c:	6053      	str	r3, [r2, #4]
 800fa8e:	6093      	str	r3, [r2, #8]
 800fa90:	60d3      	str	r3, [r2, #12]
 800fa92:	6113      	str	r3, [r2, #16]
 800fa94:	6153      	str	r3, [r2, #20]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	3318      	adds	r3, #24
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	605a      	str	r2, [r3, #4]
 800faa0:	609a      	str	r2, [r3, #8]
 800faa2:	60da      	str	r2, [r3, #12]
 800faa4:	611a      	str	r2, [r3, #16]
 800faa6:	615a      	str	r2, [r3, #20]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	3330      	adds	r3, #48	; 0x30
 800faac:	2200      	movs	r2, #0
 800faae:	601a      	str	r2, [r3, #0]
 800fab0:	605a      	str	r2, [r3, #4]
 800fab2:	609a      	str	r2, [r3, #8]
 800fab4:	60da      	str	r2, [r3, #12]
 800fab6:	611a      	str	r2, [r3, #16]
 800fab8:	615a      	str	r2, [r3, #20]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	3348      	adds	r3, #72	; 0x48
 800fabe:	2248      	movs	r2, #72	; 0x48
 800fac0:	2100      	movs	r1, #0
 800fac2:	4618      	mov	r0, r3
 800fac4:	f01e f8bf 	bl	802dc46 <memset>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	3390      	adds	r3, #144	; 0x90
 800facc:	2200      	movs	r2, #0
 800face:	601a      	str	r2, [r3, #0]
 800fad0:	605a      	str	r2, [r3, #4]
 800fad2:	609a      	str	r2, [r3, #8]
 800fad4:	60da      	str	r2, [r3, #12]
 800fad6:	611a      	str	r2, [r3, #16]
 800fad8:	615a      	str	r2, [r3, #20]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	33b8      	adds	r3, #184	; 0xb8
 800fade:	2200      	movs	r2, #0
 800fae0:	601a      	str	r2, [r3, #0]
 800fae2:	605a      	str	r2, [r3, #4]
 800fae4:	609a      	str	r2, [r3, #8]
 800fae6:	60da      	str	r2, [r3, #12]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800faee:	2228      	movs	r2, #40	; 0x28
 800faf0:	2100      	movs	r1, #0
 800faf2:	4618      	mov	r0, r3
 800faf4:	f01e f8a7 	bl	802dc46 <memset>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800fafe:	2200      	movs	r2, #0
 800fb00:	601a      	str	r2, [r3, #0]
 800fb02:	605a      	str	r2, [r3, #4]
 800fb04:	609a      	str	r2, [r3, #8]
 800fb06:	60da      	str	r2, [r3, #12]
 800fb08:	611a      	str	r2, [r3, #16]
 800fb0a:	615a      	str	r2, [r3, #20]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800fb12:	f04f 0300 	mov.w	r3, #0
 800fb16:	f04f 0400 	mov.w	r4, #0
 800fb1a:	e9c2 3400 	strd	r3, r4, [r2]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2209      	movs	r2, #9
 800fb22:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800fb34:	2220      	movs	r2, #32
 800fb36:	2100      	movs	r1, #0
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f01e f884 	bl	802dc46 <memset>
	{}
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4618      	mov	r0, r3
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd90      	pop	{r4, r7, pc}

0800fb48 <_Z41__static_initialization_and_destruction_0ii>:

namespace FC{

MsgBus msgBus;

}
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d107      	bne.n	800fb68 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d102      	bne.n	800fb68 <_Z41__static_initialization_and_destruction_0ii+0x20>
MsgBus msgBus;
 800fb62:	4803      	ldr	r0, [pc, #12]	; (800fb70 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800fb64:	f7ff ff8a 	bl	800fa7c <_ZN2FC6MsgBusC1Ev>
}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	240009b8 	.word	0x240009b8

0800fb74 <_GLOBAL__sub_I__ZN2FC6msgBusE>:
 800fb74:	b580      	push	{r7, lr}
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fb7c:	2001      	movs	r0, #1
 800fb7e:	f7ff ffe3 	bl	800fb48 <_Z41__static_initialization_and_destruction_0ii>
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 800fb84:	b490      	push	{r4, r7}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	683a      	ldr	r2, [r7, #0]
 800fb92:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800fb96:	4613      	mov	r3, r2
 800fb98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fb9e:	bf00      	nop
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bc90      	pop	{r4, r7}
 800fba6:	4770      	bx	lr

0800fba8 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800fba8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800fbac:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800fbae:	4b0e      	ldr	r3, [pc, #56]	; (800fbe8 <_ZL11microsecondv+0x40>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	f04f 0200 	mov.w	r2, #0
 800fbb8:	f04f 0b00 	mov.w	fp, #0
 800fbbc:	f04f 0c00 	mov.w	ip, #0
 800fbc0:	468c      	mov	ip, r1
 800fbc2:	f04f 0b00 	mov.w	fp, #0
 800fbc6:	4a09      	ldr	r2, [pc, #36]	; (800fbec <_ZL11microsecondv+0x44>)
 800fbc8:	6812      	ldr	r2, [r2, #0]
 800fbca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fbcc:	4611      	mov	r1, r2
 800fbce:	f04f 0200 	mov.w	r2, #0
 800fbd2:	ea4b 0301 	orr.w	r3, fp, r1
 800fbd6:	ea4c 0402 	orr.w	r4, ip, r2
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	4621      	mov	r1, r4
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800fbe4:	4770      	bx	lr
 800fbe6:	bf00      	nop
 800fbe8:	24000e18 	.word	0x24000e18
 800fbec:	2400c780 	.word	0x2400c780

0800fbf0 <_ZL11millisecondv>:

static __inline uint32_t millisecond(){
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800fbf4:	f005 f87e 	bl	8014cf4 <HAL_GetTick>
 800fbf8:	4603      	mov	r3, r0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <_ZN2FC2RCC1Ev>:

#define ARMING_THRESHOLD 1500

class RC : public Freq<RC>{
public:
	RC() : start(false) {}
 800fbfe:	b480      	push	{r7}
 800fc00:	b083      	sub	sp, #12
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	761a      	strb	r2, [r3, #24]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4618      	mov	r0, r3
 800fc10:	370c      	adds	r7, #12
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr
	...

0800fc1c <_ZN2FC2RC5setRCEtttttt>:
RC rc;

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode)
{
 800fc1c:	b590      	push	{r4, r7, lr}
 800fc1e:	b08b      	sub	sp, #44	; 0x2c
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	4608      	mov	r0, r1
 800fc26:	4611      	mov	r1, r2
 800fc28:	461a      	mov	r2, r3
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	817b      	strh	r3, [r7, #10]
 800fc2e:	460b      	mov	r3, r1
 800fc30:	813b      	strh	r3, [r7, #8]
 800fc32:	4613      	mov	r3, r2
 800fc34:	80fb      	strh	r3, [r7, #6]
	if(start == false && throttle > MOTOR_CALIBRATION_THROTLE){
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	7e1b      	ldrb	r3, [r3, #24]
 800fc3a:	f083 0301 	eor.w	r3, r3, #1
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d007      	beq.n	800fc54 <_ZN2FC2RC5setRCEtttttt+0x38>
 800fc44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fc46:	f240 729e 	movw	r2, #1950	; 0x79e
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d902      	bls.n	800fc54 <_ZN2FC2RC5setRCEtttttt+0x38>
		ModuleCommander::sendCommand(Command::MotorCalibration);
 800fc4e:	200a      	movs	r0, #10
 800fc50:	f7ff f842 	bl	800ecd8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
	}
	start = true;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2201      	movs	r2, #1
 800fc58:	761a      	strb	r2, [r3, #24]

	/* cotnroller publish */
	this->controllerPub.timestamp = microsecond();
 800fc5a:	f7ff ffa5 	bl	800fba8 <_ZL11microsecondv>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	460c      	mov	r4, r1
 800fc62:	68fa      	ldr	r2, [r7, #12]
 800fc64:	e9c2 3400 	strd	r3, r4, [r2]
	this->controllerPub.roll = roll;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	897a      	ldrh	r2, [r7, #10]
 800fc6c:	811a      	strh	r2, [r3, #8]
	this->controllerPub.pitch = pitch;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	893a      	ldrh	r2, [r7, #8]
 800fc72:	815a      	strh	r2, [r3, #10]
	this->controllerPub.yaw = yaw;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	88fa      	ldrh	r2, [r7, #6]
 800fc78:	819a      	strh	r2, [r3, #12]
	this->controllerPub.throttle = throttle;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fc7e:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controllerPub);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	4619      	mov	r1, r3
 800fc84:	484e      	ldr	r0, [pc, #312]	; (800fdc0 <_ZN2FC2RC5setRCEtttttt+0x1a4>)
 800fc86:	f7ff ff7d 	bl	800fb84 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>

	/* arming */
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);							/* current arm mode */
 800fc8a:	f107 0310 	add.w	r3, r7, #16
 800fc8e:	4619      	mov	r1, r3
 800fc90:	484b      	ldr	r0, [pc, #300]	; (800fdc0 <_ZN2FC2RC5setRCEtttttt+0x1a4>)
 800fc92:	f7fe fd11 	bl	800e6b8 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	Command rcvArmFlag = Command::DisArm;						/* request arm mode */
 800fc96:	2309      	movs	r3, #9
 800fc98:	627b      	str	r3, [r7, #36]	; 0x24
	if( armming > ARMING_THRESHOLD ) rcvArmFlag = Command::Arm;
 800fc9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc9c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d901      	bls.n	800fca8 <_ZN2FC2RC5setRCEtttttt+0x8c>
 800fca4:	2308      	movs	r3, #8
 800fca6:	627b      	str	r3, [r7, #36]	; 0x24
	if(modeFlag.armMode != rcvArmFlag && millisecond()-lastArmReq > 500){
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d00a      	beq.n	800fcc6 <_ZN2FC2RC5setRCEtttttt+0xaa>
 800fcb0:	f7ff ff9e 	bl	800fbf0 <_ZL11millisecondv>
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	691b      	ldr	r3, [r3, #16]
 800fcba:	1ad3      	subs	r3, r2, r3
 800fcbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800fcc0:	d901      	bls.n	800fcc6 <_ZN2FC2RC5setRCEtttttt+0xaa>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	e000      	b.n	800fcc8 <_ZN2FC2RC5setRCEtttttt+0xac>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d007      	beq.n	800fcdc <_ZN2FC2RC5setRCEtttttt+0xc0>
		ModuleCommander::sendCommand(rcvArmFlag); /* send command */
 800fccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcce:	f7ff f803 	bl	800ecd8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
		lastArmReq = millisecond();
 800fcd2:	f7ff ff8d 	bl	800fbf0 <_ZL11millisecondv>
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	611a      	str	r2, [r3, #16]
	}

	if(millisecond() - lastModeReq > 500){
 800fcdc:	f7ff ff88 	bl	800fbf0 <_ZL11millisecondv>
 800fce0:	4602      	mov	r2, r0
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	695b      	ldr	r3, [r3, #20]
 800fce6:	1ad3      	subs	r3, r2, r3
 800fce8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800fcec:	bf8c      	ite	hi
 800fcee:	2301      	movhi	r3, #1
 800fcf0:	2300      	movls	r3, #0
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d058      	beq.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
		if(mode > FLIGHT_ATTITUDE_MODE_THRSHOLD){
 800fcf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fcfc:	f240 726c 	movw	r2, #1900	; 0x76c
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d90b      	bls.n	800fd1c <_ZN2FC2RC5setRCEtttttt+0x100>
			if(modeFlag.flightMode != Command::ControlAttitude){
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d04f      	beq.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlAttitude); /* send command */
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	f7fe ffe4 	bl	800ecd8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800fd10:	f7ff ff6e 	bl	800fbf0 <_ZL11millisecondv>
 800fd14:	4602      	mov	r2, r0
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	615a      	str	r2, [r3, #20]
 800fd1a:	e046      	b.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_POSITION_MODE_THRSHOLD){
 800fd1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fd20:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d90b      	bls.n	800fd40 <_ZN2FC2RC5setRCEtttttt+0x124>
			if(modeFlag.flightMode != Command::ControlPosition){
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	2b02      	cmp	r3, #2
 800fd2c:	d03d      	beq.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 800fd2e:	2002      	movs	r0, #2
 800fd30:	f7fe ffd2 	bl	800ecd8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800fd34:	f7ff ff5c 	bl	800fbf0 <_ZL11millisecondv>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	615a      	str	r2, [r3, #20]
 800fd3e:	e034      	b.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_AUTO_MODE_THRSHOLD){ /* FLIGHT_AUTO_MODE_THRSHOLD */
 800fd40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fd44:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d90b      	bls.n	800fd64 <_ZN2FC2RC5setRCEtttttt+0x148>
			if(modeFlag.flightMode != Command::AutoWaypoint){
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d02b      	beq.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlPosition); /* send command */
 800fd52:	2002      	movs	r0, #2
 800fd54:	f7fe ffc0 	bl	800ecd8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800fd58:	f7ff ff4a 	bl	800fbf0 <_ZL11millisecondv>
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	615a      	str	r2, [r3, #20]
 800fd62:	e022      	b.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_RTL_MODE_THRSHOLD){
 800fd64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fd68:	f240 5246 	movw	r2, #1350	; 0x546
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d90b      	bls.n	800fd88 <_ZN2FC2RC5setRCEtttttt+0x16c>
			if(modeFlag.flightMode != Command::AutoRTL){
 800fd70:	69fb      	ldr	r3, [r7, #28]
 800fd72:	2b04      	cmp	r3, #4
 800fd74:	d019      	beq.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::AutoRTL); /* send command */
 800fd76:	2004      	movs	r0, #4
 800fd78:	f7fe ffae 	bl	800ecd8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800fd7c:	f7ff ff38 	bl	800fbf0 <_ZL11millisecondv>
 800fd80:	4602      	mov	r2, r0
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	615a      	str	r2, [r3, #20]
 800fd86:	e010      	b.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
			}
		}
		else if(mode > FLIGHT_ALT_MODE_THRSHOLD){
 800fd88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fd8c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d90a      	bls.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
			if(modeFlag.flightMode != Command::ControlALT){
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	2b01      	cmp	r3, #1
 800fd98:	d007      	beq.n	800fdaa <_ZN2FC2RC5setRCEtttttt+0x18e>
				ModuleCommander::sendCommand(Command::ControlALT); /* send command */
 800fd9a:	2001      	movs	r0, #1
 800fd9c:	f7fe ff9c 	bl	800ecd8 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
				lastModeReq = millisecond();
 800fda0:	f7ff ff26 	bl	800fbf0 <_ZL11millisecondv>
 800fda4:	4602      	mov	r2, r0
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	615a      	str	r2, [r3, #20]
			}
		}
	}

	/* Freq class variable */
	freqCnt++;
 800fdaa:	4b06      	ldr	r3, [pc, #24]	; (800fdc4 <_ZN2FC2RC5setRCEtttttt+0x1a8>)
 800fdac:	881b      	ldrh	r3, [r3, #0]
 800fdae:	3301      	adds	r3, #1
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	4b04      	ldr	r3, [pc, #16]	; (800fdc4 <_ZN2FC2RC5setRCEtttttt+0x1a8>)
 800fdb4:	801a      	strh	r2, [r3, #0]
}
 800fdb6:	bf00      	nop
 800fdb8:	372c      	adds	r7, #44	; 0x2c
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd90      	pop	{r4, r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	240009b8 	.word	0x240009b8
 800fdc4:	24000e40 	.word	0x24000e40

0800fdc8 <_Z41__static_initialization_and_destruction_0ii>:
}
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d107      	bne.n	800fde8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d102      	bne.n	800fde8 <_Z41__static_initialization_and_destruction_0ii+0x20>
RC rc;
 800fde2:	4803      	ldr	r0, [pc, #12]	; (800fdf0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800fde4:	f7ff ff0b 	bl	800fbfe <_ZN2FC2RCC1Ev>
}
 800fde8:	bf00      	nop
 800fdea:	3708      	adds	r7, #8
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}
 800fdf0:	24000e20 	.word	0x24000e20

0800fdf4 <_GLOBAL__sub_I__ZN2FC2rcE>:
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fdfc:	2001      	movs	r0, #1
 800fdfe:	f7ff ffe3 	bl	800fdc8 <_Z41__static_initialization_and_destruction_0ii>
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 800fe04:	b4b0      	push	{r4, r5, r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	4614      	mov	r4, r2
 800fe14:	461d      	mov	r5, r3
 800fe16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fe1e:	e884 0003 	stmia.w	r4, {r0, r1}
 800fe22:	bf00      	nop
 800fe24:	370c      	adds	r7, #12
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bcb0      	pop	{r4, r5, r7}
 800fe2a:	4770      	bx	lr

0800fe2c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 800fe2c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800fe30:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800fe32:	4b0e      	ldr	r3, [pc, #56]	; (800fe6c <_ZL11microsecondv+0x40>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4619      	mov	r1, r3
 800fe38:	f04f 0200 	mov.w	r2, #0
 800fe3c:	f04f 0b00 	mov.w	fp, #0
 800fe40:	f04f 0c00 	mov.w	ip, #0
 800fe44:	468c      	mov	ip, r1
 800fe46:	f04f 0b00 	mov.w	fp, #0
 800fe4a:	4a09      	ldr	r2, [pc, #36]	; (800fe70 <_ZL11microsecondv+0x44>)
 800fe4c:	6812      	ldr	r2, [r2, #0]
 800fe4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fe50:	4611      	mov	r1, r2
 800fe52:	f04f 0200 	mov.w	r2, #0
 800fe56:	ea4b 0301 	orr.w	r3, fp, r1
 800fe5a:	ea4c 0402 	orr.w	r4, ip, r2
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	4621      	mov	r1, r4
 800fe62:	46bd      	mov	sp, r7
 800fe64:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800fe68:	4770      	bx	lr
 800fe6a:	bf00      	nop
 800fe6c:	24000e44 	.word	0x24000e44
 800fe70:	2400c780 	.word	0x2400c780

0800fe74 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>:

    /*
     *  signal to AHRS main function
     *  this function is called by SensorAccel, SensorGyro (peripheral interface)
     */
    static inline void setSignal(enum AhrsSignal signal){
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	71fb      	strb	r3, [r7, #7]
    	switch(signal){
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d002      	beq.n	800fe8a <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x16>
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	d008      	beq.n	800fe9a <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x26>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
        	break;
    	case AHRS_fromGyro:
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
    	}
    }
 800fe88:	e00d      	b.n	800fea6 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
 800fe8a:	4b09      	ldr	r3, [pc, #36]	; (800feb0 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2101      	movs	r1, #1
 800fe90:	4618      	mov	r0, r3
 800fe92:	f016 fed7 	bl	8026c44 <osThreadFlagsSet>
        	break;
 800fe96:	bf00      	nop
    }
 800fe98:	e005      	b.n	800fea6 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
 800fe9a:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2102      	movs	r1, #2
 800fea0:	4618      	mov	r0, r3
 800fea2:	f016 fecf 	bl	8026c44 <osThreadFlagsSet>
    }
 800fea6:	bf00      	nop
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	24009914 	.word	0x24009914

0800feb4 <_ZN2FC11SensorAccelC1Ev>:

namespace FC{

SensorAccel sensorAccel;

SensorAccel::SensorAccel()
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
: bodyAccel{0,}, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	461a      	mov	r2, r3
 800fec0:	2300      	movs	r3, #0
 800fec2:	6013      	str	r3, [r2, #0]
 800fec4:	6053      	str	r3, [r2, #4]
 800fec6:	6093      	str	r3, [r2, #8]
 800fec8:	60d3      	str	r3, [r2, #12]
 800feca:	6113      	str	r3, [r2, #16]
 800fecc:	6153      	str	r3, [r2, #20]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f04f 0200 	mov.w	r2, #0
 800fed4:	619a      	str	r2, [r3, #24]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f04f 0200 	mov.w	r2, #0
 800fedc:	61da      	str	r2, [r3, #28]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f04f 0200 	mov.w	r2, #0
 800fee4:	621a      	str	r2, [r3, #32]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f04f 0200 	mov.w	r2, #0
 800feec:	625a      	str	r2, [r3, #36]	; 0x24
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f04f 0200 	mov.w	r2, #0
 800fef4:	629a      	str	r2, [r3, #40]	; 0x28
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f04f 0200 	mov.w	r2, #0
 800fefc:	62da      	str	r2, [r3, #44]	; 0x2c
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr

0800ff1c <_ZN2FC11SensorAccel7setBiasEv>:

void SensorAccel::setBias(){
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f04f 0200 	mov.w	r2, #0
 800ff3a:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f04f 0200 	mov.w	r2, #0
 800ff42:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f04f 0200 	mov.w	r2, #0
 800ff4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ff4c:	bf00      	nop
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <_ZN2FC11SensorAccel8setAccelEfff>:

void SensorAccel::setAccel(float x, float y, float z){
 800ff58:	b590      	push	{r4, r7, lr}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	ed87 0a02 	vstr	s0, [r7, #8]
 800ff64:	edc7 0a01 	vstr	s1, [r7, #4]
 800ff68:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 800ff6c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ff70:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ff74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff78:	d10d      	bne.n	800ff96 <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 800ff7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ff7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ff82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff86:	d106      	bne.n	800ff96 <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 800ff88:	edd7 7a00 	vldr	s15, [r7]
 800ff8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ff90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff94:	d041      	beq.n	801001a <_ZN2FC11SensorAccel8setAccelEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d008      	beq.n	800ffb2 <_ZN2FC11SensorAccel8setAccelEfff+0x5a>
 800ffa0:	ed97 1a00 	vldr	s2, [r7]
 800ffa4:	edd7 0a01 	vldr	s1, [r7, #4]
 800ffa8:	ed97 0a02 	vldr	s0, [r7, #8]
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f000 f83f 	bl	8010030 <_ZN2FC11SensorAccel10calAverageEfff>

	this->bodyAccel.timestamp = microsecond();
 800ffb2:	f7ff ff3b 	bl	800fe2c <_ZL11microsecondv>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	460c      	mov	r4, r1
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x - biasX;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	edd3 7a06 	vldr	s15, [r3, #24]
 800ffc6:	ed97 7a02 	vldr	s14, [r7, #8]
 800ffca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAccel.xyz[1] = y - biasY;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	edd3 7a07 	vldr	s15, [r3, #28]
 800ffda:	ed97 7a01 	vldr	s14, [r7, #4]
 800ffde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAccel.xyz[2] = z - biasZ;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	edd3 7a08 	vldr	s15, [r3, #32]
 800ffee:	ed97 7a00 	vldr	s14, [r7]
 800fff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	4619      	mov	r1, r3
 8010000:	4808      	ldr	r0, [pc, #32]	; (8010024 <_ZN2FC11SensorAccel8setAccelEfff+0xcc>)
 8010002:	f7ff feff 	bl	800fe04 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
	ModuleAHRS::setSignal(AHRS_fromAccel);
 8010006:	2001      	movs	r0, #1
 8010008:	f7ff ff34 	bl	800fe74 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	/* Freq class variable */
	freqCnt++;
 801000c:	4b06      	ldr	r3, [pc, #24]	; (8010028 <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 801000e:	881b      	ldrh	r3, [r3, #0]
 8010010:	3301      	adds	r3, #1
 8010012:	b29a      	uxth	r2, r3
 8010014:	4b04      	ldr	r3, [pc, #16]	; (8010028 <_ZN2FC11SensorAccel8setAccelEfff+0xd0>)
 8010016:	801a      	strh	r2, [r3, #0]
 8010018:	e000      	b.n	801001c <_ZN2FC11SensorAccel8setAccelEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 801001a:	bf00      	nop
}
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	bd90      	pop	{r4, r7, pc}
 8010022:	bf00      	nop
 8010024:	240009b8 	.word	0x240009b8
 8010028:	24000e80 	.word	0x24000e80
 801002c:	00000000 	.word	0x00000000

08010030 <_ZN2FC11SensorAccel10calAverageEfff>:

void SensorAccel::calAverage(float x, float y, float z){
 8010030:	b480      	push	{r7}
 8010032:	b087      	sub	sp, #28
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	ed87 0a02 	vstr	s0, [r7, #8]
 801003c:	edc7 0a01 	vstr	s1, [r7, #4]
 8010040:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801004a:	3b01      	subs	r3, #1
 801004c:	68fa      	ldr	r2, [r7, #12]
 801004e:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8010052:	fb93 f3f2 	sdiv	r3, r3, r2
 8010056:	ee07 3a90 	vmov	s15, r3
 801005a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801005e:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010068:	edd7 7a05 	vldr	s15, [r7, #20]
 801006c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010074:	edd7 7a05 	vldr	s15, [r7, #20]
 8010078:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801007c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8010094:	edd7 7a05 	vldr	s15, [r7, #20]
 8010098:	ee27 7a27 	vmul.f32	s14, s14, s15
 801009c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80100a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80100a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80100ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80100b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80100c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80100c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80100c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80100d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80100d4:	edd7 7a00 	vldr	s15, [r7]
 80100d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80100dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80100ec:	3301      	adds	r3, #1
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80100fc:	2b14      	cmp	r3, #20
 80100fe:	d919      	bls.n	8010134 <_ZN2FC11SensorAccel10calAverageEfff+0x104>
		calBiasFlag = false;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2200      	movs	r2, #0
 8010104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	619a      	str	r2, [r3, #24]
		biasY = averY;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	61da      	str	r2, [r3, #28]
		biasZ = averZ - FC_GRAVITY_ACCEERATION;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801011e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010122:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010140 <_ZN2FC11SensorAccel10calAverageEfff+0x110>
 8010126:	ee37 7b46 	vsub.f64	d7, d7, d6
 801012a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	edc3 7a08 	vstr	s15, [r3, #32]
	}
}
 8010134:	bf00      	nop
 8010136:	371c      	adds	r7, #28
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr
 8010140:	3a92a305 	.word	0x3a92a305
 8010144:	40239d01 	.word	0x40239d01

08010148 <_Z41__static_initialization_and_destruction_0ii>:

}
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2b01      	cmp	r3, #1
 8010156:	d107      	bne.n	8010168 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801015e:	4293      	cmp	r3, r2
 8010160:	d102      	bne.n	8010168 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorAccel sensorAccel;
 8010162:	4803      	ldr	r0, [pc, #12]	; (8010170 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8010164:	f7ff fea6 	bl	800feb4 <_ZN2FC11SensorAccelC1Ev>
}
 8010168:	bf00      	nop
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	24000e48 	.word	0x24000e48

08010174 <_GLOBAL__sub_I__ZN2FC11sensorAccelE>:
 8010174:	b580      	push	{r7, lr}
 8010176:	af00      	add	r7, sp, #0
 8010178:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801017c:	2001      	movs	r0, #1
 801017e:	f7ff ffe3 	bl	8010148 <_Z41__static_initialization_and_destruction_0ii>
 8010182:	bd80      	pop	{r7, pc}

08010184 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 8010184:	b4b0      	push	{r4, r5, r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	6039      	str	r1, [r7, #0]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	683a      	ldr	r2, [r7, #0]
 8010192:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8010196:	4615      	mov	r5, r2
 8010198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801019c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80101a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80101a4:	bf00      	nop
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bcb0      	pop	{r4, r5, r7}
 80101ac:	4770      	bx	lr
	...

080101b0 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 80101b0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80101b4:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80101b6:	4b0e      	ldr	r3, [pc, #56]	; (80101f0 <_ZL11microsecondv+0x40>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4619      	mov	r1, r3
 80101bc:	f04f 0200 	mov.w	r2, #0
 80101c0:	f04f 0b00 	mov.w	fp, #0
 80101c4:	f04f 0c00 	mov.w	ip, #0
 80101c8:	468c      	mov	ip, r1
 80101ca:	f04f 0b00 	mov.w	fp, #0
 80101ce:	4a09      	ldr	r2, [pc, #36]	; (80101f4 <_ZL11microsecondv+0x44>)
 80101d0:	6812      	ldr	r2, [r2, #0]
 80101d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80101d4:	4611      	mov	r1, r2
 80101d6:	f04f 0200 	mov.w	r2, #0
 80101da:	ea4b 0301 	orr.w	r3, fp, r1
 80101de:	ea4c 0402 	orr.w	r4, ip, r2
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	4621      	mov	r1, r4
 80101e6:	46bd      	mov	sp, r7
 80101e8:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80101ec:	4770      	bx	lr
 80101ee:	bf00      	nop
 80101f0:	24000e84 	.word	0x24000e84
 80101f4:	2400c780 	.word	0x2400c780

080101f8 <_ZN2FC10SensorBaroC1Ev>:

namespace FC{

class SensorBaro : public Freq<SensorBaro>{
public:
	SensorBaro()
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
	: barometerPub{0, }
	, seaLevelPressure(1013.25)
	, pressure(0)
	, temperature(0)
	, altitude(0)
	, refAltitude(0)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	461a      	mov	r2, r3
 8010204:	2300      	movs	r3, #0
 8010206:	6013      	str	r3, [r2, #0]
 8010208:	6053      	str	r3, [r2, #4]
 801020a:	6093      	str	r3, [r2, #8]
 801020c:	60d3      	str	r3, [r2, #12]
 801020e:	6113      	str	r3, [r2, #16]
 8010210:	6153      	str	r3, [r2, #20]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4a0c      	ldr	r2, [pc, #48]	; (8010248 <_ZN2FC10SensorBaroC1Ev+0x50>)
 8010216:	619a      	str	r2, [r3, #24]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f04f 0200 	mov.w	r2, #0
 801021e:	61da      	str	r2, [r3, #28]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f04f 0200 	mov.w	r2, #0
 8010226:	621a      	str	r2, [r3, #32]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f04f 0200 	mov.w	r2, #0
 801022e:	625a      	str	r2, [r3, #36]	; 0x24
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f04f 0200 	mov.w	r2, #0
 8010236:	629a      	str	r2, [r3, #40]	; 0x28
	{}
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	4618      	mov	r0, r3
 801023c:	370c      	adds	r7, #12
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr
 8010246:	bf00      	nop
 8010248:	447d5000 	.word	0x447d5000

0801024c <_ZN2FC10SensorBaro7setBaroEff>:

namespace FC{

SensorBaro sensorBaro;

void SensorBaro::setBaro(float pressure, float temperature){
 801024c:	b590      	push	{r4, r7, lr}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	ed87 0a02 	vstr	s0, [r7, #8]
 8010258:	edc7 0a01 	vstr	s1, [r7, #4]
	/* invalid pressure */
//	if(pressure > 1200.0 || pressure < 900.0) return;

	this->pressure = pressure;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	61da      	str	r2, [r3, #28]
	this->temperature = temperature;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	621a      	str	r2, [r3, #32]
	this->altitude = calAltitude(seaLevelPressure, pressure);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	edd3 7a06 	vldr	s15, [r3, #24]
 801026e:	edd7 0a02 	vldr	s1, [r7, #8]
 8010272:	eeb0 0a67 	vmov.f32	s0, s15
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f000 f87e 	bl	8010378 <_ZN2FC10SensorBaro11calAltitudeEff>
 801027c:	eef0 7a40 	vmov.f32	s15, s0
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	this->barometerPub.timestamp = microsecond();
 8010286:	f7ff ff93 	bl	80101b0 <_ZL11microsecondv>
 801028a:	4603      	mov	r3, r0
 801028c:	460c      	mov	r4, r1
 801028e:	68fa      	ldr	r2, [r7, #12]
 8010290:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometerPub.pressure = this->pressure;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	69da      	ldr	r2, [r3, #28]
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	609a      	str	r2, [r3, #8]
	this->barometerPub.temperature = this->temperature;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	6a1a      	ldr	r2, [r3, #32]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	60da      	str	r2, [r3, #12]
	this->barometerPub.altitude = this->altitude - refAltitude;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80102b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	edc3 7a04 	vstr	s15, [r3, #16]

	msgBus.setBarometer(this->barometerPub);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	4619      	mov	r1, r3
 80102be:	4806      	ldr	r0, [pc, #24]	; (80102d8 <_ZN2FC10SensorBaro7setBaroEff+0x8c>)
 80102c0:	f7ff ff60 	bl	8010184 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>

	/* Freq class variable */
	freqCnt++;
 80102c4:	4b05      	ldr	r3, [pc, #20]	; (80102dc <_ZN2FC10SensorBaro7setBaroEff+0x90>)
 80102c6:	881b      	ldrh	r3, [r3, #0]
 80102c8:	3301      	adds	r3, #1
 80102ca:	b29a      	uxth	r2, r3
 80102cc:	4b03      	ldr	r3, [pc, #12]	; (80102dc <_ZN2FC10SensorBaro7setBaroEff+0x90>)
 80102ce:	801a      	strh	r2, [r3, #0]
}
 80102d0:	bf00      	nop
 80102d2:	3714      	adds	r7, #20
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd90      	pop	{r4, r7, pc}
 80102d8:	240009b8 	.word	0x240009b8
 80102dc:	24000eb8 	.word	0x24000eb8

080102e0 <_ZN2FC10SensorBaro19setSeaLevelPressureEf>:

void SensorBaro::setSeaLevelPressure(float altitude){
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	ed87 0a00 	vstr	s0, [r7]
	seaLevelPressure = calSeaLevelPressure(altitude, pressure);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80102f2:	eef0 0a67 	vmov.f32	s1, s15
 80102f6:	ed97 0a00 	vldr	s0, [r7]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 f86c 	bl	80103d8 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>
 8010300:	eef0 7a40 	vmov.f32	s15, s0
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	edc3 7a06 	vstr	s15, [r3, #24]
}
 801030a:	bf00      	nop
 801030c:	3708      	adds	r7, #8
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}

08010312 <_ZN2FC10SensorBaro14setRefAltitudeEv>:

void SensorBaro::setRefAltitude(){
 8010312:	b580      	push	{r7, lr}
 8010314:	b082      	sub	sp, #8
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
	refAltitude = calAltitude(seaLevelPressure, pressure);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	edd3 7a06 	vldr	s15, [r3, #24]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	ed93 7a07 	vldr	s14, [r3, #28]
 8010326:	eef0 0a47 	vmov.f32	s1, s14
 801032a:	eeb0 0a67 	vmov.f32	s0, s15
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 f822 	bl	8010378 <_ZN2FC10SensorBaro11calAltitudeEff>
 8010334:	eef0 7a40 	vmov.f32	s15, s0
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 801033e:	bf00      	nop
 8010340:	3708      	adds	r7, #8
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8010346:	b580      	push	{r7, lr}
 8010348:	b084      	sub	sp, #16
 801034a:	af00      	add	r7, sp, #0
 801034c:	ed87 0a03 	vstr	s0, [r7, #12]
 8010350:	ed87 1b00 	vstr	d1, [r7]
      return pow(__type(__x), __type(__y));
 8010354:	edd7 7a03 	vldr	s15, [r7, #12]
 8010358:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801035c:	ed97 1b00 	vldr	d1, [r7]
 8010360:	eeb0 0b47 	vmov.f64	d0, d7
 8010364:	f01a ff24 	bl	802b1b0 <pow>
 8010368:	eeb0 7b40 	vmov.f64	d7, d0
    }
 801036c:	eeb0 0b47 	vmov.f64	d0, d7
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
	...

08010378 <_ZN2FC10SensorBaro11calAltitudeEff>:

float SensorBaro::calAltitude(float seaLevel, float pressure){
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	ed87 0a02 	vstr	s0, [r7, #8]
 8010384:	edc7 0a01 	vstr	s1, [r7, #4]
	return 44330.0 * (1.0 - pow(pressure / seaLevel, 0.1903));
 8010388:	ed97 7a01 	vldr	s14, [r7, #4]
 801038c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010390:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010394:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 80103c8 <_ZN2FC10SensorBaro11calAltitudeEff+0x50>
 8010398:	eeb0 0a66 	vmov.f32	s0, s13
 801039c:	f7ff ffd3 	bl	8010346 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80103a0:	eeb0 6b40 	vmov.f64	d6, d0
 80103a4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80103a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80103ac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80103d0 <_ZN2FC10SensorBaro11calAltitudeEff+0x58>
 80103b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80103b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80103b8:	eeb0 0a67 	vmov.f32	s0, s15
 80103bc:	3710      	adds	r7, #16
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	f3af 8000 	nop.w
 80103c8:	1a36e2eb 	.word	0x1a36e2eb
 80103cc:	3fc85bc0 	.word	0x3fc85bc0
 80103d0:	00000000 	.word	0x00000000
 80103d4:	40e5a540 	.word	0x40e5a540

080103d8 <_ZN2FC10SensorBaro19calSeaLevelPressureEff>:

float SensorBaro::calSeaLevelPressure(float altitude, float pressure){
 80103d8:	b580      	push	{r7, lr}
 80103da:	ed2d 8b02 	vpush	{d8}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80103e8:	edc7 0a01 	vstr	s1, [r7, #4]
	return pressure / pow(1.0 - (altitude / 44330.0), 5.255);
 80103ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80103f0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80103f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80103f8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80103fc:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8010438 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x60>
 8010400:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010404:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010408:	ee36 7b47 	vsub.f64	d7, d6, d7
 801040c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8010440 <_ZN2FC10SensorBaro19calSeaLevelPressureEff+0x68>
 8010410:	eeb0 0b47 	vmov.f64	d0, d7
 8010414:	f01a fecc 	bl	802b1b0 <pow>
 8010418:	eeb0 6b40 	vmov.f64	d6, d0
 801041c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8010420:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8010424:	eeb0 0a67 	vmov.f32	s0, s15
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	ecbd 8b02 	vpop	{d8}
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	f3af 8000 	nop.w
 8010438:	00000000 	.word	0x00000000
 801043c:	40e5a540 	.word	0x40e5a540
 8010440:	b851eb85 	.word	0xb851eb85
 8010444:	4015051e 	.word	0x4015051e

08010448 <_Z41__static_initialization_and_destruction_0ii>:


}
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d107      	bne.n	8010468 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801045e:	4293      	cmp	r3, r2
 8010460:	d102      	bne.n	8010468 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorBaro sensorBaro;
 8010462:	4803      	ldr	r0, [pc, #12]	; (8010470 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8010464:	f7ff fec8 	bl	80101f8 <_ZN2FC10SensorBaroC1Ev>
}
 8010468:	bf00      	nop
 801046a:	3708      	adds	r7, #8
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	24000e88 	.word	0x24000e88

08010474 <_GLOBAL__sub_I__ZN2FC10sensorBaroE>:
 8010474:	b580      	push	{r7, lr}
 8010476:	af00      	add	r7, sp, #0
 8010478:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801047c:	2001      	movs	r0, #1
 801047e:	f7ff ffe3 	bl	8010448 <_Z41__static_initialization_and_destruction_0ii>
 8010482:	bd80      	pop	{r7, pc}

08010484 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	683a      	ldr	r2, [r7, #0]
 8010492:	3348      	adds	r3, #72	; 0x48
 8010494:	4611      	mov	r1, r2
 8010496:	2248      	movs	r2, #72	; 0x48
 8010498:	4618      	mov	r0, r3
 801049a:	f01d fbc9 	bl	802dc30 <memcpy>
 801049e:	bf00      	nop
 80104a0:	3708      	adds	r7, #8
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
	...

080104a8 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 80104a8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80104ac:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 80104ae:	4b0e      	ldr	r3, [pc, #56]	; (80104e8 <_ZL11microsecondv+0x40>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4619      	mov	r1, r3
 80104b4:	f04f 0200 	mov.w	r2, #0
 80104b8:	f04f 0b00 	mov.w	fp, #0
 80104bc:	f04f 0c00 	mov.w	ip, #0
 80104c0:	468c      	mov	ip, r1
 80104c2:	f04f 0b00 	mov.w	fp, #0
 80104c6:	4a09      	ldr	r2, [pc, #36]	; (80104ec <_ZL11microsecondv+0x44>)
 80104c8:	6812      	ldr	r2, [r2, #0]
 80104ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80104cc:	4611      	mov	r1, r2
 80104ce:	f04f 0200 	mov.w	r2, #0
 80104d2:	ea4b 0301 	orr.w	r3, fp, r1
 80104d6:	ea4c 0402 	orr.w	r4, ip, r2
}
 80104da:	4618      	mov	r0, r3
 80104dc:	4621      	mov	r1, r4
 80104de:	46bd      	mov	sp, r7
 80104e0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	24000ebc 	.word	0x24000ebc
 80104ec:	2400c780 	.word	0x2400c780

080104f0 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:
SensorGPS sensorGPS;

void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 80104f0:	b590      	push	{r4, r7, lr}
 80104f2:	b091      	sub	sp, #68	; 0x44
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80104f8:	ed87 0b08 	vstr	d0, [r7, #32]
 80104fc:	ed87 1b06 	vstr	d1, [r7, #24]
 8010500:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8010504:	edc7 2a05 	vstr	s5, [r7, #20]
 8010508:	ed87 3a04 	vstr	s6, [r7, #16]
 801050c:	edc7 3a03 	vstr	s7, [r7, #12]
 8010510:	ed87 4a02 	vstr	s8, [r7, #8]
 8010514:	460b      	mov	r3, r1
 8010516:	71fb      	strb	r3, [r7, #7]
 8010518:	4613      	mov	r3, r2
 801051a:	71bb      	strb	r3, [r7, #6]
	if(fixType == 0) return;			/* not fixed */
 801051c:	79bb      	ldrb	r3, [r7, #6]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d06a      	beq.n	80105f8 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x108>

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 8010522:	edd7 7a04 	vldr	s15, [r7, #16]
 8010526:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801052a:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8010600 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x110>
 801052e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010532:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8010608 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x118>
 8010536:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801053a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801053e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 8010542:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8010546:	f7fe ffdb 	bl	800f500 <_ZSt3cosf>
 801054a:	eeb0 7a40 	vmov.f32	s14, s0
 801054e:	edd7 7a05 	vldr	s15, [r7, #20]
 8010552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010556:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 801055a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 801055e:	f7fe ffdf 	bl	800f520 <_ZSt3sinf>
 8010562:	eeb0 7a40 	vmov.f32	s14, s0
 8010566:	edd7 7a05 	vldr	s15, [r7, #20]
 801056a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801056e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 8010572:	f7ff ff99 	bl	80104a8 <_ZL11microsecondv>
 8010576:	4603      	mov	r3, r0
 8010578:	460c      	mov	r4, r1
 801057a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801057c:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 8010580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010582:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8010586:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 801058a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801058c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010590:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 8010594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010596:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801059a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 801059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105a2:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 80105a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a6:	697a      	ldr	r2, [r7, #20]
 80105a8:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 80105aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105ae:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 80105b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105b4:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 80105b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b8:	f04f 0200 	mov.w	r2, #0
 80105bc:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 80105be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105c2:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 80105c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c6:	68fa      	ldr	r2, [r7, #12]
 80105c8:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 80105ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105cc:	68ba      	ldr	r2, [r7, #8]
 80105ce:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 80105d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d2:	79fa      	ldrb	r2, [r7, #7]
 80105d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 80105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105da:	79ba      	ldrb	r2, [r7, #6]
 80105dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 80105e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e2:	4619      	mov	r1, r3
 80105e4:	480a      	ldr	r0, [pc, #40]	; (8010610 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x120>)
 80105e6:	f7ff ff4d 	bl	8010484 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>

	/* Freq class variable */
	freqCnt++;
 80105ea:	4b0a      	ldr	r3, [pc, #40]	; (8010614 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x124>)
 80105ec:	881b      	ldrh	r3, [r3, #0]
 80105ee:	3301      	adds	r3, #1
 80105f0:	b29a      	uxth	r2, r3
 80105f2:	4b08      	ldr	r3, [pc, #32]	; (8010614 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x124>)
 80105f4:	801a      	strh	r2, [r3, #0]
 80105f6:	e000      	b.n	80105fa <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x10a>
	if(fixType == 0) return;			/* not fixed */
 80105f8:	bf00      	nop
}
 80105fa:	3744      	adds	r7, #68	; 0x44
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd90      	pop	{r4, r7, pc}
 8010600:	54442d18 	.word	0x54442d18
 8010604:	400921fb 	.word	0x400921fb
 8010608:	00000000 	.word	0x00000000
 801060c:	40668000 	.word	0x40668000
 8010610:	240009b8 	.word	0x240009b8
 8010614:	24000f20 	.word	0x24000f20

08010618 <_Z41__static_initialization_and_destruction_0ii>:

}
 8010618:	b480      	push	{r7}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
 8010622:	bf00      	nop
 8010624:	370c      	adds	r7, #12
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr

0801062e <_GLOBAL__sub_I__ZN2FC9sensorGPSE>:
 801062e:	b580      	push	{r7, lr}
 8010630:	af00      	add	r7, sp, #0
 8010632:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010636:	2001      	movs	r0, #1
 8010638:	f7ff ffee 	bl	8010618 <_Z41__static_initialization_and_destruction_0ii>
 801063c:	bd80      	pop	{r7, pc}

0801063e <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 801063e:	b4b0      	push	{r4, r5, r7}
 8010640:	b083      	sub	sp, #12
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
 8010646:	6039      	str	r1, [r7, #0]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	683a      	ldr	r2, [r7, #0]
 801064c:	f103 0418 	add.w	r4, r3, #24
 8010650:	4615      	mov	r5, r2
 8010652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010656:	e895 0003 	ldmia.w	r5, {r0, r1}
 801065a:	e884 0003 	stmia.w	r4, {r0, r1}
 801065e:	bf00      	nop
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	bcb0      	pop	{r4, r5, r7}
 8010666:	4770      	bx	lr

08010668 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010668:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 801066c:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 801066e:	4b0e      	ldr	r3, [pc, #56]	; (80106a8 <_ZL11microsecondv+0x40>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4619      	mov	r1, r3
 8010674:	f04f 0200 	mov.w	r2, #0
 8010678:	f04f 0b00 	mov.w	fp, #0
 801067c:	f04f 0c00 	mov.w	ip, #0
 8010680:	468c      	mov	ip, r1
 8010682:	f04f 0b00 	mov.w	fp, #0
 8010686:	4a09      	ldr	r2, [pc, #36]	; (80106ac <_ZL11microsecondv+0x44>)
 8010688:	6812      	ldr	r2, [r2, #0]
 801068a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801068c:	4611      	mov	r1, r2
 801068e:	f04f 0200 	mov.w	r2, #0
 8010692:	ea4b 0301 	orr.w	r3, fp, r1
 8010696:	ea4c 0402 	orr.w	r4, ip, r2
}
 801069a:	4618      	mov	r0, r3
 801069c:	4621      	mov	r1, r4
 801069e:	46bd      	mov	sp, r7
 80106a0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	24000f24 	.word	0x24000f24
 80106ac:	2400c780 	.word	0x2400c780

080106b0 <_ZN2FC10SensorGyroC1Ev>:

namespace FC{

SensorGyro sensorGyro;

SensorGyro::SensorGyro()
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
: bodyAngularVelocity{0, }
, biasX(0), biasY(0), biasZ(0)
, averX(0), averY(0), averZ(0)
, calBiasFlag(false), averageIndex(0)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	461a      	mov	r2, r3
 80106bc:	2300      	movs	r3, #0
 80106be:	6013      	str	r3, [r2, #0]
 80106c0:	6053      	str	r3, [r2, #4]
 80106c2:	6093      	str	r3, [r2, #8]
 80106c4:	60d3      	str	r3, [r2, #12]
 80106c6:	6113      	str	r3, [r2, #16]
 80106c8:	6153      	str	r3, [r2, #20]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f04f 0200 	mov.w	r2, #0
 80106d0:	619a      	str	r2, [r3, #24]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f04f 0200 	mov.w	r2, #0
 80106d8:	61da      	str	r2, [r3, #28]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f04f 0200 	mov.w	r2, #0
 80106e0:	621a      	str	r2, [r3, #32]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f04f 0200 	mov.w	r2, #0
 80106e8:	625a      	str	r2, [r3, #36]	; 0x24
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f04f 0200 	mov.w	r2, #0
 80106f0:	629a      	str	r2, [r3, #40]	; 0x28
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f04f 0200 	mov.w	r2, #0
 80106f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2200      	movs	r2, #0
 80106fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2200      	movs	r2, #0
 8010706:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
{}
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	4618      	mov	r0, r3
 801070e:	370c      	adds	r7, #12
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr

08010718 <_ZN2FC10SensorGyro7setBiasEv>:

void SensorGyro::setBias(){
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
	calBiasFlag = true;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2201      	movs	r2, #1
 8010724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	averageIndex = 0;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2200      	movs	r2, #0
 801072c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	averX = 0;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f04f 0200 	mov.w	r2, #0
 8010736:	625a      	str	r2, [r3, #36]	; 0x24
	averY = 0;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f04f 0200 	mov.w	r2, #0
 801073e:	629a      	str	r2, [r3, #40]	; 0x28
	averZ = 0;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f04f 0200 	mov.w	r2, #0
 8010746:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010748:	bf00      	nop
 801074a:	370c      	adds	r7, #12
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <_ZN2FC10SensorGyro7setGyroEfff>:

void SensorGyro::setGyro(float x, float y, float z){
 8010754:	b590      	push	{r4, r7, lr}
 8010756:	b085      	sub	sp, #20
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	ed87 0a02 	vstr	s0, [r7, #8]
 8010760:	edc7 0a01 	vstr	s1, [r7, #4]
 8010764:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8010768:	edd7 7a02 	vldr	s15, [r7, #8]
 801076c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010774:	d10d      	bne.n	8010792 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8010776:	edd7 7a01 	vldr	s15, [r7, #4]
 801077a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010782:	d106      	bne.n	8010792 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8010784:	edd7 7a00 	vldr	s15, [r7]
 8010788:	eef5 7a40 	vcmp.f32	s15, #0.0
 801078c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010790:	d041      	beq.n	8010816 <_ZN2FC10SensorGyro7setGyroEfff+0xc2>

	if(calBiasFlag) calAverage(x, y, z);
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010798:	2b00      	cmp	r3, #0
 801079a:	d008      	beq.n	80107ae <_ZN2FC10SensorGyro7setGyroEfff+0x5a>
 801079c:	ed97 1a00 	vldr	s2, [r7]
 80107a0:	edd7 0a01 	vldr	s1, [r7, #4]
 80107a4:	ed97 0a02 	vldr	s0, [r7, #8]
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f000 f83d 	bl	8010828 <_ZN2FC10SensorGyro10calAverageEfff>

	this->bodyAngularVelocity.timestamp = microsecond();
 80107ae:	f7ff ff5b 	bl	8010668 <_ZL11microsecondv>
 80107b2:	4603      	mov	r3, r0
 80107b4:	460c      	mov	r4, r1
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x - biasX;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	edd3 7a06 	vldr	s15, [r3, #24]
 80107c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80107c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y - biasY;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80107d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80107da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z - biasZ;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80107ea:	ed97 7a00 	vldr	s14, [r7]
 80107ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	4619      	mov	r1, r3
 80107fc:	4808      	ldr	r0, [pc, #32]	; (8010820 <_ZN2FC10SensorGyro7setGyroEfff+0xcc>)
 80107fe:	f7ff ff1e 	bl	801063e <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
	ModuleAHRS::setSignal(AHRS_fromGyro);
 8010802:	2002      	movs	r0, #2
 8010804:	f7ff fb36 	bl	800fe74 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	freqCnt++;
 8010808:	4b06      	ldr	r3, [pc, #24]	; (8010824 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 801080a:	881b      	ldrh	r3, [r3, #0]
 801080c:	3301      	adds	r3, #1
 801080e:	b29a      	uxth	r2, r3
 8010810:	4b04      	ldr	r3, [pc, #16]	; (8010824 <_ZN2FC10SensorGyro7setGyroEfff+0xd0>)
 8010812:	801a      	strh	r2, [r3, #0]
 8010814:	e000      	b.n	8010818 <_ZN2FC10SensorGyro7setGyroEfff+0xc4>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8010816:	bf00      	nop
}
 8010818:	3714      	adds	r7, #20
 801081a:	46bd      	mov	sp, r7
 801081c:	bd90      	pop	{r4, r7, pc}
 801081e:	bf00      	nop
 8010820:	240009b8 	.word	0x240009b8
 8010824:	24000f60 	.word	0x24000f60

08010828 <_ZN2FC10SensorGyro10calAverageEfff>:

void SensorGyro::calAverage(float x, float y, float z){
 8010828:	b480      	push	{r7}
 801082a:	b087      	sub	sp, #28
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	ed87 0a02 	vstr	s0, [r7, #8]
 8010834:	edc7 0a01 	vstr	s1, [r7, #4]
 8010838:	ed87 1a00 	vstr	s2, [r7]
	float alpha = (averageIndex-1)/averageIndex;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010842:	3b01      	subs	r3, #1
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 801084a:	fb93 f3f2 	sdiv	r3, r3, r2
 801084e:	ee07 3a90 	vmov	s15, r3
 8010852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010856:	edc7 7a05 	vstr	s15, [r7, #20]
	averX = alpha*averX + (1-alpha)*x;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8010860:	edd7 7a05 	vldr	s15, [r7, #20]
 8010864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801086c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010870:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010874:	edd7 7a02 	vldr	s15, [r7, #8]
 8010878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801087c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	averY = alpha*averY + (1-alpha)*y;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801088c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010898:	edd7 7a05 	vldr	s15, [r7, #20]
 801089c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80108a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80108a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80108a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	averZ = alpha*averZ + (1-alpha)*z;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80108b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80108bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80108c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80108c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80108cc:	edd7 7a00 	vldr	s15, [r7]
 80108d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80108d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	averageIndex++;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80108e4:	3301      	adds	r3, #1
 80108e6:	b2da      	uxtb	r2, r3
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	if(averageIndex > AVERAGE_SIZE) {
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80108f4:	2b14      	cmp	r3, #20
 80108f6:	d90f      	bls.n	8010918 <_ZN2FC10SensorGyro10calAverageEfff+0xf0>
		calBiasFlag = false;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		biasX = averX;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	619a      	str	r2, [r3, #24]
		biasY = averY;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	61da      	str	r2, [r3, #28]
		biasZ = averZ;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	621a      	str	r2, [r3, #32]
	}
}
 8010918:	bf00      	nop
 801091a:	371c      	adds	r7, #28
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <_Z41__static_initialization_and_destruction_0ii>:

}
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2b01      	cmp	r3, #1
 8010932:	d107      	bne.n	8010944 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801093a:	4293      	cmp	r3, r2
 801093c:	d102      	bne.n	8010944 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorGyro sensorGyro;
 801093e:	4803      	ldr	r0, [pc, #12]	; (801094c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8010940:	f7ff feb6 	bl	80106b0 <_ZN2FC10SensorGyroC1Ev>
}
 8010944:	bf00      	nop
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	24000f28 	.word	0x24000f28

08010950 <_GLOBAL__sub_I__ZN2FC10sensorGyroE>:
 8010950:	b580      	push	{r7, lr}
 8010952:	af00      	add	r7, sp, #0
 8010954:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010958:	2001      	movs	r0, #1
 801095a:	f7ff ffe3 	bl	8010924 <_Z41__static_initialization_and_destruction_0ii>
 801095e:	bd80      	pop	{r7, pc}

08010960 <_ZN2FC6MsgBus8setLidarERKNS_5LidarE>:
    SIMPLE_FUNC_IMPL(Lidar, Lidar, lidar)
 8010960:	b490      	push	{r4, r7}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	683a      	ldr	r2, [r7, #0]
 801096e:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8010972:	4613      	mov	r3, r2
 8010974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010976:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801097a:	bf00      	nop
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bc90      	pop	{r4, r7}
 8010982:	4770      	bx	lr

08010984 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010984:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010988:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 801098a:	4b0e      	ldr	r3, [pc, #56]	; (80109c4 <_ZL11microsecondv+0x40>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4619      	mov	r1, r3
 8010990:	f04f 0200 	mov.w	r2, #0
 8010994:	f04f 0b00 	mov.w	fp, #0
 8010998:	f04f 0c00 	mov.w	ip, #0
 801099c:	468c      	mov	ip, r1
 801099e:	f04f 0b00 	mov.w	fp, #0
 80109a2:	4a09      	ldr	r2, [pc, #36]	; (80109c8 <_ZL11microsecondv+0x44>)
 80109a4:	6812      	ldr	r2, [r2, #0]
 80109a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80109a8:	4611      	mov	r1, r2
 80109aa:	f04f 0200 	mov.w	r2, #0
 80109ae:	ea4b 0301 	orr.w	r3, fp, r1
 80109b2:	ea4c 0402 	orr.w	r4, ip, r2
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	4621      	mov	r1, r4
 80109ba:	46bd      	mov	sp, r7
 80109bc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	24000f64 	.word	0x24000f64
 80109c8:	2400c780 	.word	0x2400c780

080109cc <_ZL11millisecondv>:
static __inline uint32_t millisecond(){
 80109cc:	b580      	push	{r7, lr}
 80109ce:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80109d0:	f004 f990 	bl	8014cf4 <HAL_GetTick>
 80109d4:	4603      	mov	r3, r0
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	bd80      	pop	{r7, pc}

080109da <_ZN2FC11SensorLidarC1Ev>:
#include <cmath>
namespace FC {

SensorLidar sensorLidar;

SensorLidar::SensorLidar()
 80109da:	b480      	push	{r7}
 80109dc:	b083      	sub	sp, #12
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
: lidarPub{0, }
, refDistance(0.0)
, calRefFlag(false)
, avgDistance(0.0)
, avgIndex(0)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	3328      	adds	r3, #40	; 0x28
 80109e6:	2200      	movs	r2, #0
 80109e8:	601a      	str	r2, [r3, #0]
 80109ea:	605a      	str	r2, [r3, #4]
 80109ec:	609a      	str	r2, [r3, #8]
 80109ee:	60da      	str	r2, [r3, #12]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f04f 0200 	mov.w	r2, #0
 80109f6:	639a      	str	r2, [r3, #56]	; 0x38
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f04f 0200 	mov.w	r2, #0
 8010a06:	641a      	str	r2, [r3, #64]	; 0x40
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{}
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	4618      	mov	r0, r3
 8010a14:	370c      	adds	r7, #12
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr
	...

08010a20 <_ZN2FC11SensorLidar11setDistanceEf>:

void SensorLidar::setDistance(float distance /*[m]*/){
 8010a20:	b590      	push	{r4, r7, lr}
 8010a22:	ed2d 8b04 	vpush	{d8-d9}
 8010a26:	b085      	sub	sp, #20
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	ed87 0a00 	vstr	s0, [r7]
	if(millisecond() - lastUpdatedMillisec < MINIMUM_TIME_INTERVAL_MILLISEC) return;
 8010a30:	f7ff ffcc 	bl	80109cc <_ZL11millisecondv>
 8010a34:	4602      	mov	r2, r0
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a3a:	1ad3      	subs	r3, r2, r3
 8010a3c:	2b13      	cmp	r3, #19
 8010a3e:	bf94      	ite	ls
 8010a40:	2301      	movls	r3, #1
 8010a42:	2300      	movhi	r3, #0
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	f040 8099 	bne.w	8010b7e <_ZN2FC11SensorLidar11setDistanceEf+0x15e>
	if(distance == 0.0f) return;
 8010a4c:	edd7 7a00 	vldr	s15, [r7]
 8010a50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a58:	f000 8093 	beq.w	8010b82 <_ZN2FC11SensorLidar11setDistanceEf+0x162>

	msgBus.getAttitude(&attitudeSub);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	484b      	ldr	r0, [pc, #300]	; (8010b90 <_ZN2FC11SensorLidar11setDistanceEf+0x170>)
 8010a62:	f7fd fe01 	bl	800e668 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	if(attitudeSub.roll > MAX_RADIAN || attitudeSub.roll < -MAX_RADIAN ||
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	edd3 7a06 	vldr	s15, [r3, #24]
 8010a6c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010b94 <_ZN2FC11SensorLidar11setDistanceEf+0x174>
 8010a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a78:	dc1d      	bgt.n	8010ab6 <_ZN2FC11SensorLidar11setDistanceEf+0x96>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8010a80:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8010b98 <_ZN2FC11SensorLidar11setDistanceEf+0x178>
 8010a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8c:	d413      	bmi.n	8010ab6 <_ZN2FC11SensorLidar11setDistanceEf+0x96>
	   attitudeSub.pitch > MAX_RADIAN || attitudeSub.pitch < -MAX_RADIAN){
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	edd3 7a07 	vldr	s15, [r3, #28]
	if(attitudeSub.roll > MAX_RADIAN || attitudeSub.roll < -MAX_RADIAN ||
 8010a94:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8010b94 <_ZN2FC11SensorLidar11setDistanceEf+0x174>
 8010a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa0:	dc09      	bgt.n	8010ab6 <_ZN2FC11SensorLidar11setDistanceEf+0x96>
	   attitudeSub.pitch > MAX_RADIAN || attitudeSub.pitch < -MAX_RADIAN){
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	edd3 7a07 	vldr	s15, [r3, #28]
 8010aa8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8010b98 <_ZN2FC11SensorLidar11setDistanceEf+0x178>
 8010aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab4:	d511      	bpl.n	8010ada <_ZN2FC11SensorLidar11setDistanceEf+0xba>

		lidarPub.timestamp = microsecond();
 8010ab6:	f7ff ff65 	bl	8010984 <_ZL11microsecondv>
 8010aba:	4603      	mov	r3, r0
 8010abc:	460c      	mov	r4, r1
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
		lidarPub.valid = false;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		msgBus.setLidar(lidarPub);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	3328      	adds	r3, #40	; 0x28
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	482f      	ldr	r0, [pc, #188]	; (8010b90 <_ZN2FC11SensorLidar11setDistanceEf+0x170>)
 8010ad4:	f7ff ff44 	bl	8010960 <_ZN2FC6MsgBus8setLidarERKNS_5LidarE>
		return;
 8010ad8:	e054      	b.n	8010b84 <_ZN2FC11SensorLidar11setDistanceEf+0x164>
	}
	float altitude = distance * abs((double)cos(attitudeSub.roll) * cos(attitudeSub.pitch));
 8010ada:	edd7 7a00 	vldr	s15, [r7]
 8010ade:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	edd3 7a06 	vldr	s15, [r3, #24]
 8010ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8010aec:	f7fe fd08 	bl	800f500 <_ZSt3cosf>
 8010af0:	eef0 7a40 	vmov.f32	s15, s0
 8010af4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	edd3 7a07 	vldr	s15, [r3, #28]
 8010afe:	eeb0 0a67 	vmov.f32	s0, s15
 8010b02:	f7fe fcfd 	bl	800f500 <_ZSt3cosf>
 8010b06:	eef0 7a40 	vmov.f32	s15, s0
 8010b0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010b0e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8010b12:	eeb0 0b47 	vmov.f64	d0, d7
 8010b16:	f7f4 fca8 	bl	800546a <_ZSt3absd>
 8010b1a:	eeb0 7b40 	vmov.f64	d7, d0
 8010b1e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010b22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010b26:	edc7 7a03 	vstr	s15, [r7, #12]

	if(calRefFlag) calAverage(altitude);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d004      	beq.n	8010b3e <_ZN2FC11SensorLidar11setDistanceEf+0x11e>
 8010b34:	ed97 0a03 	vldr	s0, [r7, #12]
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f000 f831 	bl	8010ba0 <_ZN2FC11SensorLidar10calAverageEf>

	lidarPub.timestamp = microsecond();
 8010b3e:	f7ff ff21 	bl	8010984 <_ZL11microsecondv>
 8010b42:	4603      	mov	r3, r0
 8010b44:	460c      	mov	r4, r1
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	lidarPub.altitude = altitude;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	631a      	str	r2, [r3, #48]	; 0x30
	lidarPub.valid = true;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2201      	movs	r2, #1
 8010b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	msgBus.setLidar(lidarPub);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	3328      	adds	r3, #40	; 0x28
 8010b5e:	4619      	mov	r1, r3
 8010b60:	480b      	ldr	r0, [pc, #44]	; (8010b90 <_ZN2FC11SensorLidar11setDistanceEf+0x170>)
 8010b62:	f7ff fefd 	bl	8010960 <_ZN2FC6MsgBus8setLidarERKNS_5LidarE>

	lastUpdatedMillisec = millisecond();
 8010b66:	f7ff ff31 	bl	80109cc <_ZL11millisecondv>
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	649a      	str	r2, [r3, #72]	; 0x48
	freqCnt++;
 8010b70:	4b0a      	ldr	r3, [pc, #40]	; (8010b9c <_ZN2FC11SensorLidar11setDistanceEf+0x17c>)
 8010b72:	881b      	ldrh	r3, [r3, #0]
 8010b74:	3301      	adds	r3, #1
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	4b08      	ldr	r3, [pc, #32]	; (8010b9c <_ZN2FC11SensorLidar11setDistanceEf+0x17c>)
 8010b7a:	801a      	strh	r2, [r3, #0]
 8010b7c:	e002      	b.n	8010b84 <_ZN2FC11SensorLidar11setDistanceEf+0x164>
	if(millisecond() - lastUpdatedMillisec < MINIMUM_TIME_INTERVAL_MILLISEC) return;
 8010b7e:	bf00      	nop
 8010b80:	e000      	b.n	8010b84 <_ZN2FC11SensorLidar11setDistanceEf+0x164>
	if(distance == 0.0f) return;
 8010b82:	bf00      	nop
}
 8010b84:	3714      	adds	r7, #20
 8010b86:	46bd      	mov	sp, r7
 8010b88:	ecbd 8b04 	vpop	{d8-d9}
 8010b8c:	bd90      	pop	{r4, r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	240009b8 	.word	0x240009b8
 8010b94:	3e32b8c1 	.word	0x3e32b8c1
 8010b98:	be32b8c1 	.word	0xbe32b8c1
 8010b9c:	24000fb8 	.word	0x24000fb8

08010ba0 <_ZN2FC11SensorLidar10calAverageEf>:
	calRefFlag = true;
	avgIndex = 0;
	refDistance = 0;
}

void SensorLidar::calAverage(float distance){
 8010ba0:	b480      	push	{r7}
 8010ba2:	b085      	sub	sp, #20
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	ed87 0a00 	vstr	s0, [r7]
	float alpha = (avgIndex-1)/avgIndex;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8010bba:	fb93 f3f2 	sdiv	r3, r3, r2
 8010bbe:	ee07 3a90 	vmov	s15, r3
 8010bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bc6:	edc7 7a03 	vstr	s15, [r7, #12]
	avgDistance = alpha*distance + (1-alpha)*distance;
 8010bca:	ed97 7a03 	vldr	s14, [r7, #12]
 8010bce:	edd7 7a00 	vldr	s15, [r7]
 8010bd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8010bde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010be2:	edd7 7a00 	vldr	s15, [r7]
 8010be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	avgIndex++;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	b2da      	uxtb	r2, r3
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if(avgIndex > AVERAGE_SIZE){
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c0a:	2b14      	cmp	r3, #20
 8010c0c:	d907      	bls.n	8010c1e <_ZN2FC11SensorLidar10calAverageEf+0x7e>
		calRefFlag = false;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		refDistance = avgDistance;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 8010c1e:	bf00      	nop
 8010c20:	3714      	adds	r7, #20
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr
	...

08010c2c <_Z41__static_initialization_and_destruction_0ii>:


} /* namespace FC */
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d107      	bne.n	8010c4c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d102      	bne.n	8010c4c <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorLidar sensorLidar;
 8010c46:	4803      	ldr	r0, [pc, #12]	; (8010c54 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8010c48:	f7ff fec7 	bl	80109da <_ZN2FC11SensorLidarC1Ev>
} /* namespace FC */
 8010c4c:	bf00      	nop
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	24000f68 	.word	0x24000f68

08010c58 <_GLOBAL__sub_I__ZN2FC11sensorLidarE>:
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010c60:	2001      	movs	r0, #1
 8010c62:	f7ff ffe3 	bl	8010c2c <_Z41__static_initialization_and_destruction_0ii>
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 8010c68:	b4b0      	push	{r4, r5, r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	683a      	ldr	r2, [r7, #0]
 8010c76:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8010c7a:	4615      	mov	r5, r2
 8010c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010c84:	e884 0003 	stmia.w	r4, {r0, r1}
 8010c88:	bf00      	nop
 8010c8a:	370c      	adds	r7, #12
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bcb0      	pop	{r4, r5, r7}
 8010c90:	4770      	bx	lr
	...

08010c94 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8010c94:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8010c98:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8010c9a:	4b0e      	ldr	r3, [pc, #56]	; (8010cd4 <_ZL11microsecondv+0x40>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	f04f 0200 	mov.w	r2, #0
 8010ca4:	f04f 0b00 	mov.w	fp, #0
 8010ca8:	f04f 0c00 	mov.w	ip, #0
 8010cac:	468c      	mov	ip, r1
 8010cae:	f04f 0b00 	mov.w	fp, #0
 8010cb2:	4a09      	ldr	r2, [pc, #36]	; (8010cd8 <_ZL11microsecondv+0x44>)
 8010cb4:	6812      	ldr	r2, [r2, #0]
 8010cb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010cb8:	4611      	mov	r1, r2
 8010cba:	f04f 0200 	mov.w	r2, #0
 8010cbe:	ea4b 0301 	orr.w	r3, fp, r1
 8010cc2:	ea4c 0402 	orr.w	r4, ip, r2
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	4621      	mov	r1, r4
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	24000fbc 	.word	0x24000fbc
 8010cd8:	2400c780 	.word	0x2400c780

08010cdc <_ZN2FC9SensorMagC1Ev>:

namespace FC{

SensorMag sensorMag;

SensorMag::SensorMag()
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
: bodyMag{0, }
, startCalibrationFlag(false)
, endCalibrationFlag(false)
, bias{-216.450f,-276.416f, -170.502f}
, scale{0.95011f, 1.04095f, 1.01334f}
, min{0, }, max{0, }
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	2300      	movs	r3, #0
 8010cea:	6013      	str	r3, [r2, #0]
 8010cec:	6053      	str	r3, [r2, #4]
 8010cee:	6093      	str	r3, [r2, #8]
 8010cf0:	60d3      	str	r3, [r2, #12]
 8010cf2:	6113      	str	r3, [r2, #16]
 8010cf4:	6153      	str	r3, [r2, #20]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	761a      	strb	r2, [r3, #24]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	765a      	strb	r2, [r3, #25]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4a0e      	ldr	r2, [pc, #56]	; (8010d40 <_ZN2FC9SensorMagC1Ev+0x64>)
 8010d06:	331c      	adds	r3, #28
 8010d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8010d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	4a0c      	ldr	r2, [pc, #48]	; (8010d44 <_ZN2FC9SensorMagC1Ev+0x68>)
 8010d12:	3328      	adds	r3, #40	; 0x28
 8010d14:	ca07      	ldmia	r2, {r0, r1, r2}
 8010d16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	3334      	adds	r3, #52	; 0x34
 8010d1e:	2200      	movs	r2, #0
 8010d20:	601a      	str	r2, [r3, #0]
 8010d22:	605a      	str	r2, [r3, #4]
 8010d24:	609a      	str	r2, [r3, #8]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	3340      	adds	r3, #64	; 0x40
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	601a      	str	r2, [r3, #0]
 8010d2e:	605a      	str	r2, [r3, #4]
 8010d30:	609a      	str	r2, [r3, #8]
	 * 		biasZ = -170.502f
	 * 		scaleX = 0.95011f
	 * 		scaleY = 1.04095f
	 * 		scaleZ = 1.01334f
	 */
}
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	4618      	mov	r0, r3
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr
 8010d40:	0802f048 	.word	0x0802f048
 8010d44:	0802f054 	.word	0x0802f054

08010d48 <_ZN2FC9SensorMag6setMagEfff>:

void SensorMag::setMag(float x, float y, float z){
 8010d48:	b590      	push	{r4, r7, lr}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8010d54:	edc7 0a01 	vstr	s1, [r7, #4]
 8010d58:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8010d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010d60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d68:	d10d      	bne.n	8010d86 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8010d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8010d6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d76:	d106      	bne.n	8010d86 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 8010d78:	edd7 7a00 	vldr	s15, [r7]
 8010d7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d84:	d04c      	beq.n	8010e20 <_ZN2FC9SensorMag6setMagEfff+0xd8>

	if(startCalibrationFlag) calCalibration(x, y, z);
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	7e1b      	ldrb	r3, [r3, #24]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d008      	beq.n	8010da0 <_ZN2FC9SensorMag6setMagEfff+0x58>
 8010d8e:	ed97 1a00 	vldr	s2, [r7]
 8010d92:	edd7 0a01 	vldr	s1, [r7, #4]
 8010d96:	ed97 0a02 	vldr	s0, [r7, #8]
 8010d9a:	68f8      	ldr	r0, [r7, #12]
 8010d9c:	f000 f848 	bl	8010e30 <_ZN2FC9SensorMag14calCalibrationEfff>

	this->bodyMag.timestamp = microsecond();
 8010da0:	f7ff ff78 	bl	8010c94 <_ZL11microsecondv>
 8010da4:	4603      	mov	r3, r0
 8010da6:	460c      	mov	r4, r1
 8010da8:	68fa      	ldr	r2, [r7, #12]
 8010daa:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = (x - bias[0])*scale[0];
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	edd3 7a07 	vldr	s15, [r3, #28]
 8010db4:	ed97 7a02 	vldr	s14, [r7, #8]
 8010db8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	edc3 7a02 	vstr	s15, [r3, #8]
	this->bodyMag.xyz[1] = (y - bias[1])*scale[1];
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	edd3 7a08 	vldr	s15, [r3, #32]
 8010dd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8010dd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8010de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	edc3 7a03 	vstr	s15, [r3, #12]
	this->bodyMag.xyz[2] = (z - bias[2])*scale[2];
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010df0:	ed97 7a00 	vldr	s14, [r7]
 8010df4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8010dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	edc3 7a04 	vstr	s15, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	4806      	ldr	r0, [pc, #24]	; (8010e28 <_ZN2FC9SensorMag6setMagEfff+0xe0>)
 8010e0e:	f7ff ff2b 	bl	8010c68 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>

	/* Freq class variable */
	freqCnt++;
 8010e12:	4b06      	ldr	r3, [pc, #24]	; (8010e2c <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	3301      	adds	r3, #1
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	4b04      	ldr	r3, [pc, #16]	; (8010e2c <_ZN2FC9SensorMag6setMagEfff+0xe4>)
 8010e1c:	801a      	strh	r2, [r3, #0]
 8010e1e:	e000      	b.n	8010e22 <_ZN2FC9SensorMag6setMagEfff+0xda>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8010e20:	bf00      	nop
}
 8010e22:	3714      	adds	r7, #20
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd90      	pop	{r4, r7, pc}
 8010e28:	240009b8 	.word	0x240009b8
 8010e2c:	24001010 	.word	0x24001010

08010e30 <_ZN2FC9SensorMag14calCalibrationEfff>:

void SensorMag::endCalibration(){
	endCalibrationFlag = true;
}

void SensorMag::calCalibration(float x, float y, float z){
 8010e30:	b480      	push	{r7}
 8010e32:	b087      	sub	sp, #28
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	ed87 0a02 	vstr	s0, [r7, #8]
 8010e3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8010e40:	ed87 1a00 	vstr	s2, [r7]
	if(x > max[0]) max[0] = x;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8010e4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8010e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e56:	dd02      	ble.n	8010e5e <_ZN2FC9SensorMag14calCalibrationEfff+0x2e>
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	68ba      	ldr	r2, [r7, #8]
 8010e5c:	641a      	str	r2, [r3, #64]	; 0x40
	if(y > max[1]) max[1] = y;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8010e64:	ed97 7a01 	vldr	s14, [r7, #4]
 8010e68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e70:	dd02      	ble.n	8010e78 <_ZN2FC9SensorMag14calCalibrationEfff+0x48>
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	687a      	ldr	r2, [r7, #4]
 8010e76:	645a      	str	r2, [r3, #68]	; 0x44
	if(z > max[2]) max[2] = z;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8010e7e:	ed97 7a00 	vldr	s14, [r7]
 8010e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8a:	dd02      	ble.n	8010e92 <_ZN2FC9SensorMag14calCalibrationEfff+0x62>
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	649a      	str	r2, [r3, #72]	; 0x48

	if(x < min[0]) min[0] = x;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010e98:	ed97 7a02 	vldr	s14, [r7, #8]
 8010e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea4:	d502      	bpl.n	8010eac <_ZN2FC9SensorMag14calCalibrationEfff+0x7c>
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	68ba      	ldr	r2, [r7, #8]
 8010eaa:	635a      	str	r2, [r3, #52]	; 0x34
	if(y < min[1]) min[1] = y;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010eb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8010eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ebe:	d502      	bpl.n	8010ec6 <_ZN2FC9SensorMag14calCalibrationEfff+0x96>
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	639a      	str	r2, [r3, #56]	; 0x38
	if(z < min[2]) min[2] = z;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8010ecc:	ed97 7a00 	vldr	s14, [r7]
 8010ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed8:	d502      	bpl.n	8010ee0 <_ZN2FC9SensorMag14calCalibrationEfff+0xb0>
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	683a      	ldr	r2, [r7, #0]
 8010ede:	63da      	str	r2, [r3, #60]	; 0x3c

	if(endCalibrationFlag/* end */){
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	7e5b      	ldrb	r3, [r3, #25]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	f000 8091 	beq.w	801100c <_ZN2FC9SensorMag14calCalibrationEfff+0x1dc>
		/* get hard iron correction */
		bias[0] = (max[0] + min[0])/2;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010efa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	edc3 7a07 	vstr	s15, [r3, #28]
		bias[1] = (max[1] + min[1])/2;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	edc3 7a08 	vstr	s15, [r3, #32]
		bias[2] = (max[2] + min[2])/2;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8010f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		/* get soft iron correction estimate */
		scale[0] = (max[0] - min[0])/2;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010f50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f54:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = (max[1] - min[1])/2;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = (max[2] - min[2])/2;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8010f8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f90:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		float avgRad = (scale[0] + scale[1] + scale[2])/3.0f;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8010faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8010fb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fb8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8010fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010fc0:	edc7 7a05 	vstr	s15, [r7, #20]

		scale[0] = avgRad/scale[0];
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8010fca:	edd7 6a05 	vldr	s13, [r7, #20]
 8010fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		scale[1] = avgRad/scale[1];
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8010fde:	edd7 6a05 	vldr	s13, [r7, #20]
 8010fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		scale[2] = avgRad/scale[2];
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8010ff2:	edd7 6a05 	vldr	s13, [r7, #20]
 8010ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		startCalibrationFlag = false;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2200      	movs	r2, #0
 8011004:	761a      	strb	r2, [r3, #24]
		endCalibrationFlag = false;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2200      	movs	r2, #0
 801100a:	765a      	strb	r2, [r3, #25]
	}
}
 801100c:	bf00      	nop
 801100e:	371c      	adds	r7, #28
 8011010:	46bd      	mov	sp, r7
 8011012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011016:	4770      	bx	lr

08011018 <_Z41__static_initialization_and_destruction_0ii>:

}
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2b01      	cmp	r3, #1
 8011026:	d107      	bne.n	8011038 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801102e:	4293      	cmp	r3, r2
 8011030:	d102      	bne.n	8011038 <_Z41__static_initialization_and_destruction_0ii+0x20>
SensorMag sensorMag;
 8011032:	4803      	ldr	r0, [pc, #12]	; (8011040 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011034:	f7ff fe52 	bl	8010cdc <_ZN2FC9SensorMagC1Ev>
}
 8011038:	bf00      	nop
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	24000fc0 	.word	0x24000fc0

08011044 <_GLOBAL__sub_I__ZN2FC9sensorMagE>:
 8011044:	b580      	push	{r7, lr}
 8011046:	af00      	add	r7, sp, #0
 8011048:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801104c:	2001      	movs	r0, #1
 801104e:	f7ff ffe3 	bl	8011018 <_Z41__static_initialization_and_destruction_0ii>
 8011052:	bd80      	pop	{r7, pc}

08011054 <_ZN2FC3mapEtttff>:
#include <cmath>
#define _USE_MATH_DEFINES



float FC::map(uint16_t value, uint16_t in_min, uint16_t in_max, float out_min, float out_max){
 8011054:	b480      	push	{r7}
 8011056:	b085      	sub	sp, #20
 8011058:	af00      	add	r7, sp, #0
 801105a:	4603      	mov	r3, r0
 801105c:	ed87 0a01 	vstr	s0, [r7, #4]
 8011060:	edc7 0a00 	vstr	s1, [r7]
 8011064:	81fb      	strh	r3, [r7, #14]
 8011066:	460b      	mov	r3, r1
 8011068:	81bb      	strh	r3, [r7, #12]
 801106a:	4613      	mov	r3, r2
 801106c:	817b      	strh	r3, [r7, #10]
	return (float)(value - in_min)*(out_max - out_min) / (in_max - in_min) + out_min;
 801106e:	89fa      	ldrh	r2, [r7, #14]
 8011070:	89bb      	ldrh	r3, [r7, #12]
 8011072:	1ad3      	subs	r3, r2, r3
 8011074:	ee07 3a90 	vmov	s15, r3
 8011078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801107c:	edd7 6a00 	vldr	s13, [r7]
 8011080:	edd7 7a01 	vldr	s15, [r7, #4]
 8011084:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011088:	ee67 6a27 	vmul.f32	s13, s14, s15
 801108c:	897a      	ldrh	r2, [r7, #10]
 801108e:	89bb      	ldrh	r3, [r7, #12]
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	ee07 3a90 	vmov	s15, r3
 8011096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801109a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801109e:	edd7 7a01 	vldr	s15, [r7, #4]
 80110a2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80110a6:	eeb0 0a67 	vmov.f32	s0, s15
 80110aa:	3714      	adds	r7, #20
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr
 80110b4:	0000      	movs	r0, r0
	...

080110b8 <_ZN2FC15radianThresholdEf>:


float FC::radianThreshold(float radian){
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
 80110be:	ed87 0a01 	vstr	s0, [r7, #4]
	while(radian >= FC_PI){
 80110c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80110c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80110ca:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8011138 <_ZN2FC15radianThresholdEf+0x80>
 80110ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80110d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d6:	da00      	bge.n	80110da <_ZN2FC15radianThresholdEf+0x22>
 80110d8:	e00c      	b.n	80110f4 <_ZN2FC15radianThresholdEf+0x3c>
		radian -= FC_2PI;
 80110da:	edd7 7a01 	vldr	s15, [r7, #4]
 80110de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80110e2:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8011140 <_ZN2FC15radianThresholdEf+0x88>
 80110e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80110ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80110ee:	edc7 7a01 	vstr	s15, [r7, #4]
	while(radian >= FC_PI){
 80110f2:	e7e6      	b.n	80110c2 <_ZN2FC15radianThresholdEf+0xa>
	}
	while(radian <= -FC_PI){
 80110f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80110f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80110fc:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8011148 <_ZN2FC15radianThresholdEf+0x90>
 8011100:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011108:	d80c      	bhi.n	8011124 <_ZN2FC15radianThresholdEf+0x6c>
		radian += FC_2PI;
 801110a:	edd7 7a01 	vldr	s15, [r7, #4]
 801110e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011112:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8011140 <_ZN2FC15radianThresholdEf+0x88>
 8011116:	ee37 7b06 	vadd.f64	d7, d7, d6
 801111a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801111e:	edc7 7a01 	vstr	s15, [r7, #4]
	while(radian <= -FC_PI){
 8011122:	e7e7      	b.n	80110f4 <_ZN2FC15radianThresholdEf+0x3c>
	}
	return radian;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	ee07 3a90 	vmov	s15, r3
}
 801112a:	eeb0 0a67 	vmov.f32	s0, s15
 801112e:	370c      	adds	r7, #12
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr
 8011138:	54442d18 	.word	0x54442d18
 801113c:	400921fb 	.word	0x400921fb
 8011140:	54442d18 	.word	0x54442d18
 8011144:	401921fb 	.word	0x401921fb
 8011148:	54442d18 	.word	0x54442d18
 801114c:	c00921fb 	.word	0xc00921fb

08011150 <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 8011150:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8011154:	b085      	sub	sp, #20
 8011156:	af00      	add	r7, sp, #0
 8011158:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8011160:	2300      	movs	r3, #0
 8011162:	60bb      	str	r3, [r7, #8]
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	2b3f      	cmp	r3, #63	; 0x3f
 8011168:	dc16      	bgt.n	8011198 <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 801116a:	2201      	movs	r2, #1
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	fa02 f303 	lsl.w	r3, r2, r3
 8011172:	4619      	mov	r1, r3
 8011174:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8011178:	e9d7 3400 	ldrd	r3, r4, [r7]
 801117c:	ea03 0b01 	and.w	fp, r3, r1
 8011180:	ea04 0c02 	and.w	ip, r4, r2
 8011184:	ea5b 030c 	orrs.w	r3, fp, ip
 8011188:	d002      	beq.n	8011190 <_bitCount64+0x40>
 801118a:	7bfb      	ldrb	r3, [r7, #15]
 801118c:	3301      	adds	r3, #1
 801118e:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	3301      	adds	r3, #1
 8011194:	60bb      	str	r3, [r7, #8]
 8011196:	e7e5      	b.n	8011164 <_bitCount64+0x14>
	}
	return cnt;
 8011198:	7bfb      	ldrb	r3, [r7, #15]
}
 801119a:	4618      	mov	r0, r3
 801119c:	3714      	adds	r7, #20
 801119e:	46bd      	mov	sp, r7
 80111a0:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80111a4:	4770      	bx	lr
	...

080111a8 <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 80111b0:	4a12      	ldr	r2, [pc, #72]	; (80111fc <SBUS_init+0x54>)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 80111b6:	2219      	movs	r2, #25
 80111b8:	2100      	movs	r1, #0
 80111ba:	4811      	ldr	r0, [pc, #68]	; (8011200 <SBUS_init+0x58>)
 80111bc:	f01c fd43 	bl	802dc46 <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 80111c0:	2219      	movs	r2, #25
 80111c2:	2100      	movs	r1, #0
 80111c4:	480f      	ldr	r0, [pc, #60]	; (8011204 <SBUS_init+0x5c>)
 80111c6:	f01c fd3e 	bl	802dc46 <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 80111ca:	2224      	movs	r2, #36	; 0x24
 80111cc:	2100      	movs	r1, #0
 80111ce:	480e      	ldr	r0, [pc, #56]	; (8011208 <SBUS_init+0x60>)
 80111d0:	f01c fd39 	bl	802dc46 <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 80111d4:	2224      	movs	r2, #36	; 0x24
 80111d6:	2100      	movs	r1, #0
 80111d8:	480c      	ldr	r0, [pc, #48]	; (801120c <SBUS_init+0x64>)
 80111da:	f01c fd34 	bl	802dc46 <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 80111de:	4b07      	ldr	r3, [pc, #28]	; (80111fc <SBUS_init+0x54>)
 80111e0:	2200      	movs	r2, #0
 80111e2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 80111e6:	4b05      	ldr	r3, [pc, #20]	; (80111fc <SBUS_init+0x54>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	2219      	movs	r2, #25
 80111ec:	4904      	ldr	r1, [pc, #16]	; (8011200 <SBUS_init+0x58>)
 80111ee:	4618      	mov	r0, r3
 80111f0:	f010 fa7a 	bl	80216e8 <HAL_UART_Receive_DMA>
}
 80111f4:	bf00      	nop
 80111f6:	3708      	adds	r7, #8
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}
 80111fc:	240010a0 	.word	0x240010a0
 8011200:	240010a4 	.word	0x240010a4
 8011204:	240010bd 	.word	0x240010bd
 8011208:	240010d6 	.word	0x240010d6
 801120c:	240010fa 	.word	0x240010fa

08011210 <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 8011210:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011214:	b082      	sub	sp, #8
 8011216:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 8011218:	4b3a      	ldr	r3, [pc, #232]	; (8011304 <SBUS_decoding+0xf4>)
 801121a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801121e:	f003 0308 	and.w	r3, r3, #8
 8011222:	2b00      	cmp	r3, #0
 8011224:	d005      	beq.n	8011232 <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 8011226:	4b37      	ldr	r3, [pc, #220]	; (8011304 <SBUS_decoding+0xf4>)
 8011228:	2200      	movs	r2, #0
 801122a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 801122e:	2300      	movs	r3, #0
 8011230:	e1f6      	b.n	8011620 <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 8011232:	4b34      	ldr	r3, [pc, #208]	; (8011304 <SBUS_decoding+0xf4>)
 8011234:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8011238:	3301      	adds	r3, #1
 801123a:	b2da      	uxtb	r2, r3
 801123c:	4b31      	ldr	r3, [pc, #196]	; (8011304 <SBUS_decoding+0xf4>)
 801123e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8011242:	4b30      	ldr	r3, [pc, #192]	; (8011304 <SBUS_decoding+0xf4>)
 8011244:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8011248:	2b40      	cmp	r3, #64	; 0x40
 801124a:	bf0c      	ite	eq
 801124c:	2301      	moveq	r3, #1
 801124e:	2300      	movne	r3, #0
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d003      	beq.n	801125e <SBUS_decoding+0x4e>
 8011256:	4b2b      	ldr	r3, [pc, #172]	; (8011304 <SBUS_decoding+0xf4>)
 8011258:	2200      	movs	r2, #0
 801125a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 801125e:	4b29      	ldr	r3, [pc, #164]	; (8011304 <SBUS_decoding+0xf4>)
 8011260:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011264:	f003 0304 	and.w	r3, r3, #4
 8011268:	2b00      	cmp	r3, #0
 801126a:	d013      	beq.n	8011294 <SBUS_decoding+0x84>
 801126c:	4b25      	ldr	r3, [pc, #148]	; (8011304 <SBUS_decoding+0xf4>)
 801126e:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 8011272:	4b24      	ldr	r3, [pc, #144]	; (8011304 <SBUS_decoding+0xf4>)
 8011274:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8011278:	4618      	mov	r0, r3
 801127a:	2301      	movs	r3, #1
 801127c:	4083      	lsls	r3, r0
 801127e:	469b      	mov	fp, r3
 8011280:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8011284:	ea4b 0301 	orr.w	r3, fp, r1
 8011288:	ea4c 0402 	orr.w	r4, ip, r2
 801128c:	4a1d      	ldr	r2, [pc, #116]	; (8011304 <SBUS_decoding+0xf4>)
 801128e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8011292:	e013      	b.n	80112bc <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 8011294:	4b1b      	ldr	r3, [pc, #108]	; (8011304 <SBUS_decoding+0xf4>)
 8011296:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 801129a:	4b1a      	ldr	r3, [pc, #104]	; (8011304 <SBUS_decoding+0xf4>)
 801129c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80112a0:	4618      	mov	r0, r3
 80112a2:	2301      	movs	r3, #1
 80112a4:	4083      	lsls	r3, r0
 80112a6:	43db      	mvns	r3, r3
 80112a8:	469b      	mov	fp, r3
 80112aa:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80112ae:	ea0b 0301 	and.w	r3, fp, r1
 80112b2:	ea0c 0402 	and.w	r4, ip, r2
 80112b6:	4a13      	ldr	r2, [pc, #76]	; (8011304 <SBUS_decoding+0xf4>)
 80112b8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 80112bc:	4b11      	ldr	r3, [pc, #68]	; (8011304 <SBUS_decoding+0xf4>)
 80112be:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80112c2:	4618      	mov	r0, r3
 80112c4:	4621      	mov	r1, r4
 80112c6:	f7ff ff43 	bl	8011150 <_bitCount64>
 80112ca:	4603      	mov	r3, r0
 80112cc:	461a      	mov	r2, r3
 80112ce:	4b0d      	ldr	r3, [pc, #52]	; (8011304 <SBUS_decoding+0xf4>)
 80112d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 80112d4:	4b0b      	ldr	r3, [pc, #44]	; (8011304 <SBUS_decoding+0xf4>)
 80112d6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80112da:	2b14      	cmp	r3, #20
 80112dc:	d904      	bls.n	80112e8 <SBUS_decoding+0xd8>
 80112de:	4b09      	ldr	r3, [pc, #36]	; (8011304 <SBUS_decoding+0xf4>)
 80112e0:	2201      	movs	r2, #1
 80112e2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80112e6:	e003      	b.n	80112f0 <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 80112e8:	4b06      	ldr	r3, [pc, #24]	; (8011304 <SBUS_decoding+0xf4>)
 80112ea:	2202      	movs	r2, #2
 80112ec:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 80112f0:	4b04      	ldr	r3, [pc, #16]	; (8011304 <SBUS_decoding+0xf4>)
 80112f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80112f6:	f003 0304 	and.w	r3, r3, #4
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d004      	beq.n	8011308 <SBUS_decoding+0xf8>
 80112fe:	2300      	movs	r3, #0
 8011300:	e18e      	b.n	8011620 <SBUS_decoding+0x410>
 8011302:	bf00      	nop
 8011304:	240010a0 	.word	0x240010a0

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 8011308:	4ba7      	ldr	r3, [pc, #668]	; (80115a8 <SBUS_decoding+0x398>)
 801130a:	7f9b      	ldrb	r3, [r3, #30]
 801130c:	b21a      	sxth	r2, r3
 801130e:	4ba6      	ldr	r3, [pc, #664]	; (80115a8 <SBUS_decoding+0x398>)
 8011310:	7fdb      	ldrb	r3, [r3, #31]
 8011312:	021b      	lsls	r3, r3, #8
 8011314:	b21b      	sxth	r3, r3
 8011316:	4313      	orrs	r3, r2
 8011318:	b21b      	sxth	r3, r3
 801131a:	b29b      	uxth	r3, r3
 801131c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011320:	b29a      	uxth	r2, r3
 8011322:	4ba1      	ldr	r3, [pc, #644]	; (80115a8 <SBUS_decoding+0x398>)
 8011324:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 8011326:	4ba0      	ldr	r3, [pc, #640]	; (80115a8 <SBUS_decoding+0x398>)
 8011328:	7fdb      	ldrb	r3, [r3, #31]
 801132a:	10db      	asrs	r3, r3, #3
 801132c:	b21a      	sxth	r2, r3
 801132e:	4b9e      	ldr	r3, [pc, #632]	; (80115a8 <SBUS_decoding+0x398>)
 8011330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011334:	015b      	lsls	r3, r3, #5
 8011336:	b21b      	sxth	r3, r3
 8011338:	4313      	orrs	r3, r2
 801133a:	b21b      	sxth	r3, r3
 801133c:	b29b      	uxth	r3, r3
 801133e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011342:	b29a      	uxth	r2, r3
 8011344:	4b98      	ldr	r3, [pc, #608]	; (80115a8 <SBUS_decoding+0x398>)
 8011346:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 8011348:	4b97      	ldr	r3, [pc, #604]	; (80115a8 <SBUS_decoding+0x398>)
 801134a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801134e:	119b      	asrs	r3, r3, #6
 8011350:	b21a      	sxth	r2, r3
 8011352:	4b95      	ldr	r3, [pc, #596]	; (80115a8 <SBUS_decoding+0x398>)
 8011354:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011358:	009b      	lsls	r3, r3, #2
 801135a:	b21b      	sxth	r3, r3
 801135c:	4313      	orrs	r3, r2
 801135e:	b21a      	sxth	r2, r3
 8011360:	4b91      	ldr	r3, [pc, #580]	; (80115a8 <SBUS_decoding+0x398>)
 8011362:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011366:	029b      	lsls	r3, r3, #10
 8011368:	b21b      	sxth	r3, r3
 801136a:	4313      	orrs	r3, r2
 801136c:	b21b      	sxth	r3, r3
 801136e:	b29b      	uxth	r3, r3
 8011370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011374:	b29a      	uxth	r2, r3
 8011376:	4b8c      	ldr	r3, [pc, #560]	; (80115a8 <SBUS_decoding+0x398>)
 8011378:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 801137a:	4b8b      	ldr	r3, [pc, #556]	; (80115a8 <SBUS_decoding+0x398>)
 801137c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011380:	105b      	asrs	r3, r3, #1
 8011382:	b21a      	sxth	r2, r3
 8011384:	4b88      	ldr	r3, [pc, #544]	; (80115a8 <SBUS_decoding+0x398>)
 8011386:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801138a:	01db      	lsls	r3, r3, #7
 801138c:	b21b      	sxth	r3, r3
 801138e:	4313      	orrs	r3, r2
 8011390:	b21b      	sxth	r3, r3
 8011392:	b29b      	uxth	r3, r3
 8011394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011398:	b29a      	uxth	r2, r3
 801139a:	4b83      	ldr	r3, [pc, #524]	; (80115a8 <SBUS_decoding+0x398>)
 801139c:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 801139e:	4b82      	ldr	r3, [pc, #520]	; (80115a8 <SBUS_decoding+0x398>)
 80113a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80113a4:	111b      	asrs	r3, r3, #4
 80113a6:	b21a      	sxth	r2, r3
 80113a8:	4b7f      	ldr	r3, [pc, #508]	; (80115a8 <SBUS_decoding+0x398>)
 80113aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80113ae:	011b      	lsls	r3, r3, #4
 80113b0:	b21b      	sxth	r3, r3
 80113b2:	4313      	orrs	r3, r2
 80113b4:	b21b      	sxth	r3, r3
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80113bc:	b29a      	uxth	r2, r3
 80113be:	4b7a      	ldr	r3, [pc, #488]	; (80115a8 <SBUS_decoding+0x398>)
 80113c0:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 80113c2:	4b79      	ldr	r3, [pc, #484]	; (80115a8 <SBUS_decoding+0x398>)
 80113c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80113c8:	11db      	asrs	r3, r3, #7
 80113ca:	b21a      	sxth	r2, r3
 80113cc:	4b76      	ldr	r3, [pc, #472]	; (80115a8 <SBUS_decoding+0x398>)
 80113ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80113d2:	005b      	lsls	r3, r3, #1
 80113d4:	b21b      	sxth	r3, r3
 80113d6:	4313      	orrs	r3, r2
 80113d8:	b21a      	sxth	r2, r3
 80113da:	4b73      	ldr	r3, [pc, #460]	; (80115a8 <SBUS_decoding+0x398>)
 80113dc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80113e0:	025b      	lsls	r3, r3, #9
 80113e2:	b21b      	sxth	r3, r3
 80113e4:	4313      	orrs	r3, r2
 80113e6:	b21b      	sxth	r3, r3
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	4b6d      	ldr	r3, [pc, #436]	; (80115a8 <SBUS_decoding+0x398>)
 80113f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 80113f6:	4b6c      	ldr	r3, [pc, #432]	; (80115a8 <SBUS_decoding+0x398>)
 80113f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80113fc:	109b      	asrs	r3, r3, #2
 80113fe:	b21a      	sxth	r2, r3
 8011400:	4b69      	ldr	r3, [pc, #420]	; (80115a8 <SBUS_decoding+0x398>)
 8011402:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011406:	019b      	lsls	r3, r3, #6
 8011408:	b21b      	sxth	r3, r3
 801140a:	4313      	orrs	r3, r2
 801140c:	b21b      	sxth	r3, r3
 801140e:	b29b      	uxth	r3, r3
 8011410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011414:	b29a      	uxth	r2, r3
 8011416:	4b64      	ldr	r3, [pc, #400]	; (80115a8 <SBUS_decoding+0x398>)
 8011418:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 801141c:	4b62      	ldr	r3, [pc, #392]	; (80115a8 <SBUS_decoding+0x398>)
 801141e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011422:	115b      	asrs	r3, r3, #5
 8011424:	b21a      	sxth	r2, r3
 8011426:	4b60      	ldr	r3, [pc, #384]	; (80115a8 <SBUS_decoding+0x398>)
 8011428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801142c:	00db      	lsls	r3, r3, #3
 801142e:	b21b      	sxth	r3, r3
 8011430:	4313      	orrs	r3, r2
 8011432:	b21b      	sxth	r3, r3
 8011434:	b29b      	uxth	r3, r3
 8011436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801143a:	b29a      	uxth	r2, r3
 801143c:	4b5a      	ldr	r3, [pc, #360]	; (80115a8 <SBUS_decoding+0x398>)
 801143e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 8011442:	4b59      	ldr	r3, [pc, #356]	; (80115a8 <SBUS_decoding+0x398>)
 8011444:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011448:	b21a      	sxth	r2, r3
 801144a:	4b57      	ldr	r3, [pc, #348]	; (80115a8 <SBUS_decoding+0x398>)
 801144c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8011450:	021b      	lsls	r3, r3, #8
 8011452:	b21b      	sxth	r3, r3
 8011454:	4313      	orrs	r3, r2
 8011456:	b21b      	sxth	r3, r3
 8011458:	b29b      	uxth	r3, r3
 801145a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801145e:	b29a      	uxth	r2, r3
 8011460:	4b51      	ldr	r3, [pc, #324]	; (80115a8 <SBUS_decoding+0x398>)
 8011462:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 8011466:	4b50      	ldr	r3, [pc, #320]	; (80115a8 <SBUS_decoding+0x398>)
 8011468:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801146c:	10db      	asrs	r3, r3, #3
 801146e:	b21a      	sxth	r2, r3
 8011470:	4b4d      	ldr	r3, [pc, #308]	; (80115a8 <SBUS_decoding+0x398>)
 8011472:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8011476:	015b      	lsls	r3, r3, #5
 8011478:	b21b      	sxth	r3, r3
 801147a:	4313      	orrs	r3, r2
 801147c:	b21b      	sxth	r3, r3
 801147e:	b29b      	uxth	r3, r3
 8011480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011484:	b29a      	uxth	r2, r3
 8011486:	4b48      	ldr	r3, [pc, #288]	; (80115a8 <SBUS_decoding+0x398>)
 8011488:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 801148c:	4b46      	ldr	r3, [pc, #280]	; (80115a8 <SBUS_decoding+0x398>)
 801148e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8011492:	119b      	asrs	r3, r3, #6
 8011494:	b21a      	sxth	r2, r3
 8011496:	4b44      	ldr	r3, [pc, #272]	; (80115a8 <SBUS_decoding+0x398>)
 8011498:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	b21b      	sxth	r3, r3
 80114a0:	4313      	orrs	r3, r2
 80114a2:	b21a      	sxth	r2, r3
 80114a4:	4b40      	ldr	r3, [pc, #256]	; (80115a8 <SBUS_decoding+0x398>)
 80114a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114aa:	029b      	lsls	r3, r3, #10
 80114ac:	b21b      	sxth	r3, r3
 80114ae:	4313      	orrs	r3, r2
 80114b0:	b21b      	sxth	r3, r3
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80114b8:	b29a      	uxth	r2, r3
 80114ba:	4b3b      	ldr	r3, [pc, #236]	; (80115a8 <SBUS_decoding+0x398>)
 80114bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 80114c0:	4b39      	ldr	r3, [pc, #228]	; (80115a8 <SBUS_decoding+0x398>)
 80114c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114c6:	105b      	asrs	r3, r3, #1
 80114c8:	b21a      	sxth	r2, r3
 80114ca:	4b37      	ldr	r3, [pc, #220]	; (80115a8 <SBUS_decoding+0x398>)
 80114cc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80114d0:	01db      	lsls	r3, r3, #7
 80114d2:	b21b      	sxth	r3, r3
 80114d4:	4313      	orrs	r3, r2
 80114d6:	b21b      	sxth	r3, r3
 80114d8:	b29b      	uxth	r3, r3
 80114da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80114de:	b29a      	uxth	r2, r3
 80114e0:	4b31      	ldr	r3, [pc, #196]	; (80115a8 <SBUS_decoding+0x398>)
 80114e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 80114e6:	4b30      	ldr	r3, [pc, #192]	; (80115a8 <SBUS_decoding+0x398>)
 80114e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80114ec:	111b      	asrs	r3, r3, #4
 80114ee:	b21a      	sxth	r2, r3
 80114f0:	4b2d      	ldr	r3, [pc, #180]	; (80115a8 <SBUS_decoding+0x398>)
 80114f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80114f6:	011b      	lsls	r3, r3, #4
 80114f8:	b21b      	sxth	r3, r3
 80114fa:	4313      	orrs	r3, r2
 80114fc:	b21b      	sxth	r3, r3
 80114fe:	b29b      	uxth	r3, r3
 8011500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011504:	b29a      	uxth	r2, r3
 8011506:	4b28      	ldr	r3, [pc, #160]	; (80115a8 <SBUS_decoding+0x398>)
 8011508:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 801150c:	4b26      	ldr	r3, [pc, #152]	; (80115a8 <SBUS_decoding+0x398>)
 801150e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011512:	11db      	asrs	r3, r3, #7
 8011514:	b21a      	sxth	r2, r3
 8011516:	4b24      	ldr	r3, [pc, #144]	; (80115a8 <SBUS_decoding+0x398>)
 8011518:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801151c:	005b      	lsls	r3, r3, #1
 801151e:	b21b      	sxth	r3, r3
 8011520:	4313      	orrs	r3, r2
 8011522:	b21a      	sxth	r2, r3
 8011524:	4b20      	ldr	r3, [pc, #128]	; (80115a8 <SBUS_decoding+0x398>)
 8011526:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801152a:	025b      	lsls	r3, r3, #9
 801152c:	b21b      	sxth	r3, r3
 801152e:	4313      	orrs	r3, r2
 8011530:	b21b      	sxth	r3, r3
 8011532:	b29b      	uxth	r3, r3
 8011534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011538:	b29a      	uxth	r2, r3
 801153a:	4b1b      	ldr	r3, [pc, #108]	; (80115a8 <SBUS_decoding+0x398>)
 801153c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 8011540:	4b19      	ldr	r3, [pc, #100]	; (80115a8 <SBUS_decoding+0x398>)
 8011542:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011546:	109b      	asrs	r3, r3, #2
 8011548:	b21a      	sxth	r2, r3
 801154a:	4b17      	ldr	r3, [pc, #92]	; (80115a8 <SBUS_decoding+0x398>)
 801154c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011550:	019b      	lsls	r3, r3, #6
 8011552:	b21b      	sxth	r3, r3
 8011554:	4313      	orrs	r3, r2
 8011556:	b21b      	sxth	r3, r3
 8011558:	b29b      	uxth	r3, r3
 801155a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801155e:	b29a      	uxth	r2, r3
 8011560:	4b11      	ldr	r3, [pc, #68]	; (80115a8 <SBUS_decoding+0x398>)
 8011562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 8011566:	4b10      	ldr	r3, [pc, #64]	; (80115a8 <SBUS_decoding+0x398>)
 8011568:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801156c:	115b      	asrs	r3, r3, #5
 801156e:	b21a      	sxth	r2, r3
 8011570:	4b0d      	ldr	r3, [pc, #52]	; (80115a8 <SBUS_decoding+0x398>)
 8011572:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011576:	00db      	lsls	r3, r3, #3
 8011578:	b21b      	sxth	r3, r3
 801157a:	4313      	orrs	r3, r2
 801157c:	b21b      	sxth	r3, r3
 801157e:	b29b      	uxth	r3, r3
 8011580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011584:	b29a      	uxth	r2, r3
 8011586:	4b08      	ldr	r3, [pc, #32]	; (80115a8 <SBUS_decoding+0x398>)
 8011588:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 801158c:	4b06      	ldr	r3, [pc, #24]	; (80115a8 <SBUS_decoding+0x398>)
 801158e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011592:	f003 0301 	and.w	r3, r3, #1
 8011596:	2b00      	cmp	r3, #0
 8011598:	d008      	beq.n	80115ac <SBUS_decoding+0x39c>
 801159a:	4b03      	ldr	r3, [pc, #12]	; (80115a8 <SBUS_decoding+0x398>)
 801159c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80115a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80115a4:	e007      	b.n	80115b6 <SBUS_decoding+0x3a6>
 80115a6:	bf00      	nop
 80115a8:	240010a0 	.word	0x240010a0
 80115ac:	4b1f      	ldr	r3, [pc, #124]	; (801162c <SBUS_decoding+0x41c>)
 80115ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80115b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 80115b6:	4b1d      	ldr	r3, [pc, #116]	; (801162c <SBUS_decoding+0x41c>)
 80115b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115bc:	f003 0302 	and.w	r3, r3, #2
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d005      	beq.n	80115d0 <SBUS_decoding+0x3c0>
 80115c4:	4b19      	ldr	r3, [pc, #100]	; (801162c <SBUS_decoding+0x41c>)
 80115c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80115ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80115ce:	e004      	b.n	80115da <SBUS_decoding+0x3ca>
 80115d0:	4b16      	ldr	r3, [pc, #88]	; (801162c <SBUS_decoding+0x41c>)
 80115d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80115d6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 80115da:	2300      	movs	r3, #0
 80115dc:	607b      	str	r3, [r7, #4]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2b11      	cmp	r3, #17
 80115e2:	dc1c      	bgt.n	801161e <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 80115e4:	4a11      	ldr	r2, [pc, #68]	; (801162c <SBUS_decoding+0x41c>)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	3318      	adds	r3, #24
 80115ea:	005b      	lsls	r3, r3, #1
 80115ec:	4413      	add	r3, r2
 80115ee:	88db      	ldrh	r3, [r3, #6]
 80115f0:	461a      	mov	r2, r3
 80115f2:	4613      	mov	r3, r2
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	4413      	add	r3, r2
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	da00      	bge.n	80115fe <SBUS_decoding+0x3ee>
 80115fc:	3307      	adds	r3, #7
 80115fe:	10db      	asrs	r3, r3, #3
 8011600:	b29b      	uxth	r3, r3
 8011602:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8011606:	b299      	uxth	r1, r3
 8011608:	4a08      	ldr	r2, [pc, #32]	; (801162c <SBUS_decoding+0x41c>)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	332c      	adds	r3, #44	; 0x2c
 801160e:	005b      	lsls	r3, r3, #1
 8011610:	4413      	add	r3, r2
 8011612:	460a      	mov	r2, r1
 8011614:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	3301      	adds	r3, #1
 801161a:	607b      	str	r3, [r7, #4]
 801161c:	e7df      	b.n	80115de <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 801161e:	2301      	movs	r3, #1
}
 8011620:	4618      	mov	r0, r3
 8011622:	3708      	adds	r7, #8
 8011624:	46bd      	mov	sp, r7
 8011626:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801162a:	bf00      	nop
 801162c:	240010a0 	.word	0x240010a0

08011630 <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 8011636:	2300      	movs	r3, #0
 8011638:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 801163a:	4b37      	ldr	r3, [pc, #220]	; (8011718 <SBUS_uartRxCpltCallback+0xe8>)
 801163c:	2200      	movs	r2, #0
 801163e:	701a      	strb	r2, [r3, #0]
 8011640:	4b35      	ldr	r3, [pc, #212]	; (8011718 <SBUS_uartRxCpltCallback+0xe8>)
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b18      	cmp	r3, #24
 8011646:	d862      	bhi.n	801170e <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 8011648:	4b33      	ldr	r3, [pc, #204]	; (8011718 <SBUS_uartRxCpltCallback+0xe8>)
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	461a      	mov	r2, r3
 801164e:	4b33      	ldr	r3, [pc, #204]	; (801171c <SBUS_uartRxCpltCallback+0xec>)
 8011650:	4413      	add	r3, r2
 8011652:	791a      	ldrb	r2, [r3, #4]
 8011654:	4b32      	ldr	r3, [pc, #200]	; (8011720 <SBUS_uartRxCpltCallback+0xf0>)
 8011656:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 8011658:	4b32      	ldr	r3, [pc, #200]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d120      	bne.n	80116a2 <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 8011660:	4b2f      	ldr	r3, [pc, #188]	; (8011720 <SBUS_uartRxCpltCallback+0xf0>)
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	2b0f      	cmp	r3, #15
 8011666:	d118      	bne.n	801169a <SBUS_uartRxCpltCallback+0x6a>
 8011668:	4b2f      	ldr	r3, [pc, #188]	; (8011728 <SBUS_uartRxCpltCallback+0xf8>)
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d005      	beq.n	801167c <SBUS_uartRxCpltCallback+0x4c>
 8011670:	4b2d      	ldr	r3, [pc, #180]	; (8011728 <SBUS_uartRxCpltCallback+0xf8>)
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	f003 030f 	and.w	r3, r3, #15
 8011678:	2b00      	cmp	r3, #0
 801167a:	d10e      	bne.n	801169a <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 801167c:	4b29      	ldr	r3, [pc, #164]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	4619      	mov	r1, r3
 8011682:	4b27      	ldr	r3, [pc, #156]	; (8011720 <SBUS_uartRxCpltCallback+0xf0>)
 8011684:	781a      	ldrb	r2, [r3, #0]
 8011686:	4b25      	ldr	r3, [pc, #148]	; (801171c <SBUS_uartRxCpltCallback+0xec>)
 8011688:	440b      	add	r3, r1
 801168a:	775a      	strb	r2, [r3, #29]
				_parserState++;
 801168c:	4b25      	ldr	r3, [pc, #148]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	3301      	adds	r3, #1
 8011692:	b2da      	uxtb	r2, r3
 8011694:	4b23      	ldr	r3, [pc, #140]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 8011696:	701a      	strb	r2, [r3, #0]
 8011698:	e02e      	b.n	80116f8 <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 801169a:	4b22      	ldr	r3, [pc, #136]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 801169c:	2200      	movs	r2, #0
 801169e:	701a      	strb	r2, [r3, #0]
 80116a0:	e02a      	b.n	80116f8 <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 80116a2:	4b20      	ldr	r3, [pc, #128]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	2b18      	cmp	r3, #24
 80116a8:	d80d      	bhi.n	80116c6 <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 80116aa:	4b1e      	ldr	r3, [pc, #120]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	4619      	mov	r1, r3
 80116b0:	4b1b      	ldr	r3, [pc, #108]	; (8011720 <SBUS_uartRxCpltCallback+0xf0>)
 80116b2:	781a      	ldrb	r2, [r3, #0]
 80116b4:	4b19      	ldr	r3, [pc, #100]	; (801171c <SBUS_uartRxCpltCallback+0xec>)
 80116b6:	440b      	add	r3, r1
 80116b8:	775a      	strb	r2, [r3, #29]
				_parserState++;
 80116ba:	4b1a      	ldr	r3, [pc, #104]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	3301      	adds	r3, #1
 80116c0:	b2da      	uxtb	r2, r3
 80116c2:	4b18      	ldr	r3, [pc, #96]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 80116c4:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 80116c6:	4b17      	ldr	r3, [pc, #92]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	2b19      	cmp	r3, #25
 80116cc:	d114      	bne.n	80116f8 <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 80116ce:	4b14      	ldr	r3, [pc, #80]	; (8011720 <SBUS_uartRxCpltCallback+0xf0>)
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d005      	beq.n	80116e2 <SBUS_uartRxCpltCallback+0xb2>
 80116d6:	4b12      	ldr	r3, [pc, #72]	; (8011720 <SBUS_uartRxCpltCallback+0xf0>)
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	f003 030f 	and.w	r3, r3, #15
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d107      	bne.n	80116f2 <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 80116e2:	4b10      	ldr	r3, [pc, #64]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 80116e4:	2200      	movs	r2, #0
 80116e6:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 80116e8:	f7ff fd92 	bl	8011210 <SBUS_decoding>
 80116ec:	4603      	mov	r3, r0
 80116ee:	71fb      	strb	r3, [r7, #7]
 80116f0:	e002      	b.n	80116f8 <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 80116f2:	4b0c      	ldr	r3, [pc, #48]	; (8011724 <SBUS_uartRxCpltCallback+0xf4>)
 80116f4:	2200      	movs	r2, #0
 80116f6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 80116f8:	4b09      	ldr	r3, [pc, #36]	; (8011720 <SBUS_uartRxCpltCallback+0xf0>)
 80116fa:	781a      	ldrb	r2, [r3, #0]
 80116fc:	4b0a      	ldr	r3, [pc, #40]	; (8011728 <SBUS_uartRxCpltCallback+0xf8>)
 80116fe:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 8011700:	4b05      	ldr	r3, [pc, #20]	; (8011718 <SBUS_uartRxCpltCallback+0xe8>)
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	3301      	adds	r3, #1
 8011706:	b2da      	uxtb	r2, r3
 8011708:	4b03      	ldr	r3, [pc, #12]	; (8011718 <SBUS_uartRxCpltCallback+0xe8>)
 801170a:	701a      	strb	r2, [r3, #0]
 801170c:	e798      	b.n	8011640 <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 801170e:	79fb      	ldrb	r3, [r7, #7]
}
 8011710:	4618      	mov	r0, r3
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	24001133 	.word	0x24001133
 801171c:	240010a0 	.word	0x240010a0
 8011720:	24001131 	.word	0x24001131
 8011724:	24001130 	.word	0x24001130
 8011728:	24001132 	.word	0x24001132

0801172c <SBUS_getChannel>:
//		printf("%d \t", sbus.compRcValue[i]);
//	}
//	printf("\r\n");
//}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 801172c:	b480      	push	{r7}
 801172e:	b083      	sub	sp, #12
 8011730:	af00      	add	r7, sp, #0
 8011732:	4603      	mov	r3, r0
 8011734:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 8011736:	79fb      	ldrb	r3, [r7, #7]
 8011738:	3b01      	subs	r3, #1
 801173a:	4a05      	ldr	r2, [pc, #20]	; (8011750 <SBUS_getChannel+0x24>)
 801173c:	332c      	adds	r3, #44	; 0x2c
 801173e:	005b      	lsls	r3, r3, #1
 8011740:	4413      	add	r3, r2
 8011742:	885b      	ldrh	r3, [r3, #2]
}
 8011744:	4618      	mov	r0, r3
 8011746:	370c      	adds	r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr
 8011750:	240010a0 	.word	0x240010a0

08011754 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>:
    SIMPLE_FUNC_IMPL(Health, Health, health)
 8011754:	b4b0      	push	{r4, r5, r7}
 8011756:	b085      	sub	sp, #20
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
 801175e:	2300      	movs	r3, #0
 8011760:	73fb      	strb	r3, [r7, #15]
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	e9d3 1200 	ldrd	r1, r2, [r3]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 801176e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011772:	42a2      	cmp	r2, r4
 8011774:	bf08      	it	eq
 8011776:	4299      	cmpeq	r1, r3
 8011778:	d001      	beq.n	801177e <_ZN2FC6MsgBus9getHealthEPNS_6HealthE+0x2a>
 801177a:	2301      	movs	r3, #1
 801177c:	73fb      	strb	r3, [r7, #15]
 801177e:	683a      	ldr	r2, [r7, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4615      	mov	r5, r2
 8011784:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 8011788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801178a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801178c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011790:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8011794:	7bfb      	ldrb	r3, [r7, #15]
 8011796:	4618      	mov	r0, r3
 8011798:	3714      	adds	r7, #20
 801179a:	46bd      	mov	sp, r7
 801179c:	bcb0      	pop	{r4, r5, r7}
 801179e:	4770      	bx	lr

080117a0 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>:
 80117a0:	b4b0      	push	{r4, r5, r7}
 80117a2:	b083      	sub	sp, #12
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	683a      	ldr	r2, [r7, #0]
 80117ae:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 80117b2:	4615      	mov	r5, r2
 80117b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80117b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80117b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80117bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80117c0:	bf00      	nop
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bcb0      	pop	{r4, r5, r7}
 80117c8:	4770      	bx	lr

080117ca <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>:
    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 80117ca:	b4b0      	push	{r4, r5, r7}
 80117cc:	b085      	sub	sp, #20
 80117ce:	af00      	add	r7, sp, #0
 80117d0:	6078      	str	r0, [r7, #4]
 80117d2:	6039      	str	r1, [r7, #0]
 80117d4:	2300      	movs	r3, #0
 80117d6:	73fb      	strb	r3, [r7, #15]
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	e9d3 1200 	ldrd	r1, r2, [r3]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80117e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80117e8:	42a2      	cmp	r2, r4
 80117ea:	bf08      	it	eq
 80117ec:	4299      	cmpeq	r1, r3
 80117ee:	d001      	beq.n	80117f4 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME+0x2a>
 80117f0:	2301      	movs	r3, #1
 80117f2:	73fb      	strb	r3, [r7, #15]
 80117f4:	683a      	ldr	r2, [r7, #0]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4615      	mov	r5, r2
 80117fa:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80117fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011802:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011806:	e885 0003 	stmia.w	r5, {r0, r1}
 801180a:	7bfb      	ldrb	r3, [r7, #15]
 801180c:	4618      	mov	r0, r3
 801180e:	3714      	adds	r7, #20
 8011810:	46bd      	mov	sp, r7
 8011812:	bcb0      	pop	{r4, r5, r7}
 8011814:	4770      	bx	lr
	...

08011818 <_ZN2FC24ModuleAttitudeController4mainEv>:
	static void main(){
 8011818:	b580      	push	{r7, lr}
 801181a:	b0f0      	sub	sp, #448	; 0x1c0
 801181c:	af00      	add	r7, sp, #0
		ModuleAttitudeController attitudeController;
 801181e:	463b      	mov	r3, r7
 8011820:	4618      	mov	r0, r3
 8011822:	f7fc ffc7 	bl	800e7b4 <_ZN2FC24ModuleAttitudeControllerC1Ev>
			if(osThreadFlagsGet() & AC_reset){
 8011826:	f015 fabf 	bl	8026da8 <osThreadFlagsGet>
 801182a:	4603      	mov	r3, r0
 801182c:	f003 0302 	and.w	r3, r3, #2
 8011830:	2b00      	cmp	r3, #0
 8011832:	bf14      	ite	ne
 8011834:	2301      	movne	r3, #1
 8011836:	2300      	moveq	r3, #0
 8011838:	b2db      	uxtb	r3, r3
 801183a:	2b00      	cmp	r3, #0
 801183c:	d006      	beq.n	801184c <_ZN2FC24ModuleAttitudeController4mainEv+0x34>
				osThreadFlagsClear(AC_reset);
 801183e:	2002      	movs	r0, #2
 8011840:	f015 fa62 	bl	8026d08 <osThreadFlagsClear>
				attitudeController.initialize();
 8011844:	463b      	mov	r3, r7
 8011846:	4618      	mov	r0, r3
 8011848:	f7f2 ff40 	bl	80046cc <_ZN23px4_AlgorithmModelClass10initializeEv>
			osThreadFlagsWait(AC_fromAHRS, osFlagsWaitAny, osWaitForever);
 801184c:	f04f 32ff 	mov.w	r2, #4294967295
 8011850:	2100      	movs	r1, #0
 8011852:	2001      	movs	r0, #1
 8011854:	f015 fadc 	bl	8026e10 <osThreadFlagsWait>
			attitudeController.oneStep();
 8011858:	463b      	mov	r3, r7
 801185a:	4618      	mov	r0, r3
 801185c:	f7fc ffb8 	bl	800e7d0 <_ZN2FC24ModuleAttitudeController7oneStepEv>
			freqCnt++;
 8011860:	4b03      	ldr	r3, [pc, #12]	; (8011870 <_ZN2FC24ModuleAttitudeController4mainEv+0x58>)
 8011862:	881b      	ldrh	r3, [r3, #0]
 8011864:	3301      	adds	r3, #1
 8011866:	b29a      	uxth	r2, r3
 8011868:	4b01      	ldr	r3, [pc, #4]	; (8011870 <_ZN2FC24ModuleAttitudeController4mainEv+0x58>)
 801186a:	801a      	strh	r2, [r3, #0]
			if(osThreadFlagsGet() & AC_reset){
 801186c:	e7db      	b.n	8011826 <_ZN2FC24ModuleAttitudeController4mainEv+0xe>
 801186e:	bf00      	nop
 8011870:	24001454 	.word	0x24001454

08011874 <_ZN2FC10ModuleAHRS4mainEv>:
	/*
	 *  ModuleAHRS main function
	 *  this function is called by CMSIS task function
	 *	wait signal from accelerometer and gyrometer
	 */
    static void main(){
 8011874:	b580      	push	{r7, lr}
 8011876:	b0ac      	sub	sp, #176	; 0xb0
 8011878:	af00      	add	r7, sp, #0
    	ModuleAHRS moduleAHRS;
 801187a:	463b      	mov	r3, r7
 801187c:	4618      	mov	r0, r3
 801187e:	f7fa fe2d 	bl	800c4dc <_ZN2FC10ModuleAHRSC1Ev>
    	uint8_t cnt = 0;
 8011882:	2300      	movs	r3, #0
 8011884:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    	while(1){
    		/* wait accel, gyro value set */
//    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
    		moduleAHRS.oneStep();
 8011888:	463b      	mov	r3, r7
 801188a:	4618      	mov	r0, r3
 801188c:	f7fa fe7c 	bl	800c588 <_ZN2FC10ModuleAHRS7oneStepEv>
    		if(cnt>4){
 8011890:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8011894:	2b04      	cmp	r3, #4
 8011896:	d905      	bls.n	80118a4 <_ZN2FC10ModuleAHRS4mainEv+0x30>
        		ModuleAttitudeController::setSignal(AC_fromAHRS);		/* 200hz */
 8011898:	2001      	movs	r0, #1
 801189a:	f7fd f9a3 	bl	800ebe4 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
        		cnt = 0;
 801189e:	2300      	movs	r3, #0
 80118a0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    		}

    		cnt++;
 80118a4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80118a8:	3301      	adds	r3, #1
 80118aa:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    		osDelay(1);			/* 1000hz */
 80118ae:	2001      	movs	r0, #1
 80118b0:	f015 fb42 	bl	8026f38 <osDelay>
    		moduleAHRS.oneStep();
 80118b4:	e7e8      	b.n	8011888 <_ZN2FC10ModuleAHRS4mainEv+0x14>
	...

080118b8 <_ZN2FC24ModulePositionController4mainEv>:

class ModulePositionController : public positionControlModelClass, public Freq<ModulePositionController> {
public:
	ModulePositionController();

	static void main(){
 80118b8:	b580      	push	{r7, lr}
 80118ba:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80118be:	af00      	add	r7, sp, #0
		uint8_t firstLoop;
		ModulePositionController positionController;
 80118c0:	463b      	mov	r3, r7
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fd fe94 	bl	800f5f0 <_ZN2FC24ModulePositionControllerC1Ev>
		while(1){
			firstLoop = 0;
 80118c8:	2300      	movs	r3, #0
 80118ca:	f887 33c7 	strb.w	r3, [r7, #967]	; 0x3c7
			/* wait position controller start */
			osThreadFlagsWait(PC_start, osFlagsWaitAny, osWaitForever);
 80118ce:	f04f 32ff 	mov.w	r2, #4294967295
 80118d2:	2100      	movs	r1, #0
 80118d4:	2002      	movs	r0, #2
 80118d6:	f015 fa9b 	bl	8026e10 <osThreadFlagsWait>
			while(1){
				/* if first loop or reset command, initialize */
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 80118da:	f897 33c7 	ldrb.w	r3, [r7, #967]	; 0x3c7
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d106      	bne.n	80118f0 <_ZN2FC24ModulePositionController4mainEv+0x38>
 80118e2:	f015 fa61 	bl	8026da8 <osThreadFlagsGet>
 80118e6:	4603      	mov	r3, r0
 80118e8:	f003 0308 	and.w	r3, r3, #8
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d001      	beq.n	80118f4 <_ZN2FC24ModulePositionController4mainEv+0x3c>
 80118f0:	2301      	movs	r3, #1
 80118f2:	e000      	b.n	80118f6 <_ZN2FC24ModulePositionController4mainEv+0x3e>
 80118f4:	2300      	movs	r3, #0
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d006      	beq.n	8011908 <_ZN2FC24ModulePositionController4mainEv+0x50>
					osThreadFlagsClear(PC_reset);
 80118fa:	2008      	movs	r0, #8
 80118fc:	f015 fa04 	bl	8026d08 <osThreadFlagsClear>
					positionController.initialize();
 8011900:	463b      	mov	r3, r7
 8011902:	4618      	mov	r0, r3
 8011904:	f7f3 fd40 	bl	8005388 <_ZN25positionControlModelClass10initializeEv>
				}

				/* wait EKF data */
				osThreadFlagsWait(PC_fromEKF, osFlagsWaitAny, osWaitForever);
 8011908:	f04f 32ff 	mov.w	r2, #4294967295
 801190c:	2100      	movs	r1, #0
 801190e:	2001      	movs	r0, #1
 8011910:	f015 fa7e 	bl	8026e10 <osThreadFlagsWait>
				positionController.oneStep();
 8011914:	463b      	mov	r3, r7
 8011916:	4618      	mov	r0, r3
 8011918:	f7fd fe78 	bl	800f60c <_ZN2FC24ModulePositionController7oneStepEv>

				/* check position controller stop */
				if(osThreadFlagsGet() & PC_stop){
 801191c:	f015 fa44 	bl	8026da8 <osThreadFlagsGet>
 8011920:	4603      	mov	r3, r0
 8011922:	f003 0304 	and.w	r3, r3, #4
 8011926:	2b00      	cmp	r3, #0
 8011928:	bf14      	ite	ne
 801192a:	2301      	movne	r3, #1
 801192c:	2300      	moveq	r3, #0
 801192e:	b2db      	uxtb	r3, r3
 8011930:	2b00      	cmp	r3, #0
 8011932:	d003      	beq.n	801193c <_ZN2FC24ModulePositionController4mainEv+0x84>
					osThreadFlagsClear(PC_stop);
 8011934:	2004      	movs	r0, #4
 8011936:	f015 f9e7 	bl	8026d08 <osThreadFlagsClear>
					break;
 801193a:	e012      	b.n	8011962 <_ZN2FC24ModulePositionController4mainEv+0xaa>
				}

				/* if first loop, send ACK */
				if(firstLoop < 2){
 801193c:	f897 33c7 	ldrb.w	r3, [r7, #967]	; 0x3c7
 8011940:	2b01      	cmp	r3, #1
 8011942:	d807      	bhi.n	8011954 <_ZN2FC24ModulePositionController4mainEv+0x9c>
					ModuleCommander::sendSignal(CMD_ACK);
 8011944:	2001      	movs	r0, #1
 8011946:	f7fd f9e9 	bl	800ed1c <_ZN2FC15ModuleCommander10sendSignalENS_9CmdSignalE>
					firstLoop++;
 801194a:	f897 33c7 	ldrb.w	r3, [r7, #967]	; 0x3c7
 801194e:	3301      	adds	r3, #1
 8011950:	f887 33c7 	strb.w	r3, [r7, #967]	; 0x3c7
				}
				freqCnt++;
 8011954:	4b03      	ldr	r3, [pc, #12]	; (8011964 <_ZN2FC24ModulePositionController4mainEv+0xac>)
 8011956:	881b      	ldrh	r3, [r3, #0]
 8011958:	3301      	adds	r3, #1
 801195a:	b29a      	uxth	r2, r3
 801195c:	4b01      	ldr	r3, [pc, #4]	; (8011964 <_ZN2FC24ModulePositionController4mainEv+0xac>)
 801195e:	801a      	strh	r2, [r3, #0]
				if(firstLoop || (osThreadFlagsGet() & PC_reset)){
 8011960:	e7bb      	b.n	80118da <_ZN2FC24ModulePositionController4mainEv+0x22>
			firstLoop = 0;
 8011962:	e7b1      	b.n	80118c8 <_ZN2FC24ModulePositionController4mainEv+0x10>
 8011964:	24001456 	.word	0x24001456

08011968 <_ZN2FC9ModuleINS4mainEv>:
};

class ModuleINS : public positionEstimatorModelClass, public Freq<ModuleINS> {
public:

	static void main(){
 8011968:	b580      	push	{r7, lr}
 801196a:	f5ad 6d76 	sub.w	sp, sp, #3936	; 0xf60
 801196e:	af00      	add	r7, sp, #0
		ModuleINS moduleINS;
 8011970:	463b      	mov	r3, r7
 8011972:	4618      	mov	r0, r3
 8011974:	f7fd fc72 	bl	800f25c <_ZN2FC9ModuleINSC1Ev>
		moduleINS.initialize();
 8011978:	463b      	mov	r3, r7
 801197a:	4618      	mov	r0, r3
 801197c:	f7f9 f862 	bl	800aa44 <_ZN27positionEstimatorModelClass10initializeEv>
		osDelay(2000);
 8011980:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8011984:	f015 fad8 	bl	8026f38 <osDelay>
		while(1){
			moduleINS.onestep();
 8011988:	463b      	mov	r3, r7
 801198a:	4618      	mov	r0, r3
 801198c:	f7fd fc8c 	bl	800f2a8 <_ZN2FC9ModuleINS7onestepEv>
			ModulePositionController::setSignal(PC_fromEKF);
 8011990:	2001      	movs	r0, #1
 8011992:	f7fd f915 	bl	800ebc0 <_ZN2FC24ModulePositionController9setSignalENS_8PcSignalE>
			freqCnt++;
 8011996:	4b05      	ldr	r3, [pc, #20]	; (80119ac <_ZN2FC9ModuleINS4mainEv+0x44>)
 8011998:	881b      	ldrh	r3, [r3, #0]
 801199a:	3301      	adds	r3, #1
 801199c:	b29a      	uxth	r2, r3
 801199e:	4b03      	ldr	r3, [pc, #12]	; (80119ac <_ZN2FC9ModuleINS4mainEv+0x44>)
 80119a0:	801a      	strh	r2, [r3, #0]
			osDelay(20);
 80119a2:	2014      	movs	r0, #20
 80119a4:	f015 fac8 	bl	8026f38 <osDelay>
			moduleINS.onestep();
 80119a8:	e7ee      	b.n	8011988 <_ZN2FC9ModuleINS4mainEv+0x20>
 80119aa:	bf00      	nop
 80119ac:	24001458 	.word	0x24001458

080119b0 <_ZN2FC12ModuleHealth4mainEv>:

namespace FC {

class ModuleHealth {
public:
	static void main(){
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b08a      	sub	sp, #40	; 0x28
 80119b4:	af00      	add	r7, sp, #0
		uint32_t tick;
		tick = osKernelGetTickCount();
 80119b6:	f015 f877 	bl	8026aa8 <osKernelGetTickCount>
 80119ba:	6278      	str	r0, [r7, #36]	; 0x24

		struct Health health;
		while(1){
			tick += 1000;
 80119bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80119c2:	627b      	str	r3, [r7, #36]	; 0x24
			osDelayUntil(tick);		/* 1hz */
 80119c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80119c6:	f015 fae5 	bl	8026f94 <osDelayUntil>

			health.accel = SensorAccel::checkFreq();
 80119ca:	f000 fecd 	bl	8012768 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>
 80119ce:	4603      	mov	r3, r0
 80119d0:	813b      	strh	r3, [r7, #8]
			health.gyro = SensorGyro::checkFreq();
 80119d2:	f000 fedb 	bl	801278c <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>
 80119d6:	4603      	mov	r3, r0
 80119d8:	817b      	strh	r3, [r7, #10]
			health.rc = RC::checkFreq();
 80119da:	f000 fee9 	bl	80127b0 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>
 80119de:	4603      	mov	r3, r0
 80119e0:	81bb      	strh	r3, [r7, #12]

			health.mag = SensorMag::checkFreq();
 80119e2:	f000 fef7 	bl	80127d4 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>
 80119e6:	4603      	mov	r3, r0
 80119e8:	81fb      	strh	r3, [r7, #14]
			health.gps = SensorGPS::checkFreq();
 80119ea:	f000 ff05 	bl	80127f8 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>
 80119ee:	4603      	mov	r3, r0
 80119f0:	823b      	strh	r3, [r7, #16]

			health.baro = SensorBaro::checkFreq();
 80119f2:	f000 ff13 	bl	801281c <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>
 80119f6:	4603      	mov	r3, r0
 80119f8:	827b      	strh	r3, [r7, #18]
			health.lidar = SensorLidar::checkFreq();
 80119fa:	f000 ff21 	bl	8012840 <_ZN2FC4FreqINS_11SensorLidarEE9checkFreqEv>
 80119fe:	4603      	mov	r3, r0
 8011a00:	82bb      	strh	r3, [r7, #20]

			health.ahrs = ModuleAHRS::checkFreq();
 8011a02:	f000 ff2f 	bl	8012864 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>
 8011a06:	4603      	mov	r3, r0
 8011a08:	82fb      	strh	r3, [r7, #22]
			health.ins = ModuleINS::checkFreq();
 8011a0a:	f000 ff3d 	bl	8012888 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	833b      	strh	r3, [r7, #24]

			health.attitudeController = ModuleAttitudeController::checkFreq();
 8011a12:	f000 ff4b 	bl	80128ac <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>
 8011a16:	4603      	mov	r3, r0
 8011a18:	837b      	strh	r3, [r7, #26]
			health.positionController = ModulePositionController::checkFreq();
 8011a1a:	f000 ff59 	bl	80128d0 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	83bb      	strh	r3, [r7, #28]
			//TODO auto, lidar health check
			health.autoController = 0;
 8011a22:	2300      	movs	r3, #0
 8011a24:	83fb      	strh	r3, [r7, #30]

			msgBus.setHealth(health);
 8011a26:	463b      	mov	r3, r7
 8011a28:	4619      	mov	r1, r3
 8011a2a:	480c      	ldr	r0, [pc, #48]	; (8011a5c <_ZN2FC12ModuleHealth4mainEv+0xac>)
 8011a2c:	f7ff feb8 	bl	80117a0 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>

			if(health.accel > ACCEL_THRESHOLD &&
 8011a30:	893b      	ldrh	r3, [r7, #8]
 8011a32:	2b96      	cmp	r3, #150	; 0x96
 8011a34:	d9c2      	bls.n	80119bc <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.gyro > GYRO_THRESHOLD &&
 8011a36:	897b      	ldrh	r3, [r7, #10]
			if(health.accel > ACCEL_THRESHOLD &&
 8011a38:	2b96      	cmp	r3, #150	; 0x96
 8011a3a:	d9bf      	bls.n	80119bc <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.rc > RC_THRESHOLD &&
 8011a3c:	89bb      	ldrh	r3, [r7, #12]
			   health.gyro > GYRO_THRESHOLD &&
 8011a3e:	2b64      	cmp	r3, #100	; 0x64
 8011a40:	d9bc      	bls.n	80119bc <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.ahrs > AHRS_THRESHOLD &&
 8011a42:	8afb      	ldrh	r3, [r7, #22]
			   health.rc > RC_THRESHOLD &&
 8011a44:	2b96      	cmp	r3, #150	; 0x96
 8011a46:	d9b9      	bls.n	80119bc <_ZN2FC12ModuleHealth4mainEv+0xc>
			   health.attitudeController > ATTITUDE_CTL_THRESHOLD){
 8011a48:	8b7b      	ldrh	r3, [r7, #26]
			   health.ahrs > AHRS_THRESHOLD &&
 8011a4a:	2b96      	cmp	r3, #150	; 0x96
 8011a4c:	d9b6      	bls.n	80119bc <_ZN2FC12ModuleHealth4mainEv+0xc>
				/* arm(attitude controller) enable */

				if(health.mag > MAG_THRESHOLD &&
 8011a4e:	89fb      	ldrh	r3, [r7, #14]
 8011a50:	2b32      	cmp	r3, #50	; 0x32
 8011a52:	d9b3      	bls.n	80119bc <_ZN2FC12ModuleHealth4mainEv+0xc>
						health.gps > GPS_THRESHOLD &&
 8011a54:	8a3b      	ldrh	r3, [r7, #16]
				if(health.mag > MAG_THRESHOLD &&
 8011a56:	2b03      	cmp	r3, #3
			tick += 1000;
 8011a58:	e7b0      	b.n	80119bc <_ZN2FC12ModuleHealth4mainEv+0xc>
 8011a5a:	bf00      	nop
 8011a5c:	240009b8 	.word	0x240009b8

08011a60 <_ZN2FC8ModuleSD4mainEv>:

class ModuleSD {
public:
   ModuleSD() = default;

   static void main(){
 8011a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a62:	b0fd      	sub	sp, #500	; 0x1f4
 8011a64:	af08      	add	r7, sp, #32
      uint8_t writeBuf[256];
      uint32_t bytesWritten = 0;
 8011a66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	601a      	str	r2, [r3, #0]
      uint8_t writeLen = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
      FRESULT res;

      /* 1. Mount - 0 */
      res=f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8011a74:	2200      	movs	r2, #0
 8011a76:	498a      	ldr	r1, [pc, #552]	; (8011ca0 <_ZN2FC8ModuleSD4mainEv+0x240>)
 8011a78:	488a      	ldr	r0, [pc, #552]	; (8011ca4 <_ZN2FC8ModuleSD4mainEv+0x244>)
 8011a7a:	f014 fa21 	bl	8025ec0 <f_mount>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
      osDelay(1000);
 8011a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011a88:	f015 fa56 	bl	8026f38 <osDelay>

      while(1){
         /* sdopen */
         res=f_open(&SDFile,"0:/log.txt", FA_OPEN_APPEND | FA_WRITE );
 8011a8c:	2232      	movs	r2, #50	; 0x32
 8011a8e:	4986      	ldr	r1, [pc, #536]	; (8011ca8 <_ZN2FC8ModuleSD4mainEv+0x248>)
 8011a90:	4886      	ldr	r0, [pc, #536]	; (8011cac <_ZN2FC8ModuleSD4mainEv+0x24c>)
 8011a92:	f014 fa79 	bl	8025f88 <f_open>
 8011a96:	4603      	mov	r3, r0
 8011a98:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
         if(res != FR_OK){
 8011a9c:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d005      	beq.n	8011ab0 <_ZN2FC8ModuleSD4mainEv+0x50>
            /* fail to open file */
			 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	2110      	movs	r1, #16
 8011aa8:	4881      	ldr	r0, [pc, #516]	; (8011cb0 <_ZN2FC8ModuleSD4mainEv+0x250>)
 8011aaa:	f006 fe89 	bl	80187c0 <HAL_GPIO_WritePin>
 8011aae:	e20d      	b.n	8011ecc <_ZN2FC8ModuleSD4mainEv+0x46c>
         }
         else{
        	 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	2110      	movs	r1, #16
 8011ab4:	487e      	ldr	r0, [pc, #504]	; (8011cb0 <_ZN2FC8ModuleSD4mainEv+0x250>)
 8011ab6:	f006 fe83 	bl	80187c0 <HAL_GPIO_WritePin>
			struct NedAccel nedAccel;
			struct GPS gps;
			struct Barometer baro;
			struct BodyAngularVelocity gyro;

            if(msgBus.getAttitude(&attitude)){
 8011aba:	463b      	mov	r3, r7
 8011abc:	4619      	mov	r1, r3
 8011abe:	487d      	ldr	r0, [pc, #500]	; (8011cb4 <_ZN2FC8ModuleSD4mainEv+0x254>)
 8011ac0:	f7fc fdd2 	bl	800e668 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d04f      	beq.n	8011b6a <_ZN2FC8ModuleSD4mainEv+0x10a>
               writeLen = sprintf((char*)writeBuf, "att %u %d %d %d\n", (uint)attitude.timestamp, (int)(attitude.roll*1000000),
 8011aca:	463b      	mov	r3, r7
 8011acc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	463b      	mov	r3, r7
 8011ad4:	edd3 7a06 	vldr	s15, [r3, #24]
 8011ad8:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8011cb8 <_ZN2FC8ModuleSD4mainEv+0x258>
 8011adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ae0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
                                             (int)(attitude.pitch*1000000),
 8011ae4:	463b      	mov	r3, r7
 8011ae6:	edd3 7a07 	vldr	s15, [r3, #28]
 8011aea:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8011cb8 <_ZN2FC8ModuleSD4mainEv+0x258>
 8011aee:	ee67 7a87 	vmul.f32	s15, s15, s14
               writeLen = sprintf((char*)writeBuf, "att %u %d %d %d\n", (uint)attitude.timestamp, (int)(attitude.roll*1000000),
 8011af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011af6:	ee17 2a90 	vmov	r2, s15
                                             (int)(attitude.yaw*1000000));
 8011afa:	463b      	mov	r3, r7
 8011afc:	edd3 7a08 	vldr	s15, [r3, #32]
 8011b00:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8011cb8 <_ZN2FC8ModuleSD4mainEv+0x258>
 8011b04:	ee67 7a87 	vmul.f32	s15, s15, s14
               writeLen = sprintf((char*)writeBuf, "att %u %d %d %d\n", (uint)attitude.timestamp, (int)(attitude.roll*1000000),
 8011b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b0c:	ee17 3a90 	vmov	r3, s15
 8011b10:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8011b14:	9301      	str	r3, [sp, #4]
 8011b16:	9200      	str	r2, [sp, #0]
 8011b18:	ee16 3a90 	vmov	r3, s13
 8011b1c:	460a      	mov	r2, r1
 8011b1e:	4967      	ldr	r1, [pc, #412]	; (8011cbc <_ZN2FC8ModuleSD4mainEv+0x25c>)
 8011b20:	f01c fc0e 	bl	802e340 <siprintf>
 8011b24:	4603      	mov	r3, r0
 8011b26:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
               res = f_write(&SDFile, (void const*)writeBuf, writeLen, (UINT*)&bytesWritten);
 8011b2a:	f897 21ce 	ldrb.w	r2, [r7, #462]	; 0x1ce
 8011b2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011b32:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8011b36:	485d      	ldr	r0, [pc, #372]	; (8011cac <_ZN2FC8ModuleSD4mainEv+0x24c>)
 8011b38:	f014 fbeb 	bl	8026312 <f_write>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
               if((bytesWritten == 0) || (res != FR_OK)){
 8011b42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d003      	beq.n	8011b54 <_ZN2FC8ModuleSD4mainEv+0xf4>
 8011b4c:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d005      	beq.n	8011b60 <_ZN2FC8ModuleSD4mainEv+0x100>
            	   /* fail to write file */
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8011b54:	2201      	movs	r2, #1
 8011b56:	2110      	movs	r1, #16
 8011b58:	4855      	ldr	r0, [pc, #340]	; (8011cb0 <_ZN2FC8ModuleSD4mainEv+0x250>)
 8011b5a:	f006 fe31 	bl	80187c0 <HAL_GPIO_WritePin>
 8011b5e:	e004      	b.n	8011b6a <_ZN2FC8ModuleSD4mainEv+0x10a>
               }
               else{
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8011b60:	2200      	movs	r2, #0
 8011b62:	2110      	movs	r1, #16
 8011b64:	4852      	ldr	r0, [pc, #328]	; (8011cb0 <_ZN2FC8ModuleSD4mainEv+0x250>)
 8011b66:	f006 fe2b 	bl	80187c0 <HAL_GPIO_WritePin>
               }
            }
            if(msgBus.getNedAccel(&nedAccel)){
 8011b6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b6e:	4619      	mov	r1, r3
 8011b70:	4850      	ldr	r0, [pc, #320]	; (8011cb4 <_ZN2FC8ModuleSD4mainEv+0x254>)
 8011b72:	f7fd fb17 	bl	800f1a4 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d053      	beq.n	8011c24 <_ZN2FC8ModuleSD4mainEv+0x1c4>
               writeLen=sprintf((char*)writeBuf,"accNED %u %d %d %d\n",(uint)nedAccel.timestamp,(int)(nedAccel.xyz[0]*1000000),
 8011b7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011b84:	4619      	mov	r1, r3
 8011b86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8011b8e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8011cb8 <_ZN2FC8ModuleSD4mainEv+0x258>
 8011b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b96:	eefd 6ae7 	vcvt.s32.f32	s13, s15
                                                         (int)(nedAccel.xyz[1]*1000000),
 8011b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011b9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8011ba2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8011cb8 <_ZN2FC8ModuleSD4mainEv+0x258>
 8011ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
               writeLen=sprintf((char*)writeBuf,"accNED %u %d %d %d\n",(uint)nedAccel.timestamp,(int)(nedAccel.xyz[0]*1000000),
 8011baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bae:	ee17 2a90 	vmov	r2, s15
                                                         (int)(nedAccel.xyz[2]*1000000));
 8011bb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011bb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8011bba:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8011cb8 <_ZN2FC8ModuleSD4mainEv+0x258>
 8011bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
               writeLen=sprintf((char*)writeBuf,"accNED %u %d %d %d\n",(uint)nedAccel.timestamp,(int)(nedAccel.xyz[0]*1000000),
 8011bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bc6:	ee17 3a90 	vmov	r3, s15
 8011bca:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8011bce:	9301      	str	r3, [sp, #4]
 8011bd0:	9200      	str	r2, [sp, #0]
 8011bd2:	ee16 3a90 	vmov	r3, s13
 8011bd6:	460a      	mov	r2, r1
 8011bd8:	4939      	ldr	r1, [pc, #228]	; (8011cc0 <_ZN2FC8ModuleSD4mainEv+0x260>)
 8011bda:	f01c fbb1 	bl	802e340 <siprintf>
 8011bde:	4603      	mov	r3, r0
 8011be0:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
               res = f_write(&SDFile, (void const*)writeBuf, writeLen, (UINT*)&bytesWritten);
 8011be4:	f897 21ce 	ldrb.w	r2, [r7, #462]	; 0x1ce
 8011be8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011bec:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8011bf0:	482e      	ldr	r0, [pc, #184]	; (8011cac <_ZN2FC8ModuleSD4mainEv+0x24c>)
 8011bf2:	f014 fb8e 	bl	8026312 <f_write>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
               if((bytesWritten == 0) || (res != FR_OK)){
 8011bfc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d003      	beq.n	8011c0e <_ZN2FC8ModuleSD4mainEv+0x1ae>
 8011c06:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d005      	beq.n	8011c1a <_ZN2FC8ModuleSD4mainEv+0x1ba>
                   /* fail to write file */
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8011c0e:	2201      	movs	r2, #1
 8011c10:	2110      	movs	r1, #16
 8011c12:	4827      	ldr	r0, [pc, #156]	; (8011cb0 <_ZN2FC8ModuleSD4mainEv+0x250>)
 8011c14:	f006 fdd4 	bl	80187c0 <HAL_GPIO_WritePin>
 8011c18:	e004      	b.n	8011c24 <_ZN2FC8ModuleSD4mainEv+0x1c4>
               }
               else{
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	2110      	movs	r1, #16
 8011c1e:	4824      	ldr	r0, [pc, #144]	; (8011cb0 <_ZN2FC8ModuleSD4mainEv+0x250>)
 8011c20:	f006 fdce 	bl	80187c0 <HAL_GPIO_WritePin>
               }
            }
            if(msgBus.getBodyAngularVelocity(&gyro)){
 8011c24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011c28:	4619      	mov	r1, r3
 8011c2a:	4822      	ldr	r0, [pc, #136]	; (8011cb4 <_ZN2FC8ModuleSD4mainEv+0x254>)
 8011c2c:	f7fa fbbd 	bl	800c3aa <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d04d      	beq.n	8011cd2 <_ZN2FC8ModuleSD4mainEv+0x272>
               writeLen = sprintf((char*)writeBuf,"gyro %u %d\n",(uint)gyro.timestamp,(int)(gyro.xyz[2]*1000000));
 8011c36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011c3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011c44:	edd3 7a04 	vldr	s15, [r3, #16]
 8011c48:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8011cb8 <_ZN2FC8ModuleSD4mainEv+0x258>
 8011c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c54:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8011c58:	ee17 3a90 	vmov	r3, s15
 8011c5c:	4919      	ldr	r1, [pc, #100]	; (8011cc4 <_ZN2FC8ModuleSD4mainEv+0x264>)
 8011c5e:	f01c fb6f 	bl	802e340 <siprintf>
 8011c62:	4603      	mov	r3, r0
 8011c64:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
               res = f_write(&SDFile, writeBuf, writeLen, (UINT*)&bytesWritten);
 8011c68:	f897 21ce 	ldrb.w	r2, [r7, #462]	; 0x1ce
 8011c6c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011c70:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8011c74:	480d      	ldr	r0, [pc, #52]	; (8011cac <_ZN2FC8ModuleSD4mainEv+0x24c>)
 8011c76:	f014 fb4c 	bl	8026312 <f_write>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
               if((bytesWritten == 0) || (res != FR_OK)){
 8011c80:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d003      	beq.n	8011c92 <_ZN2FC8ModuleSD4mainEv+0x232>
 8011c8a:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d01a      	beq.n	8011cc8 <_ZN2FC8ModuleSD4mainEv+0x268>
                   /* fail to write file */
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8011c92:	2201      	movs	r2, #1
 8011c94:	2110      	movs	r1, #16
 8011c96:	4806      	ldr	r0, [pc, #24]	; (8011cb0 <_ZN2FC8ModuleSD4mainEv+0x250>)
 8011c98:	f006 fd92 	bl	80187c0 <HAL_GPIO_WritePin>
 8011c9c:	e019      	b.n	8011cd2 <_ZN2FC8ModuleSD4mainEv+0x272>
 8011c9e:	bf00      	nop
 8011ca0:	2400cefc 	.word	0x2400cefc
 8011ca4:	2400d130 	.word	0x2400d130
 8011ca8:	0802f060 	.word	0x0802f060
 8011cac:	2400cf00 	.word	0x2400cf00
 8011cb0:	58021400 	.word	0x58021400
 8011cb4:	240009b8 	.word	0x240009b8
 8011cb8:	49742400 	.word	0x49742400
 8011cbc:	0802f06c 	.word	0x0802f06c
 8011cc0:	0802f080 	.word	0x0802f080
 8011cc4:	0802f094 	.word	0x0802f094
               }
               else{
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8011cc8:	2200      	movs	r2, #0
 8011cca:	2110      	movs	r1, #16
 8011ccc:	4884      	ldr	r0, [pc, #528]	; (8011ee0 <_ZN2FC8ModuleSD4mainEv+0x480>)
 8011cce:	f006 fd77 	bl	80187c0 <HAL_GPIO_WritePin>
               }
            }
            if(msgBus.getGPS(&gps)){
 8011cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	4882      	ldr	r0, [pc, #520]	; (8011ee4 <_ZN2FC8ModuleSD4mainEv+0x484>)
 8011cda:	f7fd f9ff 	bl	800f0dc <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f000 80ae 	beq.w	8011e42 <_ZN2FC8ModuleSD4mainEv+0x3e2>
               int32_t latDecimal = (int32_t)gps.lat;
 8011ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011cea:	ed93 7b04 	vldr	d7, [r3, #16]
 8011cee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011cf2:	ee17 3a90 	vmov	r3, s15
 8011cf6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
               int32_t latFraction = (int32_t)((gps.lat-latDecimal)*100000000);
 8011cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011cfe:	ed93 6b04 	vldr	d6, [r3, #16]
 8011d02:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8011d06:	ee07 3a90 	vmov	s15, r3
 8011d0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011d0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011d12:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8011ed8 <_ZN2FC8ModuleSD4mainEv+0x478>
 8011d16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d1a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011d1e:	ee17 3a90 	vmov	r3, s15
 8011d22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
               int32_t lonDecimal = (int32_t)gps.lon;
 8011d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011d2a:	ed93 7b06 	vldr	d7, [r3, #24]
 8011d2e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011d32:	ee17 3a90 	vmov	r3, s15
 8011d36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
               int32_t lonFraction = (int32_t)((gps.lon-lonDecimal)*100000000);
 8011d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011d3e:	ed93 6b06 	vldr	d6, [r3, #24]
 8011d42:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8011d46:	ee07 3a90 	vmov	s15, r3
 8011d4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011d4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011d52:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8011ed8 <_ZN2FC8ModuleSD4mainEv+0x478>
 8011d56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d5a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011d5e:	ee17 3a90 	vmov	r3, s15
 8011d62:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
               writeLen=sprintf((char*)writeBuf,"GPS %u %d.%d %d.%d %d %d %d %d\n", gps.timestamp,
 8011d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
                                                     latDecimal, latFraction,
                                                     lonDecimal, lonFraction,
                                                     (int)(gps.alt*1000000),
 8011d6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d72:	edd2 7a08 	vldr	s15, [r2, #32]
 8011d76:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8011ee8 <_ZN2FC8ModuleSD4mainEv+0x488>
 8011d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
               writeLen=sprintf((char*)writeBuf,"GPS %u %d.%d %d.%d %d %d %d %d\n", gps.timestamp,
 8011d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d82:	ee17 1a90 	vmov	r1, s15
                                                     (int)(gps.velN*1000000),
 8011d86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011d8a:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8011d8e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8011ee8 <_ZN2FC8ModuleSD4mainEv+0x488>
 8011d92:	ee67 7a87 	vmul.f32	s15, s15, s14
               writeLen=sprintf((char*)writeBuf,"GPS %u %d.%d %d.%d %d %d %d %d\n", gps.timestamp,
 8011d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d9a:	ee17 5a90 	vmov	r5, s15
                                                     (int)(gps.velE*1000000),
 8011d9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011da2:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8011da6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8011ee8 <_ZN2FC8ModuleSD4mainEv+0x488>
 8011daa:	ee67 7a87 	vmul.f32	s15, s15, s14
               writeLen=sprintf((char*)writeBuf,"GPS %u %d.%d %d.%d %d %d %d %d\n", gps.timestamp,
 8011dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011db2:	ee17 6a90 	vmov	r6, s15
                                                     (int)(gps.velD*1000000));
 8011db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011dba:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8011dbe:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8011ee8 <_ZN2FC8ModuleSD4mainEv+0x488>
 8011dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
               writeLen=sprintf((char*)writeBuf,"GPS %u %d.%d %d.%d %d %d %d %d\n", gps.timestamp,
 8011dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011dca:	ee17 2a90 	vmov	r2, s15
 8011dce:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8011dd2:	9207      	str	r2, [sp, #28]
 8011dd4:	9606      	str	r6, [sp, #24]
 8011dd6:	9505      	str	r5, [sp, #20]
 8011dd8:	9104      	str	r1, [sp, #16]
 8011dda:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8011dde:	9203      	str	r2, [sp, #12]
 8011de0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8011de4:	9202      	str	r2, [sp, #8]
 8011de6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8011dea:	9201      	str	r2, [sp, #4]
 8011dec:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8011df0:	9200      	str	r2, [sp, #0]
 8011df2:	461a      	mov	r2, r3
 8011df4:	4623      	mov	r3, r4
 8011df6:	493d      	ldr	r1, [pc, #244]	; (8011eec <_ZN2FC8ModuleSD4mainEv+0x48c>)
 8011df8:	f01c faa2 	bl	802e340 <siprintf>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
               res = f_write(&SDFile, writeBuf, writeLen, (UINT*)&bytesWritten);
 8011e02:	f897 21ce 	ldrb.w	r2, [r7, #462]	; 0x1ce
 8011e06:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011e0a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8011e0e:	4838      	ldr	r0, [pc, #224]	; (8011ef0 <_ZN2FC8ModuleSD4mainEv+0x490>)
 8011e10:	f014 fa7f 	bl	8026312 <f_write>
 8011e14:	4603      	mov	r3, r0
 8011e16:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
               if((bytesWritten == 0) || (res != FR_OK)){
 8011e1a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d003      	beq.n	8011e2c <_ZN2FC8ModuleSD4mainEv+0x3cc>
 8011e24:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d005      	beq.n	8011e38 <_ZN2FC8ModuleSD4mainEv+0x3d8>
                   /* fail to write file */
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	2110      	movs	r1, #16
 8011e30:	482b      	ldr	r0, [pc, #172]	; (8011ee0 <_ZN2FC8ModuleSD4mainEv+0x480>)
 8011e32:	f006 fcc5 	bl	80187c0 <HAL_GPIO_WritePin>
 8011e36:	e004      	b.n	8011e42 <_ZN2FC8ModuleSD4mainEv+0x3e2>
               }
               else{
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8011e38:	2200      	movs	r2, #0
 8011e3a:	2110      	movs	r1, #16
 8011e3c:	4828      	ldr	r0, [pc, #160]	; (8011ee0 <_ZN2FC8ModuleSD4mainEv+0x480>)
 8011e3e:	f006 fcbf 	bl	80187c0 <HAL_GPIO_WritePin>
               }
            }   // Lat Lon Alt velN velE velD
            if(msgBus.getBarometer(&baro)){
 8011e42:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011e46:	4619      	mov	r1, r3
 8011e48:	4826      	ldr	r0, [pc, #152]	; (8011ee4 <_ZN2FC8ModuleSD4mainEv+0x484>)
 8011e4a:	f7fd f967 	bl	800f11c <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d035      	beq.n	8011ec0 <_ZN2FC8ModuleSD4mainEv+0x460>
               writeLen=sprintf((char*)writeBuf,"Baro %u %d\n",(uint)baro.timestamp,(int)(baro.pressure*1000000));
 8011e54:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011e58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011e62:	edd3 7a02 	vldr	s15, [r3, #8]
 8011e66:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8011ee8 <_ZN2FC8ModuleSD4mainEv+0x488>
 8011e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e72:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8011e76:	ee17 3a90 	vmov	r3, s15
 8011e7a:	491e      	ldr	r1, [pc, #120]	; (8011ef4 <_ZN2FC8ModuleSD4mainEv+0x494>)
 8011e7c:	f01c fa60 	bl	802e340 <siprintf>
 8011e80:	4603      	mov	r3, r0
 8011e82:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
               f_write(&SDFile, writeBuf, writeLen, (UINT*)&bytesWritten);
 8011e86:	f897 21ce 	ldrb.w	r2, [r7, #462]	; 0x1ce
 8011e8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011e8e:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8011e92:	4817      	ldr	r0, [pc, #92]	; (8011ef0 <_ZN2FC8ModuleSD4mainEv+0x490>)
 8011e94:	f014 fa3d 	bl	8026312 <f_write>
               if((bytesWritten == 0) || (res != FR_OK)){
 8011e98:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d003      	beq.n	8011eaa <_ZN2FC8ModuleSD4mainEv+0x44a>
 8011ea2:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d005      	beq.n	8011eb6 <_ZN2FC8ModuleSD4mainEv+0x456>
                   /* fail to write file */
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8011eaa:	2201      	movs	r2, #1
 8011eac:	2110      	movs	r1, #16
 8011eae:	480c      	ldr	r0, [pc, #48]	; (8011ee0 <_ZN2FC8ModuleSD4mainEv+0x480>)
 8011eb0:	f006 fc86 	bl	80187c0 <HAL_GPIO_WritePin>
 8011eb4:	e004      	b.n	8011ec0 <_ZN2FC8ModuleSD4mainEv+0x460>
               }
               else{
            	   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	2110      	movs	r1, #16
 8011eba:	4809      	ldr	r0, [pc, #36]	; (8011ee0 <_ZN2FC8ModuleSD4mainEv+0x480>)
 8011ebc:	f006 fc80 	bl	80187c0 <HAL_GPIO_WritePin>
               }
            }
            res=f_close(&SDFile);
 8011ec0:	480b      	ldr	r0, [pc, #44]	; (8011ef0 <_ZN2FC8ModuleSD4mainEv+0x490>)
 8011ec2:	f014 fc53 	bl	802676c <f_close>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
         }
         osDelay(5);         /* 10hz */
 8011ecc:	2005      	movs	r0, #5
 8011ece:	f015 f833 	bl	8026f38 <osDelay>
      }
 8011ed2:	e5db      	b.n	8011a8c <_ZN2FC8ModuleSD4mainEv+0x2c>
 8011ed4:	f3af 8000 	nop.w
 8011ed8:	00000000 	.word	0x00000000
 8011edc:	4197d784 	.word	0x4197d784
 8011ee0:	58021400 	.word	0x58021400
 8011ee4:	240009b8 	.word	0x240009b8
 8011ee8:	49742400 	.word	0x49742400
 8011eec:	0802f0a0 	.word	0x0802f0a0
 8011ef0:	2400cf00 	.word	0x2400cf00
 8011ef4:	0802f0c0 	.word	0x0802f0c0

08011ef8 <_putchar>:
uint32_t channel;

uint16_t timeCheck;
int test = 0;

void _putchar(char character){
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	4603      	mov	r3, r0
 8011f00:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, (uint8_t*)&character, 1, 10);
 8011f02:	1df9      	adds	r1, r7, #7
 8011f04:	230a      	movs	r3, #10
 8011f06:	2201      	movs	r2, #1
 8011f08:	4803      	ldr	r0, [pc, #12]	; (8011f18 <_putchar+0x20>)
 8011f0a:	f00f fb57 	bl	80215bc <HAL_UART_Transmit>
}
 8011f0e:	bf00      	nop
 8011f10:	3708      	adds	r7, #8
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	2400c858 	.word	0x2400c858

08011f1c <Health_StartTask>:

void Health_StartTask(void *argument){
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
	ModuleHealth::main();
 8011f24:	f7ff fd44 	bl	80119b0 <_ZN2FC12ModuleHealth4mainEv>
}
 8011f28:	bf00      	nop
 8011f2a:	3708      	adds	r7, #8
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <Debug_StartTask>:

void Debug_StartTask(void *argument){
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b0f0      	sub	sp, #448	; 0x1c0
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	1d3b      	adds	r3, r7, #4
 8011f38:	6018      	str	r0, [r3, #0]
	uint32_t tick;
	tick = osKernelGetTickCount();
 8011f3a:	f014 fdb5 	bl	8026aa8 <osKernelGetTickCount>
 8011f3e:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc

	struct Lidar lidar;
//	osDelay(2000);
//	sensorBaro.setSeaLevelPressure(gps.alt);
	while(1){
		tick += 5;
 8011f42:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011f46:	3305      	adds	r3, #5
 8011f48:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		osDelayUntil(tick);
 8011f4c:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8011f50:	f015 f820 	bl	8026f94 <osDelayUntil>
		msgBus.getHealth(&health);
 8011f54:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8011f58:	4619      	mov	r1, r3
 8011f5a:	48b4      	ldr	r0, [pc, #720]	; (801222c <Debug_StartTask+0x2fc>)
 8011f5c:	f7ff fbfa 	bl	8011754 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>
		hzAccel = health.accel;
 8011f60:	f8b7 21a0 	ldrh.w	r2, [r7, #416]	; 0x1a0
 8011f64:	4bb2      	ldr	r3, [pc, #712]	; (8012230 <Debug_StartTask+0x300>)
 8011f66:	801a      	strh	r2, [r3, #0]
		hzBaro = health.baro;
 8011f68:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8011f6c:	4bb1      	ldr	r3, [pc, #708]	; (8012234 <Debug_StartTask+0x304>)
 8011f6e:	801a      	strh	r2, [r3, #0]
		hzGyro = health.gyro;
 8011f70:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 8011f74:	4bb0      	ldr	r3, [pc, #704]	; (8012238 <Debug_StartTask+0x308>)
 8011f76:	801a      	strh	r2, [r3, #0]
		hzGPS = health.gps;
 8011f78:	f8b7 21a8 	ldrh.w	r2, [r7, #424]	; 0x1a8
 8011f7c:	4baf      	ldr	r3, [pc, #700]	; (801223c <Debug_StartTask+0x30c>)
 8011f7e:	801a      	strh	r2, [r3, #0]
		hzMag = health.mag;
 8011f80:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 8011f84:	4bae      	ldr	r3, [pc, #696]	; (8012240 <Debug_StartTask+0x310>)
 8011f86:	801a      	strh	r2, [r3, #0]
		hzAHRS = health.ahrs;
 8011f88:	f8b7 21ae 	ldrh.w	r2, [r7, #430]	; 0x1ae
 8011f8c:	4bad      	ldr	r3, [pc, #692]	; (8012244 <Debug_StartTask+0x314>)
 8011f8e:	801a      	strh	r2, [r3, #0]
		hzRC = health.rc;
 8011f90:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8011f94:	4bac      	ldr	r3, [pc, #688]	; (8012248 <Debug_StartTask+0x318>)
 8011f96:	801a      	strh	r2, [r3, #0]
		hzAtti = health.attitudeController;
 8011f98:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	; 0x1b2
 8011f9c:	4bab      	ldr	r3, [pc, #684]	; (801224c <Debug_StartTask+0x31c>)
 8011f9e:	801a      	strh	r2, [r3, #0]
		hzPos = health.positionController;
 8011fa0:	f8b7 21b4 	ldrh.w	r2, [r7, #436]	; 0x1b4
 8011fa4:	4baa      	ldr	r3, [pc, #680]	; (8012250 <Debug_StartTask+0x320>)
 8011fa6:	801a      	strh	r2, [r3, #0]
		hzINS = health.ins;
 8011fa8:	f8b7 21b0 	ldrh.w	r2, [r7, #432]	; 0x1b0
 8011fac:	4ba9      	ldr	r3, [pc, #676]	; (8012254 <Debug_StartTask+0x324>)
 8011fae:	801a      	strh	r2, [r3, #0]
		hzLidar = health.lidar;
 8011fb0:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8011fb4:	4ba8      	ldr	r3, [pc, #672]	; (8012258 <Debug_StartTask+0x328>)
 8011fb6:	801a      	strh	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

		msgBus.getMotorPWM(&pwm);
 8011fb8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	489b      	ldr	r0, [pc, #620]	; (801222c <Debug_StartTask+0x2fc>)
 8011fc0:	f7ff fc03 	bl	80117ca <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>
		pwm1 = pwm.m1;
 8011fc4:	f8b7 2188 	ldrh.w	r2, [r7, #392]	; 0x188
 8011fc8:	4ba4      	ldr	r3, [pc, #656]	; (801225c <Debug_StartTask+0x32c>)
 8011fca:	801a      	strh	r2, [r3, #0]
		pwm2 = pwm.m2;
 8011fcc:	f8b7 218a 	ldrh.w	r2, [r7, #394]	; 0x18a
 8011fd0:	4ba3      	ldr	r3, [pc, #652]	; (8012260 <Debug_StartTask+0x330>)
 8011fd2:	801a      	strh	r2, [r3, #0]
		pwm3 = pwm.m3;
 8011fd4:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8011fd8:	4ba2      	ldr	r3, [pc, #648]	; (8012264 <Debug_StartTask+0x334>)
 8011fda:	801a      	strh	r2, [r3, #0]
		pwm4 = pwm.m4;
 8011fdc:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8011fe0:	4ba1      	ldr	r3, [pc, #644]	; (8012268 <Debug_StartTask+0x338>)
 8011fe2:	801a      	strh	r2, [r3, #0]
		pwm5 = pwm.m5;
 8011fe4:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8011fe8:	4ba0      	ldr	r3, [pc, #640]	; (801226c <Debug_StartTask+0x33c>)
 8011fea:	801a      	strh	r2, [r3, #0]
		pwm6 = pwm.m6;
 8011fec:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8011ff0:	4b9f      	ldr	r3, [pc, #636]	; (8012270 <Debug_StartTask+0x340>)
 8011ff2:	801a      	strh	r2, [r3, #0]

		if(msgBus.getLidar(&lidar)){
 8011ff4:	f107 0308 	add.w	r3, r7, #8
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	488c      	ldr	r0, [pc, #560]	; (801222c <Debug_StartTask+0x2fc>)
 8011ffc:	f7fd f8b2 	bl	800f164 <_ZN2FC6MsgBus8getLidarEPNS_5LidarE>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d00a      	beq.n	801201c <Debug_StartTask+0xec>
			lidar_alt = lidar.altitude;
 8012006:	f107 0308 	add.w	r3, r7, #8
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	4a99      	ldr	r2, [pc, #612]	; (8012274 <Debug_StartTask+0x344>)
 801200e:	6013      	str	r3, [r2, #0]
			lidar_valid = lidar.valid;
 8012010:	f107 0308 	add.w	r3, r7, #8
 8012014:	7b1b      	ldrb	r3, [r3, #12]
 8012016:	461a      	mov	r2, r3
 8012018:	4b97      	ldr	r3, [pc, #604]	; (8012278 <Debug_StartTask+0x348>)
 801201a:	701a      	strb	r2, [r3, #0]
		}

		msgBus.getAttitude(&att);
 801201c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012020:	4619      	mov	r1, r3
 8012022:	4882      	ldr	r0, [pc, #520]	; (801222c <Debug_StartTask+0x2fc>)
 8012024:	f7fc fb20 	bl	800e668 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
		att_roll = att.roll;
 8012028:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801202c:	4a93      	ldr	r2, [pc, #588]	; (801227c <Debug_StartTask+0x34c>)
 801202e:	6013      	str	r3, [r2, #0]
		att_pitch = att.pitch;
 8012030:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8012034:	4a92      	ldr	r2, [pc, #584]	; (8012280 <Debug_StartTask+0x350>)
 8012036:	6013      	str	r3, [r2, #0]
		att_yaw = att.yaw;
 8012038:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801203c:	4a91      	ldr	r2, [pc, #580]	; (8012284 <Debug_StartTask+0x354>)
 801203e:	6013      	str	r3, [r2, #0]

		msgBus.getController(&ctl);
 8012040:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8012044:	4619      	mov	r1, r3
 8012046:	4879      	ldr	r0, [pc, #484]	; (801222c <Debug_StartTask+0x2fc>)
 8012048:	f7fc faca 	bl	800e5e0 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
		ctl_roll = ctl.roll;
 801204c:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8012050:	4b8d      	ldr	r3, [pc, #564]	; (8012288 <Debug_StartTask+0x358>)
 8012052:	801a      	strh	r2, [r3, #0]
		ctl_pitch = ctl.pitch;
 8012054:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
 8012058:	4b8c      	ldr	r3, [pc, #560]	; (801228c <Debug_StartTask+0x35c>)
 801205a:	801a      	strh	r2, [r3, #0]
		ctl_yaw = ctl.yaw;
 801205c:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8012060:	4b8b      	ldr	r3, [pc, #556]	; (8012290 <Debug_StartTask+0x360>)
 8012062:	801a      	strh	r2, [r3, #0]
		ctl_throtle = ctl.throttle;
 8012064:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8012068:	4b8a      	ldr	r3, [pc, #552]	; (8012294 <Debug_StartTask+0x364>)
 801206a:	801a      	strh	r2, [r3, #0]

		if(msgBus.getBodyAccel(&bodyAccel)){
 801206c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012070:	4619      	mov	r1, r3
 8012072:	486e      	ldr	r0, [pc, #440]	; (801222c <Debug_StartTask+0x2fc>)
 8012074:	f7fa f976 	bl	800c364 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
 8012078:	4603      	mov	r3, r0
 801207a:	2b00      	cmp	r3, #0
 801207c:	d00e      	beq.n	801209c <Debug_StartTask+0x16c>
			body_ax = bodyAccel.xyz[0];
 801207e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	4a84      	ldr	r2, [pc, #528]	; (8012298 <Debug_StartTask+0x368>)
 8012086:	6013      	str	r3, [r2, #0]
			body_ay = bodyAccel.xyz[1];
 8012088:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	4a83      	ldr	r2, [pc, #524]	; (801229c <Debug_StartTask+0x36c>)
 8012090:	6013      	str	r3, [r2, #0]
			body_az = bodyAccel.xyz[2];
 8012092:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	4a81      	ldr	r2, [pc, #516]	; (80122a0 <Debug_StartTask+0x370>)
 801209a:	6013      	str	r3, [r2, #0]
		}
		if(msgBus.getBodyAngularVelocity(&bodyAnglularVel)){
 801209c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80120a0:	4619      	mov	r1, r3
 80120a2:	4862      	ldr	r0, [pc, #392]	; (801222c <Debug_StartTask+0x2fc>)
 80120a4:	f7fa f981 	bl	800c3aa <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d00e      	beq.n	80120cc <Debug_StartTask+0x19c>
			body_gx = bodyAnglularVel.xyz[0];
 80120ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80120b2:	689b      	ldr	r3, [r3, #8]
 80120b4:	4a7b      	ldr	r2, [pc, #492]	; (80122a4 <Debug_StartTask+0x374>)
 80120b6:	6013      	str	r3, [r2, #0]
			body_gy = bodyAnglularVel.xyz[1];
 80120b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	4a7a      	ldr	r2, [pc, #488]	; (80122a8 <Debug_StartTask+0x378>)
 80120c0:	6013      	str	r3, [r2, #0]
			body_gz = bodyAnglularVel.xyz[2];
 80120c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80120c6:	691b      	ldr	r3, [r3, #16]
 80120c8:	4a78      	ldr	r2, [pc, #480]	; (80122ac <Debug_StartTask+0x37c>)
 80120ca:	6013      	str	r3, [r2, #0]
		}
//		osKernelLock();
		if(msgBus.getBarometer(&baro)){
 80120cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80120d0:	4619      	mov	r1, r3
 80120d2:	4856      	ldr	r0, [pc, #344]	; (801222c <Debug_StartTask+0x2fc>)
 80120d4:	f7fd f822 	bl	800f11c <_ZN2FC6MsgBus12getBarometerEPNS_9BarometerE>
 80120d8:	4603      	mov	r3, r0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d003      	beq.n	80120e6 <Debug_StartTask+0x1b6>
			baro_alt = baro.altitude;
 80120de:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80120e2:	4a73      	ldr	r2, [pc, #460]	; (80122b0 <Debug_StartTask+0x380>)
 80120e4:	6013      	str	r3, [r2, #0]
//			printf_("baro : %u %f\r\n", (unsigned int)baro.timestamp, baro_alt);
		}

		if(msgBus.getNedAccel(&nedAccel)){
 80120e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80120ea:	4619      	mov	r1, r3
 80120ec:	484f      	ldr	r0, [pc, #316]	; (801222c <Debug_StartTask+0x2fc>)
 80120ee:	f7fd f859 	bl	800f1a4 <_ZN2FC6MsgBus11getNedAccelEPNS_8NedAccelE>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d00b      	beq.n	8012110 <Debug_StartTask+0x1e0>
			ned_ax = nedAccel.xyz[0];
 80120f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80120fc:	4a6d      	ldr	r2, [pc, #436]	; (80122b4 <Debug_StartTask+0x384>)
 80120fe:	6013      	str	r3, [r2, #0]
			ned_ay = nedAccel.xyz[1];
 8012100:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8012104:	4a6c      	ldr	r2, [pc, #432]	; (80122b8 <Debug_StartTask+0x388>)
 8012106:	6013      	str	r3, [r2, #0]
			ned_az = nedAccel.xyz[2];
 8012108:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801210c:	4a6b      	ldr	r2, [pc, #428]	; (80122bc <Debug_StartTask+0x38c>)
 801210e:	6013      	str	r3, [r2, #0]
//			printf_("ned accel : %u %f %f %f\r\n", (unsigned int)nedAccel.timestamp, nedAccel.xyz[0], nedAccel.xyz[1], nedAccel.xyz[2]);
		}

		if(msgBus.getGPS(&gps)){
 8012110:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8012114:	4619      	mov	r1, r3
 8012116:	4845      	ldr	r0, [pc, #276]	; (801222c <Debug_StartTask+0x2fc>)
 8012118:	f7fc ffe0 	bl	800f0dc <_ZN2FC6MsgBus6getGPSEPNS_3GPSE>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d016      	beq.n	8012150 <Debug_StartTask+0x220>
			gps_lat = gps.lat;
 8012122:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8012126:	ed93 7b04 	vldr	d7, [r3, #16]
 801212a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801212e:	4b64      	ldr	r3, [pc, #400]	; (80122c0 <Debug_StartTask+0x390>)
 8012130:	edc3 7a00 	vstr	s15, [r3]
			gps_lon = gps.lon;
 8012134:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8012138:	ed93 7b06 	vldr	d7, [r3, #24]
 801213c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012140:	4b60      	ldr	r3, [pc, #384]	; (80122c4 <Debug_StartTask+0x394>)
 8012142:	edc3 7a00 	vstr	s15, [r3]
			gps_alt = gps.alt;
 8012146:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801214a:	6a1b      	ldr	r3, [r3, #32]
 801214c:	4a5e      	ldr	r2, [pc, #376]	; (80122c8 <Debug_StartTask+0x398>)
 801214e:	6013      	str	r3, [r2, #0]
//			printf_("GPS : %u %f %f %f %f %f %f %f %u %f %f\r\n", (unsigned int)gps.timestamp, gps.lat, gps.lon, gps.alt, gps.velN, gps.velE
//						   , gps.direction, gps.vel
//						   , gps.fixType, gps.hdop, gps.vdop);
		}

		if(msgBus.getLocalPosition(&localPosition)){
 8012150:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012154:	4619      	mov	r1, r3
 8012156:	4835      	ldr	r0, [pc, #212]	; (801222c <Debug_StartTask+0x2fc>)
 8012158:	f7fc fcb6 	bl	800eac8 <_ZN2FC6MsgBus16getLocalPositionEPNS_13LocalPositionE>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d017      	beq.n	8012192 <Debug_StartTask+0x262>
			local_x = localPosition.x;
 8012162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012166:	4a59      	ldr	r2, [pc, #356]	; (80122cc <Debug_StartTask+0x39c>)
 8012168:	6013      	str	r3, [r2, #0]
			local_y = localPosition.y;
 801216a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801216e:	4a58      	ldr	r2, [pc, #352]	; (80122d0 <Debug_StartTask+0x3a0>)
 8012170:	6013      	str	r3, [r2, #0]
			local_z = localPosition.z;
 8012172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012176:	4a57      	ldr	r2, [pc, #348]	; (80122d4 <Debug_StartTask+0x3a4>)
 8012178:	6013      	str	r3, [r2, #0]
			local_vx = localPosition.vx;
 801217a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801217e:	4a56      	ldr	r2, [pc, #344]	; (80122d8 <Debug_StartTask+0x3a8>)
 8012180:	6013      	str	r3, [r2, #0]
			local_vy = localPosition.vy;
 8012182:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012186:	4a55      	ldr	r2, [pc, #340]	; (80122dc <Debug_StartTask+0x3ac>)
 8012188:	6013      	str	r3, [r2, #0]
			local_vz = localPosition.vz;
 801218a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801218e:	4a54      	ldr	r2, [pc, #336]	; (80122e0 <Debug_StartTask+0x3b0>)
 8012190:	6013      	str	r3, [r2, #0]
//			printf_("ned position : %u %f %f %f\r\n", (unsigned int)localPosition.timestamp, local_x, local_y, local_z);
		}

		if(msgBus.getBodyMag(&bodyMag)){
 8012192:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012196:	4619      	mov	r1, r3
 8012198:	4824      	ldr	r0, [pc, #144]	; (801222c <Debug_StartTask+0x2fc>)
 801219a:	f7fa f92a 	bl	800c3f2 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 801219e:	4603      	mov	r3, r0
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d00e      	beq.n	80121c2 <Debug_StartTask+0x292>
			mag_x = bodyMag.xyz[0];
 80121a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80121a8:	689b      	ldr	r3, [r3, #8]
 80121aa:	4a4e      	ldr	r2, [pc, #312]	; (80122e4 <Debug_StartTask+0x3b4>)
 80121ac:	6013      	str	r3, [r2, #0]
			mag_y = bodyMag.xyz[1];
 80121ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	4a4c      	ldr	r2, [pc, #304]	; (80122e8 <Debug_StartTask+0x3b8>)
 80121b6:	6013      	str	r3, [r2, #0]
			mag_z = bodyMag.xyz[2];
 80121b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80121bc:	691b      	ldr	r3, [r3, #16]
 80121be:	4a4b      	ldr	r2, [pc, #300]	; (80122ec <Debug_StartTask+0x3bc>)
 80121c0:	6013      	str	r3, [r2, #0]
		}

		if(msgBus.getModeFlag(&modeFlag)){
 80121c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80121c6:	4619      	mov	r1, r3
 80121c8:	4818      	ldr	r0, [pc, #96]	; (801222c <Debug_StartTask+0x2fc>)
 80121ca:	f7fc fa75 	bl	800e6b8 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d00b      	beq.n	80121ec <Debug_StartTask+0x2bc>
			mode_arm = (uint8_t)modeFlag.armMode;
 80121d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	4b44      	ldr	r3, [pc, #272]	; (80122f0 <Debug_StartTask+0x3c0>)
 80121de:	701a      	strb	r2, [r3, #0]
			mode_flight = (uint8_t)modeFlag.flightMode;
 80121e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	b2da      	uxtb	r2, r3
 80121e8:	4b42      	ldr	r3, [pc, #264]	; (80122f4 <Debug_StartTask+0x3c4>)
 80121ea:	701a      	strb	r2, [r3, #0]
		}

		if(msgBus.getVehicleAttitueSP(&attitudeSP)){
 80121ec:	f107 0318 	add.w	r3, r7, #24
 80121f0:	4619      	mov	r1, r3
 80121f2:	480e      	ldr	r0, [pc, #56]	; (801222c <Debug_StartTask+0x2fc>)
 80121f4:	f7fc fa14 	bl	800e620 <_ZN2FC6MsgBus19getVehicleAttitueSPEPNS_16VehicleAttitueSPE>
 80121f8:	4603      	mov	r3, r0
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	f43f aea1 	beq.w	8011f42 <Debug_StartTask+0x12>
			sp_roll = attitudeSP.roll;
 8012200:	f107 0318 	add.w	r3, r7, #24
 8012204:	689b      	ldr	r3, [r3, #8]
 8012206:	4a3c      	ldr	r2, [pc, #240]	; (80122f8 <Debug_StartTask+0x3c8>)
 8012208:	6013      	str	r3, [r2, #0]
			sp_pitch = attitudeSP.pitch;
 801220a:	f107 0318 	add.w	r3, r7, #24
 801220e:	68db      	ldr	r3, [r3, #12]
 8012210:	4a3a      	ldr	r2, [pc, #232]	; (80122fc <Debug_StartTask+0x3cc>)
 8012212:	6013      	str	r3, [r2, #0]
			sp_throtle = attitudeSP.throttle;
 8012214:	f107 0318 	add.w	r3, r7, #24
 8012218:	695b      	ldr	r3, [r3, #20]
 801221a:	4a39      	ldr	r2, [pc, #228]	; (8012300 <Debug_StartTask+0x3d0>)
 801221c:	6013      	str	r3, [r2, #0]
			sp_yaw = attitudeSP.yawRate;
 801221e:	f107 0318 	add.w	r3, r7, #24
 8012222:	691b      	ldr	r3, [r3, #16]
 8012224:	4a37      	ldr	r2, [pc, #220]	; (8012304 <Debug_StartTask+0x3d4>)
 8012226:	6013      	str	r3, [r2, #0]
		tick += 5;
 8012228:	e68b      	b.n	8011f42 <Debug_StartTask+0x12>
 801222a:	bf00      	nop
 801222c:	240009b8 	.word	0x240009b8
 8012230:	240013ae 	.word	0x240013ae
 8012234:	240013b0 	.word	0x240013b0
 8012238:	240013b2 	.word	0x240013b2
 801223c:	240013b4 	.word	0x240013b4
 8012240:	240013b6 	.word	0x240013b6
 8012244:	240013b8 	.word	0x240013b8
 8012248:	240013ba 	.word	0x240013ba
 801224c:	240013bc 	.word	0x240013bc
 8012250:	240013be 	.word	0x240013be
 8012254:	240013c0 	.word	0x240013c0
 8012258:	240013c2 	.word	0x240013c2
 801225c:	240013c4 	.word	0x240013c4
 8012260:	240013c6 	.word	0x240013c6
 8012264:	240013c8 	.word	0x240013c8
 8012268:	240013ca 	.word	0x240013ca
 801226c:	240013cc 	.word	0x240013cc
 8012270:	240013ce 	.word	0x240013ce
 8012274:	2400144c 	.word	0x2400144c
 8012278:	24001450 	.word	0x24001450
 801227c:	240013d0 	.word	0x240013d0
 8012280:	240013d4 	.word	0x240013d4
 8012284:	240013d8 	.word	0x240013d8
 8012288:	240013dc 	.word	0x240013dc
 801228c:	240013de 	.word	0x240013de
 8012290:	240013e0 	.word	0x240013e0
 8012294:	240013e2 	.word	0x240013e2
 8012298:	24001418 	.word	0x24001418
 801229c:	2400141c 	.word	0x2400141c
 80122a0:	24001420 	.word	0x24001420
 80122a4:	24001424 	.word	0x24001424
 80122a8:	24001428 	.word	0x24001428
 80122ac:	2400142c 	.word	0x2400142c
 80122b0:	240013e4 	.word	0x240013e4
 80122b4:	240013e8 	.word	0x240013e8
 80122b8:	240013ec 	.word	0x240013ec
 80122bc:	240013f0 	.word	0x240013f0
 80122c0:	2400140c 	.word	0x2400140c
 80122c4:	24001410 	.word	0x24001410
 80122c8:	24001414 	.word	0x24001414
 80122cc:	240013f4 	.word	0x240013f4
 80122d0:	240013f8 	.word	0x240013f8
 80122d4:	240013fc 	.word	0x240013fc
 80122d8:	24001400 	.word	0x24001400
 80122dc:	24001404 	.word	0x24001404
 80122e0:	24001408 	.word	0x24001408
 80122e4:	24001430 	.word	0x24001430
 80122e8:	24001434 	.word	0x24001434
 80122ec:	24001438 	.word	0x24001438
 80122f0:	24001451 	.word	0x24001451
 80122f4:	24001452 	.word	0x24001452
 80122f8:	2400143c 	.word	0x2400143c
 80122fc:	24001440 	.word	0x24001440
 8012300:	24001444 	.word	0x24001444
 8012304:	24001448 	.word	0x24001448

08012308 <MPU9250_StartTask>:

//		osDelay(5);
	}
}

void MPU9250_StartTask(void *argument){
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = osKernelGetTickCount();
 8012310:	f014 fbca 	bl	8026aa8 <osKernelGetTickCount>
 8012314:	60f8      	str	r0, [r7, #12]
	while(1){
		tick += 5;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	3305      	adds	r3, #5
 801231a:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick);/* 200hz */
 801231c:	68f8      	ldr	r0, [r7, #12]
 801231e:	f014 fe39 	bl	8026f94 <osDelayUntil>
		MPU9250_updateDMA();
 8012322:	f7ee fea3 	bl	800106c <MPU9250_updateDMA>
		tick += 5;
 8012326:	e7f6      	b.n	8012316 <MPU9250_StartTask+0xe>

08012328 <BME280_StartTask>:
	}
}
void BME280_StartTask(void *argument){
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
	while(1){
		BME280_readIT();
 8012330:	f7ef fda2 	bl	8001e78 <BME280_readIT>
		osDelay(20); 			/* 50hz */
 8012334:	2014      	movs	r0, #20
 8012336:	f014 fdff 	bl	8026f38 <osDelay>
		BME280_readIT();
 801233a:	e7f9      	b.n	8012330 <BME280_StartTask+0x8>

0801233c <IST8310_StartTask>:
	}
}
void IST8310_StartTask(void *argument){
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
	while(1){
//		IST8310_updataIT();
		osDelay(10); 			/* 100hz */
 8012344:	200a      	movs	r0, #10
 8012346:	f014 fdf7 	bl	8026f38 <osDelay>
 801234a:	e7fb      	b.n	8012344 <IST8310_StartTask+0x8>

0801234c <SD_StartTask>:
	}
}
void SD_StartTask(void *argument){
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
	ModuleSD::main();
 8012354:	f7ff fb84 	bl	8011a60 <_ZN2FC8ModuleSD4mainEv>
}
 8012358:	bf00      	nop
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <AHRS_StartTask>:

void AHRS_StartTask(void *argument){
 8012360:	b580      	push	{r7, lr}
 8012362:	b082      	sub	sp, #8
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
	ModuleAHRS::main();
 8012368:	f7ff fa84 	bl	8011874 <_ZN2FC10ModuleAHRS4mainEv>
}
 801236c:	bf00      	nop
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}

08012374 <Commander_StartTask>:

void Commander_StartTask(void *argument){
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
	ModuleCommander::main();
 801237c:	f7fc fc6e 	bl	800ec5c <_ZN2FC15ModuleCommander4mainEv>
}
 8012380:	bf00      	nop
 8012382:	3708      	adds	r7, #8
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <Buzzer_StartTask>:

void Buzzer_StartTask(void *argument){
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
//	ModuleBuzzer::main();
	while(1){
		osDelay(100);
 8012390:	2064      	movs	r0, #100	; 0x64
 8012392:	f014 fdd1 	bl	8026f38 <osDelay>
 8012396:	e7fb      	b.n	8012390 <Buzzer_StartTask+0x8>

08012398 <AC_StartTask>:
	}
}

void AC_StartTask(void *argument){
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
	ModuleAttitudeController::main();
 80123a0:	f7ff fa3a 	bl	8011818 <_ZN2FC24ModuleAttitudeController4mainEv>
}
 80123a4:	bf00      	nop
 80123a6:	3708      	adds	r7, #8
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <INS_StartTask>:

void INS_StartTask(void *argument){
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
	ModuleINS::main();
 80123b4:	f7ff fad8 	bl	8011968 <_ZN2FC9ModuleINS4mainEv>
}
 80123b8:	bf00      	nop
 80123ba:	3708      	adds	r7, #8
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}

080123c0 <PC_StartTask>:

void PC_StartTask(void *argument){
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
	ModulePositionController::main();
 80123c8:	f7ff fa76 	bl	80118b8 <_ZN2FC24ModulePositionController4mainEv>
}
 80123cc:	bf00      	nop
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <cppMain>:
/*
 *  LED signal
 *  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 */

void cppMain(){
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b084      	sub	sp, #16
 80123d8:	af04      	add	r7, sp, #16
    setvbuf(stdout, NULL, _IONBF, 0);
 80123da:	4b21      	ldr	r3, [pc, #132]	; (8012460 <cppMain+0x8c>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	6898      	ldr	r0, [r3, #8]
 80123e0:	2300      	movs	r3, #0
 80123e2:	2202      	movs	r2, #2
 80123e4:	2100      	movs	r1, #0
 80123e6:	f01b fefd 	bl	802e1e4 <setvbuf>
    printf_("test\r\n");
 80123ea:	481e      	ldr	r0, [pc, #120]	; (8012464 <cppMain+0x90>)
 80123ec:	f7f9 ff6a 	bl	800c2c4 <printf_>

    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 80123f0:	481d      	ldr	r0, [pc, #116]	; (8012468 <cppMain+0x94>)
 80123f2:	f00d fb59 	bl	801faa8 <HAL_TIM_Base_Start_IT>
	 * \setting		i2c1
	 * 				fastmode
	 * 				using global interrupt
	 * 				using dma_rx
	 */
	MPU9250(&hi2c1);
 80123f6:	481d      	ldr	r0, [pc, #116]	; (801246c <cppMain+0x98>)
 80123f8:	f7ee fda8 	bl	8000f4c <MPU9250>
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(&hi2c2, P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 80123fc:	2300      	movs	r3, #0
 80123fe:	9302      	str	r3, [sp, #8]
 8012400:	2304      	movs	r3, #4
 8012402:	9301      	str	r3, [sp, #4]
 8012404:	2303      	movs	r3, #3
 8012406:	9300      	str	r3, [sp, #0]
 8012408:	2301      	movs	r3, #1
 801240a:	2201      	movs	r2, #1
 801240c:	2103      	movs	r1, #3
 801240e:	4818      	ldr	r0, [pc, #96]	; (8012470 <cppMain+0x9c>)
 8012410:	f7ef fc3a 	bl	8001c88 <BME280_init>
	/*
	 *  \setting		uart8
	 *  				baudrate		38400
	 *  				rx_dma(circular)
	 */
    TM_GPS_Init(&huart8);
 8012414:	4817      	ldr	r0, [pc, #92]	; (8012474 <cppMain+0xa0>)
 8012416:	f7f0 f81f 	bl	8002458 <TM_GPS_Init>
     *  				word length			9bits
     *  				parity				even
     *  				stop_bits			2
     *  				rx_dma(circular)
     */
	SBUS_init(&huart7);
 801241a:	4817      	ldr	r0, [pc, #92]	; (8012478 <cppMain+0xa4>)
 801241c:	f7fe fec4 	bl	80111a8 <SBUS_init>

	Lidar1D_init(&htim15, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8012420:	2204      	movs	r2, #4
 8012422:	2100      	movs	r1, #0
 8012424:	4815      	ldr	r0, [pc, #84]	; (801247c <cppMain+0xa8>)
 8012426:	f7ee fcc7 	bl	8000db8 <Lidar1D_init>
	Lidar1D_run();
 801242a:	f7ee fd41 	bl	8000eb0 <Lidar1D_run>

	m1.start();
 801242e:	4814      	ldr	r0, [pc, #80]	; (8012480 <cppMain+0xac>)
 8012430:	f7ee fb49 	bl	8000ac6 <_ZN2FC5Motor5startEv>
	m2.start();
 8012434:	4813      	ldr	r0, [pc, #76]	; (8012484 <cppMain+0xb0>)
 8012436:	f7ee fb46 	bl	8000ac6 <_ZN2FC5Motor5startEv>
	m3.start();
 801243a:	4813      	ldr	r0, [pc, #76]	; (8012488 <cppMain+0xb4>)
 801243c:	f7ee fb43 	bl	8000ac6 <_ZN2FC5Motor5startEv>
	m4.start();
 8012440:	4812      	ldr	r0, [pc, #72]	; (801248c <cppMain+0xb8>)
 8012442:	f7ee fb40 	bl	8000ac6 <_ZN2FC5Motor5startEv>
	m5.start();
 8012446:	4812      	ldr	r0, [pc, #72]	; (8012490 <cppMain+0xbc>)
 8012448:	f7ee fb3d 	bl	8000ac6 <_ZN2FC5Motor5startEv>
	m6.start();
 801244c:	4811      	ldr	r0, [pc, #68]	; (8012494 <cppMain+0xc0>)
 801244e:	f7ee fb3a 	bl	8000ac6 <_ZN2FC5Motor5startEv>

    printf_("boot complete\r\n");
 8012452:	4811      	ldr	r0, [pc, #68]	; (8012498 <cppMain+0xc4>)
 8012454:	f7f9 ff36 	bl	800c2c4 <printf_>
}
 8012458:	bf00      	nop
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	24000670 	.word	0x24000670
 8012464:	0802f0cc 	.word	0x0802f0cc
 8012468:	2400c780 	.word	0x2400c780
 801246c:	2400c3dc 	.word	0x2400c3dc
 8012470:	2400c428 	.word	0x2400c428
 8012474:	2400c9d4 	.word	0x2400c9d4
 8012478:	2400c7cc 	.word	0x2400c7cc
 801247c:	2400c650 	.word	0x2400c650
 8012480:	240006f4 	.word	0x240006f4
 8012484:	24000700 	.word	0x24000700
 8012488:	2400070c 	.word	0x2400070c
 801248c:	24000718 	.word	0x24000718
 8012490:	24000724 	.word	0x24000724
 8012494:	24000730 	.word	0x24000730
 8012498:	0802f0d4 	.word	0x0802f0d4
 801249c:	00000000 	.word	0x00000000

080124a0 <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681a      	ldr	r2, [r3, #0]
 80124ac:	4b46      	ldr	r3, [pc, #280]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d157      	bne.n	8012566 <HAL_I2C_MemRxCpltCallback+0xc6>
		switch(MPU9250_i2cRxCpltCallback()){
 80124b6:	f7ee fdf9 	bl	80010ac <MPU9250_i2cRxCpltCallback>
 80124ba:	4603      	mov	r3, r0
 80124bc:	2b01      	cmp	r3, #1
 80124be:	d002      	beq.n	80124c6 <HAL_I2C_MemRxCpltCallback+0x26>
 80124c0:	2b02      	cmp	r3, #2
 80124c2:	d03d      	beq.n	8012540 <HAL_I2C_MemRxCpltCallback+0xa0>
 80124c4:	e04f      	b.n	8012566 <HAL_I2C_MemRxCpltCallback+0xc6>
		case 1:
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 80124c6:	4b40      	ldr	r3, [pc, #256]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 80124c8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80124cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80124d0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80125c0 <HAL_I2C_MemRxCpltCallback+0x120>
 80124d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80124d8:	eef7 5bc7 	vcvt.f32.f64	s11, d7
							   , mpu9250.accel[1]*FC_GRAVITY_ACCEERATION
 80124dc:	4b3a      	ldr	r3, [pc, #232]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 80124de:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80124e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80124e6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80125c0 <HAL_I2C_MemRxCpltCallback+0x120>
 80124ea:	ee27 7b06 	vmul.f64	d7, d7, d6
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 80124ee:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
							   , mpu9250.accel[2]*FC_GRAVITY_ACCEERATION);
 80124f2:	4b35      	ldr	r3, [pc, #212]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 80124f4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80124f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80124fc:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80125c0 <HAL_I2C_MemRxCpltCallback+0x120>
 8012500:	ee27 7b06 	vmul.f64	d7, d7, d6
			sensorAccel.setAccel(mpu9250.accel[0]*FC_GRAVITY_ACCEERATION
 8012504:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012508:	eeb0 1a67 	vmov.f32	s2, s15
 801250c:	eef0 0a45 	vmov.f32	s1, s10
 8012510:	eeb0 0a65 	vmov.f32	s0, s11
 8012514:	482d      	ldr	r0, [pc, #180]	; (80125cc <HAL_I2C_MemRxCpltCallback+0x12c>)
 8012516:	f7fd fd1f 	bl	800ff58 <_ZN2FC11SensorAccel8setAccelEfff>
			sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 801251a:	4b2b      	ldr	r3, [pc, #172]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 801251c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8012520:	4b29      	ldr	r3, [pc, #164]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 8012522:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8012526:	4b28      	ldr	r3, [pc, #160]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 8012528:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801252c:	eeb0 1a66 	vmov.f32	s2, s13
 8012530:	eef0 0a47 	vmov.f32	s1, s14
 8012534:	eeb0 0a67 	vmov.f32	s0, s15
 8012538:	4825      	ldr	r0, [pc, #148]	; (80125d0 <HAL_I2C_MemRxCpltCallback+0x130>)
 801253a:	f7fe f90b 	bl	8010754 <_ZN2FC10SensorGyro7setGyroEfff>
			break;
 801253e:	e012      	b.n	8012566 <HAL_I2C_MemRxCpltCallback+0xc6>
		case 2:
			sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
 8012540:	4b21      	ldr	r3, [pc, #132]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 8012542:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8012546:	4b20      	ldr	r3, [pc, #128]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 8012548:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 801254c:	4b1e      	ldr	r3, [pc, #120]	; (80125c8 <HAL_I2C_MemRxCpltCallback+0x128>)
 801254e:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8012552:	eeb0 1a66 	vmov.f32	s2, s13
 8012556:	eef0 0a47 	vmov.f32	s1, s14
 801255a:	eeb0 0a67 	vmov.f32	s0, s15
 801255e:	481d      	ldr	r0, [pc, #116]	; (80125d4 <HAL_I2C_MemRxCpltCallback+0x134>)
 8012560:	f7fe fbf2 	bl	8010d48 <_ZN2FC9SensorMag6setMagEfff>
			break;
 8012564:	bf00      	nop
		}
	}

	if(hi2c->Instance == ist8310.hi2c->Instance){
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	4b1b      	ldr	r3, [pc, #108]	; (80125d8 <HAL_I2C_MemRxCpltCallback+0x138>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	429a      	cmp	r2, r3
 8012572:	d103      	bne.n	801257c <HAL_I2C_MemRxCpltCallback+0xdc>
		if(IST8310_i2cRxCpltCallback()){
 8012574:	f7ee fb64 	bl	8000c40 <IST8310_i2cRxCpltCallback>
 8012578:	4603      	mov	r3, r0
 801257a:	2b00      	cmp	r3, #0
//			sensorMag.setMag(ist8310.raw[0], ist8310.raw[1], ist8310.raw[2]);
		}
	}

	if(hi2c->Instance == bme280.hi2c->Instance){
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	4b16      	ldr	r3, [pc, #88]	; (80125dc <HAL_I2C_MemRxCpltCallback+0x13c>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	429a      	cmp	r2, r3
 8012588:	d116      	bne.n	80125b8 <HAL_I2C_MemRxCpltCallback+0x118>
		if(BME280_i2cRxCpltCallback()){
 801258a:	f7ef fc95 	bl	8001eb8 <BME280_i2cRxCpltCallback>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	bf14      	ite	ne
 8012594:	2301      	movne	r3, #1
 8012596:	2300      	moveq	r3, #0
 8012598:	b2db      	uxtb	r3, r3
 801259a:	2b00      	cmp	r3, #0
 801259c:	d00c      	beq.n	80125b8 <HAL_I2C_MemRxCpltCallback+0x118>
			sensorBaro.setBaro(bme280.P, bme280.T);
 801259e:	4b0f      	ldr	r3, [pc, #60]	; (80125dc <HAL_I2C_MemRxCpltCallback+0x13c>)
 80125a0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80125a4:	4b0d      	ldr	r3, [pc, #52]	; (80125dc <HAL_I2C_MemRxCpltCallback+0x13c>)
 80125a6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80125aa:	eef0 0a47 	vmov.f32	s1, s14
 80125ae:	eeb0 0a67 	vmov.f32	s0, s15
 80125b2:	480b      	ldr	r0, [pc, #44]	; (80125e0 <HAL_I2C_MemRxCpltCallback+0x140>)
 80125b4:	f7fd fe4a 	bl	801024c <_ZN2FC10SensorBaro7setBaroEff>
		}
	}
}
 80125b8:	bf00      	nop
 80125ba:	3708      	adds	r7, #8
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	3a92a305 	.word	0x3a92a305
 80125c4:	40239d01 	.word	0x40239d01
 80125c8:	24001014 	.word	0x24001014
 80125cc:	24000e48 	.word	0x24000e48
 80125d0:	24000f28 	.word	0x24000f28
 80125d4:	24000fc0 	.word	0x24000fc0
 80125d8:	24001390 	.word	0x24001390
 80125dc:	24000754 	.word	0x24000754
 80125e0:	24000e88 	.word	0x24000e88

080125e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80125e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125e8:	ed2d 8b06 	vpush	{d8-d10}
 80125ec:	b087      	sub	sp, #28
 80125ee:	af04      	add	r7, sp, #16
 80125f0:	6078      	str	r0, [r7, #4]
	if(huart->Instance == sbus.huart->Instance){
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	4b43      	ldr	r3, [pc, #268]	; (8012704 <HAL_UART_RxCpltCallback+0x120>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d12f      	bne.n	8012660 <HAL_UART_RxCpltCallback+0x7c>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 8012600:	f7ff f816 	bl	8011630 <SBUS_uartRxCpltCallback>
 8012604:	4603      	mov	r3, r0
 8012606:	2b01      	cmp	r3, #1
 8012608:	bf0c      	ite	eq
 801260a:	2301      	moveq	r3, #1
 801260c:	2300      	movne	r3, #0
 801260e:	b2db      	uxtb	r3, r3
 8012610:	2b00      	cmp	r3, #0
 8012612:	d025      	beq.n	8012660 <HAL_UART_RxCpltCallback+0x7c>
			rc.setRC(SBUS_getChannel(2),	/* roll */
 8012614:	2002      	movs	r0, #2
 8012616:	f7ff f889 	bl	801172c <SBUS_getChannel>
 801261a:	4603      	mov	r3, r0
 801261c:	461e      	mov	r6, r3
 801261e:	2003      	movs	r0, #3
 8012620:	f7ff f884 	bl	801172c <SBUS_getChannel>
 8012624:	4603      	mov	r3, r0
 8012626:	4698      	mov	r8, r3
 8012628:	2004      	movs	r0, #4
 801262a:	f7ff f87f 	bl	801172c <SBUS_getChannel>
 801262e:	4603      	mov	r3, r0
 8012630:	4699      	mov	r9, r3
 8012632:	2001      	movs	r0, #1
 8012634:	f7ff f87a 	bl	801172c <SBUS_getChannel>
 8012638:	4603      	mov	r3, r0
 801263a:	461c      	mov	r4, r3
 801263c:	200b      	movs	r0, #11
 801263e:	f7ff f875 	bl	801172c <SBUS_getChannel>
 8012642:	4603      	mov	r3, r0
 8012644:	461d      	mov	r5, r3
 8012646:	2005      	movs	r0, #5
 8012648:	f7ff f870 	bl	801172c <SBUS_getChannel>
 801264c:	4603      	mov	r3, r0
 801264e:	9302      	str	r3, [sp, #8]
 8012650:	9501      	str	r5, [sp, #4]
 8012652:	9400      	str	r4, [sp, #0]
 8012654:	464b      	mov	r3, r9
 8012656:	4642      	mov	r2, r8
 8012658:	4631      	mov	r1, r6
 801265a:	482b      	ldr	r0, [pc, #172]	; (8012708 <HAL_UART_RxCpltCallback+0x124>)
 801265c:	f7fd fade 	bl	800fc1c <_ZN2FC2RC5setRCEtttttt>
//	if(TM_GPS_Update(huart) == TM_GPS_Result_NewData){
//		sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
//						 TM_GPS_ConvertSpeed(gpsUart.gpsData.Speed, TM_GPS_Speed_MeterPerSecond), gpsUart.gpsData.Direction, gpsUart.gpsData.HDOP, gpsUart.gpsData.VDOP,
//						 gpsUart.gpsData.Satellites, gpsUart.gpsData.FixMode, 0/* UTC in microsecond */);
//	}
	if(huart->Instance == UART8){
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	4a29      	ldr	r2, [pc, #164]	; (801270c <HAL_UART_RxCpltCallback+0x128>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d145      	bne.n	80126f6 <HAL_UART_RxCpltCallback+0x112>
		if(TM_GPS_Update() == TM_GPS_Result_NewData && gpsUart.gpsData.Fix != 0 /* gps must fixed */){
 801266a:	f7ef ff8f 	bl	800258c <TM_GPS_Update>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d105      	bne.n	8012680 <HAL_UART_RxCpltCallback+0x9c>
 8012674:	4b26      	ldr	r3, [pc, #152]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 8012676:	7d5b      	ldrb	r3, [r3, #21]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d001      	beq.n	8012680 <HAL_UART_RxCpltCallback+0x9c>
 801267c:	2301      	movs	r3, #1
 801267e:	e000      	b.n	8012682 <HAL_UART_RxCpltCallback+0x9e>
 8012680:	2300      	movs	r3, #0
 8012682:	2b00      	cmp	r3, #0
 8012684:	d037      	beq.n	80126f6 <HAL_UART_RxCpltCallback+0x112>
			sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 8012686:	4b22      	ldr	r3, [pc, #136]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 8012688:	ed93 8b00 	vldr	d8, [r3]
 801268c:	4b20      	ldr	r3, [pc, #128]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 801268e:	ed93 9b02 	vldr	d9, [r3, #8]
 8012692:	4b1f      	ldr	r3, [pc, #124]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 8012694:	ed93 aa04 	vldr	s20, [r3, #16]
 8012698:	4b1d      	ldr	r3, [pc, #116]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 801269a:	edd3 7a08 	vldr	s15, [r3, #32]
 801269e:	2001      	movs	r0, #1
 80126a0:	eeb0 0a67 	vmov.f32	s0, s15
 80126a4:	f7ef ffa6 	bl	80025f4 <TM_GPS_ConvertSpeed>
 80126a8:	eeb0 6a40 	vmov.f32	s12, s0
 80126ac:	4b18      	ldr	r3, [pc, #96]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 80126ae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80126b2:	4b17      	ldr	r3, [pc, #92]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 80126b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80126b8:	4b15      	ldr	r3, [pc, #84]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 80126ba:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80126be:	4b14      	ldr	r3, [pc, #80]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 80126c0:	7d19      	ldrb	r1, [r3, #20]
 80126c2:	4b13      	ldr	r3, [pc, #76]	; (8012710 <HAL_UART_RxCpltCallback+0x12c>)
 80126c4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80126c8:	f04f 0300 	mov.w	r3, #0
 80126cc:	f04f 0400 	mov.w	r4, #0
 80126d0:	e9cd 3400 	strd	r3, r4, [sp]
 80126d4:	eeb0 4a66 	vmov.f32	s8, s13
 80126d8:	eef0 3a47 	vmov.f32	s7, s14
 80126dc:	eeb0 3a67 	vmov.f32	s6, s15
 80126e0:	eef0 2a46 	vmov.f32	s5, s12
 80126e4:	eeb0 2a4a 	vmov.f32	s4, s20
 80126e8:	eeb0 1b49 	vmov.f64	d1, d9
 80126ec:	eeb0 0b48 	vmov.f64	d0, d8
 80126f0:	4808      	ldr	r0, [pc, #32]	; (8012714 <HAL_UART_RxCpltCallback+0x130>)
 80126f2:	f7fd fefd 	bl	80104f0 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
							 TM_GPS_ConvertSpeed(gpsUart.gpsData.Speed, TM_GPS_Speed_MeterPerSecond), gpsUart.gpsData.Direction, gpsUart.gpsData.HDOP, gpsUart.gpsData.VDOP,
							 gpsUart.gpsData.Satellites, gpsUart.gpsData.FixMode, 0/* UTC in microsecond */);
		}
	}
}
 80126f6:	bf00      	nop
 80126f8:	370c      	adds	r7, #12
 80126fa:	46bd      	mov	sp, r7
 80126fc:	ecbd 8b06 	vpop	{d8-d10}
 8012700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012704:	240010a0 	.word	0x240010a0
 8012708:	24000e20 	.word	0x24000e20
 801270c:	40007c00 	.word	0x40007c00
 8012710:	24001138 	.word	0x24001138
 8012714:	24000ec0 	.word	0x24000ec0

08012718 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
	if(Lidar1D_CaptureCallback(htim)){
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7ee fbe7 	bl	8000ef4 <Lidar1D_CaptureCallback>
 8012726:	4603      	mov	r3, r0
 8012728:	2b00      	cmp	r3, #0
 801272a:	bf14      	ite	ne
 801272c:	2301      	movne	r3, #1
 801272e:	2300      	moveq	r3, #0
 8012730:	b2db      	uxtb	r3, r3
 8012732:	2b00      	cmp	r3, #0
 8012734:	d00e      	beq.n	8012754 <HAL_TIM_IC_CaptureCallback+0x3c>
		sensorLidar.setDistance(lidar1D.distance_mm/1000.0f);
 8012736:	4b09      	ldr	r3, [pc, #36]	; (801275c <HAL_TIM_IC_CaptureCallback+0x44>)
 8012738:	691b      	ldr	r3, [r3, #16]
 801273a:	ee07 3a90 	vmov	s15, r3
 801273e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012742:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8012760 <HAL_TIM_IC_CaptureCallback+0x48>
 8012746:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801274a:	eeb0 0a66 	vmov.f32	s0, s13
 801274e:	4805      	ldr	r0, [pc, #20]	; (8012764 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8012750:	f7fe f966 	bl	8010a20 <_ZN2FC11SensorLidar11setDistanceEf>
	}
}
 8012754:	bf00      	nop
 8012756:	3708      	adds	r7, #8
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	2400073c 	.word	0x2400073c
 8012760:	447a0000 	.word	0x447a0000
 8012764:	24000f68 	.word	0x24000f68

08012768 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>:
template<typename T>
class Freq {
public:
	static uint16_t freqCnt;

	static uint16_t checkFreq(){
 8012768:	b480      	push	{r7}
 801276a:	b083      	sub	sp, #12
 801276c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801276e:	4b06      	ldr	r3, [pc, #24]	; (8012788 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8012770:	881b      	ldrh	r3, [r3, #0]
 8012772:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012774:	4b04      	ldr	r3, [pc, #16]	; (8012788 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8012776:	2200      	movs	r2, #0
 8012778:	801a      	strh	r2, [r3, #0]
		return res;
 801277a:	88fb      	ldrh	r3, [r7, #6]
	}
 801277c:	4618      	mov	r0, r3
 801277e:	370c      	adds	r7, #12
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr
 8012788:	24000e80 	.word	0x24000e80

0801278c <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 801278c:	b480      	push	{r7}
 801278e:	b083      	sub	sp, #12
 8012790:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8012792:	4b06      	ldr	r3, [pc, #24]	; (80127ac <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 8012794:	881b      	ldrh	r3, [r3, #0]
 8012796:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012798:	4b04      	ldr	r3, [pc, #16]	; (80127ac <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 801279a:	2200      	movs	r2, #0
 801279c:	801a      	strh	r2, [r3, #0]
		return res;
 801279e:	88fb      	ldrh	r3, [r7, #6]
	}
 80127a0:	4618      	mov	r0, r3
 80127a2:	370c      	adds	r7, #12
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr
 80127ac:	24000f60 	.word	0x24000f60

080127b0 <_ZN2FC4FreqINS_2RCEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80127b0:	b480      	push	{r7}
 80127b2:	b083      	sub	sp, #12
 80127b4:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80127b6:	4b06      	ldr	r3, [pc, #24]	; (80127d0 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 80127b8:	881b      	ldrh	r3, [r3, #0]
 80127ba:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80127bc:	4b04      	ldr	r3, [pc, #16]	; (80127d0 <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 80127be:	2200      	movs	r2, #0
 80127c0:	801a      	strh	r2, [r3, #0]
		return res;
 80127c2:	88fb      	ldrh	r3, [r7, #6]
	}
 80127c4:	4618      	mov	r0, r3
 80127c6:	370c      	adds	r7, #12
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr
 80127d0:	24000e40 	.word	0x24000e40

080127d4 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80127d4:	b480      	push	{r7}
 80127d6:	b083      	sub	sp, #12
 80127d8:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80127da:	4b06      	ldr	r3, [pc, #24]	; (80127f4 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 80127dc:	881b      	ldrh	r3, [r3, #0]
 80127de:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80127e0:	4b04      	ldr	r3, [pc, #16]	; (80127f4 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 80127e2:	2200      	movs	r2, #0
 80127e4:	801a      	strh	r2, [r3, #0]
		return res;
 80127e6:	88fb      	ldrh	r3, [r7, #6]
	}
 80127e8:	4618      	mov	r0, r3
 80127ea:	370c      	adds	r7, #12
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr
 80127f4:	24001010 	.word	0x24001010

080127f8 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80127f8:	b480      	push	{r7}
 80127fa:	b083      	sub	sp, #12
 80127fc:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80127fe:	4b06      	ldr	r3, [pc, #24]	; (8012818 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012804:	4b04      	ldr	r3, [pc, #16]	; (8012818 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 8012806:	2200      	movs	r2, #0
 8012808:	801a      	strh	r2, [r3, #0]
		return res;
 801280a:	88fb      	ldrh	r3, [r7, #6]
	}
 801280c:	4618      	mov	r0, r3
 801280e:	370c      	adds	r7, #12
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr
 8012818:	24000f20 	.word	0x24000f20

0801281c <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8012822:	4b06      	ldr	r3, [pc, #24]	; (801283c <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 8012824:	881b      	ldrh	r3, [r3, #0]
 8012826:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012828:	4b04      	ldr	r3, [pc, #16]	; (801283c <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 801282a:	2200      	movs	r2, #0
 801282c:	801a      	strh	r2, [r3, #0]
		return res;
 801282e:	88fb      	ldrh	r3, [r7, #6]
	}
 8012830:	4618      	mov	r0, r3
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr
 801283c:	24000eb8 	.word	0x24000eb8

08012840 <_ZN2FC4FreqINS_11SensorLidarEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8012840:	b480      	push	{r7}
 8012842:	b083      	sub	sp, #12
 8012844:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8012846:	4b06      	ldr	r3, [pc, #24]	; (8012860 <_ZN2FC4FreqINS_11SensorLidarEE9checkFreqEv+0x20>)
 8012848:	881b      	ldrh	r3, [r3, #0]
 801284a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 801284c:	4b04      	ldr	r3, [pc, #16]	; (8012860 <_ZN2FC4FreqINS_11SensorLidarEE9checkFreqEv+0x20>)
 801284e:	2200      	movs	r2, #0
 8012850:	801a      	strh	r2, [r3, #0]
		return res;
 8012852:	88fb      	ldrh	r3, [r7, #6]
	}
 8012854:	4618      	mov	r0, r3
 8012856:	370c      	adds	r7, #12
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr
 8012860:	24000fb8 	.word	0x24000fb8

08012864 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8012864:	b480      	push	{r7}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801286a:	4b06      	ldr	r3, [pc, #24]	; (8012884 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 801286c:	881b      	ldrh	r3, [r3, #0]
 801286e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012870:	4b04      	ldr	r3, [pc, #16]	; (8012884 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 8012872:	2200      	movs	r2, #0
 8012874:	801a      	strh	r2, [r3, #0]
		return res;
 8012876:	88fb      	ldrh	r3, [r7, #6]
	}
 8012878:	4618      	mov	r0, r3
 801287a:	370c      	adds	r7, #12
 801287c:	46bd      	mov	sp, r7
 801287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012882:	4770      	bx	lr
 8012884:	24000938 	.word	0x24000938

08012888 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8012888:	b480      	push	{r7}
 801288a:	b083      	sub	sp, #12
 801288c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 801288e:	4b06      	ldr	r3, [pc, #24]	; (80128a8 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 8012890:	881b      	ldrh	r3, [r3, #0]
 8012892:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8012894:	4b04      	ldr	r3, [pc, #16]	; (80128a8 <_ZN2FC4FreqINS_9ModuleINSEE9checkFreqEv+0x20>)
 8012896:	2200      	movs	r2, #0
 8012898:	801a      	strh	r2, [r3, #0]
		return res;
 801289a:	88fb      	ldrh	r3, [r7, #6]
	}
 801289c:	4618      	mov	r0, r3
 801289e:	370c      	adds	r7, #12
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr
 80128a8:	24001458 	.word	0x24001458

080128ac <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80128b2:	4b06      	ldr	r3, [pc, #24]	; (80128cc <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 80128b4:	881b      	ldrh	r3, [r3, #0]
 80128b6:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80128b8:	4b04      	ldr	r3, [pc, #16]	; (80128cc <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 80128ba:	2200      	movs	r2, #0
 80128bc:	801a      	strh	r2, [r3, #0]
		return res;
 80128be:	88fb      	ldrh	r3, [r7, #6]
	}
 80128c0:	4618      	mov	r0, r3
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr
 80128cc:	24001454 	.word	0x24001454

080128d0 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 80128d0:	b480      	push	{r7}
 80128d2:	b083      	sub	sp, #12
 80128d4:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 80128d6:	4b06      	ldr	r3, [pc, #24]	; (80128f0 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 80128d8:	881b      	ldrh	r3, [r3, #0]
 80128da:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 80128dc:	4b04      	ldr	r3, [pc, #16]	; (80128f0 <_ZN2FC4FreqINS_24ModulePositionControllerEE9checkFreqEv+0x20>)
 80128de:	2200      	movs	r2, #0
 80128e0:	801a      	strh	r2, [r3, #0]
		return res;
 80128e2:	88fb      	ldrh	r3, [r7, #6]
	}
 80128e4:	4618      	mov	r0, r3
 80128e6:	370c      	adds	r7, #12
 80128e8:	46bd      	mov	sp, r7
 80128ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ee:	4770      	bx	lr
 80128f0:	24001456 	.word	0x24001456

080128f4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b088      	sub	sp, #32
 80128f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80128fa:	1d3b      	adds	r3, r7, #4
 80128fc:	2200      	movs	r2, #0
 80128fe:	601a      	str	r2, [r3, #0]
 8012900:	605a      	str	r2, [r3, #4]
 8012902:	609a      	str	r2, [r3, #8]
 8012904:	60da      	str	r2, [r3, #12]
 8012906:	611a      	str	r2, [r3, #16]
 8012908:	615a      	str	r2, [r3, #20]
 801290a:	619a      	str	r2, [r3, #24]

  /** Common config
  */
  hadc3.Instance = ADC3;
 801290c:	4b28      	ldr	r3, [pc, #160]	; (80129b0 <MX_ADC3_Init+0xbc>)
 801290e:	4a29      	ldr	r2, [pc, #164]	; (80129b4 <MX_ADC3_Init+0xc0>)
 8012910:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8012912:	4b27      	ldr	r3, [pc, #156]	; (80129b0 <MX_ADC3_Init+0xbc>)
 8012914:	2200      	movs	r2, #0
 8012916:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8012918:	4b25      	ldr	r3, [pc, #148]	; (80129b0 <MX_ADC3_Init+0xbc>)
 801291a:	2200      	movs	r2, #0
 801291c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801291e:	4b24      	ldr	r3, [pc, #144]	; (80129b0 <MX_ADC3_Init+0xbc>)
 8012920:	2200      	movs	r2, #0
 8012922:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012924:	4b22      	ldr	r3, [pc, #136]	; (80129b0 <MX_ADC3_Init+0xbc>)
 8012926:	2204      	movs	r2, #4
 8012928:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 801292a:	4b21      	ldr	r3, [pc, #132]	; (80129b0 <MX_ADC3_Init+0xbc>)
 801292c:	2200      	movs	r2, #0
 801292e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8012930:	4b1f      	ldr	r3, [pc, #124]	; (80129b0 <MX_ADC3_Init+0xbc>)
 8012932:	2200      	movs	r2, #0
 8012934:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8012936:	4b1e      	ldr	r3, [pc, #120]	; (80129b0 <MX_ADC3_Init+0xbc>)
 8012938:	2201      	movs	r2, #1
 801293a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 801293c:	4b1c      	ldr	r3, [pc, #112]	; (80129b0 <MX_ADC3_Init+0xbc>)
 801293e:	2200      	movs	r2, #0
 8012940:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012942:	4b1b      	ldr	r3, [pc, #108]	; (80129b0 <MX_ADC3_Init+0xbc>)
 8012944:	2200      	movs	r2, #0
 8012946:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012948:	4b19      	ldr	r3, [pc, #100]	; (80129b0 <MX_ADC3_Init+0xbc>)
 801294a:	2200      	movs	r2, #0
 801294c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 801294e:	4b18      	ldr	r3, [pc, #96]	; (80129b0 <MX_ADC3_Init+0xbc>)
 8012950:	2200      	movs	r2, #0
 8012952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8012954:	4b16      	ldr	r3, [pc, #88]	; (80129b0 <MX_ADC3_Init+0xbc>)
 8012956:	2200      	movs	r2, #0
 8012958:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 801295a:	4b15      	ldr	r3, [pc, #84]	; (80129b0 <MX_ADC3_Init+0xbc>)
 801295c:	2200      	movs	r2, #0
 801295e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8012960:	4b13      	ldr	r3, [pc, #76]	; (80129b0 <MX_ADC3_Init+0xbc>)
 8012962:	2200      	movs	r2, #0
 8012964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8012968:	4811      	ldr	r0, [pc, #68]	; (80129b0 <MX_ADC3_Init+0xbc>)
 801296a:	f002 fb9f 	bl	80150ac <HAL_ADC_Init>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d001      	beq.n	8012978 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8012974:	f000 fd14 	bl	80133a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8012978:	4b0f      	ldr	r3, [pc, #60]	; (80129b8 <MX_ADC3_Init+0xc4>)
 801297a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801297c:	2306      	movs	r3, #6
 801297e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8012980:	2300      	movs	r3, #0
 8012982:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8012984:	4b0d      	ldr	r3, [pc, #52]	; (80129bc <MX_ADC3_Init+0xc8>)
 8012986:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8012988:	2304      	movs	r3, #4
 801298a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 801298c:	2300      	movs	r3, #0
 801298e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8012990:	2300      	movs	r3, #0
 8012992:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8012994:	1d3b      	adds	r3, r7, #4
 8012996:	4619      	mov	r1, r3
 8012998:	4805      	ldr	r0, [pc, #20]	; (80129b0 <MX_ADC3_Init+0xbc>)
 801299a:	f002 fd27 	bl	80153ec <HAL_ADC_ConfigChannel>
 801299e:	4603      	mov	r3, r0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d001      	beq.n	80129a8 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80129a4:	f000 fcfc 	bl	80133a0 <Error_Handler>
  }

}
 80129a8:	bf00      	nop
 80129aa:	3720      	adds	r7, #32
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	24005dac 	.word	0x24005dac
 80129b4:	58026000 	.word	0x58026000
 80129b8:	04300002 	.word	0x04300002
 80129bc:	47ff0000 	.word	0x47ff0000

080129c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b084      	sub	sp, #16
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	4a18      	ldr	r2, [pc, #96]	; (8012a30 <HAL_ADC_MspInit+0x70>)
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d129      	bne.n	8012a26 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80129d2:	4b18      	ldr	r3, [pc, #96]	; (8012a34 <HAL_ADC_MspInit+0x74>)
 80129d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80129d8:	4a16      	ldr	r2, [pc, #88]	; (8012a34 <HAL_ADC_MspInit+0x74>)
 80129da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80129de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80129e2:	4b14      	ldr	r3, [pc, #80]	; (8012a34 <HAL_ADC_MspInit+0x74>)
 80129e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80129e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80129ec:	60fb      	str	r3, [r7, #12]
 80129ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80129f0:	4b10      	ldr	r3, [pc, #64]	; (8012a34 <HAL_ADC_MspInit+0x74>)
 80129f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80129f6:	4a0f      	ldr	r2, [pc, #60]	; (8012a34 <HAL_ADC_MspInit+0x74>)
 80129f8:	f043 0304 	orr.w	r3, r3, #4
 80129fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012a00:	4b0c      	ldr	r3, [pc, #48]	; (8012a34 <HAL_ADC_MspInit+0x74>)
 8012a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012a06:	f003 0304 	and.w	r3, r3, #4
 8012a0a:	60bb      	str	r3, [r7, #8]
 8012a0c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8012a0e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8012a12:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8012a16:	f002 f9a7 	bl	8014d68 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8012a1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8012a1e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8012a22:	f002 f9a1 	bl	8014d68 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8012a26:	bf00      	nop
 8012a28:	3710      	adds	r7, #16
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	58026000 	.word	0x58026000
 8012a34:	58024400 	.word	0x58024400

08012a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8012a3e:	4b15      	ldr	r3, [pc, #84]	; (8012a94 <MX_DMA_Init+0x5c>)
 8012a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012a44:	4a13      	ldr	r2, [pc, #76]	; (8012a94 <MX_DMA_Init+0x5c>)
 8012a46:	f043 0301 	orr.w	r3, r3, #1
 8012a4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012a4e:	4b11      	ldr	r3, [pc, #68]	; (8012a94 <MX_DMA_Init+0x5c>)
 8012a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012a54:	f003 0301 	and.w	r3, r3, #1
 8012a58:	607b      	str	r3, [r7, #4]
 8012a5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 10, 0);
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	210a      	movs	r1, #10
 8012a60:	200b      	movs	r0, #11
 8012a62:	f003 f987 	bl	8015d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8012a66:	200b      	movs	r0, #11
 8012a68:	f003 f99e 	bl	8015da8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	210a      	movs	r1, #10
 8012a70:	200c      	movs	r0, #12
 8012a72:	f003 f97f 	bl	8015d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8012a76:	200c      	movs	r0, #12
 8012a78:	f003 f996 	bl	8015da8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	2105      	movs	r1, #5
 8012a80:	200d      	movs	r0, #13
 8012a82:	f003 f977 	bl	8015d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8012a86:	200d      	movs	r0, #13
 8012a88:	f003 f98e 	bl	8015da8 <HAL_NVIC_EnableIRQ>

}
 8012a8c:	bf00      	nop
 8012a8e:	3708      	adds	r7, #8
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	58024400 	.word	0x58024400

08012a98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8012a9c:	4a34      	ldr	r2, [pc, #208]	; (8012b70 <MX_FREERTOS_Init+0xd8>)
 8012a9e:	2100      	movs	r1, #0
 8012aa0:	4834      	ldr	r0, [pc, #208]	; (8012b74 <MX_FREERTOS_Init+0xdc>)
 8012aa2:	f014 f829 	bl	8026af8 <osThreadNew>
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	4b33      	ldr	r3, [pc, #204]	; (8012b78 <MX_FREERTOS_Init+0xe0>)
 8012aaa:	601a      	str	r2, [r3, #0]

  /* creation of MPU9250_Task */
  MPU9250_TaskHandle = osThreadNew(MPU9250_StartTask, NULL, &MPU9250_Task_attributes);
 8012aac:	4a33      	ldr	r2, [pc, #204]	; (8012b7c <MX_FREERTOS_Init+0xe4>)
 8012aae:	2100      	movs	r1, #0
 8012ab0:	4833      	ldr	r0, [pc, #204]	; (8012b80 <MX_FREERTOS_Init+0xe8>)
 8012ab2:	f014 f821 	bl	8026af8 <osThreadNew>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	4b32      	ldr	r3, [pc, #200]	; (8012b84 <MX_FREERTOS_Init+0xec>)
 8012aba:	601a      	str	r2, [r3, #0]

  /* creation of BME280_Task */
  BME280_TaskHandle = osThreadNew(BME280_StartTask, NULL, &BME280_Task_attributes);
 8012abc:	4a32      	ldr	r2, [pc, #200]	; (8012b88 <MX_FREERTOS_Init+0xf0>)
 8012abe:	2100      	movs	r1, #0
 8012ac0:	4832      	ldr	r0, [pc, #200]	; (8012b8c <MX_FREERTOS_Init+0xf4>)
 8012ac2:	f014 f819 	bl	8026af8 <osThreadNew>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	4b31      	ldr	r3, [pc, #196]	; (8012b90 <MX_FREERTOS_Init+0xf8>)
 8012aca:	601a      	str	r2, [r3, #0]

  /* creation of IST8310_Task */
  IST8310_TaskHandle = osThreadNew(IST8310_StartTask, NULL, &IST8310_Task_attributes);
 8012acc:	4a31      	ldr	r2, [pc, #196]	; (8012b94 <MX_FREERTOS_Init+0xfc>)
 8012ace:	2100      	movs	r1, #0
 8012ad0:	4831      	ldr	r0, [pc, #196]	; (8012b98 <MX_FREERTOS_Init+0x100>)
 8012ad2:	f014 f811 	bl	8026af8 <osThreadNew>
 8012ad6:	4602      	mov	r2, r0
 8012ad8:	4b30      	ldr	r3, [pc, #192]	; (8012b9c <MX_FREERTOS_Init+0x104>)
 8012ada:	601a      	str	r2, [r3, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(SD_StartTask, NULL, &SD_Task_attributes);
 8012adc:	4a30      	ldr	r2, [pc, #192]	; (8012ba0 <MX_FREERTOS_Init+0x108>)
 8012ade:	2100      	movs	r1, #0
 8012ae0:	4830      	ldr	r0, [pc, #192]	; (8012ba4 <MX_FREERTOS_Init+0x10c>)
 8012ae2:	f014 f809 	bl	8026af8 <osThreadNew>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	4b2f      	ldr	r3, [pc, #188]	; (8012ba8 <MX_FREERTOS_Init+0x110>)
 8012aea:	601a      	str	r2, [r3, #0]

  /* creation of AHRS_Task */
  AHRS_TaskHandle = osThreadNew(AHRS_StartTask, NULL, &AHRS_Task_attributes);
 8012aec:	4a2f      	ldr	r2, [pc, #188]	; (8012bac <MX_FREERTOS_Init+0x114>)
 8012aee:	2100      	movs	r1, #0
 8012af0:	482f      	ldr	r0, [pc, #188]	; (8012bb0 <MX_FREERTOS_Init+0x118>)
 8012af2:	f014 f801 	bl	8026af8 <osThreadNew>
 8012af6:	4602      	mov	r2, r0
 8012af8:	4b2e      	ldr	r3, [pc, #184]	; (8012bb4 <MX_FREERTOS_Init+0x11c>)
 8012afa:	601a      	str	r2, [r3, #0]

  /* creation of Commander_Task */
  Commander_TaskHandle = osThreadNew(Commander_StartTask, NULL, &Commander_Task_attributes);
 8012afc:	4a2e      	ldr	r2, [pc, #184]	; (8012bb8 <MX_FREERTOS_Init+0x120>)
 8012afe:	2100      	movs	r1, #0
 8012b00:	482e      	ldr	r0, [pc, #184]	; (8012bbc <MX_FREERTOS_Init+0x124>)
 8012b02:	f013 fff9 	bl	8026af8 <osThreadNew>
 8012b06:	4602      	mov	r2, r0
 8012b08:	4b2d      	ldr	r3, [pc, #180]	; (8012bc0 <MX_FREERTOS_Init+0x128>)
 8012b0a:	601a      	str	r2, [r3, #0]

  /* creation of Debug_Task */
  Debug_TaskHandle = osThreadNew(Debug_StartTask, NULL, &Debug_Task_attributes);
 8012b0c:	4a2d      	ldr	r2, [pc, #180]	; (8012bc4 <MX_FREERTOS_Init+0x12c>)
 8012b0e:	2100      	movs	r1, #0
 8012b10:	482d      	ldr	r0, [pc, #180]	; (8012bc8 <MX_FREERTOS_Init+0x130>)
 8012b12:	f013 fff1 	bl	8026af8 <osThreadNew>
 8012b16:	4602      	mov	r2, r0
 8012b18:	4b2c      	ldr	r3, [pc, #176]	; (8012bcc <MX_FREERTOS_Init+0x134>)
 8012b1a:	601a      	str	r2, [r3, #0]

  /* creation of Buzzer_Task */
  Buzzer_TaskHandle = osThreadNew(Buzzer_StartTask, NULL, &Buzzer_Task_attributes);
 8012b1c:	4a2c      	ldr	r2, [pc, #176]	; (8012bd0 <MX_FREERTOS_Init+0x138>)
 8012b1e:	2100      	movs	r1, #0
 8012b20:	482c      	ldr	r0, [pc, #176]	; (8012bd4 <MX_FREERTOS_Init+0x13c>)
 8012b22:	f013 ffe9 	bl	8026af8 <osThreadNew>
 8012b26:	4602      	mov	r2, r0
 8012b28:	4b2b      	ldr	r3, [pc, #172]	; (8012bd8 <MX_FREERTOS_Init+0x140>)
 8012b2a:	601a      	str	r2, [r3, #0]

  /* creation of Health_Task */
  Health_TaskHandle = osThreadNew(Health_StartTask, NULL, &Health_Task_attributes);
 8012b2c:	4a2b      	ldr	r2, [pc, #172]	; (8012bdc <MX_FREERTOS_Init+0x144>)
 8012b2e:	2100      	movs	r1, #0
 8012b30:	482b      	ldr	r0, [pc, #172]	; (8012be0 <MX_FREERTOS_Init+0x148>)
 8012b32:	f013 ffe1 	bl	8026af8 <osThreadNew>
 8012b36:	4602      	mov	r2, r0
 8012b38:	4b2a      	ldr	r3, [pc, #168]	; (8012be4 <MX_FREERTOS_Init+0x14c>)
 8012b3a:	601a      	str	r2, [r3, #0]

  /* creation of AC_Task */
  AC_TaskHandle = osThreadNew(AC_StartTask, NULL, &AC_Task_attributes);
 8012b3c:	4a2a      	ldr	r2, [pc, #168]	; (8012be8 <MX_FREERTOS_Init+0x150>)
 8012b3e:	2100      	movs	r1, #0
 8012b40:	482a      	ldr	r0, [pc, #168]	; (8012bec <MX_FREERTOS_Init+0x154>)
 8012b42:	f013 ffd9 	bl	8026af8 <osThreadNew>
 8012b46:	4602      	mov	r2, r0
 8012b48:	4b29      	ldr	r3, [pc, #164]	; (8012bf0 <MX_FREERTOS_Init+0x158>)
 8012b4a:	601a      	str	r2, [r3, #0]

  /* creation of INS_Task */
  INS_TaskHandle = osThreadNew(INS_StartTask, NULL, &INS_Task_attributes);
 8012b4c:	4a29      	ldr	r2, [pc, #164]	; (8012bf4 <MX_FREERTOS_Init+0x15c>)
 8012b4e:	2100      	movs	r1, #0
 8012b50:	4829      	ldr	r0, [pc, #164]	; (8012bf8 <MX_FREERTOS_Init+0x160>)
 8012b52:	f013 ffd1 	bl	8026af8 <osThreadNew>
 8012b56:	4602      	mov	r2, r0
 8012b58:	4b28      	ldr	r3, [pc, #160]	; (8012bfc <MX_FREERTOS_Init+0x164>)
 8012b5a:	601a      	str	r2, [r3, #0]

  /* creation of PC_Task */
  PC_TaskHandle = osThreadNew(PC_StartTask, NULL, &PC_Task_attributes);
 8012b5c:	4a28      	ldr	r2, [pc, #160]	; (8012c00 <MX_FREERTOS_Init+0x168>)
 8012b5e:	2100      	movs	r1, #0
 8012b60:	4828      	ldr	r0, [pc, #160]	; (8012c04 <MX_FREERTOS_Init+0x16c>)
 8012b62:	f013 ffc9 	bl	8026af8 <osThreadNew>
 8012b66:	4602      	mov	r2, r0
 8012b68:	4b27      	ldr	r3, [pc, #156]	; (8012c08 <MX_FREERTOS_Init+0x170>)
 8012b6a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8012b6c:	bf00      	nop
 8012b6e:	bd80      	pop	{r7, pc}
 8012b70:	0802fa48 	.word	0x0802fa48
 8012b74:	08012c0d 	.word	0x08012c0d
 8012b78:	24005e10 	.word	0x24005e10
 8012b7c:	0802fa6c 	.word	0x0802fa6c
 8012b80:	08012309 	.word	0x08012309
 8012b84:	240094ac 	.word	0x240094ac
 8012b88:	0802fa90 	.word	0x0802fa90
 8012b8c:	08012329 	.word	0x08012329
 8012b90:	24009978 	.word	0x24009978
 8012b94:	0802fab4 	.word	0x0802fab4
 8012b98:	0801233d 	.word	0x0801233d
 8012b9c:	24006618 	.word	0x24006618
 8012ba0:	0802fad8 	.word	0x0802fad8
 8012ba4:	0801234d 	.word	0x0801234d
 8012ba8:	24008e1c 	.word	0x24008e1c
 8012bac:	0802fafc 	.word	0x0802fafc
 8012bb0:	08012361 	.word	0x08012361
 8012bb4:	24009914 	.word	0x24009914
 8012bb8:	0802fb20 	.word	0x0802fb20
 8012bbc:	08012375 	.word	0x08012375
 8012bc0:	24009020 	.word	0x24009020
 8012bc4:	0802fb44 	.word	0x0802fb44
 8012bc8:	08011f31 	.word	0x08011f31
 8012bcc:	240092dc 	.word	0x240092dc
 8012bd0:	0802fb68 	.word	0x0802fb68
 8012bd4:	08012389 	.word	0x08012389
 8012bd8:	24009974 	.word	0x24009974
 8012bdc:	0802fb8c 	.word	0x0802fb8c
 8012be0:	08011f1d 	.word	0x08011f1d
 8012be4:	2400997c 	.word	0x2400997c
 8012be8:	0802fbb0 	.word	0x0802fbb0
 8012bec:	08012399 	.word	0x08012399
 8012bf0:	240094b0 	.word	0x240094b0
 8012bf4:	0802fbd4 	.word	0x0802fbd4
 8012bf8:	080123ad 	.word	0x080123ad
 8012bfc:	24006614 	.word	0x24006614
 8012c00:	0802fbf8 	.word	0x0802fbf8
 8012c04:	080123c1 	.word	0x080123c1
 8012c08:	24009510 	.word	0x24009510

08012c0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8012c14:	2001      	movs	r0, #1
 8012c16:	f014 f98f 	bl	8026f38 <osDelay>
 8012c1a:	e7fb      	b.n	8012c14 <StartDefaultTask+0x8>

08012c1c <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b08e      	sub	sp, #56	; 0x38
 8012c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012c26:	2200      	movs	r2, #0
 8012c28:	601a      	str	r2, [r3, #0]
 8012c2a:	605a      	str	r2, [r3, #4]
 8012c2c:	609a      	str	r2, [r3, #8]
 8012c2e:	60da      	str	r2, [r3, #12]
 8012c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012c32:	4b84      	ldr	r3, [pc, #528]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c38:	4a82      	ldr	r2, [pc, #520]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c3a:	f043 0310 	orr.w	r3, r3, #16
 8012c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c42:	4b80      	ldr	r3, [pc, #512]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c48:	f003 0310 	and.w	r3, r3, #16
 8012c4c:	623b      	str	r3, [r7, #32]
 8012c4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c50:	4b7c      	ldr	r3, [pc, #496]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c56:	4a7b      	ldr	r2, [pc, #492]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c58:	f043 0304 	orr.w	r3, r3, #4
 8012c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c60:	4b78      	ldr	r3, [pc, #480]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c66:	f003 0304 	and.w	r3, r3, #4
 8012c6a:	61fb      	str	r3, [r7, #28]
 8012c6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012c6e:	4b75      	ldr	r3, [pc, #468]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c74:	4a73      	ldr	r2, [pc, #460]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c76:	f043 0320 	orr.w	r3, r3, #32
 8012c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c7e:	4b71      	ldr	r3, [pc, #452]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c84:	f003 0320 	and.w	r3, r3, #32
 8012c88:	61bb      	str	r3, [r7, #24]
 8012c8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012c8c:	4b6d      	ldr	r3, [pc, #436]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012c92:	4a6c      	ldr	r2, [pc, #432]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012c9c:	4b69      	ldr	r3, [pc, #420]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ca6:	617b      	str	r3, [r7, #20]
 8012ca8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012caa:	4b66      	ldr	r3, [pc, #408]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012cb0:	4a64      	ldr	r2, [pc, #400]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012cb2:	f043 0301 	orr.w	r3, r3, #1
 8012cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012cba:	4b62      	ldr	r3, [pc, #392]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012cc0:	f003 0301 	and.w	r3, r3, #1
 8012cc4:	613b      	str	r3, [r7, #16]
 8012cc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012cc8:	4b5e      	ldr	r3, [pc, #376]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012cce:	4a5d      	ldr	r2, [pc, #372]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012cd0:	f043 0302 	orr.w	r3, r3, #2
 8012cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012cd8:	4b5a      	ldr	r3, [pc, #360]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012cde:	f003 0302 	and.w	r3, r3, #2
 8012ce2:	60fb      	str	r3, [r7, #12]
 8012ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012ce6:	4b57      	ldr	r3, [pc, #348]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012cec:	4a55      	ldr	r2, [pc, #340]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012cee:	f043 0308 	orr.w	r3, r3, #8
 8012cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012cf6:	4b53      	ldr	r3, [pc, #332]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012cfc:	f003 0308 	and.w	r3, r3, #8
 8012d00:	60bb      	str	r3, [r7, #8]
 8012d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012d04:	4b4f      	ldr	r3, [pc, #316]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d0a:	4a4e      	ldr	r2, [pc, #312]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012d14:	4b4b      	ldr	r3, [pc, #300]	; (8012e44 <MX_GPIO_Init+0x228>)
 8012d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d1e:	607b      	str	r3, [r7, #4]
 8012d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WINCH_CONTROL1_Pin|WINCH_CONTROL2_Pin, GPIO_PIN_RESET);
 8012d22:	2200      	movs	r2, #0
 8012d24:	210c      	movs	r1, #12
 8012d26:	4848      	ldr	r0, [pc, #288]	; (8012e48 <MX_GPIO_Init+0x22c>)
 8012d28:	f005 fd4a 	bl	80187c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|LED2_Pin|LED3_Pin|EXTERNAL_LED_CONTROL_Pin, GPIO_PIN_RESET);
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	f241 011c 	movw	r1, #4124	; 0x101c
 8012d32:	4846      	ldr	r0, [pc, #280]	; (8012e4c <MX_GPIO_Init+0x230>)
 8012d34:	f005 fd44 	bl	80187c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8012d38:	2200      	movs	r2, #0
 8012d3a:	2101      	movs	r1, #1
 8012d3c:	4844      	ldr	r0, [pc, #272]	; (8012e50 <MX_GPIO_Init+0x234>)
 8012d3e:	f005 fd3f 	bl	80187c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8012d42:	2200      	movs	r2, #0
 8012d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012d48:	4842      	ldr	r0, [pc, #264]	; (8012e54 <MX_GPIO_Init+0x238>)
 8012d4a:	f005 fd39 	bl	80187c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WINCH_CONTROL1_Pin|WINCH_CONTROL2_Pin;
 8012d4e:	230c      	movs	r3, #12
 8012d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012d52:	2301      	movs	r3, #1
 8012d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d56:	2300      	movs	r3, #0
 8012d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d62:	4619      	mov	r1, r3
 8012d64:	4838      	ldr	r0, [pc, #224]	; (8012e48 <MX_GPIO_Init+0x22c>)
 8012d66:	f005 fb63 	bl	8018430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SD_DETECTION_Pin;
 8012d6a:	f242 0320 	movw	r3, #8224	; 0x2020
 8012d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012d70:	2300      	movs	r3, #0
 8012d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d74:	2300      	movs	r3, #0
 8012d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	4836      	ldr	r0, [pc, #216]	; (8012e58 <MX_GPIO_Init+0x23c>)
 8012d80:	f005 fb56 	bl	8018430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LED2_Pin|LED3_Pin|EXTERNAL_LED_CONTROL_Pin;
 8012d84:	f241 031c 	movw	r3, #4124	; 0x101c
 8012d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012d92:	2300      	movs	r3, #0
 8012d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	482b      	ldr	r0, [pc, #172]	; (8012e4c <MX_GPIO_Init+0x230>)
 8012d9e:	f005 fb47 	bl	8018430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8012da2:	2301      	movs	r3, #1
 8012da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012da6:	2301      	movs	r3, #1
 8012da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012daa:	2300      	movs	r3, #0
 8012dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012dae:	2300      	movs	r3, #0
 8012db0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8012db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012db6:	4619      	mov	r1, r3
 8012db8:	4825      	ldr	r0, [pc, #148]	; (8012e50 <MX_GPIO_Init+0x234>)
 8012dba:	f005 fb39 	bl	8018430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8012dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8012dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	481f      	ldr	r0, [pc, #124]	; (8012e54 <MX_GPIO_Init+0x238>)
 8012dd8:	f005 fb2a 	bl	8018430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8012ddc:	2308      	movs	r3, #8
 8012dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012de0:	2300      	movs	r3, #0
 8012de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012de4:	2300      	movs	r3, #0
 8012de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012dec:	4619      	mov	r1, r3
 8012dee:	481b      	ldr	r0, [pc, #108]	; (8012e5c <MX_GPIO_Init+0x240>)
 8012df0:	f005 fb1e 	bl	8018430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8012df4:	2380      	movs	r3, #128	; 0x80
 8012df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012df8:	4b19      	ldr	r3, [pc, #100]	; (8012e60 <MX_GPIO_Init+0x244>)
 8012dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8012e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e04:	4619      	mov	r1, r3
 8012e06:	4815      	ldr	r0, [pc, #84]	; (8012e5c <MX_GPIO_Init+0x240>)
 8012e08:	f005 fb12 	bl	8018430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAFETY_SWITCH_Pin;
 8012e0c:	2380      	movs	r3, #128	; 0x80
 8012e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e10:	2300      	movs	r3, #0
 8012e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e14:	2300      	movs	r3, #0
 8012e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SAFETY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8012e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	480d      	ldr	r0, [pc, #52]	; (8012e54 <MX_GPIO_Init+0x238>)
 8012e20:	f005 fb06 	bl	8018430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU9250_INT_Pin;
 8012e24:	2320      	movs	r3, #32
 8012e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MPU9250_INT_GPIO_Port, &GPIO_InitStruct);
 8012e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e34:	4619      	mov	r1, r3
 8012e36:	4806      	ldr	r0, [pc, #24]	; (8012e50 <MX_GPIO_Init+0x234>)
 8012e38:	f005 fafa 	bl	8018430 <HAL_GPIO_Init>

}
 8012e3c:	bf00      	nop
 8012e3e:	3738      	adds	r7, #56	; 0x38
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}
 8012e44:	58024400 	.word	0x58024400
 8012e48:	58021000 	.word	0x58021000
 8012e4c:	58021400 	.word	0x58021400
 8012e50:	58020400 	.word	0x58020400
 8012e54:	58020c00 	.word	0x58020c00
 8012e58:	58020800 	.word	0x58020800
 8012e5c:	58021800 	.word	0x58021800
 8012e60:	11110000 	.word	0x11110000

08012e64 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8012e68:	4b1b      	ldr	r3, [pc, #108]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012e6a:	4a1c      	ldr	r2, [pc, #112]	; (8012edc <MX_I2C1_Init+0x78>)
 8012e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8012e6e:	4b1a      	ldr	r3, [pc, #104]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012e70:	4a1b      	ldr	r2, [pc, #108]	; (8012ee0 <MX_I2C1_Init+0x7c>)
 8012e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8012e74:	4b18      	ldr	r3, [pc, #96]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012e76:	2200      	movs	r2, #0
 8012e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012e7a:	4b17      	ldr	r3, [pc, #92]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012e80:	4b15      	ldr	r3, [pc, #84]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012e82:	2200      	movs	r2, #0
 8012e84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8012e86:	4b14      	ldr	r3, [pc, #80]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012e8c:	4b12      	ldr	r3, [pc, #72]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012e8e:	2200      	movs	r2, #0
 8012e90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012e92:	4b11      	ldr	r3, [pc, #68]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012e94:	2200      	movs	r2, #0
 8012e96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012e98:	4b0f      	ldr	r3, [pc, #60]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012e9e:	480e      	ldr	r0, [pc, #56]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012ea0:	f005 fca8 	bl	80187f4 <HAL_I2C_Init>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8012eaa:	f000 fa79 	bl	80133a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012eae:	2100      	movs	r1, #0
 8012eb0:	4809      	ldr	r0, [pc, #36]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012eb2:	f008 f871 	bl	801af98 <HAL_I2CEx_ConfigAnalogFilter>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d001      	beq.n	8012ec0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8012ebc:	f000 fa70 	bl	80133a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8012ec0:	2100      	movs	r1, #0
 8012ec2:	4805      	ldr	r0, [pc, #20]	; (8012ed8 <MX_I2C1_Init+0x74>)
 8012ec4:	f008 f8b3 	bl	801b02e <HAL_I2CEx_ConfigDigitalFilter>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d001      	beq.n	8012ed2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8012ece:	f000 fa67 	bl	80133a0 <Error_Handler>
  }

}
 8012ed2:	bf00      	nop
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	2400c3dc 	.word	0x2400c3dc
 8012edc:	40005400 	.word	0x40005400
 8012ee0:	00b03fdb 	.word	0x00b03fdb

08012ee4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8012ee8:	4b1b      	ldr	r3, [pc, #108]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012eea:	4a1c      	ldr	r2, [pc, #112]	; (8012f5c <MX_I2C2_Init+0x78>)
 8012eec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8012eee:	4b1a      	ldr	r3, [pc, #104]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012ef0:	4a1b      	ldr	r2, [pc, #108]	; (8012f60 <MX_I2C2_Init+0x7c>)
 8012ef2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8012ef4:	4b18      	ldr	r3, [pc, #96]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012efa:	4b17      	ldr	r3, [pc, #92]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012efc:	2201      	movs	r2, #1
 8012efe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012f00:	4b15      	ldr	r3, [pc, #84]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012f02:	2200      	movs	r2, #0
 8012f04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8012f06:	4b14      	ldr	r3, [pc, #80]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012f08:	2200      	movs	r2, #0
 8012f0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012f0c:	4b12      	ldr	r3, [pc, #72]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012f0e:	2200      	movs	r2, #0
 8012f10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012f12:	4b11      	ldr	r3, [pc, #68]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012f14:	2200      	movs	r2, #0
 8012f16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012f18:	4b0f      	ldr	r3, [pc, #60]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8012f1e:	480e      	ldr	r0, [pc, #56]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012f20:	f005 fc68 	bl	80187f4 <HAL_I2C_Init>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d001      	beq.n	8012f2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8012f2a:	f000 fa39 	bl	80133a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012f2e:	2100      	movs	r1, #0
 8012f30:	4809      	ldr	r0, [pc, #36]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012f32:	f008 f831 	bl	801af98 <HAL_I2CEx_ConfigAnalogFilter>
 8012f36:	4603      	mov	r3, r0
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d001      	beq.n	8012f40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8012f3c:	f000 fa30 	bl	80133a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8012f40:	2100      	movs	r1, #0
 8012f42:	4805      	ldr	r0, [pc, #20]	; (8012f58 <MX_I2C2_Init+0x74>)
 8012f44:	f008 f873 	bl	801b02e <HAL_I2CEx_ConfigDigitalFilter>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d001      	beq.n	8012f52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8012f4e:	f000 fa27 	bl	80133a0 <Error_Handler>
  }

}
 8012f52:	bf00      	nop
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	2400c428 	.word	0x2400c428
 8012f5c:	40005800 	.word	0x40005800
 8012f60:	00b03fdb 	.word	0x00b03fdb

08012f64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b08c      	sub	sp, #48	; 0x30
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f6c:	f107 031c 	add.w	r3, r7, #28
 8012f70:	2200      	movs	r2, #0
 8012f72:	601a      	str	r2, [r3, #0]
 8012f74:	605a      	str	r2, [r3, #4]
 8012f76:	609a      	str	r2, [r3, #8]
 8012f78:	60da      	str	r2, [r3, #12]
 8012f7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	4a5b      	ldr	r2, [pc, #364]	; (80130f0 <HAL_I2C_MspInit+0x18c>)
 8012f82:	4293      	cmp	r3, r2
 8012f84:	d16c      	bne.n	8013060 <HAL_I2C_MspInit+0xfc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012f86:	4b5b      	ldr	r3, [pc, #364]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 8012f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012f8c:	4a59      	ldr	r2, [pc, #356]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 8012f8e:	f043 0302 	orr.w	r3, r3, #2
 8012f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012f96:	4b57      	ldr	r3, [pc, #348]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 8012f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012f9c:	f003 0302 	and.w	r3, r3, #2
 8012fa0:	61bb      	str	r3, [r7, #24]
 8012fa2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU9250_SCL_Pin|MPU9250_SDA_Pin;
 8012fa4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8012fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8012faa:	2312      	movs	r3, #18
 8012fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012fb6:	2304      	movs	r3, #4
 8012fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012fba:	f107 031c 	add.w	r3, r7, #28
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	484d      	ldr	r0, [pc, #308]	; (80130f8 <HAL_I2C_MspInit+0x194>)
 8012fc2:	f005 fa35 	bl	8018430 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012fc6:	4b4b      	ldr	r3, [pc, #300]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 8012fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012fcc:	4a49      	ldr	r2, [pc, #292]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 8012fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012fd6:	4b47      	ldr	r3, [pc, #284]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 8012fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012fe0:	617b      	str	r3, [r7, #20]
 8012fe2:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8012fe4:	4b45      	ldr	r3, [pc, #276]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8012fe6:	4a46      	ldr	r2, [pc, #280]	; (8013100 <HAL_I2C_MspInit+0x19c>)
 8012fe8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8012fea:	4b44      	ldr	r3, [pc, #272]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8012fec:	2221      	movs	r2, #33	; 0x21
 8012fee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012ff0:	4b42      	ldr	r3, [pc, #264]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012ff6:	4b41      	ldr	r3, [pc, #260]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012ffc:	4b3f      	ldr	r3, [pc, #252]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8012ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013002:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013004:	4b3d      	ldr	r3, [pc, #244]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8013006:	2200      	movs	r2, #0
 8013008:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801300a:	4b3c      	ldr	r3, [pc, #240]	; (80130fc <HAL_I2C_MspInit+0x198>)
 801300c:	2200      	movs	r2, #0
 801300e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8013010:	4b3a      	ldr	r3, [pc, #232]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8013012:	2200      	movs	r2, #0
 8013014:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013016:	4b39      	ldr	r3, [pc, #228]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8013018:	2200      	movs	r2, #0
 801301a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801301c:	4b37      	ldr	r3, [pc, #220]	; (80130fc <HAL_I2C_MspInit+0x198>)
 801301e:	2200      	movs	r2, #0
 8013020:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8013022:	4836      	ldr	r0, [pc, #216]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8013024:	f002 fece 	bl	8015dc4 <HAL_DMA_Init>
 8013028:	4603      	mov	r3, r0
 801302a:	2b00      	cmp	r3, #0
 801302c:	d001      	beq.n	8013032 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 801302e:	f000 f9b7 	bl	80133a0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	4a31      	ldr	r2, [pc, #196]	; (80130fc <HAL_I2C_MspInit+0x198>)
 8013036:	63da      	str	r2, [r3, #60]	; 0x3c
 8013038:	4a30      	ldr	r2, [pc, #192]	; (80130fc <HAL_I2C_MspInit+0x198>)
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 801303e:	2200      	movs	r2, #0
 8013040:	2105      	movs	r1, #5
 8013042:	201f      	movs	r0, #31
 8013044:	f002 fe96 	bl	8015d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8013048:	201f      	movs	r0, #31
 801304a:	f002 fead 	bl	8015da8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 801304e:	2200      	movs	r2, #0
 8013050:	2105      	movs	r1, #5
 8013052:	2020      	movs	r0, #32
 8013054:	f002 fe8e 	bl	8015d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8013058:	2020      	movs	r0, #32
 801305a:	f002 fea5 	bl	8015da8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 801305e:	e042      	b.n	80130e6 <HAL_I2C_MspInit+0x182>
  else if(i2cHandle->Instance==I2C2)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	4a27      	ldr	r2, [pc, #156]	; (8013104 <HAL_I2C_MspInit+0x1a0>)
 8013066:	4293      	cmp	r3, r2
 8013068:	d13d      	bne.n	80130e6 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801306a:	4b22      	ldr	r3, [pc, #136]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 801306c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013070:	4a20      	ldr	r2, [pc, #128]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 8013072:	f043 0320 	orr.w	r3, r3, #32
 8013076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801307a:	4b1e      	ldr	r3, [pc, #120]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 801307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013080:	f003 0320 	and.w	r3, r3, #32
 8013084:	613b      	str	r3, [r7, #16]
 8013086:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013088:	2303      	movs	r3, #3
 801308a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801308c:	2312      	movs	r3, #18
 801308e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013090:	2300      	movs	r3, #0
 8013092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013094:	2300      	movs	r3, #0
 8013096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013098:	2304      	movs	r3, #4
 801309a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801309c:	f107 031c 	add.w	r3, r7, #28
 80130a0:	4619      	mov	r1, r3
 80130a2:	4819      	ldr	r0, [pc, #100]	; (8013108 <HAL_I2C_MspInit+0x1a4>)
 80130a4:	f005 f9c4 	bl	8018430 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80130a8:	4b12      	ldr	r3, [pc, #72]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 80130aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80130ae:	4a11      	ldr	r2, [pc, #68]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 80130b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80130b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80130b8:	4b0e      	ldr	r3, [pc, #56]	; (80130f4 <HAL_I2C_MspInit+0x190>)
 80130ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80130be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80130c2:	60fb      	str	r3, [r7, #12]
 80130c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 80130c6:	2200      	movs	r2, #0
 80130c8:	2106      	movs	r1, #6
 80130ca:	2021      	movs	r0, #33	; 0x21
 80130cc:	f002 fe52 	bl	8015d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80130d0:	2021      	movs	r0, #33	; 0x21
 80130d2:	f002 fe69 	bl	8015da8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 80130d6:	2200      	movs	r2, #0
 80130d8:	2106      	movs	r1, #6
 80130da:	2022      	movs	r0, #34	; 0x22
 80130dc:	f002 fe4a 	bl	8015d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80130e0:	2022      	movs	r0, #34	; 0x22
 80130e2:	f002 fe61 	bl	8015da8 <HAL_NVIC_EnableIRQ>
}
 80130e6:	bf00      	nop
 80130e8:	3730      	adds	r7, #48	; 0x30
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	40005400 	.word	0x40005400
 80130f4:	58024400 	.word	0x58024400
 80130f8:	58020400 	.word	0x58020400
 80130fc:	2400c474 	.word	0x2400c474
 8013100:	40020040 	.word	0x40020040
 8013104:	40005800 	.word	0x40005800
 8013108:	58021400 	.word	0x58021400

0801310c <msOverFlow>:

static __inline void msOverFlow(){
 801310c:	b480      	push	{r7}
 801310e:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 8013110:	4b04      	ldr	r3, [pc, #16]	; (8013124 <msOverFlow+0x18>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	3301      	adds	r3, #1
 8013116:	4a03      	ldr	r2, [pc, #12]	; (8013124 <msOverFlow+0x18>)
 8013118:	6013      	str	r3, [r2, #0]
}
 801311a:	bf00      	nop
 801311c:	46bd      	mov	sp, r7
 801311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013122:	4770      	bx	lr
 8013124:	2400145c 	.word	0x2400145c

08013128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801312c:	f001 fd92 	bl	8014c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013130:	f000 f830 	bl	8013194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013134:	f7ff fd72 	bl	8012c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8013138:	f7ff fc7e 	bl	8012a38 <MX_DMA_Init>
  MX_USART3_UART_Init();
 801313c:	f001 fb26 	bl	801478c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8013140:	f001 fcd4 	bl	8014aec <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8013144:	f7ff fe8e 	bl	8012e64 <MX_I2C1_Init>
  MX_I2C2_Init();
 8013148:	f7ff fecc 	bl	8012ee4 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 801314c:	f000 f930 	bl	80133b0 <MX_SDMMC1_SD_Init>
  MX_TIM3_Init();
 8013150:	f000 fd56 	bl	8013c00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8013154:	f000 fde2 	bl	8013d1c <MX_TIM4_Init>
  MX_UART7_Init();
 8013158:	f001 fa2e 	bl	80145b8 <MX_UART7_Init>
  MX_USART2_UART_Init();
 801315c:	f001 fac8 	bl	80146f0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8013160:	f010 fec6 	bl	8023ef0 <MX_FATFS_Init>
  MX_ADC3_Init();
 8013164:	f7ff fbc6 	bl	80128f4 <MX_ADC3_Init>
  MX_TIM2_Init();
 8013168:	f000 fcfc 	bl	8013b64 <MX_TIM2_Init>
  MX_TIM1_Init();
 801316c:	f000 fc2a 	bl	80139c4 <MX_TIM1_Init>
  MX_UART8_Init();
 8013170:	f001 fa72 	bl	8014658 <MX_UART8_Init>
  MX_TIM5_Init();
 8013174:	f000 fe6a 	bl	8013e4c <MX_TIM5_Init>
  MX_TIM8_Init();
 8013178:	f000 ff00 	bl	8013f7c <MX_TIM8_Init>
  MX_TIM15_Init();
 801317c:	f000 ffaa 	bl	80140d4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  cppMain();
 8013180:	f7ff f928 	bl	80123d4 <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8013184:	f013 fbcc 	bl	8026920 <osKernelInitialize>
  MX_FREERTOS_Init();
 8013188:	f7ff fc86 	bl	8012a98 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 801318c:	f013 fc1e 	bl	80269cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8013190:	e7fe      	b.n	8013190 <main+0x68>
	...

08013194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b0cc      	sub	sp, #304	; 0x130
 8013198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801319a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801319e:	224c      	movs	r2, #76	; 0x4c
 80131a0:	2100      	movs	r1, #0
 80131a2:	4618      	mov	r0, r3
 80131a4:	f01a fd4f 	bl	802dc46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80131a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80131ac:	2220      	movs	r2, #32
 80131ae:	2100      	movs	r1, #0
 80131b0:	4618      	mov	r0, r3
 80131b2:	f01a fd48 	bl	802dc46 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80131b6:	f107 0308 	add.w	r3, r7, #8
 80131ba:	4618      	mov	r0, r3
 80131bc:	23bc      	movs	r3, #188	; 0xbc
 80131be:	461a      	mov	r2, r3
 80131c0:	2100      	movs	r1, #0
 80131c2:	f01a fd40 	bl	802dc46 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80131c6:	2002      	movs	r0, #2
 80131c8:	f008 f8c6 	bl	801b358 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80131cc:	1d3b      	adds	r3, r7, #4
 80131ce:	2200      	movs	r2, #0
 80131d0:	601a      	str	r2, [r3, #0]
 80131d2:	4b65      	ldr	r3, [pc, #404]	; (8013368 <SystemClock_Config+0x1d4>)
 80131d4:	699b      	ldr	r3, [r3, #24]
 80131d6:	4a64      	ldr	r2, [pc, #400]	; (8013368 <SystemClock_Config+0x1d4>)
 80131d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80131dc:	6193      	str	r3, [r2, #24]
 80131de:	4b62      	ldr	r3, [pc, #392]	; (8013368 <SystemClock_Config+0x1d4>)
 80131e0:	699b      	ldr	r3, [r3, #24]
 80131e2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80131e6:	1d3b      	adds	r3, r7, #4
 80131e8:	601a      	str	r2, [r3, #0]
 80131ea:	4b60      	ldr	r3, [pc, #384]	; (801336c <SystemClock_Config+0x1d8>)
 80131ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131ee:	4a5f      	ldr	r2, [pc, #380]	; (801336c <SystemClock_Config+0x1d8>)
 80131f0:	f043 0301 	orr.w	r3, r3, #1
 80131f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80131f6:	4b5d      	ldr	r3, [pc, #372]	; (801336c <SystemClock_Config+0x1d8>)
 80131f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131fa:	f003 0201 	and.w	r2, r3, #1
 80131fe:	1d3b      	adds	r3, r7, #4
 8013200:	601a      	str	r2, [r3, #0]
 8013202:	1d3b      	adds	r3, r7, #4
 8013204:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8013206:	bf00      	nop
 8013208:	4b57      	ldr	r3, [pc, #348]	; (8013368 <SystemClock_Config+0x1d4>)
 801320a:	699b      	ldr	r3, [r3, #24]
 801320c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013214:	d1f8      	bne.n	8013208 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8013216:	4b56      	ldr	r3, [pc, #344]	; (8013370 <SystemClock_Config+0x1dc>)
 8013218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801321a:	f023 0303 	bic.w	r3, r3, #3
 801321e:	4a54      	ldr	r2, [pc, #336]	; (8013370 <SystemClock_Config+0x1dc>)
 8013220:	f043 0302 	orr.w	r3, r3, #2
 8013224:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8013226:	2301      	movs	r3, #1
 8013228:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801322c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013230:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013234:	2302      	movs	r3, #2
 8013236:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801323a:	2302      	movs	r3, #2
 801323c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8013240:	2301      	movs	r3, #1
 8013242:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8013246:	2378      	movs	r3, #120	; 0x78
 8013248:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 801324c:	2302      	movs	r3, #2
 801324e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8013252:	2314      	movs	r3, #20
 8013254:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8013258:	2302      	movs	r3, #2
 801325a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 801325e:	230c      	movs	r3, #12
 8013260:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8013264:	2300      	movs	r3, #0
 8013266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 801326a:	2300      	movs	r3, #0
 801326c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013270:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013274:	4618      	mov	r0, r3
 8013276:	f008 f8b9 	bl	801b3ec <HAL_RCC_OscConfig>
 801327a:	4603      	mov	r3, r0
 801327c:	2b00      	cmp	r3, #0
 801327e:	d001      	beq.n	8013284 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8013280:	f000 f88e 	bl	80133a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013284:	233f      	movs	r3, #63	; 0x3f
 8013286:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801328a:	2303      	movs	r3, #3
 801328c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8013290:	2300      	movs	r3, #0
 8013292:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8013296:	2308      	movs	r3, #8
 8013298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 801329c:	2340      	movs	r3, #64	; 0x40
 801329e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80132a2:	2340      	movs	r3, #64	; 0x40
 80132a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80132a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80132b0:	2340      	movs	r3, #64	; 0x40
 80132b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80132b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80132ba:	2104      	movs	r1, #4
 80132bc:	4618      	mov	r0, r3
 80132be:	f008 fca5 	bl	801bc0c <HAL_RCC_ClockConfig>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d001      	beq.n	80132cc <SystemClock_Config+0x138>
  {
    Error_Handler();
 80132c8:	f000 f86a 	bl	80133a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80132cc:	f107 0308 	add.w	r3, r7, #8
 80132d0:	4a28      	ldr	r2, [pc, #160]	; (8013374 <SystemClock_Config+0x1e0>)
 80132d2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80132d4:	f107 0308 	add.w	r3, r7, #8
 80132d8:	2201      	movs	r2, #1
 80132da:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 80132dc:	f107 0308 	add.w	r3, r7, #8
 80132e0:	2213      	movs	r2, #19
 80132e2:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80132e4:	f107 0308 	add.w	r3, r7, #8
 80132e8:	2202      	movs	r2, #2
 80132ea:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80132ec:	f107 0308 	add.w	r3, r7, #8
 80132f0:	2202      	movs	r2, #2
 80132f2:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80132f4:	f107 0308 	add.w	r3, r7, #8
 80132f8:	2202      	movs	r2, #2
 80132fa:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80132fc:	f107 0308 	add.w	r3, r7, #8
 8013300:	22c0      	movs	r2, #192	; 0xc0
 8013302:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8013304:	f107 0308 	add.w	r3, r7, #8
 8013308:	2220      	movs	r2, #32
 801330a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 801330c:	f107 0308 	add.w	r3, r7, #8
 8013310:	2200      	movs	r2, #0
 8013312:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8013314:	f107 0308 	add.w	r3, r7, #8
 8013318:	2200      	movs	r2, #0
 801331a:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 801331c:	f107 0308 	add.w	r3, r7, #8
 8013320:	2200      	movs	r2, #0
 8013322:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8013324:	f107 0308 	add.w	r3, r7, #8
 8013328:	2200      	movs	r2, #0
 801332a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801332e:	f107 0308 	add.w	r3, r7, #8
 8013332:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 801333a:	f107 0308 	add.w	r3, r7, #8
 801333e:	2200      	movs	r2, #0
 8013340:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013344:	f107 0308 	add.w	r3, r7, #8
 8013348:	4618      	mov	r0, r3
 801334a:	f009 f825 	bl	801c398 <HAL_RCCEx_PeriphCLKConfig>
 801334e:	4603      	mov	r3, r0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d001      	beq.n	8013358 <SystemClock_Config+0x1c4>
  {
    Error_Handler();
 8013354:	f000 f824 	bl	80133a0 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8013358:	f008 f838 	bl	801b3cc <HAL_PWREx_EnableUSBVoltageDetector>
}
 801335c:	bf00      	nop
 801335e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	58024800 	.word	0x58024800
 801336c:	58000400 	.word	0x58000400
 8013370:	58024400 	.word	0x58024400
 8013374:	000d000a 	.word	0x000d000a

08013378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	msOverFlow();
 8013380:	f7ff fec4 	bl	801310c <msOverFlow>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4a04      	ldr	r2, [pc, #16]	; (801339c <HAL_TIM_PeriodElapsedCallback+0x24>)
 801338a:	4293      	cmp	r3, r2
 801338c:	d101      	bne.n	8013392 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 801338e:	f001 fc9d 	bl	8014ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013392:	bf00      	nop
 8013394:	3708      	adds	r7, #8
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	40001000 	.word	0x40001000

080133a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80133a0:	b480      	push	{r7}
 80133a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80133a4:	bf00      	nop
 80133a6:	46bd      	mov	sp, r7
 80133a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ac:	4770      	bx	lr
	...

080133b0 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80133b0:	b480      	push	{r7}
 80133b2:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 80133b4:	4b0d      	ldr	r3, [pc, #52]	; (80133ec <MX_SDMMC1_SD_Init+0x3c>)
 80133b6:	4a0e      	ldr	r2, [pc, #56]	; (80133f0 <MX_SDMMC1_SD_Init+0x40>)
 80133b8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80133ba:	4b0c      	ldr	r3, [pc, #48]	; (80133ec <MX_SDMMC1_SD_Init+0x3c>)
 80133bc:	2200      	movs	r2, #0
 80133be:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80133c0:	4b0a      	ldr	r3, [pc, #40]	; (80133ec <MX_SDMMC1_SD_Init+0x3c>)
 80133c2:	2200      	movs	r2, #0
 80133c4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80133c6:	4b09      	ldr	r3, [pc, #36]	; (80133ec <MX_SDMMC1_SD_Init+0x3c>)
 80133c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80133cc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80133ce:	4b07      	ldr	r3, [pc, #28]	; (80133ec <MX_SDMMC1_SD_Init+0x3c>)
 80133d0:	2200      	movs	r2, #0
 80133d2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80133d4:	4b05      	ldr	r3, [pc, #20]	; (80133ec <MX_SDMMC1_SD_Init+0x3c>)
 80133d6:	2200      	movs	r2, #0
 80133d8:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80133da:	4b04      	ldr	r3, [pc, #16]	; (80133ec <MX_SDMMC1_SD_Init+0x3c>)
 80133dc:	2201      	movs	r2, #1
 80133de:	619a      	str	r2, [r3, #24]

}
 80133e0:	bf00      	nop
 80133e2:	46bd      	mov	sp, r7
 80133e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e8:	4770      	bx	lr
 80133ea:	bf00      	nop
 80133ec:	2400c4ec 	.word	0x2400c4ec
 80133f0:	52007000 	.word	0x52007000

080133f4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b08a      	sub	sp, #40	; 0x28
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80133fc:	f107 0314 	add.w	r3, r7, #20
 8013400:	2200      	movs	r2, #0
 8013402:	601a      	str	r2, [r3, #0]
 8013404:	605a      	str	r2, [r3, #4]
 8013406:	609a      	str	r2, [r3, #8]
 8013408:	60da      	str	r2, [r3, #12]
 801340a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	4a36      	ldr	r2, [pc, #216]	; (80134ec <HAL_SD_MspInit+0xf8>)
 8013412:	4293      	cmp	r3, r2
 8013414:	d166      	bne.n	80134e4 <HAL_SD_MspInit+0xf0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8013416:	4b36      	ldr	r3, [pc, #216]	; (80134f0 <HAL_SD_MspInit+0xfc>)
 8013418:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801341c:	4a34      	ldr	r2, [pc, #208]	; (80134f0 <HAL_SD_MspInit+0xfc>)
 801341e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013422:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8013426:	4b32      	ldr	r3, [pc, #200]	; (80134f0 <HAL_SD_MspInit+0xfc>)
 8013428:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801342c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013430:	613b      	str	r3, [r7, #16]
 8013432:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013434:	4b2e      	ldr	r3, [pc, #184]	; (80134f0 <HAL_SD_MspInit+0xfc>)
 8013436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801343a:	4a2d      	ldr	r2, [pc, #180]	; (80134f0 <HAL_SD_MspInit+0xfc>)
 801343c:	f043 0304 	orr.w	r3, r3, #4
 8013440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013444:	4b2a      	ldr	r3, [pc, #168]	; (80134f0 <HAL_SD_MspInit+0xfc>)
 8013446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801344a:	f003 0304 	and.w	r3, r3, #4
 801344e:	60fb      	str	r3, [r7, #12]
 8013450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013452:	4b27      	ldr	r3, [pc, #156]	; (80134f0 <HAL_SD_MspInit+0xfc>)
 8013454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013458:	4a25      	ldr	r2, [pc, #148]	; (80134f0 <HAL_SD_MspInit+0xfc>)
 801345a:	f043 0308 	orr.w	r3, r3, #8
 801345e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013462:	4b23      	ldr	r3, [pc, #140]	; (80134f0 <HAL_SD_MspInit+0xfc>)
 8013464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013468:	f003 0308 	and.w	r3, r3, #8
 801346c:	60bb      	str	r3, [r7, #8]
 801346e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8013470:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8013474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013476:	2302      	movs	r3, #2
 8013478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801347a:	2301      	movs	r3, #1
 801347c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801347e:	2303      	movs	r3, #3
 8013480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8013482:	230c      	movs	r3, #12
 8013484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013486:	f107 0314 	add.w	r3, r7, #20
 801348a:	4619      	mov	r1, r3
 801348c:	4819      	ldr	r0, [pc, #100]	; (80134f4 <HAL_SD_MspInit+0x100>)
 801348e:	f004 ffcf 	bl	8018430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8013492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013498:	2302      	movs	r3, #2
 801349a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801349c:	2300      	movs	r3, #0
 801349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134a0:	2303      	movs	r3, #3
 80134a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80134a4:	230c      	movs	r3, #12
 80134a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80134a8:	f107 0314 	add.w	r3, r7, #20
 80134ac:	4619      	mov	r1, r3
 80134ae:	4811      	ldr	r0, [pc, #68]	; (80134f4 <HAL_SD_MspInit+0x100>)
 80134b0:	f004 ffbe 	bl	8018430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80134b4:	2304      	movs	r3, #4
 80134b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80134b8:	2302      	movs	r3, #2
 80134ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80134bc:	2301      	movs	r3, #1
 80134be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134c0:	2303      	movs	r3, #3
 80134c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80134c4:	230c      	movs	r3, #12
 80134c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80134c8:	f107 0314 	add.w	r3, r7, #20
 80134cc:	4619      	mov	r1, r3
 80134ce:	480a      	ldr	r0, [pc, #40]	; (80134f8 <HAL_SD_MspInit+0x104>)
 80134d0:	f004 ffae 	bl	8018430 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 10, 0);
 80134d4:	2200      	movs	r2, #0
 80134d6:	210a      	movs	r1, #10
 80134d8:	2031      	movs	r0, #49	; 0x31
 80134da:	f002 fc4b 	bl	8015d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80134de:	2031      	movs	r0, #49	; 0x31
 80134e0:	f002 fc62 	bl	8015da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80134e4:	bf00      	nop
 80134e6:	3728      	adds	r7, #40	; 0x28
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}
 80134ec:	52007000 	.word	0x52007000
 80134f0:	58024400 	.word	0x58024400
 80134f4:	58020800 	.word	0x58020800
 80134f8:	58020c00 	.word	0x58020c00

080134fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b083      	sub	sp, #12
 8013500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013502:	4b0a      	ldr	r3, [pc, #40]	; (801352c <HAL_MspInit+0x30>)
 8013504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8013508:	4a08      	ldr	r2, [pc, #32]	; (801352c <HAL_MspInit+0x30>)
 801350a:	f043 0302 	orr.w	r3, r3, #2
 801350e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8013512:	4b06      	ldr	r3, [pc, #24]	; (801352c <HAL_MspInit+0x30>)
 8013514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8013518:	f003 0302 	and.w	r3, r3, #2
 801351c:	607b      	str	r3, [r7, #4]
 801351e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013520:	bf00      	nop
 8013522:	370c      	adds	r7, #12
 8013524:	46bd      	mov	sp, r7
 8013526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352a:	4770      	bx	lr
 801352c:	58024400 	.word	0x58024400

08013530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b08e      	sub	sp, #56	; 0x38
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8013538:	2300      	movs	r3, #0
 801353a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 801353c:	2300      	movs	r3, #0
 801353e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8013540:	2200      	movs	r2, #0
 8013542:	6879      	ldr	r1, [r7, #4]
 8013544:	2036      	movs	r0, #54	; 0x36
 8013546:	f002 fc15 	bl	8015d74 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801354a:	2036      	movs	r0, #54	; 0x36
 801354c:	f002 fc2c 	bl	8015da8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8013550:	4b21      	ldr	r3, [pc, #132]	; (80135d8 <HAL_InitTick+0xa8>)
 8013552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013556:	4a20      	ldr	r2, [pc, #128]	; (80135d8 <HAL_InitTick+0xa8>)
 8013558:	f043 0310 	orr.w	r3, r3, #16
 801355c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8013560:	4b1d      	ldr	r3, [pc, #116]	; (80135d8 <HAL_InitTick+0xa8>)
 8013562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8013566:	f003 0310 	and.w	r3, r3, #16
 801356a:	60bb      	str	r3, [r7, #8]
 801356c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801356e:	f107 020c 	add.w	r2, r7, #12
 8013572:	f107 0310 	add.w	r3, r7, #16
 8013576:	4611      	mov	r1, r2
 8013578:	4618      	mov	r0, r3
 801357a:	f008 fecb 	bl	801c314 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 801357e:	f008 fe9d 	bl	801c2bc <HAL_RCC_GetPCLK1Freq>
 8013582:	4603      	mov	r3, r0
 8013584:	005b      	lsls	r3, r3, #1
 8013586:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8013588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801358a:	4a14      	ldr	r2, [pc, #80]	; (80135dc <HAL_InitTick+0xac>)
 801358c:	fba2 2303 	umull	r2, r3, r2, r3
 8013590:	0c9b      	lsrs	r3, r3, #18
 8013592:	3b01      	subs	r3, #1
 8013594:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8013596:	4b12      	ldr	r3, [pc, #72]	; (80135e0 <HAL_InitTick+0xb0>)
 8013598:	4a12      	ldr	r2, [pc, #72]	; (80135e4 <HAL_InitTick+0xb4>)
 801359a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 801359c:	4b10      	ldr	r3, [pc, #64]	; (80135e0 <HAL_InitTick+0xb0>)
 801359e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80135a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80135a4:	4a0e      	ldr	r2, [pc, #56]	; (80135e0 <HAL_InitTick+0xb0>)
 80135a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80135aa:	4b0d      	ldr	r3, [pc, #52]	; (80135e0 <HAL_InitTick+0xb0>)
 80135ac:	2200      	movs	r2, #0
 80135ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80135b0:	4b0b      	ldr	r3, [pc, #44]	; (80135e0 <HAL_InitTick+0xb0>)
 80135b2:	2200      	movs	r2, #0
 80135b4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80135b6:	480a      	ldr	r0, [pc, #40]	; (80135e0 <HAL_InitTick+0xb0>)
 80135b8:	f00c fa1e 	bl	801f9f8 <HAL_TIM_Base_Init>
 80135bc:	4603      	mov	r3, r0
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d104      	bne.n	80135cc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80135c2:	4807      	ldr	r0, [pc, #28]	; (80135e0 <HAL_InitTick+0xb0>)
 80135c4:	f00c fa70 	bl	801faa8 <HAL_TIM_Base_Start_IT>
 80135c8:	4603      	mov	r3, r0
 80135ca:	e000      	b.n	80135ce <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80135cc:	2301      	movs	r3, #1
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3738      	adds	r7, #56	; 0x38
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
 80135d6:	bf00      	nop
 80135d8:	58024400 	.word	0x58024400
 80135dc:	431bde83 	.word	0x431bde83
 80135e0:	2400c56c 	.word	0x2400c56c
 80135e4:	40001000 	.word	0x40001000

080135e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80135e8:	b480      	push	{r7}
 80135ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80135ec:	bf00      	nop
 80135ee:	46bd      	mov	sp, r7
 80135f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f4:	4770      	bx	lr

080135f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80135f6:	b480      	push	{r7}
 80135f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80135fa:	e7fe      	b.n	80135fa <HardFault_Handler+0x4>

080135fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80135fc:	b480      	push	{r7}
 80135fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013600:	e7fe      	b.n	8013600 <MemManage_Handler+0x4>

08013602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013602:	b480      	push	{r7}
 8013604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013606:	e7fe      	b.n	8013606 <BusFault_Handler+0x4>

08013608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013608:	b480      	push	{r7}
 801360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801360c:	e7fe      	b.n	801360c <UsageFault_Handler+0x4>

0801360e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801360e:	b480      	push	{r7}
 8013610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013612:	bf00      	nop
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr

0801361c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8013620:	4802      	ldr	r0, [pc, #8]	; (801362c <DMA1_Stream0_IRQHandler+0x10>)
 8013622:	f003 fbd9 	bl	8016dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8013626:	bf00      	nop
 8013628:	bd80      	pop	{r7, pc}
 801362a:	bf00      	nop
 801362c:	2400c95c 	.word	0x2400c95c

08013630 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8013634:	4802      	ldr	r0, [pc, #8]	; (8013640 <DMA1_Stream1_IRQHandler+0x10>)
 8013636:	f003 fbcf 	bl	8016dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 801363a:	bf00      	nop
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	2400c8e4 	.word	0x2400c8e4

08013644 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8013648:	4802      	ldr	r0, [pc, #8]	; (8013654 <DMA1_Stream2_IRQHandler+0x10>)
 801364a:	f003 fbc5 	bl	8016dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 801364e:	bf00      	nop
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	2400c474 	.word	0x2400c474

08013658 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 801365c:	4802      	ldr	r0, [pc, #8]	; (8013668 <TIM2_IRQHandler+0x10>)
 801365e:	f00c fced 	bl	802003c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8013662:	bf00      	nop
 8013664:	bd80      	pop	{r7, pc}
 8013666:	bf00      	nop
 8013668:	2400c780 	.word	0x2400c780

0801366c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8013670:	4802      	ldr	r0, [pc, #8]	; (801367c <I2C1_EV_IRQHandler+0x10>)
 8013672:	f005 fd0b 	bl	801908c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8013676:	bf00      	nop
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	2400c3dc 	.word	0x2400c3dc

08013680 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8013684:	4802      	ldr	r0, [pc, #8]	; (8013690 <I2C1_ER_IRQHandler+0x10>)
 8013686:	f005 fd1b 	bl	80190c0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 801368a:	bf00      	nop
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	2400c3dc 	.word	0x2400c3dc

08013694 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8013698:	4802      	ldr	r0, [pc, #8]	; (80136a4 <I2C2_EV_IRQHandler+0x10>)
 801369a:	f005 fcf7 	bl	801908c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 801369e:	bf00      	nop
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	2400c428 	.word	0x2400c428

080136a8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80136ac:	4802      	ldr	r0, [pc, #8]	; (80136b8 <I2C2_ER_IRQHandler+0x10>)
 80136ae:	f005 fd07 	bl	80190c0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80136b2:	bf00      	nop
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	2400c428 	.word	0x2400c428

080136bc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80136c0:	4802      	ldr	r0, [pc, #8]	; (80136cc <SDMMC1_IRQHandler+0x10>)
 80136c2:	f00a ffa1 	bl	801e608 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80136c6:	bf00      	nop
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	2400c4ec 	.word	0x2400c4ec

080136d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80136d4:	4802      	ldr	r0, [pc, #8]	; (80136e0 <TIM6_DAC_IRQHandler+0x10>)
 80136d6:	f00c fcb1 	bl	802003c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80136da:	bf00      	nop
 80136dc:	bd80      	pop	{r7, pc}
 80136de:	bf00      	nop
 80136e0:	2400c56c 	.word	0x2400c56c

080136e4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80136e8:	4802      	ldr	r0, [pc, #8]	; (80136f4 <UART7_IRQHandler+0x10>)
 80136ea:	f00e f885 	bl	80217f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80136ee:	bf00      	nop
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	2400c7cc 	.word	0x2400c7cc

080136f8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80136fc:	4802      	ldr	r0, [pc, #8]	; (8013708 <UART8_IRQHandler+0x10>)
 80136fe:	f00e f87b 	bl	80217f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8013702:	bf00      	nop
 8013704:	bd80      	pop	{r7, pc}
 8013706:	bf00      	nop
 8013708:	2400c9d4 	.word	0x2400c9d4

0801370c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8013710:	4802      	ldr	r0, [pc, #8]	; (801371c <TIM15_IRQHandler+0x10>)
 8013712:	f00c fc93 	bl	802003c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8013716:	bf00      	nop
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	2400c650 	.word	0x2400c650

08013720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013720:	b480      	push	{r7}
 8013722:	af00      	add	r7, sp, #0
	return 1;
 8013724:	2301      	movs	r3, #1
}
 8013726:	4618      	mov	r0, r3
 8013728:	46bd      	mov	sp, r7
 801372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372e:	4770      	bx	lr

08013730 <_kill>:

int _kill(int pid, int sig)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b082      	sub	sp, #8
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801373a:	f01a fa3d 	bl	802dbb8 <__errno>
 801373e:	4602      	mov	r2, r0
 8013740:	2316      	movs	r3, #22
 8013742:	6013      	str	r3, [r2, #0]
	return -1;
 8013744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013748:	4618      	mov	r0, r3
 801374a:	3708      	adds	r7, #8
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}

08013750 <_exit>:

void _exit (int status)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b082      	sub	sp, #8
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8013758:	f04f 31ff 	mov.w	r1, #4294967295
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f7ff ffe7 	bl	8013730 <_kill>
	while (1) {}		/* Make sure we hang here */
 8013762:	e7fe      	b.n	8013762 <_exit+0x12>

08013764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b086      	sub	sp, #24
 8013768:	af00      	add	r7, sp, #0
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013770:	2300      	movs	r3, #0
 8013772:	617b      	str	r3, [r7, #20]
 8013774:	e00a      	b.n	801378c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8013776:	f3af 8000 	nop.w
 801377a:	4601      	mov	r1, r0
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	1c5a      	adds	r2, r3, #1
 8013780:	60ba      	str	r2, [r7, #8]
 8013782:	b2ca      	uxtb	r2, r1
 8013784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	3301      	adds	r3, #1
 801378a:	617b      	str	r3, [r7, #20]
 801378c:	697a      	ldr	r2, [r7, #20]
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	429a      	cmp	r2, r3
 8013792:	dbf0      	blt.n	8013776 <_read+0x12>
	}

return len;
 8013794:	687b      	ldr	r3, [r7, #4]
}
 8013796:	4618      	mov	r0, r3
 8013798:	3718      	adds	r7, #24
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}

0801379e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801379e:	b580      	push	{r7, lr}
 80137a0:	b086      	sub	sp, #24
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	60f8      	str	r0, [r7, #12]
 80137a6:	60b9      	str	r1, [r7, #8]
 80137a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80137aa:	2300      	movs	r3, #0
 80137ac:	617b      	str	r3, [r7, #20]
 80137ae:	e009      	b.n	80137c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	1c5a      	adds	r2, r3, #1
 80137b4:	60ba      	str	r2, [r7, #8]
 80137b6:	781b      	ldrb	r3, [r3, #0]
 80137b8:	4618      	mov	r0, r3
 80137ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	3301      	adds	r3, #1
 80137c2:	617b      	str	r3, [r7, #20]
 80137c4:	697a      	ldr	r2, [r7, #20]
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	429a      	cmp	r2, r3
 80137ca:	dbf1      	blt.n	80137b0 <_write+0x12>
	}
	return len;
 80137cc:	687b      	ldr	r3, [r7, #4]
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3718      	adds	r7, #24
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}

080137d6 <_close>:

int _close(int file)
{
 80137d6:	b480      	push	{r7}
 80137d8:	b083      	sub	sp, #12
 80137da:	af00      	add	r7, sp, #0
 80137dc:	6078      	str	r0, [r7, #4]
	return -1;
 80137de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	370c      	adds	r7, #12
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr

080137ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80137ee:	b480      	push	{r7}
 80137f0:	b083      	sub	sp, #12
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
 80137f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80137fe:	605a      	str	r2, [r3, #4]
	return 0;
 8013800:	2300      	movs	r3, #0
}
 8013802:	4618      	mov	r0, r3
 8013804:	370c      	adds	r7, #12
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr

0801380e <_isatty>:

int _isatty(int file)
{
 801380e:	b480      	push	{r7}
 8013810:	b083      	sub	sp, #12
 8013812:	af00      	add	r7, sp, #0
 8013814:	6078      	str	r0, [r7, #4]
	return 1;
 8013816:	2301      	movs	r3, #1
}
 8013818:	4618      	mov	r0, r3
 801381a:	370c      	adds	r7, #12
 801381c:	46bd      	mov	sp, r7
 801381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013822:	4770      	bx	lr

08013824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013824:	b480      	push	{r7}
 8013826:	b085      	sub	sp, #20
 8013828:	af00      	add	r7, sp, #0
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	60b9      	str	r1, [r7, #8]
 801382e:	607a      	str	r2, [r7, #4]
	return 0;
 8013830:	2300      	movs	r3, #0
}
 8013832:	4618      	mov	r0, r3
 8013834:	3714      	adds	r7, #20
 8013836:	46bd      	mov	sp, r7
 8013838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383c:	4770      	bx	lr
	...

08013840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b086      	sub	sp, #24
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013848:	4a14      	ldr	r2, [pc, #80]	; (801389c <_sbrk+0x5c>)
 801384a:	4b15      	ldr	r3, [pc, #84]	; (80138a0 <_sbrk+0x60>)
 801384c:	1ad3      	subs	r3, r2, r3
 801384e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013854:	4b13      	ldr	r3, [pc, #76]	; (80138a4 <_sbrk+0x64>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d102      	bne.n	8013862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801385c:	4b11      	ldr	r3, [pc, #68]	; (80138a4 <_sbrk+0x64>)
 801385e:	4a12      	ldr	r2, [pc, #72]	; (80138a8 <_sbrk+0x68>)
 8013860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8013862:	4b10      	ldr	r3, [pc, #64]	; (80138a4 <_sbrk+0x64>)
 8013864:	681a      	ldr	r2, [r3, #0]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	4413      	add	r3, r2
 801386a:	693a      	ldr	r2, [r7, #16]
 801386c:	429a      	cmp	r2, r3
 801386e:	d207      	bcs.n	8013880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013870:	f01a f9a2 	bl	802dbb8 <__errno>
 8013874:	4602      	mov	r2, r0
 8013876:	230c      	movs	r3, #12
 8013878:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 801387a:	f04f 33ff 	mov.w	r3, #4294967295
 801387e:	e009      	b.n	8013894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013880:	4b08      	ldr	r3, [pc, #32]	; (80138a4 <_sbrk+0x64>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8013886:	4b07      	ldr	r3, [pc, #28]	; (80138a4 <_sbrk+0x64>)
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	4413      	add	r3, r2
 801388e:	4a05      	ldr	r2, [pc, #20]	; (80138a4 <_sbrk+0x64>)
 8013890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8013892:	68fb      	ldr	r3, [r7, #12]
}
 8013894:	4618      	mov	r0, r3
 8013896:	3718      	adds	r7, #24
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	24080000 	.word	0x24080000
 80138a0:	00000400 	.word	0x00000400
 80138a4:	24001460 	.word	0x24001460
 80138a8:	2400d3a8 	.word	0x2400d3a8

080138ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80138ac:	b480      	push	{r7}
 80138ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80138b0:	4b39      	ldr	r3, [pc, #228]	; (8013998 <SystemInit+0xec>)
 80138b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80138b6:	4a38      	ldr	r2, [pc, #224]	; (8013998 <SystemInit+0xec>)
 80138b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80138bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80138c0:	4b36      	ldr	r3, [pc, #216]	; (801399c <SystemInit+0xf0>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	f003 030f 	and.w	r3, r3, #15
 80138c8:	2b06      	cmp	r3, #6
 80138ca:	d807      	bhi.n	80138dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80138cc:	4b33      	ldr	r3, [pc, #204]	; (801399c <SystemInit+0xf0>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	f023 030f 	bic.w	r3, r3, #15
 80138d4:	4a31      	ldr	r2, [pc, #196]	; (801399c <SystemInit+0xf0>)
 80138d6:	f043 0307 	orr.w	r3, r3, #7
 80138da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80138dc:	4b30      	ldr	r3, [pc, #192]	; (80139a0 <SystemInit+0xf4>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	4a2f      	ldr	r2, [pc, #188]	; (80139a0 <SystemInit+0xf4>)
 80138e2:	f043 0301 	orr.w	r3, r3, #1
 80138e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80138e8:	4b2d      	ldr	r3, [pc, #180]	; (80139a0 <SystemInit+0xf4>)
 80138ea:	2200      	movs	r2, #0
 80138ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80138ee:	4b2c      	ldr	r3, [pc, #176]	; (80139a0 <SystemInit+0xf4>)
 80138f0:	681a      	ldr	r2, [r3, #0]
 80138f2:	492b      	ldr	r1, [pc, #172]	; (80139a0 <SystemInit+0xf4>)
 80138f4:	4b2b      	ldr	r3, [pc, #172]	; (80139a4 <SystemInit+0xf8>)
 80138f6:	4013      	ands	r3, r2
 80138f8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80138fa:	4b28      	ldr	r3, [pc, #160]	; (801399c <SystemInit+0xf0>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	f003 030f 	and.w	r3, r3, #15
 8013902:	2b07      	cmp	r3, #7
 8013904:	d907      	bls.n	8013916 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8013906:	4b25      	ldr	r3, [pc, #148]	; (801399c <SystemInit+0xf0>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	f023 030f 	bic.w	r3, r3, #15
 801390e:	4a23      	ldr	r2, [pc, #140]	; (801399c <SystemInit+0xf0>)
 8013910:	f043 0307 	orr.w	r3, r3, #7
 8013914:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8013916:	4b22      	ldr	r3, [pc, #136]	; (80139a0 <SystemInit+0xf4>)
 8013918:	2200      	movs	r2, #0
 801391a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 801391c:	4b20      	ldr	r3, [pc, #128]	; (80139a0 <SystemInit+0xf4>)
 801391e:	2200      	movs	r2, #0
 8013920:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8013922:	4b1f      	ldr	r3, [pc, #124]	; (80139a0 <SystemInit+0xf4>)
 8013924:	2200      	movs	r2, #0
 8013926:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8013928:	4b1d      	ldr	r3, [pc, #116]	; (80139a0 <SystemInit+0xf4>)
 801392a:	4a1f      	ldr	r2, [pc, #124]	; (80139a8 <SystemInit+0xfc>)
 801392c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 801392e:	4b1c      	ldr	r3, [pc, #112]	; (80139a0 <SystemInit+0xf4>)
 8013930:	4a1e      	ldr	r2, [pc, #120]	; (80139ac <SystemInit+0x100>)
 8013932:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8013934:	4b1a      	ldr	r3, [pc, #104]	; (80139a0 <SystemInit+0xf4>)
 8013936:	4a1e      	ldr	r2, [pc, #120]	; (80139b0 <SystemInit+0x104>)
 8013938:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 801393a:	4b19      	ldr	r3, [pc, #100]	; (80139a0 <SystemInit+0xf4>)
 801393c:	2200      	movs	r2, #0
 801393e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8013940:	4b17      	ldr	r3, [pc, #92]	; (80139a0 <SystemInit+0xf4>)
 8013942:	4a1b      	ldr	r2, [pc, #108]	; (80139b0 <SystemInit+0x104>)
 8013944:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8013946:	4b16      	ldr	r3, [pc, #88]	; (80139a0 <SystemInit+0xf4>)
 8013948:	2200      	movs	r2, #0
 801394a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 801394c:	4b14      	ldr	r3, [pc, #80]	; (80139a0 <SystemInit+0xf4>)
 801394e:	4a18      	ldr	r2, [pc, #96]	; (80139b0 <SystemInit+0x104>)
 8013950:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8013952:	4b13      	ldr	r3, [pc, #76]	; (80139a0 <SystemInit+0xf4>)
 8013954:	2200      	movs	r2, #0
 8013956:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8013958:	4b11      	ldr	r3, [pc, #68]	; (80139a0 <SystemInit+0xf4>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	4a10      	ldr	r2, [pc, #64]	; (80139a0 <SystemInit+0xf4>)
 801395e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013962:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8013964:	4b0e      	ldr	r3, [pc, #56]	; (80139a0 <SystemInit+0xf4>)
 8013966:	2200      	movs	r2, #0
 8013968:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801396a:	4b12      	ldr	r3, [pc, #72]	; (80139b4 <SystemInit+0x108>)
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	4b12      	ldr	r3, [pc, #72]	; (80139b8 <SystemInit+0x10c>)
 8013970:	4013      	ands	r3, r2
 8013972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013976:	d202      	bcs.n	801397e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8013978:	4b10      	ldr	r3, [pc, #64]	; (80139bc <SystemInit+0x110>)
 801397a:	2201      	movs	r2, #1
 801397c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 801397e:	4b10      	ldr	r3, [pc, #64]	; (80139c0 <SystemInit+0x114>)
 8013980:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8013984:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8013986:	4b04      	ldr	r3, [pc, #16]	; (8013998 <SystemInit+0xec>)
 8013988:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801398c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 801398e:	bf00      	nop
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr
 8013998:	e000ed00 	.word	0xe000ed00
 801399c:	52002000 	.word	0x52002000
 80139a0:	58024400 	.word	0x58024400
 80139a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80139a8:	02020200 	.word	0x02020200
 80139ac:	01ff0000 	.word	0x01ff0000
 80139b0:	01010280 	.word	0x01010280
 80139b4:	5c001000 	.word	0x5c001000
 80139b8:	ffff0000 	.word	0xffff0000
 80139bc:	51008108 	.word	0x51008108
 80139c0:	52004000 	.word	0x52004000

080139c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b09a      	sub	sp, #104	; 0x68
 80139c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80139ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139ce:	2200      	movs	r2, #0
 80139d0:	601a      	str	r2, [r3, #0]
 80139d2:	605a      	str	r2, [r3, #4]
 80139d4:	609a      	str	r2, [r3, #8]
 80139d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80139d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80139dc:	2200      	movs	r2, #0
 80139de:	601a      	str	r2, [r3, #0]
 80139e0:	605a      	str	r2, [r3, #4]
 80139e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80139e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80139e8:	2200      	movs	r2, #0
 80139ea:	601a      	str	r2, [r3, #0]
 80139ec:	605a      	str	r2, [r3, #4]
 80139ee:	609a      	str	r2, [r3, #8]
 80139f0:	60da      	str	r2, [r3, #12]
 80139f2:	611a      	str	r2, [r3, #16]
 80139f4:	615a      	str	r2, [r3, #20]
 80139f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80139f8:	1d3b      	adds	r3, r7, #4
 80139fa:	222c      	movs	r2, #44	; 0x2c
 80139fc:	2100      	movs	r1, #0
 80139fe:	4618      	mov	r0, r3
 8013a00:	f01a f921 	bl	802dc46 <memset>

  htim1.Instance = TIM1;
 8013a04:	4b55      	ldr	r3, [pc, #340]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a06:	4a56      	ldr	r2, [pc, #344]	; (8013b60 <MX_TIM1_Init+0x19c>)
 8013a08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8013a0a:	4b54      	ldr	r3, [pc, #336]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a0c:	220b      	movs	r2, #11
 8013a0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013a10:	4b52      	ldr	r3, [pc, #328]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000-1;
 8013a16:	4b51      	ldr	r3, [pc, #324]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a18:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8013a1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013a1e:	4b4f      	ldr	r3, [pc, #316]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a20:	2200      	movs	r2, #0
 8013a22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8013a24:	4b4d      	ldr	r3, [pc, #308]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a26:	2200      	movs	r2, #0
 8013a28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8013a2a:	4b4c      	ldr	r3, [pc, #304]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a2c:	2280      	movs	r2, #128	; 0x80
 8013a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8013a30:	484a      	ldr	r0, [pc, #296]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a32:	f00b ffe1 	bl	801f9f8 <HAL_TIM_Base_Init>
 8013a36:	4603      	mov	r3, r0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d001      	beq.n	8013a40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8013a3c:	f7ff fcb0 	bl	80133a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013a44:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8013a46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	4843      	ldr	r0, [pc, #268]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a4e:	f00c fdb9 	bl	80205c4 <HAL_TIM_ConfigClockSource>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d001      	beq.n	8013a5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8013a58:	f7ff fca2 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8013a5c:	483f      	ldr	r0, [pc, #252]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a5e:	f00c f859 	bl	801fb14 <HAL_TIM_PWM_Init>
 8013a62:	4603      	mov	r3, r0
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d001      	beq.n	8013a6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8013a68:	f7ff fc9a 	bl	80133a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8013a70:	2300      	movs	r3, #0
 8013a72:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013a74:	2300      	movs	r3, #0
 8013a76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8013a78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	4837      	ldr	r0, [pc, #220]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013a80:	f00d fc28 	bl	80212d4 <HAL_TIMEx_MasterConfigSynchronization>
 8013a84:	4603      	mov	r3, r0
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d001      	beq.n	8013a8e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8013a8a:	f7ff fc89 	bl	80133a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013a8e:	2360      	movs	r3, #96	; 0x60
 8013a90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8013a92:	2300      	movs	r3, #0
 8013a94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013a96:	2300      	movs	r3, #0
 8013a98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013aae:	2200      	movs	r2, #0
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	482a      	ldr	r0, [pc, #168]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013ab4:	f00c fc76 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d001      	beq.n	8013ac2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8013abe:	f7ff fc6f 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013ac2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013ac6:	2204      	movs	r2, #4
 8013ac8:	4619      	mov	r1, r3
 8013aca:	4824      	ldr	r0, [pc, #144]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013acc:	f00c fc6a 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d001      	beq.n	8013ada <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8013ad6:	f7ff fc63 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013ade:	2208      	movs	r2, #8
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	481e      	ldr	r0, [pc, #120]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013ae4:	f00c fc5e 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d001      	beq.n	8013af2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8013aee:	f7ff fc57 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013af6:	220c      	movs	r2, #12
 8013af8:	4619      	mov	r1, r3
 8013afa:	4818      	ldr	r0, [pc, #96]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013afc:	f00c fc52 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d001      	beq.n	8013b0a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8013b06:	f7ff fc4b 	bl	80133a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8013b12:	2300      	movs	r3, #0
 8013b14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8013b16:	2300      	movs	r3, #0
 8013b18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8013b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8013b24:	2300      	movs	r3, #0
 8013b26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8013b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013b30:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8013b32:	2300      	movs	r3, #0
 8013b34:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8013b36:	2300      	movs	r3, #0
 8013b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8013b3a:	1d3b      	adds	r3, r7, #4
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	4807      	ldr	r0, [pc, #28]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013b40:	f00d fc50 	bl	80213e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d001      	beq.n	8013b4e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8013b4a:	f7ff fc29 	bl	80133a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8013b4e:	4803      	ldr	r0, [pc, #12]	; (8013b5c <MX_TIM1_Init+0x198>)
 8013b50:	f000 fc14 	bl	801437c <HAL_TIM_MspPostInit>

}
 8013b54:	bf00      	nop
 8013b56:	3768      	adds	r7, #104	; 0x68
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	2400c734 	.word	0x2400c734
 8013b60:	40010000 	.word	0x40010000

08013b64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b088      	sub	sp, #32
 8013b68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013b6a:	f107 0310 	add.w	r3, r7, #16
 8013b6e:	2200      	movs	r2, #0
 8013b70:	601a      	str	r2, [r3, #0]
 8013b72:	605a      	str	r2, [r3, #4]
 8013b74:	609a      	str	r2, [r3, #8]
 8013b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013b78:	1d3b      	adds	r3, r7, #4
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	601a      	str	r2, [r3, #0]
 8013b7e:	605a      	str	r2, [r3, #4]
 8013b80:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8013b82:	4b1e      	ldr	r3, [pc, #120]	; (8013bfc <MX_TIM2_Init+0x98>)
 8013b84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013b88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8013b8a:	4b1c      	ldr	r3, [pc, #112]	; (8013bfc <MX_TIM2_Init+0x98>)
 8013b8c:	22ef      	movs	r2, #239	; 0xef
 8013b8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013b90:	4b1a      	ldr	r3, [pc, #104]	; (8013bfc <MX_TIM2_Init+0x98>)
 8013b92:	2200      	movs	r2, #0
 8013b94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8013b96:	4b19      	ldr	r3, [pc, #100]	; (8013bfc <MX_TIM2_Init+0x98>)
 8013b98:	f04f 32ff 	mov.w	r2, #4294967295
 8013b9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013b9e:	4b17      	ldr	r3, [pc, #92]	; (8013bfc <MX_TIM2_Init+0x98>)
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013ba4:	4b15      	ldr	r3, [pc, #84]	; (8013bfc <MX_TIM2_Init+0x98>)
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8013baa:	4814      	ldr	r0, [pc, #80]	; (8013bfc <MX_TIM2_Init+0x98>)
 8013bac:	f00b ff24 	bl	801f9f8 <HAL_TIM_Base_Init>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d001      	beq.n	8013bba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8013bb6:	f7ff fbf3 	bl	80133a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013bbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8013bc0:	f107 0310 	add.w	r3, r7, #16
 8013bc4:	4619      	mov	r1, r3
 8013bc6:	480d      	ldr	r0, [pc, #52]	; (8013bfc <MX_TIM2_Init+0x98>)
 8013bc8:	f00c fcfc 	bl	80205c4 <HAL_TIM_ConfigClockSource>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d001      	beq.n	8013bd6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8013bd2:	f7ff fbe5 	bl	80133a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8013bde:	1d3b      	adds	r3, r7, #4
 8013be0:	4619      	mov	r1, r3
 8013be2:	4806      	ldr	r0, [pc, #24]	; (8013bfc <MX_TIM2_Init+0x98>)
 8013be4:	f00d fb76 	bl	80212d4 <HAL_TIMEx_MasterConfigSynchronization>
 8013be8:	4603      	mov	r3, r0
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d001      	beq.n	8013bf2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8013bee:	f7ff fbd7 	bl	80133a0 <Error_Handler>
  }

}
 8013bf2:	bf00      	nop
 8013bf4:	3720      	adds	r7, #32
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	2400c780 	.word	0x2400c780

08013c00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b08e      	sub	sp, #56	; 0x38
 8013c04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	601a      	str	r2, [r3, #0]
 8013c0e:	605a      	str	r2, [r3, #4]
 8013c10:	609a      	str	r2, [r3, #8]
 8013c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013c14:	f107 031c 	add.w	r3, r7, #28
 8013c18:	2200      	movs	r2, #0
 8013c1a:	601a      	str	r2, [r3, #0]
 8013c1c:	605a      	str	r2, [r3, #4]
 8013c1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013c20:	463b      	mov	r3, r7
 8013c22:	2200      	movs	r2, #0
 8013c24:	601a      	str	r2, [r3, #0]
 8013c26:	605a      	str	r2, [r3, #4]
 8013c28:	609a      	str	r2, [r3, #8]
 8013c2a:	60da      	str	r2, [r3, #12]
 8013c2c:	611a      	str	r2, [r3, #16]
 8013c2e:	615a      	str	r2, [r3, #20]
 8013c30:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8013c32:	4b38      	ldr	r3, [pc, #224]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013c34:	4a38      	ldr	r2, [pc, #224]	; (8013d18 <MX_TIM3_Init+0x118>)
 8013c36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 8013c38:	4b36      	ldr	r3, [pc, #216]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013c3a:	220b      	movs	r2, #11
 8013c3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013c3e:	4b35      	ldr	r3, [pc, #212]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013c40:	2200      	movs	r2, #0
 8013c42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8013c44:	4b33      	ldr	r3, [pc, #204]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013c46:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8013c4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013c4c:	4b31      	ldr	r3, [pc, #196]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013c4e:	2200      	movs	r2, #0
 8013c50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013c52:	4b30      	ldr	r3, [pc, #192]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013c54:	2200      	movs	r2, #0
 8013c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8013c58:	482e      	ldr	r0, [pc, #184]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013c5a:	f00b fecd 	bl	801f9f8 <HAL_TIM_Base_Init>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d001      	beq.n	8013c68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8013c64:	f7ff fb9c 	bl	80133a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8013c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013c72:	4619      	mov	r1, r3
 8013c74:	4827      	ldr	r0, [pc, #156]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013c76:	f00c fca5 	bl	80205c4 <HAL_TIM_ConfigClockSource>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d001      	beq.n	8013c84 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8013c80:	f7ff fb8e 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013c84:	4823      	ldr	r0, [pc, #140]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013c86:	f00b ff45 	bl	801fb14 <HAL_TIM_PWM_Init>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d001      	beq.n	8013c94 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8013c90:	f7ff fb86 	bl	80133a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013c94:	2300      	movs	r3, #0
 8013c96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8013c9c:	f107 031c 	add.w	r3, r7, #28
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	481c      	ldr	r0, [pc, #112]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013ca4:	f00d fb16 	bl	80212d4 <HAL_TIMEx_MasterConfigSynchronization>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d001      	beq.n	8013cb2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8013cae:	f7ff fb77 	bl	80133a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013cb2:	2360      	movs	r3, #96	; 0x60
 8013cb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013cc2:	463b      	mov	r3, r7
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	4812      	ldr	r0, [pc, #72]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013cca:	f00c fb6b 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d001      	beq.n	8013cd8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8013cd4:	f7ff fb64 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013cd8:	463b      	mov	r3, r7
 8013cda:	2204      	movs	r2, #4
 8013cdc:	4619      	mov	r1, r3
 8013cde:	480d      	ldr	r0, [pc, #52]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013ce0:	f00c fb60 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d001      	beq.n	8013cee <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8013cea:	f7ff fb59 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013cee:	463b      	mov	r3, r7
 8013cf0:	220c      	movs	r2, #12
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	4807      	ldr	r0, [pc, #28]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013cf6:	f00c fb55 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d001      	beq.n	8013d04 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8013d00:	f7ff fb4e 	bl	80133a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8013d04:	4803      	ldr	r0, [pc, #12]	; (8013d14 <MX_TIM3_Init+0x114>)
 8013d06:	f000 fb39 	bl	801437c <HAL_TIM_MspPostInit>

}
 8013d0a:	bf00      	nop
 8013d0c:	3738      	adds	r7, #56	; 0x38
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bd80      	pop	{r7, pc}
 8013d12:	bf00      	nop
 8013d14:	2400c6e8 	.word	0x2400c6e8
 8013d18:	40000400 	.word	0x40000400

08013d1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b08e      	sub	sp, #56	; 0x38
 8013d20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013d26:	2200      	movs	r2, #0
 8013d28:	601a      	str	r2, [r3, #0]
 8013d2a:	605a      	str	r2, [r3, #4]
 8013d2c:	609a      	str	r2, [r3, #8]
 8013d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013d30:	f107 031c 	add.w	r3, r7, #28
 8013d34:	2200      	movs	r2, #0
 8013d36:	601a      	str	r2, [r3, #0]
 8013d38:	605a      	str	r2, [r3, #4]
 8013d3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013d3c:	463b      	mov	r3, r7
 8013d3e:	2200      	movs	r2, #0
 8013d40:	601a      	str	r2, [r3, #0]
 8013d42:	605a      	str	r2, [r3, #4]
 8013d44:	609a      	str	r2, [r3, #8]
 8013d46:	60da      	str	r2, [r3, #12]
 8013d48:	611a      	str	r2, [r3, #16]
 8013d4a:	615a      	str	r2, [r3, #20]
 8013d4c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8013d4e:	4b3d      	ldr	r3, [pc, #244]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013d50:	4a3d      	ldr	r2, [pc, #244]	; (8013e48 <MX_TIM4_Init+0x12c>)
 8013d52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12-1;
 8013d54:	4b3b      	ldr	r3, [pc, #236]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013d56:	220b      	movs	r2, #11
 8013d58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013d5a:	4b3a      	ldr	r3, [pc, #232]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 8013d60:	4b38      	ldr	r3, [pc, #224]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013d62:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8013d66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013d68:	4b36      	ldr	r3, [pc, #216]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013d6e:	4b35      	ldr	r3, [pc, #212]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013d70:	2200      	movs	r2, #0
 8013d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8013d74:	4833      	ldr	r0, [pc, #204]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013d76:	f00b fe3f 	bl	801f9f8 <HAL_TIM_Base_Init>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d001      	beq.n	8013d84 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8013d80:	f7ff fb0e 	bl	80133a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8013d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013d8e:	4619      	mov	r1, r3
 8013d90:	482c      	ldr	r0, [pc, #176]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013d92:	f00c fc17 	bl	80205c4 <HAL_TIM_ConfigClockSource>
 8013d96:	4603      	mov	r3, r0
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d001      	beq.n	8013da0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8013d9c:	f7ff fb00 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8013da0:	4828      	ldr	r0, [pc, #160]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013da2:	f00b feb7 	bl	801fb14 <HAL_TIM_PWM_Init>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d001      	beq.n	8013db0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8013dac:	f7ff faf8 	bl	80133a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013db0:	2300      	movs	r3, #0
 8013db2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013db4:	2300      	movs	r3, #0
 8013db6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8013db8:	f107 031c 	add.w	r3, r7, #28
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	4821      	ldr	r0, [pc, #132]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013dc0:	f00d fa88 	bl	80212d4 <HAL_TIMEx_MasterConfigSynchronization>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d001      	beq.n	8013dce <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8013dca:	f7ff fae9 	bl	80133a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013dce:	2360      	movs	r3, #96	; 0x60
 8013dd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013dda:	2300      	movs	r3, #0
 8013ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013dde:	463b      	mov	r3, r7
 8013de0:	2200      	movs	r2, #0
 8013de2:	4619      	mov	r1, r3
 8013de4:	4817      	ldr	r0, [pc, #92]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013de6:	f00c fadd 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013dea:	4603      	mov	r3, r0
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d001      	beq.n	8013df4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8013df0:	f7ff fad6 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013df4:	463b      	mov	r3, r7
 8013df6:	2204      	movs	r2, #4
 8013df8:	4619      	mov	r1, r3
 8013dfa:	4812      	ldr	r0, [pc, #72]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013dfc:	f00c fad2 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013e00:	4603      	mov	r3, r0
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d001      	beq.n	8013e0a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8013e06:	f7ff facb 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013e0a:	463b      	mov	r3, r7
 8013e0c:	2208      	movs	r2, #8
 8013e0e:	4619      	mov	r1, r3
 8013e10:	480c      	ldr	r0, [pc, #48]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013e12:	f00c fac7 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013e16:	4603      	mov	r3, r0
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d001      	beq.n	8013e20 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8013e1c:	f7ff fac0 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013e20:	463b      	mov	r3, r7
 8013e22:	220c      	movs	r2, #12
 8013e24:	4619      	mov	r1, r3
 8013e26:	4807      	ldr	r0, [pc, #28]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013e28:	f00c fabc 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d001      	beq.n	8013e36 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8013e32:	f7ff fab5 	bl	80133a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8013e36:	4803      	ldr	r0, [pc, #12]	; (8013e44 <MX_TIM4_Init+0x128>)
 8013e38:	f000 faa0 	bl	801437c <HAL_TIM_MspPostInit>

}
 8013e3c:	bf00      	nop
 8013e3e:	3738      	adds	r7, #56	; 0x38
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	2400c604 	.word	0x2400c604
 8013e48:	40000800 	.word	0x40000800

08013e4c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b08e      	sub	sp, #56	; 0x38
 8013e50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013e56:	2200      	movs	r2, #0
 8013e58:	601a      	str	r2, [r3, #0]
 8013e5a:	605a      	str	r2, [r3, #4]
 8013e5c:	609a      	str	r2, [r3, #8]
 8013e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013e60:	f107 031c 	add.w	r3, r7, #28
 8013e64:	2200      	movs	r2, #0
 8013e66:	601a      	str	r2, [r3, #0]
 8013e68:	605a      	str	r2, [r3, #4]
 8013e6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013e6c:	463b      	mov	r3, r7
 8013e6e:	2200      	movs	r2, #0
 8013e70:	601a      	str	r2, [r3, #0]
 8013e72:	605a      	str	r2, [r3, #4]
 8013e74:	609a      	str	r2, [r3, #8]
 8013e76:	60da      	str	r2, [r3, #12]
 8013e78:	611a      	str	r2, [r3, #16]
 8013e7a:	615a      	str	r2, [r3, #20]
 8013e7c:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8013e7e:	4b3d      	ldr	r3, [pc, #244]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013e80:	4a3d      	ldr	r2, [pc, #244]	; (8013f78 <MX_TIM5_Init+0x12c>)
 8013e82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 12-1;
 8013e84:	4b3b      	ldr	r3, [pc, #236]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013e86:	220b      	movs	r2, #11
 8013e88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013e8a:	4b3a      	ldr	r3, [pc, #232]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 40000-1;
 8013e90:	4b38      	ldr	r3, [pc, #224]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013e92:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8013e96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013e98:	4b36      	ldr	r3, [pc, #216]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013e9e:	4b35      	ldr	r3, [pc, #212]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8013ea4:	4833      	ldr	r0, [pc, #204]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013ea6:	f00b fda7 	bl	801f9f8 <HAL_TIM_Base_Init>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d001      	beq.n	8013eb4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8013eb0:	f7ff fa76 	bl	80133a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8013eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013ebe:	4619      	mov	r1, r3
 8013ec0:	482c      	ldr	r0, [pc, #176]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013ec2:	f00c fb7f 	bl	80205c4 <HAL_TIM_ConfigClockSource>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d001      	beq.n	8013ed0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8013ecc:	f7ff fa68 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8013ed0:	4828      	ldr	r0, [pc, #160]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013ed2:	f00b fe1f 	bl	801fb14 <HAL_TIM_PWM_Init>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d001      	beq.n	8013ee0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8013edc:	f7ff fa60 	bl	80133a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8013ee8:	f107 031c 	add.w	r3, r7, #28
 8013eec:	4619      	mov	r1, r3
 8013eee:	4821      	ldr	r0, [pc, #132]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013ef0:	f00d f9f0 	bl	80212d4 <HAL_TIMEx_MasterConfigSynchronization>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d001      	beq.n	8013efe <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8013efa:	f7ff fa51 	bl	80133a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013efe:	2360      	movs	r3, #96	; 0x60
 8013f00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013f02:	2300      	movs	r3, #0
 8013f04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013f06:	2300      	movs	r3, #0
 8013f08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013f0e:	463b      	mov	r3, r7
 8013f10:	2200      	movs	r2, #0
 8013f12:	4619      	mov	r1, r3
 8013f14:	4817      	ldr	r0, [pc, #92]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013f16:	f00c fa45 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d001      	beq.n	8013f24 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8013f20:	f7ff fa3e 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013f24:	463b      	mov	r3, r7
 8013f26:	2204      	movs	r2, #4
 8013f28:	4619      	mov	r1, r3
 8013f2a:	4812      	ldr	r0, [pc, #72]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013f2c:	f00c fa3a 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d001      	beq.n	8013f3a <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8013f36:	f7ff fa33 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013f3a:	463b      	mov	r3, r7
 8013f3c:	2208      	movs	r2, #8
 8013f3e:	4619      	mov	r1, r3
 8013f40:	480c      	ldr	r0, [pc, #48]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013f42:	f00c fa2f 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d001      	beq.n	8013f50 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8013f4c:	f7ff fa28 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013f50:	463b      	mov	r3, r7
 8013f52:	220c      	movs	r2, #12
 8013f54:	4619      	mov	r1, r3
 8013f56:	4807      	ldr	r0, [pc, #28]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013f58:	f00c fa24 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d001      	beq.n	8013f66 <MX_TIM5_Init+0x11a>
  {
    Error_Handler();
 8013f62:	f7ff fa1d 	bl	80133a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8013f66:	4803      	ldr	r0, [pc, #12]	; (8013f74 <MX_TIM5_Init+0x128>)
 8013f68:	f000 fa08 	bl	801437c <HAL_TIM_MspPostInit>

}
 8013f6c:	bf00      	nop
 8013f6e:	3738      	adds	r7, #56	; 0x38
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	2400c69c 	.word	0x2400c69c
 8013f78:	40000c00 	.word	0x40000c00

08013f7c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b09a      	sub	sp, #104	; 0x68
 8013f80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013f82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013f86:	2200      	movs	r2, #0
 8013f88:	601a      	str	r2, [r3, #0]
 8013f8a:	605a      	str	r2, [r3, #4]
 8013f8c:	609a      	str	r2, [r3, #8]
 8013f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013f90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013f94:	2200      	movs	r2, #0
 8013f96:	601a      	str	r2, [r3, #0]
 8013f98:	605a      	str	r2, [r3, #4]
 8013f9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	601a      	str	r2, [r3, #0]
 8013fa4:	605a      	str	r2, [r3, #4]
 8013fa6:	609a      	str	r2, [r3, #8]
 8013fa8:	60da      	str	r2, [r3, #12]
 8013faa:	611a      	str	r2, [r3, #16]
 8013fac:	615a      	str	r2, [r3, #20]
 8013fae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8013fb0:	1d3b      	adds	r3, r7, #4
 8013fb2:	222c      	movs	r2, #44	; 0x2c
 8013fb4:	2100      	movs	r1, #0
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f019 fe45 	bl	802dc46 <memset>

  htim8.Instance = TIM8;
 8013fbc:	4b43      	ldr	r3, [pc, #268]	; (80140cc <MX_TIM8_Init+0x150>)
 8013fbe:	4a44      	ldr	r2, [pc, #272]	; (80140d0 <MX_TIM8_Init+0x154>)
 8013fc0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 12-1;
 8013fc2:	4b42      	ldr	r3, [pc, #264]	; (80140cc <MX_TIM8_Init+0x150>)
 8013fc4:	220b      	movs	r2, #11
 8013fc6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013fc8:	4b40      	ldr	r3, [pc, #256]	; (80140cc <MX_TIM8_Init+0x150>)
 8013fca:	2200      	movs	r2, #0
 8013fcc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 40000-1;
 8013fce:	4b3f      	ldr	r3, [pc, #252]	; (80140cc <MX_TIM8_Init+0x150>)
 8013fd0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8013fd4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013fd6:	4b3d      	ldr	r3, [pc, #244]	; (80140cc <MX_TIM8_Init+0x150>)
 8013fd8:	2200      	movs	r2, #0
 8013fda:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8013fdc:	4b3b      	ldr	r3, [pc, #236]	; (80140cc <MX_TIM8_Init+0x150>)
 8013fde:	2200      	movs	r2, #0
 8013fe0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013fe2:	4b3a      	ldr	r3, [pc, #232]	; (80140cc <MX_TIM8_Init+0x150>)
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8013fe8:	4838      	ldr	r0, [pc, #224]	; (80140cc <MX_TIM8_Init+0x150>)
 8013fea:	f00b fd05 	bl	801f9f8 <HAL_TIM_Base_Init>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d001      	beq.n	8013ff8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8013ff4:	f7ff f9d4 	bl	80133a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ffc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8013ffe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014002:	4619      	mov	r1, r3
 8014004:	4831      	ldr	r0, [pc, #196]	; (80140cc <MX_TIM8_Init+0x150>)
 8014006:	f00c fadd 	bl	80205c4 <HAL_TIM_ConfigClockSource>
 801400a:	4603      	mov	r3, r0
 801400c:	2b00      	cmp	r3, #0
 801400e:	d001      	beq.n	8014014 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8014010:	f7ff f9c6 	bl	80133a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8014014:	482d      	ldr	r0, [pc, #180]	; (80140cc <MX_TIM8_Init+0x150>)
 8014016:	f00b fd7d 	bl	801fb14 <HAL_TIM_PWM_Init>
 801401a:	4603      	mov	r3, r0
 801401c:	2b00      	cmp	r3, #0
 801401e:	d001      	beq.n	8014024 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8014020:	f7ff f9be 	bl	80133a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014024:	2300      	movs	r3, #0
 8014026:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8014028:	2300      	movs	r3, #0
 801402a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801402c:	2300      	movs	r3, #0
 801402e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8014030:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014034:	4619      	mov	r1, r3
 8014036:	4825      	ldr	r0, [pc, #148]	; (80140cc <MX_TIM8_Init+0x150>)
 8014038:	f00d f94c 	bl	80212d4 <HAL_TIMEx_MasterConfigSynchronization>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d001      	beq.n	8014046 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8014042:	f7ff f9ad 	bl	80133a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8014046:	2360      	movs	r3, #96	; 0x60
 8014048:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 801404a:	2300      	movs	r3, #0
 801404c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801404e:	2300      	movs	r3, #0
 8014050:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8014052:	2300      	movs	r3, #0
 8014054:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8014056:	2300      	movs	r3, #0
 8014058:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801405a:	2300      	movs	r3, #0
 801405c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801405e:	2300      	movs	r3, #0
 8014060:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8014062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014066:	2200      	movs	r2, #0
 8014068:	4619      	mov	r1, r3
 801406a:	4818      	ldr	r0, [pc, #96]	; (80140cc <MX_TIM8_Init+0x150>)
 801406c:	f00c f99a 	bl	80203a4 <HAL_TIM_PWM_ConfigChannel>
 8014070:	4603      	mov	r3, r0
 8014072:	2b00      	cmp	r3, #0
 8014074:	d001      	beq.n	801407a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8014076:	f7ff f993 	bl	80133a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801407a:	2300      	movs	r3, #0
 801407c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801407e:	2300      	movs	r3, #0
 8014080:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8014082:	2300      	movs	r3, #0
 8014084:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8014086:	2300      	movs	r3, #0
 8014088:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801408a:	2300      	movs	r3, #0
 801408c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801408e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014092:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8014094:	2300      	movs	r3, #0
 8014096:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8014098:	2300      	movs	r3, #0
 801409a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801409c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80140a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80140a2:	2300      	movs	r3, #0
 80140a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80140a6:	2300      	movs	r3, #0
 80140a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80140aa:	1d3b      	adds	r3, r7, #4
 80140ac:	4619      	mov	r1, r3
 80140ae:	4807      	ldr	r0, [pc, #28]	; (80140cc <MX_TIM8_Init+0x150>)
 80140b0:	f00d f998 	bl	80213e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80140b4:	4603      	mov	r3, r0
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d001      	beq.n	80140be <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80140ba:	f7ff f971 	bl	80133a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80140be:	4803      	ldr	r0, [pc, #12]	; (80140cc <MX_TIM8_Init+0x150>)
 80140c0:	f000 f95c 	bl	801437c <HAL_TIM_MspPostInit>

}
 80140c4:	bf00      	nop
 80140c6:	3768      	adds	r7, #104	; 0x68
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	2400c5b8 	.word	0x2400c5b8
 80140d0:	40010400 	.word	0x40010400

080140d4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b088      	sub	sp, #32
 80140d8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80140da:	f107 0314 	add.w	r3, r7, #20
 80140de:	2200      	movs	r2, #0
 80140e0:	601a      	str	r2, [r3, #0]
 80140e2:	605a      	str	r2, [r3, #4]
 80140e4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80140e6:	1d3b      	adds	r3, r7, #4
 80140e8:	2200      	movs	r2, #0
 80140ea:	601a      	str	r2, [r3, #0]
 80140ec:	605a      	str	r2, [r3, #4]
 80140ee:	609a      	str	r2, [r3, #8]
 80140f0:	60da      	str	r2, [r3, #12]

  htim15.Instance = TIM15;
 80140f2:	4b2a      	ldr	r3, [pc, #168]	; (801419c <MX_TIM15_Init+0xc8>)
 80140f4:	4a2a      	ldr	r2, [pc, #168]	; (80141a0 <MX_TIM15_Init+0xcc>)
 80140f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80140f8:	4b28      	ldr	r3, [pc, #160]	; (801419c <MX_TIM15_Init+0xc8>)
 80140fa:	22ef      	movs	r2, #239	; 0xef
 80140fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80140fe:	4b27      	ldr	r3, [pc, #156]	; (801419c <MX_TIM15_Init+0xc8>)
 8014100:	2200      	movs	r2, #0
 8014102:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535-1;
 8014104:	4b25      	ldr	r3, [pc, #148]	; (801419c <MX_TIM15_Init+0xc8>)
 8014106:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801410a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801410c:	4b23      	ldr	r3, [pc, #140]	; (801419c <MX_TIM15_Init+0xc8>)
 801410e:	2200      	movs	r2, #0
 8014110:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8014112:	4b22      	ldr	r3, [pc, #136]	; (801419c <MX_TIM15_Init+0xc8>)
 8014114:	2200      	movs	r2, #0
 8014116:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014118:	4b20      	ldr	r3, [pc, #128]	; (801419c <MX_TIM15_Init+0xc8>)
 801411a:	2200      	movs	r2, #0
 801411c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 801411e:	481f      	ldr	r0, [pc, #124]	; (801419c <MX_TIM15_Init+0xc8>)
 8014120:	f00b fe2c 	bl	801fd7c <HAL_TIM_IC_Init>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	d001      	beq.n	801412e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 801412a:	f7ff f939 	bl	80133a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801412e:	2300      	movs	r3, #0
 8014130:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8014132:	2300      	movs	r3, #0
 8014134:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8014136:	f107 0314 	add.w	r3, r7, #20
 801413a:	4619      	mov	r1, r3
 801413c:	4817      	ldr	r0, [pc, #92]	; (801419c <MX_TIM15_Init+0xc8>)
 801413e:	f00d f8c9 	bl	80212d4 <HAL_TIMEx_MasterConfigSynchronization>
 8014142:	4603      	mov	r3, r0
 8014144:	2b00      	cmp	r3, #0
 8014146:	d001      	beq.n	801414c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8014148:	f7ff f92a 	bl	80133a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 801414c:	2300      	movs	r3, #0
 801414e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8014150:	2301      	movs	r3, #1
 8014152:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8014154:	2300      	movs	r3, #0
 8014156:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8014158:	230f      	movs	r3, #15
 801415a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 801415c:	1d3b      	adds	r3, r7, #4
 801415e:	2200      	movs	r2, #0
 8014160:	4619      	mov	r1, r3
 8014162:	480e      	ldr	r0, [pc, #56]	; (801419c <MX_TIM15_Init+0xc8>)
 8014164:	f00c f889 	bl	802027a <HAL_TIM_IC_ConfigChannel>
 8014168:	4603      	mov	r3, r0
 801416a:	2b00      	cmp	r3, #0
 801416c:	d001      	beq.n	8014172 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 801416e:	f7ff f917 	bl	80133a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8014172:	2302      	movs	r3, #2
 8014174:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8014176:	2302      	movs	r3, #2
 8014178:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 801417a:	2300      	movs	r3, #0
 801417c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 801417e:	1d3b      	adds	r3, r7, #4
 8014180:	2204      	movs	r2, #4
 8014182:	4619      	mov	r1, r3
 8014184:	4805      	ldr	r0, [pc, #20]	; (801419c <MX_TIM15_Init+0xc8>)
 8014186:	f00c f878 	bl	802027a <HAL_TIM_IC_ConfigChannel>
 801418a:	4603      	mov	r3, r0
 801418c:	2b00      	cmp	r3, #0
 801418e:	d001      	beq.n	8014194 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8014190:	f7ff f906 	bl	80133a0 <Error_Handler>
  }

}
 8014194:	bf00      	nop
 8014196:	3720      	adds	r7, #32
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	2400c650 	.word	0x2400c650
 80141a0:	40014000 	.word	0x40014000

080141a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b088      	sub	sp, #32
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	4a43      	ldr	r2, [pc, #268]	; (80142c0 <HAL_TIM_Base_MspInit+0x11c>)
 80141b2:	4293      	cmp	r3, r2
 80141b4:	d10f      	bne.n	80141d6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80141b6:	4b43      	ldr	r3, [pc, #268]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 80141b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80141bc:	4a41      	ldr	r2, [pc, #260]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 80141be:	f043 0301 	orr.w	r3, r3, #1
 80141c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80141c6:	4b3f      	ldr	r3, [pc, #252]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 80141c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80141cc:	f003 0301 	and.w	r3, r3, #1
 80141d0:	61fb      	str	r3, [r7, #28]
 80141d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80141d4:	e06f      	b.n	80142b6 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM2)
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80141de:	d117      	bne.n	8014210 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80141e0:	4b38      	ldr	r3, [pc, #224]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 80141e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80141e6:	4a37      	ldr	r2, [pc, #220]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 80141e8:	f043 0301 	orr.w	r3, r3, #1
 80141ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80141f0:	4b34      	ldr	r3, [pc, #208]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 80141f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80141f6:	f003 0301 	and.w	r3, r3, #1
 80141fa:	61bb      	str	r3, [r7, #24]
 80141fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 80141fe:	2200      	movs	r2, #0
 8014200:	210a      	movs	r1, #10
 8014202:	201c      	movs	r0, #28
 8014204:	f001 fdb6 	bl	8015d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8014208:	201c      	movs	r0, #28
 801420a:	f001 fdcd 	bl	8015da8 <HAL_NVIC_EnableIRQ>
}
 801420e:	e052      	b.n	80142b6 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM3)
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4a2c      	ldr	r2, [pc, #176]	; (80142c8 <HAL_TIM_Base_MspInit+0x124>)
 8014216:	4293      	cmp	r3, r2
 8014218:	d10f      	bne.n	801423a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801421a:	4b2a      	ldr	r3, [pc, #168]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 801421c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014220:	4a28      	ldr	r2, [pc, #160]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 8014222:	f043 0302 	orr.w	r3, r3, #2
 8014226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801422a:	4b26      	ldr	r3, [pc, #152]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 801422c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014230:	f003 0302 	and.w	r3, r3, #2
 8014234:	617b      	str	r3, [r7, #20]
 8014236:	697b      	ldr	r3, [r7, #20]
}
 8014238:	e03d      	b.n	80142b6 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM4)
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	4a23      	ldr	r2, [pc, #140]	; (80142cc <HAL_TIM_Base_MspInit+0x128>)
 8014240:	4293      	cmp	r3, r2
 8014242:	d10f      	bne.n	8014264 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8014244:	4b1f      	ldr	r3, [pc, #124]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 8014246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801424a:	4a1e      	ldr	r2, [pc, #120]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 801424c:	f043 0304 	orr.w	r3, r3, #4
 8014250:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014254:	4b1b      	ldr	r3, [pc, #108]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 8014256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801425a:	f003 0304 	and.w	r3, r3, #4
 801425e:	613b      	str	r3, [r7, #16]
 8014260:	693b      	ldr	r3, [r7, #16]
}
 8014262:	e028      	b.n	80142b6 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM5)
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	4a19      	ldr	r2, [pc, #100]	; (80142d0 <HAL_TIM_Base_MspInit+0x12c>)
 801426a:	4293      	cmp	r3, r2
 801426c:	d10f      	bne.n	801428e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801426e:	4b15      	ldr	r3, [pc, #84]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 8014270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014274:	4a13      	ldr	r2, [pc, #76]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 8014276:	f043 0308 	orr.w	r3, r3, #8
 801427a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801427e:	4b11      	ldr	r3, [pc, #68]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 8014280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014284:	f003 0308 	and.w	r3, r3, #8
 8014288:	60fb      	str	r3, [r7, #12]
 801428a:	68fb      	ldr	r3, [r7, #12]
}
 801428c:	e013      	b.n	80142b6 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM8)
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	4a10      	ldr	r2, [pc, #64]	; (80142d4 <HAL_TIM_Base_MspInit+0x130>)
 8014294:	4293      	cmp	r3, r2
 8014296:	d10e      	bne.n	80142b6 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8014298:	4b0a      	ldr	r3, [pc, #40]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 801429a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801429e:	4a09      	ldr	r2, [pc, #36]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 80142a0:	f043 0302 	orr.w	r3, r3, #2
 80142a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80142a8:	4b06      	ldr	r3, [pc, #24]	; (80142c4 <HAL_TIM_Base_MspInit+0x120>)
 80142aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80142ae:	f003 0302 	and.w	r3, r3, #2
 80142b2:	60bb      	str	r3, [r7, #8]
 80142b4:	68bb      	ldr	r3, [r7, #8]
}
 80142b6:	bf00      	nop
 80142b8:	3720      	adds	r7, #32
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	40010000 	.word	0x40010000
 80142c4:	58024400 	.word	0x58024400
 80142c8:	40000400 	.word	0x40000400
 80142cc:	40000800 	.word	0x40000800
 80142d0:	40000c00 	.word	0x40000c00
 80142d4:	40010400 	.word	0x40010400

080142d8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b08a      	sub	sp, #40	; 0x28
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80142e0:	f107 0314 	add.w	r3, r7, #20
 80142e4:	2200      	movs	r2, #0
 80142e6:	601a      	str	r2, [r3, #0]
 80142e8:	605a      	str	r2, [r3, #4]
 80142ea:	609a      	str	r2, [r3, #8]
 80142ec:	60da      	str	r2, [r3, #12]
 80142ee:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM15)
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	4a1e      	ldr	r2, [pc, #120]	; (8014370 <HAL_TIM_IC_MspInit+0x98>)
 80142f6:	4293      	cmp	r3, r2
 80142f8:	d135      	bne.n	8014366 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80142fa:	4b1e      	ldr	r3, [pc, #120]	; (8014374 <HAL_TIM_IC_MspInit+0x9c>)
 80142fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014300:	4a1c      	ldr	r2, [pc, #112]	; (8014374 <HAL_TIM_IC_MspInit+0x9c>)
 8014302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014306:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801430a:	4b1a      	ldr	r3, [pc, #104]	; (8014374 <HAL_TIM_IC_MspInit+0x9c>)
 801430c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014314:	613b      	str	r3, [r7, #16]
 8014316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014318:	4b16      	ldr	r3, [pc, #88]	; (8014374 <HAL_TIM_IC_MspInit+0x9c>)
 801431a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801431e:	4a15      	ldr	r2, [pc, #84]	; (8014374 <HAL_TIM_IC_MspInit+0x9c>)
 8014320:	f043 0310 	orr.w	r3, r3, #16
 8014324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014328:	4b12      	ldr	r3, [pc, #72]	; (8014374 <HAL_TIM_IC_MspInit+0x9c>)
 801432a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801432e:	f003 0310 	and.w	r3, r3, #16
 8014332:	60fb      	str	r3, [r7, #12]
 8014334:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PE5     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = Lidar_Pin;
 8014336:	2320      	movs	r3, #32
 8014338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801433a:	2302      	movs	r3, #2
 801433c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801433e:	2300      	movs	r3, #0
 8014340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014342:	2300      	movs	r3, #0
 8014344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8014346:	2304      	movs	r3, #4
 8014348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Lidar_GPIO_Port, &GPIO_InitStruct);
 801434a:	f107 0314 	add.w	r3, r7, #20
 801434e:	4619      	mov	r1, r3
 8014350:	4809      	ldr	r0, [pc, #36]	; (8014378 <HAL_TIM_IC_MspInit+0xa0>)
 8014352:	f004 f86d 	bl	8018430 <HAL_GPIO_Init>

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8014356:	2200      	movs	r2, #0
 8014358:	2100      	movs	r1, #0
 801435a:	2074      	movs	r0, #116	; 0x74
 801435c:	f001 fd0a 	bl	8015d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8014360:	2074      	movs	r0, #116	; 0x74
 8014362:	f001 fd21 	bl	8015da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8014366:	bf00      	nop
 8014368:	3728      	adds	r7, #40	; 0x28
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
 801436e:	bf00      	nop
 8014370:	40014000 	.word	0x40014000
 8014374:	58024400 	.word	0x58024400
 8014378:	58021000 	.word	0x58021000

0801437c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b08e      	sub	sp, #56	; 0x38
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014388:	2200      	movs	r2, #0
 801438a:	601a      	str	r2, [r3, #0]
 801438c:	605a      	str	r2, [r3, #4]
 801438e:	609a      	str	r2, [r3, #8]
 8014390:	60da      	str	r2, [r3, #12]
 8014392:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	4a7c      	ldr	r2, [pc, #496]	; (801458c <HAL_TIM_MspPostInit+0x210>)
 801439a:	4293      	cmp	r3, r2
 801439c:	d120      	bne.n	80143e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801439e:	4b7c      	ldr	r3, [pc, #496]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80143a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80143a4:	4a7a      	ldr	r2, [pc, #488]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80143a6:	f043 0310 	orr.w	r3, r3, #16
 80143aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80143ae:	4b78      	ldr	r3, [pc, #480]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80143b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80143b4:	f003 0310 	and.w	r3, r3, #16
 80143b8:	623b      	str	r3, [r7, #32]
 80143ba:	6a3b      	ldr	r3, [r7, #32]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80143bc:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80143c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80143c2:	2302      	movs	r3, #2
 80143c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143c6:	2300      	movs	r3, #0
 80143c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80143ca:	2300      	movs	r3, #0
 80143cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80143ce:	2301      	movs	r3, #1
 80143d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80143d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143d6:	4619      	mov	r1, r3
 80143d8:	486e      	ldr	r0, [pc, #440]	; (8014594 <HAL_TIM_MspPostInit+0x218>)
 80143da:	f004 f829 	bl	8018430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80143de:	e0d1      	b.n	8014584 <HAL_TIM_MspPostInit+0x208>
  else if(timHandle->Instance==TIM3)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	4a6c      	ldr	r2, [pc, #432]	; (8014598 <HAL_TIM_MspPostInit+0x21c>)
 80143e6:	4293      	cmp	r3, r2
 80143e8:	d15d      	bne.n	80144a6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80143ea:	4b69      	ldr	r3, [pc, #420]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80143ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80143f0:	4a67      	ldr	r2, [pc, #412]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80143f2:	f043 0301 	orr.w	r3, r3, #1
 80143f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80143fa:	4b65      	ldr	r3, [pc, #404]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80143fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014400:	f003 0301 	and.w	r3, r3, #1
 8014404:	61fb      	str	r3, [r7, #28]
 8014406:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014408:	4b61      	ldr	r3, [pc, #388]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 801440a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801440e:	4a60      	ldr	r2, [pc, #384]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 8014410:	f043 0302 	orr.w	r3, r3, #2
 8014414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014418:	4b5d      	ldr	r3, [pc, #372]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 801441a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801441e:	f003 0302 	and.w	r3, r3, #2
 8014422:	61bb      	str	r3, [r7, #24]
 8014424:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014426:	4b5a      	ldr	r3, [pc, #360]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 8014428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801442c:	4a58      	ldr	r2, [pc, #352]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 801442e:	f043 0304 	orr.w	r3, r3, #4
 8014432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014436:	4b56      	ldr	r3, [pc, #344]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 8014438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801443c:	f003 0304 	and.w	r3, r3, #4
 8014440:	617b      	str	r3, [r7, #20]
 8014442:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M7_Pin;
 8014444:	2340      	movs	r3, #64	; 0x40
 8014446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014448:	2302      	movs	r3, #2
 801444a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801444c:	2300      	movs	r3, #0
 801444e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014450:	2300      	movs	r3, #0
 8014452:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014454:	2302      	movs	r3, #2
 8014456:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(M7_GPIO_Port, &GPIO_InitStruct);
 8014458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801445c:	4619      	mov	r1, r3
 801445e:	484f      	ldr	r0, [pc, #316]	; (801459c <HAL_TIM_MspPostInit+0x220>)
 8014460:	f003 ffe6 	bl	8018430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M5_Pin;
 8014464:	2302      	movs	r3, #2
 8014466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014468:	2302      	movs	r3, #2
 801446a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801446c:	2300      	movs	r3, #0
 801446e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014470:	2300      	movs	r3, #0
 8014472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014474:	2302      	movs	r3, #2
 8014476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(M5_GPIO_Port, &GPIO_InitStruct);
 8014478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801447c:	4619      	mov	r1, r3
 801447e:	4848      	ldr	r0, [pc, #288]	; (80145a0 <HAL_TIM_MspPostInit+0x224>)
 8014480:	f003 ffd6 	bl	8018430 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M6_Pin;
 8014484:	2380      	movs	r3, #128	; 0x80
 8014486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014488:	2302      	movs	r3, #2
 801448a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801448c:	2300      	movs	r3, #0
 801448e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014490:	2300      	movs	r3, #0
 8014492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014494:	2302      	movs	r3, #2
 8014496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(M6_GPIO_Port, &GPIO_InitStruct);
 8014498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801449c:	4619      	mov	r1, r3
 801449e:	4841      	ldr	r0, [pc, #260]	; (80145a4 <HAL_TIM_MspPostInit+0x228>)
 80144a0:	f003 ffc6 	bl	8018430 <HAL_GPIO_Init>
}
 80144a4:	e06e      	b.n	8014584 <HAL_TIM_MspPostInit+0x208>
  else if(timHandle->Instance==TIM4)
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	4a3f      	ldr	r2, [pc, #252]	; (80145a8 <HAL_TIM_MspPostInit+0x22c>)
 80144ac:	4293      	cmp	r3, r2
 80144ae:	d120      	bne.n	80144f2 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80144b0:	4b37      	ldr	r3, [pc, #220]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80144b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80144b6:	4a36      	ldr	r2, [pc, #216]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80144b8:	f043 0308 	orr.w	r3, r3, #8
 80144bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80144c0:	4b33      	ldr	r3, [pc, #204]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80144c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80144c6:	f003 0308 	and.w	r3, r3, #8
 80144ca:	613b      	str	r3, [r7, #16]
 80144cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_Pin|M4_Pin|M2_Pin|M1_Pin;
 80144ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80144d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144d4:	2302      	movs	r3, #2
 80144d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144d8:	2300      	movs	r3, #0
 80144da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80144dc:	2300      	movs	r3, #0
 80144de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80144e0:	2302      	movs	r3, #2
 80144e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80144e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144e8:	4619      	mov	r1, r3
 80144ea:	4830      	ldr	r0, [pc, #192]	; (80145ac <HAL_TIM_MspPostInit+0x230>)
 80144ec:	f003 ffa0 	bl	8018430 <HAL_GPIO_Init>
}
 80144f0:	e048      	b.n	8014584 <HAL_TIM_MspPostInit+0x208>
  else if(timHandle->Instance==TIM5)
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	4a2e      	ldr	r2, [pc, #184]	; (80145b0 <HAL_TIM_MspPostInit+0x234>)
 80144f8:	4293      	cmp	r3, r2
 80144fa:	d11f      	bne.n	801453c <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80144fc:	4b24      	ldr	r3, [pc, #144]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 80144fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014502:	4a23      	ldr	r2, [pc, #140]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 8014504:	f043 0301 	orr.w	r3, r3, #1
 8014508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801450c:	4b20      	ldr	r3, [pc, #128]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 801450e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014512:	f003 0301 	and.w	r3, r3, #1
 8014516:	60fb      	str	r3, [r7, #12]
 8014518:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|BUZZER_Pin|GPIO_PIN_2|GPIO_PIN_3;
 801451a:	230f      	movs	r3, #15
 801451c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801451e:	2302      	movs	r3, #2
 8014520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014522:	2300      	movs	r3, #0
 8014524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014526:	2300      	movs	r3, #0
 8014528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801452a:	2302      	movs	r3, #2
 801452c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801452e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014532:	4619      	mov	r1, r3
 8014534:	4819      	ldr	r0, [pc, #100]	; (801459c <HAL_TIM_MspPostInit+0x220>)
 8014536:	f003 ff7b 	bl	8018430 <HAL_GPIO_Init>
}
 801453a:	e023      	b.n	8014584 <HAL_TIM_MspPostInit+0x208>
  else if(timHandle->Instance==TIM8)
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	4a1c      	ldr	r2, [pc, #112]	; (80145b4 <HAL_TIM_MspPostInit+0x238>)
 8014542:	4293      	cmp	r3, r2
 8014544:	d11e      	bne.n	8014584 <HAL_TIM_MspPostInit+0x208>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014546:	4b12      	ldr	r3, [pc, #72]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 8014548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801454c:	4a10      	ldr	r2, [pc, #64]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 801454e:	f043 0304 	orr.w	r3, r3, #4
 8014552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014556:	4b0e      	ldr	r3, [pc, #56]	; (8014590 <HAL_TIM_MspPostInit+0x214>)
 8014558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801455c:	f003 0304 	and.w	r3, r3, #4
 8014560:	60bb      	str	r3, [r7, #8]
 8014562:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014564:	2340      	movs	r3, #64	; 0x40
 8014566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014568:	2302      	movs	r3, #2
 801456a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801456c:	2300      	movs	r3, #0
 801456e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014570:	2300      	movs	r3, #0
 8014572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014574:	2303      	movs	r3, #3
 8014576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801457c:	4619      	mov	r1, r3
 801457e:	4809      	ldr	r0, [pc, #36]	; (80145a4 <HAL_TIM_MspPostInit+0x228>)
 8014580:	f003 ff56 	bl	8018430 <HAL_GPIO_Init>
}
 8014584:	bf00      	nop
 8014586:	3738      	adds	r7, #56	; 0x38
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}
 801458c:	40010000 	.word	0x40010000
 8014590:	58024400 	.word	0x58024400
 8014594:	58021000 	.word	0x58021000
 8014598:	40000400 	.word	0x40000400
 801459c:	58020000 	.word	0x58020000
 80145a0:	58020400 	.word	0x58020400
 80145a4:	58020800 	.word	0x58020800
 80145a8:	40000800 	.word	0x40000800
 80145ac:	58020c00 	.word	0x58020c00
 80145b0:	40000c00 	.word	0x40000c00
 80145b4:	40010400 	.word	0x40010400

080145b8 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80145bc:	4b23      	ldr	r3, [pc, #140]	; (801464c <MX_UART7_Init+0x94>)
 80145be:	4a24      	ldr	r2, [pc, #144]	; (8014650 <MX_UART7_Init+0x98>)
 80145c0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 80145c2:	4b22      	ldr	r3, [pc, #136]	; (801464c <MX_UART7_Init+0x94>)
 80145c4:	4a23      	ldr	r2, [pc, #140]	; (8014654 <MX_UART7_Init+0x9c>)
 80145c6:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 80145c8:	4b20      	ldr	r3, [pc, #128]	; (801464c <MX_UART7_Init+0x94>)
 80145ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80145ce:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 80145d0:	4b1e      	ldr	r3, [pc, #120]	; (801464c <MX_UART7_Init+0x94>)
 80145d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80145d6:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 80145d8:	4b1c      	ldr	r3, [pc, #112]	; (801464c <MX_UART7_Init+0x94>)
 80145da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80145de:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80145e0:	4b1a      	ldr	r3, [pc, #104]	; (801464c <MX_UART7_Init+0x94>)
 80145e2:	220c      	movs	r2, #12
 80145e4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80145e6:	4b19      	ldr	r3, [pc, #100]	; (801464c <MX_UART7_Init+0x94>)
 80145e8:	2200      	movs	r2, #0
 80145ea:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80145ec:	4b17      	ldr	r3, [pc, #92]	; (801464c <MX_UART7_Init+0x94>)
 80145ee:	2200      	movs	r2, #0
 80145f0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80145f2:	4b16      	ldr	r3, [pc, #88]	; (801464c <MX_UART7_Init+0x94>)
 80145f4:	2200      	movs	r2, #0
 80145f6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80145f8:	4b14      	ldr	r3, [pc, #80]	; (801464c <MX_UART7_Init+0x94>)
 80145fa:	2200      	movs	r2, #0
 80145fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80145fe:	4b13      	ldr	r3, [pc, #76]	; (801464c <MX_UART7_Init+0x94>)
 8014600:	2200      	movs	r2, #0
 8014602:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8014604:	4811      	ldr	r0, [pc, #68]	; (801464c <MX_UART7_Init+0x94>)
 8014606:	f00c ff89 	bl	802151c <HAL_UART_Init>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d001      	beq.n	8014614 <MX_UART7_Init+0x5c>
  {
    Error_Handler();
 8014610:	f7fe fec6 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014614:	2100      	movs	r1, #0
 8014616:	480d      	ldr	r0, [pc, #52]	; (801464c <MX_UART7_Init+0x94>)
 8014618:	f00e faf0 	bl	8022bfc <HAL_UARTEx_SetTxFifoThreshold>
 801461c:	4603      	mov	r3, r0
 801461e:	2b00      	cmp	r3, #0
 8014620:	d001      	beq.n	8014626 <MX_UART7_Init+0x6e>
  {
    Error_Handler();
 8014622:	f7fe febd 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014626:	2100      	movs	r1, #0
 8014628:	4808      	ldr	r0, [pc, #32]	; (801464c <MX_UART7_Init+0x94>)
 801462a:	f00e fb25 	bl	8022c78 <HAL_UARTEx_SetRxFifoThreshold>
 801462e:	4603      	mov	r3, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	d001      	beq.n	8014638 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8014634:	f7fe feb4 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8014638:	4804      	ldr	r0, [pc, #16]	; (801464c <MX_UART7_Init+0x94>)
 801463a:	f00e faa6 	bl	8022b8a <HAL_UARTEx_DisableFifoMode>
 801463e:	4603      	mov	r3, r0
 8014640:	2b00      	cmp	r3, #0
 8014642:	d001      	beq.n	8014648 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8014644:	f7fe feac 	bl	80133a0 <Error_Handler>
  }

}
 8014648:	bf00      	nop
 801464a:	bd80      	pop	{r7, pc}
 801464c:	2400c7cc 	.word	0x2400c7cc
 8014650:	40007800 	.word	0x40007800
 8014654:	000186a0 	.word	0x000186a0

08014658 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 801465c:	4b22      	ldr	r3, [pc, #136]	; (80146e8 <MX_UART8_Init+0x90>)
 801465e:	4a23      	ldr	r2, [pc, #140]	; (80146ec <MX_UART8_Init+0x94>)
 8014660:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8014662:	4b21      	ldr	r3, [pc, #132]	; (80146e8 <MX_UART8_Init+0x90>)
 8014664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014668:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 801466a:	4b1f      	ldr	r3, [pc, #124]	; (80146e8 <MX_UART8_Init+0x90>)
 801466c:	2200      	movs	r2, #0
 801466e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8014670:	4b1d      	ldr	r3, [pc, #116]	; (80146e8 <MX_UART8_Init+0x90>)
 8014672:	2200      	movs	r2, #0
 8014674:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8014676:	4b1c      	ldr	r3, [pc, #112]	; (80146e8 <MX_UART8_Init+0x90>)
 8014678:	2200      	movs	r2, #0
 801467a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 801467c:	4b1a      	ldr	r3, [pc, #104]	; (80146e8 <MX_UART8_Init+0x90>)
 801467e:	220c      	movs	r2, #12
 8014680:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014682:	4b19      	ldr	r3, [pc, #100]	; (80146e8 <MX_UART8_Init+0x90>)
 8014684:	2200      	movs	r2, #0
 8014686:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8014688:	4b17      	ldr	r3, [pc, #92]	; (80146e8 <MX_UART8_Init+0x90>)
 801468a:	2200      	movs	r2, #0
 801468c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801468e:	4b16      	ldr	r3, [pc, #88]	; (80146e8 <MX_UART8_Init+0x90>)
 8014690:	2200      	movs	r2, #0
 8014692:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8014694:	4b14      	ldr	r3, [pc, #80]	; (80146e8 <MX_UART8_Init+0x90>)
 8014696:	2200      	movs	r2, #0
 8014698:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801469a:	4b13      	ldr	r3, [pc, #76]	; (80146e8 <MX_UART8_Init+0x90>)
 801469c:	2200      	movs	r2, #0
 801469e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80146a0:	4811      	ldr	r0, [pc, #68]	; (80146e8 <MX_UART8_Init+0x90>)
 80146a2:	f00c ff3b 	bl	802151c <HAL_UART_Init>
 80146a6:	4603      	mov	r3, r0
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d001      	beq.n	80146b0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80146ac:	f7fe fe78 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80146b0:	2100      	movs	r1, #0
 80146b2:	480d      	ldr	r0, [pc, #52]	; (80146e8 <MX_UART8_Init+0x90>)
 80146b4:	f00e faa2 	bl	8022bfc <HAL_UARTEx_SetTxFifoThreshold>
 80146b8:	4603      	mov	r3, r0
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d001      	beq.n	80146c2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80146be:	f7fe fe6f 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80146c2:	2100      	movs	r1, #0
 80146c4:	4808      	ldr	r0, [pc, #32]	; (80146e8 <MX_UART8_Init+0x90>)
 80146c6:	f00e fad7 	bl	8022c78 <HAL_UARTEx_SetRxFifoThreshold>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d001      	beq.n	80146d4 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80146d0:	f7fe fe66 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80146d4:	4804      	ldr	r0, [pc, #16]	; (80146e8 <MX_UART8_Init+0x90>)
 80146d6:	f00e fa58 	bl	8022b8a <HAL_UARTEx_DisableFifoMode>
 80146da:	4603      	mov	r3, r0
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d001      	beq.n	80146e4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80146e0:	f7fe fe5e 	bl	80133a0 <Error_Handler>
  }

}
 80146e4:	bf00      	nop
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	2400c9d4 	.word	0x2400c9d4
 80146ec:	40007c00 	.word	0x40007c00

080146f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80146f4:	4b23      	ldr	r3, [pc, #140]	; (8014784 <MX_USART2_UART_Init+0x94>)
 80146f6:	4a24      	ldr	r2, [pc, #144]	; (8014788 <MX_USART2_UART_Init+0x98>)
 80146f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80146fa:	4b22      	ldr	r3, [pc, #136]	; (8014784 <MX_USART2_UART_Init+0x94>)
 80146fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8014702:	4b20      	ldr	r3, [pc, #128]	; (8014784 <MX_USART2_UART_Init+0x94>)
 8014704:	2200      	movs	r2, #0
 8014706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8014708:	4b1e      	ldr	r3, [pc, #120]	; (8014784 <MX_USART2_UART_Init+0x94>)
 801470a:	2200      	movs	r2, #0
 801470c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801470e:	4b1d      	ldr	r3, [pc, #116]	; (8014784 <MX_USART2_UART_Init+0x94>)
 8014710:	2200      	movs	r2, #0
 8014712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8014714:	4b1b      	ldr	r3, [pc, #108]	; (8014784 <MX_USART2_UART_Init+0x94>)
 8014716:	220c      	movs	r2, #12
 8014718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 801471a:	4b1a      	ldr	r3, [pc, #104]	; (8014784 <MX_USART2_UART_Init+0x94>)
 801471c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8014720:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8014722:	4b18      	ldr	r3, [pc, #96]	; (8014784 <MX_USART2_UART_Init+0x94>)
 8014724:	2200      	movs	r2, #0
 8014726:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014728:	4b16      	ldr	r3, [pc, #88]	; (8014784 <MX_USART2_UART_Init+0x94>)
 801472a:	2200      	movs	r2, #0
 801472c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801472e:	4b15      	ldr	r3, [pc, #84]	; (8014784 <MX_USART2_UART_Init+0x94>)
 8014730:	2200      	movs	r2, #0
 8014732:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014734:	4b13      	ldr	r3, [pc, #76]	; (8014784 <MX_USART2_UART_Init+0x94>)
 8014736:	2200      	movs	r2, #0
 8014738:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801473a:	4812      	ldr	r0, [pc, #72]	; (8014784 <MX_USART2_UART_Init+0x94>)
 801473c:	f00c feee 	bl	802151c <HAL_UART_Init>
 8014740:	4603      	mov	r3, r0
 8014742:	2b00      	cmp	r3, #0
 8014744:	d001      	beq.n	801474a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8014746:	f7fe fe2b 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801474a:	2100      	movs	r1, #0
 801474c:	480d      	ldr	r0, [pc, #52]	; (8014784 <MX_USART2_UART_Init+0x94>)
 801474e:	f00e fa55 	bl	8022bfc <HAL_UARTEx_SetTxFifoThreshold>
 8014752:	4603      	mov	r3, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	d001      	beq.n	801475c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8014758:	f7fe fe22 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801475c:	2100      	movs	r1, #0
 801475e:	4809      	ldr	r0, [pc, #36]	; (8014784 <MX_USART2_UART_Init+0x94>)
 8014760:	f00e fa8a 	bl	8022c78 <HAL_UARTEx_SetRxFifoThreshold>
 8014764:	4603      	mov	r3, r0
 8014766:	2b00      	cmp	r3, #0
 8014768:	d001      	beq.n	801476e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 801476a:	f7fe fe19 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 801476e:	4805      	ldr	r0, [pc, #20]	; (8014784 <MX_USART2_UART_Init+0x94>)
 8014770:	f00e fa0b 	bl	8022b8a <HAL_UARTEx_DisableFifoMode>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d001      	beq.n	801477e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 801477a:	f7fe fe11 	bl	80133a0 <Error_Handler>
  }

}
 801477e:	bf00      	nop
 8014780:	bd80      	pop	{r7, pc}
 8014782:	bf00      	nop
 8014784:	2400ca60 	.word	0x2400ca60
 8014788:	40004400 	.word	0x40004400

0801478c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8014790:	4b22      	ldr	r3, [pc, #136]	; (801481c <MX_USART3_UART_Init+0x90>)
 8014792:	4a23      	ldr	r2, [pc, #140]	; (8014820 <MX_USART3_UART_Init+0x94>)
 8014794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8014796:	4b21      	ldr	r3, [pc, #132]	; (801481c <MX_USART3_UART_Init+0x90>)
 8014798:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 801479c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801479e:	4b1f      	ldr	r3, [pc, #124]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147a0:	2200      	movs	r2, #0
 80147a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80147a4:	4b1d      	ldr	r3, [pc, #116]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147a6:	2200      	movs	r2, #0
 80147a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80147aa:	4b1c      	ldr	r3, [pc, #112]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147ac:	2200      	movs	r2, #0
 80147ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80147b0:	4b1a      	ldr	r3, [pc, #104]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147b2:	220c      	movs	r2, #12
 80147b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80147b6:	4b19      	ldr	r3, [pc, #100]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147b8:	2200      	movs	r2, #0
 80147ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80147bc:	4b17      	ldr	r3, [pc, #92]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147be:	2200      	movs	r2, #0
 80147c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80147c2:	4b16      	ldr	r3, [pc, #88]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147c4:	2200      	movs	r2, #0
 80147c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80147c8:	4b14      	ldr	r3, [pc, #80]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147ca:	2200      	movs	r2, #0
 80147cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80147ce:	4b13      	ldr	r3, [pc, #76]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147d0:	2200      	movs	r2, #0
 80147d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80147d4:	4811      	ldr	r0, [pc, #68]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147d6:	f00c fea1 	bl	802151c <HAL_UART_Init>
 80147da:	4603      	mov	r3, r0
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d001      	beq.n	80147e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80147e0:	f7fe fdde 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80147e4:	2100      	movs	r1, #0
 80147e6:	480d      	ldr	r0, [pc, #52]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147e8:	f00e fa08 	bl	8022bfc <HAL_UARTEx_SetTxFifoThreshold>
 80147ec:	4603      	mov	r3, r0
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d001      	beq.n	80147f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80147f2:	f7fe fdd5 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80147f6:	2100      	movs	r1, #0
 80147f8:	4808      	ldr	r0, [pc, #32]	; (801481c <MX_USART3_UART_Init+0x90>)
 80147fa:	f00e fa3d 	bl	8022c78 <HAL_UARTEx_SetRxFifoThreshold>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b00      	cmp	r3, #0
 8014802:	d001      	beq.n	8014808 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8014804:	f7fe fdcc 	bl	80133a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8014808:	4804      	ldr	r0, [pc, #16]	; (801481c <MX_USART3_UART_Init+0x90>)
 801480a:	f00e f9be 	bl	8022b8a <HAL_UARTEx_DisableFifoMode>
 801480e:	4603      	mov	r3, r0
 8014810:	2b00      	cmp	r3, #0
 8014812:	d001      	beq.n	8014818 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8014814:	f7fe fdc4 	bl	80133a0 <Error_Handler>
  }

}
 8014818:	bf00      	nop
 801481a:	bd80      	pop	{r7, pc}
 801481c:	2400c858 	.word	0x2400c858
 8014820:	40004800 	.word	0x40004800

08014824 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b090      	sub	sp, #64	; 0x40
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801482c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014830:	2200      	movs	r2, #0
 8014832:	601a      	str	r2, [r3, #0]
 8014834:	605a      	str	r2, [r3, #4]
 8014836:	609a      	str	r2, [r3, #8]
 8014838:	60da      	str	r2, [r3, #12]
 801483a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	4a9f      	ldr	r2, [pc, #636]	; (8014ac0 <HAL_UART_MspInit+0x29c>)
 8014842:	4293      	cmp	r3, r2
 8014844:	d165      	bne.n	8014912 <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8014846:	4b9f      	ldr	r3, [pc, #636]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801484c:	4a9d      	ldr	r2, [pc, #628]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 801484e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014852:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014856:	4b9b      	ldr	r3, [pc, #620]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801485c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014860:	62bb      	str	r3, [r7, #40]	; 0x28
 8014862:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014864:	4b97      	ldr	r3, [pc, #604]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801486a:	4a96      	ldr	r2, [pc, #600]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 801486c:	f043 0310 	orr.w	r3, r3, #16
 8014870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014874:	4b93      	ldr	r3, [pc, #588]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801487a:	f003 0310 	and.w	r3, r3, #16
 801487e:	627b      	str	r3, [r7, #36]	; 0x24
 8014880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = SBUS_RX_Pin|SBUS_TX_Pin;
 8014882:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8014886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014888:	2302      	movs	r3, #2
 801488a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801488c:	2300      	movs	r3, #0
 801488e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014890:	2300      	movs	r3, #0
 8014892:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8014894:	2307      	movs	r3, #7
 8014896:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801489c:	4619      	mov	r1, r3
 801489e:	488a      	ldr	r0, [pc, #552]	; (8014ac8 <HAL_UART_MspInit+0x2a4>)
 80148a0:	f003 fdc6 	bl	8018430 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream1;
 80148a4:	4b89      	ldr	r3, [pc, #548]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148a6:	4a8a      	ldr	r2, [pc, #552]	; (8014ad0 <HAL_UART_MspInit+0x2ac>)
 80148a8:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80148aa:	4b88      	ldr	r3, [pc, #544]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148ac:	224f      	movs	r2, #79	; 0x4f
 80148ae:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80148b0:	4b86      	ldr	r3, [pc, #536]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148b2:	2200      	movs	r2, #0
 80148b4:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80148b6:	4b85      	ldr	r3, [pc, #532]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148b8:	2200      	movs	r2, #0
 80148ba:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80148bc:	4b83      	ldr	r3, [pc, #524]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80148c2:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80148c4:	4b81      	ldr	r3, [pc, #516]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148c6:	2200      	movs	r2, #0
 80148c8:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80148ca:	4b80      	ldr	r3, [pc, #512]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148cc:	2200      	movs	r2, #0
 80148ce:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80148d0:	4b7e      	ldr	r3, [pc, #504]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80148d6:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80148d8:	4b7c      	ldr	r3, [pc, #496]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148da:	2200      	movs	r2, #0
 80148dc:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80148de:	4b7b      	ldr	r3, [pc, #492]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148e0:	2200      	movs	r2, #0
 80148e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80148e4:	4879      	ldr	r0, [pc, #484]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148e6:	f001 fa6d 	bl	8015dc4 <HAL_DMA_Init>
 80148ea:	4603      	mov	r3, r0
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d001      	beq.n	80148f4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80148f0:	f7fe fd56 	bl	80133a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	4a75      	ldr	r2, [pc, #468]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148f8:	679a      	str	r2, [r3, #120]	; 0x78
 80148fa:	4a74      	ldr	r2, [pc, #464]	; (8014acc <HAL_UART_MspInit+0x2a8>)
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 10, 0);
 8014900:	2200      	movs	r2, #0
 8014902:	210a      	movs	r1, #10
 8014904:	2052      	movs	r0, #82	; 0x52
 8014906:	f001 fa35 	bl	8015d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 801490a:	2052      	movs	r0, #82	; 0x52
 801490c:	f001 fa4c 	bl	8015da8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8014910:	e0d1      	b.n	8014ab6 <HAL_UART_MspInit+0x292>
  else if(uartHandle->Instance==UART8)
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	4a6f      	ldr	r2, [pc, #444]	; (8014ad4 <HAL_UART_MspInit+0x2b0>)
 8014918:	4293      	cmp	r3, r2
 801491a:	d164      	bne.n	80149e6 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_UART8_CLK_ENABLE();
 801491c:	4b69      	ldr	r3, [pc, #420]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 801491e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014922:	4a68      	ldr	r2, [pc, #416]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014928:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801492c:	4b65      	ldr	r3, [pc, #404]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 801492e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014936:	623b      	str	r3, [r7, #32]
 8014938:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801493a:	4b62      	ldr	r3, [pc, #392]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 801493c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014940:	4a60      	ldr	r2, [pc, #384]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014942:	f043 0310 	orr.w	r3, r3, #16
 8014946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801494a:	4b5e      	ldr	r3, [pc, #376]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 801494c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014950:	f003 0310 	and.w	r3, r3, #16
 8014954:	61fb      	str	r3, [r7, #28]
 8014956:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8014958:	2303      	movs	r3, #3
 801495a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801495c:	2302      	movs	r3, #2
 801495e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014960:	2300      	movs	r3, #0
 8014962:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014964:	2300      	movs	r3, #0
 8014966:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8014968:	2308      	movs	r3, #8
 801496a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801496c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014970:	4619      	mov	r1, r3
 8014972:	4855      	ldr	r0, [pc, #340]	; (8014ac8 <HAL_UART_MspInit+0x2a4>)
 8014974:	f003 fd5c 	bl	8018430 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8014978:	4b57      	ldr	r3, [pc, #348]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 801497a:	4a58      	ldr	r2, [pc, #352]	; (8014adc <HAL_UART_MspInit+0x2b8>)
 801497c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 801497e:	4b56      	ldr	r3, [pc, #344]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 8014980:	2251      	movs	r2, #81	; 0x51
 8014982:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014984:	4b54      	ldr	r3, [pc, #336]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 8014986:	2200      	movs	r2, #0
 8014988:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801498a:	4b53      	ldr	r3, [pc, #332]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 801498c:	2200      	movs	r2, #0
 801498e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014990:	4b51      	ldr	r3, [pc, #324]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 8014992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014996:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8014998:	4b4f      	ldr	r3, [pc, #316]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 801499a:	2200      	movs	r2, #0
 801499c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801499e:	4b4e      	ldr	r3, [pc, #312]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 80149a0:	2200      	movs	r2, #0
 80149a2:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80149a4:	4b4c      	ldr	r3, [pc, #304]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 80149a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80149aa:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80149ac:	4b4a      	ldr	r3, [pc, #296]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 80149ae:	2200      	movs	r2, #0
 80149b0:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80149b2:	4b49      	ldr	r3, [pc, #292]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 80149b4:	2200      	movs	r2, #0
 80149b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80149b8:	4847      	ldr	r0, [pc, #284]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 80149ba:	f001 fa03 	bl	8015dc4 <HAL_DMA_Init>
 80149be:	4603      	mov	r3, r0
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d001      	beq.n	80149c8 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80149c4:	f7fe fcec 	bl	80133a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	4a43      	ldr	r2, [pc, #268]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 80149cc:	679a      	str	r2, [r3, #120]	; 0x78
 80149ce:	4a42      	ldr	r2, [pc, #264]	; (8014ad8 <HAL_UART_MspInit+0x2b4>)
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 10, 0);
 80149d4:	2200      	movs	r2, #0
 80149d6:	210a      	movs	r1, #10
 80149d8:	2053      	movs	r0, #83	; 0x53
 80149da:	f001 f9cb 	bl	8015d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80149de:	2053      	movs	r0, #83	; 0x53
 80149e0:	f001 f9e2 	bl	8015da8 <HAL_NVIC_EnableIRQ>
}
 80149e4:	e067      	b.n	8014ab6 <HAL_UART_MspInit+0x292>
  else if(uartHandle->Instance==USART2)
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	4a3d      	ldr	r2, [pc, #244]	; (8014ae0 <HAL_UART_MspInit+0x2bc>)
 80149ec:	4293      	cmp	r3, r2
 80149ee:	d12e      	bne.n	8014a4e <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80149f0:	4b34      	ldr	r3, [pc, #208]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 80149f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149f6:	4a33      	ldr	r2, [pc, #204]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 80149f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80149fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014a00:	4b30      	ldr	r3, [pc, #192]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014a0a:	61bb      	str	r3, [r7, #24]
 8014a0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014a0e:	4b2d      	ldr	r3, [pc, #180]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014a14:	4a2b      	ldr	r2, [pc, #172]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a16:	f043 0308 	orr.w	r3, r3, #8
 8014a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014a1e:	4b29      	ldr	r3, [pc, #164]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014a24:	f003 0308 	and.w	r3, r3, #8
 8014a28:	617b      	str	r3, [r7, #20]
 8014a2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TELEM_CTS_Pin|TELEM_RTS_Pin|TELEM_TX_Pin|TELEM_RX_Pin;
 8014a2c:	2378      	movs	r3, #120	; 0x78
 8014a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a30:	2302      	movs	r3, #2
 8014a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a34:	2300      	movs	r3, #0
 8014a36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8014a3c:	2307      	movs	r3, #7
 8014a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014a44:	4619      	mov	r1, r3
 8014a46:	4827      	ldr	r0, [pc, #156]	; (8014ae4 <HAL_UART_MspInit+0x2c0>)
 8014a48:	f003 fcf2 	bl	8018430 <HAL_GPIO_Init>
}
 8014a4c:	e033      	b.n	8014ab6 <HAL_UART_MspInit+0x292>
  else if(uartHandle->Instance==USART3)
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	4a25      	ldr	r2, [pc, #148]	; (8014ae8 <HAL_UART_MspInit+0x2c4>)
 8014a54:	4293      	cmp	r3, r2
 8014a56:	d12e      	bne.n	8014ab6 <HAL_UART_MspInit+0x292>
    __HAL_RCC_USART3_CLK_ENABLE();
 8014a58:	4b1a      	ldr	r3, [pc, #104]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a5e:	4a19      	ldr	r2, [pc, #100]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014a64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014a68:	4b16      	ldr	r3, [pc, #88]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014a72:	613b      	str	r3, [r7, #16]
 8014a74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014a76:	4b13      	ldr	r3, [pc, #76]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014a7c:	4a11      	ldr	r2, [pc, #68]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a7e:	f043 0308 	orr.w	r3, r3, #8
 8014a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014a86:	4b0f      	ldr	r3, [pc, #60]	; (8014ac4 <HAL_UART_MspInit+0x2a0>)
 8014a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014a8c:	f003 0308 	and.w	r3, r3, #8
 8014a90:	60fb      	str	r3, [r7, #12]
 8014a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8014a94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a9a:	2302      	movs	r3, #2
 8014a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8014aa6:	2307      	movs	r3, #7
 8014aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014aae:	4619      	mov	r1, r3
 8014ab0:	480c      	ldr	r0, [pc, #48]	; (8014ae4 <HAL_UART_MspInit+0x2c0>)
 8014ab2:	f003 fcbd 	bl	8018430 <HAL_GPIO_Init>
}
 8014ab6:	bf00      	nop
 8014ab8:	3740      	adds	r7, #64	; 0x40
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	40007800 	.word	0x40007800
 8014ac4:	58024400 	.word	0x58024400
 8014ac8:	58021000 	.word	0x58021000
 8014acc:	2400c8e4 	.word	0x2400c8e4
 8014ad0:	40020028 	.word	0x40020028
 8014ad4:	40007c00 	.word	0x40007c00
 8014ad8:	2400c95c 	.word	0x2400c95c
 8014adc:	40020010 	.word	0x40020010
 8014ae0:	40004400 	.word	0x40004400
 8014ae4:	58020c00 	.word	0x58020c00
 8014ae8:	40004800 	.word	0x40004800

08014aec <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014af0:	4b15      	ldr	r3, [pc, #84]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014af2:	4a16      	ldr	r2, [pc, #88]	; (8014b4c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8014af4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8014af6:	4b14      	ldr	r3, [pc, #80]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014af8:	2209      	movs	r2, #9
 8014afa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014afc:	4b12      	ldr	r3, [pc, #72]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014afe:	2202      	movs	r2, #2
 8014b00:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014b02:	4b11      	ldr	r3, [pc, #68]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014b04:	2200      	movs	r2, #0
 8014b06:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014b08:	4b0f      	ldr	r3, [pc, #60]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014b0a:	2202      	movs	r2, #2
 8014b0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8014b0e:	4b0e      	ldr	r3, [pc, #56]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014b10:	2201      	movs	r2, #1
 8014b12:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014b14:	4b0c      	ldr	r3, [pc, #48]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014b16:	2200      	movs	r2, #0
 8014b18:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014b1a:	4b0b      	ldr	r3, [pc, #44]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8014b20:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014b22:	2201      	movs	r2, #1
 8014b24:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8014b26:	4b08      	ldr	r3, [pc, #32]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014b28:	2201      	movs	r2, #1
 8014b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014b2c:	4b06      	ldr	r3, [pc, #24]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014b2e:	2200      	movs	r2, #0
 8014b30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014b32:	4805      	ldr	r0, [pc, #20]	; (8014b48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8014b34:	f006 fac7 	bl	801b0c6 <HAL_PCD_Init>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d001      	beq.n	8014b42 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8014b3e:	f7fe fc2f 	bl	80133a0 <Error_Handler>
  }

}
 8014b42:	bf00      	nop
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	2400caec 	.word	0x2400caec
 8014b4c:	40080000 	.word	0x40080000

08014b50 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b08a      	sub	sp, #40	; 0x28
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b58:	f107 0314 	add.w	r3, r7, #20
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	601a      	str	r2, [r3, #0]
 8014b60:	605a      	str	r2, [r3, #4]
 8014b62:	609a      	str	r2, [r3, #8]
 8014b64:	60da      	str	r2, [r3, #12]
 8014b66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	4a21      	ldr	r2, [pc, #132]	; (8014bf4 <HAL_PCD_MspInit+0xa4>)
 8014b6e:	4293      	cmp	r3, r2
 8014b70:	d13b      	bne.n	8014bea <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b72:	4b21      	ldr	r3, [pc, #132]	; (8014bf8 <HAL_PCD_MspInit+0xa8>)
 8014b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014b78:	4a1f      	ldr	r2, [pc, #124]	; (8014bf8 <HAL_PCD_MspInit+0xa8>)
 8014b7a:	f043 0301 	orr.w	r3, r3, #1
 8014b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014b82:	4b1d      	ldr	r3, [pc, #116]	; (8014bf8 <HAL_PCD_MspInit+0xa8>)
 8014b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014b88:	f003 0301 	and.w	r3, r3, #1
 8014b8c:	613b      	str	r3, [r7, #16]
 8014b8e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8014b90:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8014b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b96:	2302      	movs	r3, #2
 8014b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014ba2:	230a      	movs	r3, #10
 8014ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014ba6:	f107 0314 	add.w	r3, r7, #20
 8014baa:	4619      	mov	r1, r3
 8014bac:	4813      	ldr	r0, [pc, #76]	; (8014bfc <HAL_PCD_MspInit+0xac>)
 8014bae:	f003 fc3f 	bl	8018430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8014bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bc0:	f107 0314 	add.w	r3, r7, #20
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	480d      	ldr	r0, [pc, #52]	; (8014bfc <HAL_PCD_MspInit+0xac>)
 8014bc8:	f003 fc32 	bl	8018430 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014bcc:	4b0a      	ldr	r3, [pc, #40]	; (8014bf8 <HAL_PCD_MspInit+0xa8>)
 8014bce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014bd2:	4a09      	ldr	r2, [pc, #36]	; (8014bf8 <HAL_PCD_MspInit+0xa8>)
 8014bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014bd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014bdc:	4b06      	ldr	r3, [pc, #24]	; (8014bf8 <HAL_PCD_MspInit+0xa8>)
 8014bde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014be6:	60fb      	str	r3, [r7, #12]
 8014be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014bea:	bf00      	nop
 8014bec:	3728      	adds	r7, #40	; 0x28
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	40080000 	.word	0x40080000
 8014bf8:	58024400 	.word	0x58024400
 8014bfc:	58020000 	.word	0x58020000

08014c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8014c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014c38 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8014c04:	f7fe fe52 	bl	80138ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014c08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014c0a:	e003      	b.n	8014c14 <LoopCopyDataInit>

08014c0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014c0c:	4b0b      	ldr	r3, [pc, #44]	; (8014c3c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8014c0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014c10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014c12:	3104      	adds	r1, #4

08014c14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014c14:	480a      	ldr	r0, [pc, #40]	; (8014c40 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8014c16:	4b0b      	ldr	r3, [pc, #44]	; (8014c44 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8014c18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014c1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014c1c:	d3f6      	bcc.n	8014c0c <CopyDataInit>
  ldr  r2, =_sbss
 8014c1e:	4a0a      	ldr	r2, [pc, #40]	; (8014c48 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8014c20:	e002      	b.n	8014c28 <LoopFillZerobss>

08014c22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014c22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014c24:	f842 3b04 	str.w	r3, [r2], #4

08014c28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014c28:	4b08      	ldr	r3, [pc, #32]	; (8014c4c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8014c2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014c2c:	d3f9      	bcc.n	8014c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8014c2e:	f018 ffdb 	bl	802dbe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014c32:	f7fe fa79 	bl	8013128 <main>
  bx  lr    
 8014c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8014c38:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8014c3c:	08030460 	.word	0x08030460
  ldr  r0, =_sdata
 8014c40:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8014c44:	240006d4 	.word	0x240006d4
  ldr  r2, =_sbss
 8014c48:	240006d8 	.word	0x240006d8
  ldr  r3, = _ebss
 8014c4c:	2400d3a8 	.word	0x2400d3a8

08014c50 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014c50:	e7fe      	b.n	8014c50 <ADC3_IRQHandler>
	...

08014c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b082      	sub	sp, #8
 8014c58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014c5a:	2003      	movs	r0, #3
 8014c5c:	f001 f87f 	bl	8015d5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014c60:	f007 f98a 	bl	801bf78 <HAL_RCC_GetSysClockFreq>
 8014c64:	4601      	mov	r1, r0
 8014c66:	4b15      	ldr	r3, [pc, #84]	; (8014cbc <HAL_Init+0x68>)
 8014c68:	699b      	ldr	r3, [r3, #24]
 8014c6a:	0a1b      	lsrs	r3, r3, #8
 8014c6c:	f003 030f 	and.w	r3, r3, #15
 8014c70:	4a13      	ldr	r2, [pc, #76]	; (8014cc0 <HAL_Init+0x6c>)
 8014c72:	5cd3      	ldrb	r3, [r2, r3]
 8014c74:	f003 031f 	and.w	r3, r3, #31
 8014c78:	fa21 f303 	lsr.w	r3, r1, r3
 8014c7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014c7e:	4b0f      	ldr	r3, [pc, #60]	; (8014cbc <HAL_Init+0x68>)
 8014c80:	699b      	ldr	r3, [r3, #24]
 8014c82:	f003 030f 	and.w	r3, r3, #15
 8014c86:	4a0e      	ldr	r2, [pc, #56]	; (8014cc0 <HAL_Init+0x6c>)
 8014c88:	5cd3      	ldrb	r3, [r2, r3]
 8014c8a:	f003 031f 	and.w	r3, r3, #31
 8014c8e:	687a      	ldr	r2, [r7, #4]
 8014c90:	fa22 f303 	lsr.w	r3, r2, r3
 8014c94:	4a0b      	ldr	r2, [pc, #44]	; (8014cc4 <HAL_Init+0x70>)
 8014c96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8014c98:	4a0b      	ldr	r2, [pc, #44]	; (8014cc8 <HAL_Init+0x74>)
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014c9e:	2000      	movs	r0, #0
 8014ca0:	f7fe fc46 	bl	8013530 <HAL_InitTick>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8014caa:	2301      	movs	r3, #1
 8014cac:	e002      	b.n	8014cb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8014cae:	f7fe fc25 	bl	80134fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8014cb2:	2300      	movs	r3, #0
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3708      	adds	r7, #8
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}
 8014cbc:	58024400 	.word	0x58024400
 8014cc0:	0802fc1c 	.word	0x0802fc1c
 8014cc4:	2400065c 	.word	0x2400065c
 8014cc8:	24000658 	.word	0x24000658

08014ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8014cd0:	4b06      	ldr	r3, [pc, #24]	; (8014cec <HAL_IncTick+0x20>)
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	461a      	mov	r2, r3
 8014cd6:	4b06      	ldr	r3, [pc, #24]	; (8014cf0 <HAL_IncTick+0x24>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	4413      	add	r3, r2
 8014cdc:	4a04      	ldr	r2, [pc, #16]	; (8014cf0 <HAL_IncTick+0x24>)
 8014cde:	6013      	str	r3, [r2, #0]
}
 8014ce0:	bf00      	nop
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce8:	4770      	bx	lr
 8014cea:	bf00      	nop
 8014cec:	24000664 	.word	0x24000664
 8014cf0:	2400cef4 	.word	0x2400cef4

08014cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014cf4:	b480      	push	{r7}
 8014cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8014cf8:	4b03      	ldr	r3, [pc, #12]	; (8014d08 <HAL_GetTick+0x14>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d04:	4770      	bx	lr
 8014d06:	bf00      	nop
 8014d08:	2400cef4 	.word	0x2400cef4

08014d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b084      	sub	sp, #16
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014d14:	f7ff ffee 	bl	8014cf4 <HAL_GetTick>
 8014d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d24:	d005      	beq.n	8014d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014d26:	4b09      	ldr	r3, [pc, #36]	; (8014d4c <HAL_Delay+0x40>)
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	4413      	add	r3, r2
 8014d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8014d32:	bf00      	nop
 8014d34:	f7ff ffde 	bl	8014cf4 <HAL_GetTick>
 8014d38:	4602      	mov	r2, r0
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	1ad3      	subs	r3, r2, r3
 8014d3e:	68fa      	ldr	r2, [r7, #12]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d8f7      	bhi.n	8014d34 <HAL_Delay+0x28>
  {
  }
}
 8014d44:	bf00      	nop
 8014d46:	3710      	adds	r7, #16
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	24000664 	.word	0x24000664

08014d50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8014d50:	b480      	push	{r7}
 8014d52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8014d54:	4b03      	ldr	r3, [pc, #12]	; (8014d64 <HAL_GetREVID+0x14>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	0c1b      	lsrs	r3, r3, #16
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d62:	4770      	bx	lr
 8014d64:	5c001000 	.word	0x5c001000

08014d68 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8014d68:	b480      	push	{r7}
 8014d6a:	b083      	sub	sp, #12
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
 8014d70:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8014d72:	4b07      	ldr	r3, [pc, #28]	; (8014d90 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8014d74:	685a      	ldr	r2, [r3, #4]
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	43db      	mvns	r3, r3
 8014d7a:	401a      	ands	r2, r3
 8014d7c:	4904      	ldr	r1, [pc, #16]	; (8014d90 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	4313      	orrs	r3, r2
 8014d82:	604b      	str	r3, [r1, #4]
}
 8014d84:	bf00      	nop
 8014d86:	370c      	adds	r7, #12
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr
 8014d90:	58000400 	.word	0x58000400

08014d94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8014d94:	b480      	push	{r7}
 8014d96:	b083      	sub	sp, #12
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	689b      	ldr	r3, [r3, #8]
 8014da2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	431a      	orrs	r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	609a      	str	r2, [r3, #8]
}
 8014dae:	bf00      	nop
 8014db0:	370c      	adds	r7, #12
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr

08014dba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8014dba:	b480      	push	{r7}
 8014dbc:	b083      	sub	sp, #12
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	6078      	str	r0, [r7, #4]
 8014dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	689b      	ldr	r3, [r3, #8]
 8014dc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	431a      	orrs	r2, r3
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	609a      	str	r2, [r3, #8]
}
 8014dd4:	bf00      	nop
 8014dd6:	370c      	adds	r7, #12
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dde:	4770      	bx	lr

08014de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8014de0:	b480      	push	{r7}
 8014de2:	b083      	sub	sp, #12
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	689b      	ldr	r3, [r3, #8]
 8014dec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	370c      	adds	r7, #12
 8014df4:	46bd      	mov	sp, r7
 8014df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfa:	4770      	bx	lr

08014dfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b087      	sub	sp, #28
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	60f8      	str	r0, [r7, #12]
 8014e04:	60b9      	str	r1, [r7, #8]
 8014e06:	607a      	str	r2, [r7, #4]
 8014e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	3360      	adds	r3, #96	; 0x60
 8014e0e:	461a      	mov	r2, r3
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	009b      	lsls	r3, r3, #2
 8014e14:	4413      	add	r3, r2
 8014e16:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	430b      	orrs	r3, r1
 8014e2a:	431a      	orrs	r2, r3
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8014e30:	bf00      	nop
 8014e32:	371c      	adds	r7, #28
 8014e34:	46bd      	mov	sp, r7
 8014e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3a:	4770      	bx	lr

08014e3c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8014e3c:	b480      	push	{r7}
 8014e3e:	b085      	sub	sp, #20
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	60f8      	str	r0, [r7, #12]
 8014e44:	60b9      	str	r1, [r7, #8]
 8014e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	691b      	ldr	r3, [r3, #16]
 8014e4c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	f003 031f 	and.w	r3, r3, #31
 8014e56:	6879      	ldr	r1, [r7, #4]
 8014e58:	fa01 f303 	lsl.w	r3, r1, r3
 8014e5c:	431a      	orrs	r2, r3
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	611a      	str	r2, [r3, #16]
}
 8014e62:	bf00      	nop
 8014e64:	3714      	adds	r7, #20
 8014e66:	46bd      	mov	sp, r7
 8014e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6c:	4770      	bx	lr

08014e6e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8014e6e:	b480      	push	{r7}
 8014e70:	b087      	sub	sp, #28
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	60f8      	str	r0, [r7, #12]
 8014e76:	60b9      	str	r1, [r7, #8]
 8014e78:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	3360      	adds	r3, #96	; 0x60
 8014e7e:	461a      	mov	r2, r3
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	009b      	lsls	r3, r3, #2
 8014e84:	4413      	add	r3, r2
 8014e86:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8014e88:	697b      	ldr	r3, [r7, #20]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	431a      	orrs	r2, r3
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	601a      	str	r2, [r3, #0]
  }
}
 8014e98:	bf00      	nop
 8014e9a:	371c      	adds	r7, #28
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea2:	4770      	bx	lr

08014ea4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b087      	sub	sp, #28
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	3330      	adds	r3, #48	; 0x30
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	0a1b      	lsrs	r3, r3, #8
 8014eba:	009b      	lsls	r3, r3, #2
 8014ebc:	f003 030c 	and.w	r3, r3, #12
 8014ec0:	4413      	add	r3, r2
 8014ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	f003 031f 	and.w	r3, r3, #31
 8014ece:	211f      	movs	r1, #31
 8014ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8014ed4:	43db      	mvns	r3, r3
 8014ed6:	401a      	ands	r2, r3
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	0e9b      	lsrs	r3, r3, #26
 8014edc:	f003 011f 	and.w	r1, r3, #31
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	f003 031f 	and.w	r3, r3, #31
 8014ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8014eea:	431a      	orrs	r2, r3
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8014ef0:	bf00      	nop
 8014ef2:	371c      	adds	r7, #28
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr

08014efc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8014efc:	b480      	push	{r7}
 8014efe:	b087      	sub	sp, #28
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	60b9      	str	r1, [r7, #8]
 8014f06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	3314      	adds	r3, #20
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	0e5b      	lsrs	r3, r3, #25
 8014f12:	009b      	lsls	r3, r3, #2
 8014f14:	f003 0304 	and.w	r3, r3, #4
 8014f18:	4413      	add	r3, r2
 8014f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	0d1b      	lsrs	r3, r3, #20
 8014f24:	f003 031f 	and.w	r3, r3, #31
 8014f28:	2107      	movs	r1, #7
 8014f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8014f2e:	43db      	mvns	r3, r3
 8014f30:	401a      	ands	r2, r3
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	0d1b      	lsrs	r3, r3, #20
 8014f36:	f003 031f 	and.w	r3, r3, #31
 8014f3a:	6879      	ldr	r1, [r7, #4]
 8014f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8014f40:	431a      	orrs	r2, r3
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8014f46:	bf00      	nop
 8014f48:	371c      	adds	r7, #28
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f50:	4770      	bx	lr
	...

08014f54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8014f54:	b480      	push	{r7}
 8014f56:	b085      	sub	sp, #20
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	60b9      	str	r1, [r7, #8]
 8014f5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f6c:	43db      	mvns	r3, r3
 8014f6e:	401a      	ands	r2, r3
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f003 0318 	and.w	r3, r3, #24
 8014f76:	4908      	ldr	r1, [pc, #32]	; (8014f98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8014f78:	40d9      	lsrs	r1, r3
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	400b      	ands	r3, r1
 8014f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f82:	431a      	orrs	r2, r3
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8014f8a:	bf00      	nop
 8014f8c:	3714      	adds	r7, #20
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop
 8014f98:	000fffff 	.word	0x000fffff

08014f9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8014f9c:	b480      	push	{r7}
 8014f9e:	b083      	sub	sp, #12
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	689a      	ldr	r2, [r3, #8]
 8014fa8:	4b04      	ldr	r3, [pc, #16]	; (8014fbc <LL_ADC_DisableDeepPowerDown+0x20>)
 8014faa:	4013      	ands	r3, r2
 8014fac:	687a      	ldr	r2, [r7, #4]
 8014fae:	6093      	str	r3, [r2, #8]
}
 8014fb0:	bf00      	nop
 8014fb2:	370c      	adds	r7, #12
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr
 8014fbc:	5fffffc0 	.word	0x5fffffc0

08014fc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8014fc0:	b480      	push	{r7}
 8014fc2:	b083      	sub	sp, #12
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	689b      	ldr	r3, [r3, #8]
 8014fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014fd4:	d101      	bne.n	8014fda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	e000      	b.n	8014fdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8014fda:	2300      	movs	r3, #0
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	370c      	adds	r7, #12
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe6:	4770      	bx	lr

08014fe8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	689a      	ldr	r2, [r3, #8]
 8014ff4:	4b05      	ldr	r3, [pc, #20]	; (801500c <LL_ADC_EnableInternalRegulator+0x24>)
 8014ff6:	4013      	ands	r3, r2
 8014ff8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8015000:	bf00      	nop
 8015002:	370c      	adds	r7, #12
 8015004:	46bd      	mov	sp, r7
 8015006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500a:	4770      	bx	lr
 801500c:	6fffffc0 	.word	0x6fffffc0

08015010 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	689b      	ldr	r3, [r3, #8]
 801501c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015024:	d101      	bne.n	801502a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8015026:	2301      	movs	r3, #1
 8015028:	e000      	b.n	801502c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801502a:	2300      	movs	r3, #0
}
 801502c:	4618      	mov	r0, r3
 801502e:	370c      	adds	r7, #12
 8015030:	46bd      	mov	sp, r7
 8015032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015036:	4770      	bx	lr

08015038 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8015038:	b480      	push	{r7}
 801503a:	b083      	sub	sp, #12
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	689b      	ldr	r3, [r3, #8]
 8015044:	f003 0301 	and.w	r3, r3, #1
 8015048:	2b01      	cmp	r3, #1
 801504a:	d101      	bne.n	8015050 <LL_ADC_IsEnabled+0x18>
 801504c:	2301      	movs	r3, #1
 801504e:	e000      	b.n	8015052 <LL_ADC_IsEnabled+0x1a>
 8015050:	2300      	movs	r3, #0
}
 8015052:	4618      	mov	r0, r3
 8015054:	370c      	adds	r7, #12
 8015056:	46bd      	mov	sp, r7
 8015058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505c:	4770      	bx	lr

0801505e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801505e:	b480      	push	{r7}
 8015060:	b083      	sub	sp, #12
 8015062:	af00      	add	r7, sp, #0
 8015064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	689b      	ldr	r3, [r3, #8]
 801506a:	f003 0304 	and.w	r3, r3, #4
 801506e:	2b04      	cmp	r3, #4
 8015070:	d101      	bne.n	8015076 <LL_ADC_REG_IsConversionOngoing+0x18>
 8015072:	2301      	movs	r3, #1
 8015074:	e000      	b.n	8015078 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8015076:	2300      	movs	r3, #0
}
 8015078:	4618      	mov	r0, r3
 801507a:	370c      	adds	r7, #12
 801507c:	46bd      	mov	sp, r7
 801507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015082:	4770      	bx	lr

08015084 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8015084:	b480      	push	{r7}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	689b      	ldr	r3, [r3, #8]
 8015090:	f003 0308 	and.w	r3, r3, #8
 8015094:	2b08      	cmp	r3, #8
 8015096:	d101      	bne.n	801509c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8015098:	2301      	movs	r3, #1
 801509a:	e000      	b.n	801509e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 801509c:	2300      	movs	r3, #0
}
 801509e:	4618      	mov	r0, r3
 80150a0:	370c      	adds	r7, #12
 80150a2:	46bd      	mov	sp, r7
 80150a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a8:	4770      	bx	lr
	...

080150ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80150ac:	b590      	push	{r4, r7, lr}
 80150ae:	b089      	sub	sp, #36	; 0x24
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80150b4:	2300      	movs	r3, #0
 80150b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80150b8:	2300      	movs	r3, #0
 80150ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d101      	bne.n	80150c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80150c2:	2301      	movs	r3, #1
 80150c4:	e18e      	b.n	80153e4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	68db      	ldr	r3, [r3, #12]
 80150ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d109      	bne.n	80150e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f7fd fc73 	bl	80129c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2200      	movs	r2, #0
 80150de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2200      	movs	r2, #0
 80150e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7ff ff67 	bl	8014fc0 <LL_ADC_IsDeepPowerDownEnabled>
 80150f2:	4603      	mov	r3, r0
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d004      	beq.n	8015102 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7ff ff4d 	bl	8014f9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	4618      	mov	r0, r3
 8015108:	f7ff ff82 	bl	8015010 <LL_ADC_IsInternalRegulatorEnabled>
 801510c:	4603      	mov	r3, r0
 801510e:	2b00      	cmp	r3, #0
 8015110:	d113      	bne.n	801513a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	4618      	mov	r0, r3
 8015118:	f7ff ff66 	bl	8014fe8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 801511c:	4b9a      	ldr	r3, [pc, #616]	; (8015388 <HAL_ADC_Init+0x2dc>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	099b      	lsrs	r3, r3, #6
 8015122:	4a9a      	ldr	r2, [pc, #616]	; (801538c <HAL_ADC_Init+0x2e0>)
 8015124:	fba2 2303 	umull	r2, r3, r2, r3
 8015128:	099b      	lsrs	r3, r3, #6
 801512a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801512c:	e002      	b.n	8015134 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	3b01      	subs	r3, #1
 8015132:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d1f9      	bne.n	801512e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	4618      	mov	r0, r3
 8015140:	f7ff ff66 	bl	8015010 <LL_ADC_IsInternalRegulatorEnabled>
 8015144:	4603      	mov	r3, r0
 8015146:	2b00      	cmp	r3, #0
 8015148:	d10d      	bne.n	8015166 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801514e:	f043 0210 	orr.w	r2, r3, #16
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801515a:	f043 0201 	orr.w	r2, r3, #1
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8015162:	2301      	movs	r3, #1
 8015164:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	4618      	mov	r0, r3
 801516c:	f7ff ff77 	bl	801505e <LL_ADC_REG_IsConversionOngoing>
 8015170:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015176:	f003 0310 	and.w	r3, r3, #16
 801517a:	2b00      	cmp	r3, #0
 801517c:	f040 8129 	bne.w	80153d2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	2b00      	cmp	r3, #0
 8015184:	f040 8125 	bne.w	80153d2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801518c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8015190:	f043 0202 	orr.w	r2, r3, #2
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	4618      	mov	r0, r3
 801519e:	f7ff ff4b 	bl	8015038 <LL_ADC_IsEnabled>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d136      	bne.n	8015216 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	4a78      	ldr	r2, [pc, #480]	; (8015390 <HAL_ADC_Init+0x2e4>)
 80151ae:	4293      	cmp	r3, r2
 80151b0:	d004      	beq.n	80151bc <HAL_ADC_Init+0x110>
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	4a77      	ldr	r2, [pc, #476]	; (8015394 <HAL_ADC_Init+0x2e8>)
 80151b8:	4293      	cmp	r3, r2
 80151ba:	d10e      	bne.n	80151da <HAL_ADC_Init+0x12e>
 80151bc:	4874      	ldr	r0, [pc, #464]	; (8015390 <HAL_ADC_Init+0x2e4>)
 80151be:	f7ff ff3b 	bl	8015038 <LL_ADC_IsEnabled>
 80151c2:	4604      	mov	r4, r0
 80151c4:	4873      	ldr	r0, [pc, #460]	; (8015394 <HAL_ADC_Init+0x2e8>)
 80151c6:	f7ff ff37 	bl	8015038 <LL_ADC_IsEnabled>
 80151ca:	4603      	mov	r3, r0
 80151cc:	4323      	orrs	r3, r4
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	bf0c      	ite	eq
 80151d2:	2301      	moveq	r3, #1
 80151d4:	2300      	movne	r3, #0
 80151d6:	b2db      	uxtb	r3, r3
 80151d8:	e008      	b.n	80151ec <HAL_ADC_Init+0x140>
 80151da:	486f      	ldr	r0, [pc, #444]	; (8015398 <HAL_ADC_Init+0x2ec>)
 80151dc:	f7ff ff2c 	bl	8015038 <LL_ADC_IsEnabled>
 80151e0:	4603      	mov	r3, r0
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	bf0c      	ite	eq
 80151e6:	2301      	moveq	r3, #1
 80151e8:	2300      	movne	r3, #0
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d012      	beq.n	8015216 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	4a66      	ldr	r2, [pc, #408]	; (8015390 <HAL_ADC_Init+0x2e4>)
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d004      	beq.n	8015204 <HAL_ADC_Init+0x158>
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	4a65      	ldr	r2, [pc, #404]	; (8015394 <HAL_ADC_Init+0x2e8>)
 8015200:	4293      	cmp	r3, r2
 8015202:	d101      	bne.n	8015208 <HAL_ADC_Init+0x15c>
 8015204:	4a65      	ldr	r2, [pc, #404]	; (801539c <HAL_ADC_Init+0x2f0>)
 8015206:	e000      	b.n	801520a <HAL_ADC_Init+0x15e>
 8015208:	4a65      	ldr	r2, [pc, #404]	; (80153a0 <HAL_ADC_Init+0x2f4>)
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	4619      	mov	r1, r3
 8015210:	4610      	mov	r0, r2
 8015212:	f7ff fdbf 	bl	8014d94 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8015216:	f7ff fd9b 	bl	8014d50 <HAL_GetREVID>
 801521a:	4602      	mov	r2, r0
 801521c:	f241 0303 	movw	r3, #4099	; 0x1003
 8015220:	429a      	cmp	r2, r3
 8015222:	d914      	bls.n	801524e <HAL_ADC_Init+0x1a2>
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	2b10      	cmp	r3, #16
 801522a:	d110      	bne.n	801524e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	7d5b      	ldrb	r3, [r3, #21]
 8015230:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015236:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 801523c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	7f1b      	ldrb	r3, [r3, #28]
 8015242:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8015244:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015246:	f043 030c 	orr.w	r3, r3, #12
 801524a:	61bb      	str	r3, [r7, #24]
 801524c:	e00d      	b.n	801526a <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	7d5b      	ldrb	r3, [r3, #21]
 8015252:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015258:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 801525e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	7f1b      	ldrb	r3, [r3, #28]
 8015264:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015266:	4313      	orrs	r3, r2
 8015268:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	7f1b      	ldrb	r3, [r3, #28]
 801526e:	2b01      	cmp	r3, #1
 8015270:	d106      	bne.n	8015280 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	6a1b      	ldr	r3, [r3, #32]
 8015276:	3b01      	subs	r3, #1
 8015278:	045b      	lsls	r3, r3, #17
 801527a:	69ba      	ldr	r2, [r7, #24]
 801527c:	4313      	orrs	r3, r2
 801527e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015284:	2b00      	cmp	r3, #0
 8015286:	d009      	beq.n	801529c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801528c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015294:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015296:	69ba      	ldr	r2, [r7, #24]
 8015298:	4313      	orrs	r3, r2
 801529a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	68da      	ldr	r2, [r3, #12]
 80152a2:	4b40      	ldr	r3, [pc, #256]	; (80153a4 <HAL_ADC_Init+0x2f8>)
 80152a4:	4013      	ands	r3, r2
 80152a6:	687a      	ldr	r2, [r7, #4]
 80152a8:	6812      	ldr	r2, [r2, #0]
 80152aa:	69b9      	ldr	r1, [r7, #24]
 80152ac:	430b      	orrs	r3, r1
 80152ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7ff fed2 	bl	801505e <LL_ADC_REG_IsConversionOngoing>
 80152ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	4618      	mov	r0, r3
 80152c2:	f7ff fedf 	bl	8015084 <LL_ADC_INJ_IsConversionOngoing>
 80152c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d14a      	bne.n	8015364 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d147      	bne.n	8015364 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	7d1b      	ldrb	r3, [r3, #20]
 80152d8:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80152de:	4313      	orrs	r3, r2
 80152e0:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	68da      	ldr	r2, [r3, #12]
 80152e8:	4b2f      	ldr	r3, [pc, #188]	; (80153a8 <HAL_ADC_Init+0x2fc>)
 80152ea:	4013      	ands	r3, r2
 80152ec:	687a      	ldr	r2, [r7, #4]
 80152ee:	6812      	ldr	r2, [r2, #0]
 80152f0:	69b9      	ldr	r1, [r7, #24]
 80152f2:	430b      	orrs	r3, r1
 80152f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80152fc:	2b01      	cmp	r3, #1
 80152fe:	d11b      	bne.n	8015338 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015304:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	691a      	ldr	r2, [r3, #16]
 801530c:	4b27      	ldr	r3, [pc, #156]	; (80153ac <HAL_ADC_Init+0x300>)
 801530e:	4013      	ands	r3, r2
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8015314:	3a01      	subs	r2, #1
 8015316:	0411      	lsls	r1, r2, #16
 8015318:	687a      	ldr	r2, [r7, #4]
 801531a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801531c:	4311      	orrs	r1, r2
 801531e:	687a      	ldr	r2, [r7, #4]
 8015320:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8015322:	4311      	orrs	r1, r2
 8015324:	687a      	ldr	r2, [r7, #4]
 8015326:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8015328:	430a      	orrs	r2, r1
 801532a:	431a      	orrs	r2, r3
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	f042 0201 	orr.w	r2, r2, #1
 8015334:	611a      	str	r2, [r3, #16]
 8015336:	e007      	b.n	8015348 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	691a      	ldr	r2, [r3, #16]
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	f022 0201 	bic.w	r2, r2, #1
 8015346:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	691b      	ldr	r3, [r3, #16]
 801534e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	430a      	orrs	r2, r1
 801535c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f000 fb58 	bl	8015a14 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	2b01      	cmp	r3, #1
 801536a:	d121      	bne.n	80153b0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015372:	f023 010f 	bic.w	r1, r3, #15
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	699b      	ldr	r3, [r3, #24]
 801537a:	1e5a      	subs	r2, r3, #1
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	430a      	orrs	r2, r1
 8015382:	631a      	str	r2, [r3, #48]	; 0x30
 8015384:	e01c      	b.n	80153c0 <HAL_ADC_Init+0x314>
 8015386:	bf00      	nop
 8015388:	24000658 	.word	0x24000658
 801538c:	053e2d63 	.word	0x053e2d63
 8015390:	40022000 	.word	0x40022000
 8015394:	40022100 	.word	0x40022100
 8015398:	58026000 	.word	0x58026000
 801539c:	40022300 	.word	0x40022300
 80153a0:	58026300 	.word	0x58026300
 80153a4:	fff0c003 	.word	0xfff0c003
 80153a8:	ffffbffc 	.word	0xffffbffc
 80153ac:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	f022 020f 	bic.w	r2, r2, #15
 80153be:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153c4:	f023 0303 	bic.w	r3, r3, #3
 80153c8:	f043 0201 	orr.w	r2, r3, #1
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	655a      	str	r2, [r3, #84]	; 0x54
 80153d0:	e007      	b.n	80153e2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153d6:	f043 0210 	orr.w	r2, r3, #16
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80153de:	2301      	movs	r3, #1
 80153e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80153e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3724      	adds	r7, #36	; 0x24
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd90      	pop	{r4, r7, pc}

080153ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80153ec:	b590      	push	{r4, r7, lr}
 80153ee:	b099      	sub	sp, #100	; 0x64
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80153f6:	2300      	movs	r3, #0
 80153f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80153fc:	2300      	movs	r3, #0
 80153fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	68db      	ldr	r3, [r3, #12]
 8015404:	4a99      	ldr	r2, [pc, #612]	; (801566c <HAL_ADC_ConfigChannel+0x280>)
 8015406:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801540e:	2b01      	cmp	r3, #1
 8015410:	d101      	bne.n	8015416 <HAL_ADC_ConfigChannel+0x2a>
 8015412:	2302      	movs	r3, #2
 8015414:	e2e6      	b.n	80159e4 <HAL_ADC_ConfigChannel+0x5f8>
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2201      	movs	r2, #1
 801541a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	4618      	mov	r0, r3
 8015424:	f7ff fe1b 	bl	801505e <LL_ADC_REG_IsConversionOngoing>
 8015428:	4603      	mov	r3, r0
 801542a:	2b00      	cmp	r3, #0
 801542c:	f040 82cb 	bne.w	80159c6 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015438:	2b00      	cmp	r3, #0
 801543a:	d108      	bne.n	801544e <HAL_ADC_ConfigChannel+0x62>
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	0e9b      	lsrs	r3, r3, #26
 8015442:	f003 031f 	and.w	r3, r3, #31
 8015446:	2201      	movs	r2, #1
 8015448:	fa02 f303 	lsl.w	r3, r2, r3
 801544c:	e00f      	b.n	801546e <HAL_ADC_ConfigChannel+0x82>
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015456:	fa93 f3a3 	rbit	r3, r3
 801545a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801545c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801545e:	fab3 f383 	clz	r3, r3
 8015462:	b2db      	uxtb	r3, r3
 8015464:	f003 031f 	and.w	r3, r3, #31
 8015468:	2201      	movs	r2, #1
 801546a:	fa02 f303 	lsl.w	r3, r2, r3
 801546e:	687a      	ldr	r2, [r7, #4]
 8015470:	6812      	ldr	r2, [r2, #0]
 8015472:	69d1      	ldr	r1, [r2, #28]
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	6812      	ldr	r2, [r2, #0]
 8015478:	430b      	orrs	r3, r1
 801547a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6818      	ldr	r0, [r3, #0]
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	6859      	ldr	r1, [r3, #4]
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	461a      	mov	r2, r3
 801548a:	f7ff fd0b 	bl	8014ea4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	4618      	mov	r0, r3
 8015494:	f7ff fde3 	bl	801505e <LL_ADC_REG_IsConversionOngoing>
 8015498:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	4618      	mov	r0, r3
 80154a0:	f7ff fdf0 	bl	8015084 <LL_ADC_INJ_IsConversionOngoing>
 80154a4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80154a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	f040 80b3 	bne.w	8015614 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80154ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	f040 80af 	bne.w	8015614 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6818      	ldr	r0, [r3, #0]
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	6819      	ldr	r1, [r3, #0]
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	689b      	ldr	r3, [r3, #8]
 80154c2:	461a      	mov	r2, r3
 80154c4:	f7ff fd1a 	bl	8014efc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80154c8:	4b69      	ldr	r3, [pc, #420]	; (8015670 <HAL_ADC_ConfigChannel+0x284>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80154d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80154d4:	d10b      	bne.n	80154ee <HAL_ADC_ConfigChannel+0x102>
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	695a      	ldr	r2, [r3, #20]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	68db      	ldr	r3, [r3, #12]
 80154e0:	089b      	lsrs	r3, r3, #2
 80154e2:	f003 0307 	and.w	r3, r3, #7
 80154e6:	005b      	lsls	r3, r3, #1
 80154e8:	fa02 f303 	lsl.w	r3, r2, r3
 80154ec:	e01d      	b.n	801552a <HAL_ADC_ConfigChannel+0x13e>
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	f003 0310 	and.w	r3, r3, #16
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d10b      	bne.n	8015514 <HAL_ADC_ConfigChannel+0x128>
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	695a      	ldr	r2, [r3, #20]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	68db      	ldr	r3, [r3, #12]
 8015506:	089b      	lsrs	r3, r3, #2
 8015508:	f003 0307 	and.w	r3, r3, #7
 801550c:	005b      	lsls	r3, r3, #1
 801550e:	fa02 f303 	lsl.w	r3, r2, r3
 8015512:	e00a      	b.n	801552a <HAL_ADC_ConfigChannel+0x13e>
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	695a      	ldr	r2, [r3, #20]
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	68db      	ldr	r3, [r3, #12]
 801551e:	089b      	lsrs	r3, r3, #2
 8015520:	f003 0304 	and.w	r3, r3, #4
 8015524:	005b      	lsls	r3, r3, #1
 8015526:	fa02 f303 	lsl.w	r3, r2, r3
 801552a:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	691b      	ldr	r3, [r3, #16]
 8015530:	2b04      	cmp	r3, #4
 8015532:	d027      	beq.n	8015584 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6818      	ldr	r0, [r3, #0]
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	6919      	ldr	r1, [r3, #16]
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	681a      	ldr	r2, [r3, #0]
 8015540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015542:	f7ff fc5b 	bl	8014dfc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6818      	ldr	r0, [r3, #0]
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	6919      	ldr	r1, [r3, #16]
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	7e5b      	ldrb	r3, [r3, #25]
 8015552:	2b01      	cmp	r3, #1
 8015554:	d102      	bne.n	801555c <HAL_ADC_ConfigChannel+0x170>
 8015556:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801555a:	e000      	b.n	801555e <HAL_ADC_ConfigChannel+0x172>
 801555c:	2300      	movs	r3, #0
 801555e:	461a      	mov	r2, r3
 8015560:	f7ff fc85 	bl	8014e6e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6818      	ldr	r0, [r3, #0]
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	6919      	ldr	r1, [r3, #16]
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	7e1b      	ldrb	r3, [r3, #24]
 8015570:	2b01      	cmp	r3, #1
 8015572:	d102      	bne.n	801557a <HAL_ADC_ConfigChannel+0x18e>
 8015574:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015578:	e000      	b.n	801557c <HAL_ADC_ConfigChannel+0x190>
 801557a:	2300      	movs	r3, #0
 801557c:	461a      	mov	r2, r3
 801557e:	f7ff fc5d 	bl	8014e3c <LL_ADC_SetDataRightShift>
 8015582:	e047      	b.n	8015614 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801558a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801558e:	683b      	ldr	r3, [r7, #0]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	069b      	lsls	r3, r3, #26
 8015594:	429a      	cmp	r2, r3
 8015596:	d107      	bne.n	80155a8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80155a6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80155ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	069b      	lsls	r3, r3, #26
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d107      	bne.n	80155cc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80155ca:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80155d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	069b      	lsls	r3, r3, #26
 80155dc:	429a      	cmp	r2, r3
 80155de:	d107      	bne.n	80155f0 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80155ee:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	069b      	lsls	r3, r3, #26
 8015600:	429a      	cmp	r2, r3
 8015602:	d107      	bne.n	8015614 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8015612:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	4618      	mov	r0, r3
 801561a:	f7ff fd0d 	bl	8015038 <LL_ADC_IsEnabled>
 801561e:	4603      	mov	r3, r0
 8015620:	2b00      	cmp	r3, #0
 8015622:	f040 81d9 	bne.w	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6818      	ldr	r0, [r3, #0]
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	6819      	ldr	r1, [r3, #0]
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	68db      	ldr	r3, [r3, #12]
 8015632:	461a      	mov	r2, r3
 8015634:	f7ff fc8e 	bl	8014f54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	68db      	ldr	r3, [r3, #12]
 801563c:	4a0b      	ldr	r2, [pc, #44]	; (801566c <HAL_ADC_ConfigChannel+0x280>)
 801563e:	4293      	cmp	r3, r2
 8015640:	f040 8101 	bne.w	8015846 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015650:	2b00      	cmp	r3, #0
 8015652:	d10f      	bne.n	8015674 <HAL_ADC_ConfigChannel+0x288>
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	0e9b      	lsrs	r3, r3, #26
 801565a:	3301      	adds	r3, #1
 801565c:	f003 031f 	and.w	r3, r3, #31
 8015660:	2b09      	cmp	r3, #9
 8015662:	bf94      	ite	ls
 8015664:	2301      	movls	r3, #1
 8015666:	2300      	movhi	r3, #0
 8015668:	b2db      	uxtb	r3, r3
 801566a:	e016      	b.n	801569a <HAL_ADC_ConfigChannel+0x2ae>
 801566c:	47ff0000 	.word	0x47ff0000
 8015670:	5c001000 	.word	0x5c001000
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801567a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801567c:	fa93 f3a3 	rbit	r3, r3
 8015680:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8015682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015684:	fab3 f383 	clz	r3, r3
 8015688:	b2db      	uxtb	r3, r3
 801568a:	3301      	adds	r3, #1
 801568c:	f003 031f 	and.w	r3, r3, #31
 8015690:	2b09      	cmp	r3, #9
 8015692:	bf94      	ite	ls
 8015694:	2301      	movls	r3, #1
 8015696:	2300      	movhi	r3, #0
 8015698:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801569a:	2b00      	cmp	r3, #0
 801569c:	d064      	beq.n	8015768 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d107      	bne.n	80156ba <HAL_ADC_ConfigChannel+0x2ce>
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	0e9b      	lsrs	r3, r3, #26
 80156b0:	3301      	adds	r3, #1
 80156b2:	069b      	lsls	r3, r3, #26
 80156b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80156b8:	e00e      	b.n	80156d8 <HAL_ADC_ConfigChannel+0x2ec>
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80156c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156c2:	fa93 f3a3 	rbit	r3, r3
 80156c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80156c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156ca:	fab3 f383 	clz	r3, r3
 80156ce:	b2db      	uxtb	r3, r3
 80156d0:	3301      	adds	r3, #1
 80156d2:	069b      	lsls	r3, r3, #26
 80156d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d109      	bne.n	80156f8 <HAL_ADC_ConfigChannel+0x30c>
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	0e9b      	lsrs	r3, r3, #26
 80156ea:	3301      	adds	r3, #1
 80156ec:	f003 031f 	and.w	r3, r3, #31
 80156f0:	2101      	movs	r1, #1
 80156f2:	fa01 f303 	lsl.w	r3, r1, r3
 80156f6:	e010      	b.n	801571a <HAL_ADC_ConfigChannel+0x32e>
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80156fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015700:	fa93 f3a3 	rbit	r3, r3
 8015704:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8015706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015708:	fab3 f383 	clz	r3, r3
 801570c:	b2db      	uxtb	r3, r3
 801570e:	3301      	adds	r3, #1
 8015710:	f003 031f 	and.w	r3, r3, #31
 8015714:	2101      	movs	r1, #1
 8015716:	fa01 f303 	lsl.w	r3, r1, r3
 801571a:	ea42 0103 	orr.w	r1, r2, r3
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015726:	2b00      	cmp	r3, #0
 8015728:	d10a      	bne.n	8015740 <HAL_ADC_ConfigChannel+0x354>
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	0e9b      	lsrs	r3, r3, #26
 8015730:	3301      	adds	r3, #1
 8015732:	f003 021f 	and.w	r2, r3, #31
 8015736:	4613      	mov	r3, r2
 8015738:	005b      	lsls	r3, r3, #1
 801573a:	4413      	add	r3, r2
 801573c:	051b      	lsls	r3, r3, #20
 801573e:	e011      	b.n	8015764 <HAL_ADC_ConfigChannel+0x378>
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015748:	fa93 f3a3 	rbit	r3, r3
 801574c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 801574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015750:	fab3 f383 	clz	r3, r3
 8015754:	b2db      	uxtb	r3, r3
 8015756:	3301      	adds	r3, #1
 8015758:	f003 021f 	and.w	r2, r3, #31
 801575c:	4613      	mov	r3, r2
 801575e:	005b      	lsls	r3, r3, #1
 8015760:	4413      	add	r3, r2
 8015762:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015764:	430b      	orrs	r3, r1
 8015766:	e069      	b.n	801583c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015770:	2b00      	cmp	r3, #0
 8015772:	d107      	bne.n	8015784 <HAL_ADC_ConfigChannel+0x398>
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	0e9b      	lsrs	r3, r3, #26
 801577a:	3301      	adds	r3, #1
 801577c:	069b      	lsls	r3, r3, #26
 801577e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8015782:	e00e      	b.n	80157a2 <HAL_ADC_ConfigChannel+0x3b6>
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801578a:	6a3b      	ldr	r3, [r7, #32]
 801578c:	fa93 f3a3 	rbit	r3, r3
 8015790:	61fb      	str	r3, [r7, #28]
  return result;
 8015792:	69fb      	ldr	r3, [r7, #28]
 8015794:	fab3 f383 	clz	r3, r3
 8015798:	b2db      	uxtb	r3, r3
 801579a:	3301      	adds	r3, #1
 801579c:	069b      	lsls	r3, r3, #26
 801579e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d109      	bne.n	80157c2 <HAL_ADC_ConfigChannel+0x3d6>
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	0e9b      	lsrs	r3, r3, #26
 80157b4:	3301      	adds	r3, #1
 80157b6:	f003 031f 	and.w	r3, r3, #31
 80157ba:	2101      	movs	r1, #1
 80157bc:	fa01 f303 	lsl.w	r3, r1, r3
 80157c0:	e010      	b.n	80157e4 <HAL_ADC_ConfigChannel+0x3f8>
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80157c8:	69bb      	ldr	r3, [r7, #24]
 80157ca:	fa93 f3a3 	rbit	r3, r3
 80157ce:	617b      	str	r3, [r7, #20]
  return result;
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	fab3 f383 	clz	r3, r3
 80157d6:	b2db      	uxtb	r3, r3
 80157d8:	3301      	adds	r3, #1
 80157da:	f003 031f 	and.w	r3, r3, #31
 80157de:	2101      	movs	r1, #1
 80157e0:	fa01 f303 	lsl.w	r3, r1, r3
 80157e4:	ea42 0103 	orr.w	r1, r2, r3
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d10d      	bne.n	8015810 <HAL_ADC_ConfigChannel+0x424>
 80157f4:	683b      	ldr	r3, [r7, #0]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	0e9b      	lsrs	r3, r3, #26
 80157fa:	3301      	adds	r3, #1
 80157fc:	f003 021f 	and.w	r2, r3, #31
 8015800:	4613      	mov	r3, r2
 8015802:	005b      	lsls	r3, r3, #1
 8015804:	4413      	add	r3, r2
 8015806:	3b1e      	subs	r3, #30
 8015808:	051b      	lsls	r3, r3, #20
 801580a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801580e:	e014      	b.n	801583a <HAL_ADC_ConfigChannel+0x44e>
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015816:	693b      	ldr	r3, [r7, #16]
 8015818:	fa93 f3a3 	rbit	r3, r3
 801581c:	60fb      	str	r3, [r7, #12]
  return result;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	fab3 f383 	clz	r3, r3
 8015824:	b2db      	uxtb	r3, r3
 8015826:	3301      	adds	r3, #1
 8015828:	f003 021f 	and.w	r2, r3, #31
 801582c:	4613      	mov	r3, r2
 801582e:	005b      	lsls	r3, r3, #1
 8015830:	4413      	add	r3, r2
 8015832:	3b1e      	subs	r3, #30
 8015834:	051b      	lsls	r3, r3, #20
 8015836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801583a:	430b      	orrs	r3, r1
 801583c:	683a      	ldr	r2, [r7, #0]
 801583e:	6892      	ldr	r2, [r2, #8]
 8015840:	4619      	mov	r1, r3
 8015842:	f7ff fb5b 	bl	8014efc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	2b00      	cmp	r3, #0
 801584c:	f280 80c4 	bge.w	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	4a65      	ldr	r2, [pc, #404]	; (80159ec <HAL_ADC_ConfigChannel+0x600>)
 8015856:	4293      	cmp	r3, r2
 8015858:	d004      	beq.n	8015864 <HAL_ADC_ConfigChannel+0x478>
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	4a64      	ldr	r2, [pc, #400]	; (80159f0 <HAL_ADC_ConfigChannel+0x604>)
 8015860:	4293      	cmp	r3, r2
 8015862:	d101      	bne.n	8015868 <HAL_ADC_ConfigChannel+0x47c>
 8015864:	4b63      	ldr	r3, [pc, #396]	; (80159f4 <HAL_ADC_ConfigChannel+0x608>)
 8015866:	e000      	b.n	801586a <HAL_ADC_ConfigChannel+0x47e>
 8015868:	4b63      	ldr	r3, [pc, #396]	; (80159f8 <HAL_ADC_ConfigChannel+0x60c>)
 801586a:	4618      	mov	r0, r3
 801586c:	f7ff fab8 	bl	8014de0 <LL_ADC_GetCommonPathInternalCh>
 8015870:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	4a5d      	ldr	r2, [pc, #372]	; (80159ec <HAL_ADC_ConfigChannel+0x600>)
 8015878:	4293      	cmp	r3, r2
 801587a:	d004      	beq.n	8015886 <HAL_ADC_ConfigChannel+0x49a>
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	4a5b      	ldr	r2, [pc, #364]	; (80159f0 <HAL_ADC_ConfigChannel+0x604>)
 8015882:	4293      	cmp	r3, r2
 8015884:	d10e      	bne.n	80158a4 <HAL_ADC_ConfigChannel+0x4b8>
 8015886:	4859      	ldr	r0, [pc, #356]	; (80159ec <HAL_ADC_ConfigChannel+0x600>)
 8015888:	f7ff fbd6 	bl	8015038 <LL_ADC_IsEnabled>
 801588c:	4604      	mov	r4, r0
 801588e:	4858      	ldr	r0, [pc, #352]	; (80159f0 <HAL_ADC_ConfigChannel+0x604>)
 8015890:	f7ff fbd2 	bl	8015038 <LL_ADC_IsEnabled>
 8015894:	4603      	mov	r3, r0
 8015896:	4323      	orrs	r3, r4
 8015898:	2b00      	cmp	r3, #0
 801589a:	bf0c      	ite	eq
 801589c:	2301      	moveq	r3, #1
 801589e:	2300      	movne	r3, #0
 80158a0:	b2db      	uxtb	r3, r3
 80158a2:	e008      	b.n	80158b6 <HAL_ADC_ConfigChannel+0x4ca>
 80158a4:	4855      	ldr	r0, [pc, #340]	; (80159fc <HAL_ADC_ConfigChannel+0x610>)
 80158a6:	f7ff fbc7 	bl	8015038 <LL_ADC_IsEnabled>
 80158aa:	4603      	mov	r3, r0
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	bf0c      	ite	eq
 80158b0:	2301      	moveq	r3, #1
 80158b2:	2300      	movne	r3, #0
 80158b4:	b2db      	uxtb	r3, r3
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d07b      	beq.n	80159b2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	4a50      	ldr	r2, [pc, #320]	; (8015a00 <HAL_ADC_ConfigChannel+0x614>)
 80158c0:	4293      	cmp	r3, r2
 80158c2:	d12e      	bne.n	8015922 <HAL_ADC_ConfigChannel+0x536>
 80158c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80158c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d129      	bne.n	8015922 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	4a4a      	ldr	r2, [pc, #296]	; (80159fc <HAL_ADC_ConfigChannel+0x610>)
 80158d4:	4293      	cmp	r3, r2
 80158d6:	d17f      	bne.n	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	4a43      	ldr	r2, [pc, #268]	; (80159ec <HAL_ADC_ConfigChannel+0x600>)
 80158de:	4293      	cmp	r3, r2
 80158e0:	d004      	beq.n	80158ec <HAL_ADC_ConfigChannel+0x500>
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	4a42      	ldr	r2, [pc, #264]	; (80159f0 <HAL_ADC_ConfigChannel+0x604>)
 80158e8:	4293      	cmp	r3, r2
 80158ea:	d101      	bne.n	80158f0 <HAL_ADC_ConfigChannel+0x504>
 80158ec:	4a41      	ldr	r2, [pc, #260]	; (80159f4 <HAL_ADC_ConfigChannel+0x608>)
 80158ee:	e000      	b.n	80158f2 <HAL_ADC_ConfigChannel+0x506>
 80158f0:	4a41      	ldr	r2, [pc, #260]	; (80159f8 <HAL_ADC_ConfigChannel+0x60c>)
 80158f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80158f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80158f8:	4619      	mov	r1, r3
 80158fa:	4610      	mov	r0, r2
 80158fc:	f7ff fa5d 	bl	8014dba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8015900:	4b40      	ldr	r3, [pc, #256]	; (8015a04 <HAL_ADC_ConfigChannel+0x618>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	099b      	lsrs	r3, r3, #6
 8015906:	4a40      	ldr	r2, [pc, #256]	; (8015a08 <HAL_ADC_ConfigChannel+0x61c>)
 8015908:	fba2 2303 	umull	r2, r3, r2, r3
 801590c:	099b      	lsrs	r3, r3, #6
 801590e:	005b      	lsls	r3, r3, #1
 8015910:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8015912:	e002      	b.n	801591a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	3b01      	subs	r3, #1
 8015918:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d1f9      	bne.n	8015914 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8015920:	e05a      	b.n	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	4a39      	ldr	r2, [pc, #228]	; (8015a0c <HAL_ADC_ConfigChannel+0x620>)
 8015928:	4293      	cmp	r3, r2
 801592a:	d11e      	bne.n	801596a <HAL_ADC_ConfigChannel+0x57e>
 801592c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801592e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015932:	2b00      	cmp	r3, #0
 8015934:	d119      	bne.n	801596a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	4a30      	ldr	r2, [pc, #192]	; (80159fc <HAL_ADC_ConfigChannel+0x610>)
 801593c:	4293      	cmp	r3, r2
 801593e:	d14b      	bne.n	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	4a29      	ldr	r2, [pc, #164]	; (80159ec <HAL_ADC_ConfigChannel+0x600>)
 8015946:	4293      	cmp	r3, r2
 8015948:	d004      	beq.n	8015954 <HAL_ADC_ConfigChannel+0x568>
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	4a28      	ldr	r2, [pc, #160]	; (80159f0 <HAL_ADC_ConfigChannel+0x604>)
 8015950:	4293      	cmp	r3, r2
 8015952:	d101      	bne.n	8015958 <HAL_ADC_ConfigChannel+0x56c>
 8015954:	4a27      	ldr	r2, [pc, #156]	; (80159f4 <HAL_ADC_ConfigChannel+0x608>)
 8015956:	e000      	b.n	801595a <HAL_ADC_ConfigChannel+0x56e>
 8015958:	4a27      	ldr	r2, [pc, #156]	; (80159f8 <HAL_ADC_ConfigChannel+0x60c>)
 801595a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801595c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015960:	4619      	mov	r1, r3
 8015962:	4610      	mov	r0, r2
 8015964:	f7ff fa29 	bl	8014dba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8015968:	e036      	b.n	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801596a:	683b      	ldr	r3, [r7, #0]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	4a28      	ldr	r2, [pc, #160]	; (8015a10 <HAL_ADC_ConfigChannel+0x624>)
 8015970:	4293      	cmp	r3, r2
 8015972:	d131      	bne.n	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
 8015974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801597a:	2b00      	cmp	r3, #0
 801597c:	d12c      	bne.n	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	4a1e      	ldr	r2, [pc, #120]	; (80159fc <HAL_ADC_ConfigChannel+0x610>)
 8015984:	4293      	cmp	r3, r2
 8015986:	d127      	bne.n	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	4a17      	ldr	r2, [pc, #92]	; (80159ec <HAL_ADC_ConfigChannel+0x600>)
 801598e:	4293      	cmp	r3, r2
 8015990:	d004      	beq.n	801599c <HAL_ADC_ConfigChannel+0x5b0>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	4a16      	ldr	r2, [pc, #88]	; (80159f0 <HAL_ADC_ConfigChannel+0x604>)
 8015998:	4293      	cmp	r3, r2
 801599a:	d101      	bne.n	80159a0 <HAL_ADC_ConfigChannel+0x5b4>
 801599c:	4a15      	ldr	r2, [pc, #84]	; (80159f4 <HAL_ADC_ConfigChannel+0x608>)
 801599e:	e000      	b.n	80159a2 <HAL_ADC_ConfigChannel+0x5b6>
 80159a0:	4a15      	ldr	r2, [pc, #84]	; (80159f8 <HAL_ADC_ConfigChannel+0x60c>)
 80159a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80159a8:	4619      	mov	r1, r3
 80159aa:	4610      	mov	r0, r2
 80159ac:	f7ff fa05 	bl	8014dba <LL_ADC_SetCommonPathInternalCh>
 80159b0:	e012      	b.n	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159b6:	f043 0220 	orr.w	r2, r3, #32
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80159be:	2301      	movs	r3, #1
 80159c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80159c4:	e008      	b.n	80159d8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159ca:	f043 0220 	orr.w	r2, r3, #32
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80159d2:	2301      	movs	r3, #1
 80159d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	2200      	movs	r2, #0
 80159dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80159e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	3764      	adds	r7, #100	; 0x64
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd90      	pop	{r4, r7, pc}
 80159ec:	40022000 	.word	0x40022000
 80159f0:	40022100 	.word	0x40022100
 80159f4:	40022300 	.word	0x40022300
 80159f8:	58026300 	.word	0x58026300
 80159fc:	58026000 	.word	0x58026000
 8015a00:	cb840000 	.word	0xcb840000
 8015a04:	24000658 	.word	0x24000658
 8015a08:	053e2d63 	.word	0x053e2d63
 8015a0c:	c7520000 	.word	0xc7520000
 8015a10:	cfb80000 	.word	0xcfb80000

08015a14 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b084      	sub	sp, #16
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	4a70      	ldr	r2, [pc, #448]	; (8015be4 <ADC_ConfigureBoostMode+0x1d0>)
 8015a22:	4293      	cmp	r3, r2
 8015a24:	d004      	beq.n	8015a30 <ADC_ConfigureBoostMode+0x1c>
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	4a6f      	ldr	r2, [pc, #444]	; (8015be8 <ADC_ConfigureBoostMode+0x1d4>)
 8015a2c:	4293      	cmp	r3, r2
 8015a2e:	d109      	bne.n	8015a44 <ADC_ConfigureBoostMode+0x30>
 8015a30:	4b6e      	ldr	r3, [pc, #440]	; (8015bec <ADC_ConfigureBoostMode+0x1d8>)
 8015a32:	689b      	ldr	r3, [r3, #8]
 8015a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	bf14      	ite	ne
 8015a3c:	2301      	movne	r3, #1
 8015a3e:	2300      	moveq	r3, #0
 8015a40:	b2db      	uxtb	r3, r3
 8015a42:	e008      	b.n	8015a56 <ADC_ConfigureBoostMode+0x42>
 8015a44:	4b6a      	ldr	r3, [pc, #424]	; (8015bf0 <ADC_ConfigureBoostMode+0x1dc>)
 8015a46:	689b      	ldr	r3, [r3, #8]
 8015a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	bf14      	ite	ne
 8015a50:	2301      	movne	r3, #1
 8015a52:	2300      	moveq	r3, #0
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d01a      	beq.n	8015a90 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8015a5a:	f006 fbff 	bl	801c25c <HAL_RCC_GetHCLKFreq>
 8015a5e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	685b      	ldr	r3, [r3, #4]
 8015a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015a68:	d006      	beq.n	8015a78 <ADC_ConfigureBoostMode+0x64>
 8015a6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015a6e:	d00b      	beq.n	8015a88 <ADC_ConfigureBoostMode+0x74>
 8015a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a74:	d000      	beq.n	8015a78 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8015a76:	e05d      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	0c1b      	lsrs	r3, r3, #16
 8015a7e:	68fa      	ldr	r2, [r7, #12]
 8015a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a84:	60fb      	str	r3, [r7, #12]
        break;
 8015a86:	e055      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	089b      	lsrs	r3, r3, #2
 8015a8c:	60fb      	str	r3, [r7, #12]
        break;
 8015a8e:	e051      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8015a90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8015a94:	f007 fb6e 	bl	801d174 <HAL_RCCEx_GetPeriphCLKFreq>
 8015a98:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	685b      	ldr	r3, [r3, #4]
 8015a9e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8015aa2:	d02a      	beq.n	8015afa <ADC_ConfigureBoostMode+0xe6>
 8015aa4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8015aa8:	d813      	bhi.n	8015ad2 <ADC_ConfigureBoostMode+0xbe>
 8015aaa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8015aae:	d024      	beq.n	8015afa <ADC_ConfigureBoostMode+0xe6>
 8015ab0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8015ab4:	d806      	bhi.n	8015ac4 <ADC_ConfigureBoostMode+0xb0>
 8015ab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015aba:	d01e      	beq.n	8015afa <ADC_ConfigureBoostMode+0xe6>
 8015abc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8015ac0:	d01b      	beq.n	8015afa <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8015ac2:	e037      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8015ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015ac8:	d017      	beq.n	8015afa <ADC_ConfigureBoostMode+0xe6>
 8015aca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8015ace:	d014      	beq.n	8015afa <ADC_ConfigureBoostMode+0xe6>
        break;
 8015ad0:	e030      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8015ad2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8015ad6:	d021      	beq.n	8015b1c <ADC_ConfigureBoostMode+0x108>
 8015ad8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8015adc:	d806      	bhi.n	8015aec <ADC_ConfigureBoostMode+0xd8>
 8015ade:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8015ae2:	d013      	beq.n	8015b0c <ADC_ConfigureBoostMode+0xf8>
 8015ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015ae8:	d014      	beq.n	8015b14 <ADC_ConfigureBoostMode+0x100>
        break;
 8015aea:	e023      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8015aec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8015af0:	d018      	beq.n	8015b24 <ADC_ConfigureBoostMode+0x110>
 8015af2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8015af6:	d019      	beq.n	8015b2c <ADC_ConfigureBoostMode+0x118>
        break;
 8015af8:	e01c      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	685b      	ldr	r3, [r3, #4]
 8015afe:	0c9b      	lsrs	r3, r3, #18
 8015b00:	005b      	lsls	r3, r3, #1
 8015b02:	68fa      	ldr	r2, [r7, #12]
 8015b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b08:	60fb      	str	r3, [r7, #12]
        break;
 8015b0a:	e013      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	091b      	lsrs	r3, r3, #4
 8015b10:	60fb      	str	r3, [r7, #12]
        break;
 8015b12:	e00f      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	095b      	lsrs	r3, r3, #5
 8015b18:	60fb      	str	r3, [r7, #12]
        break;
 8015b1a:	e00b      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	099b      	lsrs	r3, r3, #6
 8015b20:	60fb      	str	r3, [r7, #12]
        break;
 8015b22:	e007      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	09db      	lsrs	r3, r3, #7
 8015b28:	60fb      	str	r3, [r7, #12]
        break;
 8015b2a:	e003      	b.n	8015b34 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	0a1b      	lsrs	r3, r3, #8
 8015b30:	60fb      	str	r3, [r7, #12]
        break;
 8015b32:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8015b34:	f7ff f90c 	bl	8014d50 <HAL_GetREVID>
 8015b38:	4602      	mov	r2, r0
 8015b3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	d815      	bhi.n	8015b6e <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	4a2b      	ldr	r2, [pc, #172]	; (8015bf4 <ADC_ConfigureBoostMode+0x1e0>)
 8015b46:	4293      	cmp	r3, r2
 8015b48:	d908      	bls.n	8015b5c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	689a      	ldr	r2, [r3, #8]
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015b58:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8015b5a:	e03e      	b.n	8015bda <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	689a      	ldr	r2, [r3, #8]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015b6a:	609a      	str	r2, [r3, #8]
}
 8015b6c:	e035      	b.n	8015bda <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	085b      	lsrs	r3, r3, #1
 8015b72:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	4a20      	ldr	r2, [pc, #128]	; (8015bf8 <ADC_ConfigureBoostMode+0x1e4>)
 8015b78:	4293      	cmp	r3, r2
 8015b7a:	d808      	bhi.n	8015b8e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	689a      	ldr	r2, [r3, #8]
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8015b8a:	609a      	str	r2, [r3, #8]
}
 8015b8c:	e025      	b.n	8015bda <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	4a1a      	ldr	r2, [pc, #104]	; (8015bfc <ADC_ConfigureBoostMode+0x1e8>)
 8015b92:	4293      	cmp	r3, r2
 8015b94:	d80a      	bhi.n	8015bac <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	689b      	ldr	r3, [r3, #8]
 8015b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015ba8:	609a      	str	r2, [r3, #8]
}
 8015baa:	e016      	b.n	8015bda <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	4a14      	ldr	r2, [pc, #80]	; (8015c00 <ADC_ConfigureBoostMode+0x1ec>)
 8015bb0:	4293      	cmp	r3, r2
 8015bb2:	d80a      	bhi.n	8015bca <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	689b      	ldr	r3, [r3, #8]
 8015bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015bc6:	609a      	str	r2, [r3, #8]
}
 8015bc8:	e007      	b.n	8015bda <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	689a      	ldr	r2, [r3, #8]
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8015bd8:	609a      	str	r2, [r3, #8]
}
 8015bda:	bf00      	nop
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
 8015be2:	bf00      	nop
 8015be4:	40022000 	.word	0x40022000
 8015be8:	40022100 	.word	0x40022100
 8015bec:	40022300 	.word	0x40022300
 8015bf0:	58026300 	.word	0x58026300
 8015bf4:	01312d00 	.word	0x01312d00
 8015bf8:	005f5e10 	.word	0x005f5e10
 8015bfc:	00bebc20 	.word	0x00bebc20
 8015c00:	017d7840 	.word	0x017d7840

08015c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015c04:	b480      	push	{r7}
 8015c06:	b085      	sub	sp, #20
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f003 0307 	and.w	r3, r3, #7
 8015c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015c14:	4b0b      	ldr	r3, [pc, #44]	; (8015c44 <__NVIC_SetPriorityGrouping+0x40>)
 8015c16:	68db      	ldr	r3, [r3, #12]
 8015c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015c1a:	68ba      	ldr	r2, [r7, #8]
 8015c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015c20:	4013      	ands	r3, r2
 8015c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8015c2c:	4b06      	ldr	r3, [pc, #24]	; (8015c48 <__NVIC_SetPriorityGrouping+0x44>)
 8015c2e:	4313      	orrs	r3, r2
 8015c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015c32:	4a04      	ldr	r2, [pc, #16]	; (8015c44 <__NVIC_SetPriorityGrouping+0x40>)
 8015c34:	68bb      	ldr	r3, [r7, #8]
 8015c36:	60d3      	str	r3, [r2, #12]
}
 8015c38:	bf00      	nop
 8015c3a:	3714      	adds	r7, #20
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c42:	4770      	bx	lr
 8015c44:	e000ed00 	.word	0xe000ed00
 8015c48:	05fa0000 	.word	0x05fa0000

08015c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015c4c:	b480      	push	{r7}
 8015c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015c50:	4b04      	ldr	r3, [pc, #16]	; (8015c64 <__NVIC_GetPriorityGrouping+0x18>)
 8015c52:	68db      	ldr	r3, [r3, #12]
 8015c54:	0a1b      	lsrs	r3, r3, #8
 8015c56:	f003 0307 	and.w	r3, r3, #7
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c62:	4770      	bx	lr
 8015c64:	e000ed00 	.word	0xe000ed00

08015c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015c68:	b480      	push	{r7}
 8015c6a:	b083      	sub	sp, #12
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	4603      	mov	r3, r0
 8015c70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	db0b      	blt.n	8015c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015c7a:	88fb      	ldrh	r3, [r7, #6]
 8015c7c:	f003 021f 	and.w	r2, r3, #31
 8015c80:	4907      	ldr	r1, [pc, #28]	; (8015ca0 <__NVIC_EnableIRQ+0x38>)
 8015c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c86:	095b      	lsrs	r3, r3, #5
 8015c88:	2001      	movs	r0, #1
 8015c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8015c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8015c92:	bf00      	nop
 8015c94:	370c      	adds	r7, #12
 8015c96:	46bd      	mov	sp, r7
 8015c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9c:	4770      	bx	lr
 8015c9e:	bf00      	nop
 8015ca0:	e000e100 	.word	0xe000e100

08015ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015ca4:	b480      	push	{r7}
 8015ca6:	b083      	sub	sp, #12
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	4603      	mov	r3, r0
 8015cac:	6039      	str	r1, [r7, #0]
 8015cae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	db0a      	blt.n	8015cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	b2da      	uxtb	r2, r3
 8015cbc:	490c      	ldr	r1, [pc, #48]	; (8015cf0 <__NVIC_SetPriority+0x4c>)
 8015cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015cc2:	0112      	lsls	r2, r2, #4
 8015cc4:	b2d2      	uxtb	r2, r2
 8015cc6:	440b      	add	r3, r1
 8015cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015ccc:	e00a      	b.n	8015ce4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	b2da      	uxtb	r2, r3
 8015cd2:	4908      	ldr	r1, [pc, #32]	; (8015cf4 <__NVIC_SetPriority+0x50>)
 8015cd4:	88fb      	ldrh	r3, [r7, #6]
 8015cd6:	f003 030f 	and.w	r3, r3, #15
 8015cda:	3b04      	subs	r3, #4
 8015cdc:	0112      	lsls	r2, r2, #4
 8015cde:	b2d2      	uxtb	r2, r2
 8015ce0:	440b      	add	r3, r1
 8015ce2:	761a      	strb	r2, [r3, #24]
}
 8015ce4:	bf00      	nop
 8015ce6:	370c      	adds	r7, #12
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cee:	4770      	bx	lr
 8015cf0:	e000e100 	.word	0xe000e100
 8015cf4:	e000ed00 	.word	0xe000ed00

08015cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015cf8:	b480      	push	{r7}
 8015cfa:	b089      	sub	sp, #36	; 0x24
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	60f8      	str	r0, [r7, #12]
 8015d00:	60b9      	str	r1, [r7, #8]
 8015d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	f003 0307 	and.w	r3, r3, #7
 8015d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015d0c:	69fb      	ldr	r3, [r7, #28]
 8015d0e:	f1c3 0307 	rsb	r3, r3, #7
 8015d12:	2b04      	cmp	r3, #4
 8015d14:	bf28      	it	cs
 8015d16:	2304      	movcs	r3, #4
 8015d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	3304      	adds	r3, #4
 8015d1e:	2b06      	cmp	r3, #6
 8015d20:	d902      	bls.n	8015d28 <NVIC_EncodePriority+0x30>
 8015d22:	69fb      	ldr	r3, [r7, #28]
 8015d24:	3b03      	subs	r3, #3
 8015d26:	e000      	b.n	8015d2a <NVIC_EncodePriority+0x32>
 8015d28:	2300      	movs	r3, #0
 8015d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	fa02 f303 	lsl.w	r3, r2, r3
 8015d36:	43da      	mvns	r2, r3
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	401a      	ands	r2, r3
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015d40:	f04f 31ff 	mov.w	r1, #4294967295
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	fa01 f303 	lsl.w	r3, r1, r3
 8015d4a:	43d9      	mvns	r1, r3
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015d50:	4313      	orrs	r3, r2
         );
}
 8015d52:	4618      	mov	r0, r3
 8015d54:	3724      	adds	r7, #36	; 0x24
 8015d56:	46bd      	mov	sp, r7
 8015d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5c:	4770      	bx	lr

08015d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015d5e:	b580      	push	{r7, lr}
 8015d60:	b082      	sub	sp, #8
 8015d62:	af00      	add	r7, sp, #0
 8015d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f7ff ff4c 	bl	8015c04 <__NVIC_SetPriorityGrouping>
}
 8015d6c:	bf00      	nop
 8015d6e:	3708      	adds	r7, #8
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}

08015d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b086      	sub	sp, #24
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	60b9      	str	r1, [r7, #8]
 8015d7e:	607a      	str	r2, [r7, #4]
 8015d80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8015d82:	f7ff ff63 	bl	8015c4c <__NVIC_GetPriorityGrouping>
 8015d86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015d88:	687a      	ldr	r2, [r7, #4]
 8015d8a:	68b9      	ldr	r1, [r7, #8]
 8015d8c:	6978      	ldr	r0, [r7, #20]
 8015d8e:	f7ff ffb3 	bl	8015cf8 <NVIC_EncodePriority>
 8015d92:	4602      	mov	r2, r0
 8015d94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015d98:	4611      	mov	r1, r2
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7ff ff82 	bl	8015ca4 <__NVIC_SetPriority>
}
 8015da0:	bf00      	nop
 8015da2:	3718      	adds	r7, #24
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}

08015da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b082      	sub	sp, #8
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	4603      	mov	r3, r0
 8015db0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7ff ff56 	bl	8015c68 <__NVIC_EnableIRQ>
}
 8015dbc:	bf00      	nop
 8015dbe:	3708      	adds	r7, #8
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}

08015dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b086      	sub	sp, #24
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8015dcc:	f7fe ff92 	bl	8014cf4 <HAL_GetTick>
 8015dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d101      	bne.n	8015ddc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8015dd8:	2301      	movs	r3, #1
 8015dda:	e316      	b.n	801640a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	4a66      	ldr	r2, [pc, #408]	; (8015f7c <HAL_DMA_Init+0x1b8>)
 8015de2:	4293      	cmp	r3, r2
 8015de4:	d04a      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	4a65      	ldr	r2, [pc, #404]	; (8015f80 <HAL_DMA_Init+0x1bc>)
 8015dec:	4293      	cmp	r3, r2
 8015dee:	d045      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	4a63      	ldr	r2, [pc, #396]	; (8015f84 <HAL_DMA_Init+0x1c0>)
 8015df6:	4293      	cmp	r3, r2
 8015df8:	d040      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	4a62      	ldr	r2, [pc, #392]	; (8015f88 <HAL_DMA_Init+0x1c4>)
 8015e00:	4293      	cmp	r3, r2
 8015e02:	d03b      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	4a60      	ldr	r2, [pc, #384]	; (8015f8c <HAL_DMA_Init+0x1c8>)
 8015e0a:	4293      	cmp	r3, r2
 8015e0c:	d036      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	4a5f      	ldr	r2, [pc, #380]	; (8015f90 <HAL_DMA_Init+0x1cc>)
 8015e14:	4293      	cmp	r3, r2
 8015e16:	d031      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	4a5d      	ldr	r2, [pc, #372]	; (8015f94 <HAL_DMA_Init+0x1d0>)
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	d02c      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	4a5c      	ldr	r2, [pc, #368]	; (8015f98 <HAL_DMA_Init+0x1d4>)
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	d027      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	4a5a      	ldr	r2, [pc, #360]	; (8015f9c <HAL_DMA_Init+0x1d8>)
 8015e32:	4293      	cmp	r3, r2
 8015e34:	d022      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	4a59      	ldr	r2, [pc, #356]	; (8015fa0 <HAL_DMA_Init+0x1dc>)
 8015e3c:	4293      	cmp	r3, r2
 8015e3e:	d01d      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	4a57      	ldr	r2, [pc, #348]	; (8015fa4 <HAL_DMA_Init+0x1e0>)
 8015e46:	4293      	cmp	r3, r2
 8015e48:	d018      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	4a56      	ldr	r2, [pc, #344]	; (8015fa8 <HAL_DMA_Init+0x1e4>)
 8015e50:	4293      	cmp	r3, r2
 8015e52:	d013      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	4a54      	ldr	r2, [pc, #336]	; (8015fac <HAL_DMA_Init+0x1e8>)
 8015e5a:	4293      	cmp	r3, r2
 8015e5c:	d00e      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	4a53      	ldr	r2, [pc, #332]	; (8015fb0 <HAL_DMA_Init+0x1ec>)
 8015e64:	4293      	cmp	r3, r2
 8015e66:	d009      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	4a51      	ldr	r2, [pc, #324]	; (8015fb4 <HAL_DMA_Init+0x1f0>)
 8015e6e:	4293      	cmp	r3, r2
 8015e70:	d004      	beq.n	8015e7c <HAL_DMA_Init+0xb8>
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	4a50      	ldr	r2, [pc, #320]	; (8015fb8 <HAL_DMA_Init+0x1f4>)
 8015e78:	4293      	cmp	r3, r2
 8015e7a:	d101      	bne.n	8015e80 <HAL_DMA_Init+0xbc>
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	e000      	b.n	8015e82 <HAL_DMA_Init+0xbe>
 8015e80:	2300      	movs	r3, #0
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	f000 813b 	beq.w	80160fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2202      	movs	r2, #2
 8015e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	4a37      	ldr	r2, [pc, #220]	; (8015f7c <HAL_DMA_Init+0x1b8>)
 8015e9e:	4293      	cmp	r3, r2
 8015ea0:	d04a      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	4a36      	ldr	r2, [pc, #216]	; (8015f80 <HAL_DMA_Init+0x1bc>)
 8015ea8:	4293      	cmp	r3, r2
 8015eaa:	d045      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	4a34      	ldr	r2, [pc, #208]	; (8015f84 <HAL_DMA_Init+0x1c0>)
 8015eb2:	4293      	cmp	r3, r2
 8015eb4:	d040      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	4a33      	ldr	r2, [pc, #204]	; (8015f88 <HAL_DMA_Init+0x1c4>)
 8015ebc:	4293      	cmp	r3, r2
 8015ebe:	d03b      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	4a31      	ldr	r2, [pc, #196]	; (8015f8c <HAL_DMA_Init+0x1c8>)
 8015ec6:	4293      	cmp	r3, r2
 8015ec8:	d036      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	4a30      	ldr	r2, [pc, #192]	; (8015f90 <HAL_DMA_Init+0x1cc>)
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	d031      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	4a2e      	ldr	r2, [pc, #184]	; (8015f94 <HAL_DMA_Init+0x1d0>)
 8015eda:	4293      	cmp	r3, r2
 8015edc:	d02c      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4a2d      	ldr	r2, [pc, #180]	; (8015f98 <HAL_DMA_Init+0x1d4>)
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	d027      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	4a2b      	ldr	r2, [pc, #172]	; (8015f9c <HAL_DMA_Init+0x1d8>)
 8015eee:	4293      	cmp	r3, r2
 8015ef0:	d022      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4a2a      	ldr	r2, [pc, #168]	; (8015fa0 <HAL_DMA_Init+0x1dc>)
 8015ef8:	4293      	cmp	r3, r2
 8015efa:	d01d      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	4a28      	ldr	r2, [pc, #160]	; (8015fa4 <HAL_DMA_Init+0x1e0>)
 8015f02:	4293      	cmp	r3, r2
 8015f04:	d018      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	4a27      	ldr	r2, [pc, #156]	; (8015fa8 <HAL_DMA_Init+0x1e4>)
 8015f0c:	4293      	cmp	r3, r2
 8015f0e:	d013      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	4a25      	ldr	r2, [pc, #148]	; (8015fac <HAL_DMA_Init+0x1e8>)
 8015f16:	4293      	cmp	r3, r2
 8015f18:	d00e      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	4a24      	ldr	r2, [pc, #144]	; (8015fb0 <HAL_DMA_Init+0x1ec>)
 8015f20:	4293      	cmp	r3, r2
 8015f22:	d009      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	4a22      	ldr	r2, [pc, #136]	; (8015fb4 <HAL_DMA_Init+0x1f0>)
 8015f2a:	4293      	cmp	r3, r2
 8015f2c:	d004      	beq.n	8015f38 <HAL_DMA_Init+0x174>
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	4a21      	ldr	r2, [pc, #132]	; (8015fb8 <HAL_DMA_Init+0x1f4>)
 8015f34:	4293      	cmp	r3, r2
 8015f36:	d108      	bne.n	8015f4a <HAL_DMA_Init+0x186>
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	f022 0201 	bic.w	r2, r2, #1
 8015f46:	601a      	str	r2, [r3, #0]
 8015f48:	e007      	b.n	8015f5a <HAL_DMA_Init+0x196>
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	f022 0201 	bic.w	r2, r2, #1
 8015f58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8015f5a:	e02f      	b.n	8015fbc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015f5c:	f7fe feca 	bl	8014cf4 <HAL_GetTick>
 8015f60:	4602      	mov	r2, r0
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	1ad3      	subs	r3, r2, r3
 8015f66:	2b05      	cmp	r3, #5
 8015f68:	d928      	bls.n	8015fbc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2220      	movs	r2, #32
 8015f6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2203      	movs	r2, #3
 8015f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8015f78:	2301      	movs	r3, #1
 8015f7a:	e246      	b.n	801640a <HAL_DMA_Init+0x646>
 8015f7c:	40020010 	.word	0x40020010
 8015f80:	40020028 	.word	0x40020028
 8015f84:	40020040 	.word	0x40020040
 8015f88:	40020058 	.word	0x40020058
 8015f8c:	40020070 	.word	0x40020070
 8015f90:	40020088 	.word	0x40020088
 8015f94:	400200a0 	.word	0x400200a0
 8015f98:	400200b8 	.word	0x400200b8
 8015f9c:	40020410 	.word	0x40020410
 8015fa0:	40020428 	.word	0x40020428
 8015fa4:	40020440 	.word	0x40020440
 8015fa8:	40020458 	.word	0x40020458
 8015fac:	40020470 	.word	0x40020470
 8015fb0:	40020488 	.word	0x40020488
 8015fb4:	400204a0 	.word	0x400204a0
 8015fb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	f003 0301 	and.w	r3, r3, #1
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d1c8      	bne.n	8015f5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015fd2:	697a      	ldr	r2, [r7, #20]
 8015fd4:	4b83      	ldr	r3, [pc, #524]	; (80161e4 <HAL_DMA_Init+0x420>)
 8015fd6:	4013      	ands	r3, r2
 8015fd8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8015fe2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	699b      	ldr	r3, [r3, #24]
 8015ff4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015ffa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	6a1b      	ldr	r3, [r3, #32]
 8016000:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8016002:	697a      	ldr	r2, [r7, #20]
 8016004:	4313      	orrs	r3, r2
 8016006:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801600c:	2b04      	cmp	r3, #4
 801600e:	d107      	bne.n	8016020 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016018:	4313      	orrs	r3, r2
 801601a:	697a      	ldr	r2, [r7, #20]
 801601c:	4313      	orrs	r3, r2
 801601e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8016020:	4b71      	ldr	r3, [pc, #452]	; (80161e8 <HAL_DMA_Init+0x424>)
 8016022:	681a      	ldr	r2, [r3, #0]
 8016024:	4b71      	ldr	r3, [pc, #452]	; (80161ec <HAL_DMA_Init+0x428>)
 8016026:	4013      	ands	r3, r2
 8016028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801602c:	d328      	bcc.n	8016080 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	2b28      	cmp	r3, #40	; 0x28
 8016034:	d903      	bls.n	801603e <HAL_DMA_Init+0x27a>
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	2b2e      	cmp	r3, #46	; 0x2e
 801603c:	d917      	bls.n	801606e <HAL_DMA_Init+0x2aa>
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	2b3e      	cmp	r3, #62	; 0x3e
 8016044:	d903      	bls.n	801604e <HAL_DMA_Init+0x28a>
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	685b      	ldr	r3, [r3, #4]
 801604a:	2b42      	cmp	r3, #66	; 0x42
 801604c:	d90f      	bls.n	801606e <HAL_DMA_Init+0x2aa>
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	2b46      	cmp	r3, #70	; 0x46
 8016054:	d903      	bls.n	801605e <HAL_DMA_Init+0x29a>
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	2b48      	cmp	r3, #72	; 0x48
 801605c:	d907      	bls.n	801606e <HAL_DMA_Init+0x2aa>
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	2b4e      	cmp	r3, #78	; 0x4e
 8016064:	d905      	bls.n	8016072 <HAL_DMA_Init+0x2ae>
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	685b      	ldr	r3, [r3, #4]
 801606a:	2b52      	cmp	r3, #82	; 0x52
 801606c:	d801      	bhi.n	8016072 <HAL_DMA_Init+0x2ae>
 801606e:	2301      	movs	r3, #1
 8016070:	e000      	b.n	8016074 <HAL_DMA_Init+0x2b0>
 8016072:	2300      	movs	r3, #0
 8016074:	2b00      	cmp	r3, #0
 8016076:	d003      	beq.n	8016080 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8016078:	697b      	ldr	r3, [r7, #20]
 801607a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801607e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	697a      	ldr	r2, [r7, #20]
 8016086:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	695b      	ldr	r3, [r3, #20]
 801608e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016090:	697b      	ldr	r3, [r7, #20]
 8016092:	f023 0307 	bic.w	r3, r3, #7
 8016096:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801609c:	697a      	ldr	r2, [r7, #20]
 801609e:	4313      	orrs	r3, r2
 80160a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160a6:	2b04      	cmp	r3, #4
 80160a8:	d117      	bne.n	80160da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160ae:	697a      	ldr	r2, [r7, #20]
 80160b0:	4313      	orrs	r3, r2
 80160b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d00e      	beq.n	80160da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f002 f82d 	bl	801811c <DMA_CheckFifoParam>
 80160c2:	4603      	mov	r3, r0
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d008      	beq.n	80160da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	2240      	movs	r2, #64	; 0x40
 80160cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2201      	movs	r2, #1
 80160d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80160d6:	2301      	movs	r3, #1
 80160d8:	e197      	b.n	801640a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	697a      	ldr	r2, [r7, #20]
 80160e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f001 ff68 	bl	8017fb8 <DMA_CalcBaseAndBitshift>
 80160e8:	4603      	mov	r3, r0
 80160ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80160f0:	f003 031f 	and.w	r3, r3, #31
 80160f4:	223f      	movs	r2, #63	; 0x3f
 80160f6:	409a      	lsls	r2, r3
 80160f8:	68bb      	ldr	r3, [r7, #8]
 80160fa:	609a      	str	r2, [r3, #8]
 80160fc:	e0cd      	b.n	801629a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	4a3b      	ldr	r2, [pc, #236]	; (80161f0 <HAL_DMA_Init+0x42c>)
 8016104:	4293      	cmp	r3, r2
 8016106:	d022      	beq.n	801614e <HAL_DMA_Init+0x38a>
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	4a39      	ldr	r2, [pc, #228]	; (80161f4 <HAL_DMA_Init+0x430>)
 801610e:	4293      	cmp	r3, r2
 8016110:	d01d      	beq.n	801614e <HAL_DMA_Init+0x38a>
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	4a38      	ldr	r2, [pc, #224]	; (80161f8 <HAL_DMA_Init+0x434>)
 8016118:	4293      	cmp	r3, r2
 801611a:	d018      	beq.n	801614e <HAL_DMA_Init+0x38a>
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	4a36      	ldr	r2, [pc, #216]	; (80161fc <HAL_DMA_Init+0x438>)
 8016122:	4293      	cmp	r3, r2
 8016124:	d013      	beq.n	801614e <HAL_DMA_Init+0x38a>
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	4a35      	ldr	r2, [pc, #212]	; (8016200 <HAL_DMA_Init+0x43c>)
 801612c:	4293      	cmp	r3, r2
 801612e:	d00e      	beq.n	801614e <HAL_DMA_Init+0x38a>
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	4a33      	ldr	r2, [pc, #204]	; (8016204 <HAL_DMA_Init+0x440>)
 8016136:	4293      	cmp	r3, r2
 8016138:	d009      	beq.n	801614e <HAL_DMA_Init+0x38a>
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	4a32      	ldr	r2, [pc, #200]	; (8016208 <HAL_DMA_Init+0x444>)
 8016140:	4293      	cmp	r3, r2
 8016142:	d004      	beq.n	801614e <HAL_DMA_Init+0x38a>
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	4a30      	ldr	r2, [pc, #192]	; (801620c <HAL_DMA_Init+0x448>)
 801614a:	4293      	cmp	r3, r2
 801614c:	d101      	bne.n	8016152 <HAL_DMA_Init+0x38e>
 801614e:	2301      	movs	r3, #1
 8016150:	e000      	b.n	8016154 <HAL_DMA_Init+0x390>
 8016152:	2300      	movs	r3, #0
 8016154:	2b00      	cmp	r3, #0
 8016156:	f000 8097 	beq.w	8016288 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	4a24      	ldr	r2, [pc, #144]	; (80161f0 <HAL_DMA_Init+0x42c>)
 8016160:	4293      	cmp	r3, r2
 8016162:	d021      	beq.n	80161a8 <HAL_DMA_Init+0x3e4>
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	4a22      	ldr	r2, [pc, #136]	; (80161f4 <HAL_DMA_Init+0x430>)
 801616a:	4293      	cmp	r3, r2
 801616c:	d01c      	beq.n	80161a8 <HAL_DMA_Init+0x3e4>
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	4a21      	ldr	r2, [pc, #132]	; (80161f8 <HAL_DMA_Init+0x434>)
 8016174:	4293      	cmp	r3, r2
 8016176:	d017      	beq.n	80161a8 <HAL_DMA_Init+0x3e4>
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	4a1f      	ldr	r2, [pc, #124]	; (80161fc <HAL_DMA_Init+0x438>)
 801617e:	4293      	cmp	r3, r2
 8016180:	d012      	beq.n	80161a8 <HAL_DMA_Init+0x3e4>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	4a1e      	ldr	r2, [pc, #120]	; (8016200 <HAL_DMA_Init+0x43c>)
 8016188:	4293      	cmp	r3, r2
 801618a:	d00d      	beq.n	80161a8 <HAL_DMA_Init+0x3e4>
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	4a1c      	ldr	r2, [pc, #112]	; (8016204 <HAL_DMA_Init+0x440>)
 8016192:	4293      	cmp	r3, r2
 8016194:	d008      	beq.n	80161a8 <HAL_DMA_Init+0x3e4>
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	4a1b      	ldr	r2, [pc, #108]	; (8016208 <HAL_DMA_Init+0x444>)
 801619c:	4293      	cmp	r3, r2
 801619e:	d003      	beq.n	80161a8 <HAL_DMA_Init+0x3e4>
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	4a19      	ldr	r2, [pc, #100]	; (801620c <HAL_DMA_Init+0x448>)
 80161a6:	4293      	cmp	r3, r2
 80161a8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	2200      	movs	r2, #0
 80161ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2202      	movs	r2, #2
 80161b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80161c2:	697a      	ldr	r2, [r7, #20]
 80161c4:	4b12      	ldr	r3, [pc, #72]	; (8016210 <HAL_DMA_Init+0x44c>)
 80161c6:	4013      	ands	r3, r2
 80161c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	689b      	ldr	r3, [r3, #8]
 80161ce:	2b40      	cmp	r3, #64	; 0x40
 80161d0:	d020      	beq.n	8016214 <HAL_DMA_Init+0x450>
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	689b      	ldr	r3, [r3, #8]
 80161d6:	2b80      	cmp	r3, #128	; 0x80
 80161d8:	d102      	bne.n	80161e0 <HAL_DMA_Init+0x41c>
 80161da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80161de:	e01a      	b.n	8016216 <HAL_DMA_Init+0x452>
 80161e0:	2300      	movs	r3, #0
 80161e2:	e018      	b.n	8016216 <HAL_DMA_Init+0x452>
 80161e4:	fe10803f 	.word	0xfe10803f
 80161e8:	5c001000 	.word	0x5c001000
 80161ec:	ffff0000 	.word	0xffff0000
 80161f0:	58025408 	.word	0x58025408
 80161f4:	5802541c 	.word	0x5802541c
 80161f8:	58025430 	.word	0x58025430
 80161fc:	58025444 	.word	0x58025444
 8016200:	58025458 	.word	0x58025458
 8016204:	5802546c 	.word	0x5802546c
 8016208:	58025480 	.word	0x58025480
 801620c:	58025494 	.word	0x58025494
 8016210:	fffe000f 	.word	0xfffe000f
 8016214:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8016216:	687a      	ldr	r2, [r7, #4]
 8016218:	68d2      	ldr	r2, [r2, #12]
 801621a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801621c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	691b      	ldr	r3, [r3, #16]
 8016222:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8016224:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	695b      	ldr	r3, [r3, #20]
 801622a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801622c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	699b      	ldr	r3, [r3, #24]
 8016232:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8016234:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	69db      	ldr	r3, [r3, #28]
 801623a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801623c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	6a1b      	ldr	r3, [r3, #32]
 8016242:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8016244:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8016246:	697a      	ldr	r2, [r7, #20]
 8016248:	4313      	orrs	r3, r2
 801624a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	697a      	ldr	r2, [r7, #20]
 8016252:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	461a      	mov	r2, r3
 801625a:	4b6e      	ldr	r3, [pc, #440]	; (8016414 <HAL_DMA_Init+0x650>)
 801625c:	4413      	add	r3, r2
 801625e:	4a6e      	ldr	r2, [pc, #440]	; (8016418 <HAL_DMA_Init+0x654>)
 8016260:	fba2 2303 	umull	r2, r3, r2, r3
 8016264:	091b      	lsrs	r3, r3, #4
 8016266:	009a      	lsls	r2, r3, #2
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f001 fea3 	bl	8017fb8 <DMA_CalcBaseAndBitshift>
 8016272:	4603      	mov	r3, r0
 8016274:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801627a:	f003 031f 	and.w	r3, r3, #31
 801627e:	2201      	movs	r2, #1
 8016280:	409a      	lsls	r2, r3
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	605a      	str	r2, [r3, #4]
 8016286:	e008      	b.n	801629a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2240      	movs	r2, #64	; 0x40
 801628c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2203      	movs	r2, #3
 8016292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8016296:	2301      	movs	r3, #1
 8016298:	e0b7      	b.n	801640a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	4a5f      	ldr	r2, [pc, #380]	; (801641c <HAL_DMA_Init+0x658>)
 80162a0:	4293      	cmp	r3, r2
 80162a2:	d072      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	4a5d      	ldr	r2, [pc, #372]	; (8016420 <HAL_DMA_Init+0x65c>)
 80162aa:	4293      	cmp	r3, r2
 80162ac:	d06d      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	4a5c      	ldr	r2, [pc, #368]	; (8016424 <HAL_DMA_Init+0x660>)
 80162b4:	4293      	cmp	r3, r2
 80162b6:	d068      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	4a5a      	ldr	r2, [pc, #360]	; (8016428 <HAL_DMA_Init+0x664>)
 80162be:	4293      	cmp	r3, r2
 80162c0:	d063      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	4a59      	ldr	r2, [pc, #356]	; (801642c <HAL_DMA_Init+0x668>)
 80162c8:	4293      	cmp	r3, r2
 80162ca:	d05e      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	4a57      	ldr	r2, [pc, #348]	; (8016430 <HAL_DMA_Init+0x66c>)
 80162d2:	4293      	cmp	r3, r2
 80162d4:	d059      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	4a56      	ldr	r2, [pc, #344]	; (8016434 <HAL_DMA_Init+0x670>)
 80162dc:	4293      	cmp	r3, r2
 80162de:	d054      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	4a54      	ldr	r2, [pc, #336]	; (8016438 <HAL_DMA_Init+0x674>)
 80162e6:	4293      	cmp	r3, r2
 80162e8:	d04f      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	4a53      	ldr	r2, [pc, #332]	; (801643c <HAL_DMA_Init+0x678>)
 80162f0:	4293      	cmp	r3, r2
 80162f2:	d04a      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	4a51      	ldr	r2, [pc, #324]	; (8016440 <HAL_DMA_Init+0x67c>)
 80162fa:	4293      	cmp	r3, r2
 80162fc:	d045      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	4a50      	ldr	r2, [pc, #320]	; (8016444 <HAL_DMA_Init+0x680>)
 8016304:	4293      	cmp	r3, r2
 8016306:	d040      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	4a4e      	ldr	r2, [pc, #312]	; (8016448 <HAL_DMA_Init+0x684>)
 801630e:	4293      	cmp	r3, r2
 8016310:	d03b      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	4a4d      	ldr	r2, [pc, #308]	; (801644c <HAL_DMA_Init+0x688>)
 8016318:	4293      	cmp	r3, r2
 801631a:	d036      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	4a4b      	ldr	r2, [pc, #300]	; (8016450 <HAL_DMA_Init+0x68c>)
 8016322:	4293      	cmp	r3, r2
 8016324:	d031      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	4a4a      	ldr	r2, [pc, #296]	; (8016454 <HAL_DMA_Init+0x690>)
 801632c:	4293      	cmp	r3, r2
 801632e:	d02c      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	4a48      	ldr	r2, [pc, #288]	; (8016458 <HAL_DMA_Init+0x694>)
 8016336:	4293      	cmp	r3, r2
 8016338:	d027      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	4a47      	ldr	r2, [pc, #284]	; (801645c <HAL_DMA_Init+0x698>)
 8016340:	4293      	cmp	r3, r2
 8016342:	d022      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	4a45      	ldr	r2, [pc, #276]	; (8016460 <HAL_DMA_Init+0x69c>)
 801634a:	4293      	cmp	r3, r2
 801634c:	d01d      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	4a44      	ldr	r2, [pc, #272]	; (8016464 <HAL_DMA_Init+0x6a0>)
 8016354:	4293      	cmp	r3, r2
 8016356:	d018      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	4a42      	ldr	r2, [pc, #264]	; (8016468 <HAL_DMA_Init+0x6a4>)
 801635e:	4293      	cmp	r3, r2
 8016360:	d013      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4a41      	ldr	r2, [pc, #260]	; (801646c <HAL_DMA_Init+0x6a8>)
 8016368:	4293      	cmp	r3, r2
 801636a:	d00e      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	4a3f      	ldr	r2, [pc, #252]	; (8016470 <HAL_DMA_Init+0x6ac>)
 8016372:	4293      	cmp	r3, r2
 8016374:	d009      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	4a3e      	ldr	r2, [pc, #248]	; (8016474 <HAL_DMA_Init+0x6b0>)
 801637c:	4293      	cmp	r3, r2
 801637e:	d004      	beq.n	801638a <HAL_DMA_Init+0x5c6>
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	4a3c      	ldr	r2, [pc, #240]	; (8016478 <HAL_DMA_Init+0x6b4>)
 8016386:	4293      	cmp	r3, r2
 8016388:	d101      	bne.n	801638e <HAL_DMA_Init+0x5ca>
 801638a:	2301      	movs	r3, #1
 801638c:	e000      	b.n	8016390 <HAL_DMA_Init+0x5cc>
 801638e:	2300      	movs	r3, #0
 8016390:	2b00      	cmp	r3, #0
 8016392:	d032      	beq.n	80163fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	f001 ff3d 	bl	8018214 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	689b      	ldr	r3, [r3, #8]
 801639e:	2b80      	cmp	r3, #128	; 0x80
 80163a0:	d102      	bne.n	80163a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2200      	movs	r2, #0
 80163a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	685a      	ldr	r2, [r3, #4]
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80163b0:	b2d2      	uxtb	r2, r2
 80163b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80163b8:	687a      	ldr	r2, [r7, #4]
 80163ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80163bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	685b      	ldr	r3, [r3, #4]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d010      	beq.n	80163e8 <HAL_DMA_Init+0x624>
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	2b08      	cmp	r3, #8
 80163cc:	d80c      	bhi.n	80163e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80163ce:	6878      	ldr	r0, [r7, #4]
 80163d0:	f001 ffba 	bl	8018348 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163d8:	2200      	movs	r2, #0
 80163da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80163e4:	605a      	str	r2, [r3, #4]
 80163e6:	e008      	b.n	80163fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2200      	movs	r2, #0
 80163ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	2200      	movs	r2, #0
 80163f2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2200      	movs	r2, #0
 80163f8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	2200      	movs	r2, #0
 80163fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	2201      	movs	r2, #1
 8016404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016408:	2300      	movs	r3, #0
}
 801640a:	4618      	mov	r0, r3
 801640c:	3718      	adds	r7, #24
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}
 8016412:	bf00      	nop
 8016414:	a7fdabf8 	.word	0xa7fdabf8
 8016418:	cccccccd 	.word	0xcccccccd
 801641c:	40020010 	.word	0x40020010
 8016420:	40020028 	.word	0x40020028
 8016424:	40020040 	.word	0x40020040
 8016428:	40020058 	.word	0x40020058
 801642c:	40020070 	.word	0x40020070
 8016430:	40020088 	.word	0x40020088
 8016434:	400200a0 	.word	0x400200a0
 8016438:	400200b8 	.word	0x400200b8
 801643c:	40020410 	.word	0x40020410
 8016440:	40020428 	.word	0x40020428
 8016444:	40020440 	.word	0x40020440
 8016448:	40020458 	.word	0x40020458
 801644c:	40020470 	.word	0x40020470
 8016450:	40020488 	.word	0x40020488
 8016454:	400204a0 	.word	0x400204a0
 8016458:	400204b8 	.word	0x400204b8
 801645c:	58025408 	.word	0x58025408
 8016460:	5802541c 	.word	0x5802541c
 8016464:	58025430 	.word	0x58025430
 8016468:	58025444 	.word	0x58025444
 801646c:	58025458 	.word	0x58025458
 8016470:	5802546c 	.word	0x5802546c
 8016474:	58025480 	.word	0x58025480
 8016478:	58025494 	.word	0x58025494

0801647c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b086      	sub	sp, #24
 8016480:	af00      	add	r7, sp, #0
 8016482:	60f8      	str	r0, [r7, #12]
 8016484:	60b9      	str	r1, [r7, #8]
 8016486:	607a      	str	r2, [r7, #4]
 8016488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801648a:	2300      	movs	r3, #0
 801648c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d101      	bne.n	8016498 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8016494:	2301      	movs	r3, #1
 8016496:	e226      	b.n	80168e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801649e:	2b01      	cmp	r3, #1
 80164a0:	d101      	bne.n	80164a6 <HAL_DMA_Start_IT+0x2a>
 80164a2:	2302      	movs	r3, #2
 80164a4:	e21f      	b.n	80168e6 <HAL_DMA_Start_IT+0x46a>
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2201      	movs	r2, #1
 80164aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80164b4:	b2db      	uxtb	r3, r3
 80164b6:	2b01      	cmp	r3, #1
 80164b8:	f040 820a 	bne.w	80168d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	2202      	movs	r2, #2
 80164c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	2200      	movs	r2, #0
 80164c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	4a68      	ldr	r2, [pc, #416]	; (8016670 <HAL_DMA_Start_IT+0x1f4>)
 80164d0:	4293      	cmp	r3, r2
 80164d2:	d04a      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	4a66      	ldr	r2, [pc, #408]	; (8016674 <HAL_DMA_Start_IT+0x1f8>)
 80164da:	4293      	cmp	r3, r2
 80164dc:	d045      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	4a65      	ldr	r2, [pc, #404]	; (8016678 <HAL_DMA_Start_IT+0x1fc>)
 80164e4:	4293      	cmp	r3, r2
 80164e6:	d040      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	4a63      	ldr	r2, [pc, #396]	; (801667c <HAL_DMA_Start_IT+0x200>)
 80164ee:	4293      	cmp	r3, r2
 80164f0:	d03b      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	4a62      	ldr	r2, [pc, #392]	; (8016680 <HAL_DMA_Start_IT+0x204>)
 80164f8:	4293      	cmp	r3, r2
 80164fa:	d036      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	4a60      	ldr	r2, [pc, #384]	; (8016684 <HAL_DMA_Start_IT+0x208>)
 8016502:	4293      	cmp	r3, r2
 8016504:	d031      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4a5f      	ldr	r2, [pc, #380]	; (8016688 <HAL_DMA_Start_IT+0x20c>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d02c      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	4a5d      	ldr	r2, [pc, #372]	; (801668c <HAL_DMA_Start_IT+0x210>)
 8016516:	4293      	cmp	r3, r2
 8016518:	d027      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	4a5c      	ldr	r2, [pc, #368]	; (8016690 <HAL_DMA_Start_IT+0x214>)
 8016520:	4293      	cmp	r3, r2
 8016522:	d022      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	4a5a      	ldr	r2, [pc, #360]	; (8016694 <HAL_DMA_Start_IT+0x218>)
 801652a:	4293      	cmp	r3, r2
 801652c:	d01d      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	4a59      	ldr	r2, [pc, #356]	; (8016698 <HAL_DMA_Start_IT+0x21c>)
 8016534:	4293      	cmp	r3, r2
 8016536:	d018      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	4a57      	ldr	r2, [pc, #348]	; (801669c <HAL_DMA_Start_IT+0x220>)
 801653e:	4293      	cmp	r3, r2
 8016540:	d013      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	4a56      	ldr	r2, [pc, #344]	; (80166a0 <HAL_DMA_Start_IT+0x224>)
 8016548:	4293      	cmp	r3, r2
 801654a:	d00e      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	4a54      	ldr	r2, [pc, #336]	; (80166a4 <HAL_DMA_Start_IT+0x228>)
 8016552:	4293      	cmp	r3, r2
 8016554:	d009      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	4a53      	ldr	r2, [pc, #332]	; (80166a8 <HAL_DMA_Start_IT+0x22c>)
 801655c:	4293      	cmp	r3, r2
 801655e:	d004      	beq.n	801656a <HAL_DMA_Start_IT+0xee>
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	4a51      	ldr	r2, [pc, #324]	; (80166ac <HAL_DMA_Start_IT+0x230>)
 8016566:	4293      	cmp	r3, r2
 8016568:	d108      	bne.n	801657c <HAL_DMA_Start_IT+0x100>
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	681a      	ldr	r2, [r3, #0]
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	f022 0201 	bic.w	r2, r2, #1
 8016578:	601a      	str	r2, [r3, #0]
 801657a:	e007      	b.n	801658c <HAL_DMA_Start_IT+0x110>
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	681a      	ldr	r2, [r3, #0]
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	f022 0201 	bic.w	r2, r2, #1
 801658a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	687a      	ldr	r2, [r7, #4]
 8016590:	68b9      	ldr	r1, [r7, #8]
 8016592:	68f8      	ldr	r0, [r7, #12]
 8016594:	f001 fb64 	bl	8017c60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	4a34      	ldr	r2, [pc, #208]	; (8016670 <HAL_DMA_Start_IT+0x1f4>)
 801659e:	4293      	cmp	r3, r2
 80165a0:	d04a      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	4a33      	ldr	r2, [pc, #204]	; (8016674 <HAL_DMA_Start_IT+0x1f8>)
 80165a8:	4293      	cmp	r3, r2
 80165aa:	d045      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	4a31      	ldr	r2, [pc, #196]	; (8016678 <HAL_DMA_Start_IT+0x1fc>)
 80165b2:	4293      	cmp	r3, r2
 80165b4:	d040      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	4a30      	ldr	r2, [pc, #192]	; (801667c <HAL_DMA_Start_IT+0x200>)
 80165bc:	4293      	cmp	r3, r2
 80165be:	d03b      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	4a2e      	ldr	r2, [pc, #184]	; (8016680 <HAL_DMA_Start_IT+0x204>)
 80165c6:	4293      	cmp	r3, r2
 80165c8:	d036      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	4a2d      	ldr	r2, [pc, #180]	; (8016684 <HAL_DMA_Start_IT+0x208>)
 80165d0:	4293      	cmp	r3, r2
 80165d2:	d031      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	4a2b      	ldr	r2, [pc, #172]	; (8016688 <HAL_DMA_Start_IT+0x20c>)
 80165da:	4293      	cmp	r3, r2
 80165dc:	d02c      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	4a2a      	ldr	r2, [pc, #168]	; (801668c <HAL_DMA_Start_IT+0x210>)
 80165e4:	4293      	cmp	r3, r2
 80165e6:	d027      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	4a28      	ldr	r2, [pc, #160]	; (8016690 <HAL_DMA_Start_IT+0x214>)
 80165ee:	4293      	cmp	r3, r2
 80165f0:	d022      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	4a27      	ldr	r2, [pc, #156]	; (8016694 <HAL_DMA_Start_IT+0x218>)
 80165f8:	4293      	cmp	r3, r2
 80165fa:	d01d      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	4a25      	ldr	r2, [pc, #148]	; (8016698 <HAL_DMA_Start_IT+0x21c>)
 8016602:	4293      	cmp	r3, r2
 8016604:	d018      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4a24      	ldr	r2, [pc, #144]	; (801669c <HAL_DMA_Start_IT+0x220>)
 801660c:	4293      	cmp	r3, r2
 801660e:	d013      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	4a22      	ldr	r2, [pc, #136]	; (80166a0 <HAL_DMA_Start_IT+0x224>)
 8016616:	4293      	cmp	r3, r2
 8016618:	d00e      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	4a21      	ldr	r2, [pc, #132]	; (80166a4 <HAL_DMA_Start_IT+0x228>)
 8016620:	4293      	cmp	r3, r2
 8016622:	d009      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	4a1f      	ldr	r2, [pc, #124]	; (80166a8 <HAL_DMA_Start_IT+0x22c>)
 801662a:	4293      	cmp	r3, r2
 801662c:	d004      	beq.n	8016638 <HAL_DMA_Start_IT+0x1bc>
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	4a1e      	ldr	r2, [pc, #120]	; (80166ac <HAL_DMA_Start_IT+0x230>)
 8016634:	4293      	cmp	r3, r2
 8016636:	d101      	bne.n	801663c <HAL_DMA_Start_IT+0x1c0>
 8016638:	2301      	movs	r3, #1
 801663a:	e000      	b.n	801663e <HAL_DMA_Start_IT+0x1c2>
 801663c:	2300      	movs	r3, #0
 801663e:	2b00      	cmp	r3, #0
 8016640:	d036      	beq.n	80166b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	f023 021e 	bic.w	r2, r3, #30
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	f042 0216 	orr.w	r2, r2, #22
 8016654:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801665a:	2b00      	cmp	r3, #0
 801665c:	d03e      	beq.n	80166dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	681a      	ldr	r2, [r3, #0]
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	f042 0208 	orr.w	r2, r2, #8
 801666c:	601a      	str	r2, [r3, #0]
 801666e:	e035      	b.n	80166dc <HAL_DMA_Start_IT+0x260>
 8016670:	40020010 	.word	0x40020010
 8016674:	40020028 	.word	0x40020028
 8016678:	40020040 	.word	0x40020040
 801667c:	40020058 	.word	0x40020058
 8016680:	40020070 	.word	0x40020070
 8016684:	40020088 	.word	0x40020088
 8016688:	400200a0 	.word	0x400200a0
 801668c:	400200b8 	.word	0x400200b8
 8016690:	40020410 	.word	0x40020410
 8016694:	40020428 	.word	0x40020428
 8016698:	40020440 	.word	0x40020440
 801669c:	40020458 	.word	0x40020458
 80166a0:	40020470 	.word	0x40020470
 80166a4:	40020488 	.word	0x40020488
 80166a8:	400204a0 	.word	0x400204a0
 80166ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	f023 020e 	bic.w	r2, r3, #14
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	f042 020a 	orr.w	r2, r2, #10
 80166c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d007      	beq.n	80166dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	f042 0204 	orr.w	r2, r2, #4
 80166da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	4a83      	ldr	r2, [pc, #524]	; (80168f0 <HAL_DMA_Start_IT+0x474>)
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d072      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	4a82      	ldr	r2, [pc, #520]	; (80168f4 <HAL_DMA_Start_IT+0x478>)
 80166ec:	4293      	cmp	r3, r2
 80166ee:	d06d      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	4a80      	ldr	r2, [pc, #512]	; (80168f8 <HAL_DMA_Start_IT+0x47c>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d068      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	4a7f      	ldr	r2, [pc, #508]	; (80168fc <HAL_DMA_Start_IT+0x480>)
 8016700:	4293      	cmp	r3, r2
 8016702:	d063      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	4a7d      	ldr	r2, [pc, #500]	; (8016900 <HAL_DMA_Start_IT+0x484>)
 801670a:	4293      	cmp	r3, r2
 801670c:	d05e      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	4a7c      	ldr	r2, [pc, #496]	; (8016904 <HAL_DMA_Start_IT+0x488>)
 8016714:	4293      	cmp	r3, r2
 8016716:	d059      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	4a7a      	ldr	r2, [pc, #488]	; (8016908 <HAL_DMA_Start_IT+0x48c>)
 801671e:	4293      	cmp	r3, r2
 8016720:	d054      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	4a79      	ldr	r2, [pc, #484]	; (801690c <HAL_DMA_Start_IT+0x490>)
 8016728:	4293      	cmp	r3, r2
 801672a:	d04f      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	4a77      	ldr	r2, [pc, #476]	; (8016910 <HAL_DMA_Start_IT+0x494>)
 8016732:	4293      	cmp	r3, r2
 8016734:	d04a      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	4a76      	ldr	r2, [pc, #472]	; (8016914 <HAL_DMA_Start_IT+0x498>)
 801673c:	4293      	cmp	r3, r2
 801673e:	d045      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	4a74      	ldr	r2, [pc, #464]	; (8016918 <HAL_DMA_Start_IT+0x49c>)
 8016746:	4293      	cmp	r3, r2
 8016748:	d040      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	4a73      	ldr	r2, [pc, #460]	; (801691c <HAL_DMA_Start_IT+0x4a0>)
 8016750:	4293      	cmp	r3, r2
 8016752:	d03b      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	4a71      	ldr	r2, [pc, #452]	; (8016920 <HAL_DMA_Start_IT+0x4a4>)
 801675a:	4293      	cmp	r3, r2
 801675c:	d036      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	4a70      	ldr	r2, [pc, #448]	; (8016924 <HAL_DMA_Start_IT+0x4a8>)
 8016764:	4293      	cmp	r3, r2
 8016766:	d031      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	4a6e      	ldr	r2, [pc, #440]	; (8016928 <HAL_DMA_Start_IT+0x4ac>)
 801676e:	4293      	cmp	r3, r2
 8016770:	d02c      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	4a6d      	ldr	r2, [pc, #436]	; (801692c <HAL_DMA_Start_IT+0x4b0>)
 8016778:	4293      	cmp	r3, r2
 801677a:	d027      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	4a6b      	ldr	r2, [pc, #428]	; (8016930 <HAL_DMA_Start_IT+0x4b4>)
 8016782:	4293      	cmp	r3, r2
 8016784:	d022      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	4a6a      	ldr	r2, [pc, #424]	; (8016934 <HAL_DMA_Start_IT+0x4b8>)
 801678c:	4293      	cmp	r3, r2
 801678e:	d01d      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	4a68      	ldr	r2, [pc, #416]	; (8016938 <HAL_DMA_Start_IT+0x4bc>)
 8016796:	4293      	cmp	r3, r2
 8016798:	d018      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	4a67      	ldr	r2, [pc, #412]	; (801693c <HAL_DMA_Start_IT+0x4c0>)
 80167a0:	4293      	cmp	r3, r2
 80167a2:	d013      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4a65      	ldr	r2, [pc, #404]	; (8016940 <HAL_DMA_Start_IT+0x4c4>)
 80167aa:	4293      	cmp	r3, r2
 80167ac:	d00e      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	4a64      	ldr	r2, [pc, #400]	; (8016944 <HAL_DMA_Start_IT+0x4c8>)
 80167b4:	4293      	cmp	r3, r2
 80167b6:	d009      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	4a62      	ldr	r2, [pc, #392]	; (8016948 <HAL_DMA_Start_IT+0x4cc>)
 80167be:	4293      	cmp	r3, r2
 80167c0:	d004      	beq.n	80167cc <HAL_DMA_Start_IT+0x350>
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	4a61      	ldr	r2, [pc, #388]	; (801694c <HAL_DMA_Start_IT+0x4d0>)
 80167c8:	4293      	cmp	r3, r2
 80167ca:	d101      	bne.n	80167d0 <HAL_DMA_Start_IT+0x354>
 80167cc:	2301      	movs	r3, #1
 80167ce:	e000      	b.n	80167d2 <HAL_DMA_Start_IT+0x356>
 80167d0:	2300      	movs	r3, #0
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d01a      	beq.n	801680c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d007      	beq.n	80167f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80167ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80167f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d007      	beq.n	801680c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016800:	681a      	ldr	r2, [r3, #0]
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801680a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	4a37      	ldr	r2, [pc, #220]	; (80168f0 <HAL_DMA_Start_IT+0x474>)
 8016812:	4293      	cmp	r3, r2
 8016814:	d04a      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	4a36      	ldr	r2, [pc, #216]	; (80168f4 <HAL_DMA_Start_IT+0x478>)
 801681c:	4293      	cmp	r3, r2
 801681e:	d045      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	4a34      	ldr	r2, [pc, #208]	; (80168f8 <HAL_DMA_Start_IT+0x47c>)
 8016826:	4293      	cmp	r3, r2
 8016828:	d040      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	4a33      	ldr	r2, [pc, #204]	; (80168fc <HAL_DMA_Start_IT+0x480>)
 8016830:	4293      	cmp	r3, r2
 8016832:	d03b      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	4a31      	ldr	r2, [pc, #196]	; (8016900 <HAL_DMA_Start_IT+0x484>)
 801683a:	4293      	cmp	r3, r2
 801683c:	d036      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	4a30      	ldr	r2, [pc, #192]	; (8016904 <HAL_DMA_Start_IT+0x488>)
 8016844:	4293      	cmp	r3, r2
 8016846:	d031      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	4a2e      	ldr	r2, [pc, #184]	; (8016908 <HAL_DMA_Start_IT+0x48c>)
 801684e:	4293      	cmp	r3, r2
 8016850:	d02c      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	4a2d      	ldr	r2, [pc, #180]	; (801690c <HAL_DMA_Start_IT+0x490>)
 8016858:	4293      	cmp	r3, r2
 801685a:	d027      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	4a2b      	ldr	r2, [pc, #172]	; (8016910 <HAL_DMA_Start_IT+0x494>)
 8016862:	4293      	cmp	r3, r2
 8016864:	d022      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	4a2a      	ldr	r2, [pc, #168]	; (8016914 <HAL_DMA_Start_IT+0x498>)
 801686c:	4293      	cmp	r3, r2
 801686e:	d01d      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	4a28      	ldr	r2, [pc, #160]	; (8016918 <HAL_DMA_Start_IT+0x49c>)
 8016876:	4293      	cmp	r3, r2
 8016878:	d018      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	4a27      	ldr	r2, [pc, #156]	; (801691c <HAL_DMA_Start_IT+0x4a0>)
 8016880:	4293      	cmp	r3, r2
 8016882:	d013      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	4a25      	ldr	r2, [pc, #148]	; (8016920 <HAL_DMA_Start_IT+0x4a4>)
 801688a:	4293      	cmp	r3, r2
 801688c:	d00e      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	4a24      	ldr	r2, [pc, #144]	; (8016924 <HAL_DMA_Start_IT+0x4a8>)
 8016894:	4293      	cmp	r3, r2
 8016896:	d009      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	4a22      	ldr	r2, [pc, #136]	; (8016928 <HAL_DMA_Start_IT+0x4ac>)
 801689e:	4293      	cmp	r3, r2
 80168a0:	d004      	beq.n	80168ac <HAL_DMA_Start_IT+0x430>
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	4a21      	ldr	r2, [pc, #132]	; (801692c <HAL_DMA_Start_IT+0x4b0>)
 80168a8:	4293      	cmp	r3, r2
 80168aa:	d108      	bne.n	80168be <HAL_DMA_Start_IT+0x442>
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	681a      	ldr	r2, [r3, #0]
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	f042 0201 	orr.w	r2, r2, #1
 80168ba:	601a      	str	r2, [r3, #0]
 80168bc:	e012      	b.n	80168e4 <HAL_DMA_Start_IT+0x468>
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	681a      	ldr	r2, [r3, #0]
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	f042 0201 	orr.w	r2, r2, #1
 80168cc:	601a      	str	r2, [r3, #0]
 80168ce:	e009      	b.n	80168e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	2200      	movs	r2, #0
 80168d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80168de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80168e0:	2301      	movs	r3, #1
 80168e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80168e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3718      	adds	r7, #24
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
 80168ee:	bf00      	nop
 80168f0:	40020010 	.word	0x40020010
 80168f4:	40020028 	.word	0x40020028
 80168f8:	40020040 	.word	0x40020040
 80168fc:	40020058 	.word	0x40020058
 8016900:	40020070 	.word	0x40020070
 8016904:	40020088 	.word	0x40020088
 8016908:	400200a0 	.word	0x400200a0
 801690c:	400200b8 	.word	0x400200b8
 8016910:	40020410 	.word	0x40020410
 8016914:	40020428 	.word	0x40020428
 8016918:	40020440 	.word	0x40020440
 801691c:	40020458 	.word	0x40020458
 8016920:	40020470 	.word	0x40020470
 8016924:	40020488 	.word	0x40020488
 8016928:	400204a0 	.word	0x400204a0
 801692c:	400204b8 	.word	0x400204b8
 8016930:	58025408 	.word	0x58025408
 8016934:	5802541c 	.word	0x5802541c
 8016938:	58025430 	.word	0x58025430
 801693c:	58025444 	.word	0x58025444
 8016940:	58025458 	.word	0x58025458
 8016944:	5802546c 	.word	0x5802546c
 8016948:	58025480 	.word	0x58025480
 801694c:	58025494 	.word	0x58025494

08016950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b084      	sub	sp, #16
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d101      	bne.n	8016962 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801695e:	2301      	movs	r3, #1
 8016960:	e205      	b.n	8016d6e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016968:	b2db      	uxtb	r3, r3
 801696a:	2b02      	cmp	r3, #2
 801696c:	d004      	beq.n	8016978 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	2280      	movs	r2, #128	; 0x80
 8016972:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016974:	2301      	movs	r3, #1
 8016976:	e1fa      	b.n	8016d6e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	4a8c      	ldr	r2, [pc, #560]	; (8016bb0 <HAL_DMA_Abort_IT+0x260>)
 801697e:	4293      	cmp	r3, r2
 8016980:	d04a      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	4a8b      	ldr	r2, [pc, #556]	; (8016bb4 <HAL_DMA_Abort_IT+0x264>)
 8016988:	4293      	cmp	r3, r2
 801698a:	d045      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	4a89      	ldr	r2, [pc, #548]	; (8016bb8 <HAL_DMA_Abort_IT+0x268>)
 8016992:	4293      	cmp	r3, r2
 8016994:	d040      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	4a88      	ldr	r2, [pc, #544]	; (8016bbc <HAL_DMA_Abort_IT+0x26c>)
 801699c:	4293      	cmp	r3, r2
 801699e:	d03b      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	4a86      	ldr	r2, [pc, #536]	; (8016bc0 <HAL_DMA_Abort_IT+0x270>)
 80169a6:	4293      	cmp	r3, r2
 80169a8:	d036      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	4a85      	ldr	r2, [pc, #532]	; (8016bc4 <HAL_DMA_Abort_IT+0x274>)
 80169b0:	4293      	cmp	r3, r2
 80169b2:	d031      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	4a83      	ldr	r2, [pc, #524]	; (8016bc8 <HAL_DMA_Abort_IT+0x278>)
 80169ba:	4293      	cmp	r3, r2
 80169bc:	d02c      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	4a82      	ldr	r2, [pc, #520]	; (8016bcc <HAL_DMA_Abort_IT+0x27c>)
 80169c4:	4293      	cmp	r3, r2
 80169c6:	d027      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	4a80      	ldr	r2, [pc, #512]	; (8016bd0 <HAL_DMA_Abort_IT+0x280>)
 80169ce:	4293      	cmp	r3, r2
 80169d0:	d022      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	4a7f      	ldr	r2, [pc, #508]	; (8016bd4 <HAL_DMA_Abort_IT+0x284>)
 80169d8:	4293      	cmp	r3, r2
 80169da:	d01d      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	4a7d      	ldr	r2, [pc, #500]	; (8016bd8 <HAL_DMA_Abort_IT+0x288>)
 80169e2:	4293      	cmp	r3, r2
 80169e4:	d018      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	4a7c      	ldr	r2, [pc, #496]	; (8016bdc <HAL_DMA_Abort_IT+0x28c>)
 80169ec:	4293      	cmp	r3, r2
 80169ee:	d013      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	4a7a      	ldr	r2, [pc, #488]	; (8016be0 <HAL_DMA_Abort_IT+0x290>)
 80169f6:	4293      	cmp	r3, r2
 80169f8:	d00e      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	4a79      	ldr	r2, [pc, #484]	; (8016be4 <HAL_DMA_Abort_IT+0x294>)
 8016a00:	4293      	cmp	r3, r2
 8016a02:	d009      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	4a77      	ldr	r2, [pc, #476]	; (8016be8 <HAL_DMA_Abort_IT+0x298>)
 8016a0a:	4293      	cmp	r3, r2
 8016a0c:	d004      	beq.n	8016a18 <HAL_DMA_Abort_IT+0xc8>
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4a76      	ldr	r2, [pc, #472]	; (8016bec <HAL_DMA_Abort_IT+0x29c>)
 8016a14:	4293      	cmp	r3, r2
 8016a16:	d101      	bne.n	8016a1c <HAL_DMA_Abort_IT+0xcc>
 8016a18:	2301      	movs	r3, #1
 8016a1a:	e000      	b.n	8016a1e <HAL_DMA_Abort_IT+0xce>
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d065      	beq.n	8016aee <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2204      	movs	r2, #4
 8016a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	4a60      	ldr	r2, [pc, #384]	; (8016bb0 <HAL_DMA_Abort_IT+0x260>)
 8016a30:	4293      	cmp	r3, r2
 8016a32:	d04a      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	4a5e      	ldr	r2, [pc, #376]	; (8016bb4 <HAL_DMA_Abort_IT+0x264>)
 8016a3a:	4293      	cmp	r3, r2
 8016a3c:	d045      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	4a5d      	ldr	r2, [pc, #372]	; (8016bb8 <HAL_DMA_Abort_IT+0x268>)
 8016a44:	4293      	cmp	r3, r2
 8016a46:	d040      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	4a5b      	ldr	r2, [pc, #364]	; (8016bbc <HAL_DMA_Abort_IT+0x26c>)
 8016a4e:	4293      	cmp	r3, r2
 8016a50:	d03b      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	4a5a      	ldr	r2, [pc, #360]	; (8016bc0 <HAL_DMA_Abort_IT+0x270>)
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	d036      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	4a58      	ldr	r2, [pc, #352]	; (8016bc4 <HAL_DMA_Abort_IT+0x274>)
 8016a62:	4293      	cmp	r3, r2
 8016a64:	d031      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	4a57      	ldr	r2, [pc, #348]	; (8016bc8 <HAL_DMA_Abort_IT+0x278>)
 8016a6c:	4293      	cmp	r3, r2
 8016a6e:	d02c      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	4a55      	ldr	r2, [pc, #340]	; (8016bcc <HAL_DMA_Abort_IT+0x27c>)
 8016a76:	4293      	cmp	r3, r2
 8016a78:	d027      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	4a54      	ldr	r2, [pc, #336]	; (8016bd0 <HAL_DMA_Abort_IT+0x280>)
 8016a80:	4293      	cmp	r3, r2
 8016a82:	d022      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	4a52      	ldr	r2, [pc, #328]	; (8016bd4 <HAL_DMA_Abort_IT+0x284>)
 8016a8a:	4293      	cmp	r3, r2
 8016a8c:	d01d      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	4a51      	ldr	r2, [pc, #324]	; (8016bd8 <HAL_DMA_Abort_IT+0x288>)
 8016a94:	4293      	cmp	r3, r2
 8016a96:	d018      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	4a4f      	ldr	r2, [pc, #316]	; (8016bdc <HAL_DMA_Abort_IT+0x28c>)
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	d013      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	4a4e      	ldr	r2, [pc, #312]	; (8016be0 <HAL_DMA_Abort_IT+0x290>)
 8016aa8:	4293      	cmp	r3, r2
 8016aaa:	d00e      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	4a4c      	ldr	r2, [pc, #304]	; (8016be4 <HAL_DMA_Abort_IT+0x294>)
 8016ab2:	4293      	cmp	r3, r2
 8016ab4:	d009      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	4a4b      	ldr	r2, [pc, #300]	; (8016be8 <HAL_DMA_Abort_IT+0x298>)
 8016abc:	4293      	cmp	r3, r2
 8016abe:	d004      	beq.n	8016aca <HAL_DMA_Abort_IT+0x17a>
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	4a49      	ldr	r2, [pc, #292]	; (8016bec <HAL_DMA_Abort_IT+0x29c>)
 8016ac6:	4293      	cmp	r3, r2
 8016ac8:	d108      	bne.n	8016adc <HAL_DMA_Abort_IT+0x18c>
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	681a      	ldr	r2, [r3, #0]
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	f022 0201 	bic.w	r2, r2, #1
 8016ad8:	601a      	str	r2, [r3, #0]
 8016ada:	e147      	b.n	8016d6c <HAL_DMA_Abort_IT+0x41c>
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	f022 0201 	bic.w	r2, r2, #1
 8016aea:	601a      	str	r2, [r3, #0]
 8016aec:	e13e      	b.n	8016d6c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	f022 020e 	bic.w	r2, r2, #14
 8016afc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	4a2b      	ldr	r2, [pc, #172]	; (8016bb0 <HAL_DMA_Abort_IT+0x260>)
 8016b04:	4293      	cmp	r3, r2
 8016b06:	d04a      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	4a29      	ldr	r2, [pc, #164]	; (8016bb4 <HAL_DMA_Abort_IT+0x264>)
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	d045      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	4a28      	ldr	r2, [pc, #160]	; (8016bb8 <HAL_DMA_Abort_IT+0x268>)
 8016b18:	4293      	cmp	r3, r2
 8016b1a:	d040      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	4a26      	ldr	r2, [pc, #152]	; (8016bbc <HAL_DMA_Abort_IT+0x26c>)
 8016b22:	4293      	cmp	r3, r2
 8016b24:	d03b      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	4a25      	ldr	r2, [pc, #148]	; (8016bc0 <HAL_DMA_Abort_IT+0x270>)
 8016b2c:	4293      	cmp	r3, r2
 8016b2e:	d036      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	4a23      	ldr	r2, [pc, #140]	; (8016bc4 <HAL_DMA_Abort_IT+0x274>)
 8016b36:	4293      	cmp	r3, r2
 8016b38:	d031      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	4a22      	ldr	r2, [pc, #136]	; (8016bc8 <HAL_DMA_Abort_IT+0x278>)
 8016b40:	4293      	cmp	r3, r2
 8016b42:	d02c      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	4a20      	ldr	r2, [pc, #128]	; (8016bcc <HAL_DMA_Abort_IT+0x27c>)
 8016b4a:	4293      	cmp	r3, r2
 8016b4c:	d027      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	4a1f      	ldr	r2, [pc, #124]	; (8016bd0 <HAL_DMA_Abort_IT+0x280>)
 8016b54:	4293      	cmp	r3, r2
 8016b56:	d022      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	4a1d      	ldr	r2, [pc, #116]	; (8016bd4 <HAL_DMA_Abort_IT+0x284>)
 8016b5e:	4293      	cmp	r3, r2
 8016b60:	d01d      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	4a1c      	ldr	r2, [pc, #112]	; (8016bd8 <HAL_DMA_Abort_IT+0x288>)
 8016b68:	4293      	cmp	r3, r2
 8016b6a:	d018      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	4a1a      	ldr	r2, [pc, #104]	; (8016bdc <HAL_DMA_Abort_IT+0x28c>)
 8016b72:	4293      	cmp	r3, r2
 8016b74:	d013      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	4a19      	ldr	r2, [pc, #100]	; (8016be0 <HAL_DMA_Abort_IT+0x290>)
 8016b7c:	4293      	cmp	r3, r2
 8016b7e:	d00e      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	4a17      	ldr	r2, [pc, #92]	; (8016be4 <HAL_DMA_Abort_IT+0x294>)
 8016b86:	4293      	cmp	r3, r2
 8016b88:	d009      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	4a16      	ldr	r2, [pc, #88]	; (8016be8 <HAL_DMA_Abort_IT+0x298>)
 8016b90:	4293      	cmp	r3, r2
 8016b92:	d004      	beq.n	8016b9e <HAL_DMA_Abort_IT+0x24e>
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	4a14      	ldr	r2, [pc, #80]	; (8016bec <HAL_DMA_Abort_IT+0x29c>)
 8016b9a:	4293      	cmp	r3, r2
 8016b9c:	d128      	bne.n	8016bf0 <HAL_DMA_Abort_IT+0x2a0>
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	681a      	ldr	r2, [r3, #0]
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	f022 0201 	bic.w	r2, r2, #1
 8016bac:	601a      	str	r2, [r3, #0]
 8016bae:	e027      	b.n	8016c00 <HAL_DMA_Abort_IT+0x2b0>
 8016bb0:	40020010 	.word	0x40020010
 8016bb4:	40020028 	.word	0x40020028
 8016bb8:	40020040 	.word	0x40020040
 8016bbc:	40020058 	.word	0x40020058
 8016bc0:	40020070 	.word	0x40020070
 8016bc4:	40020088 	.word	0x40020088
 8016bc8:	400200a0 	.word	0x400200a0
 8016bcc:	400200b8 	.word	0x400200b8
 8016bd0:	40020410 	.word	0x40020410
 8016bd4:	40020428 	.word	0x40020428
 8016bd8:	40020440 	.word	0x40020440
 8016bdc:	40020458 	.word	0x40020458
 8016be0:	40020470 	.word	0x40020470
 8016be4:	40020488 	.word	0x40020488
 8016be8:	400204a0 	.word	0x400204a0
 8016bec:	400204b8 	.word	0x400204b8
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	681a      	ldr	r2, [r3, #0]
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	f022 0201 	bic.w	r2, r2, #1
 8016bfe:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	4a5c      	ldr	r2, [pc, #368]	; (8016d78 <HAL_DMA_Abort_IT+0x428>)
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d072      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	4a5b      	ldr	r2, [pc, #364]	; (8016d7c <HAL_DMA_Abort_IT+0x42c>)
 8016c10:	4293      	cmp	r3, r2
 8016c12:	d06d      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	4a59      	ldr	r2, [pc, #356]	; (8016d80 <HAL_DMA_Abort_IT+0x430>)
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	d068      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	4a58      	ldr	r2, [pc, #352]	; (8016d84 <HAL_DMA_Abort_IT+0x434>)
 8016c24:	4293      	cmp	r3, r2
 8016c26:	d063      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	4a56      	ldr	r2, [pc, #344]	; (8016d88 <HAL_DMA_Abort_IT+0x438>)
 8016c2e:	4293      	cmp	r3, r2
 8016c30:	d05e      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	4a55      	ldr	r2, [pc, #340]	; (8016d8c <HAL_DMA_Abort_IT+0x43c>)
 8016c38:	4293      	cmp	r3, r2
 8016c3a:	d059      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4a53      	ldr	r2, [pc, #332]	; (8016d90 <HAL_DMA_Abort_IT+0x440>)
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d054      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	4a52      	ldr	r2, [pc, #328]	; (8016d94 <HAL_DMA_Abort_IT+0x444>)
 8016c4c:	4293      	cmp	r3, r2
 8016c4e:	d04f      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	4a50      	ldr	r2, [pc, #320]	; (8016d98 <HAL_DMA_Abort_IT+0x448>)
 8016c56:	4293      	cmp	r3, r2
 8016c58:	d04a      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	4a4f      	ldr	r2, [pc, #316]	; (8016d9c <HAL_DMA_Abort_IT+0x44c>)
 8016c60:	4293      	cmp	r3, r2
 8016c62:	d045      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	4a4d      	ldr	r2, [pc, #308]	; (8016da0 <HAL_DMA_Abort_IT+0x450>)
 8016c6a:	4293      	cmp	r3, r2
 8016c6c:	d040      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	4a4c      	ldr	r2, [pc, #304]	; (8016da4 <HAL_DMA_Abort_IT+0x454>)
 8016c74:	4293      	cmp	r3, r2
 8016c76:	d03b      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	4a4a      	ldr	r2, [pc, #296]	; (8016da8 <HAL_DMA_Abort_IT+0x458>)
 8016c7e:	4293      	cmp	r3, r2
 8016c80:	d036      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	4a49      	ldr	r2, [pc, #292]	; (8016dac <HAL_DMA_Abort_IT+0x45c>)
 8016c88:	4293      	cmp	r3, r2
 8016c8a:	d031      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	4a47      	ldr	r2, [pc, #284]	; (8016db0 <HAL_DMA_Abort_IT+0x460>)
 8016c92:	4293      	cmp	r3, r2
 8016c94:	d02c      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	4a46      	ldr	r2, [pc, #280]	; (8016db4 <HAL_DMA_Abort_IT+0x464>)
 8016c9c:	4293      	cmp	r3, r2
 8016c9e:	d027      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	4a44      	ldr	r2, [pc, #272]	; (8016db8 <HAL_DMA_Abort_IT+0x468>)
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	d022      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	4a43      	ldr	r2, [pc, #268]	; (8016dbc <HAL_DMA_Abort_IT+0x46c>)
 8016cb0:	4293      	cmp	r3, r2
 8016cb2:	d01d      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	4a41      	ldr	r2, [pc, #260]	; (8016dc0 <HAL_DMA_Abort_IT+0x470>)
 8016cba:	4293      	cmp	r3, r2
 8016cbc:	d018      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	4a40      	ldr	r2, [pc, #256]	; (8016dc4 <HAL_DMA_Abort_IT+0x474>)
 8016cc4:	4293      	cmp	r3, r2
 8016cc6:	d013      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	4a3e      	ldr	r2, [pc, #248]	; (8016dc8 <HAL_DMA_Abort_IT+0x478>)
 8016cce:	4293      	cmp	r3, r2
 8016cd0:	d00e      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	4a3d      	ldr	r2, [pc, #244]	; (8016dcc <HAL_DMA_Abort_IT+0x47c>)
 8016cd8:	4293      	cmp	r3, r2
 8016cda:	d009      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	4a3b      	ldr	r2, [pc, #236]	; (8016dd0 <HAL_DMA_Abort_IT+0x480>)
 8016ce2:	4293      	cmp	r3, r2
 8016ce4:	d004      	beq.n	8016cf0 <HAL_DMA_Abort_IT+0x3a0>
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	4a3a      	ldr	r2, [pc, #232]	; (8016dd4 <HAL_DMA_Abort_IT+0x484>)
 8016cec:	4293      	cmp	r3, r2
 8016cee:	d101      	bne.n	8016cf4 <HAL_DMA_Abort_IT+0x3a4>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	e000      	b.n	8016cf6 <HAL_DMA_Abort_IT+0x3a6>
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d028      	beq.n	8016d4c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016cfe:	681a      	ldr	r2, [r3, #0]
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8016d08:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d0e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d14:	f003 031f 	and.w	r3, r3, #31
 8016d18:	2201      	movs	r2, #1
 8016d1a:	409a      	lsls	r2, r3
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8016d28:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d00c      	beq.n	8016d4c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d36:	681a      	ldr	r2, [r3, #0]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8016d40:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d46:	687a      	ldr	r2, [r7, #4]
 8016d48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8016d4a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2200      	movs	r2, #0
 8016d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2201      	movs	r2, #1
 8016d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d003      	beq.n	8016d6c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d68:	6878      	ldr	r0, [r7, #4]
 8016d6a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8016d6c:	2300      	movs	r3, #0
}
 8016d6e:	4618      	mov	r0, r3
 8016d70:	3710      	adds	r7, #16
 8016d72:	46bd      	mov	sp, r7
 8016d74:	bd80      	pop	{r7, pc}
 8016d76:	bf00      	nop
 8016d78:	40020010 	.word	0x40020010
 8016d7c:	40020028 	.word	0x40020028
 8016d80:	40020040 	.word	0x40020040
 8016d84:	40020058 	.word	0x40020058
 8016d88:	40020070 	.word	0x40020070
 8016d8c:	40020088 	.word	0x40020088
 8016d90:	400200a0 	.word	0x400200a0
 8016d94:	400200b8 	.word	0x400200b8
 8016d98:	40020410 	.word	0x40020410
 8016d9c:	40020428 	.word	0x40020428
 8016da0:	40020440 	.word	0x40020440
 8016da4:	40020458 	.word	0x40020458
 8016da8:	40020470 	.word	0x40020470
 8016dac:	40020488 	.word	0x40020488
 8016db0:	400204a0 	.word	0x400204a0
 8016db4:	400204b8 	.word	0x400204b8
 8016db8:	58025408 	.word	0x58025408
 8016dbc:	5802541c 	.word	0x5802541c
 8016dc0:	58025430 	.word	0x58025430
 8016dc4:	58025444 	.word	0x58025444
 8016dc8:	58025458 	.word	0x58025458
 8016dcc:	5802546c 	.word	0x5802546c
 8016dd0:	58025480 	.word	0x58025480
 8016dd4:	58025494 	.word	0x58025494

08016dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b08a      	sub	sp, #40	; 0x28
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8016de0:	2300      	movs	r3, #0
 8016de2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016de4:	4b67      	ldr	r3, [pc, #412]	; (8016f84 <HAL_DMA_IRQHandler+0x1ac>)
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	4a67      	ldr	r2, [pc, #412]	; (8016f88 <HAL_DMA_IRQHandler+0x1b0>)
 8016dea:	fba2 2303 	umull	r2, r3, r2, r3
 8016dee:	0a9b      	lsrs	r3, r3, #10
 8016df0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016df6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016dfc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8016dfe:	6a3b      	ldr	r3, [r7, #32]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8016e04:	69fb      	ldr	r3, [r7, #28]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	4a5f      	ldr	r2, [pc, #380]	; (8016f8c <HAL_DMA_IRQHandler+0x1b4>)
 8016e10:	4293      	cmp	r3, r2
 8016e12:	d04a      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	4a5d      	ldr	r2, [pc, #372]	; (8016f90 <HAL_DMA_IRQHandler+0x1b8>)
 8016e1a:	4293      	cmp	r3, r2
 8016e1c:	d045      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	4a5c      	ldr	r2, [pc, #368]	; (8016f94 <HAL_DMA_IRQHandler+0x1bc>)
 8016e24:	4293      	cmp	r3, r2
 8016e26:	d040      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	4a5a      	ldr	r2, [pc, #360]	; (8016f98 <HAL_DMA_IRQHandler+0x1c0>)
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	d03b      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	4a59      	ldr	r2, [pc, #356]	; (8016f9c <HAL_DMA_IRQHandler+0x1c4>)
 8016e38:	4293      	cmp	r3, r2
 8016e3a:	d036      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	4a57      	ldr	r2, [pc, #348]	; (8016fa0 <HAL_DMA_IRQHandler+0x1c8>)
 8016e42:	4293      	cmp	r3, r2
 8016e44:	d031      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	4a56      	ldr	r2, [pc, #344]	; (8016fa4 <HAL_DMA_IRQHandler+0x1cc>)
 8016e4c:	4293      	cmp	r3, r2
 8016e4e:	d02c      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	4a54      	ldr	r2, [pc, #336]	; (8016fa8 <HAL_DMA_IRQHandler+0x1d0>)
 8016e56:	4293      	cmp	r3, r2
 8016e58:	d027      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	4a53      	ldr	r2, [pc, #332]	; (8016fac <HAL_DMA_IRQHandler+0x1d4>)
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d022      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	4a51      	ldr	r2, [pc, #324]	; (8016fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8016e6a:	4293      	cmp	r3, r2
 8016e6c:	d01d      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	4a50      	ldr	r2, [pc, #320]	; (8016fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8016e74:	4293      	cmp	r3, r2
 8016e76:	d018      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	4a4e      	ldr	r2, [pc, #312]	; (8016fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8016e7e:	4293      	cmp	r3, r2
 8016e80:	d013      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	4a4d      	ldr	r2, [pc, #308]	; (8016fbc <HAL_DMA_IRQHandler+0x1e4>)
 8016e88:	4293      	cmp	r3, r2
 8016e8a:	d00e      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	4a4b      	ldr	r2, [pc, #300]	; (8016fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8016e92:	4293      	cmp	r3, r2
 8016e94:	d009      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	4a4a      	ldr	r2, [pc, #296]	; (8016fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8016e9c:	4293      	cmp	r3, r2
 8016e9e:	d004      	beq.n	8016eaa <HAL_DMA_IRQHandler+0xd2>
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	4a48      	ldr	r2, [pc, #288]	; (8016fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8016ea6:	4293      	cmp	r3, r2
 8016ea8:	d101      	bne.n	8016eae <HAL_DMA_IRQHandler+0xd6>
 8016eaa:	2301      	movs	r3, #1
 8016eac:	e000      	b.n	8016eb0 <HAL_DMA_IRQHandler+0xd8>
 8016eae:	2300      	movs	r3, #0
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	f000 842b 	beq.w	801770c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016eba:	f003 031f 	and.w	r3, r3, #31
 8016ebe:	2208      	movs	r2, #8
 8016ec0:	409a      	lsls	r2, r3
 8016ec2:	69bb      	ldr	r3, [r7, #24]
 8016ec4:	4013      	ands	r3, r2
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	f000 80a2 	beq.w	8017010 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	4a2e      	ldr	r2, [pc, #184]	; (8016f8c <HAL_DMA_IRQHandler+0x1b4>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	d04a      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	4a2d      	ldr	r2, [pc, #180]	; (8016f90 <HAL_DMA_IRQHandler+0x1b8>)
 8016edc:	4293      	cmp	r3, r2
 8016ede:	d045      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	4a2b      	ldr	r2, [pc, #172]	; (8016f94 <HAL_DMA_IRQHandler+0x1bc>)
 8016ee6:	4293      	cmp	r3, r2
 8016ee8:	d040      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	4a2a      	ldr	r2, [pc, #168]	; (8016f98 <HAL_DMA_IRQHandler+0x1c0>)
 8016ef0:	4293      	cmp	r3, r2
 8016ef2:	d03b      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	4a28      	ldr	r2, [pc, #160]	; (8016f9c <HAL_DMA_IRQHandler+0x1c4>)
 8016efa:	4293      	cmp	r3, r2
 8016efc:	d036      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	4a27      	ldr	r2, [pc, #156]	; (8016fa0 <HAL_DMA_IRQHandler+0x1c8>)
 8016f04:	4293      	cmp	r3, r2
 8016f06:	d031      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	4a25      	ldr	r2, [pc, #148]	; (8016fa4 <HAL_DMA_IRQHandler+0x1cc>)
 8016f0e:	4293      	cmp	r3, r2
 8016f10:	d02c      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	4a24      	ldr	r2, [pc, #144]	; (8016fa8 <HAL_DMA_IRQHandler+0x1d0>)
 8016f18:	4293      	cmp	r3, r2
 8016f1a:	d027      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	4a22      	ldr	r2, [pc, #136]	; (8016fac <HAL_DMA_IRQHandler+0x1d4>)
 8016f22:	4293      	cmp	r3, r2
 8016f24:	d022      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	4a21      	ldr	r2, [pc, #132]	; (8016fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8016f2c:	4293      	cmp	r3, r2
 8016f2e:	d01d      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	4a1f      	ldr	r2, [pc, #124]	; (8016fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8016f36:	4293      	cmp	r3, r2
 8016f38:	d018      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	4a1e      	ldr	r2, [pc, #120]	; (8016fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8016f40:	4293      	cmp	r3, r2
 8016f42:	d013      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	4a1c      	ldr	r2, [pc, #112]	; (8016fbc <HAL_DMA_IRQHandler+0x1e4>)
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	d00e      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	4a1b      	ldr	r2, [pc, #108]	; (8016fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8016f54:	4293      	cmp	r3, r2
 8016f56:	d009      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	4a19      	ldr	r2, [pc, #100]	; (8016fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8016f5e:	4293      	cmp	r3, r2
 8016f60:	d004      	beq.n	8016f6c <HAL_DMA_IRQHandler+0x194>
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	4a18      	ldr	r2, [pc, #96]	; (8016fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8016f68:	4293      	cmp	r3, r2
 8016f6a:	d12f      	bne.n	8016fcc <HAL_DMA_IRQHandler+0x1f4>
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	f003 0304 	and.w	r3, r3, #4
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	bf14      	ite	ne
 8016f7a:	2301      	movne	r3, #1
 8016f7c:	2300      	moveq	r3, #0
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	e02e      	b.n	8016fe0 <HAL_DMA_IRQHandler+0x208>
 8016f82:	bf00      	nop
 8016f84:	24000658 	.word	0x24000658
 8016f88:	1b4e81b5 	.word	0x1b4e81b5
 8016f8c:	40020010 	.word	0x40020010
 8016f90:	40020028 	.word	0x40020028
 8016f94:	40020040 	.word	0x40020040
 8016f98:	40020058 	.word	0x40020058
 8016f9c:	40020070 	.word	0x40020070
 8016fa0:	40020088 	.word	0x40020088
 8016fa4:	400200a0 	.word	0x400200a0
 8016fa8:	400200b8 	.word	0x400200b8
 8016fac:	40020410 	.word	0x40020410
 8016fb0:	40020428 	.word	0x40020428
 8016fb4:	40020440 	.word	0x40020440
 8016fb8:	40020458 	.word	0x40020458
 8016fbc:	40020470 	.word	0x40020470
 8016fc0:	40020488 	.word	0x40020488
 8016fc4:	400204a0 	.word	0x400204a0
 8016fc8:	400204b8 	.word	0x400204b8
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	f003 0308 	and.w	r3, r3, #8
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	bf14      	ite	ne
 8016fda:	2301      	movne	r3, #1
 8016fdc:	2300      	moveq	r3, #0
 8016fde:	b2db      	uxtb	r3, r3
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d015      	beq.n	8017010 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	681a      	ldr	r2, [r3, #0]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	f022 0204 	bic.w	r2, r2, #4
 8016ff2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ff8:	f003 031f 	and.w	r3, r3, #31
 8016ffc:	2208      	movs	r2, #8
 8016ffe:	409a      	lsls	r2, r3
 8017000:	6a3b      	ldr	r3, [r7, #32]
 8017002:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017008:	f043 0201 	orr.w	r2, r3, #1
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017014:	f003 031f 	and.w	r3, r3, #31
 8017018:	69ba      	ldr	r2, [r7, #24]
 801701a:	fa22 f303 	lsr.w	r3, r2, r3
 801701e:	f003 0301 	and.w	r3, r3, #1
 8017022:	2b00      	cmp	r3, #0
 8017024:	d06e      	beq.n	8017104 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	4a69      	ldr	r2, [pc, #420]	; (80171d0 <HAL_DMA_IRQHandler+0x3f8>)
 801702c:	4293      	cmp	r3, r2
 801702e:	d04a      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	4a67      	ldr	r2, [pc, #412]	; (80171d4 <HAL_DMA_IRQHandler+0x3fc>)
 8017036:	4293      	cmp	r3, r2
 8017038:	d045      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	4a66      	ldr	r2, [pc, #408]	; (80171d8 <HAL_DMA_IRQHandler+0x400>)
 8017040:	4293      	cmp	r3, r2
 8017042:	d040      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	4a64      	ldr	r2, [pc, #400]	; (80171dc <HAL_DMA_IRQHandler+0x404>)
 801704a:	4293      	cmp	r3, r2
 801704c:	d03b      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	4a63      	ldr	r2, [pc, #396]	; (80171e0 <HAL_DMA_IRQHandler+0x408>)
 8017054:	4293      	cmp	r3, r2
 8017056:	d036      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	4a61      	ldr	r2, [pc, #388]	; (80171e4 <HAL_DMA_IRQHandler+0x40c>)
 801705e:	4293      	cmp	r3, r2
 8017060:	d031      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	4a60      	ldr	r2, [pc, #384]	; (80171e8 <HAL_DMA_IRQHandler+0x410>)
 8017068:	4293      	cmp	r3, r2
 801706a:	d02c      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	4a5e      	ldr	r2, [pc, #376]	; (80171ec <HAL_DMA_IRQHandler+0x414>)
 8017072:	4293      	cmp	r3, r2
 8017074:	d027      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	4a5d      	ldr	r2, [pc, #372]	; (80171f0 <HAL_DMA_IRQHandler+0x418>)
 801707c:	4293      	cmp	r3, r2
 801707e:	d022      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	4a5b      	ldr	r2, [pc, #364]	; (80171f4 <HAL_DMA_IRQHandler+0x41c>)
 8017086:	4293      	cmp	r3, r2
 8017088:	d01d      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	4a5a      	ldr	r2, [pc, #360]	; (80171f8 <HAL_DMA_IRQHandler+0x420>)
 8017090:	4293      	cmp	r3, r2
 8017092:	d018      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	4a58      	ldr	r2, [pc, #352]	; (80171fc <HAL_DMA_IRQHandler+0x424>)
 801709a:	4293      	cmp	r3, r2
 801709c:	d013      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	4a57      	ldr	r2, [pc, #348]	; (8017200 <HAL_DMA_IRQHandler+0x428>)
 80170a4:	4293      	cmp	r3, r2
 80170a6:	d00e      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	4a55      	ldr	r2, [pc, #340]	; (8017204 <HAL_DMA_IRQHandler+0x42c>)
 80170ae:	4293      	cmp	r3, r2
 80170b0:	d009      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	4a54      	ldr	r2, [pc, #336]	; (8017208 <HAL_DMA_IRQHandler+0x430>)
 80170b8:	4293      	cmp	r3, r2
 80170ba:	d004      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x2ee>
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	4a52      	ldr	r2, [pc, #328]	; (801720c <HAL_DMA_IRQHandler+0x434>)
 80170c2:	4293      	cmp	r3, r2
 80170c4:	d10a      	bne.n	80170dc <HAL_DMA_IRQHandler+0x304>
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	695b      	ldr	r3, [r3, #20]
 80170cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	bf14      	ite	ne
 80170d4:	2301      	movne	r3, #1
 80170d6:	2300      	moveq	r3, #0
 80170d8:	b2db      	uxtb	r3, r3
 80170da:	e003      	b.n	80170e4 <HAL_DMA_IRQHandler+0x30c>
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	2300      	movs	r3, #0
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d00d      	beq.n	8017104 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80170ec:	f003 031f 	and.w	r3, r3, #31
 80170f0:	2201      	movs	r2, #1
 80170f2:	409a      	lsls	r2, r3
 80170f4:	6a3b      	ldr	r3, [r7, #32]
 80170f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170fc:	f043 0202 	orr.w	r2, r3, #2
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017108:	f003 031f 	and.w	r3, r3, #31
 801710c:	2204      	movs	r2, #4
 801710e:	409a      	lsls	r2, r3
 8017110:	69bb      	ldr	r3, [r7, #24]
 8017112:	4013      	ands	r3, r2
 8017114:	2b00      	cmp	r3, #0
 8017116:	f000 808f 	beq.w	8017238 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	4a2c      	ldr	r2, [pc, #176]	; (80171d0 <HAL_DMA_IRQHandler+0x3f8>)
 8017120:	4293      	cmp	r3, r2
 8017122:	d04a      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	4a2a      	ldr	r2, [pc, #168]	; (80171d4 <HAL_DMA_IRQHandler+0x3fc>)
 801712a:	4293      	cmp	r3, r2
 801712c:	d045      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	4a29      	ldr	r2, [pc, #164]	; (80171d8 <HAL_DMA_IRQHandler+0x400>)
 8017134:	4293      	cmp	r3, r2
 8017136:	d040      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	4a27      	ldr	r2, [pc, #156]	; (80171dc <HAL_DMA_IRQHandler+0x404>)
 801713e:	4293      	cmp	r3, r2
 8017140:	d03b      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	4a26      	ldr	r2, [pc, #152]	; (80171e0 <HAL_DMA_IRQHandler+0x408>)
 8017148:	4293      	cmp	r3, r2
 801714a:	d036      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	4a24      	ldr	r2, [pc, #144]	; (80171e4 <HAL_DMA_IRQHandler+0x40c>)
 8017152:	4293      	cmp	r3, r2
 8017154:	d031      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	4a23      	ldr	r2, [pc, #140]	; (80171e8 <HAL_DMA_IRQHandler+0x410>)
 801715c:	4293      	cmp	r3, r2
 801715e:	d02c      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	4a21      	ldr	r2, [pc, #132]	; (80171ec <HAL_DMA_IRQHandler+0x414>)
 8017166:	4293      	cmp	r3, r2
 8017168:	d027      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	4a20      	ldr	r2, [pc, #128]	; (80171f0 <HAL_DMA_IRQHandler+0x418>)
 8017170:	4293      	cmp	r3, r2
 8017172:	d022      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	4a1e      	ldr	r2, [pc, #120]	; (80171f4 <HAL_DMA_IRQHandler+0x41c>)
 801717a:	4293      	cmp	r3, r2
 801717c:	d01d      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	4a1d      	ldr	r2, [pc, #116]	; (80171f8 <HAL_DMA_IRQHandler+0x420>)
 8017184:	4293      	cmp	r3, r2
 8017186:	d018      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	4a1b      	ldr	r2, [pc, #108]	; (80171fc <HAL_DMA_IRQHandler+0x424>)
 801718e:	4293      	cmp	r3, r2
 8017190:	d013      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	4a1a      	ldr	r2, [pc, #104]	; (8017200 <HAL_DMA_IRQHandler+0x428>)
 8017198:	4293      	cmp	r3, r2
 801719a:	d00e      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	4a18      	ldr	r2, [pc, #96]	; (8017204 <HAL_DMA_IRQHandler+0x42c>)
 80171a2:	4293      	cmp	r3, r2
 80171a4:	d009      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	4a17      	ldr	r2, [pc, #92]	; (8017208 <HAL_DMA_IRQHandler+0x430>)
 80171ac:	4293      	cmp	r3, r2
 80171ae:	d004      	beq.n	80171ba <HAL_DMA_IRQHandler+0x3e2>
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	4a15      	ldr	r2, [pc, #84]	; (801720c <HAL_DMA_IRQHandler+0x434>)
 80171b6:	4293      	cmp	r3, r2
 80171b8:	d12a      	bne.n	8017210 <HAL_DMA_IRQHandler+0x438>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	f003 0302 	and.w	r3, r3, #2
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	bf14      	ite	ne
 80171c8:	2301      	movne	r3, #1
 80171ca:	2300      	moveq	r3, #0
 80171cc:	b2db      	uxtb	r3, r3
 80171ce:	e023      	b.n	8017218 <HAL_DMA_IRQHandler+0x440>
 80171d0:	40020010 	.word	0x40020010
 80171d4:	40020028 	.word	0x40020028
 80171d8:	40020040 	.word	0x40020040
 80171dc:	40020058 	.word	0x40020058
 80171e0:	40020070 	.word	0x40020070
 80171e4:	40020088 	.word	0x40020088
 80171e8:	400200a0 	.word	0x400200a0
 80171ec:	400200b8 	.word	0x400200b8
 80171f0:	40020410 	.word	0x40020410
 80171f4:	40020428 	.word	0x40020428
 80171f8:	40020440 	.word	0x40020440
 80171fc:	40020458 	.word	0x40020458
 8017200:	40020470 	.word	0x40020470
 8017204:	40020488 	.word	0x40020488
 8017208:	400204a0 	.word	0x400204a0
 801720c:	400204b8 	.word	0x400204b8
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	2300      	movs	r3, #0
 8017218:	2b00      	cmp	r3, #0
 801721a:	d00d      	beq.n	8017238 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017220:	f003 031f 	and.w	r3, r3, #31
 8017224:	2204      	movs	r2, #4
 8017226:	409a      	lsls	r2, r3
 8017228:	6a3b      	ldr	r3, [r7, #32]
 801722a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017230:	f043 0204 	orr.w	r2, r3, #4
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801723c:	f003 031f 	and.w	r3, r3, #31
 8017240:	2210      	movs	r2, #16
 8017242:	409a      	lsls	r2, r3
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	4013      	ands	r3, r2
 8017248:	2b00      	cmp	r3, #0
 801724a:	f000 80a6 	beq.w	801739a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	4a85      	ldr	r2, [pc, #532]	; (8017468 <HAL_DMA_IRQHandler+0x690>)
 8017254:	4293      	cmp	r3, r2
 8017256:	d04a      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	4a83      	ldr	r2, [pc, #524]	; (801746c <HAL_DMA_IRQHandler+0x694>)
 801725e:	4293      	cmp	r3, r2
 8017260:	d045      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	4a82      	ldr	r2, [pc, #520]	; (8017470 <HAL_DMA_IRQHandler+0x698>)
 8017268:	4293      	cmp	r3, r2
 801726a:	d040      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	4a80      	ldr	r2, [pc, #512]	; (8017474 <HAL_DMA_IRQHandler+0x69c>)
 8017272:	4293      	cmp	r3, r2
 8017274:	d03b      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	4a7f      	ldr	r2, [pc, #508]	; (8017478 <HAL_DMA_IRQHandler+0x6a0>)
 801727c:	4293      	cmp	r3, r2
 801727e:	d036      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	4a7d      	ldr	r2, [pc, #500]	; (801747c <HAL_DMA_IRQHandler+0x6a4>)
 8017286:	4293      	cmp	r3, r2
 8017288:	d031      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	4a7c      	ldr	r2, [pc, #496]	; (8017480 <HAL_DMA_IRQHandler+0x6a8>)
 8017290:	4293      	cmp	r3, r2
 8017292:	d02c      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	4a7a      	ldr	r2, [pc, #488]	; (8017484 <HAL_DMA_IRQHandler+0x6ac>)
 801729a:	4293      	cmp	r3, r2
 801729c:	d027      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	4a79      	ldr	r2, [pc, #484]	; (8017488 <HAL_DMA_IRQHandler+0x6b0>)
 80172a4:	4293      	cmp	r3, r2
 80172a6:	d022      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	4a77      	ldr	r2, [pc, #476]	; (801748c <HAL_DMA_IRQHandler+0x6b4>)
 80172ae:	4293      	cmp	r3, r2
 80172b0:	d01d      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	4a76      	ldr	r2, [pc, #472]	; (8017490 <HAL_DMA_IRQHandler+0x6b8>)
 80172b8:	4293      	cmp	r3, r2
 80172ba:	d018      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	4a74      	ldr	r2, [pc, #464]	; (8017494 <HAL_DMA_IRQHandler+0x6bc>)
 80172c2:	4293      	cmp	r3, r2
 80172c4:	d013      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	4a73      	ldr	r2, [pc, #460]	; (8017498 <HAL_DMA_IRQHandler+0x6c0>)
 80172cc:	4293      	cmp	r3, r2
 80172ce:	d00e      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	4a71      	ldr	r2, [pc, #452]	; (801749c <HAL_DMA_IRQHandler+0x6c4>)
 80172d6:	4293      	cmp	r3, r2
 80172d8:	d009      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	4a70      	ldr	r2, [pc, #448]	; (80174a0 <HAL_DMA_IRQHandler+0x6c8>)
 80172e0:	4293      	cmp	r3, r2
 80172e2:	d004      	beq.n	80172ee <HAL_DMA_IRQHandler+0x516>
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	4a6e      	ldr	r2, [pc, #440]	; (80174a4 <HAL_DMA_IRQHandler+0x6cc>)
 80172ea:	4293      	cmp	r3, r2
 80172ec:	d10a      	bne.n	8017304 <HAL_DMA_IRQHandler+0x52c>
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	f003 0308 	and.w	r3, r3, #8
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	bf14      	ite	ne
 80172fc:	2301      	movne	r3, #1
 80172fe:	2300      	moveq	r3, #0
 8017300:	b2db      	uxtb	r3, r3
 8017302:	e009      	b.n	8017318 <HAL_DMA_IRQHandler+0x540>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	f003 0304 	and.w	r3, r3, #4
 801730e:	2b00      	cmp	r3, #0
 8017310:	bf14      	ite	ne
 8017312:	2301      	movne	r3, #1
 8017314:	2300      	moveq	r3, #0
 8017316:	b2db      	uxtb	r3, r3
 8017318:	2b00      	cmp	r3, #0
 801731a:	d03e      	beq.n	801739a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017320:	f003 031f 	and.w	r3, r3, #31
 8017324:	2210      	movs	r2, #16
 8017326:	409a      	lsls	r2, r3
 8017328:	6a3b      	ldr	r3, [r7, #32]
 801732a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017336:	2b00      	cmp	r3, #0
 8017338:	d018      	beq.n	801736c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017344:	2b00      	cmp	r3, #0
 8017346:	d108      	bne.n	801735a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801734c:	2b00      	cmp	r3, #0
 801734e:	d024      	beq.n	801739a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017354:	6878      	ldr	r0, [r7, #4]
 8017356:	4798      	blx	r3
 8017358:	e01f      	b.n	801739a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801735e:	2b00      	cmp	r3, #0
 8017360:	d01b      	beq.n	801739a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	4798      	blx	r3
 801736a:	e016      	b.n	801739a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017376:	2b00      	cmp	r3, #0
 8017378:	d107      	bne.n	801738a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	681a      	ldr	r2, [r3, #0]
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	f022 0208 	bic.w	r2, r2, #8
 8017388:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801738e:	2b00      	cmp	r3, #0
 8017390:	d003      	beq.n	801739a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017396:	6878      	ldr	r0, [r7, #4]
 8017398:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801739e:	f003 031f 	and.w	r3, r3, #31
 80173a2:	2220      	movs	r2, #32
 80173a4:	409a      	lsls	r2, r3
 80173a6:	69bb      	ldr	r3, [r7, #24]
 80173a8:	4013      	ands	r3, r2
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	f000 8110 	beq.w	80175d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	4a2c      	ldr	r2, [pc, #176]	; (8017468 <HAL_DMA_IRQHandler+0x690>)
 80173b6:	4293      	cmp	r3, r2
 80173b8:	d04a      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	4a2b      	ldr	r2, [pc, #172]	; (801746c <HAL_DMA_IRQHandler+0x694>)
 80173c0:	4293      	cmp	r3, r2
 80173c2:	d045      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	4a29      	ldr	r2, [pc, #164]	; (8017470 <HAL_DMA_IRQHandler+0x698>)
 80173ca:	4293      	cmp	r3, r2
 80173cc:	d040      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	4a28      	ldr	r2, [pc, #160]	; (8017474 <HAL_DMA_IRQHandler+0x69c>)
 80173d4:	4293      	cmp	r3, r2
 80173d6:	d03b      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	4a26      	ldr	r2, [pc, #152]	; (8017478 <HAL_DMA_IRQHandler+0x6a0>)
 80173de:	4293      	cmp	r3, r2
 80173e0:	d036      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	4a25      	ldr	r2, [pc, #148]	; (801747c <HAL_DMA_IRQHandler+0x6a4>)
 80173e8:	4293      	cmp	r3, r2
 80173ea:	d031      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	4a23      	ldr	r2, [pc, #140]	; (8017480 <HAL_DMA_IRQHandler+0x6a8>)
 80173f2:	4293      	cmp	r3, r2
 80173f4:	d02c      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	4a22      	ldr	r2, [pc, #136]	; (8017484 <HAL_DMA_IRQHandler+0x6ac>)
 80173fc:	4293      	cmp	r3, r2
 80173fe:	d027      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	4a20      	ldr	r2, [pc, #128]	; (8017488 <HAL_DMA_IRQHandler+0x6b0>)
 8017406:	4293      	cmp	r3, r2
 8017408:	d022      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	4a1f      	ldr	r2, [pc, #124]	; (801748c <HAL_DMA_IRQHandler+0x6b4>)
 8017410:	4293      	cmp	r3, r2
 8017412:	d01d      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	4a1d      	ldr	r2, [pc, #116]	; (8017490 <HAL_DMA_IRQHandler+0x6b8>)
 801741a:	4293      	cmp	r3, r2
 801741c:	d018      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	4a1c      	ldr	r2, [pc, #112]	; (8017494 <HAL_DMA_IRQHandler+0x6bc>)
 8017424:	4293      	cmp	r3, r2
 8017426:	d013      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	4a1a      	ldr	r2, [pc, #104]	; (8017498 <HAL_DMA_IRQHandler+0x6c0>)
 801742e:	4293      	cmp	r3, r2
 8017430:	d00e      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	4a19      	ldr	r2, [pc, #100]	; (801749c <HAL_DMA_IRQHandler+0x6c4>)
 8017438:	4293      	cmp	r3, r2
 801743a:	d009      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	4a17      	ldr	r2, [pc, #92]	; (80174a0 <HAL_DMA_IRQHandler+0x6c8>)
 8017442:	4293      	cmp	r3, r2
 8017444:	d004      	beq.n	8017450 <HAL_DMA_IRQHandler+0x678>
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	4a16      	ldr	r2, [pc, #88]	; (80174a4 <HAL_DMA_IRQHandler+0x6cc>)
 801744c:	4293      	cmp	r3, r2
 801744e:	d12b      	bne.n	80174a8 <HAL_DMA_IRQHandler+0x6d0>
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	f003 0310 	and.w	r3, r3, #16
 801745a:	2b00      	cmp	r3, #0
 801745c:	bf14      	ite	ne
 801745e:	2301      	movne	r3, #1
 8017460:	2300      	moveq	r3, #0
 8017462:	b2db      	uxtb	r3, r3
 8017464:	e02a      	b.n	80174bc <HAL_DMA_IRQHandler+0x6e4>
 8017466:	bf00      	nop
 8017468:	40020010 	.word	0x40020010
 801746c:	40020028 	.word	0x40020028
 8017470:	40020040 	.word	0x40020040
 8017474:	40020058 	.word	0x40020058
 8017478:	40020070 	.word	0x40020070
 801747c:	40020088 	.word	0x40020088
 8017480:	400200a0 	.word	0x400200a0
 8017484:	400200b8 	.word	0x400200b8
 8017488:	40020410 	.word	0x40020410
 801748c:	40020428 	.word	0x40020428
 8017490:	40020440 	.word	0x40020440
 8017494:	40020458 	.word	0x40020458
 8017498:	40020470 	.word	0x40020470
 801749c:	40020488 	.word	0x40020488
 80174a0:	400204a0 	.word	0x400204a0
 80174a4:	400204b8 	.word	0x400204b8
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	f003 0302 	and.w	r3, r3, #2
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	bf14      	ite	ne
 80174b6:	2301      	movne	r3, #1
 80174b8:	2300      	moveq	r3, #0
 80174ba:	b2db      	uxtb	r3, r3
 80174bc:	2b00      	cmp	r3, #0
 80174be:	f000 8087 	beq.w	80175d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80174c6:	f003 031f 	and.w	r3, r3, #31
 80174ca:	2220      	movs	r2, #32
 80174cc:	409a      	lsls	r2, r3
 80174ce:	6a3b      	ldr	r3, [r7, #32]
 80174d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80174d8:	b2db      	uxtb	r3, r3
 80174da:	2b04      	cmp	r3, #4
 80174dc:	d139      	bne.n	8017552 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	681a      	ldr	r2, [r3, #0]
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	f022 0216 	bic.w	r2, r2, #22
 80174ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	695a      	ldr	r2, [r3, #20]
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80174fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017502:	2b00      	cmp	r3, #0
 8017504:	d103      	bne.n	801750e <HAL_DMA_IRQHandler+0x736>
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801750a:	2b00      	cmp	r3, #0
 801750c:	d007      	beq.n	801751e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	681a      	ldr	r2, [r3, #0]
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	f022 0208 	bic.w	r2, r2, #8
 801751c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017522:	f003 031f 	and.w	r3, r3, #31
 8017526:	223f      	movs	r2, #63	; 0x3f
 8017528:	409a      	lsls	r2, r3
 801752a:	6a3b      	ldr	r3, [r7, #32]
 801752c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	2200      	movs	r2, #0
 8017532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2201      	movs	r2, #1
 801753a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017542:	2b00      	cmp	r3, #0
 8017544:	f000 834a 	beq.w	8017bdc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	4798      	blx	r3
          }
          return;
 8017550:	e344      	b.n	8017bdc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801755c:	2b00      	cmp	r3, #0
 801755e:	d018      	beq.n	8017592 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801756a:	2b00      	cmp	r3, #0
 801756c:	d108      	bne.n	8017580 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017572:	2b00      	cmp	r3, #0
 8017574:	d02c      	beq.n	80175d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801757a:	6878      	ldr	r0, [r7, #4]
 801757c:	4798      	blx	r3
 801757e:	e027      	b.n	80175d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017584:	2b00      	cmp	r3, #0
 8017586:	d023      	beq.n	80175d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801758c:	6878      	ldr	r0, [r7, #4]
 801758e:	4798      	blx	r3
 8017590:	e01e      	b.n	80175d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801759c:	2b00      	cmp	r3, #0
 801759e:	d10f      	bne.n	80175c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	681a      	ldr	r2, [r3, #0]
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	f022 0210 	bic.w	r2, r2, #16
 80175ae:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	2200      	movs	r2, #0
 80175b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2201      	movs	r2, #1
 80175bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d003      	beq.n	80175d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175cc:	6878      	ldr	r0, [r7, #4]
 80175ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	f000 8306 	beq.w	8017be6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80175de:	f003 0301 	and.w	r3, r3, #1
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f000 8088 	beq.w	80176f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2204      	movs	r2, #4
 80175ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	4a7a      	ldr	r2, [pc, #488]	; (80177e0 <HAL_DMA_IRQHandler+0xa08>)
 80175f6:	4293      	cmp	r3, r2
 80175f8:	d04a      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	4a79      	ldr	r2, [pc, #484]	; (80177e4 <HAL_DMA_IRQHandler+0xa0c>)
 8017600:	4293      	cmp	r3, r2
 8017602:	d045      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	4a77      	ldr	r2, [pc, #476]	; (80177e8 <HAL_DMA_IRQHandler+0xa10>)
 801760a:	4293      	cmp	r3, r2
 801760c:	d040      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	4a76      	ldr	r2, [pc, #472]	; (80177ec <HAL_DMA_IRQHandler+0xa14>)
 8017614:	4293      	cmp	r3, r2
 8017616:	d03b      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	4a74      	ldr	r2, [pc, #464]	; (80177f0 <HAL_DMA_IRQHandler+0xa18>)
 801761e:	4293      	cmp	r3, r2
 8017620:	d036      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	4a73      	ldr	r2, [pc, #460]	; (80177f4 <HAL_DMA_IRQHandler+0xa1c>)
 8017628:	4293      	cmp	r3, r2
 801762a:	d031      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	4a71      	ldr	r2, [pc, #452]	; (80177f8 <HAL_DMA_IRQHandler+0xa20>)
 8017632:	4293      	cmp	r3, r2
 8017634:	d02c      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	4a70      	ldr	r2, [pc, #448]	; (80177fc <HAL_DMA_IRQHandler+0xa24>)
 801763c:	4293      	cmp	r3, r2
 801763e:	d027      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	4a6e      	ldr	r2, [pc, #440]	; (8017800 <HAL_DMA_IRQHandler+0xa28>)
 8017646:	4293      	cmp	r3, r2
 8017648:	d022      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	4a6d      	ldr	r2, [pc, #436]	; (8017804 <HAL_DMA_IRQHandler+0xa2c>)
 8017650:	4293      	cmp	r3, r2
 8017652:	d01d      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	4a6b      	ldr	r2, [pc, #428]	; (8017808 <HAL_DMA_IRQHandler+0xa30>)
 801765a:	4293      	cmp	r3, r2
 801765c:	d018      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	4a6a      	ldr	r2, [pc, #424]	; (801780c <HAL_DMA_IRQHandler+0xa34>)
 8017664:	4293      	cmp	r3, r2
 8017666:	d013      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	4a68      	ldr	r2, [pc, #416]	; (8017810 <HAL_DMA_IRQHandler+0xa38>)
 801766e:	4293      	cmp	r3, r2
 8017670:	d00e      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	4a67      	ldr	r2, [pc, #412]	; (8017814 <HAL_DMA_IRQHandler+0xa3c>)
 8017678:	4293      	cmp	r3, r2
 801767a:	d009      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	4a65      	ldr	r2, [pc, #404]	; (8017818 <HAL_DMA_IRQHandler+0xa40>)
 8017682:	4293      	cmp	r3, r2
 8017684:	d004      	beq.n	8017690 <HAL_DMA_IRQHandler+0x8b8>
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	4a64      	ldr	r2, [pc, #400]	; (801781c <HAL_DMA_IRQHandler+0xa44>)
 801768c:	4293      	cmp	r3, r2
 801768e:	d108      	bne.n	80176a2 <HAL_DMA_IRQHandler+0x8ca>
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	681a      	ldr	r2, [r3, #0]
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	f022 0201 	bic.w	r2, r2, #1
 801769e:	601a      	str	r2, [r3, #0]
 80176a0:	e007      	b.n	80176b2 <HAL_DMA_IRQHandler+0x8da>
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	681a      	ldr	r2, [r3, #0]
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	f022 0201 	bic.w	r2, r2, #1
 80176b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	3301      	adds	r3, #1
 80176b6:	60fb      	str	r3, [r7, #12]
 80176b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176ba:	429a      	cmp	r2, r3
 80176bc:	d307      	bcc.n	80176ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	f003 0301 	and.w	r3, r3, #1
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d1f2      	bne.n	80176b2 <HAL_DMA_IRQHandler+0x8da>
 80176cc:	e000      	b.n	80176d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80176ce:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	2200      	movs	r2, #0
 80176d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	f003 0301 	and.w	r3, r3, #1
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d004      	beq.n	80176f0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	2203      	movs	r2, #3
 80176ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80176ee:	e003      	b.n	80176f8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2201      	movs	r2, #1
 80176f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	f000 8272 	beq.w	8017be6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	4798      	blx	r3
 801770a:	e26c      	b.n	8017be6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	4a43      	ldr	r2, [pc, #268]	; (8017820 <HAL_DMA_IRQHandler+0xa48>)
 8017712:	4293      	cmp	r3, r2
 8017714:	d022      	beq.n	801775c <HAL_DMA_IRQHandler+0x984>
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	4a42      	ldr	r2, [pc, #264]	; (8017824 <HAL_DMA_IRQHandler+0xa4c>)
 801771c:	4293      	cmp	r3, r2
 801771e:	d01d      	beq.n	801775c <HAL_DMA_IRQHandler+0x984>
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	4a40      	ldr	r2, [pc, #256]	; (8017828 <HAL_DMA_IRQHandler+0xa50>)
 8017726:	4293      	cmp	r3, r2
 8017728:	d018      	beq.n	801775c <HAL_DMA_IRQHandler+0x984>
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	4a3f      	ldr	r2, [pc, #252]	; (801782c <HAL_DMA_IRQHandler+0xa54>)
 8017730:	4293      	cmp	r3, r2
 8017732:	d013      	beq.n	801775c <HAL_DMA_IRQHandler+0x984>
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	4a3d      	ldr	r2, [pc, #244]	; (8017830 <HAL_DMA_IRQHandler+0xa58>)
 801773a:	4293      	cmp	r3, r2
 801773c:	d00e      	beq.n	801775c <HAL_DMA_IRQHandler+0x984>
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	4a3c      	ldr	r2, [pc, #240]	; (8017834 <HAL_DMA_IRQHandler+0xa5c>)
 8017744:	4293      	cmp	r3, r2
 8017746:	d009      	beq.n	801775c <HAL_DMA_IRQHandler+0x984>
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	4a3a      	ldr	r2, [pc, #232]	; (8017838 <HAL_DMA_IRQHandler+0xa60>)
 801774e:	4293      	cmp	r3, r2
 8017750:	d004      	beq.n	801775c <HAL_DMA_IRQHandler+0x984>
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	4a39      	ldr	r2, [pc, #228]	; (801783c <HAL_DMA_IRQHandler+0xa64>)
 8017758:	4293      	cmp	r3, r2
 801775a:	d101      	bne.n	8017760 <HAL_DMA_IRQHandler+0x988>
 801775c:	2301      	movs	r3, #1
 801775e:	e000      	b.n	8017762 <HAL_DMA_IRQHandler+0x98a>
 8017760:	2300      	movs	r3, #0
 8017762:	2b00      	cmp	r3, #0
 8017764:	f000 823f 	beq.w	8017be6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017774:	f003 031f 	and.w	r3, r3, #31
 8017778:	2204      	movs	r2, #4
 801777a:	409a      	lsls	r2, r3
 801777c:	697b      	ldr	r3, [r7, #20]
 801777e:	4013      	ands	r3, r2
 8017780:	2b00      	cmp	r3, #0
 8017782:	f000 80cd 	beq.w	8017920 <HAL_DMA_IRQHandler+0xb48>
 8017786:	693b      	ldr	r3, [r7, #16]
 8017788:	f003 0304 	and.w	r3, r3, #4
 801778c:	2b00      	cmp	r3, #0
 801778e:	f000 80c7 	beq.w	8017920 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017796:	f003 031f 	and.w	r3, r3, #31
 801779a:	2204      	movs	r2, #4
 801779c:	409a      	lsls	r2, r3
 801779e:	69fb      	ldr	r3, [r7, #28]
 80177a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80177a2:	693b      	ldr	r3, [r7, #16]
 80177a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d049      	beq.n	8017840 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80177ac:	693b      	ldr	r3, [r7, #16]
 80177ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d109      	bne.n	80177ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	f000 8210 	beq.w	8017be0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80177c4:	6878      	ldr	r0, [r7, #4]
 80177c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80177c8:	e20a      	b.n	8017be0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	f000 8206 	beq.w	8017be0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80177dc:	e200      	b.n	8017be0 <HAL_DMA_IRQHandler+0xe08>
 80177de:	bf00      	nop
 80177e0:	40020010 	.word	0x40020010
 80177e4:	40020028 	.word	0x40020028
 80177e8:	40020040 	.word	0x40020040
 80177ec:	40020058 	.word	0x40020058
 80177f0:	40020070 	.word	0x40020070
 80177f4:	40020088 	.word	0x40020088
 80177f8:	400200a0 	.word	0x400200a0
 80177fc:	400200b8 	.word	0x400200b8
 8017800:	40020410 	.word	0x40020410
 8017804:	40020428 	.word	0x40020428
 8017808:	40020440 	.word	0x40020440
 801780c:	40020458 	.word	0x40020458
 8017810:	40020470 	.word	0x40020470
 8017814:	40020488 	.word	0x40020488
 8017818:	400204a0 	.word	0x400204a0
 801781c:	400204b8 	.word	0x400204b8
 8017820:	58025408 	.word	0x58025408
 8017824:	5802541c 	.word	0x5802541c
 8017828:	58025430 	.word	0x58025430
 801782c:	58025444 	.word	0x58025444
 8017830:	58025458 	.word	0x58025458
 8017834:	5802546c 	.word	0x5802546c
 8017838:	58025480 	.word	0x58025480
 801783c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	f003 0320 	and.w	r3, r3, #32
 8017846:	2b00      	cmp	r3, #0
 8017848:	d160      	bne.n	801790c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	4a8c      	ldr	r2, [pc, #560]	; (8017a80 <HAL_DMA_IRQHandler+0xca8>)
 8017850:	4293      	cmp	r3, r2
 8017852:	d04a      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	4a8a      	ldr	r2, [pc, #552]	; (8017a84 <HAL_DMA_IRQHandler+0xcac>)
 801785a:	4293      	cmp	r3, r2
 801785c:	d045      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	4a89      	ldr	r2, [pc, #548]	; (8017a88 <HAL_DMA_IRQHandler+0xcb0>)
 8017864:	4293      	cmp	r3, r2
 8017866:	d040      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	4a87      	ldr	r2, [pc, #540]	; (8017a8c <HAL_DMA_IRQHandler+0xcb4>)
 801786e:	4293      	cmp	r3, r2
 8017870:	d03b      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	4a86      	ldr	r2, [pc, #536]	; (8017a90 <HAL_DMA_IRQHandler+0xcb8>)
 8017878:	4293      	cmp	r3, r2
 801787a:	d036      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	4a84      	ldr	r2, [pc, #528]	; (8017a94 <HAL_DMA_IRQHandler+0xcbc>)
 8017882:	4293      	cmp	r3, r2
 8017884:	d031      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	4a83      	ldr	r2, [pc, #524]	; (8017a98 <HAL_DMA_IRQHandler+0xcc0>)
 801788c:	4293      	cmp	r3, r2
 801788e:	d02c      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	4a81      	ldr	r2, [pc, #516]	; (8017a9c <HAL_DMA_IRQHandler+0xcc4>)
 8017896:	4293      	cmp	r3, r2
 8017898:	d027      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	4a80      	ldr	r2, [pc, #512]	; (8017aa0 <HAL_DMA_IRQHandler+0xcc8>)
 80178a0:	4293      	cmp	r3, r2
 80178a2:	d022      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	4a7e      	ldr	r2, [pc, #504]	; (8017aa4 <HAL_DMA_IRQHandler+0xccc>)
 80178aa:	4293      	cmp	r3, r2
 80178ac:	d01d      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	4a7d      	ldr	r2, [pc, #500]	; (8017aa8 <HAL_DMA_IRQHandler+0xcd0>)
 80178b4:	4293      	cmp	r3, r2
 80178b6:	d018      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	4a7b      	ldr	r2, [pc, #492]	; (8017aac <HAL_DMA_IRQHandler+0xcd4>)
 80178be:	4293      	cmp	r3, r2
 80178c0:	d013      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	4a7a      	ldr	r2, [pc, #488]	; (8017ab0 <HAL_DMA_IRQHandler+0xcd8>)
 80178c8:	4293      	cmp	r3, r2
 80178ca:	d00e      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	4a78      	ldr	r2, [pc, #480]	; (8017ab4 <HAL_DMA_IRQHandler+0xcdc>)
 80178d2:	4293      	cmp	r3, r2
 80178d4:	d009      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	4a77      	ldr	r2, [pc, #476]	; (8017ab8 <HAL_DMA_IRQHandler+0xce0>)
 80178dc:	4293      	cmp	r3, r2
 80178de:	d004      	beq.n	80178ea <HAL_DMA_IRQHandler+0xb12>
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	4a75      	ldr	r2, [pc, #468]	; (8017abc <HAL_DMA_IRQHandler+0xce4>)
 80178e6:	4293      	cmp	r3, r2
 80178e8:	d108      	bne.n	80178fc <HAL_DMA_IRQHandler+0xb24>
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	681a      	ldr	r2, [r3, #0]
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	f022 0208 	bic.w	r2, r2, #8
 80178f8:	601a      	str	r2, [r3, #0]
 80178fa:	e007      	b.n	801790c <HAL_DMA_IRQHandler+0xb34>
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	681a      	ldr	r2, [r3, #0]
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	f022 0204 	bic.w	r2, r2, #4
 801790a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017910:	2b00      	cmp	r3, #0
 8017912:	f000 8165 	beq.w	8017be0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801791e:	e15f      	b.n	8017be0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017924:	f003 031f 	and.w	r3, r3, #31
 8017928:	2202      	movs	r2, #2
 801792a:	409a      	lsls	r2, r3
 801792c:	697b      	ldr	r3, [r7, #20]
 801792e:	4013      	ands	r3, r2
 8017930:	2b00      	cmp	r3, #0
 8017932:	f000 80c5 	beq.w	8017ac0 <HAL_DMA_IRQHandler+0xce8>
 8017936:	693b      	ldr	r3, [r7, #16]
 8017938:	f003 0302 	and.w	r3, r3, #2
 801793c:	2b00      	cmp	r3, #0
 801793e:	f000 80bf 	beq.w	8017ac0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017946:	f003 031f 	and.w	r3, r3, #31
 801794a:	2202      	movs	r2, #2
 801794c:	409a      	lsls	r2, r3
 801794e:	69fb      	ldr	r3, [r7, #28]
 8017950:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017952:	693b      	ldr	r3, [r7, #16]
 8017954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017958:	2b00      	cmp	r3, #0
 801795a:	d018      	beq.n	801798e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801795c:	693b      	ldr	r3, [r7, #16]
 801795e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017962:	2b00      	cmp	r3, #0
 8017964:	d109      	bne.n	801797a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801796a:	2b00      	cmp	r3, #0
 801796c:	f000 813a 	beq.w	8017be4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017978:	e134      	b.n	8017be4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801797e:	2b00      	cmp	r3, #0
 8017980:	f000 8130 	beq.w	8017be4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017988:	6878      	ldr	r0, [r7, #4]
 801798a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801798c:	e12a      	b.n	8017be4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	f003 0320 	and.w	r3, r3, #32
 8017994:	2b00      	cmp	r3, #0
 8017996:	d168      	bne.n	8017a6a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	4a38      	ldr	r2, [pc, #224]	; (8017a80 <HAL_DMA_IRQHandler+0xca8>)
 801799e:	4293      	cmp	r3, r2
 80179a0:	d04a      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	4a37      	ldr	r2, [pc, #220]	; (8017a84 <HAL_DMA_IRQHandler+0xcac>)
 80179a8:	4293      	cmp	r3, r2
 80179aa:	d045      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	4a35      	ldr	r2, [pc, #212]	; (8017a88 <HAL_DMA_IRQHandler+0xcb0>)
 80179b2:	4293      	cmp	r3, r2
 80179b4:	d040      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	4a34      	ldr	r2, [pc, #208]	; (8017a8c <HAL_DMA_IRQHandler+0xcb4>)
 80179bc:	4293      	cmp	r3, r2
 80179be:	d03b      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	4a32      	ldr	r2, [pc, #200]	; (8017a90 <HAL_DMA_IRQHandler+0xcb8>)
 80179c6:	4293      	cmp	r3, r2
 80179c8:	d036      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	4a31      	ldr	r2, [pc, #196]	; (8017a94 <HAL_DMA_IRQHandler+0xcbc>)
 80179d0:	4293      	cmp	r3, r2
 80179d2:	d031      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	4a2f      	ldr	r2, [pc, #188]	; (8017a98 <HAL_DMA_IRQHandler+0xcc0>)
 80179da:	4293      	cmp	r3, r2
 80179dc:	d02c      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	4a2e      	ldr	r2, [pc, #184]	; (8017a9c <HAL_DMA_IRQHandler+0xcc4>)
 80179e4:	4293      	cmp	r3, r2
 80179e6:	d027      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	4a2c      	ldr	r2, [pc, #176]	; (8017aa0 <HAL_DMA_IRQHandler+0xcc8>)
 80179ee:	4293      	cmp	r3, r2
 80179f0:	d022      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	4a2b      	ldr	r2, [pc, #172]	; (8017aa4 <HAL_DMA_IRQHandler+0xccc>)
 80179f8:	4293      	cmp	r3, r2
 80179fa:	d01d      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	4a29      	ldr	r2, [pc, #164]	; (8017aa8 <HAL_DMA_IRQHandler+0xcd0>)
 8017a02:	4293      	cmp	r3, r2
 8017a04:	d018      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	4a28      	ldr	r2, [pc, #160]	; (8017aac <HAL_DMA_IRQHandler+0xcd4>)
 8017a0c:	4293      	cmp	r3, r2
 8017a0e:	d013      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	4a26      	ldr	r2, [pc, #152]	; (8017ab0 <HAL_DMA_IRQHandler+0xcd8>)
 8017a16:	4293      	cmp	r3, r2
 8017a18:	d00e      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	4a25      	ldr	r2, [pc, #148]	; (8017ab4 <HAL_DMA_IRQHandler+0xcdc>)
 8017a20:	4293      	cmp	r3, r2
 8017a22:	d009      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	4a23      	ldr	r2, [pc, #140]	; (8017ab8 <HAL_DMA_IRQHandler+0xce0>)
 8017a2a:	4293      	cmp	r3, r2
 8017a2c:	d004      	beq.n	8017a38 <HAL_DMA_IRQHandler+0xc60>
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	4a22      	ldr	r2, [pc, #136]	; (8017abc <HAL_DMA_IRQHandler+0xce4>)
 8017a34:	4293      	cmp	r3, r2
 8017a36:	d108      	bne.n	8017a4a <HAL_DMA_IRQHandler+0xc72>
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	681a      	ldr	r2, [r3, #0]
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	f022 0214 	bic.w	r2, r2, #20
 8017a46:	601a      	str	r2, [r3, #0]
 8017a48:	e007      	b.n	8017a5a <HAL_DMA_IRQHandler+0xc82>
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	681a      	ldr	r2, [r3, #0]
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	f022 020a 	bic.w	r2, r2, #10
 8017a58:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	2201      	movs	r2, #1
 8017a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	f000 80b8 	beq.w	8017be4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017a7c:	e0b2      	b.n	8017be4 <HAL_DMA_IRQHandler+0xe0c>
 8017a7e:	bf00      	nop
 8017a80:	40020010 	.word	0x40020010
 8017a84:	40020028 	.word	0x40020028
 8017a88:	40020040 	.word	0x40020040
 8017a8c:	40020058 	.word	0x40020058
 8017a90:	40020070 	.word	0x40020070
 8017a94:	40020088 	.word	0x40020088
 8017a98:	400200a0 	.word	0x400200a0
 8017a9c:	400200b8 	.word	0x400200b8
 8017aa0:	40020410 	.word	0x40020410
 8017aa4:	40020428 	.word	0x40020428
 8017aa8:	40020440 	.word	0x40020440
 8017aac:	40020458 	.word	0x40020458
 8017ab0:	40020470 	.word	0x40020470
 8017ab4:	40020488 	.word	0x40020488
 8017ab8:	400204a0 	.word	0x400204a0
 8017abc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ac4:	f003 031f 	and.w	r3, r3, #31
 8017ac8:	2208      	movs	r2, #8
 8017aca:	409a      	lsls	r2, r3
 8017acc:	697b      	ldr	r3, [r7, #20]
 8017ace:	4013      	ands	r3, r2
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	f000 8088 	beq.w	8017be6 <HAL_DMA_IRQHandler+0xe0e>
 8017ad6:	693b      	ldr	r3, [r7, #16]
 8017ad8:	f003 0308 	and.w	r3, r3, #8
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	f000 8082 	beq.w	8017be6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	4a41      	ldr	r2, [pc, #260]	; (8017bec <HAL_DMA_IRQHandler+0xe14>)
 8017ae8:	4293      	cmp	r3, r2
 8017aea:	d04a      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	4a3f      	ldr	r2, [pc, #252]	; (8017bf0 <HAL_DMA_IRQHandler+0xe18>)
 8017af2:	4293      	cmp	r3, r2
 8017af4:	d045      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	4a3e      	ldr	r2, [pc, #248]	; (8017bf4 <HAL_DMA_IRQHandler+0xe1c>)
 8017afc:	4293      	cmp	r3, r2
 8017afe:	d040      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	4a3c      	ldr	r2, [pc, #240]	; (8017bf8 <HAL_DMA_IRQHandler+0xe20>)
 8017b06:	4293      	cmp	r3, r2
 8017b08:	d03b      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	4a3b      	ldr	r2, [pc, #236]	; (8017bfc <HAL_DMA_IRQHandler+0xe24>)
 8017b10:	4293      	cmp	r3, r2
 8017b12:	d036      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	4a39      	ldr	r2, [pc, #228]	; (8017c00 <HAL_DMA_IRQHandler+0xe28>)
 8017b1a:	4293      	cmp	r3, r2
 8017b1c:	d031      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	4a38      	ldr	r2, [pc, #224]	; (8017c04 <HAL_DMA_IRQHandler+0xe2c>)
 8017b24:	4293      	cmp	r3, r2
 8017b26:	d02c      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	4a36      	ldr	r2, [pc, #216]	; (8017c08 <HAL_DMA_IRQHandler+0xe30>)
 8017b2e:	4293      	cmp	r3, r2
 8017b30:	d027      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	4a35      	ldr	r2, [pc, #212]	; (8017c0c <HAL_DMA_IRQHandler+0xe34>)
 8017b38:	4293      	cmp	r3, r2
 8017b3a:	d022      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	4a33      	ldr	r2, [pc, #204]	; (8017c10 <HAL_DMA_IRQHandler+0xe38>)
 8017b42:	4293      	cmp	r3, r2
 8017b44:	d01d      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	4a32      	ldr	r2, [pc, #200]	; (8017c14 <HAL_DMA_IRQHandler+0xe3c>)
 8017b4c:	4293      	cmp	r3, r2
 8017b4e:	d018      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	4a30      	ldr	r2, [pc, #192]	; (8017c18 <HAL_DMA_IRQHandler+0xe40>)
 8017b56:	4293      	cmp	r3, r2
 8017b58:	d013      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	4a2f      	ldr	r2, [pc, #188]	; (8017c1c <HAL_DMA_IRQHandler+0xe44>)
 8017b60:	4293      	cmp	r3, r2
 8017b62:	d00e      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	4a2d      	ldr	r2, [pc, #180]	; (8017c20 <HAL_DMA_IRQHandler+0xe48>)
 8017b6a:	4293      	cmp	r3, r2
 8017b6c:	d009      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	4a2c      	ldr	r2, [pc, #176]	; (8017c24 <HAL_DMA_IRQHandler+0xe4c>)
 8017b74:	4293      	cmp	r3, r2
 8017b76:	d004      	beq.n	8017b82 <HAL_DMA_IRQHandler+0xdaa>
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	4a2a      	ldr	r2, [pc, #168]	; (8017c28 <HAL_DMA_IRQHandler+0xe50>)
 8017b7e:	4293      	cmp	r3, r2
 8017b80:	d108      	bne.n	8017b94 <HAL_DMA_IRQHandler+0xdbc>
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	681a      	ldr	r2, [r3, #0]
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	f022 021c 	bic.w	r2, r2, #28
 8017b90:	601a      	str	r2, [r3, #0]
 8017b92:	e007      	b.n	8017ba4 <HAL_DMA_IRQHandler+0xdcc>
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	681a      	ldr	r2, [r3, #0]
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	f022 020e 	bic.w	r2, r2, #14
 8017ba2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ba8:	f003 031f 	and.w	r3, r3, #31
 8017bac:	2201      	movs	r2, #1
 8017bae:	409a      	lsls	r2, r3
 8017bb0:	69fb      	ldr	r3, [r7, #28]
 8017bb2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	2201      	movs	r2, #1
 8017bb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2201      	movs	r2, #1
 8017bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d009      	beq.n	8017be6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bd6:	6878      	ldr	r0, [r7, #4]
 8017bd8:	4798      	blx	r3
 8017bda:	e004      	b.n	8017be6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8017bdc:	bf00      	nop
 8017bde:	e002      	b.n	8017be6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017be0:	bf00      	nop
 8017be2:	e000      	b.n	8017be6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8017be4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8017be6:	3728      	adds	r7, #40	; 0x28
 8017be8:	46bd      	mov	sp, r7
 8017bea:	bd80      	pop	{r7, pc}
 8017bec:	40020010 	.word	0x40020010
 8017bf0:	40020028 	.word	0x40020028
 8017bf4:	40020040 	.word	0x40020040
 8017bf8:	40020058 	.word	0x40020058
 8017bfc:	40020070 	.word	0x40020070
 8017c00:	40020088 	.word	0x40020088
 8017c04:	400200a0 	.word	0x400200a0
 8017c08:	400200b8 	.word	0x400200b8
 8017c0c:	40020410 	.word	0x40020410
 8017c10:	40020428 	.word	0x40020428
 8017c14:	40020440 	.word	0x40020440
 8017c18:	40020458 	.word	0x40020458
 8017c1c:	40020470 	.word	0x40020470
 8017c20:	40020488 	.word	0x40020488
 8017c24:	400204a0 	.word	0x400204a0
 8017c28:	400204b8 	.word	0x400204b8

08017c2c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8017c2c:	b480      	push	{r7}
 8017c2e:	b083      	sub	sp, #12
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017c3a:	b2db      	uxtb	r3, r3
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	370c      	adds	r7, #12
 8017c40:	46bd      	mov	sp, r7
 8017c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c46:	4770      	bx	lr

08017c48 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8017c48:	b480      	push	{r7}
 8017c4a:	b083      	sub	sp, #12
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8017c54:	4618      	mov	r0, r3
 8017c56:	370c      	adds	r7, #12
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5e:	4770      	bx	lr

08017c60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017c60:	b480      	push	{r7}
 8017c62:	b087      	sub	sp, #28
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	60f8      	str	r0, [r7, #12]
 8017c68:	60b9      	str	r1, [r7, #8]
 8017c6a:	607a      	str	r2, [r7, #4]
 8017c6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	4a84      	ldr	r2, [pc, #528]	; (8017e90 <DMA_SetConfig+0x230>)
 8017c80:	4293      	cmp	r3, r2
 8017c82:	d072      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	4a82      	ldr	r2, [pc, #520]	; (8017e94 <DMA_SetConfig+0x234>)
 8017c8a:	4293      	cmp	r3, r2
 8017c8c:	d06d      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	4a81      	ldr	r2, [pc, #516]	; (8017e98 <DMA_SetConfig+0x238>)
 8017c94:	4293      	cmp	r3, r2
 8017c96:	d068      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	4a7f      	ldr	r2, [pc, #508]	; (8017e9c <DMA_SetConfig+0x23c>)
 8017c9e:	4293      	cmp	r3, r2
 8017ca0:	d063      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	4a7e      	ldr	r2, [pc, #504]	; (8017ea0 <DMA_SetConfig+0x240>)
 8017ca8:	4293      	cmp	r3, r2
 8017caa:	d05e      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	4a7c      	ldr	r2, [pc, #496]	; (8017ea4 <DMA_SetConfig+0x244>)
 8017cb2:	4293      	cmp	r3, r2
 8017cb4:	d059      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4a7b      	ldr	r2, [pc, #492]	; (8017ea8 <DMA_SetConfig+0x248>)
 8017cbc:	4293      	cmp	r3, r2
 8017cbe:	d054      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	4a79      	ldr	r2, [pc, #484]	; (8017eac <DMA_SetConfig+0x24c>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d04f      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	4a78      	ldr	r2, [pc, #480]	; (8017eb0 <DMA_SetConfig+0x250>)
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	d04a      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	4a76      	ldr	r2, [pc, #472]	; (8017eb4 <DMA_SetConfig+0x254>)
 8017cda:	4293      	cmp	r3, r2
 8017cdc:	d045      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	4a75      	ldr	r2, [pc, #468]	; (8017eb8 <DMA_SetConfig+0x258>)
 8017ce4:	4293      	cmp	r3, r2
 8017ce6:	d040      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	4a73      	ldr	r2, [pc, #460]	; (8017ebc <DMA_SetConfig+0x25c>)
 8017cee:	4293      	cmp	r3, r2
 8017cf0:	d03b      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	4a72      	ldr	r2, [pc, #456]	; (8017ec0 <DMA_SetConfig+0x260>)
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	d036      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	4a70      	ldr	r2, [pc, #448]	; (8017ec4 <DMA_SetConfig+0x264>)
 8017d02:	4293      	cmp	r3, r2
 8017d04:	d031      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	4a6f      	ldr	r2, [pc, #444]	; (8017ec8 <DMA_SetConfig+0x268>)
 8017d0c:	4293      	cmp	r3, r2
 8017d0e:	d02c      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	4a6d      	ldr	r2, [pc, #436]	; (8017ecc <DMA_SetConfig+0x26c>)
 8017d16:	4293      	cmp	r3, r2
 8017d18:	d027      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	4a6c      	ldr	r2, [pc, #432]	; (8017ed0 <DMA_SetConfig+0x270>)
 8017d20:	4293      	cmp	r3, r2
 8017d22:	d022      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	4a6a      	ldr	r2, [pc, #424]	; (8017ed4 <DMA_SetConfig+0x274>)
 8017d2a:	4293      	cmp	r3, r2
 8017d2c:	d01d      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	4a69      	ldr	r2, [pc, #420]	; (8017ed8 <DMA_SetConfig+0x278>)
 8017d34:	4293      	cmp	r3, r2
 8017d36:	d018      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	4a67      	ldr	r2, [pc, #412]	; (8017edc <DMA_SetConfig+0x27c>)
 8017d3e:	4293      	cmp	r3, r2
 8017d40:	d013      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	4a66      	ldr	r2, [pc, #408]	; (8017ee0 <DMA_SetConfig+0x280>)
 8017d48:	4293      	cmp	r3, r2
 8017d4a:	d00e      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	4a64      	ldr	r2, [pc, #400]	; (8017ee4 <DMA_SetConfig+0x284>)
 8017d52:	4293      	cmp	r3, r2
 8017d54:	d009      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	4a63      	ldr	r2, [pc, #396]	; (8017ee8 <DMA_SetConfig+0x288>)
 8017d5c:	4293      	cmp	r3, r2
 8017d5e:	d004      	beq.n	8017d6a <DMA_SetConfig+0x10a>
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	4a61      	ldr	r2, [pc, #388]	; (8017eec <DMA_SetConfig+0x28c>)
 8017d66:	4293      	cmp	r3, r2
 8017d68:	d101      	bne.n	8017d6e <DMA_SetConfig+0x10e>
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	e000      	b.n	8017d70 <DMA_SetConfig+0x110>
 8017d6e:	2300      	movs	r3, #0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d00d      	beq.n	8017d90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017d78:	68fa      	ldr	r2, [r7, #12]
 8017d7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017d7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d004      	beq.n	8017d90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d8a:	68fa      	ldr	r2, [r7, #12]
 8017d8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8017d8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	4a3e      	ldr	r2, [pc, #248]	; (8017e90 <DMA_SetConfig+0x230>)
 8017d96:	4293      	cmp	r3, r2
 8017d98:	d04a      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	4a3d      	ldr	r2, [pc, #244]	; (8017e94 <DMA_SetConfig+0x234>)
 8017da0:	4293      	cmp	r3, r2
 8017da2:	d045      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	4a3b      	ldr	r2, [pc, #236]	; (8017e98 <DMA_SetConfig+0x238>)
 8017daa:	4293      	cmp	r3, r2
 8017dac:	d040      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	4a3a      	ldr	r2, [pc, #232]	; (8017e9c <DMA_SetConfig+0x23c>)
 8017db4:	4293      	cmp	r3, r2
 8017db6:	d03b      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	4a38      	ldr	r2, [pc, #224]	; (8017ea0 <DMA_SetConfig+0x240>)
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d036      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	4a37      	ldr	r2, [pc, #220]	; (8017ea4 <DMA_SetConfig+0x244>)
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	d031      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	4a35      	ldr	r2, [pc, #212]	; (8017ea8 <DMA_SetConfig+0x248>)
 8017dd2:	4293      	cmp	r3, r2
 8017dd4:	d02c      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	4a34      	ldr	r2, [pc, #208]	; (8017eac <DMA_SetConfig+0x24c>)
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d027      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	4a32      	ldr	r2, [pc, #200]	; (8017eb0 <DMA_SetConfig+0x250>)
 8017de6:	4293      	cmp	r3, r2
 8017de8:	d022      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	4a31      	ldr	r2, [pc, #196]	; (8017eb4 <DMA_SetConfig+0x254>)
 8017df0:	4293      	cmp	r3, r2
 8017df2:	d01d      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4a2f      	ldr	r2, [pc, #188]	; (8017eb8 <DMA_SetConfig+0x258>)
 8017dfa:	4293      	cmp	r3, r2
 8017dfc:	d018      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	4a2e      	ldr	r2, [pc, #184]	; (8017ebc <DMA_SetConfig+0x25c>)
 8017e04:	4293      	cmp	r3, r2
 8017e06:	d013      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	4a2c      	ldr	r2, [pc, #176]	; (8017ec0 <DMA_SetConfig+0x260>)
 8017e0e:	4293      	cmp	r3, r2
 8017e10:	d00e      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	4a2b      	ldr	r2, [pc, #172]	; (8017ec4 <DMA_SetConfig+0x264>)
 8017e18:	4293      	cmp	r3, r2
 8017e1a:	d009      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	4a29      	ldr	r2, [pc, #164]	; (8017ec8 <DMA_SetConfig+0x268>)
 8017e22:	4293      	cmp	r3, r2
 8017e24:	d004      	beq.n	8017e30 <DMA_SetConfig+0x1d0>
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	4a28      	ldr	r2, [pc, #160]	; (8017ecc <DMA_SetConfig+0x26c>)
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	d101      	bne.n	8017e34 <DMA_SetConfig+0x1d4>
 8017e30:	2301      	movs	r3, #1
 8017e32:	e000      	b.n	8017e36 <DMA_SetConfig+0x1d6>
 8017e34:	2300      	movs	r3, #0
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d05a      	beq.n	8017ef0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e3e:	f003 031f 	and.w	r3, r3, #31
 8017e42:	223f      	movs	r2, #63	; 0x3f
 8017e44:	409a      	lsls	r2, r3
 8017e46:	697b      	ldr	r3, [r7, #20]
 8017e48:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	681a      	ldr	r2, [r3, #0]
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8017e58:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	683a      	ldr	r2, [r7, #0]
 8017e60:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	689b      	ldr	r3, [r3, #8]
 8017e66:	2b40      	cmp	r3, #64	; 0x40
 8017e68:	d108      	bne.n	8017e7c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	687a      	ldr	r2, [r7, #4]
 8017e70:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	68ba      	ldr	r2, [r7, #8]
 8017e78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8017e7a:	e087      	b.n	8017f8c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	68ba      	ldr	r2, [r7, #8]
 8017e82:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	687a      	ldr	r2, [r7, #4]
 8017e8a:	60da      	str	r2, [r3, #12]
}
 8017e8c:	e07e      	b.n	8017f8c <DMA_SetConfig+0x32c>
 8017e8e:	bf00      	nop
 8017e90:	40020010 	.word	0x40020010
 8017e94:	40020028 	.word	0x40020028
 8017e98:	40020040 	.word	0x40020040
 8017e9c:	40020058 	.word	0x40020058
 8017ea0:	40020070 	.word	0x40020070
 8017ea4:	40020088 	.word	0x40020088
 8017ea8:	400200a0 	.word	0x400200a0
 8017eac:	400200b8 	.word	0x400200b8
 8017eb0:	40020410 	.word	0x40020410
 8017eb4:	40020428 	.word	0x40020428
 8017eb8:	40020440 	.word	0x40020440
 8017ebc:	40020458 	.word	0x40020458
 8017ec0:	40020470 	.word	0x40020470
 8017ec4:	40020488 	.word	0x40020488
 8017ec8:	400204a0 	.word	0x400204a0
 8017ecc:	400204b8 	.word	0x400204b8
 8017ed0:	58025408 	.word	0x58025408
 8017ed4:	5802541c 	.word	0x5802541c
 8017ed8:	58025430 	.word	0x58025430
 8017edc:	58025444 	.word	0x58025444
 8017ee0:	58025458 	.word	0x58025458
 8017ee4:	5802546c 	.word	0x5802546c
 8017ee8:	58025480 	.word	0x58025480
 8017eec:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	4a28      	ldr	r2, [pc, #160]	; (8017f98 <DMA_SetConfig+0x338>)
 8017ef6:	4293      	cmp	r3, r2
 8017ef8:	d022      	beq.n	8017f40 <DMA_SetConfig+0x2e0>
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	4a27      	ldr	r2, [pc, #156]	; (8017f9c <DMA_SetConfig+0x33c>)
 8017f00:	4293      	cmp	r3, r2
 8017f02:	d01d      	beq.n	8017f40 <DMA_SetConfig+0x2e0>
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	4a25      	ldr	r2, [pc, #148]	; (8017fa0 <DMA_SetConfig+0x340>)
 8017f0a:	4293      	cmp	r3, r2
 8017f0c:	d018      	beq.n	8017f40 <DMA_SetConfig+0x2e0>
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	4a24      	ldr	r2, [pc, #144]	; (8017fa4 <DMA_SetConfig+0x344>)
 8017f14:	4293      	cmp	r3, r2
 8017f16:	d013      	beq.n	8017f40 <DMA_SetConfig+0x2e0>
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	4a22      	ldr	r2, [pc, #136]	; (8017fa8 <DMA_SetConfig+0x348>)
 8017f1e:	4293      	cmp	r3, r2
 8017f20:	d00e      	beq.n	8017f40 <DMA_SetConfig+0x2e0>
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	4a21      	ldr	r2, [pc, #132]	; (8017fac <DMA_SetConfig+0x34c>)
 8017f28:	4293      	cmp	r3, r2
 8017f2a:	d009      	beq.n	8017f40 <DMA_SetConfig+0x2e0>
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	4a1f      	ldr	r2, [pc, #124]	; (8017fb0 <DMA_SetConfig+0x350>)
 8017f32:	4293      	cmp	r3, r2
 8017f34:	d004      	beq.n	8017f40 <DMA_SetConfig+0x2e0>
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	4a1e      	ldr	r2, [pc, #120]	; (8017fb4 <DMA_SetConfig+0x354>)
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	d101      	bne.n	8017f44 <DMA_SetConfig+0x2e4>
 8017f40:	2301      	movs	r3, #1
 8017f42:	e000      	b.n	8017f46 <DMA_SetConfig+0x2e6>
 8017f44:	2300      	movs	r3, #0
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d020      	beq.n	8017f8c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017f4e:	f003 031f 	and.w	r3, r3, #31
 8017f52:	2201      	movs	r2, #1
 8017f54:	409a      	lsls	r2, r3
 8017f56:	693b      	ldr	r3, [r7, #16]
 8017f58:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	683a      	ldr	r2, [r7, #0]
 8017f60:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	689b      	ldr	r3, [r3, #8]
 8017f66:	2b40      	cmp	r3, #64	; 0x40
 8017f68:	d108      	bne.n	8017f7c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	687a      	ldr	r2, [r7, #4]
 8017f70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	68ba      	ldr	r2, [r7, #8]
 8017f78:	60da      	str	r2, [r3, #12]
}
 8017f7a:	e007      	b.n	8017f8c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	68ba      	ldr	r2, [r7, #8]
 8017f82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	687a      	ldr	r2, [r7, #4]
 8017f8a:	60da      	str	r2, [r3, #12]
}
 8017f8c:	bf00      	nop
 8017f8e:	371c      	adds	r7, #28
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr
 8017f98:	58025408 	.word	0x58025408
 8017f9c:	5802541c 	.word	0x5802541c
 8017fa0:	58025430 	.word	0x58025430
 8017fa4:	58025444 	.word	0x58025444
 8017fa8:	58025458 	.word	0x58025458
 8017fac:	5802546c 	.word	0x5802546c
 8017fb0:	58025480 	.word	0x58025480
 8017fb4:	58025494 	.word	0x58025494

08017fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8017fb8:	b480      	push	{r7}
 8017fba:	b085      	sub	sp, #20
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	4a42      	ldr	r2, [pc, #264]	; (80180d0 <DMA_CalcBaseAndBitshift+0x118>)
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	d04a      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4a41      	ldr	r2, [pc, #260]	; (80180d4 <DMA_CalcBaseAndBitshift+0x11c>)
 8017fd0:	4293      	cmp	r3, r2
 8017fd2:	d045      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	4a3f      	ldr	r2, [pc, #252]	; (80180d8 <DMA_CalcBaseAndBitshift+0x120>)
 8017fda:	4293      	cmp	r3, r2
 8017fdc:	d040      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	4a3e      	ldr	r2, [pc, #248]	; (80180dc <DMA_CalcBaseAndBitshift+0x124>)
 8017fe4:	4293      	cmp	r3, r2
 8017fe6:	d03b      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	4a3c      	ldr	r2, [pc, #240]	; (80180e0 <DMA_CalcBaseAndBitshift+0x128>)
 8017fee:	4293      	cmp	r3, r2
 8017ff0:	d036      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	4a3b      	ldr	r2, [pc, #236]	; (80180e4 <DMA_CalcBaseAndBitshift+0x12c>)
 8017ff8:	4293      	cmp	r3, r2
 8017ffa:	d031      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	4a39      	ldr	r2, [pc, #228]	; (80180e8 <DMA_CalcBaseAndBitshift+0x130>)
 8018002:	4293      	cmp	r3, r2
 8018004:	d02c      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	4a38      	ldr	r2, [pc, #224]	; (80180ec <DMA_CalcBaseAndBitshift+0x134>)
 801800c:	4293      	cmp	r3, r2
 801800e:	d027      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	4a36      	ldr	r2, [pc, #216]	; (80180f0 <DMA_CalcBaseAndBitshift+0x138>)
 8018016:	4293      	cmp	r3, r2
 8018018:	d022      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	4a35      	ldr	r2, [pc, #212]	; (80180f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8018020:	4293      	cmp	r3, r2
 8018022:	d01d      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	4a33      	ldr	r2, [pc, #204]	; (80180f8 <DMA_CalcBaseAndBitshift+0x140>)
 801802a:	4293      	cmp	r3, r2
 801802c:	d018      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	4a32      	ldr	r2, [pc, #200]	; (80180fc <DMA_CalcBaseAndBitshift+0x144>)
 8018034:	4293      	cmp	r3, r2
 8018036:	d013      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	4a30      	ldr	r2, [pc, #192]	; (8018100 <DMA_CalcBaseAndBitshift+0x148>)
 801803e:	4293      	cmp	r3, r2
 8018040:	d00e      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4a2f      	ldr	r2, [pc, #188]	; (8018104 <DMA_CalcBaseAndBitshift+0x14c>)
 8018048:	4293      	cmp	r3, r2
 801804a:	d009      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	4a2d      	ldr	r2, [pc, #180]	; (8018108 <DMA_CalcBaseAndBitshift+0x150>)
 8018052:	4293      	cmp	r3, r2
 8018054:	d004      	beq.n	8018060 <DMA_CalcBaseAndBitshift+0xa8>
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	4a2c      	ldr	r2, [pc, #176]	; (801810c <DMA_CalcBaseAndBitshift+0x154>)
 801805c:	4293      	cmp	r3, r2
 801805e:	d101      	bne.n	8018064 <DMA_CalcBaseAndBitshift+0xac>
 8018060:	2301      	movs	r3, #1
 8018062:	e000      	b.n	8018066 <DMA_CalcBaseAndBitshift+0xae>
 8018064:	2300      	movs	r3, #0
 8018066:	2b00      	cmp	r3, #0
 8018068:	d024      	beq.n	80180b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	b2db      	uxtb	r3, r3
 8018070:	3b10      	subs	r3, #16
 8018072:	4a27      	ldr	r2, [pc, #156]	; (8018110 <DMA_CalcBaseAndBitshift+0x158>)
 8018074:	fba2 2303 	umull	r2, r3, r2, r3
 8018078:	091b      	lsrs	r3, r3, #4
 801807a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	f003 0307 	and.w	r3, r3, #7
 8018082:	4a24      	ldr	r2, [pc, #144]	; (8018114 <DMA_CalcBaseAndBitshift+0x15c>)
 8018084:	5cd3      	ldrb	r3, [r2, r3]
 8018086:	461a      	mov	r2, r3
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	2b03      	cmp	r3, #3
 8018090:	d908      	bls.n	80180a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	461a      	mov	r2, r3
 8018098:	4b1f      	ldr	r3, [pc, #124]	; (8018118 <DMA_CalcBaseAndBitshift+0x160>)
 801809a:	4013      	ands	r3, r2
 801809c:	1d1a      	adds	r2, r3, #4
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	659a      	str	r2, [r3, #88]	; 0x58
 80180a2:	e00d      	b.n	80180c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	461a      	mov	r2, r3
 80180aa:	4b1b      	ldr	r3, [pc, #108]	; (8018118 <DMA_CalcBaseAndBitshift+0x160>)
 80180ac:	4013      	ands	r3, r2
 80180ae:	687a      	ldr	r2, [r7, #4]
 80180b0:	6593      	str	r3, [r2, #88]	; 0x58
 80180b2:	e005      	b.n	80180c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80180c4:	4618      	mov	r0, r3
 80180c6:	3714      	adds	r7, #20
 80180c8:	46bd      	mov	sp, r7
 80180ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ce:	4770      	bx	lr
 80180d0:	40020010 	.word	0x40020010
 80180d4:	40020028 	.word	0x40020028
 80180d8:	40020040 	.word	0x40020040
 80180dc:	40020058 	.word	0x40020058
 80180e0:	40020070 	.word	0x40020070
 80180e4:	40020088 	.word	0x40020088
 80180e8:	400200a0 	.word	0x400200a0
 80180ec:	400200b8 	.word	0x400200b8
 80180f0:	40020410 	.word	0x40020410
 80180f4:	40020428 	.word	0x40020428
 80180f8:	40020440 	.word	0x40020440
 80180fc:	40020458 	.word	0x40020458
 8018100:	40020470 	.word	0x40020470
 8018104:	40020488 	.word	0x40020488
 8018108:	400204a0 	.word	0x400204a0
 801810c:	400204b8 	.word	0x400204b8
 8018110:	aaaaaaab 	.word	0xaaaaaaab
 8018114:	0802fc2c 	.word	0x0802fc2c
 8018118:	fffffc00 	.word	0xfffffc00

0801811c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801811c:	b480      	push	{r7}
 801811e:	b085      	sub	sp, #20
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018124:	2300      	movs	r3, #0
 8018126:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	699b      	ldr	r3, [r3, #24]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d120      	bne.n	8018172 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018134:	2b03      	cmp	r3, #3
 8018136:	d858      	bhi.n	80181ea <DMA_CheckFifoParam+0xce>
 8018138:	a201      	add	r2, pc, #4	; (adr r2, 8018140 <DMA_CheckFifoParam+0x24>)
 801813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801813e:	bf00      	nop
 8018140:	08018151 	.word	0x08018151
 8018144:	08018163 	.word	0x08018163
 8018148:	08018151 	.word	0x08018151
 801814c:	080181eb 	.word	0x080181eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018158:	2b00      	cmp	r3, #0
 801815a:	d048      	beq.n	80181ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801815c:	2301      	movs	r3, #1
 801815e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8018160:	e045      	b.n	80181ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801816a:	d142      	bne.n	80181f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801816c:	2301      	movs	r3, #1
 801816e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8018170:	e03f      	b.n	80181f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	699b      	ldr	r3, [r3, #24]
 8018176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801817a:	d123      	bne.n	80181c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018180:	2b03      	cmp	r3, #3
 8018182:	d838      	bhi.n	80181f6 <DMA_CheckFifoParam+0xda>
 8018184:	a201      	add	r2, pc, #4	; (adr r2, 801818c <DMA_CheckFifoParam+0x70>)
 8018186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801818a:	bf00      	nop
 801818c:	0801819d 	.word	0x0801819d
 8018190:	080181a3 	.word	0x080181a3
 8018194:	0801819d 	.word	0x0801819d
 8018198:	080181b5 	.word	0x080181b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801819c:	2301      	movs	r3, #1
 801819e:	73fb      	strb	r3, [r7, #15]
        break;
 80181a0:	e030      	b.n	8018204 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d025      	beq.n	80181fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80181ae:	2301      	movs	r3, #1
 80181b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80181b2:	e022      	b.n	80181fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80181bc:	d11f      	bne.n	80181fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80181be:	2301      	movs	r3, #1
 80181c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80181c2:	e01c      	b.n	80181fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181c8:	2b02      	cmp	r3, #2
 80181ca:	d902      	bls.n	80181d2 <DMA_CheckFifoParam+0xb6>
 80181cc:	2b03      	cmp	r3, #3
 80181ce:	d003      	beq.n	80181d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80181d0:	e018      	b.n	8018204 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80181d2:	2301      	movs	r3, #1
 80181d4:	73fb      	strb	r3, [r7, #15]
        break;
 80181d6:	e015      	b.n	8018204 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d00e      	beq.n	8018202 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80181e4:	2301      	movs	r3, #1
 80181e6:	73fb      	strb	r3, [r7, #15]
    break;
 80181e8:	e00b      	b.n	8018202 <DMA_CheckFifoParam+0xe6>
        break;
 80181ea:	bf00      	nop
 80181ec:	e00a      	b.n	8018204 <DMA_CheckFifoParam+0xe8>
        break;
 80181ee:	bf00      	nop
 80181f0:	e008      	b.n	8018204 <DMA_CheckFifoParam+0xe8>
        break;
 80181f2:	bf00      	nop
 80181f4:	e006      	b.n	8018204 <DMA_CheckFifoParam+0xe8>
        break;
 80181f6:	bf00      	nop
 80181f8:	e004      	b.n	8018204 <DMA_CheckFifoParam+0xe8>
        break;
 80181fa:	bf00      	nop
 80181fc:	e002      	b.n	8018204 <DMA_CheckFifoParam+0xe8>
        break;
 80181fe:	bf00      	nop
 8018200:	e000      	b.n	8018204 <DMA_CheckFifoParam+0xe8>
    break;
 8018202:	bf00      	nop
    }
  }

  return status;
 8018204:	7bfb      	ldrb	r3, [r7, #15]
}
 8018206:	4618      	mov	r0, r3
 8018208:	3714      	adds	r7, #20
 801820a:	46bd      	mov	sp, r7
 801820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018210:	4770      	bx	lr
 8018212:	bf00      	nop

08018214 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8018214:	b480      	push	{r7}
 8018216:	b085      	sub	sp, #20
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	4a38      	ldr	r2, [pc, #224]	; (8018308 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8018228:	4293      	cmp	r3, r2
 801822a:	d022      	beq.n	8018272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	4a36      	ldr	r2, [pc, #216]	; (801830c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8018232:	4293      	cmp	r3, r2
 8018234:	d01d      	beq.n	8018272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	4a35      	ldr	r2, [pc, #212]	; (8018310 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801823c:	4293      	cmp	r3, r2
 801823e:	d018      	beq.n	8018272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	4a33      	ldr	r2, [pc, #204]	; (8018314 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8018246:	4293      	cmp	r3, r2
 8018248:	d013      	beq.n	8018272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	4a32      	ldr	r2, [pc, #200]	; (8018318 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8018250:	4293      	cmp	r3, r2
 8018252:	d00e      	beq.n	8018272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	4a30      	ldr	r2, [pc, #192]	; (801831c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801825a:	4293      	cmp	r3, r2
 801825c:	d009      	beq.n	8018272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	4a2f      	ldr	r2, [pc, #188]	; (8018320 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8018264:	4293      	cmp	r3, r2
 8018266:	d004      	beq.n	8018272 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	4a2d      	ldr	r2, [pc, #180]	; (8018324 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801826e:	4293      	cmp	r3, r2
 8018270:	d101      	bne.n	8018276 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8018272:	2301      	movs	r3, #1
 8018274:	e000      	b.n	8018278 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8018276:	2300      	movs	r3, #0
 8018278:	2b00      	cmp	r3, #0
 801827a:	d01a      	beq.n	80182b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	b2db      	uxtb	r3, r3
 8018282:	3b08      	subs	r3, #8
 8018284:	4a28      	ldr	r2, [pc, #160]	; (8018328 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8018286:	fba2 2303 	umull	r2, r3, r2, r3
 801828a:	091b      	lsrs	r3, r3, #4
 801828c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801828e:	68fa      	ldr	r2, [r7, #12]
 8018290:	4b26      	ldr	r3, [pc, #152]	; (801832c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8018292:	4413      	add	r3, r2
 8018294:	009b      	lsls	r3, r3, #2
 8018296:	461a      	mov	r2, r3
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	4a24      	ldr	r2, [pc, #144]	; (8018330 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80182a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	f003 031f 	and.w	r3, r3, #31
 80182a8:	2201      	movs	r2, #1
 80182aa:	409a      	lsls	r2, r3
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80182b0:	e024      	b.n	80182fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	b2db      	uxtb	r3, r3
 80182b8:	3b10      	subs	r3, #16
 80182ba:	4a1e      	ldr	r2, [pc, #120]	; (8018334 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80182bc:	fba2 2303 	umull	r2, r3, r2, r3
 80182c0:	091b      	lsrs	r3, r3, #4
 80182c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80182c4:	68bb      	ldr	r3, [r7, #8]
 80182c6:	4a1c      	ldr	r2, [pc, #112]	; (8018338 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80182c8:	4293      	cmp	r3, r2
 80182ca:	d806      	bhi.n	80182da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	4a1b      	ldr	r2, [pc, #108]	; (801833c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80182d0:	4293      	cmp	r3, r2
 80182d2:	d902      	bls.n	80182da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	3308      	adds	r3, #8
 80182d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80182da:	68fa      	ldr	r2, [r7, #12]
 80182dc:	4b18      	ldr	r3, [pc, #96]	; (8018340 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80182de:	4413      	add	r3, r2
 80182e0:	009b      	lsls	r3, r3, #2
 80182e2:	461a      	mov	r2, r3
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	4a16      	ldr	r2, [pc, #88]	; (8018344 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80182ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	f003 031f 	and.w	r3, r3, #31
 80182f4:	2201      	movs	r2, #1
 80182f6:	409a      	lsls	r2, r3
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80182fc:	bf00      	nop
 80182fe:	3714      	adds	r7, #20
 8018300:	46bd      	mov	sp, r7
 8018302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018306:	4770      	bx	lr
 8018308:	58025408 	.word	0x58025408
 801830c:	5802541c 	.word	0x5802541c
 8018310:	58025430 	.word	0x58025430
 8018314:	58025444 	.word	0x58025444
 8018318:	58025458 	.word	0x58025458
 801831c:	5802546c 	.word	0x5802546c
 8018320:	58025480 	.word	0x58025480
 8018324:	58025494 	.word	0x58025494
 8018328:	cccccccd 	.word	0xcccccccd
 801832c:	16009600 	.word	0x16009600
 8018330:	58025880 	.word	0x58025880
 8018334:	aaaaaaab 	.word	0xaaaaaaab
 8018338:	400204b8 	.word	0x400204b8
 801833c:	4002040f 	.word	0x4002040f
 8018340:	10008200 	.word	0x10008200
 8018344:	40020880 	.word	0x40020880

08018348 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8018348:	b480      	push	{r7}
 801834a:	b085      	sub	sp, #20
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	685b      	ldr	r3, [r3, #4]
 8018354:	b2db      	uxtb	r3, r3
 8018356:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d04a      	beq.n	80183f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	2b08      	cmp	r3, #8
 8018362:	d847      	bhi.n	80183f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	4a25      	ldr	r2, [pc, #148]	; (8018400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801836a:	4293      	cmp	r3, r2
 801836c:	d022      	beq.n	80183b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4a24      	ldr	r2, [pc, #144]	; (8018404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8018374:	4293      	cmp	r3, r2
 8018376:	d01d      	beq.n	80183b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	4a22      	ldr	r2, [pc, #136]	; (8018408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801837e:	4293      	cmp	r3, r2
 8018380:	d018      	beq.n	80183b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	4a21      	ldr	r2, [pc, #132]	; (801840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8018388:	4293      	cmp	r3, r2
 801838a:	d013      	beq.n	80183b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	4a1f      	ldr	r2, [pc, #124]	; (8018410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8018392:	4293      	cmp	r3, r2
 8018394:	d00e      	beq.n	80183b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	4a1e      	ldr	r2, [pc, #120]	; (8018414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801839c:	4293      	cmp	r3, r2
 801839e:	d009      	beq.n	80183b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	4a1c      	ldr	r2, [pc, #112]	; (8018418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80183a6:	4293      	cmp	r3, r2
 80183a8:	d004      	beq.n	80183b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	4a1b      	ldr	r2, [pc, #108]	; (801841c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80183b0:	4293      	cmp	r3, r2
 80183b2:	d101      	bne.n	80183b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80183b4:	2301      	movs	r3, #1
 80183b6:	e000      	b.n	80183ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80183b8:	2300      	movs	r3, #0
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d00a      	beq.n	80183d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80183be:	68fa      	ldr	r2, [r7, #12]
 80183c0:	4b17      	ldr	r3, [pc, #92]	; (8018420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80183c2:	4413      	add	r3, r2
 80183c4:	009b      	lsls	r3, r3, #2
 80183c6:	461a      	mov	r2, r3
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	4a15      	ldr	r2, [pc, #84]	; (8018424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80183d0:	671a      	str	r2, [r3, #112]	; 0x70
 80183d2:	e009      	b.n	80183e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80183d4:	68fa      	ldr	r2, [r7, #12]
 80183d6:	4b14      	ldr	r3, [pc, #80]	; (8018428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80183d8:	4413      	add	r3, r2
 80183da:	009b      	lsls	r3, r3, #2
 80183dc:	461a      	mov	r2, r3
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	4a11      	ldr	r2, [pc, #68]	; (801842c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80183e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	3b01      	subs	r3, #1
 80183ec:	2201      	movs	r2, #1
 80183ee:	409a      	lsls	r2, r3
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80183f4:	bf00      	nop
 80183f6:	3714      	adds	r7, #20
 80183f8:	46bd      	mov	sp, r7
 80183fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fe:	4770      	bx	lr
 8018400:	58025408 	.word	0x58025408
 8018404:	5802541c 	.word	0x5802541c
 8018408:	58025430 	.word	0x58025430
 801840c:	58025444 	.word	0x58025444
 8018410:	58025458 	.word	0x58025458
 8018414:	5802546c 	.word	0x5802546c
 8018418:	58025480 	.word	0x58025480
 801841c:	58025494 	.word	0x58025494
 8018420:	1600963f 	.word	0x1600963f
 8018424:	58025940 	.word	0x58025940
 8018428:	1000823f 	.word	0x1000823f
 801842c:	40020940 	.word	0x40020940

08018430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8018430:	b480      	push	{r7}
 8018432:	b089      	sub	sp, #36	; 0x24
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
 8018438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801843a:	2300      	movs	r3, #0
 801843c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801843e:	4b89      	ldr	r3, [pc, #548]	; (8018664 <HAL_GPIO_Init+0x234>)
 8018440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8018442:	e194      	b.n	801876e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8018444:	683b      	ldr	r3, [r7, #0]
 8018446:	681a      	ldr	r2, [r3, #0]
 8018448:	2101      	movs	r1, #1
 801844a:	69fb      	ldr	r3, [r7, #28]
 801844c:	fa01 f303 	lsl.w	r3, r1, r3
 8018450:	4013      	ands	r3, r2
 8018452:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8018454:	693b      	ldr	r3, [r7, #16]
 8018456:	2b00      	cmp	r3, #0
 8018458:	f000 8186 	beq.w	8018768 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	685b      	ldr	r3, [r3, #4]
 8018460:	2b01      	cmp	r3, #1
 8018462:	d00b      	beq.n	801847c <HAL_GPIO_Init+0x4c>
 8018464:	683b      	ldr	r3, [r7, #0]
 8018466:	685b      	ldr	r3, [r3, #4]
 8018468:	2b02      	cmp	r3, #2
 801846a:	d007      	beq.n	801847c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801846c:	683b      	ldr	r3, [r7, #0]
 801846e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8018470:	2b11      	cmp	r3, #17
 8018472:	d003      	beq.n	801847c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8018474:	683b      	ldr	r3, [r7, #0]
 8018476:	685b      	ldr	r3, [r3, #4]
 8018478:	2b12      	cmp	r3, #18
 801847a:	d130      	bne.n	80184de <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	689b      	ldr	r3, [r3, #8]
 8018480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	005b      	lsls	r3, r3, #1
 8018486:	2203      	movs	r2, #3
 8018488:	fa02 f303 	lsl.w	r3, r2, r3
 801848c:	43db      	mvns	r3, r3
 801848e:	69ba      	ldr	r2, [r7, #24]
 8018490:	4013      	ands	r3, r2
 8018492:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8018494:	683b      	ldr	r3, [r7, #0]
 8018496:	68da      	ldr	r2, [r3, #12]
 8018498:	69fb      	ldr	r3, [r7, #28]
 801849a:	005b      	lsls	r3, r3, #1
 801849c:	fa02 f303 	lsl.w	r3, r2, r3
 80184a0:	69ba      	ldr	r2, [r7, #24]
 80184a2:	4313      	orrs	r3, r2
 80184a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	69ba      	ldr	r2, [r7, #24]
 80184aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	685b      	ldr	r3, [r3, #4]
 80184b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80184b2:	2201      	movs	r2, #1
 80184b4:	69fb      	ldr	r3, [r7, #28]
 80184b6:	fa02 f303 	lsl.w	r3, r2, r3
 80184ba:	43db      	mvns	r3, r3
 80184bc:	69ba      	ldr	r2, [r7, #24]
 80184be:	4013      	ands	r3, r2
 80184c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80184c2:	683b      	ldr	r3, [r7, #0]
 80184c4:	685b      	ldr	r3, [r3, #4]
 80184c6:	091b      	lsrs	r3, r3, #4
 80184c8:	f003 0201 	and.w	r2, r3, #1
 80184cc:	69fb      	ldr	r3, [r7, #28]
 80184ce:	fa02 f303 	lsl.w	r3, r2, r3
 80184d2:	69ba      	ldr	r2, [r7, #24]
 80184d4:	4313      	orrs	r3, r2
 80184d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	69ba      	ldr	r2, [r7, #24]
 80184dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	68db      	ldr	r3, [r3, #12]
 80184e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80184e4:	69fb      	ldr	r3, [r7, #28]
 80184e6:	005b      	lsls	r3, r3, #1
 80184e8:	2203      	movs	r2, #3
 80184ea:	fa02 f303 	lsl.w	r3, r2, r3
 80184ee:	43db      	mvns	r3, r3
 80184f0:	69ba      	ldr	r2, [r7, #24]
 80184f2:	4013      	ands	r3, r2
 80184f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80184f6:	683b      	ldr	r3, [r7, #0]
 80184f8:	689a      	ldr	r2, [r3, #8]
 80184fa:	69fb      	ldr	r3, [r7, #28]
 80184fc:	005b      	lsls	r3, r3, #1
 80184fe:	fa02 f303 	lsl.w	r3, r2, r3
 8018502:	69ba      	ldr	r2, [r7, #24]
 8018504:	4313      	orrs	r3, r2
 8018506:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	69ba      	ldr	r2, [r7, #24]
 801850c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	685b      	ldr	r3, [r3, #4]
 8018512:	2b02      	cmp	r3, #2
 8018514:	d003      	beq.n	801851e <HAL_GPIO_Init+0xee>
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	685b      	ldr	r3, [r3, #4]
 801851a:	2b12      	cmp	r3, #18
 801851c:	d123      	bne.n	8018566 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801851e:	69fb      	ldr	r3, [r7, #28]
 8018520:	08da      	lsrs	r2, r3, #3
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	3208      	adds	r2, #8
 8018526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801852a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801852c:	69fb      	ldr	r3, [r7, #28]
 801852e:	f003 0307 	and.w	r3, r3, #7
 8018532:	009b      	lsls	r3, r3, #2
 8018534:	220f      	movs	r2, #15
 8018536:	fa02 f303 	lsl.w	r3, r2, r3
 801853a:	43db      	mvns	r3, r3
 801853c:	69ba      	ldr	r2, [r7, #24]
 801853e:	4013      	ands	r3, r2
 8018540:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8018542:	683b      	ldr	r3, [r7, #0]
 8018544:	691a      	ldr	r2, [r3, #16]
 8018546:	69fb      	ldr	r3, [r7, #28]
 8018548:	f003 0307 	and.w	r3, r3, #7
 801854c:	009b      	lsls	r3, r3, #2
 801854e:	fa02 f303 	lsl.w	r3, r2, r3
 8018552:	69ba      	ldr	r2, [r7, #24]
 8018554:	4313      	orrs	r3, r2
 8018556:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8018558:	69fb      	ldr	r3, [r7, #28]
 801855a:	08da      	lsrs	r2, r3, #3
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	3208      	adds	r2, #8
 8018560:	69b9      	ldr	r1, [r7, #24]
 8018562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801856c:	69fb      	ldr	r3, [r7, #28]
 801856e:	005b      	lsls	r3, r3, #1
 8018570:	2203      	movs	r2, #3
 8018572:	fa02 f303 	lsl.w	r3, r2, r3
 8018576:	43db      	mvns	r3, r3
 8018578:	69ba      	ldr	r2, [r7, #24]
 801857a:	4013      	ands	r3, r2
 801857c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	685b      	ldr	r3, [r3, #4]
 8018582:	f003 0203 	and.w	r2, r3, #3
 8018586:	69fb      	ldr	r3, [r7, #28]
 8018588:	005b      	lsls	r3, r3, #1
 801858a:	fa02 f303 	lsl.w	r3, r2, r3
 801858e:	69ba      	ldr	r2, [r7, #24]
 8018590:	4313      	orrs	r3, r2
 8018592:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	69ba      	ldr	r2, [r7, #24]
 8018598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801859a:	683b      	ldr	r3, [r7, #0]
 801859c:	685b      	ldr	r3, [r3, #4]
 801859e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	f000 80e0 	beq.w	8018768 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80185a8:	4b2f      	ldr	r3, [pc, #188]	; (8018668 <HAL_GPIO_Init+0x238>)
 80185aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80185ae:	4a2e      	ldr	r2, [pc, #184]	; (8018668 <HAL_GPIO_Init+0x238>)
 80185b0:	f043 0302 	orr.w	r3, r3, #2
 80185b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80185b8:	4b2b      	ldr	r3, [pc, #172]	; (8018668 <HAL_GPIO_Init+0x238>)
 80185ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80185be:	f003 0302 	and.w	r3, r3, #2
 80185c2:	60fb      	str	r3, [r7, #12]
 80185c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80185c6:	4a29      	ldr	r2, [pc, #164]	; (801866c <HAL_GPIO_Init+0x23c>)
 80185c8:	69fb      	ldr	r3, [r7, #28]
 80185ca:	089b      	lsrs	r3, r3, #2
 80185cc:	3302      	adds	r3, #2
 80185ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80185d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80185d4:	69fb      	ldr	r3, [r7, #28]
 80185d6:	f003 0303 	and.w	r3, r3, #3
 80185da:	009b      	lsls	r3, r3, #2
 80185dc:	220f      	movs	r2, #15
 80185de:	fa02 f303 	lsl.w	r3, r2, r3
 80185e2:	43db      	mvns	r3, r3
 80185e4:	69ba      	ldr	r2, [r7, #24]
 80185e6:	4013      	ands	r3, r2
 80185e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	4a20      	ldr	r2, [pc, #128]	; (8018670 <HAL_GPIO_Init+0x240>)
 80185ee:	4293      	cmp	r3, r2
 80185f0:	d052      	beq.n	8018698 <HAL_GPIO_Init+0x268>
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	4a1f      	ldr	r2, [pc, #124]	; (8018674 <HAL_GPIO_Init+0x244>)
 80185f6:	4293      	cmp	r3, r2
 80185f8:	d031      	beq.n	801865e <HAL_GPIO_Init+0x22e>
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	4a1e      	ldr	r2, [pc, #120]	; (8018678 <HAL_GPIO_Init+0x248>)
 80185fe:	4293      	cmp	r3, r2
 8018600:	d02b      	beq.n	801865a <HAL_GPIO_Init+0x22a>
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	4a1d      	ldr	r2, [pc, #116]	; (801867c <HAL_GPIO_Init+0x24c>)
 8018606:	4293      	cmp	r3, r2
 8018608:	d025      	beq.n	8018656 <HAL_GPIO_Init+0x226>
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	4a1c      	ldr	r2, [pc, #112]	; (8018680 <HAL_GPIO_Init+0x250>)
 801860e:	4293      	cmp	r3, r2
 8018610:	d01f      	beq.n	8018652 <HAL_GPIO_Init+0x222>
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	4a1b      	ldr	r2, [pc, #108]	; (8018684 <HAL_GPIO_Init+0x254>)
 8018616:	4293      	cmp	r3, r2
 8018618:	d019      	beq.n	801864e <HAL_GPIO_Init+0x21e>
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	4a1a      	ldr	r2, [pc, #104]	; (8018688 <HAL_GPIO_Init+0x258>)
 801861e:	4293      	cmp	r3, r2
 8018620:	d013      	beq.n	801864a <HAL_GPIO_Init+0x21a>
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	4a19      	ldr	r2, [pc, #100]	; (801868c <HAL_GPIO_Init+0x25c>)
 8018626:	4293      	cmp	r3, r2
 8018628:	d00d      	beq.n	8018646 <HAL_GPIO_Init+0x216>
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	4a18      	ldr	r2, [pc, #96]	; (8018690 <HAL_GPIO_Init+0x260>)
 801862e:	4293      	cmp	r3, r2
 8018630:	d007      	beq.n	8018642 <HAL_GPIO_Init+0x212>
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	4a17      	ldr	r2, [pc, #92]	; (8018694 <HAL_GPIO_Init+0x264>)
 8018636:	4293      	cmp	r3, r2
 8018638:	d101      	bne.n	801863e <HAL_GPIO_Init+0x20e>
 801863a:	2309      	movs	r3, #9
 801863c:	e02d      	b.n	801869a <HAL_GPIO_Init+0x26a>
 801863e:	230a      	movs	r3, #10
 8018640:	e02b      	b.n	801869a <HAL_GPIO_Init+0x26a>
 8018642:	2308      	movs	r3, #8
 8018644:	e029      	b.n	801869a <HAL_GPIO_Init+0x26a>
 8018646:	2307      	movs	r3, #7
 8018648:	e027      	b.n	801869a <HAL_GPIO_Init+0x26a>
 801864a:	2306      	movs	r3, #6
 801864c:	e025      	b.n	801869a <HAL_GPIO_Init+0x26a>
 801864e:	2305      	movs	r3, #5
 8018650:	e023      	b.n	801869a <HAL_GPIO_Init+0x26a>
 8018652:	2304      	movs	r3, #4
 8018654:	e021      	b.n	801869a <HAL_GPIO_Init+0x26a>
 8018656:	2303      	movs	r3, #3
 8018658:	e01f      	b.n	801869a <HAL_GPIO_Init+0x26a>
 801865a:	2302      	movs	r3, #2
 801865c:	e01d      	b.n	801869a <HAL_GPIO_Init+0x26a>
 801865e:	2301      	movs	r3, #1
 8018660:	e01b      	b.n	801869a <HAL_GPIO_Init+0x26a>
 8018662:	bf00      	nop
 8018664:	58000080 	.word	0x58000080
 8018668:	58024400 	.word	0x58024400
 801866c:	58000400 	.word	0x58000400
 8018670:	58020000 	.word	0x58020000
 8018674:	58020400 	.word	0x58020400
 8018678:	58020800 	.word	0x58020800
 801867c:	58020c00 	.word	0x58020c00
 8018680:	58021000 	.word	0x58021000
 8018684:	58021400 	.word	0x58021400
 8018688:	58021800 	.word	0x58021800
 801868c:	58021c00 	.word	0x58021c00
 8018690:	58022000 	.word	0x58022000
 8018694:	58022400 	.word	0x58022400
 8018698:	2300      	movs	r3, #0
 801869a:	69fa      	ldr	r2, [r7, #28]
 801869c:	f002 0203 	and.w	r2, r2, #3
 80186a0:	0092      	lsls	r2, r2, #2
 80186a2:	4093      	lsls	r3, r2
 80186a4:	69ba      	ldr	r2, [r7, #24]
 80186a6:	4313      	orrs	r3, r2
 80186a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80186aa:	4938      	ldr	r1, [pc, #224]	; (801878c <HAL_GPIO_Init+0x35c>)
 80186ac:	69fb      	ldr	r3, [r7, #28]
 80186ae:	089b      	lsrs	r3, r3, #2
 80186b0:	3302      	adds	r3, #2
 80186b2:	69ba      	ldr	r2, [r7, #24]
 80186b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80186b8:	697b      	ldr	r3, [r7, #20]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80186be:	693b      	ldr	r3, [r7, #16]
 80186c0:	43db      	mvns	r3, r3
 80186c2:	69ba      	ldr	r2, [r7, #24]
 80186c4:	4013      	ands	r3, r2
 80186c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	685b      	ldr	r3, [r3, #4]
 80186cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d003      	beq.n	80186dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80186d4:	69ba      	ldr	r2, [r7, #24]
 80186d6:	693b      	ldr	r3, [r7, #16]
 80186d8:	4313      	orrs	r3, r2
 80186da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80186dc:	697b      	ldr	r3, [r7, #20]
 80186de:	69ba      	ldr	r2, [r7, #24]
 80186e0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80186e2:	697b      	ldr	r3, [r7, #20]
 80186e4:	685b      	ldr	r3, [r3, #4]
 80186e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80186e8:	693b      	ldr	r3, [r7, #16]
 80186ea:	43db      	mvns	r3, r3
 80186ec:	69ba      	ldr	r2, [r7, #24]
 80186ee:	4013      	ands	r3, r2
 80186f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80186f2:	683b      	ldr	r3, [r7, #0]
 80186f4:	685b      	ldr	r3, [r3, #4]
 80186f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d003      	beq.n	8018706 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80186fe:	69ba      	ldr	r2, [r7, #24]
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	4313      	orrs	r3, r2
 8018704:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8018706:	697b      	ldr	r3, [r7, #20]
 8018708:	69ba      	ldr	r2, [r7, #24]
 801870a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801870c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8018714:	693b      	ldr	r3, [r7, #16]
 8018716:	43db      	mvns	r3, r3
 8018718:	69ba      	ldr	r2, [r7, #24]
 801871a:	4013      	ands	r3, r2
 801871c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	685b      	ldr	r3, [r3, #4]
 8018722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018726:	2b00      	cmp	r3, #0
 8018728:	d003      	beq.n	8018732 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 801872a:	69ba      	ldr	r2, [r7, #24]
 801872c:	693b      	ldr	r3, [r7, #16]
 801872e:	4313      	orrs	r3, r2
 8018730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8018732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018736:	69bb      	ldr	r3, [r7, #24]
 8018738:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801873a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801873e:	685b      	ldr	r3, [r3, #4]
 8018740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8018742:	693b      	ldr	r3, [r7, #16]
 8018744:	43db      	mvns	r3, r3
 8018746:	69ba      	ldr	r2, [r7, #24]
 8018748:	4013      	ands	r3, r2
 801874a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801874c:	683b      	ldr	r3, [r7, #0]
 801874e:	685b      	ldr	r3, [r3, #4]
 8018750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018754:	2b00      	cmp	r3, #0
 8018756:	d003      	beq.n	8018760 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8018758:	69ba      	ldr	r2, [r7, #24]
 801875a:	693b      	ldr	r3, [r7, #16]
 801875c:	4313      	orrs	r3, r2
 801875e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8018760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018764:	69bb      	ldr	r3, [r7, #24]
 8018766:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8018768:	69fb      	ldr	r3, [r7, #28]
 801876a:	3301      	adds	r3, #1
 801876c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801876e:	683b      	ldr	r3, [r7, #0]
 8018770:	681a      	ldr	r2, [r3, #0]
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	fa22 f303 	lsr.w	r3, r2, r3
 8018778:	2b00      	cmp	r3, #0
 801877a:	f47f ae63 	bne.w	8018444 <HAL_GPIO_Init+0x14>
  }
}
 801877e:	bf00      	nop
 8018780:	3724      	adds	r7, #36	; 0x24
 8018782:	46bd      	mov	sp, r7
 8018784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018788:	4770      	bx	lr
 801878a:	bf00      	nop
 801878c:	58000400 	.word	0x58000400

08018790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8018790:	b480      	push	{r7}
 8018792:	b085      	sub	sp, #20
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]
 8018798:	460b      	mov	r3, r1
 801879a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	691a      	ldr	r2, [r3, #16]
 80187a0:	887b      	ldrh	r3, [r7, #2]
 80187a2:	4013      	ands	r3, r2
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d002      	beq.n	80187ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80187a8:	2301      	movs	r3, #1
 80187aa:	73fb      	strb	r3, [r7, #15]
 80187ac:	e001      	b.n	80187b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80187ae:	2300      	movs	r3, #0
 80187b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80187b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3714      	adds	r7, #20
 80187b8:	46bd      	mov	sp, r7
 80187ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187be:	4770      	bx	lr

080187c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80187c0:	b480      	push	{r7}
 80187c2:	b083      	sub	sp, #12
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	6078      	str	r0, [r7, #4]
 80187c8:	460b      	mov	r3, r1
 80187ca:	807b      	strh	r3, [r7, #2]
 80187cc:	4613      	mov	r3, r2
 80187ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80187d0:	787b      	ldrb	r3, [r7, #1]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d003      	beq.n	80187de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80187d6:	887a      	ldrh	r2, [r7, #2]
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80187dc:	e003      	b.n	80187e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80187de:	887b      	ldrh	r3, [r7, #2]
 80187e0:	041a      	lsls	r2, r3, #16
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	619a      	str	r2, [r3, #24]
}
 80187e6:	bf00      	nop
 80187e8:	370c      	adds	r7, #12
 80187ea:	46bd      	mov	sp, r7
 80187ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f0:	4770      	bx	lr
	...

080187f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d101      	bne.n	8018806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8018802:	2301      	movs	r3, #1
 8018804:	e07f      	b.n	8018906 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801880c:	b2db      	uxtb	r3, r3
 801880e:	2b00      	cmp	r3, #0
 8018810:	d106      	bne.n	8018820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	2200      	movs	r2, #0
 8018816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801881a:	6878      	ldr	r0, [r7, #4]
 801881c:	f7fa fba2 	bl	8012f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	2224      	movs	r2, #36	; 0x24
 8018824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	681a      	ldr	r2, [r3, #0]
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	f022 0201 	bic.w	r2, r2, #1
 8018836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	685a      	ldr	r2, [r3, #4]
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	689a      	ldr	r2, [r3, #8]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	68db      	ldr	r3, [r3, #12]
 801885a:	2b01      	cmp	r3, #1
 801885c:	d107      	bne.n	801886e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	689a      	ldr	r2, [r3, #8]
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801886a:	609a      	str	r2, [r3, #8]
 801886c:	e006      	b.n	801887c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	689a      	ldr	r2, [r3, #8]
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801887a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	68db      	ldr	r3, [r3, #12]
 8018880:	2b02      	cmp	r3, #2
 8018882:	d104      	bne.n	801888e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801888c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	6859      	ldr	r1, [r3, #4]
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681a      	ldr	r2, [r3, #0]
 8018898:	4b1d      	ldr	r3, [pc, #116]	; (8018910 <HAL_I2C_Init+0x11c>)
 801889a:	430b      	orrs	r3, r1
 801889c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	68da      	ldr	r2, [r3, #12]
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80188ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	691a      	ldr	r2, [r3, #16]
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	695b      	ldr	r3, [r3, #20]
 80188b6:	ea42 0103 	orr.w	r1, r2, r3
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	699b      	ldr	r3, [r3, #24]
 80188be:	021a      	lsls	r2, r3, #8
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	430a      	orrs	r2, r1
 80188c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	69d9      	ldr	r1, [r3, #28]
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	6a1a      	ldr	r2, [r3, #32]
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	430a      	orrs	r2, r1
 80188d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	681a      	ldr	r2, [r3, #0]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	f042 0201 	orr.w	r2, r2, #1
 80188e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	2200      	movs	r2, #0
 80188ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	2220      	movs	r2, #32
 80188f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	2200      	movs	r2, #0
 80188fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	2200      	movs	r2, #0
 8018900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8018904:	2300      	movs	r3, #0
}
 8018906:	4618      	mov	r0, r3
 8018908:	3708      	adds	r7, #8
 801890a:	46bd      	mov	sp, r7
 801890c:	bd80      	pop	{r7, pc}
 801890e:	bf00      	nop
 8018910:	02008000 	.word	0x02008000

08018914 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b088      	sub	sp, #32
 8018918:	af02      	add	r7, sp, #8
 801891a:	60f8      	str	r0, [r7, #12]
 801891c:	4608      	mov	r0, r1
 801891e:	4611      	mov	r1, r2
 8018920:	461a      	mov	r2, r3
 8018922:	4603      	mov	r3, r0
 8018924:	817b      	strh	r3, [r7, #10]
 8018926:	460b      	mov	r3, r1
 8018928:	813b      	strh	r3, [r7, #8]
 801892a:	4613      	mov	r3, r2
 801892c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018934:	b2db      	uxtb	r3, r3
 8018936:	2b20      	cmp	r3, #32
 8018938:	f040 80f9 	bne.w	8018b2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801893c:	6a3b      	ldr	r3, [r7, #32]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d002      	beq.n	8018948 <HAL_I2C_Mem_Write+0x34>
 8018942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018944:	2b00      	cmp	r3, #0
 8018946:	d105      	bne.n	8018954 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801894e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018950:	2301      	movs	r3, #1
 8018952:	e0ed      	b.n	8018b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801895a:	2b01      	cmp	r3, #1
 801895c:	d101      	bne.n	8018962 <HAL_I2C_Mem_Write+0x4e>
 801895e:	2302      	movs	r3, #2
 8018960:	e0e6      	b.n	8018b30 <HAL_I2C_Mem_Write+0x21c>
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	2201      	movs	r2, #1
 8018966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801896a:	f7fc f9c3 	bl	8014cf4 <HAL_GetTick>
 801896e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018970:	697b      	ldr	r3, [r7, #20]
 8018972:	9300      	str	r3, [sp, #0]
 8018974:	2319      	movs	r3, #25
 8018976:	2201      	movs	r2, #1
 8018978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801897c:	68f8      	ldr	r0, [r7, #12]
 801897e:	f002 f8f9 	bl	801ab74 <I2C_WaitOnFlagUntilTimeout>
 8018982:	4603      	mov	r3, r0
 8018984:	2b00      	cmp	r3, #0
 8018986:	d001      	beq.n	801898c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8018988:	2301      	movs	r3, #1
 801898a:	e0d1      	b.n	8018b30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	2221      	movs	r2, #33	; 0x21
 8018990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	2240      	movs	r2, #64	; 0x40
 8018998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	2200      	movs	r2, #0
 80189a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	6a3a      	ldr	r2, [r7, #32]
 80189a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80189ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	2200      	movs	r2, #0
 80189b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80189b4:	88f8      	ldrh	r0, [r7, #6]
 80189b6:	893a      	ldrh	r2, [r7, #8]
 80189b8:	8979      	ldrh	r1, [r7, #10]
 80189ba:	697b      	ldr	r3, [r7, #20]
 80189bc:	9301      	str	r3, [sp, #4]
 80189be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189c0:	9300      	str	r3, [sp, #0]
 80189c2:	4603      	mov	r3, r0
 80189c4:	68f8      	ldr	r0, [r7, #12]
 80189c6:	f001 f939 	bl	8019c3c <I2C_RequestMemoryWrite>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d005      	beq.n	80189dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	2200      	movs	r2, #0
 80189d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80189d8:	2301      	movs	r3, #1
 80189da:	e0a9      	b.n	8018b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189e0:	b29b      	uxth	r3, r3
 80189e2:	2bff      	cmp	r3, #255	; 0xff
 80189e4:	d90e      	bls.n	8018a04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	22ff      	movs	r2, #255	; 0xff
 80189ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80189f0:	b2da      	uxtb	r2, r3
 80189f2:	8979      	ldrh	r1, [r7, #10]
 80189f4:	2300      	movs	r3, #0
 80189f6:	9300      	str	r3, [sp, #0]
 80189f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80189fc:	68f8      	ldr	r0, [r7, #12]
 80189fe:	f002 f9db 	bl	801adb8 <I2C_TransferConfig>
 8018a02:	e00f      	b.n	8018a24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a08:	b29a      	uxth	r2, r3
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a12:	b2da      	uxtb	r2, r3
 8018a14:	8979      	ldrh	r1, [r7, #10]
 8018a16:	2300      	movs	r3, #0
 8018a18:	9300      	str	r3, [sp, #0]
 8018a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018a1e:	68f8      	ldr	r0, [r7, #12]
 8018a20:	f002 f9ca 	bl	801adb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018a24:	697a      	ldr	r2, [r7, #20]
 8018a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a28:	68f8      	ldr	r0, [r7, #12]
 8018a2a:	f002 f8e3 	bl	801abf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d001      	beq.n	8018a38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8018a34:	2301      	movs	r3, #1
 8018a36:	e07b      	b.n	8018b30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a3c:	781a      	ldrb	r2, [r3, #0]
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a48:	1c5a      	adds	r2, r3, #1
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a52:	b29b      	uxth	r3, r3
 8018a54:	3b01      	subs	r3, #1
 8018a56:	b29a      	uxth	r2, r3
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a60:	3b01      	subs	r3, #1
 8018a62:	b29a      	uxth	r2, r3
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a6c:	b29b      	uxth	r3, r3
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d034      	beq.n	8018adc <HAL_I2C_Mem_Write+0x1c8>
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d130      	bne.n	8018adc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018a7a:	697b      	ldr	r3, [r7, #20]
 8018a7c:	9300      	str	r3, [sp, #0]
 8018a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a80:	2200      	movs	r2, #0
 8018a82:	2180      	movs	r1, #128	; 0x80
 8018a84:	68f8      	ldr	r0, [r7, #12]
 8018a86:	f002 f875 	bl	801ab74 <I2C_WaitOnFlagUntilTimeout>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d001      	beq.n	8018a94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8018a90:	2301      	movs	r3, #1
 8018a92:	e04d      	b.n	8018b30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	2bff      	cmp	r3, #255	; 0xff
 8018a9c:	d90e      	bls.n	8018abc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	22ff      	movs	r2, #255	; 0xff
 8018aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018aa8:	b2da      	uxtb	r2, r3
 8018aaa:	8979      	ldrh	r1, [r7, #10]
 8018aac:	2300      	movs	r3, #0
 8018aae:	9300      	str	r3, [sp, #0]
 8018ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018ab4:	68f8      	ldr	r0, [r7, #12]
 8018ab6:	f002 f97f 	bl	801adb8 <I2C_TransferConfig>
 8018aba:	e00f      	b.n	8018adc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ac0:	b29a      	uxth	r2, r3
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018aca:	b2da      	uxtb	r2, r3
 8018acc:	8979      	ldrh	r1, [r7, #10]
 8018ace:	2300      	movs	r3, #0
 8018ad0:	9300      	str	r3, [sp, #0]
 8018ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018ad6:	68f8      	ldr	r0, [r7, #12]
 8018ad8:	f002 f96e 	bl	801adb8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ae0:	b29b      	uxth	r3, r3
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d19e      	bne.n	8018a24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018ae6:	697a      	ldr	r2, [r7, #20]
 8018ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018aea:	68f8      	ldr	r0, [r7, #12]
 8018aec:	f002 f8c2 	bl	801ac74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8018af0:	4603      	mov	r3, r0
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d001      	beq.n	8018afa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8018af6:	2301      	movs	r3, #1
 8018af8:	e01a      	b.n	8018b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	2220      	movs	r2, #32
 8018b00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	6859      	ldr	r1, [r3, #4]
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	681a      	ldr	r2, [r3, #0]
 8018b0c:	4b0a      	ldr	r3, [pc, #40]	; (8018b38 <HAL_I2C_Mem_Write+0x224>)
 8018b0e:	400b      	ands	r3, r1
 8018b10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	2220      	movs	r2, #32
 8018b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	2200      	movs	r2, #0
 8018b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	e000      	b.n	8018b30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8018b2e:	2302      	movs	r3, #2
  }
}
 8018b30:	4618      	mov	r0, r3
 8018b32:	3718      	adds	r7, #24
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bd80      	pop	{r7, pc}
 8018b38:	fe00e800 	.word	0xfe00e800

08018b3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b088      	sub	sp, #32
 8018b40:	af02      	add	r7, sp, #8
 8018b42:	60f8      	str	r0, [r7, #12]
 8018b44:	4608      	mov	r0, r1
 8018b46:	4611      	mov	r1, r2
 8018b48:	461a      	mov	r2, r3
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	817b      	strh	r3, [r7, #10]
 8018b4e:	460b      	mov	r3, r1
 8018b50:	813b      	strh	r3, [r7, #8]
 8018b52:	4613      	mov	r3, r2
 8018b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018b5c:	b2db      	uxtb	r3, r3
 8018b5e:	2b20      	cmp	r3, #32
 8018b60:	f040 80fd 	bne.w	8018d5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8018b64:	6a3b      	ldr	r3, [r7, #32]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d002      	beq.n	8018b70 <HAL_I2C_Mem_Read+0x34>
 8018b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d105      	bne.n	8018b7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018b76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018b78:	2301      	movs	r3, #1
 8018b7a:	e0f1      	b.n	8018d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018b82:	2b01      	cmp	r3, #1
 8018b84:	d101      	bne.n	8018b8a <HAL_I2C_Mem_Read+0x4e>
 8018b86:	2302      	movs	r3, #2
 8018b88:	e0ea      	b.n	8018d60 <HAL_I2C_Mem_Read+0x224>
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	2201      	movs	r2, #1
 8018b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018b92:	f7fc f8af 	bl	8014cf4 <HAL_GetTick>
 8018b96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018b98:	697b      	ldr	r3, [r7, #20]
 8018b9a:	9300      	str	r3, [sp, #0]
 8018b9c:	2319      	movs	r3, #25
 8018b9e:	2201      	movs	r2, #1
 8018ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018ba4:	68f8      	ldr	r0, [r7, #12]
 8018ba6:	f001 ffe5 	bl	801ab74 <I2C_WaitOnFlagUntilTimeout>
 8018baa:	4603      	mov	r3, r0
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d001      	beq.n	8018bb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8018bb0:	2301      	movs	r3, #1
 8018bb2:	e0d5      	b.n	8018d60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	2222      	movs	r2, #34	; 0x22
 8018bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	2240      	movs	r2, #64	; 0x40
 8018bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	6a3a      	ldr	r2, [r7, #32]
 8018bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	2200      	movs	r2, #0
 8018bda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018bdc:	88f8      	ldrh	r0, [r7, #6]
 8018bde:	893a      	ldrh	r2, [r7, #8]
 8018be0:	8979      	ldrh	r1, [r7, #10]
 8018be2:	697b      	ldr	r3, [r7, #20]
 8018be4:	9301      	str	r3, [sp, #4]
 8018be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018be8:	9300      	str	r3, [sp, #0]
 8018bea:	4603      	mov	r3, r0
 8018bec:	68f8      	ldr	r0, [r7, #12]
 8018bee:	f001 f879 	bl	8019ce4 <I2C_RequestMemoryRead>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d005      	beq.n	8018c04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	2200      	movs	r2, #0
 8018bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018c00:	2301      	movs	r3, #1
 8018c02:	e0ad      	b.n	8018d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c08:	b29b      	uxth	r3, r3
 8018c0a:	2bff      	cmp	r3, #255	; 0xff
 8018c0c:	d90e      	bls.n	8018c2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	22ff      	movs	r2, #255	; 0xff
 8018c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c18:	b2da      	uxtb	r2, r3
 8018c1a:	8979      	ldrh	r1, [r7, #10]
 8018c1c:	4b52      	ldr	r3, [pc, #328]	; (8018d68 <HAL_I2C_Mem_Read+0x22c>)
 8018c1e:	9300      	str	r3, [sp, #0]
 8018c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018c24:	68f8      	ldr	r0, [r7, #12]
 8018c26:	f002 f8c7 	bl	801adb8 <I2C_TransferConfig>
 8018c2a:	e00f      	b.n	8018c4c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c30:	b29a      	uxth	r2, r3
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c3a:	b2da      	uxtb	r2, r3
 8018c3c:	8979      	ldrh	r1, [r7, #10]
 8018c3e:	4b4a      	ldr	r3, [pc, #296]	; (8018d68 <HAL_I2C_Mem_Read+0x22c>)
 8018c40:	9300      	str	r3, [sp, #0]
 8018c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018c46:	68f8      	ldr	r0, [r7, #12]
 8018c48:	f002 f8b6 	bl	801adb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8018c4c:	697b      	ldr	r3, [r7, #20]
 8018c4e:	9300      	str	r3, [sp, #0]
 8018c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c52:	2200      	movs	r2, #0
 8018c54:	2104      	movs	r1, #4
 8018c56:	68f8      	ldr	r0, [r7, #12]
 8018c58:	f001 ff8c 	bl	801ab74 <I2C_WaitOnFlagUntilTimeout>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d001      	beq.n	8018c66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8018c62:	2301      	movs	r3, #1
 8018c64:	e07c      	b.n	8018d60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c70:	b2d2      	uxtb	r2, r2
 8018c72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c78:	1c5a      	adds	r2, r3, #1
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c82:	3b01      	subs	r3, #1
 8018c84:	b29a      	uxth	r2, r3
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c8e:	b29b      	uxth	r3, r3
 8018c90:	3b01      	subs	r3, #1
 8018c92:	b29a      	uxth	r2, r3
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c9c:	b29b      	uxth	r3, r3
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d034      	beq.n	8018d0c <HAL_I2C_Mem_Read+0x1d0>
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d130      	bne.n	8018d0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018caa:	697b      	ldr	r3, [r7, #20]
 8018cac:	9300      	str	r3, [sp, #0]
 8018cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cb0:	2200      	movs	r2, #0
 8018cb2:	2180      	movs	r1, #128	; 0x80
 8018cb4:	68f8      	ldr	r0, [r7, #12]
 8018cb6:	f001 ff5d 	bl	801ab74 <I2C_WaitOnFlagUntilTimeout>
 8018cba:	4603      	mov	r3, r0
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d001      	beq.n	8018cc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	e04d      	b.n	8018d60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cc8:	b29b      	uxth	r3, r3
 8018cca:	2bff      	cmp	r3, #255	; 0xff
 8018ccc:	d90e      	bls.n	8018cec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	22ff      	movs	r2, #255	; 0xff
 8018cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018cd8:	b2da      	uxtb	r2, r3
 8018cda:	8979      	ldrh	r1, [r7, #10]
 8018cdc:	2300      	movs	r3, #0
 8018cde:	9300      	str	r3, [sp, #0]
 8018ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018ce4:	68f8      	ldr	r0, [r7, #12]
 8018ce6:	f002 f867 	bl	801adb8 <I2C_TransferConfig>
 8018cea:	e00f      	b.n	8018d0c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cf0:	b29a      	uxth	r2, r3
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018cfa:	b2da      	uxtb	r2, r3
 8018cfc:	8979      	ldrh	r1, [r7, #10]
 8018cfe:	2300      	movs	r3, #0
 8018d00:	9300      	str	r3, [sp, #0]
 8018d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018d06:	68f8      	ldr	r0, [r7, #12]
 8018d08:	f002 f856 	bl	801adb8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d10:	b29b      	uxth	r3, r3
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d19a      	bne.n	8018c4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018d16:	697a      	ldr	r2, [r7, #20]
 8018d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018d1a:	68f8      	ldr	r0, [r7, #12]
 8018d1c:	f001 ffaa 	bl	801ac74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8018d20:	4603      	mov	r3, r0
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d001      	beq.n	8018d2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8018d26:	2301      	movs	r3, #1
 8018d28:	e01a      	b.n	8018d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	2220      	movs	r2, #32
 8018d30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	6859      	ldr	r1, [r3, #4]
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	681a      	ldr	r2, [r3, #0]
 8018d3c:	4b0b      	ldr	r3, [pc, #44]	; (8018d6c <HAL_I2C_Mem_Read+0x230>)
 8018d3e:	400b      	ands	r3, r1
 8018d40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	2220      	movs	r2, #32
 8018d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	2200      	movs	r2, #0
 8018d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	2200      	movs	r2, #0
 8018d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	e000      	b.n	8018d60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8018d5e:	2302      	movs	r3, #2
  }
}
 8018d60:	4618      	mov	r0, r3
 8018d62:	3718      	adds	r7, #24
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd80      	pop	{r7, pc}
 8018d68:	80002400 	.word	0x80002400
 8018d6c:	fe00e800 	.word	0xfe00e800

08018d70 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b088      	sub	sp, #32
 8018d74:	af02      	add	r7, sp, #8
 8018d76:	60f8      	str	r0, [r7, #12]
 8018d78:	4608      	mov	r0, r1
 8018d7a:	4611      	mov	r1, r2
 8018d7c:	461a      	mov	r2, r3
 8018d7e:	4603      	mov	r3, r0
 8018d80:	817b      	strh	r3, [r7, #10]
 8018d82:	460b      	mov	r3, r1
 8018d84:	813b      	strh	r3, [r7, #8]
 8018d86:	4613      	mov	r3, r2
 8018d88:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018d90:	b2db      	uxtb	r3, r3
 8018d92:	2b20      	cmp	r3, #32
 8018d94:	d176      	bne.n	8018e84 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8018d96:	6a3b      	ldr	r3, [r7, #32]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d002      	beq.n	8018da2 <HAL_I2C_Mem_Read_IT+0x32>
 8018d9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d105      	bne.n	8018dae <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018da8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018daa:	2301      	movs	r3, #1
 8018dac:	e06b      	b.n	8018e86 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	699b      	ldr	r3, [r3, #24]
 8018db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018dbc:	d101      	bne.n	8018dc2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8018dbe:	2302      	movs	r3, #2
 8018dc0:	e061      	b.n	8018e86 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018dc8:	2b01      	cmp	r3, #1
 8018dca:	d101      	bne.n	8018dd0 <HAL_I2C_Mem_Read_IT+0x60>
 8018dcc:	2302      	movs	r3, #2
 8018dce:	e05a      	b.n	8018e86 <HAL_I2C_Mem_Read_IT+0x116>
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	2201      	movs	r2, #1
 8018dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018dd8:	f7fb ff8c 	bl	8014cf4 <HAL_GetTick>
 8018ddc:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	2222      	movs	r2, #34	; 0x22
 8018de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	2240      	movs	r2, #64	; 0x40
 8018dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	2200      	movs	r2, #0
 8018df2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	6a3a      	ldr	r2, [r7, #32]
 8018df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	4a23      	ldr	r2, [pc, #140]	; (8018e90 <HAL_I2C_Mem_Read_IT+0x120>)
 8018e04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	4a22      	ldr	r2, [pc, #136]	; (8018e94 <HAL_I2C_Mem_Read_IT+0x124>)
 8018e0a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e10:	b29b      	uxth	r3, r3
 8018e12:	2bff      	cmp	r3, #255	; 0xff
 8018e14:	d906      	bls.n	8018e24 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	22ff      	movs	r2, #255	; 0xff
 8018e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8018e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018e20:	617b      	str	r3, [r7, #20]
 8018e22:	e007      	b.n	8018e34 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e28:	b29a      	uxth	r2, r3
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8018e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018e32:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8018e34:	88f8      	ldrh	r0, [r7, #6]
 8018e36:	893a      	ldrh	r2, [r7, #8]
 8018e38:	8979      	ldrh	r1, [r7, #10]
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	9301      	str	r3, [sp, #4]
 8018e3e:	2319      	movs	r3, #25
 8018e40:	9300      	str	r3, [sp, #0]
 8018e42:	4603      	mov	r3, r0
 8018e44:	68f8      	ldr	r0, [r7, #12]
 8018e46:	f000 ff4d 	bl	8019ce4 <I2C_RequestMemoryRead>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d005      	beq.n	8018e5c <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	2200      	movs	r2, #0
 8018e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018e58:	2301      	movs	r3, #1
 8018e5a:	e014      	b.n	8018e86 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e60:	b2da      	uxtb	r2, r3
 8018e62:	8979      	ldrh	r1, [r7, #10]
 8018e64:	4b0c      	ldr	r3, [pc, #48]	; (8018e98 <HAL_I2C_Mem_Read_IT+0x128>)
 8018e66:	9300      	str	r3, [sp, #0]
 8018e68:	697b      	ldr	r3, [r7, #20]
 8018e6a:	68f8      	ldr	r0, [r7, #12]
 8018e6c:	f001 ffa4 	bl	801adb8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	2200      	movs	r2, #0
 8018e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8018e78:	2102      	movs	r1, #2
 8018e7a:	68f8      	ldr	r0, [r7, #12]
 8018e7c:	f001 ffca 	bl	801ae14 <I2C_Enable_IRQ>

    return HAL_OK;
 8018e80:	2300      	movs	r3, #0
 8018e82:	e000      	b.n	8018e86 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 8018e84:	2302      	movs	r3, #2
  }
}
 8018e86:	4618      	mov	r0, r3
 8018e88:	3718      	adds	r7, #24
 8018e8a:	46bd      	mov	sp, r7
 8018e8c:	bd80      	pop	{r7, pc}
 8018e8e:	bf00      	nop
 8018e90:	ffff0000 	.word	0xffff0000
 8018e94:	0801923f 	.word	0x0801923f
 8018e98:	80002400 	.word	0x80002400

08018e9c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b08a      	sub	sp, #40	; 0x28
 8018ea0:	af02      	add	r7, sp, #8
 8018ea2:	60f8      	str	r0, [r7, #12]
 8018ea4:	4608      	mov	r0, r1
 8018ea6:	4611      	mov	r1, r2
 8018ea8:	461a      	mov	r2, r3
 8018eaa:	4603      	mov	r3, r0
 8018eac:	817b      	strh	r3, [r7, #10]
 8018eae:	460b      	mov	r3, r1
 8018eb0:	813b      	strh	r3, [r7, #8]
 8018eb2:	4613      	mov	r3, r2
 8018eb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018ebc:	b2db      	uxtb	r3, r3
 8018ebe:	2b20      	cmp	r3, #32
 8018ec0:	f040 80d5 	bne.w	801906e <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8018ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d002      	beq.n	8018ed0 <HAL_I2C_Mem_Read_DMA+0x34>
 8018eca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d105      	bne.n	8018edc <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018ed6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018ed8:	2301      	movs	r3, #1
 8018eda:	e0c9      	b.n	8019070 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	699b      	ldr	r3, [r3, #24]
 8018ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018eea:	d101      	bne.n	8018ef0 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8018eec:	2302      	movs	r3, #2
 8018eee:	e0bf      	b.n	8019070 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018ef6:	2b01      	cmp	r3, #1
 8018ef8:	d101      	bne.n	8018efe <HAL_I2C_Mem_Read_DMA+0x62>
 8018efa:	2302      	movs	r3, #2
 8018efc:	e0b8      	b.n	8019070 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	2201      	movs	r2, #1
 8018f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018f06:	f7fb fef5 	bl	8014cf4 <HAL_GetTick>
 8018f0a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	2222      	movs	r2, #34	; 0x22
 8018f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	2240      	movs	r2, #64	; 0x40
 8018f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	2200      	movs	r2, #0
 8018f20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8018f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	4a51      	ldr	r2, [pc, #324]	; (8019078 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8018f32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	4a51      	ldr	r2, [pc, #324]	; (801907c <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8018f38:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f3e:	b29b      	uxth	r3, r3
 8018f40:	2bff      	cmp	r3, #255	; 0xff
 8018f42:	d906      	bls.n	8018f52 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	22ff      	movs	r2, #255	; 0xff
 8018f48:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8018f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018f4e:	61fb      	str	r3, [r7, #28]
 8018f50:	e007      	b.n	8018f62 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f56:	b29a      	uxth	r2, r3
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8018f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018f60:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8018f62:	88f8      	ldrh	r0, [r7, #6]
 8018f64:	893a      	ldrh	r2, [r7, #8]
 8018f66:	8979      	ldrh	r1, [r7, #10]
 8018f68:	69bb      	ldr	r3, [r7, #24]
 8018f6a:	9301      	str	r3, [sp, #4]
 8018f6c:	2319      	movs	r3, #25
 8018f6e:	9300      	str	r3, [sp, #0]
 8018f70:	4603      	mov	r3, r0
 8018f72:	68f8      	ldr	r0, [r7, #12]
 8018f74:	f000 feb6 	bl	8019ce4 <I2C_RequestMemoryRead>
 8018f78:	4603      	mov	r3, r0
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d005      	beq.n	8018f8a <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	2200      	movs	r2, #0
 8018f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018f86:	2301      	movs	r3, #1
 8018f88:	e072      	b.n	8019070 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d020      	beq.n	8018fd4 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f96:	4a3a      	ldr	r2, [pc, #232]	; (8019080 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8018f98:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f9e:	4a39      	ldr	r2, [pc, #228]	; (8019084 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8018fa0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fae:	2200      	movs	r2, #0
 8018fb0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	3324      	adds	r3, #36	; 0x24
 8018fbc:	4619      	mov	r1, r3
 8018fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018fc4:	f7fd fa5a 	bl	801647c <HAL_DMA_Start_IT>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8018fcc:	7dfb      	ldrb	r3, [r7, #23]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d139      	bne.n	8019046 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8018fd2:	e013      	b.n	8018ffc <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	2220      	movs	r2, #32
 8018fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	2200      	movs	r2, #0
 8018fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fe8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	2200      	movs	r2, #0
 8018ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018ff8:	2301      	movs	r3, #1
 8018ffa:	e039      	b.n	8019070 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019000:	b2da      	uxtb	r2, r3
 8019002:	8979      	ldrh	r1, [r7, #10]
 8019004:	4b20      	ldr	r3, [pc, #128]	; (8019088 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8019006:	9300      	str	r3, [sp, #0]
 8019008:	69fb      	ldr	r3, [r7, #28]
 801900a:	68f8      	ldr	r0, [r7, #12]
 801900c:	f001 fed4 	bl	801adb8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019014:	b29a      	uxth	r2, r3
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801901a:	1ad3      	subs	r3, r2, r3
 801901c:	b29a      	uxth	r2, r3
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	2200      	movs	r2, #0
 8019026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801902a:	2110      	movs	r1, #16
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	f001 fef1 	bl	801ae14 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	681a      	ldr	r2, [r3, #0]
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8019040:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8019042:	2300      	movs	r3, #0
 8019044:	e014      	b.n	8019070 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	2220      	movs	r2, #32
 801904a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	2200      	movs	r2, #0
 8019052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801905a:	f043 0210 	orr.w	r2, r3, #16
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	2200      	movs	r2, #0
 8019066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801906a:	2301      	movs	r3, #1
 801906c:	e000      	b.n	8019070 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 801906e:	2302      	movs	r3, #2
  }
}
 8019070:	4618      	mov	r0, r3
 8019072:	3720      	adds	r7, #32
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}
 8019078:	ffff0000 	.word	0xffff0000
 801907c:	08019697 	.word	0x08019697
 8019080:	0801a833 	.word	0x0801a833
 8019084:	0801a8c9 	.word	0x0801a8c9
 8019088:	80002400 	.word	0x80002400

0801908c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b084      	sub	sp, #16
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	699b      	ldr	r3, [r3, #24]
 801909a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d005      	beq.n	80190b8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190b0:	68ba      	ldr	r2, [r7, #8]
 80190b2:	68f9      	ldr	r1, [r7, #12]
 80190b4:	6878      	ldr	r0, [r7, #4]
 80190b6:	4798      	blx	r3
  }
}
 80190b8:	bf00      	nop
 80190ba:	3710      	adds	r7, #16
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}

080190c0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80190c0:	b580      	push	{r7, lr}
 80190c2:	b086      	sub	sp, #24
 80190c4:	af00      	add	r7, sp, #0
 80190c6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	699b      	ldr	r3, [r3, #24]
 80190ce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80190d8:	697b      	ldr	r3, [r7, #20]
 80190da:	0a1b      	lsrs	r3, r3, #8
 80190dc:	f003 0301 	and.w	r3, r3, #1
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d010      	beq.n	8019106 <HAL_I2C_ER_IRQHandler+0x46>
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	09db      	lsrs	r3, r3, #7
 80190e8:	f003 0301 	and.w	r3, r3, #1
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d00a      	beq.n	8019106 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190f4:	f043 0201 	orr.w	r2, r3, #1
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019104:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8019106:	697b      	ldr	r3, [r7, #20]
 8019108:	0a9b      	lsrs	r3, r3, #10
 801910a:	f003 0301 	and.w	r3, r3, #1
 801910e:	2b00      	cmp	r3, #0
 8019110:	d010      	beq.n	8019134 <HAL_I2C_ER_IRQHandler+0x74>
 8019112:	693b      	ldr	r3, [r7, #16]
 8019114:	09db      	lsrs	r3, r3, #7
 8019116:	f003 0301 	and.w	r3, r3, #1
 801911a:	2b00      	cmp	r3, #0
 801911c:	d00a      	beq.n	8019134 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019122:	f043 0208 	orr.w	r2, r3, #8
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019132:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8019134:	697b      	ldr	r3, [r7, #20]
 8019136:	0a5b      	lsrs	r3, r3, #9
 8019138:	f003 0301 	and.w	r3, r3, #1
 801913c:	2b00      	cmp	r3, #0
 801913e:	d010      	beq.n	8019162 <HAL_I2C_ER_IRQHandler+0xa2>
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	09db      	lsrs	r3, r3, #7
 8019144:	f003 0301 	and.w	r3, r3, #1
 8019148:	2b00      	cmp	r3, #0
 801914a:	d00a      	beq.n	8019162 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019150:	f043 0202 	orr.w	r2, r3, #2
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019160:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019166:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	f003 030b 	and.w	r3, r3, #11
 801916e:	2b00      	cmp	r3, #0
 8019170:	d003      	beq.n	801917a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8019172:	68f9      	ldr	r1, [r7, #12]
 8019174:	6878      	ldr	r0, [r7, #4]
 8019176:	f001 fa41 	bl	801a5fc <I2C_ITError>
  }
}
 801917a:	bf00      	nop
 801917c:	3718      	adds	r7, #24
 801917e:	46bd      	mov	sp, r7
 8019180:	bd80      	pop	{r7, pc}

08019182 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019182:	b480      	push	{r7}
 8019184:	b083      	sub	sp, #12
 8019186:	af00      	add	r7, sp, #0
 8019188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801918a:	bf00      	nop
 801918c:	370c      	adds	r7, #12
 801918e:	46bd      	mov	sp, r7
 8019190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019194:	4770      	bx	lr

08019196 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019196:	b480      	push	{r7}
 8019198:	b083      	sub	sp, #12
 801919a:	af00      	add	r7, sp, #0
 801919c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801919e:	bf00      	nop
 80191a0:	370c      	adds	r7, #12
 80191a2:	46bd      	mov	sp, r7
 80191a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a8:	4770      	bx	lr

080191aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80191aa:	b480      	push	{r7}
 80191ac:	b083      	sub	sp, #12
 80191ae:	af00      	add	r7, sp, #0
 80191b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80191b2:	bf00      	nop
 80191b4:	370c      	adds	r7, #12
 80191b6:	46bd      	mov	sp, r7
 80191b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191bc:	4770      	bx	lr

080191be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80191be:	b480      	push	{r7}
 80191c0:	b083      	sub	sp, #12
 80191c2:	af00      	add	r7, sp, #0
 80191c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80191c6:	bf00      	nop
 80191c8:	370c      	adds	r7, #12
 80191ca:	46bd      	mov	sp, r7
 80191cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d0:	4770      	bx	lr

080191d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80191d2:	b480      	push	{r7}
 80191d4:	b083      	sub	sp, #12
 80191d6:	af00      	add	r7, sp, #0
 80191d8:	6078      	str	r0, [r7, #4]
 80191da:	460b      	mov	r3, r1
 80191dc:	70fb      	strb	r3, [r7, #3]
 80191de:	4613      	mov	r3, r2
 80191e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80191e2:	bf00      	nop
 80191e4:	370c      	adds	r7, #12
 80191e6:	46bd      	mov	sp, r7
 80191e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ec:	4770      	bx	lr

080191ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80191ee:	b480      	push	{r7}
 80191f0:	b083      	sub	sp, #12
 80191f2:	af00      	add	r7, sp, #0
 80191f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80191f6:	bf00      	nop
 80191f8:	370c      	adds	r7, #12
 80191fa:	46bd      	mov	sp, r7
 80191fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019200:	4770      	bx	lr

08019202 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019202:	b480      	push	{r7}
 8019204:	b083      	sub	sp, #12
 8019206:	af00      	add	r7, sp, #0
 8019208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801920a:	bf00      	nop
 801920c:	370c      	adds	r7, #12
 801920e:	46bd      	mov	sp, r7
 8019210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019214:	4770      	bx	lr

08019216 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8019216:	b480      	push	{r7}
 8019218:	b083      	sub	sp, #12
 801921a:	af00      	add	r7, sp, #0
 801921c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801921e:	bf00      	nop
 8019220:	370c      	adds	r7, #12
 8019222:	46bd      	mov	sp, r7
 8019224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019228:	4770      	bx	lr

0801922a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801922a:	b480      	push	{r7}
 801922c:	b083      	sub	sp, #12
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8019232:	bf00      	nop
 8019234:	370c      	adds	r7, #12
 8019236:	46bd      	mov	sp, r7
 8019238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923c:	4770      	bx	lr

0801923e <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 801923e:	b580      	push	{r7, lr}
 8019240:	b088      	sub	sp, #32
 8019242:	af02      	add	r7, sp, #8
 8019244:	60f8      	str	r0, [r7, #12]
 8019246:	60b9      	str	r1, [r7, #8]
 8019248:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 801924a:	68bb      	ldr	r3, [r7, #8]
 801924c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019254:	2b01      	cmp	r3, #1
 8019256:	d101      	bne.n	801925c <I2C_Master_ISR_IT+0x1e>
 8019258:	2302      	movs	r3, #2
 801925a:	e115      	b.n	8019488 <I2C_Master_ISR_IT+0x24a>
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	2201      	movs	r2, #1
 8019260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8019264:	697b      	ldr	r3, [r7, #20]
 8019266:	091b      	lsrs	r3, r3, #4
 8019268:	f003 0301 	and.w	r3, r3, #1
 801926c:	2b00      	cmp	r3, #0
 801926e:	d013      	beq.n	8019298 <I2C_Master_ISR_IT+0x5a>
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	091b      	lsrs	r3, r3, #4
 8019274:	f003 0301 	and.w	r3, r3, #1
 8019278:	2b00      	cmp	r3, #0
 801927a:	d00d      	beq.n	8019298 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	2210      	movs	r2, #16
 8019282:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019288:	f043 0204 	orr.w	r2, r3, #4
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8019290:	68f8      	ldr	r0, [r7, #12]
 8019292:	f001 faaa 	bl	801a7ea <I2C_Flush_TXDR>
 8019296:	e0e2      	b.n	801945e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8019298:	697b      	ldr	r3, [r7, #20]
 801929a:	089b      	lsrs	r3, r3, #2
 801929c:	f003 0301 	and.w	r3, r3, #1
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d023      	beq.n	80192ec <I2C_Master_ISR_IT+0xae>
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	089b      	lsrs	r3, r3, #2
 80192a8:	f003 0301 	and.w	r3, r3, #1
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d01d      	beq.n	80192ec <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80192b0:	697b      	ldr	r3, [r7, #20]
 80192b2:	f023 0304 	bic.w	r3, r3, #4
 80192b6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192c2:	b2d2      	uxtb	r2, r2
 80192c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ca:	1c5a      	adds	r2, r3, #1
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80192d4:	3b01      	subs	r3, #1
 80192d6:	b29a      	uxth	r2, r3
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192e0:	b29b      	uxth	r3, r3
 80192e2:	3b01      	subs	r3, #1
 80192e4:	b29a      	uxth	r2, r3
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80192ea:	e0b8      	b.n	801945e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80192ec:	697b      	ldr	r3, [r7, #20]
 80192ee:	085b      	lsrs	r3, r3, #1
 80192f0:	f003 0301 	and.w	r3, r3, #1
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d01e      	beq.n	8019336 <I2C_Master_ISR_IT+0xf8>
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	085b      	lsrs	r3, r3, #1
 80192fc:	f003 0301 	and.w	r3, r3, #1
 8019300:	2b00      	cmp	r3, #0
 8019302:	d018      	beq.n	8019336 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019308:	781a      	ldrb	r2, [r3, #0]
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019314:	1c5a      	adds	r2, r3, #1
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801931e:	3b01      	subs	r3, #1
 8019320:	b29a      	uxth	r2, r3
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801932a:	b29b      	uxth	r3, r3
 801932c:	3b01      	subs	r3, #1
 801932e:	b29a      	uxth	r2, r3
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019334:	e093      	b.n	801945e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	09db      	lsrs	r3, r3, #7
 801933a:	f003 0301 	and.w	r3, r3, #1
 801933e:	2b00      	cmp	r3, #0
 8019340:	d05e      	beq.n	8019400 <I2C_Master_ISR_IT+0x1c2>
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	099b      	lsrs	r3, r3, #6
 8019346:	f003 0301 	and.w	r3, r3, #1
 801934a:	2b00      	cmp	r3, #0
 801934c:	d058      	beq.n	8019400 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019352:	b29b      	uxth	r3, r3
 8019354:	2b00      	cmp	r3, #0
 8019356:	d041      	beq.n	80193dc <I2C_Master_ISR_IT+0x19e>
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801935c:	2b00      	cmp	r3, #0
 801935e:	d13d      	bne.n	80193dc <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	b29b      	uxth	r3, r3
 8019368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801936c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019372:	b29b      	uxth	r3, r3
 8019374:	2bff      	cmp	r3, #255	; 0xff
 8019376:	d90e      	bls.n	8019396 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	22ff      	movs	r2, #255	; 0xff
 801937c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019382:	b2da      	uxtb	r2, r3
 8019384:	8a79      	ldrh	r1, [r7, #18]
 8019386:	2300      	movs	r3, #0
 8019388:	9300      	str	r3, [sp, #0]
 801938a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801938e:	68f8      	ldr	r0, [r7, #12]
 8019390:	f001 fd12 	bl	801adb8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019394:	e033      	b.n	80193fe <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801939a:	b29a      	uxth	r2, r3
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80193a8:	d00c      	beq.n	80193c4 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80193ae:	b2da      	uxtb	r2, r3
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80193b4:	8a79      	ldrh	r1, [r7, #18]
 80193b6:	2300      	movs	r3, #0
 80193b8:	9300      	str	r3, [sp, #0]
 80193ba:	4603      	mov	r3, r0
 80193bc:	68f8      	ldr	r0, [r7, #12]
 80193be:	f001 fcfb 	bl	801adb8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80193c2:	e01c      	b.n	80193fe <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80193c8:	b2da      	uxtb	r2, r3
 80193ca:	8a79      	ldrh	r1, [r7, #18]
 80193cc:	2300      	movs	r3, #0
 80193ce:	9300      	str	r3, [sp, #0]
 80193d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80193d4:	68f8      	ldr	r0, [r7, #12]
 80193d6:	f001 fcef 	bl	801adb8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80193da:	e010      	b.n	80193fe <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	685b      	ldr	r3, [r3, #4]
 80193e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80193e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80193ea:	d003      	beq.n	80193f4 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80193ec:	68f8      	ldr	r0, [r7, #12]
 80193ee:	f000 fd51 	bl	8019e94 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80193f2:	e034      	b.n	801945e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80193f4:	2140      	movs	r1, #64	; 0x40
 80193f6:	68f8      	ldr	r0, [r7, #12]
 80193f8:	f001 f900 	bl	801a5fc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80193fc:	e02f      	b.n	801945e <I2C_Master_ISR_IT+0x220>
 80193fe:	e02e      	b.n	801945e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8019400:	697b      	ldr	r3, [r7, #20]
 8019402:	099b      	lsrs	r3, r3, #6
 8019404:	f003 0301 	and.w	r3, r3, #1
 8019408:	2b00      	cmp	r3, #0
 801940a:	d028      	beq.n	801945e <I2C_Master_ISR_IT+0x220>
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	099b      	lsrs	r3, r3, #6
 8019410:	f003 0301 	and.w	r3, r3, #1
 8019414:	2b00      	cmp	r3, #0
 8019416:	d022      	beq.n	801945e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801941c:	b29b      	uxth	r3, r3
 801941e:	2b00      	cmp	r3, #0
 8019420:	d119      	bne.n	8019456 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	685b      	ldr	r3, [r3, #4]
 8019428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801942c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019430:	d015      	beq.n	801945e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019436:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801943a:	d108      	bne.n	801944e <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	685a      	ldr	r2, [r3, #4]
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801944a:	605a      	str	r2, [r3, #4]
 801944c:	e007      	b.n	801945e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801944e:	68f8      	ldr	r0, [r7, #12]
 8019450:	f000 fd20 	bl	8019e94 <I2C_ITMasterSeqCplt>
 8019454:	e003      	b.n	801945e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8019456:	2140      	movs	r1, #64	; 0x40
 8019458:	68f8      	ldr	r0, [r7, #12]
 801945a:	f001 f8cf 	bl	801a5fc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801945e:	697b      	ldr	r3, [r7, #20]
 8019460:	095b      	lsrs	r3, r3, #5
 8019462:	f003 0301 	and.w	r3, r3, #1
 8019466:	2b00      	cmp	r3, #0
 8019468:	d009      	beq.n	801947e <I2C_Master_ISR_IT+0x240>
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	095b      	lsrs	r3, r3, #5
 801946e:	f003 0301 	and.w	r3, r3, #1
 8019472:	2b00      	cmp	r3, #0
 8019474:	d003      	beq.n	801947e <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8019476:	6979      	ldr	r1, [r7, #20]
 8019478:	68f8      	ldr	r0, [r7, #12]
 801947a:	f000 fda7 	bl	8019fcc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	2200      	movs	r2, #0
 8019482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019486:	2300      	movs	r3, #0
}
 8019488:	4618      	mov	r0, r3
 801948a:	3718      	adds	r7, #24
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}

08019490 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b086      	sub	sp, #24
 8019494:	af00      	add	r7, sp, #0
 8019496:	60f8      	str	r0, [r7, #12]
 8019498:	60b9      	str	r1, [r7, #8]
 801949a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80194ac:	2b01      	cmp	r3, #1
 80194ae:	d101      	bne.n	80194b4 <I2C_Slave_ISR_IT+0x24>
 80194b0:	2302      	movs	r3, #2
 80194b2:	e0ec      	b.n	801968e <I2C_Slave_ISR_IT+0x1fe>
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	2201      	movs	r2, #1
 80194b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80194bc:	693b      	ldr	r3, [r7, #16]
 80194be:	095b      	lsrs	r3, r3, #5
 80194c0:	f003 0301 	and.w	r3, r3, #1
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d009      	beq.n	80194dc <I2C_Slave_ISR_IT+0x4c>
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	095b      	lsrs	r3, r3, #5
 80194cc:	f003 0301 	and.w	r3, r3, #1
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d003      	beq.n	80194dc <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80194d4:	6939      	ldr	r1, [r7, #16]
 80194d6:	68f8      	ldr	r0, [r7, #12]
 80194d8:	f000 fe42 	bl	801a160 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80194dc:	693b      	ldr	r3, [r7, #16]
 80194de:	091b      	lsrs	r3, r3, #4
 80194e0:	f003 0301 	and.w	r3, r3, #1
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d04d      	beq.n	8019584 <I2C_Slave_ISR_IT+0xf4>
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	091b      	lsrs	r3, r3, #4
 80194ec:	f003 0301 	and.w	r3, r3, #1
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d047      	beq.n	8019584 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194f8:	b29b      	uxth	r3, r3
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d128      	bne.n	8019550 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019504:	b2db      	uxtb	r3, r3
 8019506:	2b28      	cmp	r3, #40	; 0x28
 8019508:	d108      	bne.n	801951c <I2C_Slave_ISR_IT+0x8c>
 801950a:	697b      	ldr	r3, [r7, #20]
 801950c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019510:	d104      	bne.n	801951c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8019512:	6939      	ldr	r1, [r7, #16]
 8019514:	68f8      	ldr	r0, [r7, #12]
 8019516:	f001 f81b 	bl	801a550 <I2C_ITListenCplt>
 801951a:	e032      	b.n	8019582 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019522:	b2db      	uxtb	r3, r3
 8019524:	2b29      	cmp	r3, #41	; 0x29
 8019526:	d10e      	bne.n	8019546 <I2C_Slave_ISR_IT+0xb6>
 8019528:	697b      	ldr	r3, [r7, #20]
 801952a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801952e:	d00a      	beq.n	8019546 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	2210      	movs	r2, #16
 8019536:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8019538:	68f8      	ldr	r0, [r7, #12]
 801953a:	f001 f956 	bl	801a7ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801953e:	68f8      	ldr	r0, [r7, #12]
 8019540:	f000 fce5 	bl	8019f0e <I2C_ITSlaveSeqCplt>
 8019544:	e01d      	b.n	8019582 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	2210      	movs	r2, #16
 801954c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 801954e:	e096      	b.n	801967e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	2210      	movs	r2, #16
 8019556:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801955c:	f043 0204 	orr.w	r2, r3, #4
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8019564:	697b      	ldr	r3, [r7, #20]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d004      	beq.n	8019574 <I2C_Slave_ISR_IT+0xe4>
 801956a:	697b      	ldr	r3, [r7, #20]
 801956c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019570:	f040 8085 	bne.w	801967e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019578:	4619      	mov	r1, r3
 801957a:	68f8      	ldr	r0, [r7, #12]
 801957c:	f001 f83e 	bl	801a5fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8019580:	e07d      	b.n	801967e <I2C_Slave_ISR_IT+0x1ee>
 8019582:	e07c      	b.n	801967e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8019584:	693b      	ldr	r3, [r7, #16]
 8019586:	089b      	lsrs	r3, r3, #2
 8019588:	f003 0301 	and.w	r3, r3, #1
 801958c:	2b00      	cmp	r3, #0
 801958e:	d030      	beq.n	80195f2 <I2C_Slave_ISR_IT+0x162>
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	089b      	lsrs	r3, r3, #2
 8019594:	f003 0301 	and.w	r3, r3, #1
 8019598:	2b00      	cmp	r3, #0
 801959a:	d02a      	beq.n	80195f2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195a0:	b29b      	uxth	r3, r3
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d018      	beq.n	80195d8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195b0:	b2d2      	uxtb	r2, r2
 80195b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195b8:	1c5a      	adds	r2, r3, #1
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80195c2:	3b01      	subs	r3, #1
 80195c4:	b29a      	uxth	r2, r3
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	3b01      	subs	r3, #1
 80195d2:	b29a      	uxth	r2, r3
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195dc:	b29b      	uxth	r3, r3
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d14f      	bne.n	8019682 <I2C_Slave_ISR_IT+0x1f2>
 80195e2:	697b      	ldr	r3, [r7, #20]
 80195e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80195e8:	d04b      	beq.n	8019682 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80195ea:	68f8      	ldr	r0, [r7, #12]
 80195ec:	f000 fc8f 	bl	8019f0e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80195f0:	e047      	b.n	8019682 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80195f2:	693b      	ldr	r3, [r7, #16]
 80195f4:	08db      	lsrs	r3, r3, #3
 80195f6:	f003 0301 	and.w	r3, r3, #1
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d00a      	beq.n	8019614 <I2C_Slave_ISR_IT+0x184>
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	08db      	lsrs	r3, r3, #3
 8019602:	f003 0301 	and.w	r3, r3, #1
 8019606:	2b00      	cmp	r3, #0
 8019608:	d004      	beq.n	8019614 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 801960a:	6939      	ldr	r1, [r7, #16]
 801960c:	68f8      	ldr	r0, [r7, #12]
 801960e:	f000 fbbd 	bl	8019d8c <I2C_ITAddrCplt>
 8019612:	e037      	b.n	8019684 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8019614:	693b      	ldr	r3, [r7, #16]
 8019616:	085b      	lsrs	r3, r3, #1
 8019618:	f003 0301 	and.w	r3, r3, #1
 801961c:	2b00      	cmp	r3, #0
 801961e:	d031      	beq.n	8019684 <I2C_Slave_ISR_IT+0x1f4>
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	085b      	lsrs	r3, r3, #1
 8019624:	f003 0301 	and.w	r3, r3, #1
 8019628:	2b00      	cmp	r3, #0
 801962a:	d02b      	beq.n	8019684 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019630:	b29b      	uxth	r3, r3
 8019632:	2b00      	cmp	r3, #0
 8019634:	d018      	beq.n	8019668 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801963a:	781a      	ldrb	r2, [r3, #0]
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019646:	1c5a      	adds	r2, r3, #1
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019650:	b29b      	uxth	r3, r3
 8019652:	3b01      	subs	r3, #1
 8019654:	b29a      	uxth	r2, r3
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801965e:	3b01      	subs	r3, #1
 8019660:	b29a      	uxth	r2, r3
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	851a      	strh	r2, [r3, #40]	; 0x28
 8019666:	e00d      	b.n	8019684 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8019668:	697b      	ldr	r3, [r7, #20]
 801966a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801966e:	d002      	beq.n	8019676 <I2C_Slave_ISR_IT+0x1e6>
 8019670:	697b      	ldr	r3, [r7, #20]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d106      	bne.n	8019684 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8019676:	68f8      	ldr	r0, [r7, #12]
 8019678:	f000 fc49 	bl	8019f0e <I2C_ITSlaveSeqCplt>
 801967c:	e002      	b.n	8019684 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 801967e:	bf00      	nop
 8019680:	e000      	b.n	8019684 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8019682:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2200      	movs	r2, #0
 8019688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801968c:	2300      	movs	r3, #0
}
 801968e:	4618      	mov	r0, r3
 8019690:	3718      	adds	r7, #24
 8019692:	46bd      	mov	sp, r7
 8019694:	bd80      	pop	{r7, pc}

08019696 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8019696:	b580      	push	{r7, lr}
 8019698:	b088      	sub	sp, #32
 801969a:	af02      	add	r7, sp, #8
 801969c:	60f8      	str	r0, [r7, #12]
 801969e:	60b9      	str	r1, [r7, #8]
 80196a0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80196a8:	2b01      	cmp	r3, #1
 80196aa:	d101      	bne.n	80196b0 <I2C_Master_ISR_DMA+0x1a>
 80196ac:	2302      	movs	r3, #2
 80196ae:	e0e1      	b.n	8019874 <I2C_Master_ISR_DMA+0x1de>
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	2201      	movs	r2, #1
 80196b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80196b8:	68bb      	ldr	r3, [r7, #8]
 80196ba:	091b      	lsrs	r3, r3, #4
 80196bc:	f003 0301 	and.w	r3, r3, #1
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d017      	beq.n	80196f4 <I2C_Master_ISR_DMA+0x5e>
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	091b      	lsrs	r3, r3, #4
 80196c8:	f003 0301 	and.w	r3, r3, #1
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d011      	beq.n	80196f4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	2210      	movs	r2, #16
 80196d6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196dc:	f043 0204 	orr.w	r2, r3, #4
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80196e4:	2120      	movs	r1, #32
 80196e6:	68f8      	ldr	r0, [r7, #12]
 80196e8:	f001 fb94 	bl	801ae14 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80196ec:	68f8      	ldr	r0, [r7, #12]
 80196ee:	f001 f87c 	bl	801a7ea <I2C_Flush_TXDR>
 80196f2:	e0ba      	b.n	801986a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80196f4:	68bb      	ldr	r3, [r7, #8]
 80196f6:	09db      	lsrs	r3, r3, #7
 80196f8:	f003 0301 	and.w	r3, r3, #1
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d072      	beq.n	80197e6 <I2C_Master_ISR_DMA+0x150>
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	099b      	lsrs	r3, r3, #6
 8019704:	f003 0301 	and.w	r3, r3, #1
 8019708:	2b00      	cmp	r3, #0
 801970a:	d06c      	beq.n	80197e6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	681a      	ldr	r2, [r3, #0]
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801971a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019720:	b29b      	uxth	r3, r3
 8019722:	2b00      	cmp	r3, #0
 8019724:	d04e      	beq.n	80197c4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	685b      	ldr	r3, [r3, #4]
 801972c:	b29b      	uxth	r3, r3
 801972e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019732:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019738:	b29b      	uxth	r3, r3
 801973a:	2bff      	cmp	r3, #255	; 0xff
 801973c:	d906      	bls.n	801974c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	22ff      	movs	r2, #255	; 0xff
 8019742:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8019744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019748:	617b      	str	r3, [r7, #20]
 801974a:	e010      	b.n	801976e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019750:	b29a      	uxth	r2, r3
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801975a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801975e:	d003      	beq.n	8019768 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019764:	617b      	str	r3, [r7, #20]
 8019766:	e002      	b.n	801976e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8019768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801976c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019772:	b2da      	uxtb	r2, r3
 8019774:	8a79      	ldrh	r1, [r7, #18]
 8019776:	2300      	movs	r3, #0
 8019778:	9300      	str	r3, [sp, #0]
 801977a:	697b      	ldr	r3, [r7, #20]
 801977c:	68f8      	ldr	r0, [r7, #12]
 801977e:	f001 fb1b 	bl	801adb8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019786:	b29a      	uxth	r2, r3
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801978c:	1ad3      	subs	r3, r2, r3
 801978e:	b29a      	uxth	r2, r3
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801979a:	b2db      	uxtb	r3, r3
 801979c:	2b22      	cmp	r3, #34	; 0x22
 801979e:	d108      	bne.n	80197b2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	681a      	ldr	r2, [r3, #0]
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80197ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80197b0:	e05b      	b.n	801986a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	681a      	ldr	r2, [r3, #0]
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80197c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80197c2:	e052      	b.n	801986a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	685b      	ldr	r3, [r3, #4]
 80197ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80197ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80197d2:	d003      	beq.n	80197dc <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80197d4:	68f8      	ldr	r0, [r7, #12]
 80197d6:	f000 fb5d 	bl	8019e94 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80197da:	e046      	b.n	801986a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80197dc:	2140      	movs	r1, #64	; 0x40
 80197de:	68f8      	ldr	r0, [r7, #12]
 80197e0:	f000 ff0c 	bl	801a5fc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80197e4:	e041      	b.n	801986a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	099b      	lsrs	r3, r3, #6
 80197ea:	f003 0301 	and.w	r3, r3, #1
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d029      	beq.n	8019846 <I2C_Master_ISR_DMA+0x1b0>
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	099b      	lsrs	r3, r3, #6
 80197f6:	f003 0301 	and.w	r3, r3, #1
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d023      	beq.n	8019846 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019802:	b29b      	uxth	r3, r3
 8019804:	2b00      	cmp	r3, #0
 8019806:	d119      	bne.n	801983c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	685b      	ldr	r3, [r3, #4]
 801980e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019816:	d027      	beq.n	8019868 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801981c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019820:	d108      	bne.n	8019834 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	685a      	ldr	r2, [r3, #4]
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019830:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8019832:	e019      	b.n	8019868 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8019834:	68f8      	ldr	r0, [r7, #12]
 8019836:	f000 fb2d 	bl	8019e94 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801983a:	e015      	b.n	8019868 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801983c:	2140      	movs	r1, #64	; 0x40
 801983e:	68f8      	ldr	r0, [r7, #12]
 8019840:	f000 fedc 	bl	801a5fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8019844:	e010      	b.n	8019868 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8019846:	68bb      	ldr	r3, [r7, #8]
 8019848:	095b      	lsrs	r3, r3, #5
 801984a:	f003 0301 	and.w	r3, r3, #1
 801984e:	2b00      	cmp	r3, #0
 8019850:	d00b      	beq.n	801986a <I2C_Master_ISR_DMA+0x1d4>
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	095b      	lsrs	r3, r3, #5
 8019856:	f003 0301 	and.w	r3, r3, #1
 801985a:	2b00      	cmp	r3, #0
 801985c:	d005      	beq.n	801986a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801985e:	68b9      	ldr	r1, [r7, #8]
 8019860:	68f8      	ldr	r0, [r7, #12]
 8019862:	f000 fbb3 	bl	8019fcc <I2C_ITMasterCplt>
 8019866:	e000      	b.n	801986a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8019868:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	2200      	movs	r2, #0
 801986e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019872:	2300      	movs	r3, #0
}
 8019874:	4618      	mov	r0, r3
 8019876:	3718      	adds	r7, #24
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}

0801987c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b088      	sub	sp, #32
 8019880:	af00      	add	r7, sp, #0
 8019882:	60f8      	str	r0, [r7, #12]
 8019884:	60b9      	str	r1, [r7, #8]
 8019886:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801988c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801988e:	2300      	movs	r3, #0
 8019890:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019898:	2b01      	cmp	r3, #1
 801989a:	d101      	bne.n	80198a0 <I2C_Slave_ISR_DMA+0x24>
 801989c:	2302      	movs	r3, #2
 801989e:	e1c8      	b.n	8019c32 <I2C_Slave_ISR_DMA+0x3b6>
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	2201      	movs	r2, #1
 80198a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80198a8:	68bb      	ldr	r3, [r7, #8]
 80198aa:	095b      	lsrs	r3, r3, #5
 80198ac:	f003 0301 	and.w	r3, r3, #1
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d009      	beq.n	80198c8 <I2C_Slave_ISR_DMA+0x4c>
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	095b      	lsrs	r3, r3, #5
 80198b8:	f003 0301 	and.w	r3, r3, #1
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d003      	beq.n	80198c8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80198c0:	68b9      	ldr	r1, [r7, #8]
 80198c2:	68f8      	ldr	r0, [r7, #12]
 80198c4:	f000 fc4c 	bl	801a160 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80198c8:	68bb      	ldr	r3, [r7, #8]
 80198ca:	091b      	lsrs	r3, r3, #4
 80198cc:	f003 0301 	and.w	r3, r3, #1
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	f000 8199 	beq.w	8019c08 <I2C_Slave_ISR_DMA+0x38c>
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	091b      	lsrs	r3, r3, #4
 80198da:	f003 0301 	and.w	r3, r3, #1
 80198de:	2b00      	cmp	r3, #0
 80198e0:	f000 8192 	beq.w	8019c08 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	0b9b      	lsrs	r3, r3, #14
 80198e8:	f003 0301 	and.w	r3, r3, #1
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d106      	bne.n	80198fe <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	0bdb      	lsrs	r3, r3, #15
 80198f4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	f000 817e 	beq.w	8019bfa <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019902:	2b00      	cmp	r3, #0
 8019904:	d07c      	beq.n	8019a00 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	0bdb      	lsrs	r3, r3, #15
 801990a:	f003 0301 	and.w	r3, r3, #1
 801990e:	2b00      	cmp	r3, #0
 8019910:	d076      	beq.n	8019a00 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	4a8d      	ldr	r2, [pc, #564]	; (8019b50 <I2C_Slave_ISR_DMA+0x2d4>)
 801991a:	4293      	cmp	r3, r2
 801991c:	d059      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	4a8b      	ldr	r2, [pc, #556]	; (8019b54 <I2C_Slave_ISR_DMA+0x2d8>)
 8019926:	4293      	cmp	r3, r2
 8019928:	d053      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	4a89      	ldr	r2, [pc, #548]	; (8019b58 <I2C_Slave_ISR_DMA+0x2dc>)
 8019932:	4293      	cmp	r3, r2
 8019934:	d04d      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	4a87      	ldr	r2, [pc, #540]	; (8019b5c <I2C_Slave_ISR_DMA+0x2e0>)
 801993e:	4293      	cmp	r3, r2
 8019940:	d047      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	4a85      	ldr	r2, [pc, #532]	; (8019b60 <I2C_Slave_ISR_DMA+0x2e4>)
 801994a:	4293      	cmp	r3, r2
 801994c:	d041      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	4a83      	ldr	r2, [pc, #524]	; (8019b64 <I2C_Slave_ISR_DMA+0x2e8>)
 8019956:	4293      	cmp	r3, r2
 8019958:	d03b      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	4a81      	ldr	r2, [pc, #516]	; (8019b68 <I2C_Slave_ISR_DMA+0x2ec>)
 8019962:	4293      	cmp	r3, r2
 8019964:	d035      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	4a7f      	ldr	r2, [pc, #508]	; (8019b6c <I2C_Slave_ISR_DMA+0x2f0>)
 801996e:	4293      	cmp	r3, r2
 8019970:	d02f      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	4a7d      	ldr	r2, [pc, #500]	; (8019b70 <I2C_Slave_ISR_DMA+0x2f4>)
 801997a:	4293      	cmp	r3, r2
 801997c:	d029      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	4a7b      	ldr	r2, [pc, #492]	; (8019b74 <I2C_Slave_ISR_DMA+0x2f8>)
 8019986:	4293      	cmp	r3, r2
 8019988:	d023      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	4a79      	ldr	r2, [pc, #484]	; (8019b78 <I2C_Slave_ISR_DMA+0x2fc>)
 8019992:	4293      	cmp	r3, r2
 8019994:	d01d      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	4a77      	ldr	r2, [pc, #476]	; (8019b7c <I2C_Slave_ISR_DMA+0x300>)
 801999e:	4293      	cmp	r3, r2
 80199a0:	d017      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	4a75      	ldr	r2, [pc, #468]	; (8019b80 <I2C_Slave_ISR_DMA+0x304>)
 80199aa:	4293      	cmp	r3, r2
 80199ac:	d011      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	4a73      	ldr	r2, [pc, #460]	; (8019b84 <I2C_Slave_ISR_DMA+0x308>)
 80199b6:	4293      	cmp	r3, r2
 80199b8:	d00b      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	4a71      	ldr	r2, [pc, #452]	; (8019b88 <I2C_Slave_ISR_DMA+0x30c>)
 80199c2:	4293      	cmp	r3, r2
 80199c4:	d005      	beq.n	80199d2 <I2C_Slave_ISR_DMA+0x156>
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	4a6f      	ldr	r2, [pc, #444]	; (8019b8c <I2C_Slave_ISR_DMA+0x310>)
 80199ce:	4293      	cmp	r3, r2
 80199d0:	d109      	bne.n	80199e6 <I2C_Slave_ISR_DMA+0x16a>
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	685b      	ldr	r3, [r3, #4]
 80199da:	2b00      	cmp	r3, #0
 80199dc:	bf0c      	ite	eq
 80199de:	2301      	moveq	r3, #1
 80199e0:	2300      	movne	r3, #0
 80199e2:	b2db      	uxtb	r3, r3
 80199e4:	e008      	b.n	80199f8 <I2C_Slave_ISR_DMA+0x17c>
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	685b      	ldr	r3, [r3, #4]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	bf0c      	ite	eq
 80199f2:	2301      	moveq	r3, #1
 80199f4:	2300      	movne	r3, #0
 80199f6:	b2db      	uxtb	r3, r3
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d001      	beq.n	8019a00 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80199fc:	2301      	movs	r3, #1
 80199fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d07c      	beq.n	8019b02 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	0b9b      	lsrs	r3, r3, #14
 8019a0c:	f003 0301 	and.w	r3, r3, #1
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d076      	beq.n	8019b02 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	4a4d      	ldr	r2, [pc, #308]	; (8019b50 <I2C_Slave_ISR_DMA+0x2d4>)
 8019a1c:	4293      	cmp	r3, r2
 8019a1e:	d059      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	4a4b      	ldr	r2, [pc, #300]	; (8019b54 <I2C_Slave_ISR_DMA+0x2d8>)
 8019a28:	4293      	cmp	r3, r2
 8019a2a:	d053      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	4a49      	ldr	r2, [pc, #292]	; (8019b58 <I2C_Slave_ISR_DMA+0x2dc>)
 8019a34:	4293      	cmp	r3, r2
 8019a36:	d04d      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	4a47      	ldr	r2, [pc, #284]	; (8019b5c <I2C_Slave_ISR_DMA+0x2e0>)
 8019a40:	4293      	cmp	r3, r2
 8019a42:	d047      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	4a45      	ldr	r2, [pc, #276]	; (8019b60 <I2C_Slave_ISR_DMA+0x2e4>)
 8019a4c:	4293      	cmp	r3, r2
 8019a4e:	d041      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	4a43      	ldr	r2, [pc, #268]	; (8019b64 <I2C_Slave_ISR_DMA+0x2e8>)
 8019a58:	4293      	cmp	r3, r2
 8019a5a:	d03b      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	4a41      	ldr	r2, [pc, #260]	; (8019b68 <I2C_Slave_ISR_DMA+0x2ec>)
 8019a64:	4293      	cmp	r3, r2
 8019a66:	d035      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	4a3f      	ldr	r2, [pc, #252]	; (8019b6c <I2C_Slave_ISR_DMA+0x2f0>)
 8019a70:	4293      	cmp	r3, r2
 8019a72:	d02f      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	4a3d      	ldr	r2, [pc, #244]	; (8019b70 <I2C_Slave_ISR_DMA+0x2f4>)
 8019a7c:	4293      	cmp	r3, r2
 8019a7e:	d029      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	4a3b      	ldr	r2, [pc, #236]	; (8019b74 <I2C_Slave_ISR_DMA+0x2f8>)
 8019a88:	4293      	cmp	r3, r2
 8019a8a:	d023      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	4a39      	ldr	r2, [pc, #228]	; (8019b78 <I2C_Slave_ISR_DMA+0x2fc>)
 8019a94:	4293      	cmp	r3, r2
 8019a96:	d01d      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	4a37      	ldr	r2, [pc, #220]	; (8019b7c <I2C_Slave_ISR_DMA+0x300>)
 8019aa0:	4293      	cmp	r3, r2
 8019aa2:	d017      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	4a35      	ldr	r2, [pc, #212]	; (8019b80 <I2C_Slave_ISR_DMA+0x304>)
 8019aac:	4293      	cmp	r3, r2
 8019aae:	d011      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	4a33      	ldr	r2, [pc, #204]	; (8019b84 <I2C_Slave_ISR_DMA+0x308>)
 8019ab8:	4293      	cmp	r3, r2
 8019aba:	d00b      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	4a31      	ldr	r2, [pc, #196]	; (8019b88 <I2C_Slave_ISR_DMA+0x30c>)
 8019ac4:	4293      	cmp	r3, r2
 8019ac6:	d005      	beq.n	8019ad4 <I2C_Slave_ISR_DMA+0x258>
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	4a2f      	ldr	r2, [pc, #188]	; (8019b8c <I2C_Slave_ISR_DMA+0x310>)
 8019ad0:	4293      	cmp	r3, r2
 8019ad2:	d109      	bne.n	8019ae8 <I2C_Slave_ISR_DMA+0x26c>
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	685b      	ldr	r3, [r3, #4]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	bf0c      	ite	eq
 8019ae0:	2301      	moveq	r3, #1
 8019ae2:	2300      	movne	r3, #0
 8019ae4:	b2db      	uxtb	r3, r3
 8019ae6:	e008      	b.n	8019afa <I2C_Slave_ISR_DMA+0x27e>
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	685b      	ldr	r3, [r3, #4]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	bf0c      	ite	eq
 8019af4:	2301      	moveq	r3, #1
 8019af6:	2300      	movne	r3, #0
 8019af8:	b2db      	uxtb	r3, r3
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d001      	beq.n	8019b02 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8019afe:	2301      	movs	r3, #1
 8019b00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8019b02:	69fb      	ldr	r3, [r7, #28]
 8019b04:	2b01      	cmp	r3, #1
 8019b06:	d148      	bne.n	8019b9a <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	2b28      	cmp	r3, #40	; 0x28
 8019b12:	d108      	bne.n	8019b26 <I2C_Slave_ISR_DMA+0x2aa>
 8019b14:	69bb      	ldr	r3, [r7, #24]
 8019b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8019b1a:	d104      	bne.n	8019b26 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8019b1c:	68b9      	ldr	r1, [r7, #8]
 8019b1e:	68f8      	ldr	r0, [r7, #12]
 8019b20:	f000 fd16 	bl	801a550 <I2C_ITListenCplt>
 8019b24:	e068      	b.n	8019bf8 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019b2c:	b2db      	uxtb	r3, r3
 8019b2e:	2b29      	cmp	r3, #41	; 0x29
 8019b30:	d12e      	bne.n	8019b90 <I2C_Slave_ISR_DMA+0x314>
 8019b32:	69bb      	ldr	r3, [r7, #24]
 8019b34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019b38:	d02a      	beq.n	8019b90 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	2210      	movs	r2, #16
 8019b40:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8019b42:	68f8      	ldr	r0, [r7, #12]
 8019b44:	f000 fe51 	bl	801a7ea <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8019b48:	68f8      	ldr	r0, [r7, #12]
 8019b4a:	f000 f9e0 	bl	8019f0e <I2C_ITSlaveSeqCplt>
 8019b4e:	e053      	b.n	8019bf8 <I2C_Slave_ISR_DMA+0x37c>
 8019b50:	40020010 	.word	0x40020010
 8019b54:	40020028 	.word	0x40020028
 8019b58:	40020040 	.word	0x40020040
 8019b5c:	40020058 	.word	0x40020058
 8019b60:	40020070 	.word	0x40020070
 8019b64:	40020088 	.word	0x40020088
 8019b68:	400200a0 	.word	0x400200a0
 8019b6c:	400200b8 	.word	0x400200b8
 8019b70:	40020410 	.word	0x40020410
 8019b74:	40020428 	.word	0x40020428
 8019b78:	40020440 	.word	0x40020440
 8019b7c:	40020458 	.word	0x40020458
 8019b80:	40020470 	.word	0x40020470
 8019b84:	40020488 	.word	0x40020488
 8019b88:	400204a0 	.word	0x400204a0
 8019b8c:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	2210      	movs	r2, #16
 8019b96:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8019b98:	e034      	b.n	8019c04 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	2210      	movs	r2, #16
 8019ba0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ba6:	f043 0204 	orr.w	r2, r3, #4
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019bb4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8019bb6:	69bb      	ldr	r3, [r7, #24]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d003      	beq.n	8019bc4 <I2C_Slave_ISR_DMA+0x348>
 8019bbc:	69bb      	ldr	r3, [r7, #24]
 8019bbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019bc2:	d11f      	bne.n	8019c04 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8019bc4:	7dfb      	ldrb	r3, [r7, #23]
 8019bc6:	2b21      	cmp	r3, #33	; 0x21
 8019bc8:	d002      	beq.n	8019bd0 <I2C_Slave_ISR_DMA+0x354>
 8019bca:	7dfb      	ldrb	r3, [r7, #23]
 8019bcc:	2b29      	cmp	r3, #41	; 0x29
 8019bce:	d103      	bne.n	8019bd8 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	2221      	movs	r2, #33	; 0x21
 8019bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8019bd6:	e008      	b.n	8019bea <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8019bd8:	7dfb      	ldrb	r3, [r7, #23]
 8019bda:	2b22      	cmp	r3, #34	; 0x22
 8019bdc:	d002      	beq.n	8019be4 <I2C_Slave_ISR_DMA+0x368>
 8019bde:	7dfb      	ldrb	r3, [r7, #23]
 8019be0:	2b2a      	cmp	r3, #42	; 0x2a
 8019be2:	d102      	bne.n	8019bea <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	2222      	movs	r2, #34	; 0x22
 8019be8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019bee:	4619      	mov	r1, r3
 8019bf0:	68f8      	ldr	r0, [r7, #12]
 8019bf2:	f000 fd03 	bl	801a5fc <I2C_ITError>
      if (treatdmanack == 1U)
 8019bf6:	e005      	b.n	8019c04 <I2C_Slave_ISR_DMA+0x388>
 8019bf8:	e004      	b.n	8019c04 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	2210      	movs	r2, #16
 8019c00:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019c02:	e011      	b.n	8019c28 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8019c04:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8019c06:	e00f      	b.n	8019c28 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8019c08:	68bb      	ldr	r3, [r7, #8]
 8019c0a:	08db      	lsrs	r3, r3, #3
 8019c0c:	f003 0301 	and.w	r3, r3, #1
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d009      	beq.n	8019c28 <I2C_Slave_ISR_DMA+0x3ac>
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	08db      	lsrs	r3, r3, #3
 8019c18:	f003 0301 	and.w	r3, r3, #1
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d003      	beq.n	8019c28 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8019c20:	68b9      	ldr	r1, [r7, #8]
 8019c22:	68f8      	ldr	r0, [r7, #12]
 8019c24:	f000 f8b2 	bl	8019d8c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019c30:	2300      	movs	r3, #0
}
 8019c32:	4618      	mov	r0, r3
 8019c34:	3720      	adds	r7, #32
 8019c36:	46bd      	mov	sp, r7
 8019c38:	bd80      	pop	{r7, pc}
 8019c3a:	bf00      	nop

08019c3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b086      	sub	sp, #24
 8019c40:	af02      	add	r7, sp, #8
 8019c42:	60f8      	str	r0, [r7, #12]
 8019c44:	4608      	mov	r0, r1
 8019c46:	4611      	mov	r1, r2
 8019c48:	461a      	mov	r2, r3
 8019c4a:	4603      	mov	r3, r0
 8019c4c:	817b      	strh	r3, [r7, #10]
 8019c4e:	460b      	mov	r3, r1
 8019c50:	813b      	strh	r3, [r7, #8]
 8019c52:	4613      	mov	r3, r2
 8019c54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8019c56:	88fb      	ldrh	r3, [r7, #6]
 8019c58:	b2da      	uxtb	r2, r3
 8019c5a:	8979      	ldrh	r1, [r7, #10]
 8019c5c:	4b20      	ldr	r3, [pc, #128]	; (8019ce0 <I2C_RequestMemoryWrite+0xa4>)
 8019c5e:	9300      	str	r3, [sp, #0]
 8019c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019c64:	68f8      	ldr	r0, [r7, #12]
 8019c66:	f001 f8a7 	bl	801adb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019c6a:	69fa      	ldr	r2, [r7, #28]
 8019c6c:	69b9      	ldr	r1, [r7, #24]
 8019c6e:	68f8      	ldr	r0, [r7, #12]
 8019c70:	f000 ffc0 	bl	801abf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8019c74:	4603      	mov	r3, r0
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d001      	beq.n	8019c7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8019c7a:	2301      	movs	r3, #1
 8019c7c:	e02c      	b.n	8019cd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019c7e:	88fb      	ldrh	r3, [r7, #6]
 8019c80:	2b01      	cmp	r3, #1
 8019c82:	d105      	bne.n	8019c90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019c84:	893b      	ldrh	r3, [r7, #8]
 8019c86:	b2da      	uxtb	r2, r3
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	629a      	str	r2, [r3, #40]	; 0x28
 8019c8e:	e015      	b.n	8019cbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8019c90:	893b      	ldrh	r3, [r7, #8]
 8019c92:	0a1b      	lsrs	r3, r3, #8
 8019c94:	b29b      	uxth	r3, r3
 8019c96:	b2da      	uxtb	r2, r3
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019c9e:	69fa      	ldr	r2, [r7, #28]
 8019ca0:	69b9      	ldr	r1, [r7, #24]
 8019ca2:	68f8      	ldr	r0, [r7, #12]
 8019ca4:	f000 ffa6 	bl	801abf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8019ca8:	4603      	mov	r3, r0
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d001      	beq.n	8019cb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8019cae:	2301      	movs	r3, #1
 8019cb0:	e012      	b.n	8019cd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019cb2:	893b      	ldrh	r3, [r7, #8]
 8019cb4:	b2da      	uxtb	r2, r3
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8019cbc:	69fb      	ldr	r3, [r7, #28]
 8019cbe:	9300      	str	r3, [sp, #0]
 8019cc0:	69bb      	ldr	r3, [r7, #24]
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	2180      	movs	r1, #128	; 0x80
 8019cc6:	68f8      	ldr	r0, [r7, #12]
 8019cc8:	f000 ff54 	bl	801ab74 <I2C_WaitOnFlagUntilTimeout>
 8019ccc:	4603      	mov	r3, r0
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d001      	beq.n	8019cd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8019cd2:	2301      	movs	r3, #1
 8019cd4:	e000      	b.n	8019cd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8019cd6:	2300      	movs	r3, #0
}
 8019cd8:	4618      	mov	r0, r3
 8019cda:	3710      	adds	r7, #16
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	bd80      	pop	{r7, pc}
 8019ce0:	80002000 	.word	0x80002000

08019ce4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b086      	sub	sp, #24
 8019ce8:	af02      	add	r7, sp, #8
 8019cea:	60f8      	str	r0, [r7, #12]
 8019cec:	4608      	mov	r0, r1
 8019cee:	4611      	mov	r1, r2
 8019cf0:	461a      	mov	r2, r3
 8019cf2:	4603      	mov	r3, r0
 8019cf4:	817b      	strh	r3, [r7, #10]
 8019cf6:	460b      	mov	r3, r1
 8019cf8:	813b      	strh	r3, [r7, #8]
 8019cfa:	4613      	mov	r3, r2
 8019cfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8019cfe:	88fb      	ldrh	r3, [r7, #6]
 8019d00:	b2da      	uxtb	r2, r3
 8019d02:	8979      	ldrh	r1, [r7, #10]
 8019d04:	4b20      	ldr	r3, [pc, #128]	; (8019d88 <I2C_RequestMemoryRead+0xa4>)
 8019d06:	9300      	str	r3, [sp, #0]
 8019d08:	2300      	movs	r3, #0
 8019d0a:	68f8      	ldr	r0, [r7, #12]
 8019d0c:	f001 f854 	bl	801adb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019d10:	69fa      	ldr	r2, [r7, #28]
 8019d12:	69b9      	ldr	r1, [r7, #24]
 8019d14:	68f8      	ldr	r0, [r7, #12]
 8019d16:	f000 ff6d 	bl	801abf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d001      	beq.n	8019d24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8019d20:	2301      	movs	r3, #1
 8019d22:	e02c      	b.n	8019d7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019d24:	88fb      	ldrh	r3, [r7, #6]
 8019d26:	2b01      	cmp	r3, #1
 8019d28:	d105      	bne.n	8019d36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019d2a:	893b      	ldrh	r3, [r7, #8]
 8019d2c:	b2da      	uxtb	r2, r3
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	629a      	str	r2, [r3, #40]	; 0x28
 8019d34:	e015      	b.n	8019d62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8019d36:	893b      	ldrh	r3, [r7, #8]
 8019d38:	0a1b      	lsrs	r3, r3, #8
 8019d3a:	b29b      	uxth	r3, r3
 8019d3c:	b2da      	uxtb	r2, r3
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019d44:	69fa      	ldr	r2, [r7, #28]
 8019d46:	69b9      	ldr	r1, [r7, #24]
 8019d48:	68f8      	ldr	r0, [r7, #12]
 8019d4a:	f000 ff53 	bl	801abf4 <I2C_WaitOnTXISFlagUntilTimeout>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d001      	beq.n	8019d58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8019d54:	2301      	movs	r3, #1
 8019d56:	e012      	b.n	8019d7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8019d58:	893b      	ldrh	r3, [r7, #8]
 8019d5a:	b2da      	uxtb	r2, r3
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8019d62:	69fb      	ldr	r3, [r7, #28]
 8019d64:	9300      	str	r3, [sp, #0]
 8019d66:	69bb      	ldr	r3, [r7, #24]
 8019d68:	2200      	movs	r2, #0
 8019d6a:	2140      	movs	r1, #64	; 0x40
 8019d6c:	68f8      	ldr	r0, [r7, #12]
 8019d6e:	f000 ff01 	bl	801ab74 <I2C_WaitOnFlagUntilTimeout>
 8019d72:	4603      	mov	r3, r0
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d001      	beq.n	8019d7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8019d78:	2301      	movs	r3, #1
 8019d7a:	e000      	b.n	8019d7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8019d7c:	2300      	movs	r3, #0
}
 8019d7e:	4618      	mov	r0, r3
 8019d80:	3710      	adds	r7, #16
 8019d82:	46bd      	mov	sp, r7
 8019d84:	bd80      	pop	{r7, pc}
 8019d86:	bf00      	nop
 8019d88:	80002000 	.word	0x80002000

08019d8c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019d8c:	b580      	push	{r7, lr}
 8019d8e:	b084      	sub	sp, #16
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
 8019d94:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019d9c:	b2db      	uxtb	r3, r3
 8019d9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019da2:	2b28      	cmp	r3, #40	; 0x28
 8019da4:	d16a      	bne.n	8019e7c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	699b      	ldr	r3, [r3, #24]
 8019dac:	0c1b      	lsrs	r3, r3, #16
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	f003 0301 	and.w	r3, r3, #1
 8019db4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	699b      	ldr	r3, [r3, #24]
 8019dbc:	0c1b      	lsrs	r3, r3, #16
 8019dbe:	b29b      	uxth	r3, r3
 8019dc0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019dc4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	689b      	ldr	r3, [r3, #8]
 8019dcc:	b29b      	uxth	r3, r3
 8019dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019dd2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	68db      	ldr	r3, [r3, #12]
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019de0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	68db      	ldr	r3, [r3, #12]
 8019de6:	2b02      	cmp	r3, #2
 8019de8:	d138      	bne.n	8019e5c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8019dea:	897b      	ldrh	r3, [r7, #10]
 8019dec:	09db      	lsrs	r3, r3, #7
 8019dee:	b29a      	uxth	r2, r3
 8019df0:	89bb      	ldrh	r3, [r7, #12]
 8019df2:	4053      	eors	r3, r2
 8019df4:	b29b      	uxth	r3, r3
 8019df6:	f003 0306 	and.w	r3, r3, #6
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d11c      	bne.n	8019e38 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8019dfe:	897b      	ldrh	r3, [r7, #10]
 8019e00:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e06:	1c5a      	adds	r2, r3, #1
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e10:	2b02      	cmp	r3, #2
 8019e12:	d13b      	bne.n	8019e8c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	2200      	movs	r2, #0
 8019e18:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	2208      	movs	r2, #8
 8019e20:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	2200      	movs	r2, #0
 8019e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019e2a:	89ba      	ldrh	r2, [r7, #12]
 8019e2c:	7bfb      	ldrb	r3, [r7, #15]
 8019e2e:	4619      	mov	r1, r3
 8019e30:	6878      	ldr	r0, [r7, #4]
 8019e32:	f7ff f9ce 	bl	80191d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8019e36:	e029      	b.n	8019e8c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8019e38:	893b      	ldrh	r3, [r7, #8]
 8019e3a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8019e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019e40:	6878      	ldr	r0, [r7, #4]
 8019e42:	f001 f84b 	bl	801aedc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	2200      	movs	r2, #0
 8019e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019e4e:	89ba      	ldrh	r2, [r7, #12]
 8019e50:	7bfb      	ldrb	r3, [r7, #15]
 8019e52:	4619      	mov	r1, r3
 8019e54:	6878      	ldr	r0, [r7, #4]
 8019e56:	f7ff f9bc 	bl	80191d2 <HAL_I2C_AddrCallback>
}
 8019e5a:	e017      	b.n	8019e8c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8019e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8019e60:	6878      	ldr	r0, [r7, #4]
 8019e62:	f001 f83b 	bl	801aedc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	2200      	movs	r2, #0
 8019e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8019e6e:	89ba      	ldrh	r2, [r7, #12]
 8019e70:	7bfb      	ldrb	r3, [r7, #15]
 8019e72:	4619      	mov	r1, r3
 8019e74:	6878      	ldr	r0, [r7, #4]
 8019e76:	f7ff f9ac 	bl	80191d2 <HAL_I2C_AddrCallback>
}
 8019e7a:	e007      	b.n	8019e8c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	2208      	movs	r2, #8
 8019e82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	2200      	movs	r2, #0
 8019e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8019e8c:	bf00      	nop
 8019e8e:	3710      	adds	r7, #16
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bd80      	pop	{r7, pc}

08019e94 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b082      	sub	sp, #8
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	2b21      	cmp	r3, #33	; 0x21
 8019eae:	d115      	bne.n	8019edc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	2220      	movs	r2, #32
 8019eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	2211      	movs	r2, #17
 8019ebc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019ec4:	2101      	movs	r1, #1
 8019ec6:	6878      	ldr	r0, [r7, #4]
 8019ec8:	f001 f808 	bl	801aedc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2200      	movs	r2, #0
 8019ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8019ed4:	6878      	ldr	r0, [r7, #4]
 8019ed6:	f7ff f954 	bl	8019182 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019eda:	e014      	b.n	8019f06 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	2220      	movs	r2, #32
 8019ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	2212      	movs	r2, #18
 8019ee8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	2200      	movs	r2, #0
 8019eee:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8019ef0:	2102      	movs	r1, #2
 8019ef2:	6878      	ldr	r0, [r7, #4]
 8019ef4:	f000 fff2 	bl	801aedc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	2200      	movs	r2, #0
 8019efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8019f00:	6878      	ldr	r0, [r7, #4]
 8019f02:	f7ff f948 	bl	8019196 <HAL_I2C_MasterRxCpltCallback>
}
 8019f06:	bf00      	nop
 8019f08:	3708      	adds	r7, #8
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	bd80      	pop	{r7, pc}

08019f0e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8019f0e:	b580      	push	{r7, lr}
 8019f10:	b084      	sub	sp, #16
 8019f12:	af00      	add	r7, sp, #0
 8019f14:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	2200      	movs	r2, #0
 8019f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	0b9b      	lsrs	r3, r3, #14
 8019f2a:	f003 0301 	and.w	r3, r3, #1
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d008      	beq.n	8019f44 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	681a      	ldr	r2, [r3, #0]
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8019f40:	601a      	str	r2, [r3, #0]
 8019f42:	e00d      	b.n	8019f60 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	0bdb      	lsrs	r3, r3, #15
 8019f48:	f003 0301 	and.w	r3, r3, #1
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d007      	beq.n	8019f60 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	681a      	ldr	r2, [r3, #0]
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8019f5e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019f66:	b2db      	uxtb	r3, r3
 8019f68:	2b29      	cmp	r3, #41	; 0x29
 8019f6a:	d112      	bne.n	8019f92 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	2228      	movs	r2, #40	; 0x28
 8019f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	2221      	movs	r2, #33	; 0x21
 8019f78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019f7a:	2101      	movs	r1, #1
 8019f7c:	6878      	ldr	r0, [r7, #4]
 8019f7e:	f000 ffad 	bl	801aedc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	2200      	movs	r2, #0
 8019f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019f8a:	6878      	ldr	r0, [r7, #4]
 8019f8c:	f7ff f90d 	bl	80191aa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8019f90:	e017      	b.n	8019fc2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019f98:	b2db      	uxtb	r3, r3
 8019f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8019f9c:	d111      	bne.n	8019fc2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	2228      	movs	r2, #40	; 0x28
 8019fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	2222      	movs	r2, #34	; 0x22
 8019faa:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8019fac:	2102      	movs	r1, #2
 8019fae:	6878      	ldr	r0, [r7, #4]
 8019fb0:	f000 ff94 	bl	801aedc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019fbc:	6878      	ldr	r0, [r7, #4]
 8019fbe:	f7ff f8fe 	bl	80191be <HAL_I2C_SlaveRxCpltCallback>
}
 8019fc2:	bf00      	nop
 8019fc4:	3710      	adds	r7, #16
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bd80      	pop	{r7, pc}
	...

08019fcc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b086      	sub	sp, #24
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
 8019fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8019fd6:	683b      	ldr	r3, [r7, #0]
 8019fd8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	2220      	movs	r2, #32
 8019fe0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019fe8:	b2db      	uxtb	r3, r3
 8019fea:	2b21      	cmp	r3, #33	; 0x21
 8019fec:	d107      	bne.n	8019ffe <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8019fee:	2101      	movs	r1, #1
 8019ff0:	6878      	ldr	r0, [r7, #4]
 8019ff2:	f000 ff73 	bl	801aedc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	2211      	movs	r2, #17
 8019ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8019ffc:	e00c      	b.n	801a018 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a004:	b2db      	uxtb	r3, r3
 801a006:	2b22      	cmp	r3, #34	; 0x22
 801a008:	d106      	bne.n	801a018 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801a00a:	2102      	movs	r1, #2
 801a00c:	6878      	ldr	r0, [r7, #4]
 801a00e:	f000 ff65 	bl	801aedc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	2212      	movs	r2, #18
 801a016:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	6859      	ldr	r1, [r3, #4]
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681a      	ldr	r2, [r3, #0]
 801a022:	4b4d      	ldr	r3, [pc, #308]	; (801a158 <I2C_ITMasterCplt+0x18c>)
 801a024:	400b      	ands	r3, r1
 801a026:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	2200      	movs	r2, #0
 801a02c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	4a4a      	ldr	r2, [pc, #296]	; (801a15c <I2C_ITMasterCplt+0x190>)
 801a032:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 801a034:	697b      	ldr	r3, [r7, #20]
 801a036:	091b      	lsrs	r3, r3, #4
 801a038:	f003 0301 	and.w	r3, r3, #1
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d009      	beq.n	801a054 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	2210      	movs	r2, #16
 801a046:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a04c:	f043 0204 	orr.w	r2, r3, #4
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a05a:	b2db      	uxtb	r3, r3
 801a05c:	2b60      	cmp	r3, #96	; 0x60
 801a05e:	d10b      	bne.n	801a078 <I2C_ITMasterCplt+0xac>
 801a060:	697b      	ldr	r3, [r7, #20]
 801a062:	089b      	lsrs	r3, r3, #2
 801a064:	f003 0301 	and.w	r3, r3, #1
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d005      	beq.n	801a078 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a072:	b2db      	uxtb	r3, r3
 801a074:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801a076:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801a078:	6878      	ldr	r0, [r7, #4]
 801a07a:	f000 fbb6 	bl	801a7ea <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a082:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a08a:	b2db      	uxtb	r3, r3
 801a08c:	2b60      	cmp	r3, #96	; 0x60
 801a08e:	d002      	beq.n	801a096 <I2C_ITMasterCplt+0xca>
 801a090:	693b      	ldr	r3, [r7, #16]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d006      	beq.n	801a0a4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a09a:	4619      	mov	r1, r3
 801a09c:	6878      	ldr	r0, [r7, #4]
 801a09e:	f000 faad 	bl	801a5fc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801a0a2:	e054      	b.n	801a14e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a0aa:	b2db      	uxtb	r3, r3
 801a0ac:	2b21      	cmp	r3, #33	; 0x21
 801a0ae:	d124      	bne.n	801a0fa <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	2220      	movs	r2, #32
 801a0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a0c4:	b2db      	uxtb	r3, r3
 801a0c6:	2b40      	cmp	r3, #64	; 0x40
 801a0c8:	d10b      	bne.n	801a0e2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	2200      	movs	r2, #0
 801a0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 801a0da:	6878      	ldr	r0, [r7, #4]
 801a0dc:	f7ff f891 	bl	8019202 <HAL_I2C_MemTxCpltCallback>
}
 801a0e0:	e035      	b.n	801a14e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801a0f2:	6878      	ldr	r0, [r7, #4]
 801a0f4:	f7ff f845 	bl	8019182 <HAL_I2C_MasterTxCpltCallback>
}
 801a0f8:	e029      	b.n	801a14e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a100:	b2db      	uxtb	r3, r3
 801a102:	2b22      	cmp	r3, #34	; 0x22
 801a104:	d123      	bne.n	801a14e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	2220      	movs	r2, #32
 801a10a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	2200      	movs	r2, #0
 801a112:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a11a:	b2db      	uxtb	r3, r3
 801a11c:	2b40      	cmp	r3, #64	; 0x40
 801a11e:	d10b      	bne.n	801a138 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	2200      	movs	r2, #0
 801a124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	2200      	movs	r2, #0
 801a12c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 801a130:	6878      	ldr	r0, [r7, #4]
 801a132:	f7f8 f9b5 	bl	80124a0 <HAL_I2C_MemRxCpltCallback>
}
 801a136:	e00a      	b.n	801a14e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	2200      	movs	r2, #0
 801a13c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	2200      	movs	r2, #0
 801a144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801a148:	6878      	ldr	r0, [r7, #4]
 801a14a:	f7ff f824 	bl	8019196 <HAL_I2C_MasterRxCpltCallback>
}
 801a14e:	bf00      	nop
 801a150:	3718      	adds	r7, #24
 801a152:	46bd      	mov	sp, r7
 801a154:	bd80      	pop	{r7, pc}
 801a156:	bf00      	nop
 801a158:	fe00e800 	.word	0xfe00e800
 801a15c:	ffff0000 	.word	0xffff0000

0801a160 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b086      	sub	sp, #24
 801a164:	af00      	add	r7, sp, #0
 801a166:	6078      	str	r0, [r7, #4]
 801a168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801a172:	683b      	ldr	r3, [r7, #0]
 801a174:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a17c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	2220      	movs	r2, #32
 801a184:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801a186:	7bfb      	ldrb	r3, [r7, #15]
 801a188:	2b21      	cmp	r3, #33	; 0x21
 801a18a:	d002      	beq.n	801a192 <I2C_ITSlaveCplt+0x32>
 801a18c:	7bfb      	ldrb	r3, [r7, #15]
 801a18e:	2b29      	cmp	r3, #41	; 0x29
 801a190:	d108      	bne.n	801a1a4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801a192:	f248 0101 	movw	r1, #32769	; 0x8001
 801a196:	6878      	ldr	r0, [r7, #4]
 801a198:	f000 fea0 	bl	801aedc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2221      	movs	r2, #33	; 0x21
 801a1a0:	631a      	str	r2, [r3, #48]	; 0x30
 801a1a2:	e00d      	b.n	801a1c0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801a1a4:	7bfb      	ldrb	r3, [r7, #15]
 801a1a6:	2b22      	cmp	r3, #34	; 0x22
 801a1a8:	d002      	beq.n	801a1b0 <I2C_ITSlaveCplt+0x50>
 801a1aa:	7bfb      	ldrb	r3, [r7, #15]
 801a1ac:	2b2a      	cmp	r3, #42	; 0x2a
 801a1ae:	d107      	bne.n	801a1c0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801a1b0:	f248 0102 	movw	r1, #32770	; 0x8002
 801a1b4:	6878      	ldr	r0, [r7, #4]
 801a1b6:	f000 fe91 	bl	801aedc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	2222      	movs	r2, #34	; 0x22
 801a1be:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	685a      	ldr	r2, [r3, #4]
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a1ce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	6859      	ldr	r1, [r3, #4]
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681a      	ldr	r2, [r3, #0]
 801a1da:	4b80      	ldr	r3, [pc, #512]	; (801a3dc <I2C_ITSlaveCplt+0x27c>)
 801a1dc:	400b      	ands	r3, r1
 801a1de:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801a1e0:	6878      	ldr	r0, [r7, #4]
 801a1e2:	f000 fb02 	bl	801a7ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801a1e6:	693b      	ldr	r3, [r7, #16]
 801a1e8:	0b9b      	lsrs	r3, r3, #14
 801a1ea:	f003 0301 	and.w	r3, r3, #1
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d07a      	beq.n	801a2e8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	681a      	ldr	r2, [r3, #0]
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a200:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a206:	2b00      	cmp	r3, #0
 801a208:	f000 8111 	beq.w	801a42e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	4a73      	ldr	r2, [pc, #460]	; (801a3e0 <I2C_ITSlaveCplt+0x280>)
 801a214:	4293      	cmp	r3, r2
 801a216:	d059      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	4a71      	ldr	r2, [pc, #452]	; (801a3e4 <I2C_ITSlaveCplt+0x284>)
 801a220:	4293      	cmp	r3, r2
 801a222:	d053      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	4a6f      	ldr	r2, [pc, #444]	; (801a3e8 <I2C_ITSlaveCplt+0x288>)
 801a22c:	4293      	cmp	r3, r2
 801a22e:	d04d      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	4a6d      	ldr	r2, [pc, #436]	; (801a3ec <I2C_ITSlaveCplt+0x28c>)
 801a238:	4293      	cmp	r3, r2
 801a23a:	d047      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	4a6b      	ldr	r2, [pc, #428]	; (801a3f0 <I2C_ITSlaveCplt+0x290>)
 801a244:	4293      	cmp	r3, r2
 801a246:	d041      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	4a69      	ldr	r2, [pc, #420]	; (801a3f4 <I2C_ITSlaveCplt+0x294>)
 801a250:	4293      	cmp	r3, r2
 801a252:	d03b      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	4a67      	ldr	r2, [pc, #412]	; (801a3f8 <I2C_ITSlaveCplt+0x298>)
 801a25c:	4293      	cmp	r3, r2
 801a25e:	d035      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	4a65      	ldr	r2, [pc, #404]	; (801a3fc <I2C_ITSlaveCplt+0x29c>)
 801a268:	4293      	cmp	r3, r2
 801a26a:	d02f      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	4a63      	ldr	r2, [pc, #396]	; (801a400 <I2C_ITSlaveCplt+0x2a0>)
 801a274:	4293      	cmp	r3, r2
 801a276:	d029      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	4a61      	ldr	r2, [pc, #388]	; (801a404 <I2C_ITSlaveCplt+0x2a4>)
 801a280:	4293      	cmp	r3, r2
 801a282:	d023      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	4a5f      	ldr	r2, [pc, #380]	; (801a408 <I2C_ITSlaveCplt+0x2a8>)
 801a28c:	4293      	cmp	r3, r2
 801a28e:	d01d      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	4a5d      	ldr	r2, [pc, #372]	; (801a40c <I2C_ITSlaveCplt+0x2ac>)
 801a298:	4293      	cmp	r3, r2
 801a29a:	d017      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	4a5b      	ldr	r2, [pc, #364]	; (801a410 <I2C_ITSlaveCplt+0x2b0>)
 801a2a4:	4293      	cmp	r3, r2
 801a2a6:	d011      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	4a59      	ldr	r2, [pc, #356]	; (801a414 <I2C_ITSlaveCplt+0x2b4>)
 801a2b0:	4293      	cmp	r3, r2
 801a2b2:	d00b      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	4a57      	ldr	r2, [pc, #348]	; (801a418 <I2C_ITSlaveCplt+0x2b8>)
 801a2bc:	4293      	cmp	r3, r2
 801a2be:	d005      	beq.n	801a2cc <I2C_ITSlaveCplt+0x16c>
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	4a55      	ldr	r2, [pc, #340]	; (801a41c <I2C_ITSlaveCplt+0x2bc>)
 801a2c8:	4293      	cmp	r3, r2
 801a2ca:	d105      	bne.n	801a2d8 <I2C_ITSlaveCplt+0x178>
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	685b      	ldr	r3, [r3, #4]
 801a2d4:	b29b      	uxth	r3, r3
 801a2d6:	e004      	b.n	801a2e2 <I2C_ITSlaveCplt+0x182>
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	685b      	ldr	r3, [r3, #4]
 801a2e0:	b29b      	uxth	r3, r3
 801a2e2:	687a      	ldr	r2, [r7, #4]
 801a2e4:	8553      	strh	r3, [r2, #42]	; 0x2a
 801a2e6:	e0a2      	b.n	801a42e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801a2e8:	693b      	ldr	r3, [r7, #16]
 801a2ea:	0bdb      	lsrs	r3, r3, #15
 801a2ec:	f003 0301 	and.w	r3, r3, #1
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	f000 809c 	beq.w	801a42e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	681a      	ldr	r2, [r3, #0]
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a304:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	f000 808f 	beq.w	801a42e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	4a32      	ldr	r2, [pc, #200]	; (801a3e0 <I2C_ITSlaveCplt+0x280>)
 801a318:	4293      	cmp	r3, r2
 801a31a:	d059      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	4a30      	ldr	r2, [pc, #192]	; (801a3e4 <I2C_ITSlaveCplt+0x284>)
 801a324:	4293      	cmp	r3, r2
 801a326:	d053      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	4a2e      	ldr	r2, [pc, #184]	; (801a3e8 <I2C_ITSlaveCplt+0x288>)
 801a330:	4293      	cmp	r3, r2
 801a332:	d04d      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	4a2c      	ldr	r2, [pc, #176]	; (801a3ec <I2C_ITSlaveCplt+0x28c>)
 801a33c:	4293      	cmp	r3, r2
 801a33e:	d047      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	4a2a      	ldr	r2, [pc, #168]	; (801a3f0 <I2C_ITSlaveCplt+0x290>)
 801a348:	4293      	cmp	r3, r2
 801a34a:	d041      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	4a28      	ldr	r2, [pc, #160]	; (801a3f4 <I2C_ITSlaveCplt+0x294>)
 801a354:	4293      	cmp	r3, r2
 801a356:	d03b      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	4a26      	ldr	r2, [pc, #152]	; (801a3f8 <I2C_ITSlaveCplt+0x298>)
 801a360:	4293      	cmp	r3, r2
 801a362:	d035      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	4a24      	ldr	r2, [pc, #144]	; (801a3fc <I2C_ITSlaveCplt+0x29c>)
 801a36c:	4293      	cmp	r3, r2
 801a36e:	d02f      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	4a22      	ldr	r2, [pc, #136]	; (801a400 <I2C_ITSlaveCplt+0x2a0>)
 801a378:	4293      	cmp	r3, r2
 801a37a:	d029      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	4a20      	ldr	r2, [pc, #128]	; (801a404 <I2C_ITSlaveCplt+0x2a4>)
 801a384:	4293      	cmp	r3, r2
 801a386:	d023      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	4a1e      	ldr	r2, [pc, #120]	; (801a408 <I2C_ITSlaveCplt+0x2a8>)
 801a390:	4293      	cmp	r3, r2
 801a392:	d01d      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	4a1c      	ldr	r2, [pc, #112]	; (801a40c <I2C_ITSlaveCplt+0x2ac>)
 801a39c:	4293      	cmp	r3, r2
 801a39e:	d017      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	4a1a      	ldr	r2, [pc, #104]	; (801a410 <I2C_ITSlaveCplt+0x2b0>)
 801a3a8:	4293      	cmp	r3, r2
 801a3aa:	d011      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	4a18      	ldr	r2, [pc, #96]	; (801a414 <I2C_ITSlaveCplt+0x2b4>)
 801a3b4:	4293      	cmp	r3, r2
 801a3b6:	d00b      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	4a16      	ldr	r2, [pc, #88]	; (801a418 <I2C_ITSlaveCplt+0x2b8>)
 801a3c0:	4293      	cmp	r3, r2
 801a3c2:	d005      	beq.n	801a3d0 <I2C_ITSlaveCplt+0x270>
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	4a14      	ldr	r2, [pc, #80]	; (801a41c <I2C_ITSlaveCplt+0x2bc>)
 801a3cc:	4293      	cmp	r3, r2
 801a3ce:	d127      	bne.n	801a420 <I2C_ITSlaveCplt+0x2c0>
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	685b      	ldr	r3, [r3, #4]
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	e026      	b.n	801a42a <I2C_ITSlaveCplt+0x2ca>
 801a3dc:	fe00e800 	.word	0xfe00e800
 801a3e0:	40020010 	.word	0x40020010
 801a3e4:	40020028 	.word	0x40020028
 801a3e8:	40020040 	.word	0x40020040
 801a3ec:	40020058 	.word	0x40020058
 801a3f0:	40020070 	.word	0x40020070
 801a3f4:	40020088 	.word	0x40020088
 801a3f8:	400200a0 	.word	0x400200a0
 801a3fc:	400200b8 	.word	0x400200b8
 801a400:	40020410 	.word	0x40020410
 801a404:	40020428 	.word	0x40020428
 801a408:	40020440 	.word	0x40020440
 801a40c:	40020458 	.word	0x40020458
 801a410:	40020470 	.word	0x40020470
 801a414:	40020488 	.word	0x40020488
 801a418:	400204a0 	.word	0x400204a0
 801a41c:	400204b8 	.word	0x400204b8
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	685b      	ldr	r3, [r3, #4]
 801a428:	b29b      	uxth	r3, r3
 801a42a:	687a      	ldr	r2, [r7, #4]
 801a42c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801a42e:	697b      	ldr	r3, [r7, #20]
 801a430:	089b      	lsrs	r3, r3, #2
 801a432:	f003 0301 	and.w	r3, r3, #1
 801a436:	2b00      	cmp	r3, #0
 801a438:	d020      	beq.n	801a47c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801a43a:	697b      	ldr	r3, [r7, #20]
 801a43c:	f023 0304 	bic.w	r3, r3, #4
 801a440:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a44c:	b2d2      	uxtb	r2, r2
 801a44e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a454:	1c5a      	adds	r2, r3, #1
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d00c      	beq.n	801a47c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a466:	3b01      	subs	r3, #1
 801a468:	b29a      	uxth	r2, r3
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a472:	b29b      	uxth	r3, r3
 801a474:	3b01      	subs	r3, #1
 801a476:	b29a      	uxth	r2, r3
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a480:	b29b      	uxth	r3, r3
 801a482:	2b00      	cmp	r3, #0
 801a484:	d005      	beq.n	801a492 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a48a:	f043 0204 	orr.w	r2, r3, #4
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	2200      	movs	r2, #0
 801a496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	2200      	movs	r2, #0
 801a49e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d010      	beq.n	801a4ca <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4ac:	4619      	mov	r1, r3
 801a4ae:	6878      	ldr	r0, [r7, #4]
 801a4b0:	f000 f8a4 	bl	801a5fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a4ba:	b2db      	uxtb	r3, r3
 801a4bc:	2b28      	cmp	r3, #40	; 0x28
 801a4be:	d141      	bne.n	801a544 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801a4c0:	6979      	ldr	r1, [r7, #20]
 801a4c2:	6878      	ldr	r0, [r7, #4]
 801a4c4:	f000 f844 	bl	801a550 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a4c8:	e03c      	b.n	801a544 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801a4d2:	d014      	beq.n	801a4fe <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 801a4d4:	6878      	ldr	r0, [r7, #4]
 801a4d6:	f7ff fd1a 	bl	8019f0e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	4a1b      	ldr	r2, [pc, #108]	; (801a54c <I2C_ITSlaveCplt+0x3ec>)
 801a4de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	2220      	movs	r2, #32
 801a4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	2200      	movs	r2, #0
 801a4f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801a4f6:	6878      	ldr	r0, [r7, #4]
 801a4f8:	f7fe fe79 	bl	80191ee <HAL_I2C_ListenCpltCallback>
}
 801a4fc:	e022      	b.n	801a544 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a504:	b2db      	uxtb	r3, r3
 801a506:	2b22      	cmp	r3, #34	; 0x22
 801a508:	d10e      	bne.n	801a528 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	2220      	movs	r2, #32
 801a50e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	2200      	movs	r2, #0
 801a516:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	2200      	movs	r2, #0
 801a51c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801a520:	6878      	ldr	r0, [r7, #4]
 801a522:	f7fe fe4c 	bl	80191be <HAL_I2C_SlaveRxCpltCallback>
}
 801a526:	e00d      	b.n	801a544 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	2220      	movs	r2, #32
 801a52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	2200      	movs	r2, #0
 801a534:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	2200      	movs	r2, #0
 801a53a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801a53e:	6878      	ldr	r0, [r7, #4]
 801a540:	f7fe fe33 	bl	80191aa <HAL_I2C_SlaveTxCpltCallback>
}
 801a544:	bf00      	nop
 801a546:	3718      	adds	r7, #24
 801a548:	46bd      	mov	sp, r7
 801a54a:	bd80      	pop	{r7, pc}
 801a54c:	ffff0000 	.word	0xffff0000

0801a550 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801a550:	b580      	push	{r7, lr}
 801a552:	b082      	sub	sp, #8
 801a554:	af00      	add	r7, sp, #0
 801a556:	6078      	str	r0, [r7, #4]
 801a558:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	4a26      	ldr	r2, [pc, #152]	; (801a5f8 <I2C_ITListenCplt+0xa8>)
 801a55e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	2200      	movs	r2, #0
 801a564:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	2220      	movs	r2, #32
 801a56a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	2200      	movs	r2, #0
 801a572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	2200      	movs	r2, #0
 801a57a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801a57c:	683b      	ldr	r3, [r7, #0]
 801a57e:	089b      	lsrs	r3, r3, #2
 801a580:	f003 0301 	and.w	r3, r3, #1
 801a584:	2b00      	cmp	r3, #0
 801a586:	d022      	beq.n	801a5ce <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a592:	b2d2      	uxtb	r2, r2
 801a594:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a59a:	1c5a      	adds	r2, r3, #1
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d012      	beq.n	801a5ce <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a5ac:	3b01      	subs	r3, #1
 801a5ae:	b29a      	uxth	r2, r3
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a5b8:	b29b      	uxth	r3, r3
 801a5ba:	3b01      	subs	r3, #1
 801a5bc:	b29a      	uxth	r2, r3
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a5c6:	f043 0204 	orr.w	r2, r3, #4
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a5ce:	f248 0103 	movw	r1, #32771	; 0x8003
 801a5d2:	6878      	ldr	r0, [r7, #4]
 801a5d4:	f000 fc82 	bl	801aedc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	2210      	movs	r2, #16
 801a5de:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801a5e8:	6878      	ldr	r0, [r7, #4]
 801a5ea:	f7fe fe00 	bl	80191ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801a5ee:	bf00      	nop
 801a5f0:	3708      	adds	r7, #8
 801a5f2:	46bd      	mov	sp, r7
 801a5f4:	bd80      	pop	{r7, pc}
 801a5f6:	bf00      	nop
 801a5f8:	ffff0000 	.word	0xffff0000

0801a5fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b084      	sub	sp, #16
 801a600:	af00      	add	r7, sp, #0
 801a602:	6078      	str	r0, [r7, #4]
 801a604:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a60c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	2200      	movs	r2, #0
 801a612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	4a5d      	ldr	r2, [pc, #372]	; (801a790 <I2C_ITError+0x194>)
 801a61a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	2200      	movs	r2, #0
 801a620:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a626:	683b      	ldr	r3, [r7, #0]
 801a628:	431a      	orrs	r2, r3
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801a62e:	7bfb      	ldrb	r3, [r7, #15]
 801a630:	2b28      	cmp	r3, #40	; 0x28
 801a632:	d005      	beq.n	801a640 <I2C_ITError+0x44>
 801a634:	7bfb      	ldrb	r3, [r7, #15]
 801a636:	2b29      	cmp	r3, #41	; 0x29
 801a638:	d002      	beq.n	801a640 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801a63a:	7bfb      	ldrb	r3, [r7, #15]
 801a63c:	2b2a      	cmp	r3, #42	; 0x2a
 801a63e:	d10b      	bne.n	801a658 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a640:	2103      	movs	r1, #3
 801a642:	6878      	ldr	r0, [r7, #4]
 801a644:	f000 fc4a 	bl	801aedc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	2228      	movs	r2, #40	; 0x28
 801a64c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	4a50      	ldr	r2, [pc, #320]	; (801a794 <I2C_ITError+0x198>)
 801a654:	635a      	str	r2, [r3, #52]	; 0x34
 801a656:	e011      	b.n	801a67c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801a658:	f248 0103 	movw	r1, #32771	; 0x8003
 801a65c:	6878      	ldr	r0, [r7, #4]
 801a65e:	f000 fc3d 	bl	801aedc <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a668:	b2db      	uxtb	r3, r3
 801a66a:	2b60      	cmp	r3, #96	; 0x60
 801a66c:	d003      	beq.n	801a676 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	2220      	movs	r2, #32
 801a672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	2200      	movs	r2, #0
 801a67a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a680:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a686:	2b00      	cmp	r3, #0
 801a688:	d039      	beq.n	801a6fe <I2C_ITError+0x102>
 801a68a:	68bb      	ldr	r3, [r7, #8]
 801a68c:	2b11      	cmp	r3, #17
 801a68e:	d002      	beq.n	801a696 <I2C_ITError+0x9a>
 801a690:	68bb      	ldr	r3, [r7, #8]
 801a692:	2b21      	cmp	r3, #33	; 0x21
 801a694:	d133      	bne.n	801a6fe <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a6a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a6a4:	d107      	bne.n	801a6b6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	681a      	ldr	r2, [r3, #0]
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	681b      	ldr	r3, [r3, #0]
 801a6b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a6b4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f7fd fab6 	bl	8017c2c <HAL_DMA_GetState>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	2b01      	cmp	r3, #1
 801a6c4:	d017      	beq.n	801a6f6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6ca:	4a33      	ldr	r2, [pc, #204]	; (801a798 <I2C_ITError+0x19c>)
 801a6cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f7fc f938 	bl	8016950 <HAL_DMA_Abort_IT>
 801a6e0:	4603      	mov	r3, r0
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d04d      	beq.n	801a782 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a6ec:	687a      	ldr	r2, [r7, #4]
 801a6ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801a6f0:	4610      	mov	r0, r2
 801a6f2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801a6f4:	e045      	b.n	801a782 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801a6f6:	6878      	ldr	r0, [r7, #4]
 801a6f8:	f000 f850 	bl	801a79c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801a6fc:	e041      	b.n	801a782 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a702:	2b00      	cmp	r3, #0
 801a704:	d039      	beq.n	801a77a <I2C_ITError+0x17e>
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	2b12      	cmp	r3, #18
 801a70a:	d002      	beq.n	801a712 <I2C_ITError+0x116>
 801a70c:	68bb      	ldr	r3, [r7, #8]
 801a70e:	2b22      	cmp	r3, #34	; 0x22
 801a710:	d133      	bne.n	801a77a <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a71c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a720:	d107      	bne.n	801a732 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	681a      	ldr	r2, [r3, #0]
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a730:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a736:	4618      	mov	r0, r3
 801a738:	f7fd fa78 	bl	8017c2c <HAL_DMA_GetState>
 801a73c:	4603      	mov	r3, r0
 801a73e:	2b01      	cmp	r3, #1
 801a740:	d017      	beq.n	801a772 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a746:	4a14      	ldr	r2, [pc, #80]	; (801a798 <I2C_ITError+0x19c>)
 801a748:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	2200      	movs	r2, #0
 801a74e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a756:	4618      	mov	r0, r3
 801a758:	f7fc f8fa 	bl	8016950 <HAL_DMA_Abort_IT>
 801a75c:	4603      	mov	r3, r0
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d011      	beq.n	801a786 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a768:	687a      	ldr	r2, [r7, #4]
 801a76a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801a76c:	4610      	mov	r0, r2
 801a76e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801a770:	e009      	b.n	801a786 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801a772:	6878      	ldr	r0, [r7, #4]
 801a774:	f000 f812 	bl	801a79c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801a778:	e005      	b.n	801a786 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801a77a:	6878      	ldr	r0, [r7, #4]
 801a77c:	f000 f80e 	bl	801a79c <I2C_TreatErrorCallback>
  }
}
 801a780:	e002      	b.n	801a788 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801a782:	bf00      	nop
 801a784:	e000      	b.n	801a788 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801a786:	bf00      	nop
}
 801a788:	bf00      	nop
 801a78a:	3710      	adds	r7, #16
 801a78c:	46bd      	mov	sp, r7
 801a78e:	bd80      	pop	{r7, pc}
 801a790:	ffff0000 	.word	0xffff0000
 801a794:	08019491 	.word	0x08019491
 801a798:	0801ab39 	.word	0x0801ab39

0801a79c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801a79c:	b580      	push	{r7, lr}
 801a79e:	b082      	sub	sp, #8
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a7aa:	b2db      	uxtb	r3, r3
 801a7ac:	2b60      	cmp	r3, #96	; 0x60
 801a7ae:	d10e      	bne.n	801a7ce <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	2220      	movs	r2, #32
 801a7b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801a7c6:	6878      	ldr	r0, [r7, #4]
 801a7c8:	f7fe fd2f 	bl	801922a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801a7cc:	e009      	b.n	801a7e2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	2200      	movs	r2, #0
 801a7d2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	2200      	movs	r2, #0
 801a7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 801a7dc:	6878      	ldr	r0, [r7, #4]
 801a7de:	f7fe fd1a 	bl	8019216 <HAL_I2C_ErrorCallback>
}
 801a7e2:	bf00      	nop
 801a7e4:	3708      	adds	r7, #8
 801a7e6:	46bd      	mov	sp, r7
 801a7e8:	bd80      	pop	{r7, pc}

0801a7ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801a7ea:	b480      	push	{r7}
 801a7ec:	b083      	sub	sp, #12
 801a7ee:	af00      	add	r7, sp, #0
 801a7f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	699b      	ldr	r3, [r3, #24]
 801a7f8:	f003 0302 	and.w	r3, r3, #2
 801a7fc:	2b02      	cmp	r3, #2
 801a7fe:	d103      	bne.n	801a808 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	2200      	movs	r2, #0
 801a806:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	699b      	ldr	r3, [r3, #24]
 801a80e:	f003 0301 	and.w	r3, r3, #1
 801a812:	2b01      	cmp	r3, #1
 801a814:	d007      	beq.n	801a826 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	699a      	ldr	r2, [r3, #24]
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	f042 0201 	orr.w	r2, r2, #1
 801a824:	619a      	str	r2, [r3, #24]
  }
}
 801a826:	bf00      	nop
 801a828:	370c      	adds	r7, #12
 801a82a:	46bd      	mov	sp, r7
 801a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a830:	4770      	bx	lr

0801a832 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801a832:	b580      	push	{r7, lr}
 801a834:	b084      	sub	sp, #16
 801a836:	af00      	add	r7, sp, #0
 801a838:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a83e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	681a      	ldr	r2, [r3, #0]
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a84e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a854:	b29b      	uxth	r3, r3
 801a856:	2b00      	cmp	r3, #0
 801a858:	d104      	bne.n	801a864 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801a85a:	2120      	movs	r1, #32
 801a85c:	68f8      	ldr	r0, [r7, #12]
 801a85e:	f000 fad9 	bl	801ae14 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801a862:	e02d      	b.n	801a8c0 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a868:	68fa      	ldr	r2, [r7, #12]
 801a86a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801a86c:	441a      	add	r2, r3
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a876:	b29b      	uxth	r3, r3
 801a878:	2bff      	cmp	r3, #255	; 0xff
 801a87a:	d903      	bls.n	801a884 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	22ff      	movs	r2, #255	; 0xff
 801a880:	851a      	strh	r2, [r3, #40]	; 0x28
 801a882:	e004      	b.n	801a88e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a888:	b29a      	uxth	r2, r3
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	3324      	adds	r3, #36	; 0x24
 801a898:	4619      	mov	r1, r3
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a89e:	461a      	mov	r2, r3
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a8a4:	f7fb fdea 	bl	801647c <HAL_DMA_Start_IT>
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d004      	beq.n	801a8b8 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801a8ae:	2110      	movs	r1, #16
 801a8b0:	68f8      	ldr	r0, [r7, #12]
 801a8b2:	f7ff fea3 	bl	801a5fc <I2C_ITError>
}
 801a8b6:	e003      	b.n	801a8c0 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 801a8b8:	2140      	movs	r1, #64	; 0x40
 801a8ba:	68f8      	ldr	r0, [r7, #12]
 801a8bc:	f000 faaa 	bl	801ae14 <I2C_Enable_IRQ>
}
 801a8c0:	bf00      	nop
 801a8c2:	3710      	adds	r7, #16
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	bd80      	pop	{r7, pc}

0801a8c8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b084      	sub	sp, #16
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 801a8d0:	2300      	movs	r3, #0
 801a8d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8d8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 801a8da:	68bb      	ldr	r3, [r7, #8]
 801a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d076      	beq.n	801a9d0 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 801a8e2:	68bb      	ldr	r3, [r7, #8]
 801a8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	4a83      	ldr	r2, [pc, #524]	; (801aaf8 <I2C_DMAError+0x230>)
 801a8ea:	4293      	cmp	r3, r2
 801a8ec:	d059      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a8ee:	68bb      	ldr	r3, [r7, #8]
 801a8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	4a81      	ldr	r2, [pc, #516]	; (801aafc <I2C_DMAError+0x234>)
 801a8f6:	4293      	cmp	r3, r2
 801a8f8:	d053      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a8fa:	68bb      	ldr	r3, [r7, #8]
 801a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	4a7f      	ldr	r2, [pc, #508]	; (801ab00 <I2C_DMAError+0x238>)
 801a902:	4293      	cmp	r3, r2
 801a904:	d04d      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a906:	68bb      	ldr	r3, [r7, #8]
 801a908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	4a7d      	ldr	r2, [pc, #500]	; (801ab04 <I2C_DMAError+0x23c>)
 801a90e:	4293      	cmp	r3, r2
 801a910:	d047      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a912:	68bb      	ldr	r3, [r7, #8]
 801a914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	4a7b      	ldr	r2, [pc, #492]	; (801ab08 <I2C_DMAError+0x240>)
 801a91a:	4293      	cmp	r3, r2
 801a91c:	d041      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a91e:	68bb      	ldr	r3, [r7, #8]
 801a920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	4a79      	ldr	r2, [pc, #484]	; (801ab0c <I2C_DMAError+0x244>)
 801a926:	4293      	cmp	r3, r2
 801a928:	d03b      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a92a:	68bb      	ldr	r3, [r7, #8]
 801a92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	4a77      	ldr	r2, [pc, #476]	; (801ab10 <I2C_DMAError+0x248>)
 801a932:	4293      	cmp	r3, r2
 801a934:	d035      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a936:	68bb      	ldr	r3, [r7, #8]
 801a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	4a75      	ldr	r2, [pc, #468]	; (801ab14 <I2C_DMAError+0x24c>)
 801a93e:	4293      	cmp	r3, r2
 801a940:	d02f      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	4a73      	ldr	r2, [pc, #460]	; (801ab18 <I2C_DMAError+0x250>)
 801a94a:	4293      	cmp	r3, r2
 801a94c:	d029      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a94e:	68bb      	ldr	r3, [r7, #8]
 801a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	4a71      	ldr	r2, [pc, #452]	; (801ab1c <I2C_DMAError+0x254>)
 801a956:	4293      	cmp	r3, r2
 801a958:	d023      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a95a:	68bb      	ldr	r3, [r7, #8]
 801a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	4a6f      	ldr	r2, [pc, #444]	; (801ab20 <I2C_DMAError+0x258>)
 801a962:	4293      	cmp	r3, r2
 801a964:	d01d      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	4a6d      	ldr	r2, [pc, #436]	; (801ab24 <I2C_DMAError+0x25c>)
 801a96e:	4293      	cmp	r3, r2
 801a970:	d017      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	4a6b      	ldr	r2, [pc, #428]	; (801ab28 <I2C_DMAError+0x260>)
 801a97a:	4293      	cmp	r3, r2
 801a97c:	d011      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	4a69      	ldr	r2, [pc, #420]	; (801ab2c <I2C_DMAError+0x264>)
 801a986:	4293      	cmp	r3, r2
 801a988:	d00b      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	4a67      	ldr	r2, [pc, #412]	; (801ab30 <I2C_DMAError+0x268>)
 801a992:	4293      	cmp	r3, r2
 801a994:	d005      	beq.n	801a9a2 <I2C_DMAError+0xda>
 801a996:	68bb      	ldr	r3, [r7, #8]
 801a998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	4a65      	ldr	r2, [pc, #404]	; (801ab34 <I2C_DMAError+0x26c>)
 801a99e:	4293      	cmp	r3, r2
 801a9a0:	d109      	bne.n	801a9b6 <I2C_DMAError+0xee>
 801a9a2:	68bb      	ldr	r3, [r7, #8]
 801a9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	685b      	ldr	r3, [r3, #4]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	bf0c      	ite	eq
 801a9ae:	2301      	moveq	r3, #1
 801a9b0:	2300      	movne	r3, #0
 801a9b2:	b2db      	uxtb	r3, r3
 801a9b4:	e008      	b.n	801a9c8 <I2C_DMAError+0x100>
 801a9b6:	68bb      	ldr	r3, [r7, #8]
 801a9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	685b      	ldr	r3, [r3, #4]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	bf0c      	ite	eq
 801a9c2:	2301      	moveq	r3, #1
 801a9c4:	2300      	movne	r3, #0
 801a9c6:	b2db      	uxtb	r3, r3
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d001      	beq.n	801a9d0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 801a9cc:	2301      	movs	r3, #1
 801a9ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d076      	beq.n	801aac6 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	4a46      	ldr	r2, [pc, #280]	; (801aaf8 <I2C_DMAError+0x230>)
 801a9e0:	4293      	cmp	r3, r2
 801a9e2:	d059      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801a9e4:	68bb      	ldr	r3, [r7, #8]
 801a9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	4a44      	ldr	r2, [pc, #272]	; (801aafc <I2C_DMAError+0x234>)
 801a9ec:	4293      	cmp	r3, r2
 801a9ee:	d053      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801a9f0:	68bb      	ldr	r3, [r7, #8]
 801a9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	4a42      	ldr	r2, [pc, #264]	; (801ab00 <I2C_DMAError+0x238>)
 801a9f8:	4293      	cmp	r3, r2
 801a9fa:	d04d      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801a9fc:	68bb      	ldr	r3, [r7, #8]
 801a9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	4a40      	ldr	r2, [pc, #256]	; (801ab04 <I2C_DMAError+0x23c>)
 801aa04:	4293      	cmp	r3, r2
 801aa06:	d047      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa08:	68bb      	ldr	r3, [r7, #8]
 801aa0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	4a3e      	ldr	r2, [pc, #248]	; (801ab08 <I2C_DMAError+0x240>)
 801aa10:	4293      	cmp	r3, r2
 801aa12:	d041      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa14:	68bb      	ldr	r3, [r7, #8]
 801aa16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	4a3c      	ldr	r2, [pc, #240]	; (801ab0c <I2C_DMAError+0x244>)
 801aa1c:	4293      	cmp	r3, r2
 801aa1e:	d03b      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa20:	68bb      	ldr	r3, [r7, #8]
 801aa22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	4a3a      	ldr	r2, [pc, #232]	; (801ab10 <I2C_DMAError+0x248>)
 801aa28:	4293      	cmp	r3, r2
 801aa2a:	d035      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	4a38      	ldr	r2, [pc, #224]	; (801ab14 <I2C_DMAError+0x24c>)
 801aa34:	4293      	cmp	r3, r2
 801aa36:	d02f      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa38:	68bb      	ldr	r3, [r7, #8]
 801aa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	4a36      	ldr	r2, [pc, #216]	; (801ab18 <I2C_DMAError+0x250>)
 801aa40:	4293      	cmp	r3, r2
 801aa42:	d029      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa44:	68bb      	ldr	r3, [r7, #8]
 801aa46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	4a34      	ldr	r2, [pc, #208]	; (801ab1c <I2C_DMAError+0x254>)
 801aa4c:	4293      	cmp	r3, r2
 801aa4e:	d023      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	4a32      	ldr	r2, [pc, #200]	; (801ab20 <I2C_DMAError+0x258>)
 801aa58:	4293      	cmp	r3, r2
 801aa5a:	d01d      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa5c:	68bb      	ldr	r3, [r7, #8]
 801aa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	4a30      	ldr	r2, [pc, #192]	; (801ab24 <I2C_DMAError+0x25c>)
 801aa64:	4293      	cmp	r3, r2
 801aa66:	d017      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa68:	68bb      	ldr	r3, [r7, #8]
 801aa6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	4a2e      	ldr	r2, [pc, #184]	; (801ab28 <I2C_DMAError+0x260>)
 801aa70:	4293      	cmp	r3, r2
 801aa72:	d011      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa74:	68bb      	ldr	r3, [r7, #8]
 801aa76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	4a2c      	ldr	r2, [pc, #176]	; (801ab2c <I2C_DMAError+0x264>)
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	d00b      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa80:	68bb      	ldr	r3, [r7, #8]
 801aa82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	4a2a      	ldr	r2, [pc, #168]	; (801ab30 <I2C_DMAError+0x268>)
 801aa88:	4293      	cmp	r3, r2
 801aa8a:	d005      	beq.n	801aa98 <I2C_DMAError+0x1d0>
 801aa8c:	68bb      	ldr	r3, [r7, #8]
 801aa8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	4a28      	ldr	r2, [pc, #160]	; (801ab34 <I2C_DMAError+0x26c>)
 801aa94:	4293      	cmp	r3, r2
 801aa96:	d109      	bne.n	801aaac <I2C_DMAError+0x1e4>
 801aa98:	68bb      	ldr	r3, [r7, #8]
 801aa9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	685b      	ldr	r3, [r3, #4]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	bf0c      	ite	eq
 801aaa4:	2301      	moveq	r3, #1
 801aaa6:	2300      	movne	r3, #0
 801aaa8:	b2db      	uxtb	r3, r3
 801aaaa:	e008      	b.n	801aabe <I2C_DMAError+0x1f6>
 801aaac:	68bb      	ldr	r3, [r7, #8]
 801aaae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	685b      	ldr	r3, [r3, #4]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	bf0c      	ite	eq
 801aab8:	2301      	moveq	r3, #1
 801aaba:	2300      	movne	r3, #0
 801aabc:	b2db      	uxtb	r3, r3
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d001      	beq.n	801aac6 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 801aac2:	2301      	movs	r3, #1
 801aac4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 801aac6:	6878      	ldr	r0, [r7, #4]
 801aac8:	f7fd f8be 	bl	8017c48 <HAL_DMA_GetError>
 801aacc:	4603      	mov	r3, r0
 801aace:	2b02      	cmp	r3, #2
 801aad0:	d00e      	beq.n	801aaf0 <I2C_DMAError+0x228>
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d00b      	beq.n	801aaf0 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801aad8:	68bb      	ldr	r3, [r7, #8]
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	685a      	ldr	r2, [r3, #4]
 801aade:	68bb      	ldr	r3, [r7, #8]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801aae6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801aae8:	2110      	movs	r1, #16
 801aaea:	68b8      	ldr	r0, [r7, #8]
 801aaec:	f7ff fd86 	bl	801a5fc <I2C_ITError>
  }
}
 801aaf0:	bf00      	nop
 801aaf2:	3710      	adds	r7, #16
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	bd80      	pop	{r7, pc}
 801aaf8:	40020010 	.word	0x40020010
 801aafc:	40020028 	.word	0x40020028
 801ab00:	40020040 	.word	0x40020040
 801ab04:	40020058 	.word	0x40020058
 801ab08:	40020070 	.word	0x40020070
 801ab0c:	40020088 	.word	0x40020088
 801ab10:	400200a0 	.word	0x400200a0
 801ab14:	400200b8 	.word	0x400200b8
 801ab18:	40020410 	.word	0x40020410
 801ab1c:	40020428 	.word	0x40020428
 801ab20:	40020440 	.word	0x40020440
 801ab24:	40020458 	.word	0x40020458
 801ab28:	40020470 	.word	0x40020470
 801ab2c:	40020488 	.word	0x40020488
 801ab30:	400204a0 	.word	0x400204a0
 801ab34:	400204b8 	.word	0x400204b8

0801ab38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b084      	sub	sp, #16
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab44:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d003      	beq.n	801ab56 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab52:	2200      	movs	r2, #0
 801ab54:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d003      	beq.n	801ab66 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ab62:	2200      	movs	r2, #0
 801ab64:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 801ab66:	68f8      	ldr	r0, [r7, #12]
 801ab68:	f7ff fe18 	bl	801a79c <I2C_TreatErrorCallback>
}
 801ab6c:	bf00      	nop
 801ab6e:	3710      	adds	r7, #16
 801ab70:	46bd      	mov	sp, r7
 801ab72:	bd80      	pop	{r7, pc}

0801ab74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b084      	sub	sp, #16
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	60f8      	str	r0, [r7, #12]
 801ab7c:	60b9      	str	r1, [r7, #8]
 801ab7e:	603b      	str	r3, [r7, #0]
 801ab80:	4613      	mov	r3, r2
 801ab82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801ab84:	e022      	b.n	801abcc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ab86:	683b      	ldr	r3, [r7, #0]
 801ab88:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab8c:	d01e      	beq.n	801abcc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ab8e:	f7fa f8b1 	bl	8014cf4 <HAL_GetTick>
 801ab92:	4602      	mov	r2, r0
 801ab94:	69bb      	ldr	r3, [r7, #24]
 801ab96:	1ad3      	subs	r3, r2, r3
 801ab98:	683a      	ldr	r2, [r7, #0]
 801ab9a:	429a      	cmp	r2, r3
 801ab9c:	d302      	bcc.n	801aba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d113      	bne.n	801abcc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aba8:	f043 0220 	orr.w	r2, r3, #32
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	2220      	movs	r2, #32
 801abb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	2200      	movs	r2, #0
 801abbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	2200      	movs	r2, #0
 801abc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801abc8:	2301      	movs	r3, #1
 801abca:	e00f      	b.n	801abec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	699a      	ldr	r2, [r3, #24]
 801abd2:	68bb      	ldr	r3, [r7, #8]
 801abd4:	4013      	ands	r3, r2
 801abd6:	68ba      	ldr	r2, [r7, #8]
 801abd8:	429a      	cmp	r2, r3
 801abda:	bf0c      	ite	eq
 801abdc:	2301      	moveq	r3, #1
 801abde:	2300      	movne	r3, #0
 801abe0:	b2db      	uxtb	r3, r3
 801abe2:	461a      	mov	r2, r3
 801abe4:	79fb      	ldrb	r3, [r7, #7]
 801abe6:	429a      	cmp	r2, r3
 801abe8:	d0cd      	beq.n	801ab86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801abea:	2300      	movs	r3, #0
}
 801abec:	4618      	mov	r0, r3
 801abee:	3710      	adds	r7, #16
 801abf0:	46bd      	mov	sp, r7
 801abf2:	bd80      	pop	{r7, pc}

0801abf4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b084      	sub	sp, #16
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	60f8      	str	r0, [r7, #12]
 801abfc:	60b9      	str	r1, [r7, #8]
 801abfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801ac00:	e02c      	b.n	801ac5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801ac02:	687a      	ldr	r2, [r7, #4]
 801ac04:	68b9      	ldr	r1, [r7, #8]
 801ac06:	68f8      	ldr	r0, [r7, #12]
 801ac08:	f000 f870 	bl	801acec <I2C_IsAcknowledgeFailed>
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d001      	beq.n	801ac16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801ac12:	2301      	movs	r3, #1
 801ac14:	e02a      	b.n	801ac6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ac16:	68bb      	ldr	r3, [r7, #8]
 801ac18:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac1c:	d01e      	beq.n	801ac5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ac1e:	f7fa f869 	bl	8014cf4 <HAL_GetTick>
 801ac22:	4602      	mov	r2, r0
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	1ad3      	subs	r3, r2, r3
 801ac28:	68ba      	ldr	r2, [r7, #8]
 801ac2a:	429a      	cmp	r2, r3
 801ac2c:	d302      	bcc.n	801ac34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801ac2e:	68bb      	ldr	r3, [r7, #8]
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d113      	bne.n	801ac5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac38:	f043 0220 	orr.w	r2, r3, #32
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	2220      	movs	r2, #32
 801ac44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	2200      	movs	r2, #0
 801ac54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801ac58:	2301      	movs	r3, #1
 801ac5a:	e007      	b.n	801ac6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	699b      	ldr	r3, [r3, #24]
 801ac62:	f003 0302 	and.w	r3, r3, #2
 801ac66:	2b02      	cmp	r3, #2
 801ac68:	d1cb      	bne.n	801ac02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801ac6a:	2300      	movs	r3, #0
}
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	3710      	adds	r7, #16
 801ac70:	46bd      	mov	sp, r7
 801ac72:	bd80      	pop	{r7, pc}

0801ac74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b084      	sub	sp, #16
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	60f8      	str	r0, [r7, #12]
 801ac7c:	60b9      	str	r1, [r7, #8]
 801ac7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ac80:	e028      	b.n	801acd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801ac82:	687a      	ldr	r2, [r7, #4]
 801ac84:	68b9      	ldr	r1, [r7, #8]
 801ac86:	68f8      	ldr	r0, [r7, #12]
 801ac88:	f000 f830 	bl	801acec <I2C_IsAcknowledgeFailed>
 801ac8c:	4603      	mov	r3, r0
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d001      	beq.n	801ac96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801ac92:	2301      	movs	r3, #1
 801ac94:	e026      	b.n	801ace4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ac96:	f7fa f82d 	bl	8014cf4 <HAL_GetTick>
 801ac9a:	4602      	mov	r2, r0
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	1ad3      	subs	r3, r2, r3
 801aca0:	68ba      	ldr	r2, [r7, #8]
 801aca2:	429a      	cmp	r2, r3
 801aca4:	d302      	bcc.n	801acac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801aca6:	68bb      	ldr	r3, [r7, #8]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d113      	bne.n	801acd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801acb0:	f043 0220 	orr.w	r2, r3, #32
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	2220      	movs	r2, #32
 801acbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	2200      	movs	r2, #0
 801acc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	2200      	movs	r2, #0
 801accc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801acd0:	2301      	movs	r3, #1
 801acd2:	e007      	b.n	801ace4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	699b      	ldr	r3, [r3, #24]
 801acda:	f003 0320 	and.w	r3, r3, #32
 801acde:	2b20      	cmp	r3, #32
 801ace0:	d1cf      	bne.n	801ac82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801ace2:	2300      	movs	r3, #0
}
 801ace4:	4618      	mov	r0, r3
 801ace6:	3710      	adds	r7, #16
 801ace8:	46bd      	mov	sp, r7
 801acea:	bd80      	pop	{r7, pc}

0801acec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b084      	sub	sp, #16
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	60f8      	str	r0, [r7, #12]
 801acf4:	60b9      	str	r1, [r7, #8]
 801acf6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	699b      	ldr	r3, [r3, #24]
 801acfe:	f003 0310 	and.w	r3, r3, #16
 801ad02:	2b10      	cmp	r3, #16
 801ad04:	d151      	bne.n	801adaa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ad06:	e022      	b.n	801ad4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801ad08:	68bb      	ldr	r3, [r7, #8]
 801ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad0e:	d01e      	beq.n	801ad4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ad10:	f7f9 fff0 	bl	8014cf4 <HAL_GetTick>
 801ad14:	4602      	mov	r2, r0
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	1ad3      	subs	r3, r2, r3
 801ad1a:	68ba      	ldr	r2, [r7, #8]
 801ad1c:	429a      	cmp	r2, r3
 801ad1e:	d302      	bcc.n	801ad26 <I2C_IsAcknowledgeFailed+0x3a>
 801ad20:	68bb      	ldr	r3, [r7, #8]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d113      	bne.n	801ad4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad2a:	f043 0220 	orr.w	r2, r3, #32
 801ad2e:	68fb      	ldr	r3, [r7, #12]
 801ad30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	2220      	movs	r2, #32
 801ad36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	2200      	movs	r2, #0
 801ad3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	2200      	movs	r2, #0
 801ad46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 801ad4a:	2301      	movs	r3, #1
 801ad4c:	e02e      	b.n	801adac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	699b      	ldr	r3, [r3, #24]
 801ad54:	f003 0320 	and.w	r3, r3, #32
 801ad58:	2b20      	cmp	r3, #32
 801ad5a:	d1d5      	bne.n	801ad08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	2210      	movs	r2, #16
 801ad62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	2220      	movs	r2, #32
 801ad6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801ad6c:	68f8      	ldr	r0, [r7, #12]
 801ad6e:	f7ff fd3c 	bl	801a7ea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	6859      	ldr	r1, [r3, #4]
 801ad78:	68fb      	ldr	r3, [r7, #12]
 801ad7a:	681a      	ldr	r2, [r3, #0]
 801ad7c:	4b0d      	ldr	r3, [pc, #52]	; (801adb4 <I2C_IsAcknowledgeFailed+0xc8>)
 801ad7e:	400b      	ands	r3, r1
 801ad80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad86:	f043 0204 	orr.w	r2, r3, #4
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	2220      	movs	r2, #32
 801ad92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	2200      	movs	r2, #0
 801ad9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	2200      	movs	r2, #0
 801ada2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801ada6:	2301      	movs	r3, #1
 801ada8:	e000      	b.n	801adac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 801adaa:	2300      	movs	r3, #0
}
 801adac:	4618      	mov	r0, r3
 801adae:	3710      	adds	r7, #16
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bd80      	pop	{r7, pc}
 801adb4:	fe00e800 	.word	0xfe00e800

0801adb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 801adb8:	b480      	push	{r7}
 801adba:	b085      	sub	sp, #20
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	60f8      	str	r0, [r7, #12]
 801adc0:	607b      	str	r3, [r7, #4]
 801adc2:	460b      	mov	r3, r1
 801adc4:	817b      	strh	r3, [r7, #10]
 801adc6:	4613      	mov	r3, r2
 801adc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	685a      	ldr	r2, [r3, #4]
 801add0:	69bb      	ldr	r3, [r7, #24]
 801add2:	0d5b      	lsrs	r3, r3, #21
 801add4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801add8:	4b0d      	ldr	r3, [pc, #52]	; (801ae10 <I2C_TransferConfig+0x58>)
 801adda:	430b      	orrs	r3, r1
 801addc:	43db      	mvns	r3, r3
 801adde:	ea02 0103 	and.w	r1, r2, r3
 801ade2:	897b      	ldrh	r3, [r7, #10]
 801ade4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801ade8:	7a7b      	ldrb	r3, [r7, #9]
 801adea:	041b      	lsls	r3, r3, #16
 801adec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801adf0:	431a      	orrs	r2, r3
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	431a      	orrs	r2, r3
 801adf6:	69bb      	ldr	r3, [r7, #24]
 801adf8:	431a      	orrs	r2, r3
 801adfa:	68fb      	ldr	r3, [r7, #12]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	430a      	orrs	r2, r1
 801ae00:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 801ae02:	bf00      	nop
 801ae04:	3714      	adds	r7, #20
 801ae06:	46bd      	mov	sp, r7
 801ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0c:	4770      	bx	lr
 801ae0e:	bf00      	nop
 801ae10:	03ff63ff 	.word	0x03ff63ff

0801ae14 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801ae14:	b480      	push	{r7}
 801ae16:	b085      	sub	sp, #20
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
 801ae1c:	460b      	mov	r3, r1
 801ae1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801ae20:	2300      	movs	r3, #0
 801ae22:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae28:	4a2a      	ldr	r2, [pc, #168]	; (801aed4 <I2C_Enable_IRQ+0xc0>)
 801ae2a:	4293      	cmp	r3, r2
 801ae2c:	d004      	beq.n	801ae38 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801ae32:	4a29      	ldr	r2, [pc, #164]	; (801aed8 <I2C_Enable_IRQ+0xc4>)
 801ae34:	4293      	cmp	r3, r2
 801ae36:	d11d      	bne.n	801ae74 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801ae38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	da03      	bge.n	801ae48 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801ae46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801ae48:	887b      	ldrh	r3, [r7, #2]
 801ae4a:	2b10      	cmp	r3, #16
 801ae4c:	d103      	bne.n	801ae56 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801ae54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801ae56:	887b      	ldrh	r3, [r7, #2]
 801ae58:	2b20      	cmp	r3, #32
 801ae5a:	d103      	bne.n	801ae64 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801ae62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801ae64:	887b      	ldrh	r3, [r7, #2]
 801ae66:	2b40      	cmp	r3, #64	; 0x40
 801ae68:	d125      	bne.n	801aeb6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae70:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801ae72:	e020      	b.n	801aeb6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801ae74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	da03      	bge.n	801ae84 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801ae82:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801ae84:	887b      	ldrh	r3, [r7, #2]
 801ae86:	f003 0301 	and.w	r3, r3, #1
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d003      	beq.n	801ae96 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801ae8e:	68fb      	ldr	r3, [r7, #12]
 801ae90:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 801ae94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801ae96:	887b      	ldrh	r3, [r7, #2]
 801ae98:	f003 0302 	and.w	r3, r3, #2
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d003      	beq.n	801aea8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 801aea6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801aea8:	887b      	ldrh	r3, [r7, #2]
 801aeaa:	2b20      	cmp	r3, #32
 801aeac:	d103      	bne.n	801aeb6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	f043 0320 	orr.w	r3, r3, #32
 801aeb4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	6819      	ldr	r1, [r3, #0]
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	68fa      	ldr	r2, [r7, #12]
 801aec2:	430a      	orrs	r2, r1
 801aec4:	601a      	str	r2, [r3, #0]
}
 801aec6:	bf00      	nop
 801aec8:	3714      	adds	r7, #20
 801aeca:	46bd      	mov	sp, r7
 801aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aed0:	4770      	bx	lr
 801aed2:	bf00      	nop
 801aed4:	08019697 	.word	0x08019697
 801aed8:	0801987d 	.word	0x0801987d

0801aedc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801aedc:	b480      	push	{r7}
 801aede:	b085      	sub	sp, #20
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	6078      	str	r0, [r7, #4]
 801aee4:	460b      	mov	r3, r1
 801aee6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801aee8:	2300      	movs	r3, #0
 801aeea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801aeec:	887b      	ldrh	r3, [r7, #2]
 801aeee:	f003 0301 	and.w	r3, r3, #1
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d00f      	beq.n	801af16 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 801aefc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801af04:	b2db      	uxtb	r3, r3
 801af06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801af0a:	2b28      	cmp	r3, #40	; 0x28
 801af0c:	d003      	beq.n	801af16 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801af14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801af16:	887b      	ldrh	r3, [r7, #2]
 801af18:	f003 0302 	and.w	r3, r3, #2
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d00f      	beq.n	801af40 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 801af26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801af2e:	b2db      	uxtb	r3, r3
 801af30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801af34:	2b28      	cmp	r3, #40	; 0x28
 801af36:	d003      	beq.n	801af40 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801af3e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801af40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801af44:	2b00      	cmp	r3, #0
 801af46:	da03      	bge.n	801af50 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801af4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801af50:	887b      	ldrh	r3, [r7, #2]
 801af52:	2b10      	cmp	r3, #16
 801af54:	d103      	bne.n	801af5e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801af5c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801af5e:	887b      	ldrh	r3, [r7, #2]
 801af60:	2b20      	cmp	r3, #32
 801af62:	d103      	bne.n	801af6c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	f043 0320 	orr.w	r3, r3, #32
 801af6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801af6c:	887b      	ldrh	r3, [r7, #2]
 801af6e:	2b40      	cmp	r3, #64	; 0x40
 801af70:	d103      	bne.n	801af7a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af78:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	6819      	ldr	r1, [r3, #0]
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	43da      	mvns	r2, r3
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	400a      	ands	r2, r1
 801af8a:	601a      	str	r2, [r3, #0]
}
 801af8c:	bf00      	nop
 801af8e:	3714      	adds	r7, #20
 801af90:	46bd      	mov	sp, r7
 801af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af96:	4770      	bx	lr

0801af98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801af98:	b480      	push	{r7}
 801af9a:	b083      	sub	sp, #12
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
 801afa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801afa8:	b2db      	uxtb	r3, r3
 801afaa:	2b20      	cmp	r3, #32
 801afac:	d138      	bne.n	801b020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801afb4:	2b01      	cmp	r3, #1
 801afb6:	d101      	bne.n	801afbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801afb8:	2302      	movs	r3, #2
 801afba:	e032      	b.n	801b022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	2201      	movs	r2, #1
 801afc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	2224      	movs	r2, #36	; 0x24
 801afc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	681a      	ldr	r2, [r3, #0]
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	f022 0201 	bic.w	r2, r2, #1
 801afda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	681a      	ldr	r2, [r3, #0]
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801afea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	6819      	ldr	r1, [r3, #0]
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	683a      	ldr	r2, [r7, #0]
 801aff8:	430a      	orrs	r2, r1
 801affa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	681a      	ldr	r2, [r3, #0]
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	f042 0201 	orr.w	r2, r2, #1
 801b00a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	2220      	movs	r2, #32
 801b010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	2200      	movs	r2, #0
 801b018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b01c:	2300      	movs	r3, #0
 801b01e:	e000      	b.n	801b022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801b020:	2302      	movs	r3, #2
  }
}
 801b022:	4618      	mov	r0, r3
 801b024:	370c      	adds	r7, #12
 801b026:	46bd      	mov	sp, r7
 801b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b02c:	4770      	bx	lr

0801b02e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801b02e:	b480      	push	{r7}
 801b030:	b085      	sub	sp, #20
 801b032:	af00      	add	r7, sp, #0
 801b034:	6078      	str	r0, [r7, #4]
 801b036:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b03e:	b2db      	uxtb	r3, r3
 801b040:	2b20      	cmp	r3, #32
 801b042:	d139      	bne.n	801b0b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b04a:	2b01      	cmp	r3, #1
 801b04c:	d101      	bne.n	801b052 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801b04e:	2302      	movs	r3, #2
 801b050:	e033      	b.n	801b0ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	2201      	movs	r2, #1
 801b056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	2224      	movs	r2, #36	; 0x24
 801b05e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	681a      	ldr	r2, [r3, #0]
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	f022 0201 	bic.w	r2, r2, #1
 801b070:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801b080:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801b082:	683b      	ldr	r3, [r7, #0]
 801b084:	021b      	lsls	r3, r3, #8
 801b086:	68fa      	ldr	r2, [r7, #12]
 801b088:	4313      	orrs	r3, r2
 801b08a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	68fa      	ldr	r2, [r7, #12]
 801b092:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	681a      	ldr	r2, [r3, #0]
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	f042 0201 	orr.w	r2, r2, #1
 801b0a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	2220      	movs	r2, #32
 801b0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	2200      	movs	r2, #0
 801b0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	e000      	b.n	801b0ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801b0b8:	2302      	movs	r3, #2
  }
}
 801b0ba:	4618      	mov	r0, r3
 801b0bc:	3714      	adds	r7, #20
 801b0be:	46bd      	mov	sp, r7
 801b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c4:	4770      	bx	lr

0801b0c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801b0c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0c8:	b08f      	sub	sp, #60	; 0x3c
 801b0ca:	af0a      	add	r7, sp, #40	; 0x28
 801b0cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d101      	bne.n	801b0d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801b0d4:	2301      	movs	r3, #1
 801b0d6:	e116      	b.n	801b306 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 801b0e4:	b2db      	uxtb	r3, r3
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d106      	bne.n	801b0f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	2200      	movs	r2, #0
 801b0ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801b0f2:	6878      	ldr	r0, [r7, #4]
 801b0f4:	f7f9 fd2c 	bl	8014b50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	2203      	movs	r2, #3
 801b0fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801b100:	68bb      	ldr	r3, [r7, #8]
 801b102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d102      	bne.n	801b112 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	2200      	movs	r2, #0
 801b110:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	4618      	mov	r0, r3
 801b118:	f008 fca2 	bl	8023a60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	603b      	str	r3, [r7, #0]
 801b122:	687e      	ldr	r6, [r7, #4]
 801b124:	466d      	mov	r5, sp
 801b126:	f106 0410 	add.w	r4, r6, #16
 801b12a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b12c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b12e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b132:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b136:	e885 0003 	stmia.w	r5, {r0, r1}
 801b13a:	1d33      	adds	r3, r6, #4
 801b13c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b13e:	6838      	ldr	r0, [r7, #0]
 801b140:	f008 fc2c 	bl	802399c <USB_CoreInit>
 801b144:	4603      	mov	r3, r0
 801b146:	2b00      	cmp	r3, #0
 801b148:	d005      	beq.n	801b156 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	2202      	movs	r2, #2
 801b14e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801b152:	2301      	movs	r3, #1
 801b154:	e0d7      	b.n	801b306 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	2100      	movs	r1, #0
 801b15c:	4618      	mov	r0, r3
 801b15e:	f008 fc90 	bl	8023a82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b162:	2300      	movs	r3, #0
 801b164:	73fb      	strb	r3, [r7, #15]
 801b166:	e04a      	b.n	801b1fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801b168:	7bfa      	ldrb	r2, [r7, #15]
 801b16a:	6879      	ldr	r1, [r7, #4]
 801b16c:	4613      	mov	r3, r2
 801b16e:	00db      	lsls	r3, r3, #3
 801b170:	1a9b      	subs	r3, r3, r2
 801b172:	009b      	lsls	r3, r3, #2
 801b174:	440b      	add	r3, r1
 801b176:	333d      	adds	r3, #61	; 0x3d
 801b178:	2201      	movs	r2, #1
 801b17a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801b17c:	7bfa      	ldrb	r2, [r7, #15]
 801b17e:	6879      	ldr	r1, [r7, #4]
 801b180:	4613      	mov	r3, r2
 801b182:	00db      	lsls	r3, r3, #3
 801b184:	1a9b      	subs	r3, r3, r2
 801b186:	009b      	lsls	r3, r3, #2
 801b188:	440b      	add	r3, r1
 801b18a:	333c      	adds	r3, #60	; 0x3c
 801b18c:	7bfa      	ldrb	r2, [r7, #15]
 801b18e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 801b190:	7bfa      	ldrb	r2, [r7, #15]
 801b192:	7bfb      	ldrb	r3, [r7, #15]
 801b194:	b298      	uxth	r0, r3
 801b196:	6879      	ldr	r1, [r7, #4]
 801b198:	4613      	mov	r3, r2
 801b19a:	00db      	lsls	r3, r3, #3
 801b19c:	1a9b      	subs	r3, r3, r2
 801b19e:	009b      	lsls	r3, r3, #2
 801b1a0:	440b      	add	r3, r1
 801b1a2:	3342      	adds	r3, #66	; 0x42
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801b1a8:	7bfa      	ldrb	r2, [r7, #15]
 801b1aa:	6879      	ldr	r1, [r7, #4]
 801b1ac:	4613      	mov	r3, r2
 801b1ae:	00db      	lsls	r3, r3, #3
 801b1b0:	1a9b      	subs	r3, r3, r2
 801b1b2:	009b      	lsls	r3, r3, #2
 801b1b4:	440b      	add	r3, r1
 801b1b6:	333f      	adds	r3, #63	; 0x3f
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801b1bc:	7bfa      	ldrb	r2, [r7, #15]
 801b1be:	6879      	ldr	r1, [r7, #4]
 801b1c0:	4613      	mov	r3, r2
 801b1c2:	00db      	lsls	r3, r3, #3
 801b1c4:	1a9b      	subs	r3, r3, r2
 801b1c6:	009b      	lsls	r3, r3, #2
 801b1c8:	440b      	add	r3, r1
 801b1ca:	3344      	adds	r3, #68	; 0x44
 801b1cc:	2200      	movs	r2, #0
 801b1ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801b1d0:	7bfa      	ldrb	r2, [r7, #15]
 801b1d2:	6879      	ldr	r1, [r7, #4]
 801b1d4:	4613      	mov	r3, r2
 801b1d6:	00db      	lsls	r3, r3, #3
 801b1d8:	1a9b      	subs	r3, r3, r2
 801b1da:	009b      	lsls	r3, r3, #2
 801b1dc:	440b      	add	r3, r1
 801b1de:	3348      	adds	r3, #72	; 0x48
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801b1e4:	7bfa      	ldrb	r2, [r7, #15]
 801b1e6:	6879      	ldr	r1, [r7, #4]
 801b1e8:	4613      	mov	r3, r2
 801b1ea:	00db      	lsls	r3, r3, #3
 801b1ec:	1a9b      	subs	r3, r3, r2
 801b1ee:	009b      	lsls	r3, r3, #2
 801b1f0:	440b      	add	r3, r1
 801b1f2:	3350      	adds	r3, #80	; 0x50
 801b1f4:	2200      	movs	r2, #0
 801b1f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b1f8:	7bfb      	ldrb	r3, [r7, #15]
 801b1fa:	3301      	adds	r3, #1
 801b1fc:	73fb      	strb	r3, [r7, #15]
 801b1fe:	7bfa      	ldrb	r2, [r7, #15]
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	685b      	ldr	r3, [r3, #4]
 801b204:	429a      	cmp	r2, r3
 801b206:	d3af      	bcc.n	801b168 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b208:	2300      	movs	r3, #0
 801b20a:	73fb      	strb	r3, [r7, #15]
 801b20c:	e044      	b.n	801b298 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801b20e:	7bfa      	ldrb	r2, [r7, #15]
 801b210:	6879      	ldr	r1, [r7, #4]
 801b212:	4613      	mov	r3, r2
 801b214:	00db      	lsls	r3, r3, #3
 801b216:	1a9b      	subs	r3, r3, r2
 801b218:	009b      	lsls	r3, r3, #2
 801b21a:	440b      	add	r3, r1
 801b21c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 801b220:	2200      	movs	r2, #0
 801b222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801b224:	7bfa      	ldrb	r2, [r7, #15]
 801b226:	6879      	ldr	r1, [r7, #4]
 801b228:	4613      	mov	r3, r2
 801b22a:	00db      	lsls	r3, r3, #3
 801b22c:	1a9b      	subs	r3, r3, r2
 801b22e:	009b      	lsls	r3, r3, #2
 801b230:	440b      	add	r3, r1
 801b232:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 801b236:	7bfa      	ldrb	r2, [r7, #15]
 801b238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801b23a:	7bfa      	ldrb	r2, [r7, #15]
 801b23c:	6879      	ldr	r1, [r7, #4]
 801b23e:	4613      	mov	r3, r2
 801b240:	00db      	lsls	r3, r3, #3
 801b242:	1a9b      	subs	r3, r3, r2
 801b244:	009b      	lsls	r3, r3, #2
 801b246:	440b      	add	r3, r1
 801b248:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801b24c:	2200      	movs	r2, #0
 801b24e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801b250:	7bfa      	ldrb	r2, [r7, #15]
 801b252:	6879      	ldr	r1, [r7, #4]
 801b254:	4613      	mov	r3, r2
 801b256:	00db      	lsls	r3, r3, #3
 801b258:	1a9b      	subs	r3, r3, r2
 801b25a:	009b      	lsls	r3, r3, #2
 801b25c:	440b      	add	r3, r1
 801b25e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801b262:	2200      	movs	r2, #0
 801b264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801b266:	7bfa      	ldrb	r2, [r7, #15]
 801b268:	6879      	ldr	r1, [r7, #4]
 801b26a:	4613      	mov	r3, r2
 801b26c:	00db      	lsls	r3, r3, #3
 801b26e:	1a9b      	subs	r3, r3, r2
 801b270:	009b      	lsls	r3, r3, #2
 801b272:	440b      	add	r3, r1
 801b274:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b278:	2200      	movs	r2, #0
 801b27a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801b27c:	7bfa      	ldrb	r2, [r7, #15]
 801b27e:	6879      	ldr	r1, [r7, #4]
 801b280:	4613      	mov	r3, r2
 801b282:	00db      	lsls	r3, r3, #3
 801b284:	1a9b      	subs	r3, r3, r2
 801b286:	009b      	lsls	r3, r3, #2
 801b288:	440b      	add	r3, r1
 801b28a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801b28e:	2200      	movs	r2, #0
 801b290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b292:	7bfb      	ldrb	r3, [r7, #15]
 801b294:	3301      	adds	r3, #1
 801b296:	73fb      	strb	r3, [r7, #15]
 801b298:	7bfa      	ldrb	r2, [r7, #15]
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	685b      	ldr	r3, [r3, #4]
 801b29e:	429a      	cmp	r2, r3
 801b2a0:	d3b5      	bcc.n	801b20e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	603b      	str	r3, [r7, #0]
 801b2a8:	687e      	ldr	r6, [r7, #4]
 801b2aa:	466d      	mov	r5, sp
 801b2ac:	f106 0410 	add.w	r4, r6, #16
 801b2b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b2b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b2b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b2b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b2b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b2bc:	e885 0003 	stmia.w	r5, {r0, r1}
 801b2c0:	1d33      	adds	r3, r6, #4
 801b2c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b2c4:	6838      	ldr	r0, [r7, #0]
 801b2c6:	f008 fc07 	bl	8023ad8 <USB_DevInit>
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d005      	beq.n	801b2dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	2202      	movs	r2, #2
 801b2d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801b2d8:	2301      	movs	r3, #1
 801b2da:	e014      	b.n	801b306 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	2200      	movs	r2, #0
 801b2e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	2201      	movs	r2, #1
 801b2e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2f0:	2b01      	cmp	r3, #1
 801b2f2:	d102      	bne.n	801b2fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801b2f4:	6878      	ldr	r0, [r7, #4]
 801b2f6:	f000 f80b 	bl	801b310 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	4618      	mov	r0, r3
 801b300:	f008 fda9 	bl	8023e56 <USB_DevDisconnect>

  return HAL_OK;
 801b304:	2300      	movs	r3, #0
}
 801b306:	4618      	mov	r0, r3
 801b308:	3714      	adds	r7, #20
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b310 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b310:	b480      	push	{r7}
 801b312:	b085      	sub	sp, #20
 801b314:	af00      	add	r7, sp, #0
 801b316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	2201      	movs	r2, #1
 801b322:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	2200      	movs	r2, #0
 801b32a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	699b      	ldr	r3, [r3, #24]
 801b332:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b33e:	4b05      	ldr	r3, [pc, #20]	; (801b354 <HAL_PCDEx_ActivateLPM+0x44>)
 801b340:	4313      	orrs	r3, r2
 801b342:	68fa      	ldr	r2, [r7, #12]
 801b344:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 801b346:	2300      	movs	r3, #0
}
 801b348:	4618      	mov	r0, r3
 801b34a:	3714      	adds	r7, #20
 801b34c:	46bd      	mov	sp, r7
 801b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b352:	4770      	bx	lr
 801b354:	10000003 	.word	0x10000003

0801b358 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801b358:	b580      	push	{r7, lr}
 801b35a:	b084      	sub	sp, #16
 801b35c:	af00      	add	r7, sp, #0
 801b35e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801b360:	4b19      	ldr	r3, [pc, #100]	; (801b3c8 <HAL_PWREx_ConfigSupply+0x70>)
 801b362:	68db      	ldr	r3, [r3, #12]
 801b364:	f003 0304 	and.w	r3, r3, #4
 801b368:	2b04      	cmp	r3, #4
 801b36a:	d00a      	beq.n	801b382 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801b36c:	4b16      	ldr	r3, [pc, #88]	; (801b3c8 <HAL_PWREx_ConfigSupply+0x70>)
 801b36e:	68db      	ldr	r3, [r3, #12]
 801b370:	f003 0307 	and.w	r3, r3, #7
 801b374:	687a      	ldr	r2, [r7, #4]
 801b376:	429a      	cmp	r2, r3
 801b378:	d001      	beq.n	801b37e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801b37a:	2301      	movs	r3, #1
 801b37c:	e01f      	b.n	801b3be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801b37e:	2300      	movs	r3, #0
 801b380:	e01d      	b.n	801b3be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801b382:	4b11      	ldr	r3, [pc, #68]	; (801b3c8 <HAL_PWREx_ConfigSupply+0x70>)
 801b384:	68db      	ldr	r3, [r3, #12]
 801b386:	f023 0207 	bic.w	r2, r3, #7
 801b38a:	490f      	ldr	r1, [pc, #60]	; (801b3c8 <HAL_PWREx_ConfigSupply+0x70>)
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	4313      	orrs	r3, r2
 801b390:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801b392:	f7f9 fcaf 	bl	8014cf4 <HAL_GetTick>
 801b396:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b398:	e009      	b.n	801b3ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801b39a:	f7f9 fcab 	bl	8014cf4 <HAL_GetTick>
 801b39e:	4602      	mov	r2, r0
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	1ad3      	subs	r3, r2, r3
 801b3a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b3a8:	d901      	bls.n	801b3ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801b3aa:	2301      	movs	r3, #1
 801b3ac:	e007      	b.n	801b3be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b3ae:	4b06      	ldr	r3, [pc, #24]	; (801b3c8 <HAL_PWREx_ConfigSupply+0x70>)
 801b3b0:	685b      	ldr	r3, [r3, #4]
 801b3b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b3b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b3ba:	d1ee      	bne.n	801b39a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801b3bc:	2300      	movs	r3, #0
}
 801b3be:	4618      	mov	r0, r3
 801b3c0:	3710      	adds	r7, #16
 801b3c2:	46bd      	mov	sp, r7
 801b3c4:	bd80      	pop	{r7, pc}
 801b3c6:	bf00      	nop
 801b3c8:	58024800 	.word	0x58024800

0801b3cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 801b3cc:	b480      	push	{r7}
 801b3ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 801b3d0:	4b05      	ldr	r3, [pc, #20]	; (801b3e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 801b3d2:	68db      	ldr	r3, [r3, #12]
 801b3d4:	4a04      	ldr	r2, [pc, #16]	; (801b3e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 801b3d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b3da:	60d3      	str	r3, [r2, #12]
}
 801b3dc:	bf00      	nop
 801b3de:	46bd      	mov	sp, r7
 801b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e4:	4770      	bx	lr
 801b3e6:	bf00      	nop
 801b3e8:	58024800 	.word	0x58024800

0801b3ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b08c      	sub	sp, #48	; 0x30
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d101      	bne.n	801b3fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801b3fa:	2301      	movs	r3, #1
 801b3fc:	e3ff      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	f003 0301 	and.w	r3, r3, #1
 801b406:	2b00      	cmp	r3, #0
 801b408:	f000 8087 	beq.w	801b51a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b40c:	4b99      	ldr	r3, [pc, #612]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b40e:	691b      	ldr	r3, [r3, #16]
 801b410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b414:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b416:	4b97      	ldr	r3, [pc, #604]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b41a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801b41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b41e:	2b10      	cmp	r3, #16
 801b420:	d007      	beq.n	801b432 <HAL_RCC_OscConfig+0x46>
 801b422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b424:	2b18      	cmp	r3, #24
 801b426:	d110      	bne.n	801b44a <HAL_RCC_OscConfig+0x5e>
 801b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b42a:	f003 0303 	and.w	r3, r3, #3
 801b42e:	2b02      	cmp	r3, #2
 801b430:	d10b      	bne.n	801b44a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b432:	4b90      	ldr	r3, [pc, #576]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d06c      	beq.n	801b518 <HAL_RCC_OscConfig+0x12c>
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	685b      	ldr	r3, [r3, #4]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d168      	bne.n	801b518 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801b446:	2301      	movs	r3, #1
 801b448:	e3d9      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	685b      	ldr	r3, [r3, #4]
 801b44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b452:	d106      	bne.n	801b462 <HAL_RCC_OscConfig+0x76>
 801b454:	4b87      	ldr	r3, [pc, #540]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	4a86      	ldr	r2, [pc, #536]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b45a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b45e:	6013      	str	r3, [r2, #0]
 801b460:	e02e      	b.n	801b4c0 <HAL_RCC_OscConfig+0xd4>
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	685b      	ldr	r3, [r3, #4]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d10c      	bne.n	801b484 <HAL_RCC_OscConfig+0x98>
 801b46a:	4b82      	ldr	r3, [pc, #520]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	4a81      	ldr	r2, [pc, #516]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b474:	6013      	str	r3, [r2, #0]
 801b476:	4b7f      	ldr	r3, [pc, #508]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	4a7e      	ldr	r2, [pc, #504]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b47c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b480:	6013      	str	r3, [r2, #0]
 801b482:	e01d      	b.n	801b4c0 <HAL_RCC_OscConfig+0xd4>
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	685b      	ldr	r3, [r3, #4]
 801b488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801b48c:	d10c      	bne.n	801b4a8 <HAL_RCC_OscConfig+0xbc>
 801b48e:	4b79      	ldr	r3, [pc, #484]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b490:	681b      	ldr	r3, [r3, #0]
 801b492:	4a78      	ldr	r2, [pc, #480]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b498:	6013      	str	r3, [r2, #0]
 801b49a:	4b76      	ldr	r3, [pc, #472]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	4a75      	ldr	r2, [pc, #468]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b4a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b4a4:	6013      	str	r3, [r2, #0]
 801b4a6:	e00b      	b.n	801b4c0 <HAL_RCC_OscConfig+0xd4>
 801b4a8:	4b72      	ldr	r3, [pc, #456]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	4a71      	ldr	r2, [pc, #452]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b4ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b4b2:	6013      	str	r3, [r2, #0]
 801b4b4:	4b6f      	ldr	r3, [pc, #444]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	4a6e      	ldr	r2, [pc, #440]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b4ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b4be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	685b      	ldr	r3, [r3, #4]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d013      	beq.n	801b4f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4c8:	f7f9 fc14 	bl	8014cf4 <HAL_GetTick>
 801b4cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b4ce:	e008      	b.n	801b4e2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b4d0:	f7f9 fc10 	bl	8014cf4 <HAL_GetTick>
 801b4d4:	4602      	mov	r2, r0
 801b4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4d8:	1ad3      	subs	r3, r2, r3
 801b4da:	2b64      	cmp	r3, #100	; 0x64
 801b4dc:	d901      	bls.n	801b4e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801b4de:	2303      	movs	r3, #3
 801b4e0:	e38d      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b4e2:	4b64      	ldr	r3, [pc, #400]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d0f0      	beq.n	801b4d0 <HAL_RCC_OscConfig+0xe4>
 801b4ee:	e014      	b.n	801b51a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4f0:	f7f9 fc00 	bl	8014cf4 <HAL_GetTick>
 801b4f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b4f6:	e008      	b.n	801b50a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b4f8:	f7f9 fbfc 	bl	8014cf4 <HAL_GetTick>
 801b4fc:	4602      	mov	r2, r0
 801b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b500:	1ad3      	subs	r3, r2, r3
 801b502:	2b64      	cmp	r3, #100	; 0x64
 801b504:	d901      	bls.n	801b50a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801b506:	2303      	movs	r3, #3
 801b508:	e379      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b50a:	4b5a      	ldr	r3, [pc, #360]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b512:	2b00      	cmp	r3, #0
 801b514:	d1f0      	bne.n	801b4f8 <HAL_RCC_OscConfig+0x10c>
 801b516:	e000      	b.n	801b51a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	f003 0302 	and.w	r3, r3, #2
 801b522:	2b00      	cmp	r3, #0
 801b524:	f000 80ae 	beq.w	801b684 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b528:	4b52      	ldr	r3, [pc, #328]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b52a:	691b      	ldr	r3, [r3, #16]
 801b52c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b530:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b532:	4b50      	ldr	r3, [pc, #320]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b536:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801b538:	6a3b      	ldr	r3, [r7, #32]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d007      	beq.n	801b54e <HAL_RCC_OscConfig+0x162>
 801b53e:	6a3b      	ldr	r3, [r7, #32]
 801b540:	2b18      	cmp	r3, #24
 801b542:	d13a      	bne.n	801b5ba <HAL_RCC_OscConfig+0x1ce>
 801b544:	69fb      	ldr	r3, [r7, #28]
 801b546:	f003 0303 	and.w	r3, r3, #3
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d135      	bne.n	801b5ba <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b54e:	4b49      	ldr	r3, [pc, #292]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	f003 0304 	and.w	r3, r3, #4
 801b556:	2b00      	cmp	r3, #0
 801b558:	d005      	beq.n	801b566 <HAL_RCC_OscConfig+0x17a>
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	68db      	ldr	r3, [r3, #12]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d101      	bne.n	801b566 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801b562:	2301      	movs	r3, #1
 801b564:	e34b      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b566:	f7f9 fbf3 	bl	8014d50 <HAL_GetREVID>
 801b56a:	4602      	mov	r2, r0
 801b56c:	f241 0303 	movw	r3, #4099	; 0x1003
 801b570:	429a      	cmp	r2, r3
 801b572:	d817      	bhi.n	801b5a4 <HAL_RCC_OscConfig+0x1b8>
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	691b      	ldr	r3, [r3, #16]
 801b578:	2b40      	cmp	r3, #64	; 0x40
 801b57a:	d108      	bne.n	801b58e <HAL_RCC_OscConfig+0x1a2>
 801b57c:	4b3d      	ldr	r3, [pc, #244]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b57e:	685b      	ldr	r3, [r3, #4]
 801b580:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801b584:	4a3b      	ldr	r2, [pc, #236]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b58a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b58c:	e07a      	b.n	801b684 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b58e:	4b39      	ldr	r3, [pc, #228]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b590:	685b      	ldr	r3, [r3, #4]
 801b592:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	691b      	ldr	r3, [r3, #16]
 801b59a:	031b      	lsls	r3, r3, #12
 801b59c:	4935      	ldr	r1, [pc, #212]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b59e:	4313      	orrs	r3, r2
 801b5a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b5a2:	e06f      	b.n	801b684 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b5a4:	4b33      	ldr	r3, [pc, #204]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b5a6:	685b      	ldr	r3, [r3, #4]
 801b5a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	691b      	ldr	r3, [r3, #16]
 801b5b0:	061b      	lsls	r3, r3, #24
 801b5b2:	4930      	ldr	r1, [pc, #192]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b5b4:	4313      	orrs	r3, r2
 801b5b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b5b8:	e064      	b.n	801b684 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	68db      	ldr	r3, [r3, #12]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d045      	beq.n	801b64e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b5c2:	4b2c      	ldr	r3, [pc, #176]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	f023 0219 	bic.w	r2, r3, #25
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	68db      	ldr	r3, [r3, #12]
 801b5ce:	4929      	ldr	r1, [pc, #164]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b5d0:	4313      	orrs	r3, r2
 801b5d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5d4:	f7f9 fb8e 	bl	8014cf4 <HAL_GetTick>
 801b5d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b5da:	e008      	b.n	801b5ee <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b5dc:	f7f9 fb8a 	bl	8014cf4 <HAL_GetTick>
 801b5e0:	4602      	mov	r2, r0
 801b5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5e4:	1ad3      	subs	r3, r2, r3
 801b5e6:	2b02      	cmp	r3, #2
 801b5e8:	d901      	bls.n	801b5ee <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 801b5ea:	2303      	movs	r3, #3
 801b5ec:	e307      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b5ee:	4b21      	ldr	r3, [pc, #132]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	f003 0304 	and.w	r3, r3, #4
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d0f0      	beq.n	801b5dc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b5fa:	f7f9 fba9 	bl	8014d50 <HAL_GetREVID>
 801b5fe:	4602      	mov	r2, r0
 801b600:	f241 0303 	movw	r3, #4099	; 0x1003
 801b604:	429a      	cmp	r2, r3
 801b606:	d817      	bhi.n	801b638 <HAL_RCC_OscConfig+0x24c>
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	691b      	ldr	r3, [r3, #16]
 801b60c:	2b40      	cmp	r3, #64	; 0x40
 801b60e:	d108      	bne.n	801b622 <HAL_RCC_OscConfig+0x236>
 801b610:	4b18      	ldr	r3, [pc, #96]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b612:	685b      	ldr	r3, [r3, #4]
 801b614:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801b618:	4a16      	ldr	r2, [pc, #88]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b61a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b61e:	6053      	str	r3, [r2, #4]
 801b620:	e030      	b.n	801b684 <HAL_RCC_OscConfig+0x298>
 801b622:	4b14      	ldr	r3, [pc, #80]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b624:	685b      	ldr	r3, [r3, #4]
 801b626:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	691b      	ldr	r3, [r3, #16]
 801b62e:	031b      	lsls	r3, r3, #12
 801b630:	4910      	ldr	r1, [pc, #64]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b632:	4313      	orrs	r3, r2
 801b634:	604b      	str	r3, [r1, #4]
 801b636:	e025      	b.n	801b684 <HAL_RCC_OscConfig+0x298>
 801b638:	4b0e      	ldr	r3, [pc, #56]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b63a:	685b      	ldr	r3, [r3, #4]
 801b63c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	691b      	ldr	r3, [r3, #16]
 801b644:	061b      	lsls	r3, r3, #24
 801b646:	490b      	ldr	r1, [pc, #44]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b648:	4313      	orrs	r3, r2
 801b64a:	604b      	str	r3, [r1, #4]
 801b64c:	e01a      	b.n	801b684 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b64e:	4b09      	ldr	r3, [pc, #36]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	4a08      	ldr	r2, [pc, #32]	; (801b674 <HAL_RCC_OscConfig+0x288>)
 801b654:	f023 0301 	bic.w	r3, r3, #1
 801b658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b65a:	f7f9 fb4b 	bl	8014cf4 <HAL_GetTick>
 801b65e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b660:	e00a      	b.n	801b678 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b662:	f7f9 fb47 	bl	8014cf4 <HAL_GetTick>
 801b666:	4602      	mov	r2, r0
 801b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b66a:	1ad3      	subs	r3, r2, r3
 801b66c:	2b02      	cmp	r3, #2
 801b66e:	d903      	bls.n	801b678 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 801b670:	2303      	movs	r3, #3
 801b672:	e2c4      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
 801b674:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b678:	4ba4      	ldr	r3, [pc, #656]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	f003 0304 	and.w	r3, r3, #4
 801b680:	2b00      	cmp	r3, #0
 801b682:	d1ee      	bne.n	801b662 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	f003 0310 	and.w	r3, r3, #16
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	f000 80a9 	beq.w	801b7e4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b692:	4b9e      	ldr	r3, [pc, #632]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b694:	691b      	ldr	r3, [r3, #16]
 801b696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b69a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b69c:	4b9b      	ldr	r3, [pc, #620]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b6a2:	69bb      	ldr	r3, [r7, #24]
 801b6a4:	2b08      	cmp	r3, #8
 801b6a6:	d007      	beq.n	801b6b8 <HAL_RCC_OscConfig+0x2cc>
 801b6a8:	69bb      	ldr	r3, [r7, #24]
 801b6aa:	2b18      	cmp	r3, #24
 801b6ac:	d13a      	bne.n	801b724 <HAL_RCC_OscConfig+0x338>
 801b6ae:	697b      	ldr	r3, [r7, #20]
 801b6b0:	f003 0303 	and.w	r3, r3, #3
 801b6b4:	2b01      	cmp	r3, #1
 801b6b6:	d135      	bne.n	801b724 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b6b8:	4b94      	ldr	r3, [pc, #592]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d005      	beq.n	801b6d0 <HAL_RCC_OscConfig+0x2e4>
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	69db      	ldr	r3, [r3, #28]
 801b6c8:	2b80      	cmp	r3, #128	; 0x80
 801b6ca:	d001      	beq.n	801b6d0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 801b6cc:	2301      	movs	r3, #1
 801b6ce:	e296      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b6d0:	f7f9 fb3e 	bl	8014d50 <HAL_GetREVID>
 801b6d4:	4602      	mov	r2, r0
 801b6d6:	f241 0303 	movw	r3, #4099	; 0x1003
 801b6da:	429a      	cmp	r2, r3
 801b6dc:	d817      	bhi.n	801b70e <HAL_RCC_OscConfig+0x322>
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	6a1b      	ldr	r3, [r3, #32]
 801b6e2:	2b20      	cmp	r3, #32
 801b6e4:	d108      	bne.n	801b6f8 <HAL_RCC_OscConfig+0x30c>
 801b6e6:	4b89      	ldr	r3, [pc, #548]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b6e8:	685b      	ldr	r3, [r3, #4]
 801b6ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801b6ee:	4a87      	ldr	r2, [pc, #540]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b6f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b6f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b6f6:	e075      	b.n	801b7e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b6f8:	4b84      	ldr	r3, [pc, #528]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b6fa:	685b      	ldr	r3, [r3, #4]
 801b6fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	6a1b      	ldr	r3, [r3, #32]
 801b704:	069b      	lsls	r3, r3, #26
 801b706:	4981      	ldr	r1, [pc, #516]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b708:	4313      	orrs	r3, r2
 801b70a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b70c:	e06a      	b.n	801b7e4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b70e:	4b7f      	ldr	r3, [pc, #508]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b710:	68db      	ldr	r3, [r3, #12]
 801b712:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	6a1b      	ldr	r3, [r3, #32]
 801b71a:	061b      	lsls	r3, r3, #24
 801b71c:	497b      	ldr	r1, [pc, #492]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b71e:	4313      	orrs	r3, r2
 801b720:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b722:	e05f      	b.n	801b7e4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	69db      	ldr	r3, [r3, #28]
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d042      	beq.n	801b7b2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b72c:	4b77      	ldr	r3, [pc, #476]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	4a76      	ldr	r2, [pc, #472]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b738:	f7f9 fadc 	bl	8014cf4 <HAL_GetTick>
 801b73c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b73e:	e008      	b.n	801b752 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801b740:	f7f9 fad8 	bl	8014cf4 <HAL_GetTick>
 801b744:	4602      	mov	r2, r0
 801b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b748:	1ad3      	subs	r3, r2, r3
 801b74a:	2b02      	cmp	r3, #2
 801b74c:	d901      	bls.n	801b752 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 801b74e:	2303      	movs	r3, #3
 801b750:	e255      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b752:	4b6e      	ldr	r3, [pc, #440]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d0f0      	beq.n	801b740 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b75e:	f7f9 faf7 	bl	8014d50 <HAL_GetREVID>
 801b762:	4602      	mov	r2, r0
 801b764:	f241 0303 	movw	r3, #4099	; 0x1003
 801b768:	429a      	cmp	r2, r3
 801b76a:	d817      	bhi.n	801b79c <HAL_RCC_OscConfig+0x3b0>
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	6a1b      	ldr	r3, [r3, #32]
 801b770:	2b20      	cmp	r3, #32
 801b772:	d108      	bne.n	801b786 <HAL_RCC_OscConfig+0x39a>
 801b774:	4b65      	ldr	r3, [pc, #404]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b776:	685b      	ldr	r3, [r3, #4]
 801b778:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801b77c:	4a63      	ldr	r2, [pc, #396]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b77e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801b782:	6053      	str	r3, [r2, #4]
 801b784:	e02e      	b.n	801b7e4 <HAL_RCC_OscConfig+0x3f8>
 801b786:	4b61      	ldr	r3, [pc, #388]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b788:	685b      	ldr	r3, [r3, #4]
 801b78a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	6a1b      	ldr	r3, [r3, #32]
 801b792:	069b      	lsls	r3, r3, #26
 801b794:	495d      	ldr	r1, [pc, #372]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b796:	4313      	orrs	r3, r2
 801b798:	604b      	str	r3, [r1, #4]
 801b79a:	e023      	b.n	801b7e4 <HAL_RCC_OscConfig+0x3f8>
 801b79c:	4b5b      	ldr	r3, [pc, #364]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b79e:	68db      	ldr	r3, [r3, #12]
 801b7a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	6a1b      	ldr	r3, [r3, #32]
 801b7a8:	061b      	lsls	r3, r3, #24
 801b7aa:	4958      	ldr	r1, [pc, #352]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b7ac:	4313      	orrs	r3, r2
 801b7ae:	60cb      	str	r3, [r1, #12]
 801b7b0:	e018      	b.n	801b7e4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b7b2:	4b56      	ldr	r3, [pc, #344]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	4a55      	ldr	r2, [pc, #340]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b7b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b7bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b7be:	f7f9 fa99 	bl	8014cf4 <HAL_GetTick>
 801b7c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b7c4:	e008      	b.n	801b7d8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801b7c6:	f7f9 fa95 	bl	8014cf4 <HAL_GetTick>
 801b7ca:	4602      	mov	r2, r0
 801b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7ce:	1ad3      	subs	r3, r2, r3
 801b7d0:	2b02      	cmp	r3, #2
 801b7d2:	d901      	bls.n	801b7d8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 801b7d4:	2303      	movs	r3, #3
 801b7d6:	e212      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b7d8:	4b4c      	ldr	r3, [pc, #304]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d1f0      	bne.n	801b7c6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	f003 0308 	and.w	r3, r3, #8
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d036      	beq.n	801b85e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	695b      	ldr	r3, [r3, #20]
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d019      	beq.n	801b82c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b7f8:	4b44      	ldr	r3, [pc, #272]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b7fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b7fc:	4a43      	ldr	r2, [pc, #268]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b7fe:	f043 0301 	orr.w	r3, r3, #1
 801b802:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b804:	f7f9 fa76 	bl	8014cf4 <HAL_GetTick>
 801b808:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b80a:	e008      	b.n	801b81e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b80c:	f7f9 fa72 	bl	8014cf4 <HAL_GetTick>
 801b810:	4602      	mov	r2, r0
 801b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b814:	1ad3      	subs	r3, r2, r3
 801b816:	2b02      	cmp	r3, #2
 801b818:	d901      	bls.n	801b81e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 801b81a:	2303      	movs	r3, #3
 801b81c:	e1ef      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b81e:	4b3b      	ldr	r3, [pc, #236]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b822:	f003 0302 	and.w	r3, r3, #2
 801b826:	2b00      	cmp	r3, #0
 801b828:	d0f0      	beq.n	801b80c <HAL_RCC_OscConfig+0x420>
 801b82a:	e018      	b.n	801b85e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b82c:	4b37      	ldr	r3, [pc, #220]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b82e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b830:	4a36      	ldr	r2, [pc, #216]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b832:	f023 0301 	bic.w	r3, r3, #1
 801b836:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b838:	f7f9 fa5c 	bl	8014cf4 <HAL_GetTick>
 801b83c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b83e:	e008      	b.n	801b852 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b840:	f7f9 fa58 	bl	8014cf4 <HAL_GetTick>
 801b844:	4602      	mov	r2, r0
 801b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b848:	1ad3      	subs	r3, r2, r3
 801b84a:	2b02      	cmp	r3, #2
 801b84c:	d901      	bls.n	801b852 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 801b84e:	2303      	movs	r3, #3
 801b850:	e1d5      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b852:	4b2e      	ldr	r3, [pc, #184]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b856:	f003 0302 	and.w	r3, r3, #2
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d1f0      	bne.n	801b840 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	f003 0320 	and.w	r3, r3, #32
 801b866:	2b00      	cmp	r3, #0
 801b868:	d036      	beq.n	801b8d8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	699b      	ldr	r3, [r3, #24]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d019      	beq.n	801b8a6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b872:	4b26      	ldr	r3, [pc, #152]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	4a25      	ldr	r2, [pc, #148]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b878:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b87c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b87e:	f7f9 fa39 	bl	8014cf4 <HAL_GetTick>
 801b882:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b884:	e008      	b.n	801b898 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801b886:	f7f9 fa35 	bl	8014cf4 <HAL_GetTick>
 801b88a:	4602      	mov	r2, r0
 801b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b88e:	1ad3      	subs	r3, r2, r3
 801b890:	2b02      	cmp	r3, #2
 801b892:	d901      	bls.n	801b898 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 801b894:	2303      	movs	r3, #3
 801b896:	e1b2      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b898:	4b1c      	ldr	r3, [pc, #112]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d0f0      	beq.n	801b886 <HAL_RCC_OscConfig+0x49a>
 801b8a4:	e018      	b.n	801b8d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b8a6:	4b19      	ldr	r3, [pc, #100]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	4a18      	ldr	r2, [pc, #96]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b8ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b8b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b8b2:	f7f9 fa1f 	bl	8014cf4 <HAL_GetTick>
 801b8b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b8b8:	e008      	b.n	801b8cc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801b8ba:	f7f9 fa1b 	bl	8014cf4 <HAL_GetTick>
 801b8be:	4602      	mov	r2, r0
 801b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8c2:	1ad3      	subs	r3, r2, r3
 801b8c4:	2b02      	cmp	r3, #2
 801b8c6:	d901      	bls.n	801b8cc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 801b8c8:	2303      	movs	r3, #3
 801b8ca:	e198      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b8cc:	4b0f      	ldr	r3, [pc, #60]	; (801b90c <HAL_RCC_OscConfig+0x520>)
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d1f0      	bne.n	801b8ba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	f003 0304 	and.w	r3, r3, #4
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	f000 8085 	beq.w	801b9f0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801b8e6:	4b0a      	ldr	r3, [pc, #40]	; (801b910 <HAL_RCC_OscConfig+0x524>)
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	4a09      	ldr	r2, [pc, #36]	; (801b910 <HAL_RCC_OscConfig+0x524>)
 801b8ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b8f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b8f2:	f7f9 f9ff 	bl	8014cf4 <HAL_GetTick>
 801b8f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b8f8:	e00c      	b.n	801b914 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801b8fa:	f7f9 f9fb 	bl	8014cf4 <HAL_GetTick>
 801b8fe:	4602      	mov	r2, r0
 801b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b902:	1ad3      	subs	r3, r2, r3
 801b904:	2b64      	cmp	r3, #100	; 0x64
 801b906:	d905      	bls.n	801b914 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 801b908:	2303      	movs	r3, #3
 801b90a:	e178      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
 801b90c:	58024400 	.word	0x58024400
 801b910:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b914:	4b96      	ldr	r3, [pc, #600]	; (801bb70 <HAL_RCC_OscConfig+0x784>)
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d0ec      	beq.n	801b8fa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	689b      	ldr	r3, [r3, #8]
 801b924:	2b01      	cmp	r3, #1
 801b926:	d106      	bne.n	801b936 <HAL_RCC_OscConfig+0x54a>
 801b928:	4b92      	ldr	r3, [pc, #584]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b92c:	4a91      	ldr	r2, [pc, #580]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b92e:	f043 0301 	orr.w	r3, r3, #1
 801b932:	6713      	str	r3, [r2, #112]	; 0x70
 801b934:	e02d      	b.n	801b992 <HAL_RCC_OscConfig+0x5a6>
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	689b      	ldr	r3, [r3, #8]
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d10c      	bne.n	801b958 <HAL_RCC_OscConfig+0x56c>
 801b93e:	4b8d      	ldr	r3, [pc, #564]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b942:	4a8c      	ldr	r2, [pc, #560]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b944:	f023 0301 	bic.w	r3, r3, #1
 801b948:	6713      	str	r3, [r2, #112]	; 0x70
 801b94a:	4b8a      	ldr	r3, [pc, #552]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b94e:	4a89      	ldr	r2, [pc, #548]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b950:	f023 0304 	bic.w	r3, r3, #4
 801b954:	6713      	str	r3, [r2, #112]	; 0x70
 801b956:	e01c      	b.n	801b992 <HAL_RCC_OscConfig+0x5a6>
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	689b      	ldr	r3, [r3, #8]
 801b95c:	2b05      	cmp	r3, #5
 801b95e:	d10c      	bne.n	801b97a <HAL_RCC_OscConfig+0x58e>
 801b960:	4b84      	ldr	r3, [pc, #528]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b964:	4a83      	ldr	r2, [pc, #524]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b966:	f043 0304 	orr.w	r3, r3, #4
 801b96a:	6713      	str	r3, [r2, #112]	; 0x70
 801b96c:	4b81      	ldr	r3, [pc, #516]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b970:	4a80      	ldr	r2, [pc, #512]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b972:	f043 0301 	orr.w	r3, r3, #1
 801b976:	6713      	str	r3, [r2, #112]	; 0x70
 801b978:	e00b      	b.n	801b992 <HAL_RCC_OscConfig+0x5a6>
 801b97a:	4b7e      	ldr	r3, [pc, #504]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b97e:	4a7d      	ldr	r2, [pc, #500]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b980:	f023 0301 	bic.w	r3, r3, #1
 801b984:	6713      	str	r3, [r2, #112]	; 0x70
 801b986:	4b7b      	ldr	r3, [pc, #492]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b98a:	4a7a      	ldr	r2, [pc, #488]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b98c:	f023 0304 	bic.w	r3, r3, #4
 801b990:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	689b      	ldr	r3, [r3, #8]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d015      	beq.n	801b9c6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b99a:	f7f9 f9ab 	bl	8014cf4 <HAL_GetTick>
 801b99e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b9a0:	e00a      	b.n	801b9b8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b9a2:	f7f9 f9a7 	bl	8014cf4 <HAL_GetTick>
 801b9a6:	4602      	mov	r2, r0
 801b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9aa:	1ad3      	subs	r3, r2, r3
 801b9ac:	f241 3288 	movw	r2, #5000	; 0x1388
 801b9b0:	4293      	cmp	r3, r2
 801b9b2:	d901      	bls.n	801b9b8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 801b9b4:	2303      	movs	r3, #3
 801b9b6:	e122      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b9b8:	4b6e      	ldr	r3, [pc, #440]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9bc:	f003 0302 	and.w	r3, r3, #2
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d0ee      	beq.n	801b9a2 <HAL_RCC_OscConfig+0x5b6>
 801b9c4:	e014      	b.n	801b9f0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b9c6:	f7f9 f995 	bl	8014cf4 <HAL_GetTick>
 801b9ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b9cc:	e00a      	b.n	801b9e4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b9ce:	f7f9 f991 	bl	8014cf4 <HAL_GetTick>
 801b9d2:	4602      	mov	r2, r0
 801b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9d6:	1ad3      	subs	r3, r2, r3
 801b9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 801b9dc:	4293      	cmp	r3, r2
 801b9de:	d901      	bls.n	801b9e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 801b9e0:	2303      	movs	r3, #3
 801b9e2:	e10c      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b9e4:	4b63      	ldr	r3, [pc, #396]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9e8:	f003 0302 	and.w	r3, r3, #2
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d1ee      	bne.n	801b9ce <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	f000 8101 	beq.w	801bbfc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801b9fa:	4b5e      	ldr	r3, [pc, #376]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801b9fc:	691b      	ldr	r3, [r3, #16]
 801b9fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ba02:	2b18      	cmp	r3, #24
 801ba04:	f000 80bc 	beq.w	801bb80 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba0c:	2b02      	cmp	r3, #2
 801ba0e:	f040 8095 	bne.w	801bb3c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ba12:	4b58      	ldr	r3, [pc, #352]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	4a57      	ldr	r2, [pc, #348]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801ba18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ba1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ba1e:	f7f9 f969 	bl	8014cf4 <HAL_GetTick>
 801ba22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ba24:	e008      	b.n	801ba38 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ba26:	f7f9 f965 	bl	8014cf4 <HAL_GetTick>
 801ba2a:	4602      	mov	r2, r0
 801ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba2e:	1ad3      	subs	r3, r2, r3
 801ba30:	2b02      	cmp	r3, #2
 801ba32:	d901      	bls.n	801ba38 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 801ba34:	2303      	movs	r3, #3
 801ba36:	e0e2      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ba38:	4b4e      	ldr	r3, [pc, #312]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d1f0      	bne.n	801ba26 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801ba44:	4b4b      	ldr	r3, [pc, #300]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801ba46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ba48:	4b4b      	ldr	r3, [pc, #300]	; (801bb78 <HAL_RCC_OscConfig+0x78c>)
 801ba4a:	4013      	ands	r3, r2
 801ba4c:	687a      	ldr	r2, [r7, #4]
 801ba4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801ba50:	687a      	ldr	r2, [r7, #4]
 801ba52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801ba54:	0112      	lsls	r2, r2, #4
 801ba56:	430a      	orrs	r2, r1
 801ba58:	4946      	ldr	r1, [pc, #280]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801ba5a:	4313      	orrs	r3, r2
 801ba5c:	628b      	str	r3, [r1, #40]	; 0x28
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba62:	3b01      	subs	r3, #1
 801ba64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba6c:	3b01      	subs	r3, #1
 801ba6e:	025b      	lsls	r3, r3, #9
 801ba70:	b29b      	uxth	r3, r3
 801ba72:	431a      	orrs	r2, r3
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba78:	3b01      	subs	r3, #1
 801ba7a:	041b      	lsls	r3, r3, #16
 801ba7c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801ba80:	431a      	orrs	r2, r3
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ba86:	3b01      	subs	r3, #1
 801ba88:	061b      	lsls	r3, r3, #24
 801ba8a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801ba8e:	4939      	ldr	r1, [pc, #228]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801ba90:	4313      	orrs	r3, r2
 801ba92:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 801ba94:	4b37      	ldr	r3, [pc, #220]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801ba96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba98:	4a36      	ldr	r2, [pc, #216]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801ba9a:	f023 0301 	bic.w	r3, r3, #1
 801ba9e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801baa0:	4b34      	ldr	r3, [pc, #208]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801baa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801baa4:	4b35      	ldr	r3, [pc, #212]	; (801bb7c <HAL_RCC_OscConfig+0x790>)
 801baa6:	4013      	ands	r3, r2
 801baa8:	687a      	ldr	r2, [r7, #4]
 801baaa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801baac:	00d2      	lsls	r2, r2, #3
 801baae:	4931      	ldr	r1, [pc, #196]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bab0:	4313      	orrs	r3, r2
 801bab2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801bab4:	4b2f      	ldr	r3, [pc, #188]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bab8:	f023 020c 	bic.w	r2, r3, #12
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bac0:	492c      	ldr	r1, [pc, #176]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bac2:	4313      	orrs	r3, r2
 801bac4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801bac6:	4b2b      	ldr	r3, [pc, #172]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801baca:	f023 0202 	bic.w	r2, r3, #2
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bad2:	4928      	ldr	r1, [pc, #160]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bad4:	4313      	orrs	r3, r2
 801bad6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801bad8:	4b26      	ldr	r3, [pc, #152]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801badc:	4a25      	ldr	r2, [pc, #148]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bae4:	4b23      	ldr	r3, [pc, #140]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bae8:	4a22      	ldr	r2, [pc, #136]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801baea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801baee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801baf0:	4b20      	ldr	r3, [pc, #128]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801baf4:	4a1f      	ldr	r2, [pc, #124]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801baf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bafa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 801bafc:	4b1d      	ldr	r3, [pc, #116]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb00:	4a1c      	ldr	r2, [pc, #112]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bb02:	f043 0301 	orr.w	r3, r3, #1
 801bb06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bb08:	4b1a      	ldr	r3, [pc, #104]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	4a19      	ldr	r2, [pc, #100]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bb0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801bb12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb14:	f7f9 f8ee 	bl	8014cf4 <HAL_GetTick>
 801bb18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bb1a:	e008      	b.n	801bb2e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bb1c:	f7f9 f8ea 	bl	8014cf4 <HAL_GetTick>
 801bb20:	4602      	mov	r2, r0
 801bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb24:	1ad3      	subs	r3, r2, r3
 801bb26:	2b02      	cmp	r3, #2
 801bb28:	d901      	bls.n	801bb2e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 801bb2a:	2303      	movs	r3, #3
 801bb2c:	e067      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bb2e:	4b11      	ldr	r3, [pc, #68]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d0f0      	beq.n	801bb1c <HAL_RCC_OscConfig+0x730>
 801bb3a:	e05f      	b.n	801bbfc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bb3c:	4b0d      	ldr	r3, [pc, #52]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	4a0c      	ldr	r2, [pc, #48]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bb42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801bb46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bb48:	f7f9 f8d4 	bl	8014cf4 <HAL_GetTick>
 801bb4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bb4e:	e008      	b.n	801bb62 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bb50:	f7f9 f8d0 	bl	8014cf4 <HAL_GetTick>
 801bb54:	4602      	mov	r2, r0
 801bb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb58:	1ad3      	subs	r3, r2, r3
 801bb5a:	2b02      	cmp	r3, #2
 801bb5c:	d901      	bls.n	801bb62 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 801bb5e:	2303      	movs	r3, #3
 801bb60:	e04d      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bb62:	4b04      	ldr	r3, [pc, #16]	; (801bb74 <HAL_RCC_OscConfig+0x788>)
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d1f0      	bne.n	801bb50 <HAL_RCC_OscConfig+0x764>
 801bb6e:	e045      	b.n	801bbfc <HAL_RCC_OscConfig+0x810>
 801bb70:	58024800 	.word	0x58024800
 801bb74:	58024400 	.word	0x58024400
 801bb78:	fffffc0c 	.word	0xfffffc0c
 801bb7c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801bb80:	4b21      	ldr	r3, [pc, #132]	; (801bc08 <HAL_RCC_OscConfig+0x81c>)
 801bb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801bb86:	4b20      	ldr	r3, [pc, #128]	; (801bc08 <HAL_RCC_OscConfig+0x81c>)
 801bb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb8a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb90:	2b01      	cmp	r3, #1
 801bb92:	d031      	beq.n	801bbf8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bb94:	693b      	ldr	r3, [r7, #16]
 801bb96:	f003 0203 	and.w	r2, r3, #3
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801bb9e:	429a      	cmp	r2, r3
 801bba0:	d12a      	bne.n	801bbf8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801bba2:	693b      	ldr	r3, [r7, #16]
 801bba4:	091b      	lsrs	r3, r3, #4
 801bba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	d122      	bne.n	801bbf8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801bbbe:	429a      	cmp	r2, r3
 801bbc0:	d11a      	bne.n	801bbf8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	0a5b      	lsrs	r3, r3, #9
 801bbc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801bbd0:	429a      	cmp	r2, r3
 801bbd2:	d111      	bne.n	801bbf8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	0c1b      	lsrs	r3, r3, #16
 801bbd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbe0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801bbe2:	429a      	cmp	r2, r3
 801bbe4:	d108      	bne.n	801bbf8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801bbe6:	68fb      	ldr	r3, [r7, #12]
 801bbe8:	0e1b      	lsrs	r3, r3, #24
 801bbea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bbf2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801bbf4:	429a      	cmp	r2, r3
 801bbf6:	d001      	beq.n	801bbfc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 801bbf8:	2301      	movs	r3, #1
 801bbfa:	e000      	b.n	801bbfe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 801bbfc:	2300      	movs	r3, #0
}
 801bbfe:	4618      	mov	r0, r3
 801bc00:	3730      	adds	r7, #48	; 0x30
 801bc02:	46bd      	mov	sp, r7
 801bc04:	bd80      	pop	{r7, pc}
 801bc06:	bf00      	nop
 801bc08:	58024400 	.word	0x58024400

0801bc0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b086      	sub	sp, #24
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	6078      	str	r0, [r7, #4]
 801bc14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d101      	bne.n	801bc20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801bc1c:	2301      	movs	r3, #1
 801bc1e:	e19c      	b.n	801bf5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801bc20:	4b8a      	ldr	r3, [pc, #552]	; (801be4c <HAL_RCC_ClockConfig+0x240>)
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	f003 030f 	and.w	r3, r3, #15
 801bc28:	683a      	ldr	r2, [r7, #0]
 801bc2a:	429a      	cmp	r2, r3
 801bc2c:	d910      	bls.n	801bc50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bc2e:	4b87      	ldr	r3, [pc, #540]	; (801be4c <HAL_RCC_ClockConfig+0x240>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	f023 020f 	bic.w	r2, r3, #15
 801bc36:	4985      	ldr	r1, [pc, #532]	; (801be4c <HAL_RCC_ClockConfig+0x240>)
 801bc38:	683b      	ldr	r3, [r7, #0]
 801bc3a:	4313      	orrs	r3, r2
 801bc3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801bc3e:	4b83      	ldr	r3, [pc, #524]	; (801be4c <HAL_RCC_ClockConfig+0x240>)
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	f003 030f 	and.w	r3, r3, #15
 801bc46:	683a      	ldr	r2, [r7, #0]
 801bc48:	429a      	cmp	r2, r3
 801bc4a:	d001      	beq.n	801bc50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801bc4c:	2301      	movs	r3, #1
 801bc4e:	e184      	b.n	801bf5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	f003 0304 	and.w	r3, r3, #4
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d010      	beq.n	801bc7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	691a      	ldr	r2, [r3, #16]
 801bc60:	4b7b      	ldr	r3, [pc, #492]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bc62:	699b      	ldr	r3, [r3, #24]
 801bc64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bc68:	429a      	cmp	r2, r3
 801bc6a:	d908      	bls.n	801bc7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801bc6c:	4b78      	ldr	r3, [pc, #480]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bc6e:	699b      	ldr	r3, [r3, #24]
 801bc70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	691b      	ldr	r3, [r3, #16]
 801bc78:	4975      	ldr	r1, [pc, #468]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bc7a:	4313      	orrs	r3, r2
 801bc7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	f003 0308 	and.w	r3, r3, #8
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d010      	beq.n	801bcac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	695a      	ldr	r2, [r3, #20]
 801bc8e:	4b70      	ldr	r3, [pc, #448]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bc90:	69db      	ldr	r3, [r3, #28]
 801bc92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bc96:	429a      	cmp	r2, r3
 801bc98:	d908      	bls.n	801bcac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801bc9a:	4b6d      	ldr	r3, [pc, #436]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bc9c:	69db      	ldr	r3, [r3, #28]
 801bc9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	695b      	ldr	r3, [r3, #20]
 801bca6:	496a      	ldr	r1, [pc, #424]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bca8:	4313      	orrs	r3, r2
 801bcaa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	f003 0310 	and.w	r3, r3, #16
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d010      	beq.n	801bcda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	699a      	ldr	r2, [r3, #24]
 801bcbc:	4b64      	ldr	r3, [pc, #400]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bcbe:	69db      	ldr	r3, [r3, #28]
 801bcc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801bcc4:	429a      	cmp	r2, r3
 801bcc6:	d908      	bls.n	801bcda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801bcc8:	4b61      	ldr	r3, [pc, #388]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bcca:	69db      	ldr	r3, [r3, #28]
 801bccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	699b      	ldr	r3, [r3, #24]
 801bcd4:	495e      	ldr	r1, [pc, #376]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bcd6:	4313      	orrs	r3, r2
 801bcd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	f003 0320 	and.w	r3, r3, #32
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d010      	beq.n	801bd08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	69da      	ldr	r2, [r3, #28]
 801bcea:	4b59      	ldr	r3, [pc, #356]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bcec:	6a1b      	ldr	r3, [r3, #32]
 801bcee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bcf2:	429a      	cmp	r2, r3
 801bcf4:	d908      	bls.n	801bd08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801bcf6:	4b56      	ldr	r3, [pc, #344]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bcf8:	6a1b      	ldr	r3, [r3, #32]
 801bcfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	69db      	ldr	r3, [r3, #28]
 801bd02:	4953      	ldr	r1, [pc, #332]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd04:	4313      	orrs	r3, r2
 801bd06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	f003 0302 	and.w	r3, r3, #2
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d010      	beq.n	801bd36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	68da      	ldr	r2, [r3, #12]
 801bd18:	4b4d      	ldr	r3, [pc, #308]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd1a:	699b      	ldr	r3, [r3, #24]
 801bd1c:	f003 030f 	and.w	r3, r3, #15
 801bd20:	429a      	cmp	r2, r3
 801bd22:	d908      	bls.n	801bd36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bd24:	4b4a      	ldr	r3, [pc, #296]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd26:	699b      	ldr	r3, [r3, #24]
 801bd28:	f023 020f 	bic.w	r2, r3, #15
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	68db      	ldr	r3, [r3, #12]
 801bd30:	4947      	ldr	r1, [pc, #284]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd32:	4313      	orrs	r3, r2
 801bd34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	f003 0301 	and.w	r3, r3, #1
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d055      	beq.n	801bdee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801bd42:	4b43      	ldr	r3, [pc, #268]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd44:	699b      	ldr	r3, [r3, #24]
 801bd46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	689b      	ldr	r3, [r3, #8]
 801bd4e:	4940      	ldr	r1, [pc, #256]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd50:	4313      	orrs	r3, r2
 801bd52:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	685b      	ldr	r3, [r3, #4]
 801bd58:	2b02      	cmp	r3, #2
 801bd5a:	d107      	bne.n	801bd6c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bd5c:	4b3c      	ldr	r3, [pc, #240]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d121      	bne.n	801bdac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801bd68:	2301      	movs	r3, #1
 801bd6a:	e0f6      	b.n	801bf5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	685b      	ldr	r3, [r3, #4]
 801bd70:	2b03      	cmp	r3, #3
 801bd72:	d107      	bne.n	801bd84 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bd74:	4b36      	ldr	r3, [pc, #216]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d115      	bne.n	801bdac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801bd80:	2301      	movs	r3, #1
 801bd82:	e0ea      	b.n	801bf5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	685b      	ldr	r3, [r3, #4]
 801bd88:	2b01      	cmp	r3, #1
 801bd8a:	d107      	bne.n	801bd9c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801bd8c:	4b30      	ldr	r3, [pc, #192]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d109      	bne.n	801bdac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801bd98:	2301      	movs	r3, #1
 801bd9a:	e0de      	b.n	801bf5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bd9c:	4b2c      	ldr	r3, [pc, #176]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	f003 0304 	and.w	r3, r3, #4
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d101      	bne.n	801bdac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801bda8:	2301      	movs	r3, #1
 801bdaa:	e0d6      	b.n	801bf5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801bdac:	4b28      	ldr	r3, [pc, #160]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bdae:	691b      	ldr	r3, [r3, #16]
 801bdb0:	f023 0207 	bic.w	r2, r3, #7
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	4925      	ldr	r1, [pc, #148]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bdba:	4313      	orrs	r3, r2
 801bdbc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bdbe:	f7f8 ff99 	bl	8014cf4 <HAL_GetTick>
 801bdc2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bdc4:	e00a      	b.n	801bddc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bdc6:	f7f8 ff95 	bl	8014cf4 <HAL_GetTick>
 801bdca:	4602      	mov	r2, r0
 801bdcc:	697b      	ldr	r3, [r7, #20]
 801bdce:	1ad3      	subs	r3, r2, r3
 801bdd0:	f241 3288 	movw	r2, #5000	; 0x1388
 801bdd4:	4293      	cmp	r3, r2
 801bdd6:	d901      	bls.n	801bddc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801bdd8:	2303      	movs	r3, #3
 801bdda:	e0be      	b.n	801bf5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801bddc:	4b1c      	ldr	r3, [pc, #112]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801bdde:	691b      	ldr	r3, [r3, #16]
 801bde0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	685b      	ldr	r3, [r3, #4]
 801bde8:	00db      	lsls	r3, r3, #3
 801bdea:	429a      	cmp	r2, r3
 801bdec:	d1eb      	bne.n	801bdc6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	f003 0302 	and.w	r3, r3, #2
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d010      	beq.n	801be1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	68da      	ldr	r2, [r3, #12]
 801bdfe:	4b14      	ldr	r3, [pc, #80]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801be00:	699b      	ldr	r3, [r3, #24]
 801be02:	f003 030f 	and.w	r3, r3, #15
 801be06:	429a      	cmp	r2, r3
 801be08:	d208      	bcs.n	801be1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801be0a:	4b11      	ldr	r3, [pc, #68]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801be0c:	699b      	ldr	r3, [r3, #24]
 801be0e:	f023 020f 	bic.w	r2, r3, #15
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	68db      	ldr	r3, [r3, #12]
 801be16:	490e      	ldr	r1, [pc, #56]	; (801be50 <HAL_RCC_ClockConfig+0x244>)
 801be18:	4313      	orrs	r3, r2
 801be1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801be1c:	4b0b      	ldr	r3, [pc, #44]	; (801be4c <HAL_RCC_ClockConfig+0x240>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	f003 030f 	and.w	r3, r3, #15
 801be24:	683a      	ldr	r2, [r7, #0]
 801be26:	429a      	cmp	r2, r3
 801be28:	d214      	bcs.n	801be54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801be2a:	4b08      	ldr	r3, [pc, #32]	; (801be4c <HAL_RCC_ClockConfig+0x240>)
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	f023 020f 	bic.w	r2, r3, #15
 801be32:	4906      	ldr	r1, [pc, #24]	; (801be4c <HAL_RCC_ClockConfig+0x240>)
 801be34:	683b      	ldr	r3, [r7, #0]
 801be36:	4313      	orrs	r3, r2
 801be38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801be3a:	4b04      	ldr	r3, [pc, #16]	; (801be4c <HAL_RCC_ClockConfig+0x240>)
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	f003 030f 	and.w	r3, r3, #15
 801be42:	683a      	ldr	r2, [r7, #0]
 801be44:	429a      	cmp	r2, r3
 801be46:	d005      	beq.n	801be54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801be48:	2301      	movs	r3, #1
 801be4a:	e086      	b.n	801bf5a <HAL_RCC_ClockConfig+0x34e>
 801be4c:	52002000 	.word	0x52002000
 801be50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	f003 0304 	and.w	r3, r3, #4
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d010      	beq.n	801be82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	691a      	ldr	r2, [r3, #16]
 801be64:	4b3f      	ldr	r3, [pc, #252]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801be66:	699b      	ldr	r3, [r3, #24]
 801be68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801be6c:	429a      	cmp	r2, r3
 801be6e:	d208      	bcs.n	801be82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801be70:	4b3c      	ldr	r3, [pc, #240]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801be72:	699b      	ldr	r3, [r3, #24]
 801be74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	691b      	ldr	r3, [r3, #16]
 801be7c:	4939      	ldr	r1, [pc, #228]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801be7e:	4313      	orrs	r3, r2
 801be80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	f003 0308 	and.w	r3, r3, #8
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d010      	beq.n	801beb0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	695a      	ldr	r2, [r3, #20]
 801be92:	4b34      	ldr	r3, [pc, #208]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801be94:	69db      	ldr	r3, [r3, #28]
 801be96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801be9a:	429a      	cmp	r2, r3
 801be9c:	d208      	bcs.n	801beb0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801be9e:	4b31      	ldr	r3, [pc, #196]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801bea0:	69db      	ldr	r3, [r3, #28]
 801bea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	695b      	ldr	r3, [r3, #20]
 801beaa:	492e      	ldr	r1, [pc, #184]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801beac:	4313      	orrs	r3, r2
 801beae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	f003 0310 	and.w	r3, r3, #16
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d010      	beq.n	801bede <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	699a      	ldr	r2, [r3, #24]
 801bec0:	4b28      	ldr	r3, [pc, #160]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801bec2:	69db      	ldr	r3, [r3, #28]
 801bec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801bec8:	429a      	cmp	r2, r3
 801beca:	d208      	bcs.n	801bede <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801becc:	4b25      	ldr	r3, [pc, #148]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801bece:	69db      	ldr	r3, [r3, #28]
 801bed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	699b      	ldr	r3, [r3, #24]
 801bed8:	4922      	ldr	r1, [pc, #136]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801beda:	4313      	orrs	r3, r2
 801bedc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	f003 0320 	and.w	r3, r3, #32
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d010      	beq.n	801bf0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	69da      	ldr	r2, [r3, #28]
 801beee:	4b1d      	ldr	r3, [pc, #116]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801bef0:	6a1b      	ldr	r3, [r3, #32]
 801bef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801bef6:	429a      	cmp	r2, r3
 801bef8:	d208      	bcs.n	801bf0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801befa:	4b1a      	ldr	r3, [pc, #104]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801befc:	6a1b      	ldr	r3, [r3, #32]
 801befe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	69db      	ldr	r3, [r3, #28]
 801bf06:	4917      	ldr	r1, [pc, #92]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801bf08:	4313      	orrs	r3, r2
 801bf0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801bf0c:	f000 f834 	bl	801bf78 <HAL_RCC_GetSysClockFreq>
 801bf10:	4601      	mov	r1, r0
 801bf12:	4b14      	ldr	r3, [pc, #80]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801bf14:	699b      	ldr	r3, [r3, #24]
 801bf16:	0a1b      	lsrs	r3, r3, #8
 801bf18:	f003 030f 	and.w	r3, r3, #15
 801bf1c:	4a12      	ldr	r2, [pc, #72]	; (801bf68 <HAL_RCC_ClockConfig+0x35c>)
 801bf1e:	5cd3      	ldrb	r3, [r2, r3]
 801bf20:	f003 031f 	and.w	r3, r3, #31
 801bf24:	fa21 f303 	lsr.w	r3, r1, r3
 801bf28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bf2a:	4b0e      	ldr	r3, [pc, #56]	; (801bf64 <HAL_RCC_ClockConfig+0x358>)
 801bf2c:	699b      	ldr	r3, [r3, #24]
 801bf2e:	f003 030f 	and.w	r3, r3, #15
 801bf32:	4a0d      	ldr	r2, [pc, #52]	; (801bf68 <HAL_RCC_ClockConfig+0x35c>)
 801bf34:	5cd3      	ldrb	r3, [r2, r3]
 801bf36:	f003 031f 	and.w	r3, r3, #31
 801bf3a:	693a      	ldr	r2, [r7, #16]
 801bf3c:	fa22 f303 	lsr.w	r3, r2, r3
 801bf40:	4a0a      	ldr	r2, [pc, #40]	; (801bf6c <HAL_RCC_ClockConfig+0x360>)
 801bf42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bf44:	4a0a      	ldr	r2, [pc, #40]	; (801bf70 <HAL_RCC_ClockConfig+0x364>)
 801bf46:	693b      	ldr	r3, [r7, #16]
 801bf48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 801bf4a:	4b0a      	ldr	r3, [pc, #40]	; (801bf74 <HAL_RCC_ClockConfig+0x368>)
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	4618      	mov	r0, r3
 801bf50:	f7f7 faee 	bl	8013530 <HAL_InitTick>
 801bf54:	4603      	mov	r3, r0
 801bf56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801bf58:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	3718      	adds	r7, #24
 801bf5e:	46bd      	mov	sp, r7
 801bf60:	bd80      	pop	{r7, pc}
 801bf62:	bf00      	nop
 801bf64:	58024400 	.word	0x58024400
 801bf68:	0802fc1c 	.word	0x0802fc1c
 801bf6c:	2400065c 	.word	0x2400065c
 801bf70:	24000658 	.word	0x24000658
 801bf74:	24000660 	.word	0x24000660

0801bf78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bf78:	b480      	push	{r7}
 801bf7a:	b089      	sub	sp, #36	; 0x24
 801bf7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801bf7e:	4baf      	ldr	r3, [pc, #700]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bf80:	691b      	ldr	r3, [r3, #16]
 801bf82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801bf86:	2b18      	cmp	r3, #24
 801bf88:	f200 814e 	bhi.w	801c228 <HAL_RCC_GetSysClockFreq+0x2b0>
 801bf8c:	a201      	add	r2, pc, #4	; (adr r2, 801bf94 <HAL_RCC_GetSysClockFreq+0x1c>)
 801bf8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf92:	bf00      	nop
 801bf94:	0801bff9 	.word	0x0801bff9
 801bf98:	0801c229 	.word	0x0801c229
 801bf9c:	0801c229 	.word	0x0801c229
 801bfa0:	0801c229 	.word	0x0801c229
 801bfa4:	0801c229 	.word	0x0801c229
 801bfa8:	0801c229 	.word	0x0801c229
 801bfac:	0801c229 	.word	0x0801c229
 801bfb0:	0801c229 	.word	0x0801c229
 801bfb4:	0801c01f 	.word	0x0801c01f
 801bfb8:	0801c229 	.word	0x0801c229
 801bfbc:	0801c229 	.word	0x0801c229
 801bfc0:	0801c229 	.word	0x0801c229
 801bfc4:	0801c229 	.word	0x0801c229
 801bfc8:	0801c229 	.word	0x0801c229
 801bfcc:	0801c229 	.word	0x0801c229
 801bfd0:	0801c229 	.word	0x0801c229
 801bfd4:	0801c025 	.word	0x0801c025
 801bfd8:	0801c229 	.word	0x0801c229
 801bfdc:	0801c229 	.word	0x0801c229
 801bfe0:	0801c229 	.word	0x0801c229
 801bfe4:	0801c229 	.word	0x0801c229
 801bfe8:	0801c229 	.word	0x0801c229
 801bfec:	0801c229 	.word	0x0801c229
 801bff0:	0801c229 	.word	0x0801c229
 801bff4:	0801c02b 	.word	0x0801c02b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bff8:	4b90      	ldr	r3, [pc, #576]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	f003 0320 	and.w	r3, r3, #32
 801c000:	2b00      	cmp	r3, #0
 801c002:	d009      	beq.n	801c018 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801c004:	4b8d      	ldr	r3, [pc, #564]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	08db      	lsrs	r3, r3, #3
 801c00a:	f003 0303 	and.w	r3, r3, #3
 801c00e:	4a8c      	ldr	r2, [pc, #560]	; (801c240 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801c010:	fa22 f303 	lsr.w	r3, r2, r3
 801c014:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 801c016:	e10a      	b.n	801c22e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c018:	4b89      	ldr	r3, [pc, #548]	; (801c240 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801c01a:	61bb      	str	r3, [r7, #24]
    break;
 801c01c:	e107      	b.n	801c22e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801c01e:	4b89      	ldr	r3, [pc, #548]	; (801c244 <HAL_RCC_GetSysClockFreq+0x2cc>)
 801c020:	61bb      	str	r3, [r7, #24]
    break;
 801c022:	e104      	b.n	801c22e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 801c024:	4b88      	ldr	r3, [pc, #544]	; (801c248 <HAL_RCC_GetSysClockFreq+0x2d0>)
 801c026:	61bb      	str	r3, [r7, #24]
    break;
 801c028:	e101      	b.n	801c22e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c02a:	4b84      	ldr	r3, [pc, #528]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c02e:	f003 0303 	and.w	r3, r3, #3
 801c032:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 801c034:	4b81      	ldr	r3, [pc, #516]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c038:	091b      	lsrs	r3, r3, #4
 801c03a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c03e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801c040:	4b7e      	ldr	r3, [pc, #504]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c044:	f003 0301 	and.w	r3, r3, #1
 801c048:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801c04a:	4b7c      	ldr	r3, [pc, #496]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c04e:	08db      	lsrs	r3, r3, #3
 801c050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c054:	68fa      	ldr	r2, [r7, #12]
 801c056:	fb02 f303 	mul.w	r3, r2, r3
 801c05a:	ee07 3a90 	vmov	s15, r3
 801c05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c062:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 801c066:	693b      	ldr	r3, [r7, #16]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	f000 80da 	beq.w	801c222 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 801c06e:	697b      	ldr	r3, [r7, #20]
 801c070:	2b01      	cmp	r3, #1
 801c072:	d05a      	beq.n	801c12a <HAL_RCC_GetSysClockFreq+0x1b2>
 801c074:	2b01      	cmp	r3, #1
 801c076:	d302      	bcc.n	801c07e <HAL_RCC_GetSysClockFreq+0x106>
 801c078:	2b02      	cmp	r3, #2
 801c07a:	d078      	beq.n	801c16e <HAL_RCC_GetSysClockFreq+0x1f6>
 801c07c:	e099      	b.n	801c1b2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c07e:	4b6f      	ldr	r3, [pc, #444]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	f003 0320 	and.w	r3, r3, #32
 801c086:	2b00      	cmp	r3, #0
 801c088:	d02d      	beq.n	801c0e6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801c08a:	4b6c      	ldr	r3, [pc, #432]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	08db      	lsrs	r3, r3, #3
 801c090:	f003 0303 	and.w	r3, r3, #3
 801c094:	4a6a      	ldr	r2, [pc, #424]	; (801c240 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801c096:	fa22 f303 	lsr.w	r3, r2, r3
 801c09a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	ee07 3a90 	vmov	s15, r3
 801c0a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c0a6:	693b      	ldr	r3, [r7, #16]
 801c0a8:	ee07 3a90 	vmov	s15, r3
 801c0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c0b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c0b4:	4b61      	ldr	r3, [pc, #388]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c0bc:	ee07 3a90 	vmov	s15, r3
 801c0c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c0c4:	ed97 6a02 	vldr	s12, [r7, #8]
 801c0c8:	eddf 5a60 	vldr	s11, [pc, #384]	; 801c24c <HAL_RCC_GetSysClockFreq+0x2d4>
 801c0cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c0d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c0d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c0d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c0dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c0e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 801c0e4:	e087      	b.n	801c1f6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801c0e6:	693b      	ldr	r3, [r7, #16]
 801c0e8:	ee07 3a90 	vmov	s15, r3
 801c0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c0f0:	eddf 6a57 	vldr	s13, [pc, #348]	; 801c250 <HAL_RCC_GetSysClockFreq+0x2d8>
 801c0f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c0f8:	4b50      	ldr	r3, [pc, #320]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c100:	ee07 3a90 	vmov	s15, r3
 801c104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c108:	ed97 6a02 	vldr	s12, [r7, #8]
 801c10c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 801c24c <HAL_RCC_GetSysClockFreq+0x2d4>
 801c110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c11c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c120:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c124:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801c128:	e065      	b.n	801c1f6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801c12a:	693b      	ldr	r3, [r7, #16]
 801c12c:	ee07 3a90 	vmov	s15, r3
 801c130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c134:	eddf 6a47 	vldr	s13, [pc, #284]	; 801c254 <HAL_RCC_GetSysClockFreq+0x2dc>
 801c138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c13c:	4b3f      	ldr	r3, [pc, #252]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c144:	ee07 3a90 	vmov	s15, r3
 801c148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c14c:	ed97 6a02 	vldr	s12, [r7, #8]
 801c150:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801c24c <HAL_RCC_GetSysClockFreq+0x2d4>
 801c154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c15c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c164:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c168:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801c16c:	e043      	b.n	801c1f6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801c16e:	693b      	ldr	r3, [r7, #16]
 801c170:	ee07 3a90 	vmov	s15, r3
 801c174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c178:	eddf 6a37 	vldr	s13, [pc, #220]	; 801c258 <HAL_RCC_GetSysClockFreq+0x2e0>
 801c17c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c180:	4b2e      	ldr	r3, [pc, #184]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c188:	ee07 3a90 	vmov	s15, r3
 801c18c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c190:	ed97 6a02 	vldr	s12, [r7, #8]
 801c194:	eddf 5a2d 	vldr	s11, [pc, #180]	; 801c24c <HAL_RCC_GetSysClockFreq+0x2d4>
 801c198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c19c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c1a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c1ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801c1b0:	e021      	b.n	801c1f6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801c1b2:	693b      	ldr	r3, [r7, #16]
 801c1b4:	ee07 3a90 	vmov	s15, r3
 801c1b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c1bc:	eddf 6a25 	vldr	s13, [pc, #148]	; 801c254 <HAL_RCC_GetSysClockFreq+0x2dc>
 801c1c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c1c4:	4b1d      	ldr	r3, [pc, #116]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c1cc:	ee07 3a90 	vmov	s15, r3
 801c1d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c1d4:	ed97 6a02 	vldr	s12, [r7, #8]
 801c1d8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 801c24c <HAL_RCC_GetSysClockFreq+0x2d4>
 801c1dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c1e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c1e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c1ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c1f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801c1f4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 801c1f6:	4b11      	ldr	r3, [pc, #68]	; (801c23c <HAL_RCC_GetSysClockFreq+0x2c4>)
 801c1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1fa:	0a5b      	lsrs	r3, r3, #9
 801c1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c200:	3301      	adds	r3, #1
 801c202:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 801c204:	683b      	ldr	r3, [r7, #0]
 801c206:	ee07 3a90 	vmov	s15, r3
 801c20a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c20e:	edd7 6a07 	vldr	s13, [r7, #28]
 801c212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c21a:	ee17 3a90 	vmov	r3, s15
 801c21e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801c220:	e005      	b.n	801c22e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 801c222:	2300      	movs	r3, #0
 801c224:	61bb      	str	r3, [r7, #24]
    break;
 801c226:	e002      	b.n	801c22e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 801c228:	4b06      	ldr	r3, [pc, #24]	; (801c244 <HAL_RCC_GetSysClockFreq+0x2cc>)
 801c22a:	61bb      	str	r3, [r7, #24]
    break;
 801c22c:	bf00      	nop
  }

  return sysclockfreq;
 801c22e:	69bb      	ldr	r3, [r7, #24]
}
 801c230:	4618      	mov	r0, r3
 801c232:	3724      	adds	r7, #36	; 0x24
 801c234:	46bd      	mov	sp, r7
 801c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c23a:	4770      	bx	lr
 801c23c:	58024400 	.word	0x58024400
 801c240:	03d09000 	.word	0x03d09000
 801c244:	003d0900 	.word	0x003d0900
 801c248:	007a1200 	.word	0x007a1200
 801c24c:	46000000 	.word	0x46000000
 801c250:	4c742400 	.word	0x4c742400
 801c254:	4a742400 	.word	0x4a742400
 801c258:	4af42400 	.word	0x4af42400

0801c25c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c25c:	b580      	push	{r7, lr}
 801c25e:	b082      	sub	sp, #8
 801c260:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c262:	f7ff fe89 	bl	801bf78 <HAL_RCC_GetSysClockFreq>
 801c266:	4601      	mov	r1, r0
 801c268:	4b10      	ldr	r3, [pc, #64]	; (801c2ac <HAL_RCC_GetHCLKFreq+0x50>)
 801c26a:	699b      	ldr	r3, [r3, #24]
 801c26c:	0a1b      	lsrs	r3, r3, #8
 801c26e:	f003 030f 	and.w	r3, r3, #15
 801c272:	4a0f      	ldr	r2, [pc, #60]	; (801c2b0 <HAL_RCC_GetHCLKFreq+0x54>)
 801c274:	5cd3      	ldrb	r3, [r2, r3]
 801c276:	f003 031f 	and.w	r3, r3, #31
 801c27a:	fa21 f303 	lsr.w	r3, r1, r3
 801c27e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c280:	4b0a      	ldr	r3, [pc, #40]	; (801c2ac <HAL_RCC_GetHCLKFreq+0x50>)
 801c282:	699b      	ldr	r3, [r3, #24]
 801c284:	f003 030f 	and.w	r3, r3, #15
 801c288:	4a09      	ldr	r2, [pc, #36]	; (801c2b0 <HAL_RCC_GetHCLKFreq+0x54>)
 801c28a:	5cd3      	ldrb	r3, [r2, r3]
 801c28c:	f003 031f 	and.w	r3, r3, #31
 801c290:	687a      	ldr	r2, [r7, #4]
 801c292:	fa22 f303 	lsr.w	r3, r2, r3
 801c296:	4a07      	ldr	r2, [pc, #28]	; (801c2b4 <HAL_RCC_GetHCLKFreq+0x58>)
 801c298:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c29a:	4a07      	ldr	r2, [pc, #28]	; (801c2b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801c2a0:	4b04      	ldr	r3, [pc, #16]	; (801c2b4 <HAL_RCC_GetHCLKFreq+0x58>)
 801c2a2:	681b      	ldr	r3, [r3, #0]
}
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	3708      	adds	r7, #8
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	bd80      	pop	{r7, pc}
 801c2ac:	58024400 	.word	0x58024400
 801c2b0:	0802fc1c 	.word	0x0802fc1c
 801c2b4:	2400065c 	.word	0x2400065c
 801c2b8:	24000658 	.word	0x24000658

0801c2bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801c2c0:	f7ff ffcc 	bl	801c25c <HAL_RCC_GetHCLKFreq>
 801c2c4:	4601      	mov	r1, r0
 801c2c6:	4b06      	ldr	r3, [pc, #24]	; (801c2e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c2c8:	69db      	ldr	r3, [r3, #28]
 801c2ca:	091b      	lsrs	r3, r3, #4
 801c2cc:	f003 0307 	and.w	r3, r3, #7
 801c2d0:	4a04      	ldr	r2, [pc, #16]	; (801c2e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 801c2d2:	5cd3      	ldrb	r3, [r2, r3]
 801c2d4:	f003 031f 	and.w	r3, r3, #31
 801c2d8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801c2dc:	4618      	mov	r0, r3
 801c2de:	bd80      	pop	{r7, pc}
 801c2e0:	58024400 	.word	0x58024400
 801c2e4:	0802fc1c 	.word	0x0802fc1c

0801c2e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c2e8:	b580      	push	{r7, lr}
 801c2ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801c2ec:	f7ff ffb6 	bl	801c25c <HAL_RCC_GetHCLKFreq>
 801c2f0:	4601      	mov	r1, r0
 801c2f2:	4b06      	ldr	r3, [pc, #24]	; (801c30c <HAL_RCC_GetPCLK2Freq+0x24>)
 801c2f4:	69db      	ldr	r3, [r3, #28]
 801c2f6:	0a1b      	lsrs	r3, r3, #8
 801c2f8:	f003 0307 	and.w	r3, r3, #7
 801c2fc:	4a04      	ldr	r2, [pc, #16]	; (801c310 <HAL_RCC_GetPCLK2Freq+0x28>)
 801c2fe:	5cd3      	ldrb	r3, [r2, r3]
 801c300:	f003 031f 	and.w	r3, r3, #31
 801c304:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801c308:	4618      	mov	r0, r3
 801c30a:	bd80      	pop	{r7, pc}
 801c30c:	58024400 	.word	0x58024400
 801c310:	0802fc1c 	.word	0x0802fc1c

0801c314 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801c314:	b480      	push	{r7}
 801c316:	b083      	sub	sp, #12
 801c318:	af00      	add	r7, sp, #0
 801c31a:	6078      	str	r0, [r7, #4]
 801c31c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	223f      	movs	r2, #63	; 0x3f
 801c322:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801c324:	4b1a      	ldr	r3, [pc, #104]	; (801c390 <HAL_RCC_GetClockConfig+0x7c>)
 801c326:	691b      	ldr	r3, [r3, #16]
 801c328:	f003 0207 	and.w	r2, r3, #7
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801c330:	4b17      	ldr	r3, [pc, #92]	; (801c390 <HAL_RCC_GetClockConfig+0x7c>)
 801c332:	699b      	ldr	r3, [r3, #24]
 801c334:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801c33c:	4b14      	ldr	r3, [pc, #80]	; (801c390 <HAL_RCC_GetClockConfig+0x7c>)
 801c33e:	699b      	ldr	r3, [r3, #24]
 801c340:	f003 020f 	and.w	r2, r3, #15
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801c348:	4b11      	ldr	r3, [pc, #68]	; (801c390 <HAL_RCC_GetClockConfig+0x7c>)
 801c34a:	699b      	ldr	r3, [r3, #24]
 801c34c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 801c354:	4b0e      	ldr	r3, [pc, #56]	; (801c390 <HAL_RCC_GetClockConfig+0x7c>)
 801c356:	69db      	ldr	r3, [r3, #28]
 801c358:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801c360:	4b0b      	ldr	r3, [pc, #44]	; (801c390 <HAL_RCC_GetClockConfig+0x7c>)
 801c362:	69db      	ldr	r3, [r3, #28]
 801c364:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801c36c:	4b08      	ldr	r3, [pc, #32]	; (801c390 <HAL_RCC_GetClockConfig+0x7c>)
 801c36e:	6a1b      	ldr	r3, [r3, #32]
 801c370:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801c378:	4b06      	ldr	r3, [pc, #24]	; (801c394 <HAL_RCC_GetClockConfig+0x80>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	f003 020f 	and.w	r2, r3, #15
 801c380:	683b      	ldr	r3, [r7, #0]
 801c382:	601a      	str	r2, [r3, #0]
}
 801c384:	bf00      	nop
 801c386:	370c      	adds	r7, #12
 801c388:	46bd      	mov	sp, r7
 801c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c38e:	4770      	bx	lr
 801c390:	58024400 	.word	0x58024400
 801c394:	52002000 	.word	0x52002000

0801c398 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c398:	b580      	push	{r7, lr}
 801c39a:	b086      	sub	sp, #24
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801c3a0:	2300      	movs	r3, #0
 801c3a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d03d      	beq.n	801c430 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c3b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c3bc:	d013      	beq.n	801c3e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 801c3be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c3c2:	d802      	bhi.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d007      	beq.n	801c3d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 801c3c8:	e01f      	b.n	801c40a <HAL_RCCEx_PeriphCLKConfig+0x72>
 801c3ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c3ce:	d013      	beq.n	801c3f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 801c3d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801c3d4:	d01c      	beq.n	801c410 <HAL_RCCEx_PeriphCLKConfig+0x78>
 801c3d6:	e018      	b.n	801c40a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c3d8:	4baf      	ldr	r3, [pc, #700]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3dc:	4aae      	ldr	r2, [pc, #696]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c3de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c3e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801c3e4:	e015      	b.n	801c412 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	3304      	adds	r3, #4
 801c3ea:	2102      	movs	r1, #2
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	f001 fd33 	bl	801de58 <RCCEx_PLL2_Config>
 801c3f2:	4603      	mov	r3, r0
 801c3f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801c3f6:	e00c      	b.n	801c412 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	3324      	adds	r3, #36	; 0x24
 801c3fc:	2102      	movs	r1, #2
 801c3fe:	4618      	mov	r0, r3
 801c400:	f001 fddc 	bl	801dfbc <RCCEx_PLL3_Config>
 801c404:	4603      	mov	r3, r0
 801c406:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801c408:	e003      	b.n	801c412 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c40a:	2301      	movs	r3, #1
 801c40c:	75fb      	strb	r3, [r7, #23]
      break;
 801c40e:	e000      	b.n	801c412 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 801c410:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c412:	7dfb      	ldrb	r3, [r7, #23]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d109      	bne.n	801c42c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801c418:	4b9f      	ldr	r3, [pc, #636]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c41a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c41c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c424:	499c      	ldr	r1, [pc, #624]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c426:	4313      	orrs	r3, r2
 801c428:	650b      	str	r3, [r1, #80]	; 0x50
 801c42a:	e001      	b.n	801c430 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c42c:	7dfb      	ldrb	r3, [r7, #23]
 801c42e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d03d      	beq.n	801c4b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c440:	2b04      	cmp	r3, #4
 801c442:	d826      	bhi.n	801c492 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 801c444:	a201      	add	r2, pc, #4	; (adr r2, 801c44c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 801c446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c44a:	bf00      	nop
 801c44c:	0801c461 	.word	0x0801c461
 801c450:	0801c46f 	.word	0x0801c46f
 801c454:	0801c481 	.word	0x0801c481
 801c458:	0801c499 	.word	0x0801c499
 801c45c:	0801c499 	.word	0x0801c499
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c460:	4b8d      	ldr	r3, [pc, #564]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c464:	4a8c      	ldr	r2, [pc, #560]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c46a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c46c:	e015      	b.n	801c49a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	3304      	adds	r3, #4
 801c472:	2100      	movs	r1, #0
 801c474:	4618      	mov	r0, r3
 801c476:	f001 fcef 	bl	801de58 <RCCEx_PLL2_Config>
 801c47a:	4603      	mov	r3, r0
 801c47c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c47e:	e00c      	b.n	801c49a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	3324      	adds	r3, #36	; 0x24
 801c484:	2100      	movs	r1, #0
 801c486:	4618      	mov	r0, r3
 801c488:	f001 fd98 	bl	801dfbc <RCCEx_PLL3_Config>
 801c48c:	4603      	mov	r3, r0
 801c48e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c490:	e003      	b.n	801c49a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c492:	2301      	movs	r3, #1
 801c494:	75fb      	strb	r3, [r7, #23]
      break;
 801c496:	e000      	b.n	801c49a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 801c498:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c49a:	7dfb      	ldrb	r3, [r7, #23]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d109      	bne.n	801c4b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801c4a0:	4b7d      	ldr	r3, [pc, #500]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c4a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c4a4:	f023 0207 	bic.w	r2, r3, #7
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c4ac:	497a      	ldr	r1, [pc, #488]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c4ae:	4313      	orrs	r3, r2
 801c4b0:	650b      	str	r3, [r1, #80]	; 0x50
 801c4b2:	e001      	b.n	801c4b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c4b4:	7dfb      	ldrb	r3, [r7, #23]
 801c4b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d03e      	beq.n	801c542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4c8:	2b80      	cmp	r3, #128	; 0x80
 801c4ca:	d01c      	beq.n	801c506 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 801c4cc:	2b80      	cmp	r3, #128	; 0x80
 801c4ce:	d804      	bhi.n	801c4da <HAL_RCCEx_PeriphCLKConfig+0x142>
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d008      	beq.n	801c4e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 801c4d4:	2b40      	cmp	r3, #64	; 0x40
 801c4d6:	d00d      	beq.n	801c4f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 801c4d8:	e01e      	b.n	801c518 <HAL_RCCEx_PeriphCLKConfig+0x180>
 801c4da:	2bc0      	cmp	r3, #192	; 0xc0
 801c4dc:	d01f      	beq.n	801c51e <HAL_RCCEx_PeriphCLKConfig+0x186>
 801c4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c4e2:	d01e      	beq.n	801c522 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 801c4e4:	e018      	b.n	801c518 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c4e6:	4b6c      	ldr	r3, [pc, #432]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4ea:	4a6b      	ldr	r2, [pc, #428]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c4ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c4f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801c4f2:	e017      	b.n	801c524 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	3304      	adds	r3, #4
 801c4f8:	2100      	movs	r1, #0
 801c4fa:	4618      	mov	r0, r3
 801c4fc:	f001 fcac 	bl	801de58 <RCCEx_PLL2_Config>
 801c500:	4603      	mov	r3, r0
 801c502:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801c504:	e00e      	b.n	801c524 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	3324      	adds	r3, #36	; 0x24
 801c50a:	2100      	movs	r1, #0
 801c50c:	4618      	mov	r0, r3
 801c50e:	f001 fd55 	bl	801dfbc <RCCEx_PLL3_Config>
 801c512:	4603      	mov	r3, r0
 801c514:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801c516:	e005      	b.n	801c524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c518:	2301      	movs	r3, #1
 801c51a:	75fb      	strb	r3, [r7, #23]
      break;
 801c51c:	e002      	b.n	801c524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 801c51e:	bf00      	nop
 801c520:	e000      	b.n	801c524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 801c522:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c524:	7dfb      	ldrb	r3, [r7, #23]
 801c526:	2b00      	cmp	r3, #0
 801c528:	d109      	bne.n	801c53e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801c52a:	4b5b      	ldr	r3, [pc, #364]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c52e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c536:	4958      	ldr	r1, [pc, #352]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c538:	4313      	orrs	r3, r2
 801c53a:	650b      	str	r3, [r1, #80]	; 0x50
 801c53c:	e001      	b.n	801c542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c53e:	7dfb      	ldrb	r3, [r7, #23]
 801c540:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d044      	beq.n	801c5d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c558:	d01f      	beq.n	801c59a <HAL_RCCEx_PeriphCLKConfig+0x202>
 801c55a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c55e:	d805      	bhi.n	801c56c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 801c560:	2b00      	cmp	r3, #0
 801c562:	d00a      	beq.n	801c57a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801c564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801c568:	d00e      	beq.n	801c588 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 801c56a:	e01f      	b.n	801c5ac <HAL_RCCEx_PeriphCLKConfig+0x214>
 801c56c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801c570:	d01f      	beq.n	801c5b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 801c572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c576:	d01e      	beq.n	801c5b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801c578:	e018      	b.n	801c5ac <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c57a:	4b47      	ldr	r3, [pc, #284]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c57e:	4a46      	ldr	r2, [pc, #280]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c584:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c586:	e017      	b.n	801c5b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	3304      	adds	r3, #4
 801c58c:	2100      	movs	r1, #0
 801c58e:	4618      	mov	r0, r3
 801c590:	f001 fc62 	bl	801de58 <RCCEx_PLL2_Config>
 801c594:	4603      	mov	r3, r0
 801c596:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801c598:	e00e      	b.n	801c5b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	3324      	adds	r3, #36	; 0x24
 801c59e:	2100      	movs	r1, #0
 801c5a0:	4618      	mov	r0, r3
 801c5a2:	f001 fd0b 	bl	801dfbc <RCCEx_PLL3_Config>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c5aa:	e005      	b.n	801c5b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801c5ac:	2301      	movs	r3, #1
 801c5ae:	75fb      	strb	r3, [r7, #23]
      break;
 801c5b0:	e002      	b.n	801c5b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 801c5b2:	bf00      	nop
 801c5b4:	e000      	b.n	801c5b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 801c5b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c5b8:	7dfb      	ldrb	r3, [r7, #23]
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d10a      	bne.n	801c5d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801c5be:	4b36      	ldr	r3, [pc, #216]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c5c2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c5cc:	4932      	ldr	r1, [pc, #200]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c5ce:	4313      	orrs	r3, r2
 801c5d0:	658b      	str	r3, [r1, #88]	; 0x58
 801c5d2:	e001      	b.n	801c5d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c5d4:	7dfb      	ldrb	r3, [r7, #23]
 801c5d6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d044      	beq.n	801c66e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c5ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c5ee:	d01f      	beq.n	801c630 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801c5f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c5f4:	d805      	bhi.n	801c602 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d00a      	beq.n	801c610 <HAL_RCCEx_PeriphCLKConfig+0x278>
 801c5fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c5fe:	d00e      	beq.n	801c61e <HAL_RCCEx_PeriphCLKConfig+0x286>
 801c600:	e01f      	b.n	801c642 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 801c602:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c606:	d01f      	beq.n	801c648 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801c608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c60c:	d01e      	beq.n	801c64c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801c60e:	e018      	b.n	801c642 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c610:	4b21      	ldr	r3, [pc, #132]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c614:	4a20      	ldr	r2, [pc, #128]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c61a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c61c:	e017      	b.n	801c64e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	3304      	adds	r3, #4
 801c622:	2100      	movs	r1, #0
 801c624:	4618      	mov	r0, r3
 801c626:	f001 fc17 	bl	801de58 <RCCEx_PLL2_Config>
 801c62a:	4603      	mov	r3, r0
 801c62c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 801c62e:	e00e      	b.n	801c64e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	3324      	adds	r3, #36	; 0x24
 801c634:	2100      	movs	r1, #0
 801c636:	4618      	mov	r0, r3
 801c638:	f001 fcc0 	bl	801dfbc <RCCEx_PLL3_Config>
 801c63c:	4603      	mov	r3, r0
 801c63e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801c640:	e005      	b.n	801c64e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 801c642:	2301      	movs	r3, #1
 801c644:	75fb      	strb	r3, [r7, #23]
      break;
 801c646:	e002      	b.n	801c64e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 801c648:	bf00      	nop
 801c64a:	e000      	b.n	801c64e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 801c64c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c64e:	7dfb      	ldrb	r3, [r7, #23]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d10a      	bne.n	801c66a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c654:	4b10      	ldr	r3, [pc, #64]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c658:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c662:	490d      	ldr	r1, [pc, #52]	; (801c698 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801c664:	4313      	orrs	r3, r2
 801c666:	658b      	str	r3, [r1, #88]	; 0x58
 801c668:	e001      	b.n	801c66e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c66a:	7dfb      	ldrb	r3, [r7, #23]
 801c66c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c676:	2b00      	cmp	r3, #0
 801c678:	d035      	beq.n	801c6e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c67e:	2b10      	cmp	r3, #16
 801c680:	d00c      	beq.n	801c69c <HAL_RCCEx_PeriphCLKConfig+0x304>
 801c682:	2b10      	cmp	r3, #16
 801c684:	d802      	bhi.n	801c68c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 801c686:	2b00      	cmp	r3, #0
 801c688:	d01b      	beq.n	801c6c2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 801c68a:	e017      	b.n	801c6bc <HAL_RCCEx_PeriphCLKConfig+0x324>
 801c68c:	2b20      	cmp	r3, #32
 801c68e:	d00c      	beq.n	801c6aa <HAL_RCCEx_PeriphCLKConfig+0x312>
 801c690:	2b30      	cmp	r3, #48	; 0x30
 801c692:	d018      	beq.n	801c6c6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 801c694:	e012      	b.n	801c6bc <HAL_RCCEx_PeriphCLKConfig+0x324>
 801c696:	bf00      	nop
 801c698:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c69c:	4baf      	ldr	r3, [pc, #700]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6a0:	4aae      	ldr	r2, [pc, #696]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c6a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c6a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801c6a8:	e00e      	b.n	801c6c8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	3304      	adds	r3, #4
 801c6ae:	2102      	movs	r1, #2
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	f001 fbd1 	bl	801de58 <RCCEx_PLL2_Config>
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801c6ba:	e005      	b.n	801c6c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801c6bc:	2301      	movs	r3, #1
 801c6be:	75fb      	strb	r3, [r7, #23]
      break;
 801c6c0:	e002      	b.n	801c6c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 801c6c2:	bf00      	nop
 801c6c4:	e000      	b.n	801c6c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 801c6c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c6c8:	7dfb      	ldrb	r3, [r7, #23]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d109      	bne.n	801c6e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801c6ce:	4ba3      	ldr	r3, [pc, #652]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c6d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c6da:	49a0      	ldr	r1, [pc, #640]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c6dc:	4313      	orrs	r3, r2
 801c6de:	64cb      	str	r3, [r1, #76]	; 0x4c
 801c6e0:	e001      	b.n	801c6e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c6e2:	7dfb      	ldrb	r3, [r7, #23]
 801c6e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d042      	beq.n	801c778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c6f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c6fa:	d01f      	beq.n	801c73c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 801c6fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c700:	d805      	bhi.n	801c70e <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c702:	2b00      	cmp	r3, #0
 801c704:	d00a      	beq.n	801c71c <HAL_RCCEx_PeriphCLKConfig+0x384>
 801c706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c70a:	d00e      	beq.n	801c72a <HAL_RCCEx_PeriphCLKConfig+0x392>
 801c70c:	e01f      	b.n	801c74e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 801c70e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c712:	d01f      	beq.n	801c754 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 801c714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c718:	d01e      	beq.n	801c758 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 801c71a:	e018      	b.n	801c74e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c71c:	4b8f      	ldr	r3, [pc, #572]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c720:	4a8e      	ldr	r2, [pc, #568]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801c728:	e017      	b.n	801c75a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	3304      	adds	r3, #4
 801c72e:	2100      	movs	r1, #0
 801c730:	4618      	mov	r0, r3
 801c732:	f001 fb91 	bl	801de58 <RCCEx_PLL2_Config>
 801c736:	4603      	mov	r3, r0
 801c738:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801c73a:	e00e      	b.n	801c75a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	3324      	adds	r3, #36	; 0x24
 801c740:	2100      	movs	r1, #0
 801c742:	4618      	mov	r0, r3
 801c744:	f001 fc3a 	bl	801dfbc <RCCEx_PLL3_Config>
 801c748:	4603      	mov	r3, r0
 801c74a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801c74c:	e005      	b.n	801c75a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c74e:	2301      	movs	r3, #1
 801c750:	75fb      	strb	r3, [r7, #23]
      break;
 801c752:	e002      	b.n	801c75a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 801c754:	bf00      	nop
 801c756:	e000      	b.n	801c75a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 801c758:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c75a:	7dfb      	ldrb	r3, [r7, #23]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d109      	bne.n	801c774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c760:	4b7e      	ldr	r3, [pc, #504]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c764:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c76c:	497b      	ldr	r1, [pc, #492]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c76e:	4313      	orrs	r3, r2
 801c770:	650b      	str	r3, [r1, #80]	; 0x50
 801c772:	e001      	b.n	801c778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c774:	7dfb      	ldrb	r3, [r7, #23]
 801c776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c780:	2b00      	cmp	r3, #0
 801c782:	d042      	beq.n	801c80a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c78c:	d01b      	beq.n	801c7c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 801c78e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c792:	d805      	bhi.n	801c7a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 801c794:	2b00      	cmp	r3, #0
 801c796:	d022      	beq.n	801c7de <HAL_RCCEx_PeriphCLKConfig+0x446>
 801c798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c79c:	d00a      	beq.n	801c7b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 801c79e:	e01b      	b.n	801c7d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 801c7a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c7a4:	d01d      	beq.n	801c7e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 801c7a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c7aa:	d01c      	beq.n	801c7e6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 801c7ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c7b0:	d01b      	beq.n	801c7ea <HAL_RCCEx_PeriphCLKConfig+0x452>
 801c7b2:	e011      	b.n	801c7d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	3304      	adds	r3, #4
 801c7b8:	2101      	movs	r1, #1
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	f001 fb4c 	bl	801de58 <RCCEx_PLL2_Config>
 801c7c0:	4603      	mov	r3, r0
 801c7c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801c7c4:	e012      	b.n	801c7ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	3324      	adds	r3, #36	; 0x24
 801c7ca:	2101      	movs	r1, #1
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	f001 fbf5 	bl	801dfbc <RCCEx_PLL3_Config>
 801c7d2:	4603      	mov	r3, r0
 801c7d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801c7d6:	e009      	b.n	801c7ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c7d8:	2301      	movs	r3, #1
 801c7da:	75fb      	strb	r3, [r7, #23]
      break;
 801c7dc:	e006      	b.n	801c7ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801c7de:	bf00      	nop
 801c7e0:	e004      	b.n	801c7ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801c7e2:	bf00      	nop
 801c7e4:	e002      	b.n	801c7ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801c7e6:	bf00      	nop
 801c7e8:	e000      	b.n	801c7ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 801c7ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c7ec:	7dfb      	ldrb	r3, [r7, #23]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d109      	bne.n	801c806 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801c7f2:	4b5a      	ldr	r3, [pc, #360]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c7f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c7fe:	4957      	ldr	r1, [pc, #348]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c800:	4313      	orrs	r3, r2
 801c802:	650b      	str	r3, [r1, #80]	; 0x50
 801c804:	e001      	b.n	801c80a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c806:	7dfb      	ldrb	r3, [r7, #23]
 801c808:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c812:	2b00      	cmp	r3, #0
 801c814:	d044      	beq.n	801c8a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c81c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c820:	d01b      	beq.n	801c85a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801c822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c826:	d805      	bhi.n	801c834 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d022      	beq.n	801c872 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801c82c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c830:	d00a      	beq.n	801c848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 801c832:	e01b      	b.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 801c834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c838:	d01d      	beq.n	801c876 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801c83a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c83e:	d01c      	beq.n	801c87a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 801c840:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c844:	d01b      	beq.n	801c87e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 801c846:	e011      	b.n	801c86c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	3304      	adds	r3, #4
 801c84c:	2101      	movs	r1, #1
 801c84e:	4618      	mov	r0, r3
 801c850:	f001 fb02 	bl	801de58 <RCCEx_PLL2_Config>
 801c854:	4603      	mov	r3, r0
 801c856:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801c858:	e012      	b.n	801c880 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	3324      	adds	r3, #36	; 0x24
 801c85e:	2101      	movs	r1, #1
 801c860:	4618      	mov	r0, r3
 801c862:	f001 fbab 	bl	801dfbc <RCCEx_PLL3_Config>
 801c866:	4603      	mov	r3, r0
 801c868:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801c86a:	e009      	b.n	801c880 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 801c86c:	2301      	movs	r3, #1
 801c86e:	75fb      	strb	r3, [r7, #23]
      break;
 801c870:	e006      	b.n	801c880 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801c872:	bf00      	nop
 801c874:	e004      	b.n	801c880 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801c876:	bf00      	nop
 801c878:	e002      	b.n	801c880 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801c87a:	bf00      	nop
 801c87c:	e000      	b.n	801c880 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801c87e:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c880:	7dfb      	ldrb	r3, [r7, #23]
 801c882:	2b00      	cmp	r3, #0
 801c884:	d10a      	bne.n	801c89c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801c886:	4b35      	ldr	r3, [pc, #212]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c88a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c894:	4931      	ldr	r1, [pc, #196]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c896:	4313      	orrs	r3, r2
 801c898:	658b      	str	r3, [r1, #88]	; 0x58
 801c89a:	e001      	b.n	801c8a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c89c:	7dfb      	ldrb	r3, [r7, #23]
 801c89e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d02d      	beq.n	801c908 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c8b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c8b4:	d005      	beq.n	801c8c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 801c8b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c8ba:	d009      	beq.n	801c8d0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d013      	beq.n	801c8e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 801c8c0:	e00f      	b.n	801c8e2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c8c2:	4b26      	ldr	r3, [pc, #152]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8c6:	4a25      	ldr	r2, [pc, #148]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c8c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c8cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801c8ce:	e00c      	b.n	801c8ea <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	3304      	adds	r3, #4
 801c8d4:	2101      	movs	r1, #1
 801c8d6:	4618      	mov	r0, r3
 801c8d8:	f001 fabe 	bl	801de58 <RCCEx_PLL2_Config>
 801c8dc:	4603      	mov	r3, r0
 801c8de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801c8e0:	e003      	b.n	801c8ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801c8e2:	2301      	movs	r3, #1
 801c8e4:	75fb      	strb	r3, [r7, #23]
      break;
 801c8e6:	e000      	b.n	801c8ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 801c8e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c8ea:	7dfb      	ldrb	r3, [r7, #23]
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d109      	bne.n	801c904 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801c8f0:	4b1a      	ldr	r3, [pc, #104]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c8f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c8fc:	4917      	ldr	r1, [pc, #92]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c8fe:	4313      	orrs	r3, r2
 801c900:	650b      	str	r3, [r1, #80]	; 0x50
 801c902:	e001      	b.n	801c908 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c904:	7dfb      	ldrb	r3, [r7, #23]
 801c906:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801c910:	2b00      	cmp	r3, #0
 801c912:	d035      	beq.n	801c980 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c918:	2b03      	cmp	r3, #3
 801c91a:	d81b      	bhi.n	801c954 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 801c91c:	a201      	add	r2, pc, #4	; (adr r2, 801c924 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 801c91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c922:	bf00      	nop
 801c924:	0801c961 	.word	0x0801c961
 801c928:	0801c935 	.word	0x0801c935
 801c92c:	0801c943 	.word	0x0801c943
 801c930:	0801c961 	.word	0x0801c961
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c934:	4b09      	ldr	r3, [pc, #36]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c938:	4a08      	ldr	r2, [pc, #32]	; (801c95c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801c93a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c93e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 801c940:	e00f      	b.n	801c962 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	3304      	adds	r3, #4
 801c946:	2102      	movs	r1, #2
 801c948:	4618      	mov	r0, r3
 801c94a:	f001 fa85 	bl	801de58 <RCCEx_PLL2_Config>
 801c94e:	4603      	mov	r3, r0
 801c950:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 801c952:	e006      	b.n	801c962 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801c954:	2301      	movs	r3, #1
 801c956:	75fb      	strb	r3, [r7, #23]
      break;
 801c958:	e003      	b.n	801c962 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 801c95a:	bf00      	nop
 801c95c:	58024400 	.word	0x58024400
      break;
 801c960:	bf00      	nop
    }

    if(ret == HAL_OK)
 801c962:	7dfb      	ldrb	r3, [r7, #23]
 801c964:	2b00      	cmp	r3, #0
 801c966:	d109      	bne.n	801c97c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801c968:	4bba      	ldr	r3, [pc, #744]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c96a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c96c:	f023 0203 	bic.w	r2, r3, #3
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c974:	49b7      	ldr	r1, [pc, #732]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c976:	4313      	orrs	r3, r2
 801c978:	64cb      	str	r3, [r1, #76]	; 0x4c
 801c97a:	e001      	b.n	801c980 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c97c:	7dfb      	ldrb	r3, [r7, #23]
 801c97e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c988:	2b00      	cmp	r3, #0
 801c98a:	f000 8086 	beq.w	801ca9a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c98e:	4bb2      	ldr	r3, [pc, #712]	; (801cc58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	4ab1      	ldr	r2, [pc, #708]	; (801cc58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 801c994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c998:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c99a:	f7f8 f9ab 	bl	8014cf4 <HAL_GetTick>
 801c99e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c9a0:	e009      	b.n	801c9b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c9a2:	f7f8 f9a7 	bl	8014cf4 <HAL_GetTick>
 801c9a6:	4602      	mov	r2, r0
 801c9a8:	693b      	ldr	r3, [r7, #16]
 801c9aa:	1ad3      	subs	r3, r2, r3
 801c9ac:	2b64      	cmp	r3, #100	; 0x64
 801c9ae:	d902      	bls.n	801c9b6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 801c9b0:	2303      	movs	r3, #3
 801c9b2:	75fb      	strb	r3, [r7, #23]
        break;
 801c9b4:	e005      	b.n	801c9c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c9b6:	4ba8      	ldr	r3, [pc, #672]	; (801cc58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d0ef      	beq.n	801c9a2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 801c9c2:	7dfb      	ldrb	r3, [r7, #23]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d166      	bne.n	801ca96 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801c9c8:	4ba2      	ldr	r3, [pc, #648]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c9ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c9d2:	4053      	eors	r3, r2
 801c9d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	d013      	beq.n	801ca04 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c9dc:	4b9d      	ldr	r3, [pc, #628]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c9e4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c9e6:	4b9b      	ldr	r3, [pc, #620]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9ea:	4a9a      	ldr	r2, [pc, #616]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c9ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c9f0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c9f2:	4b98      	ldr	r3, [pc, #608]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c9f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9f6:	4a97      	ldr	r2, [pc, #604]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801c9f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c9fc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801c9fe:	4a95      	ldr	r2, [pc, #596]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ca0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ca0e:	d115      	bne.n	801ca3c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ca10:	f7f8 f970 	bl	8014cf4 <HAL_GetTick>
 801ca14:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ca16:	e00b      	b.n	801ca30 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ca18:	f7f8 f96c 	bl	8014cf4 <HAL_GetTick>
 801ca1c:	4602      	mov	r2, r0
 801ca1e:	693b      	ldr	r3, [r7, #16]
 801ca20:	1ad3      	subs	r3, r2, r3
 801ca22:	f241 3288 	movw	r2, #5000	; 0x1388
 801ca26:	4293      	cmp	r3, r2
 801ca28:	d902      	bls.n	801ca30 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 801ca2a:	2303      	movs	r3, #3
 801ca2c:	75fb      	strb	r3, [r7, #23]
            break;
 801ca2e:	e005      	b.n	801ca3c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ca30:	4b88      	ldr	r3, [pc, #544]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ca32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca34:	f003 0302 	and.w	r3, r3, #2
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d0ed      	beq.n	801ca18 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 801ca3c:	7dfb      	ldrb	r3, [r7, #23]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d126      	bne.n	801ca90 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ca48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ca4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ca50:	d10d      	bne.n	801ca6e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 801ca52:	4b80      	ldr	r3, [pc, #512]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ca54:	691b      	ldr	r3, [r3, #16]
 801ca56:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ca60:	0919      	lsrs	r1, r3, #4
 801ca62:	4b7e      	ldr	r3, [pc, #504]	; (801cc5c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 801ca64:	400b      	ands	r3, r1
 801ca66:	497b      	ldr	r1, [pc, #492]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ca68:	4313      	orrs	r3, r2
 801ca6a:	610b      	str	r3, [r1, #16]
 801ca6c:	e005      	b.n	801ca7a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 801ca6e:	4b79      	ldr	r3, [pc, #484]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ca70:	691b      	ldr	r3, [r3, #16]
 801ca72:	4a78      	ldr	r2, [pc, #480]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ca74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ca78:	6113      	str	r3, [r2, #16]
 801ca7a:	4b76      	ldr	r3, [pc, #472]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ca7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ca84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ca88:	4972      	ldr	r1, [pc, #456]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801ca8a:	4313      	orrs	r3, r2
 801ca8c:	670b      	str	r3, [r1, #112]	; 0x70
 801ca8e:	e004      	b.n	801ca9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801ca90:	7dfb      	ldrb	r3, [r7, #23]
 801ca92:	75bb      	strb	r3, [r7, #22]
 801ca94:	e001      	b.n	801ca9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca96:	7dfb      	ldrb	r3, [r7, #23]
 801ca98:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	f003 0301 	and.w	r3, r3, #1
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d07d      	beq.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801caaa:	2b28      	cmp	r3, #40	; 0x28
 801caac:	d866      	bhi.n	801cb7c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 801caae:	a201      	add	r2, pc, #4	; (adr r2, 801cab4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 801cab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cab4:	0801cb83 	.word	0x0801cb83
 801cab8:	0801cb7d 	.word	0x0801cb7d
 801cabc:	0801cb7d 	.word	0x0801cb7d
 801cac0:	0801cb7d 	.word	0x0801cb7d
 801cac4:	0801cb7d 	.word	0x0801cb7d
 801cac8:	0801cb7d 	.word	0x0801cb7d
 801cacc:	0801cb7d 	.word	0x0801cb7d
 801cad0:	0801cb7d 	.word	0x0801cb7d
 801cad4:	0801cb59 	.word	0x0801cb59
 801cad8:	0801cb7d 	.word	0x0801cb7d
 801cadc:	0801cb7d 	.word	0x0801cb7d
 801cae0:	0801cb7d 	.word	0x0801cb7d
 801cae4:	0801cb7d 	.word	0x0801cb7d
 801cae8:	0801cb7d 	.word	0x0801cb7d
 801caec:	0801cb7d 	.word	0x0801cb7d
 801caf0:	0801cb7d 	.word	0x0801cb7d
 801caf4:	0801cb6b 	.word	0x0801cb6b
 801caf8:	0801cb7d 	.word	0x0801cb7d
 801cafc:	0801cb7d 	.word	0x0801cb7d
 801cb00:	0801cb7d 	.word	0x0801cb7d
 801cb04:	0801cb7d 	.word	0x0801cb7d
 801cb08:	0801cb7d 	.word	0x0801cb7d
 801cb0c:	0801cb7d 	.word	0x0801cb7d
 801cb10:	0801cb7d 	.word	0x0801cb7d
 801cb14:	0801cb83 	.word	0x0801cb83
 801cb18:	0801cb7d 	.word	0x0801cb7d
 801cb1c:	0801cb7d 	.word	0x0801cb7d
 801cb20:	0801cb7d 	.word	0x0801cb7d
 801cb24:	0801cb7d 	.word	0x0801cb7d
 801cb28:	0801cb7d 	.word	0x0801cb7d
 801cb2c:	0801cb7d 	.word	0x0801cb7d
 801cb30:	0801cb7d 	.word	0x0801cb7d
 801cb34:	0801cb83 	.word	0x0801cb83
 801cb38:	0801cb7d 	.word	0x0801cb7d
 801cb3c:	0801cb7d 	.word	0x0801cb7d
 801cb40:	0801cb7d 	.word	0x0801cb7d
 801cb44:	0801cb7d 	.word	0x0801cb7d
 801cb48:	0801cb7d 	.word	0x0801cb7d
 801cb4c:	0801cb7d 	.word	0x0801cb7d
 801cb50:	0801cb7d 	.word	0x0801cb7d
 801cb54:	0801cb83 	.word	0x0801cb83
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	3304      	adds	r3, #4
 801cb5c:	2101      	movs	r1, #1
 801cb5e:	4618      	mov	r0, r3
 801cb60:	f001 f97a 	bl	801de58 <RCCEx_PLL2_Config>
 801cb64:	4603      	mov	r3, r0
 801cb66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801cb68:	e00c      	b.n	801cb84 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	3324      	adds	r3, #36	; 0x24
 801cb6e:	2101      	movs	r1, #1
 801cb70:	4618      	mov	r0, r3
 801cb72:	f001 fa23 	bl	801dfbc <RCCEx_PLL3_Config>
 801cb76:	4603      	mov	r3, r0
 801cb78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801cb7a:	e003      	b.n	801cb84 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cb7c:	2301      	movs	r3, #1
 801cb7e:	75fb      	strb	r3, [r7, #23]
      break;
 801cb80:	e000      	b.n	801cb84 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 801cb82:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cb84:	7dfb      	ldrb	r3, [r7, #23]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d109      	bne.n	801cb9e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801cb8a:	4b32      	ldr	r3, [pc, #200]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801cb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb8e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cb96:	492f      	ldr	r1, [pc, #188]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801cb98:	4313      	orrs	r3, r2
 801cb9a:	654b      	str	r3, [r1, #84]	; 0x54
 801cb9c:	e001      	b.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb9e:	7dfb      	ldrb	r3, [r7, #23]
 801cba0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	f003 0302 	and.w	r3, r3, #2
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d037      	beq.n	801cc1e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cbb2:	2b05      	cmp	r3, #5
 801cbb4:	d820      	bhi.n	801cbf8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 801cbb6:	a201      	add	r2, pc, #4	; (adr r2, 801cbbc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 801cbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbbc:	0801cbff 	.word	0x0801cbff
 801cbc0:	0801cbd5 	.word	0x0801cbd5
 801cbc4:	0801cbe7 	.word	0x0801cbe7
 801cbc8:	0801cbff 	.word	0x0801cbff
 801cbcc:	0801cbff 	.word	0x0801cbff
 801cbd0:	0801cbff 	.word	0x0801cbff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	3304      	adds	r3, #4
 801cbd8:	2101      	movs	r1, #1
 801cbda:	4618      	mov	r0, r3
 801cbdc:	f001 f93c 	bl	801de58 <RCCEx_PLL2_Config>
 801cbe0:	4603      	mov	r3, r0
 801cbe2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801cbe4:	e00c      	b.n	801cc00 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	3324      	adds	r3, #36	; 0x24
 801cbea:	2101      	movs	r1, #1
 801cbec:	4618      	mov	r0, r3
 801cbee:	f001 f9e5 	bl	801dfbc <RCCEx_PLL3_Config>
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801cbf6:	e003      	b.n	801cc00 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cbf8:	2301      	movs	r3, #1
 801cbfa:	75fb      	strb	r3, [r7, #23]
      break;
 801cbfc:	e000      	b.n	801cc00 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 801cbfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cc00:	7dfb      	ldrb	r3, [r7, #23]
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d109      	bne.n	801cc1a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801cc06:	4b13      	ldr	r3, [pc, #76]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801cc08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cc0a:	f023 0207 	bic.w	r2, r3, #7
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cc12:	4910      	ldr	r1, [pc, #64]	; (801cc54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801cc14:	4313      	orrs	r3, r2
 801cc16:	654b      	str	r3, [r1, #84]	; 0x54
 801cc18:	e001      	b.n	801cc1e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc1a:	7dfb      	ldrb	r3, [r7, #23]
 801cc1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	681b      	ldr	r3, [r3, #0]
 801cc22:	f003 0304 	and.w	r3, r3, #4
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d040      	beq.n	801ccac <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cc30:	2b05      	cmp	r3, #5
 801cc32:	d827      	bhi.n	801cc84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 801cc34:	a201      	add	r2, pc, #4	; (adr r2, 801cc3c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 801cc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc3a:	bf00      	nop
 801cc3c:	0801cc8b 	.word	0x0801cc8b
 801cc40:	0801cc61 	.word	0x0801cc61
 801cc44:	0801cc73 	.word	0x0801cc73
 801cc48:	0801cc8b 	.word	0x0801cc8b
 801cc4c:	0801cc8b 	.word	0x0801cc8b
 801cc50:	0801cc8b 	.word	0x0801cc8b
 801cc54:	58024400 	.word	0x58024400
 801cc58:	58024800 	.word	0x58024800
 801cc5c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	3304      	adds	r3, #4
 801cc64:	2101      	movs	r1, #1
 801cc66:	4618      	mov	r0, r3
 801cc68:	f001 f8f6 	bl	801de58 <RCCEx_PLL2_Config>
 801cc6c:	4603      	mov	r3, r0
 801cc6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801cc70:	e00c      	b.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	3324      	adds	r3, #36	; 0x24
 801cc76:	2101      	movs	r1, #1
 801cc78:	4618      	mov	r0, r3
 801cc7a:	f001 f99f 	bl	801dfbc <RCCEx_PLL3_Config>
 801cc7e:	4603      	mov	r3, r0
 801cc80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 801cc82:	e003      	b.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cc84:	2301      	movs	r3, #1
 801cc86:	75fb      	strb	r3, [r7, #23]
      break;
 801cc88:	e000      	b.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 801cc8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cc8c:	7dfb      	ldrb	r3, [r7, #23]
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d10a      	bne.n	801cca8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801cc92:	4bb2      	ldr	r3, [pc, #712]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801cc94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc96:	f023 0207 	bic.w	r2, r3, #7
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cca0:	49ae      	ldr	r1, [pc, #696]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801cca2:	4313      	orrs	r3, r2
 801cca4:	658b      	str	r3, [r1, #88]	; 0x58
 801cca6:	e001      	b.n	801ccac <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cca8:	7dfb      	ldrb	r3, [r7, #23]
 801ccaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	f003 0320 	and.w	r3, r3, #32
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d044      	beq.n	801cd42 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ccbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ccc2:	d01b      	beq.n	801ccfc <HAL_RCCEx_PeriphCLKConfig+0x964>
 801ccc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801ccc8:	d805      	bhi.n	801ccd6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d022      	beq.n	801cd14 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 801ccce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801ccd2:	d00a      	beq.n	801ccea <HAL_RCCEx_PeriphCLKConfig+0x952>
 801ccd4:	e01b      	b.n	801cd0e <HAL_RCCEx_PeriphCLKConfig+0x976>
 801ccd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ccda:	d01d      	beq.n	801cd18 <HAL_RCCEx_PeriphCLKConfig+0x980>
 801ccdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801cce0:	d01c      	beq.n	801cd1c <HAL_RCCEx_PeriphCLKConfig+0x984>
 801cce2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801cce6:	d01b      	beq.n	801cd20 <HAL_RCCEx_PeriphCLKConfig+0x988>
 801cce8:	e011      	b.n	801cd0e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	3304      	adds	r3, #4
 801ccee:	2100      	movs	r1, #0
 801ccf0:	4618      	mov	r0, r3
 801ccf2:	f001 f8b1 	bl	801de58 <RCCEx_PLL2_Config>
 801ccf6:	4603      	mov	r3, r0
 801ccf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801ccfa:	e012      	b.n	801cd22 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	3324      	adds	r3, #36	; 0x24
 801cd00:	2102      	movs	r1, #2
 801cd02:	4618      	mov	r0, r3
 801cd04:	f001 f95a 	bl	801dfbc <RCCEx_PLL3_Config>
 801cd08:	4603      	mov	r3, r0
 801cd0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801cd0c:	e009      	b.n	801cd22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cd0e:	2301      	movs	r3, #1
 801cd10:	75fb      	strb	r3, [r7, #23]
      break;
 801cd12:	e006      	b.n	801cd22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801cd14:	bf00      	nop
 801cd16:	e004      	b.n	801cd22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801cd18:	bf00      	nop
 801cd1a:	e002      	b.n	801cd22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801cd1c:	bf00      	nop
 801cd1e:	e000      	b.n	801cd22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801cd20:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cd22:	7dfb      	ldrb	r3, [r7, #23]
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d10a      	bne.n	801cd3e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cd28:	4b8c      	ldr	r3, [pc, #560]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801cd2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd2c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cd36:	4989      	ldr	r1, [pc, #548]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801cd38:	4313      	orrs	r3, r2
 801cd3a:	654b      	str	r3, [r1, #84]	; 0x54
 801cd3c:	e001      	b.n	801cd42 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd3e:	7dfb      	ldrb	r3, [r7, #23]
 801cd40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d044      	beq.n	801cdd8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cd54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cd58:	d01b      	beq.n	801cd92 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 801cd5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cd5e:	d805      	bhi.n	801cd6c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d022      	beq.n	801cdaa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 801cd64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cd68:	d00a      	beq.n	801cd80 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 801cd6a:	e01b      	b.n	801cda4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 801cd6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cd70:	d01d      	beq.n	801cdae <HAL_RCCEx_PeriphCLKConfig+0xa16>
 801cd72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801cd76:	d01c      	beq.n	801cdb2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 801cd78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801cd7c:	d01b      	beq.n	801cdb6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 801cd7e:	e011      	b.n	801cda4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	3304      	adds	r3, #4
 801cd84:	2100      	movs	r1, #0
 801cd86:	4618      	mov	r0, r3
 801cd88:	f001 f866 	bl	801de58 <RCCEx_PLL2_Config>
 801cd8c:	4603      	mov	r3, r0
 801cd8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801cd90:	e012      	b.n	801cdb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	3324      	adds	r3, #36	; 0x24
 801cd96:	2102      	movs	r1, #2
 801cd98:	4618      	mov	r0, r3
 801cd9a:	f001 f90f 	bl	801dfbc <RCCEx_PLL3_Config>
 801cd9e:	4603      	mov	r3, r0
 801cda0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801cda2:	e009      	b.n	801cdb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cda4:	2301      	movs	r3, #1
 801cda6:	75fb      	strb	r3, [r7, #23]
      break;
 801cda8:	e006      	b.n	801cdb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801cdaa:	bf00      	nop
 801cdac:	e004      	b.n	801cdb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801cdae:	bf00      	nop
 801cdb0:	e002      	b.n	801cdb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801cdb2:	bf00      	nop
 801cdb4:	e000      	b.n	801cdb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801cdb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cdb8:	7dfb      	ldrb	r3, [r7, #23]
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d10a      	bne.n	801cdd4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801cdbe:	4b67      	ldr	r3, [pc, #412]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801cdc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cdcc:	4963      	ldr	r1, [pc, #396]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801cdce:	4313      	orrs	r3, r2
 801cdd0:	658b      	str	r3, [r1, #88]	; 0x58
 801cdd2:	e001      	b.n	801cdd8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cdd4:	7dfb      	ldrb	r3, [r7, #23]
 801cdd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d044      	beq.n	801ce6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cdea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cdee:	d01b      	beq.n	801ce28 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 801cdf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cdf4:	d805      	bhi.n	801ce02 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d022      	beq.n	801ce40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801cdfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cdfe:	d00a      	beq.n	801ce16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 801ce00:	e01b      	b.n	801ce3a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 801ce02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ce06:	d01d      	beq.n	801ce44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 801ce08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801ce0c:	d01c      	beq.n	801ce48 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 801ce0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801ce12:	d01b      	beq.n	801ce4c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 801ce14:	e011      	b.n	801ce3a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	3304      	adds	r3, #4
 801ce1a:	2100      	movs	r1, #0
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	f001 f81b 	bl	801de58 <RCCEx_PLL2_Config>
 801ce22:	4603      	mov	r3, r0
 801ce24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801ce26:	e012      	b.n	801ce4e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	3324      	adds	r3, #36	; 0x24
 801ce2c:	2102      	movs	r1, #2
 801ce2e:	4618      	mov	r0, r3
 801ce30:	f001 f8c4 	bl	801dfbc <RCCEx_PLL3_Config>
 801ce34:	4603      	mov	r3, r0
 801ce36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801ce38:	e009      	b.n	801ce4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801ce3a:	2301      	movs	r3, #1
 801ce3c:	75fb      	strb	r3, [r7, #23]
      break;
 801ce3e:	e006      	b.n	801ce4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801ce40:	bf00      	nop
 801ce42:	e004      	b.n	801ce4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801ce44:	bf00      	nop
 801ce46:	e002      	b.n	801ce4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801ce48:	bf00      	nop
 801ce4a:	e000      	b.n	801ce4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801ce4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801ce4e:	7dfb      	ldrb	r3, [r7, #23]
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d10a      	bne.n	801ce6a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801ce54:	4b41      	ldr	r3, [pc, #260]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801ce56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ce62:	493e      	ldr	r1, [pc, #248]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801ce64:	4313      	orrs	r3, r2
 801ce66:	658b      	str	r3, [r1, #88]	; 0x58
 801ce68:	e001      	b.n	801ce6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce6a:	7dfb      	ldrb	r3, [r7, #23]
 801ce6c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	f003 0308 	and.w	r3, r3, #8
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d01a      	beq.n	801ceb0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ce80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ce84:	d10a      	bne.n	801ce9c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	3324      	adds	r3, #36	; 0x24
 801ce8a:	2102      	movs	r1, #2
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	f001 f895 	bl	801dfbc <RCCEx_PLL3_Config>
 801ce92:	4603      	mov	r3, r0
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d001      	beq.n	801ce9c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 801ce98:	2301      	movs	r3, #1
 801ce9a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801ce9c:	4b2f      	ldr	r3, [pc, #188]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801ce9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cea0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ceaa:	492c      	ldr	r1, [pc, #176]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801ceac:	4313      	orrs	r3, r2
 801ceae:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	f003 0310 	and.w	r3, r3, #16
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d01a      	beq.n	801cef2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cec6:	d10a      	bne.n	801cede <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	3324      	adds	r3, #36	; 0x24
 801cecc:	2102      	movs	r1, #2
 801cece:	4618      	mov	r0, r3
 801ced0:	f001 f874 	bl	801dfbc <RCCEx_PLL3_Config>
 801ced4:	4603      	mov	r3, r0
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d001      	beq.n	801cede <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 801ceda:	2301      	movs	r3, #1
 801cedc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801cede:	4b1f      	ldr	r3, [pc, #124]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801cee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ceec:	491b      	ldr	r1, [pc, #108]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801ceee:	4313      	orrs	r3, r2
 801cef0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d032      	beq.n	801cf64 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cf04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cf08:	d00d      	beq.n	801cf26 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 801cf0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cf0e:	d016      	beq.n	801cf3e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d111      	bne.n	801cf38 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	3304      	adds	r3, #4
 801cf18:	2100      	movs	r1, #0
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	f000 ff9c 	bl	801de58 <RCCEx_PLL2_Config>
 801cf20:	4603      	mov	r3, r0
 801cf22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801cf24:	e00c      	b.n	801cf40 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	3324      	adds	r3, #36	; 0x24
 801cf2a:	2102      	movs	r1, #2
 801cf2c:	4618      	mov	r0, r3
 801cf2e:	f001 f845 	bl	801dfbc <RCCEx_PLL3_Config>
 801cf32:	4603      	mov	r3, r0
 801cf34:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801cf36:	e003      	b.n	801cf40 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cf38:	2301      	movs	r3, #1
 801cf3a:	75fb      	strb	r3, [r7, #23]
      break;
 801cf3c:	e000      	b.n	801cf40 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 801cf3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cf40:	7dfb      	ldrb	r3, [r7, #23]
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d10c      	bne.n	801cf60 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cf46:	4b05      	ldr	r3, [pc, #20]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801cf48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cf4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cf54:	4901      	ldr	r1, [pc, #4]	; (801cf5c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801cf56:	4313      	orrs	r3, r2
 801cf58:	658b      	str	r3, [r1, #88]	; 0x58
 801cf5a:	e003      	b.n	801cf64 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 801cf5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf60:	7dfb      	ldrb	r3, [r7, #23]
 801cf62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d02f      	beq.n	801cfd0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cf76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801cf7a:	d00c      	beq.n	801cf96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 801cf7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801cf80:	d015      	beq.n	801cfae <HAL_RCCEx_PeriphCLKConfig+0xc16>
 801cf82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cf86:	d10f      	bne.n	801cfa8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cf88:	4b79      	ldr	r3, [pc, #484]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf8c:	4a78      	ldr	r2, [pc, #480]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cf8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cf92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801cf94:	e00c      	b.n	801cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	3324      	adds	r3, #36	; 0x24
 801cf9a:	2101      	movs	r1, #1
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f001 f80d 	bl	801dfbc <RCCEx_PLL3_Config>
 801cfa2:	4603      	mov	r3, r0
 801cfa4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 801cfa6:	e003      	b.n	801cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cfa8:	2301      	movs	r3, #1
 801cfaa:	75fb      	strb	r3, [r7, #23]
      break;
 801cfac:	e000      	b.n	801cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 801cfae:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cfb0:	7dfb      	ldrb	r3, [r7, #23]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d10a      	bne.n	801cfcc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cfb6:	4b6e      	ldr	r3, [pc, #440]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cfb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cfba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cfc4:	496a      	ldr	r1, [pc, #424]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cfc6:	4313      	orrs	r3, r2
 801cfc8:	654b      	str	r3, [r1, #84]	; 0x54
 801cfca:	e001      	b.n	801cfd0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfcc:	7dfb      	ldrb	r3, [r7, #23]
 801cfce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	681b      	ldr	r3, [r3, #0]
 801cfd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	d029      	beq.n	801d030 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d003      	beq.n	801cfec <HAL_RCCEx_PeriphCLKConfig+0xc54>
 801cfe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cfe8:	d007      	beq.n	801cffa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 801cfea:	e00f      	b.n	801d00c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cfec:	4b60      	ldr	r3, [pc, #384]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cff0:	4a5f      	ldr	r2, [pc, #380]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801cff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801cff8:	e00b      	b.n	801d012 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	3304      	adds	r3, #4
 801cffe:	2102      	movs	r1, #2
 801d000:	4618      	mov	r0, r3
 801d002:	f000 ff29 	bl	801de58 <RCCEx_PLL2_Config>
 801d006:	4603      	mov	r3, r0
 801d008:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801d00a:	e002      	b.n	801d012 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 801d00c:	2301      	movs	r3, #1
 801d00e:	75fb      	strb	r3, [r7, #23]
      break;
 801d010:	bf00      	nop
    }

    if(ret == HAL_OK)
 801d012:	7dfb      	ldrb	r3, [r7, #23]
 801d014:	2b00      	cmp	r3, #0
 801d016:	d109      	bne.n	801d02c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801d018:	4b55      	ldr	r3, [pc, #340]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d01a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d01c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d024:	4952      	ldr	r1, [pc, #328]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d026:	4313      	orrs	r3, r2
 801d028:	64cb      	str	r3, [r1, #76]	; 0x4c
 801d02a:	e001      	b.n	801d030 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d02c:	7dfb      	ldrb	r3, [r7, #23]
 801d02e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d00a      	beq.n	801d052 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	3324      	adds	r3, #36	; 0x24
 801d040:	2102      	movs	r1, #2
 801d042:	4618      	mov	r0, r3
 801d044:	f000 ffba 	bl	801dfbc <RCCEx_PLL3_Config>
 801d048:	4603      	mov	r3, r0
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d001      	beq.n	801d052 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 801d04e:	2301      	movs	r3, #1
 801d050:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d02f      	beq.n	801d0be <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d066:	d00c      	beq.n	801d082 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801d068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d06c:	d802      	bhi.n	801d074 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 801d06e:	2b00      	cmp	r3, #0
 801d070:	d011      	beq.n	801d096 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 801d072:	e00d      	b.n	801d090 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 801d074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d078:	d00f      	beq.n	801d09a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 801d07a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d07e:	d00e      	beq.n	801d09e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 801d080:	e006      	b.n	801d090 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d082:	4b3b      	ldr	r3, [pc, #236]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d086:	4a3a      	ldr	r2, [pc, #232]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801d08c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801d08e:	e007      	b.n	801d0a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801d090:	2301      	movs	r3, #1
 801d092:	75fb      	strb	r3, [r7, #23]
      break;
 801d094:	e004      	b.n	801d0a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801d096:	bf00      	nop
 801d098:	e002      	b.n	801d0a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801d09a:	bf00      	nop
 801d09c:	e000      	b.n	801d0a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801d09e:	bf00      	nop
    }

    if(ret == HAL_OK)
 801d0a0:	7dfb      	ldrb	r3, [r7, #23]
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d109      	bne.n	801d0ba <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d0a6:	4b32      	ldr	r3, [pc, #200]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d0aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d0b2:	492f      	ldr	r1, [pc, #188]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d0b4:	4313      	orrs	r3, r2
 801d0b6:	654b      	str	r3, [r1, #84]	; 0x54
 801d0b8:	e001      	b.n	801d0be <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d0ba:	7dfb      	ldrb	r3, [r7, #23]
 801d0bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d008      	beq.n	801d0dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801d0ca:	4b29      	ldr	r3, [pc, #164]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d0ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d0d6:	4926      	ldr	r1, [pc, #152]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d0d8:	4313      	orrs	r3, r2
 801d0da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d009      	beq.n	801d0fc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801d0e8:	4b21      	ldr	r3, [pc, #132]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d0ea:	691b      	ldr	r3, [r3, #16]
 801d0ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801d0f6:	491e      	ldr	r1, [pc, #120]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d0f8:	4313      	orrs	r3, r2
 801d0fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d104:	2b00      	cmp	r3, #0
 801d106:	d008      	beq.n	801d11a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801d108:	4b19      	ldr	r3, [pc, #100]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d10c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d114:	4916      	ldr	r1, [pc, #88]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d116:	4313      	orrs	r3, r2
 801d118:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801d122:	2b00      	cmp	r3, #0
 801d124:	d00d      	beq.n	801d142 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801d126:	4b12      	ldr	r3, [pc, #72]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d128:	691b      	ldr	r3, [r3, #16]
 801d12a:	4a11      	ldr	r2, [pc, #68]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d12c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801d130:	6113      	str	r3, [r2, #16]
 801d132:	4b0f      	ldr	r3, [pc, #60]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d134:	691a      	ldr	r2, [r3, #16]
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801d13c:	490c      	ldr	r1, [pc, #48]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d13e:	4313      	orrs	r3, r2
 801d140:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	2b00      	cmp	r3, #0
 801d148:	da08      	bge.n	801d15c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801d14a:	4b09      	ldr	r3, [pc, #36]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d14e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d156:	4906      	ldr	r1, [pc, #24]	; (801d170 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801d158:	4313      	orrs	r3, r2
 801d15a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 801d15c:	7dbb      	ldrb	r3, [r7, #22]
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d101      	bne.n	801d166 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 801d162:	2300      	movs	r3, #0
 801d164:	e000      	b.n	801d168 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 801d166:	2301      	movs	r3, #1
}
 801d168:	4618      	mov	r0, r3
 801d16a:	3718      	adds	r7, #24
 801d16c:	46bd      	mov	sp, r7
 801d16e:	bd80      	pop	{r7, pc}
 801d170:	58024400 	.word	0x58024400

0801d174 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 801d174:	b580      	push	{r7, lr}
 801d176:	b090      	sub	sp, #64	; 0x40
 801d178:	af00      	add	r7, sp, #0
 801d17a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d182:	d150      	bne.n	801d226 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 801d184:	4ba1      	ldr	r3, [pc, #644]	; (801d40c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d188:	f003 0307 	and.w	r3, r3, #7
 801d18c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d190:	2b04      	cmp	r3, #4
 801d192:	d844      	bhi.n	801d21e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 801d194:	a201      	add	r2, pc, #4	; (adr r2, 801d19c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 801d196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d19a:	bf00      	nop
 801d19c:	0801d1b1 	.word	0x0801d1b1
 801d1a0:	0801d1c1 	.word	0x0801d1c1
 801d1a4:	0801d1d1 	.word	0x0801d1d1
 801d1a8:	0801d219 	.word	0x0801d219
 801d1ac:	0801d1e1 	.word	0x0801d1e1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d1b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d1b4:	4618      	mov	r0, r3
 801d1b6:	f000 fd03 	bl	801dbc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d1be:	e241      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d1c0:	f107 0318 	add.w	r3, r7, #24
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	f000 fa63 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d1ca:	69bb      	ldr	r3, [r7, #24]
 801d1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d1ce:	e239      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d1d0:	f107 030c 	add.w	r3, r7, #12
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	f000 fba7 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d1de:	e231      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801d1e0:	4b8a      	ldr	r3, [pc, #552]	; (801d40c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d1e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d1e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d1e8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801d1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d102      	bne.n	801d1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801d1f0:	4b87      	ldr	r3, [pc, #540]	; (801d410 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801d1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801d1f4:	e226      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801d1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d1fc:	d102      	bne.n	801d204 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 801d1fe:	4b85      	ldr	r3, [pc, #532]	; (801d414 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801d200:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d202:	e21f      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801d204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d20a:	d102      	bne.n	801d212 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 801d20c:	4b82      	ldr	r3, [pc, #520]	; (801d418 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801d20e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d210:	e218      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801d212:	2300      	movs	r3, #0
 801d214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d216:	e215      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801d218:	4b80      	ldr	r3, [pc, #512]	; (801d41c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 801d21a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d21c:	e212      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801d21e:	2300      	movs	r3, #0
 801d220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d222:	bf00      	nop
 801d224:	e20e      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d22c:	d14f      	bne.n	801d2ce <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 801d22e:	4b77      	ldr	r3, [pc, #476]	; (801d40c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d232:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 801d236:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d23a:	2b80      	cmp	r3, #128	; 0x80
 801d23c:	d01c      	beq.n	801d278 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 801d23e:	2b80      	cmp	r3, #128	; 0x80
 801d240:	d804      	bhi.n	801d24c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 801d242:	2b00      	cmp	r3, #0
 801d244:	d008      	beq.n	801d258 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 801d246:	2b40      	cmp	r3, #64	; 0x40
 801d248:	d00e      	beq.n	801d268 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 801d24a:	e03c      	b.n	801d2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 801d24c:	2bc0      	cmp	r3, #192	; 0xc0
 801d24e:	d037      	beq.n	801d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 801d250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d254:	d018      	beq.n	801d288 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 801d256:	e036      	b.n	801d2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d25c:	4618      	mov	r0, r3
 801d25e:	f000 fcaf 	bl	801dbc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d266:	e1ed      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d268:	f107 0318 	add.w	r3, r7, #24
 801d26c:	4618      	mov	r0, r3
 801d26e:	f000 fa0f 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d272:	69bb      	ldr	r3, [r7, #24]
 801d274:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d276:	e1e5      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d278:	f107 030c 	add.w	r3, r7, #12
 801d27c:	4618      	mov	r0, r3
 801d27e:	f000 fb53 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d286:	e1dd      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801d288:	4b60      	ldr	r3, [pc, #384]	; (801d40c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d28a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d28c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d290:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801d292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d294:	2b00      	cmp	r3, #0
 801d296:	d102      	bne.n	801d29e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801d298:	4b5d      	ldr	r3, [pc, #372]	; (801d410 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801d29c:	e1d2      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801d29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d2a4:	d102      	bne.n	801d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 801d2a6:	4b5b      	ldr	r3, [pc, #364]	; (801d414 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801d2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d2aa:	e1cb      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801d2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d2b2:	d102      	bne.n	801d2ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 801d2b4:	4b58      	ldr	r3, [pc, #352]	; (801d418 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801d2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d2b8:	e1c4      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d2be:	e1c1      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801d2c0:	4b56      	ldr	r3, [pc, #344]	; (801d41c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 801d2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d2c4:	e1be      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801d2c6:	2300      	movs	r3, #0
 801d2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d2ca:	bf00      	nop
 801d2cc:	e1ba      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d2d4:	d153      	bne.n	801d37e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 801d2d6:	4b4d      	ldr	r3, [pc, #308]	; (801d40c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d2d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d2da:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801d2de:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801d2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d2e6:	d01f      	beq.n	801d328 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 801d2e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d2ec:	d805      	bhi.n	801d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d00a      	beq.n	801d308 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 801d2f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d2f6:	d00f      	beq.n	801d318 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 801d2f8:	e03d      	b.n	801d376 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 801d2fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d2fe:	d037      	beq.n	801d370 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 801d300:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d304:	d018      	beq.n	801d338 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 801d306:	e036      	b.n	801d376 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d30c:	4618      	mov	r0, r3
 801d30e:	f000 fc57 	bl	801dbc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d314:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d316:	e195      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d318:	f107 0318 	add.w	r3, r7, #24
 801d31c:	4618      	mov	r0, r3
 801d31e:	f000 f9b7 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d322:	69bb      	ldr	r3, [r7, #24]
 801d324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d326:	e18d      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d328:	f107 030c 	add.w	r3, r7, #12
 801d32c:	4618      	mov	r0, r3
 801d32e:	f000 fafb 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d332:	68fb      	ldr	r3, [r7, #12]
 801d334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d336:	e185      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801d338:	4b34      	ldr	r3, [pc, #208]	; (801d40c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d33a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d33c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d340:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801d342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d344:	2b00      	cmp	r3, #0
 801d346:	d102      	bne.n	801d34e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801d348:	4b31      	ldr	r3, [pc, #196]	; (801d410 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801d34a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801d34c:	e17a      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801d34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d354:	d102      	bne.n	801d35c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 801d356:	4b2f      	ldr	r3, [pc, #188]	; (801d414 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801d358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d35a:	e173      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d362:	d102      	bne.n	801d36a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 801d364:	4b2c      	ldr	r3, [pc, #176]	; (801d418 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801d366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d368:	e16c      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801d36a:	2300      	movs	r3, #0
 801d36c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d36e:	e169      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801d370:	4b2a      	ldr	r3, [pc, #168]	; (801d41c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 801d372:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d374:	e166      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801d376:	2300      	movs	r3, #0
 801d378:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d37a:	bf00      	nop
 801d37c:	e162      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d384:	d15d      	bne.n	801d442 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 801d386:	4b21      	ldr	r3, [pc, #132]	; (801d40c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d38a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801d38e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d396:	d01f      	beq.n	801d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 801d398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d39c:	d805      	bhi.n	801d3aa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d00a      	beq.n	801d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 801d3a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d3a6:	d00f      	beq.n	801d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 801d3a8:	e047      	b.n	801d43a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 801d3aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d3ae:	d041      	beq.n	801d434 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 801d3b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d3b4:	d018      	beq.n	801d3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 801d3b6:	e040      	b.n	801d43a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d3b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d3bc:	4618      	mov	r0, r3
 801d3be:	f000 fbff 	bl	801dbc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d3c6:	e13d      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d3c8:	f107 0318 	add.w	r3, r7, #24
 801d3cc:	4618      	mov	r0, r3
 801d3ce:	f000 f95f 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d3d2:	69bb      	ldr	r3, [r7, #24]
 801d3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d3d6:	e135      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d3d8:	f107 030c 	add.w	r3, r7, #12
 801d3dc:	4618      	mov	r0, r3
 801d3de:	f000 faa3 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d3e6:	e12d      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801d3e8:	4b08      	ldr	r3, [pc, #32]	; (801d40c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d3ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d3ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d3f0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801d3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d102      	bne.n	801d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801d3f8:	4b05      	ldr	r3, [pc, #20]	; (801d410 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801d3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801d3fc:	e122      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801d3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d400:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d404:	d10c      	bne.n	801d420 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 801d406:	4b03      	ldr	r3, [pc, #12]	; (801d414 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801d408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d40a:	e11b      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 801d40c:	58024400 	.word	0x58024400
 801d410:	03d09000 	.word	0x03d09000
 801d414:	003d0900 	.word	0x003d0900
 801d418:	007a1200 	.word	0x007a1200
 801d41c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801d420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d426:	d102      	bne.n	801d42e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 801d428:	4b89      	ldr	r3, [pc, #548]	; (801d650 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801d42a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d42c:	e10a      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801d42e:	2300      	movs	r3, #0
 801d430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d432:	e107      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801d434:	4b87      	ldr	r3, [pc, #540]	; (801d654 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 801d436:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d438:	e104      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801d43a:	2300      	movs	r3, #0
 801d43c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d43e:	bf00      	nop
 801d440:	e100      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d448:	d153      	bne.n	801d4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 801d44a:	4b83      	ldr	r3, [pc, #524]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801d44c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d44e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801d452:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d45a:	d01f      	beq.n	801d49c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 801d45c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d460:	d805      	bhi.n	801d46e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801d462:	2b00      	cmp	r3, #0
 801d464:	d00a      	beq.n	801d47c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 801d466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d46a:	d00f      	beq.n	801d48c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 801d46c:	e03d      	b.n	801d4ea <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 801d46e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d472:	d037      	beq.n	801d4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 801d474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d478:	d018      	beq.n	801d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 801d47a:	e036      	b.n	801d4ea <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d47c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d480:	4618      	mov	r0, r3
 801d482:	f000 fb9d 	bl	801dbc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d48a:	e0db      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d48c:	f107 0318 	add.w	r3, r7, #24
 801d490:	4618      	mov	r0, r3
 801d492:	f000 f8fd 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d496:	69bb      	ldr	r3, [r7, #24]
 801d498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d49a:	e0d3      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d49c:	f107 030c 	add.w	r3, r7, #12
 801d4a0:	4618      	mov	r0, r3
 801d4a2:	f000 fa41 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d4aa:	e0cb      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801d4ac:	4b6a      	ldr	r3, [pc, #424]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801d4ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d4b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d4b4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801d4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d102      	bne.n	801d4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801d4bc:	4b67      	ldr	r3, [pc, #412]	; (801d65c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 801d4be:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801d4c0:	e0c0      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801d4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d4c8:	d102      	bne.n	801d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 801d4ca:	4b65      	ldr	r3, [pc, #404]	; (801d660 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801d4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d4ce:	e0b9      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801d4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d4d6:	d102      	bne.n	801d4de <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 801d4d8:	4b5d      	ldr	r3, [pc, #372]	; (801d650 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801d4da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d4dc:	e0b2      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801d4de:	2300      	movs	r3, #0
 801d4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d4e2:	e0af      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801d4e4:	4b5b      	ldr	r3, [pc, #364]	; (801d654 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 801d4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d4e8:	e0ac      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d4ee:	bf00      	nop
 801d4f0:	e0a8      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801d4f8:	d13d      	bne.n	801d576 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 801d4fa:	4b57      	ldr	r3, [pc, #348]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801d4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d4fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d502:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801d504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d50a:	d00c      	beq.n	801d526 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801d50c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d510:	d011      	beq.n	801d536 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 801d512:	2b00      	cmp	r3, #0
 801d514:	d12b      	bne.n	801d56e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d516:	f107 0318 	add.w	r3, r7, #24
 801d51a:	4618      	mov	r0, r3
 801d51c:	f000 f8b8 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d520:	69bb      	ldr	r3, [r7, #24]
 801d522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d524:	e08e      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d526:	f107 030c 	add.w	r3, r7, #12
 801d52a:	4618      	mov	r0, r3
 801d52c:	f000 f9fc 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801d530:	697b      	ldr	r3, [r7, #20]
 801d532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d534:	e086      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801d536:	4b48      	ldr	r3, [pc, #288]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801d538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d53a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d53e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801d540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d542:	2b00      	cmp	r3, #0
 801d544:	d102      	bne.n	801d54c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801d546:	4b45      	ldr	r3, [pc, #276]	; (801d65c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 801d548:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 801d54a:	e07b      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801d54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d54e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d552:	d102      	bne.n	801d55a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 801d554:	4b42      	ldr	r3, [pc, #264]	; (801d660 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801d556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d558:	e074      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801d55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d55c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d560:	d102      	bne.n	801d568 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 801d562:	4b3b      	ldr	r3, [pc, #236]	; (801d650 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801d564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d566:	e06d      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801d568:	2300      	movs	r3, #0
 801d56a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d56c:	e06a      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801d56e:	2300      	movs	r3, #0
 801d570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d572:	bf00      	nop
 801d574:	e066      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d57c:	d11f      	bne.n	801d5be <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 801d57e:	4b36      	ldr	r3, [pc, #216]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801d580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d586:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801d588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d003      	beq.n	801d596 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 801d58e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d592:	d008      	beq.n	801d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 801d594:	e00f      	b.n	801d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d59a:	4618      	mov	r0, r3
 801d59c:	f000 fb10 	bl	801dbc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d5a4:	e04e      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d5a6:	f107 0318 	add.w	r3, r7, #24
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	f000 f870 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801d5b0:	6a3b      	ldr	r3, [r7, #32]
 801d5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d5b4:	e046      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d5ba:	bf00      	nop
 801d5bc:	e042      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d5c4:	d13c      	bne.n	801d640 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 801d5c6:	4b24      	ldr	r3, [pc, #144]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 801d5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d5ca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801d5ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d5d6:	d01e      	beq.n	801d616 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 801d5d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d5dc:	d805      	bhi.n	801d5ea <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d00d      	beq.n	801d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801d5e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d5e6:	d00e      	beq.n	801d606 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 801d5e8:	e026      	b.n	801d638 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 801d5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d5ee:	d01d      	beq.n	801d62c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 801d5f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d5f4:	d01d      	beq.n	801d632 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 801d5f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d5fa:	d014      	beq.n	801d626 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 801d5fc:	e01c      	b.n	801d638 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801d5fe:	f000 f831 	bl	801d664 <HAL_RCCEx_GetD3PCLK1Freq>
 801d602:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 801d604:	e01e      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d606:	f107 0318 	add.w	r3, r7, #24
 801d60a:	4618      	mov	r0, r3
 801d60c:	f000 f840 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d610:	69fb      	ldr	r3, [r7, #28]
 801d612:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d614:	e016      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d616:	f107 030c 	add.w	r3, r7, #12
 801d61a:	4618      	mov	r0, r3
 801d61c:	f000 f984 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d620:	693b      	ldr	r3, [r7, #16]
 801d622:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d624:	e00e      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 801d626:	4b0d      	ldr	r3, [pc, #52]	; (801d65c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 801d628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d62a:	e00b      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 801d62c:	4b0c      	ldr	r3, [pc, #48]	; (801d660 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 801d62e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d630:	e008      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 801d632:	4b07      	ldr	r3, [pc, #28]	; (801d650 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 801d634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d636:	e005      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 801d638:	2300      	movs	r3, #0
 801d63a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801d63c:	bf00      	nop
 801d63e:	e001      	b.n	801d644 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 801d640:	2300      	movs	r3, #0
 801d642:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 801d644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801d646:	4618      	mov	r0, r3
 801d648:	3740      	adds	r7, #64	; 0x40
 801d64a:	46bd      	mov	sp, r7
 801d64c:	bd80      	pop	{r7, pc}
 801d64e:	bf00      	nop
 801d650:	007a1200 	.word	0x007a1200
 801d654:	00bb8000 	.word	0x00bb8000
 801d658:	58024400 	.word	0x58024400
 801d65c:	03d09000 	.word	0x03d09000
 801d660:	003d0900 	.word	0x003d0900

0801d664 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801d664:	b580      	push	{r7, lr}
 801d666:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801d668:	f7fe fdf8 	bl	801c25c <HAL_RCC_GetHCLKFreq>
 801d66c:	4601      	mov	r1, r0
 801d66e:	4b06      	ldr	r3, [pc, #24]	; (801d688 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801d670:	6a1b      	ldr	r3, [r3, #32]
 801d672:	091b      	lsrs	r3, r3, #4
 801d674:	f003 0307 	and.w	r3, r3, #7
 801d678:	4a04      	ldr	r2, [pc, #16]	; (801d68c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801d67a:	5cd3      	ldrb	r3, [r2, r3]
 801d67c:	f003 031f 	and.w	r3, r3, #31
 801d680:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801d684:	4618      	mov	r0, r3
 801d686:	bd80      	pop	{r7, pc}
 801d688:	58024400 	.word	0x58024400
 801d68c:	0802fc1c 	.word	0x0802fc1c

0801d690 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 801d690:	b480      	push	{r7}
 801d692:	b089      	sub	sp, #36	; 0x24
 801d694:	af00      	add	r7, sp, #0
 801d696:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d698:	4b9d      	ldr	r3, [pc, #628]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d69c:	f003 0303 	and.w	r3, r3, #3
 801d6a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 801d6a2:	4b9b      	ldr	r3, [pc, #620]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d6a6:	0b1b      	lsrs	r3, r3, #12
 801d6a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d6ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801d6ae:	4b98      	ldr	r3, [pc, #608]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d6b2:	091b      	lsrs	r3, r3, #4
 801d6b4:	f003 0301 	and.w	r3, r3, #1
 801d6b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801d6ba:	4b95      	ldr	r3, [pc, #596]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6be:	08db      	lsrs	r3, r3, #3
 801d6c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d6c4:	693a      	ldr	r2, [r7, #16]
 801d6c6:	fb02 f303 	mul.w	r3, r2, r3
 801d6ca:	ee07 3a90 	vmov	s15, r3
 801d6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d6d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801d6d6:	697b      	ldr	r3, [r7, #20]
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	f000 810a 	beq.w	801d8f2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 801d6de:	69bb      	ldr	r3, [r7, #24]
 801d6e0:	2b01      	cmp	r3, #1
 801d6e2:	d05a      	beq.n	801d79a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 801d6e4:	2b01      	cmp	r3, #1
 801d6e6:	d302      	bcc.n	801d6ee <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 801d6e8:	2b02      	cmp	r3, #2
 801d6ea:	d078      	beq.n	801d7de <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 801d6ec:	e099      	b.n	801d822 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d6ee:	4b88      	ldr	r3, [pc, #544]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	f003 0320 	and.w	r3, r3, #32
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d02d      	beq.n	801d756 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801d6fa:	4b85      	ldr	r3, [pc, #532]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	08db      	lsrs	r3, r3, #3
 801d700:	f003 0303 	and.w	r3, r3, #3
 801d704:	4a83      	ldr	r2, [pc, #524]	; (801d914 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 801d706:	fa22 f303 	lsr.w	r3, r2, r3
 801d70a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d70c:	68bb      	ldr	r3, [r7, #8]
 801d70e:	ee07 3a90 	vmov	s15, r3
 801d712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d716:	697b      	ldr	r3, [r7, #20]
 801d718:	ee07 3a90 	vmov	s15, r3
 801d71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d724:	4b7a      	ldr	r3, [pc, #488]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d72c:	ee07 3a90 	vmov	s15, r3
 801d730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d734:	ed97 6a03 	vldr	s12, [r7, #12]
 801d738:	eddf 5a77 	vldr	s11, [pc, #476]	; 801d918 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d73c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d74c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d750:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801d754:	e087      	b.n	801d866 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d756:	697b      	ldr	r3, [r7, #20]
 801d758:	ee07 3a90 	vmov	s15, r3
 801d75c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d760:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801d91c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 801d764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d768:	4b69      	ldr	r3, [pc, #420]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d770:	ee07 3a90 	vmov	s15, r3
 801d774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d778:	ed97 6a03 	vldr	s12, [r7, #12]
 801d77c:	eddf 5a66 	vldr	s11, [pc, #408]	; 801d918 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d788:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d78c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d790:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d794:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d798:	e065      	b.n	801d866 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d79a:	697b      	ldr	r3, [r7, #20]
 801d79c:	ee07 3a90 	vmov	s15, r3
 801d7a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d7a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801d920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 801d7a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d7ac:	4b58      	ldr	r3, [pc, #352]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d7b4:	ee07 3a90 	vmov	s15, r3
 801d7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d7bc:	ed97 6a03 	vldr	s12, [r7, #12]
 801d7c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 801d918 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d7c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d7c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d7cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d7d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d7d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d7d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d7dc:	e043      	b.n	801d866 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d7de:	697b      	ldr	r3, [r7, #20]
 801d7e0:	ee07 3a90 	vmov	s15, r3
 801d7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d7e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801d924 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 801d7ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d7f0:	4b47      	ldr	r3, [pc, #284]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d7f8:	ee07 3a90 	vmov	s15, r3
 801d7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d800:	ed97 6a03 	vldr	s12, [r7, #12]
 801d804:	eddf 5a44 	vldr	s11, [pc, #272]	; 801d918 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d80c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d818:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d81c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d820:	e021      	b.n	801d866 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801d822:	697b      	ldr	r3, [r7, #20]
 801d824:	ee07 3a90 	vmov	s15, r3
 801d828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d82c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 801d920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 801d830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d834:	4b36      	ldr	r3, [pc, #216]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d83c:	ee07 3a90 	vmov	s15, r3
 801d840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d844:	ed97 6a03 	vldr	s12, [r7, #12]
 801d848:	eddf 5a33 	vldr	s11, [pc, #204]	; 801d918 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801d84c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d85c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d860:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801d864:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 801d866:	4b2a      	ldr	r3, [pc, #168]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d86a:	0a5b      	lsrs	r3, r3, #9
 801d86c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d870:	ee07 3a90 	vmov	s15, r3
 801d874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d87c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d880:	edd7 6a07 	vldr	s13, [r7, #28]
 801d884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d88c:	ee17 2a90 	vmov	r2, s15
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 801d894:	4b1e      	ldr	r3, [pc, #120]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d898:	0c1b      	lsrs	r3, r3, #16
 801d89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d89e:	ee07 3a90 	vmov	s15, r3
 801d8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d8aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d8ae:	edd7 6a07 	vldr	s13, [r7, #28]
 801d8b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d8b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d8ba:	ee17 2a90 	vmov	r2, s15
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 801d8c2:	4b13      	ldr	r3, [pc, #76]	; (801d910 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801d8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8c6:	0e1b      	lsrs	r3, r3, #24
 801d8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d8cc:	ee07 3a90 	vmov	s15, r3
 801d8d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d8d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d8dc:	edd7 6a07 	vldr	s13, [r7, #28]
 801d8e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d8e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d8e8:	ee17 2a90 	vmov	r2, s15
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801d8f0:	e008      	b.n	801d904 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	2200      	movs	r2, #0
 801d8f6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	2200      	movs	r2, #0
 801d8fc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	2200      	movs	r2, #0
 801d902:	609a      	str	r2, [r3, #8]
}
 801d904:	bf00      	nop
 801d906:	3724      	adds	r7, #36	; 0x24
 801d908:	46bd      	mov	sp, r7
 801d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d90e:	4770      	bx	lr
 801d910:	58024400 	.word	0x58024400
 801d914:	03d09000 	.word	0x03d09000
 801d918:	46000000 	.word	0x46000000
 801d91c:	4c742400 	.word	0x4c742400
 801d920:	4a742400 	.word	0x4a742400
 801d924:	4af42400 	.word	0x4af42400

0801d928 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 801d928:	b480      	push	{r7}
 801d92a:	b089      	sub	sp, #36	; 0x24
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d930:	4b9d      	ldr	r3, [pc, #628]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d934:	f003 0303 	and.w	r3, r3, #3
 801d938:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801d93a:	4b9b      	ldr	r3, [pc, #620]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d93e:	0d1b      	lsrs	r3, r3, #20
 801d940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d944:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801d946:	4b98      	ldr	r3, [pc, #608]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d94a:	0a1b      	lsrs	r3, r3, #8
 801d94c:	f003 0301 	and.w	r3, r3, #1
 801d950:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 801d952:	4b95      	ldr	r3, [pc, #596]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d956:	08db      	lsrs	r3, r3, #3
 801d958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d95c:	693a      	ldr	r2, [r7, #16]
 801d95e:	fb02 f303 	mul.w	r3, r2, r3
 801d962:	ee07 3a90 	vmov	s15, r3
 801d966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d96a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801d96e:	697b      	ldr	r3, [r7, #20]
 801d970:	2b00      	cmp	r3, #0
 801d972:	f000 810a 	beq.w	801db8a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 801d976:	69bb      	ldr	r3, [r7, #24]
 801d978:	2b01      	cmp	r3, #1
 801d97a:	d05a      	beq.n	801da32 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 801d97c:	2b01      	cmp	r3, #1
 801d97e:	d302      	bcc.n	801d986 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 801d980:	2b02      	cmp	r3, #2
 801d982:	d078      	beq.n	801da76 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 801d984:	e099      	b.n	801daba <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d986:	4b88      	ldr	r3, [pc, #544]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d988:	681b      	ldr	r3, [r3, #0]
 801d98a:	f003 0320 	and.w	r3, r3, #32
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d02d      	beq.n	801d9ee <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801d992:	4b85      	ldr	r3, [pc, #532]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d994:	681b      	ldr	r3, [r3, #0]
 801d996:	08db      	lsrs	r3, r3, #3
 801d998:	f003 0303 	and.w	r3, r3, #3
 801d99c:	4a83      	ldr	r2, [pc, #524]	; (801dbac <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 801d99e:	fa22 f303 	lsr.w	r3, r2, r3
 801d9a2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801d9a4:	68bb      	ldr	r3, [r7, #8]
 801d9a6:	ee07 3a90 	vmov	s15, r3
 801d9aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d9ae:	697b      	ldr	r3, [r7, #20]
 801d9b0:	ee07 3a90 	vmov	s15, r3
 801d9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d9b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d9bc:	4b7a      	ldr	r3, [pc, #488]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801d9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d9c4:	ee07 3a90 	vmov	s15, r3
 801d9c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d9cc:	ed97 6a03 	vldr	s12, [r7, #12]
 801d9d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 801dbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801d9d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d9d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d9dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d9e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d9e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d9e8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801d9ec:	e087      	b.n	801dafe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801d9ee:	697b      	ldr	r3, [r7, #20]
 801d9f0:	ee07 3a90 	vmov	s15, r3
 801d9f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d9f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801dbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 801d9fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801da00:	4b69      	ldr	r3, [pc, #420]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801da02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801da08:	ee07 3a90 	vmov	s15, r3
 801da0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da10:	ed97 6a03 	vldr	s12, [r7, #12]
 801da14:	eddf 5a66 	vldr	s11, [pc, #408]	; 801dbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801da18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801da1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801da20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801da28:	ee67 7a27 	vmul.f32	s15, s14, s15
 801da2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801da30:	e065      	b.n	801dafe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801da32:	697b      	ldr	r3, [r7, #20]
 801da34:	ee07 3a90 	vmov	s15, r3
 801da38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801dbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 801da40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801da44:	4b58      	ldr	r3, [pc, #352]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801da46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801da4c:	ee07 3a90 	vmov	s15, r3
 801da50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da54:	ed97 6a03 	vldr	s12, [r7, #12]
 801da58:	eddf 5a55 	vldr	s11, [pc, #340]	; 801dbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801da5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801da60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801da64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801da6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801da70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801da74:	e043      	b.n	801dafe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801da76:	697b      	ldr	r3, [r7, #20]
 801da78:	ee07 3a90 	vmov	s15, r3
 801da7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801dbbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 801da84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801da88:	4b47      	ldr	r3, [pc, #284]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801da8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801da90:	ee07 3a90 	vmov	s15, r3
 801da94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da98:	ed97 6a03 	vldr	s12, [r7, #12]
 801da9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 801dbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801daa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801daa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801daa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801daac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dab4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801dab8:	e021      	b.n	801dafe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801daba:	697b      	ldr	r3, [r7, #20]
 801dabc:	ee07 3a90 	vmov	s15, r3
 801dac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dac4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 801dbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 801dac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dacc:	4b36      	ldr	r3, [pc, #216]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801dace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dad4:	ee07 3a90 	vmov	s15, r3
 801dad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dadc:	ed97 6a03 	vldr	s12, [r7, #12]
 801dae0:	eddf 5a33 	vldr	s11, [pc, #204]	; 801dbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 801dae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801daec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801daf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801daf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801daf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801dafc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 801dafe:	4b2a      	ldr	r3, [pc, #168]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801db00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db02:	0a5b      	lsrs	r3, r3, #9
 801db04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db08:	ee07 3a90 	vmov	s15, r3
 801db0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801db14:	ee37 7a87 	vadd.f32	s14, s15, s14
 801db18:	edd7 6a07 	vldr	s13, [r7, #28]
 801db1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801db20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db24:	ee17 2a90 	vmov	r2, s15
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801db2c:	4b1e      	ldr	r3, [pc, #120]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801db2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db30:	0c1b      	lsrs	r3, r3, #16
 801db32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db36:	ee07 3a90 	vmov	s15, r3
 801db3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801db42:	ee37 7a87 	vadd.f32	s14, s15, s14
 801db46:	edd7 6a07 	vldr	s13, [r7, #28]
 801db4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801db4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db52:	ee17 2a90 	vmov	r2, s15
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 801db5a:	4b13      	ldr	r3, [pc, #76]	; (801dba8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801db5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db5e:	0e1b      	lsrs	r3, r3, #24
 801db60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db64:	ee07 3a90 	vmov	s15, r3
 801db68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801db70:	ee37 7a87 	vadd.f32	s14, s15, s14
 801db74:	edd7 6a07 	vldr	s13, [r7, #28]
 801db78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801db7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db80:	ee17 2a90 	vmov	r2, s15
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801db88:	e008      	b.n	801db9c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	2200      	movs	r2, #0
 801db8e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	2200      	movs	r2, #0
 801db94:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	2200      	movs	r2, #0
 801db9a:	609a      	str	r2, [r3, #8]
}
 801db9c:	bf00      	nop
 801db9e:	3724      	adds	r7, #36	; 0x24
 801dba0:	46bd      	mov	sp, r7
 801dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dba6:	4770      	bx	lr
 801dba8:	58024400 	.word	0x58024400
 801dbac:	03d09000 	.word	0x03d09000
 801dbb0:	46000000 	.word	0x46000000
 801dbb4:	4c742400 	.word	0x4c742400
 801dbb8:	4a742400 	.word	0x4a742400
 801dbbc:	4af42400 	.word	0x4af42400

0801dbc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 801dbc0:	b480      	push	{r7}
 801dbc2:	b089      	sub	sp, #36	; 0x24
 801dbc4:	af00      	add	r7, sp, #0
 801dbc6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dbc8:	4b9d      	ldr	r3, [pc, #628]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbcc:	f003 0303 	and.w	r3, r3, #3
 801dbd0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 801dbd2:	4b9b      	ldr	r3, [pc, #620]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbd6:	091b      	lsrs	r3, r3, #4
 801dbd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dbdc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801dbde:	4b98      	ldr	r3, [pc, #608]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbe2:	f003 0301 	and.w	r3, r3, #1
 801dbe6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801dbe8:	4b95      	ldr	r3, [pc, #596]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dbea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dbec:	08db      	lsrs	r3, r3, #3
 801dbee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dbf2:	693a      	ldr	r2, [r7, #16]
 801dbf4:	fb02 f303 	mul.w	r3, r2, r3
 801dbf8:	ee07 3a90 	vmov	s15, r3
 801dbfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801dc04:	697b      	ldr	r3, [r7, #20]
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	f000 810a 	beq.w	801de20 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 801dc0c:	69bb      	ldr	r3, [r7, #24]
 801dc0e:	2b01      	cmp	r3, #1
 801dc10:	d05a      	beq.n	801dcc8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 801dc12:	2b01      	cmp	r3, #1
 801dc14:	d302      	bcc.n	801dc1c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 801dc16:	2b02      	cmp	r3, #2
 801dc18:	d078      	beq.n	801dd0c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 801dc1a:	e099      	b.n	801dd50 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dc1c:	4b88      	ldr	r3, [pc, #544]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dc1e:	681b      	ldr	r3, [r3, #0]
 801dc20:	f003 0320 	and.w	r3, r3, #32
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d02d      	beq.n	801dc84 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801dc28:	4b85      	ldr	r3, [pc, #532]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	08db      	lsrs	r3, r3, #3
 801dc2e:	f003 0303 	and.w	r3, r3, #3
 801dc32:	4a84      	ldr	r2, [pc, #528]	; (801de44 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 801dc34:	fa22 f303 	lsr.w	r3, r2, r3
 801dc38:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801dc3a:	68bb      	ldr	r3, [r7, #8]
 801dc3c:	ee07 3a90 	vmov	s15, r3
 801dc40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc44:	697b      	ldr	r3, [r7, #20]
 801dc46:	ee07 3a90 	vmov	s15, r3
 801dc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc52:	4b7b      	ldr	r3, [pc, #492]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc5a:	ee07 3a90 	vmov	s15, r3
 801dc5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc62:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc66:	eddf 5a78 	vldr	s11, [pc, #480]	; 801de48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801dc6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801dc82:	e087      	b.n	801dd94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801dc84:	697b      	ldr	r3, [r7, #20]
 801dc86:	ee07 3a90 	vmov	s15, r3
 801dc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801de4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 801dc92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc96:	4b6a      	ldr	r3, [pc, #424]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc9e:	ee07 3a90 	vmov	s15, r3
 801dca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dca6:	ed97 6a03 	vldr	s12, [r7, #12]
 801dcaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 801de48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801dcae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dcb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dcb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dcba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dcbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dcc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801dcc6:	e065      	b.n	801dd94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801dcc8:	697b      	ldr	r3, [r7, #20]
 801dcca:	ee07 3a90 	vmov	s15, r3
 801dcce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801de50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 801dcd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dcda:	4b59      	ldr	r3, [pc, #356]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dce2:	ee07 3a90 	vmov	s15, r3
 801dce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dcea:	ed97 6a03 	vldr	s12, [r7, #12]
 801dcee:	eddf 5a56 	vldr	s11, [pc, #344]	; 801de48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801dcf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dcf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dcfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dcfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd02:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801dd0a:	e043      	b.n	801dd94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801dd0c:	697b      	ldr	r3, [r7, #20]
 801dd0e:	ee07 3a90 	vmov	s15, r3
 801dd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801de54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801dd1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd1e:	4b48      	ldr	r3, [pc, #288]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd26:	ee07 3a90 	vmov	s15, r3
 801dd2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd2e:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd32:	eddf 5a45 	vldr	s11, [pc, #276]	; 801de48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801dd36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd46:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801dd4e:	e021      	b.n	801dd94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801dd50:	697b      	ldr	r3, [r7, #20]
 801dd52:	ee07 3a90 	vmov	s15, r3
 801dd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801de50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 801dd5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd62:	4b37      	ldr	r3, [pc, #220]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd6a:	ee07 3a90 	vmov	s15, r3
 801dd6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd72:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd76:	eddf 5a34 	vldr	s11, [pc, #208]	; 801de48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801dd7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801dd92:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 801dd94:	4b2a      	ldr	r3, [pc, #168]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801dd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd98:	0a5b      	lsrs	r3, r3, #9
 801dd9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dd9e:	ee07 3a90 	vmov	s15, r3
 801dda2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dda6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ddaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ddae:	edd7 6a07 	vldr	s13, [r7, #28]
 801ddb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ddb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ddba:	ee17 2a90 	vmov	r2, s15
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 801ddc2:	4b1f      	ldr	r3, [pc, #124]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801ddc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ddc6:	0c1b      	lsrs	r3, r3, #16
 801ddc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ddcc:	ee07 3a90 	vmov	s15, r3
 801ddd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ddd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dddc:	edd7 6a07 	vldr	s13, [r7, #28]
 801dde0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dde4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dde8:	ee17 2a90 	vmov	r2, s15
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 801ddf0:	4b13      	ldr	r3, [pc, #76]	; (801de40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801ddf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ddf4:	0e1b      	lsrs	r3, r3, #24
 801ddf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ddfa:	ee07 3a90 	vmov	s15, r3
 801ddfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de06:	ee37 7a87 	vadd.f32	s14, s15, s14
 801de0a:	edd7 6a07 	vldr	s13, [r7, #28]
 801de0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801de12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801de16:	ee17 2a90 	vmov	r2, s15
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801de1e:	e008      	b.n	801de32 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	2200      	movs	r2, #0
 801de24:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	2200      	movs	r2, #0
 801de2a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	2200      	movs	r2, #0
 801de30:	609a      	str	r2, [r3, #8]
}
 801de32:	bf00      	nop
 801de34:	3724      	adds	r7, #36	; 0x24
 801de36:	46bd      	mov	sp, r7
 801de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de3c:	4770      	bx	lr
 801de3e:	bf00      	nop
 801de40:	58024400 	.word	0x58024400
 801de44:	03d09000 	.word	0x03d09000
 801de48:	46000000 	.word	0x46000000
 801de4c:	4c742400 	.word	0x4c742400
 801de50:	4a742400 	.word	0x4a742400
 801de54:	4af42400 	.word	0x4af42400

0801de58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801de58:	b580      	push	{r7, lr}
 801de5a:	b084      	sub	sp, #16
 801de5c:	af00      	add	r7, sp, #0
 801de5e:	6078      	str	r0, [r7, #4]
 801de60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801de62:	2300      	movs	r3, #0
 801de64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801de66:	4b53      	ldr	r3, [pc, #332]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801de68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de6a:	f003 0303 	and.w	r3, r3, #3
 801de6e:	2b03      	cmp	r3, #3
 801de70:	d101      	bne.n	801de76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801de72:	2301      	movs	r3, #1
 801de74:	e099      	b.n	801dfaa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801de76:	4b4f      	ldr	r3, [pc, #316]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	4a4e      	ldr	r2, [pc, #312]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801de7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801de80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801de82:	f7f6 ff37 	bl	8014cf4 <HAL_GetTick>
 801de86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801de88:	e008      	b.n	801de9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801de8a:	f7f6 ff33 	bl	8014cf4 <HAL_GetTick>
 801de8e:	4602      	mov	r2, r0
 801de90:	68bb      	ldr	r3, [r7, #8]
 801de92:	1ad3      	subs	r3, r2, r3
 801de94:	2b02      	cmp	r3, #2
 801de96:	d901      	bls.n	801de9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801de98:	2303      	movs	r3, #3
 801de9a:	e086      	b.n	801dfaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801de9c:	4b45      	ldr	r3, [pc, #276]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d1f0      	bne.n	801de8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801dea8:	4b42      	ldr	r3, [pc, #264]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801deaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801deac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	031b      	lsls	r3, r3, #12
 801deb6:	493f      	ldr	r1, [pc, #252]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801deb8:	4313      	orrs	r3, r2
 801deba:	628b      	str	r3, [r1, #40]	; 0x28
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	685b      	ldr	r3, [r3, #4]
 801dec0:	3b01      	subs	r3, #1
 801dec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	689b      	ldr	r3, [r3, #8]
 801deca:	3b01      	subs	r3, #1
 801decc:	025b      	lsls	r3, r3, #9
 801dece:	b29b      	uxth	r3, r3
 801ded0:	431a      	orrs	r2, r3
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	68db      	ldr	r3, [r3, #12]
 801ded6:	3b01      	subs	r3, #1
 801ded8:	041b      	lsls	r3, r3, #16
 801deda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801dede:	431a      	orrs	r2, r3
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	691b      	ldr	r3, [r3, #16]
 801dee4:	3b01      	subs	r3, #1
 801dee6:	061b      	lsls	r3, r3, #24
 801dee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801deec:	4931      	ldr	r1, [pc, #196]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801deee:	4313      	orrs	r3, r2
 801def0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801def2:	4b30      	ldr	r3, [pc, #192]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801def4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801def6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	695b      	ldr	r3, [r3, #20]
 801defe:	492d      	ldr	r1, [pc, #180]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df00:	4313      	orrs	r3, r2
 801df02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801df04:	4b2b      	ldr	r3, [pc, #172]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df08:	f023 0220 	bic.w	r2, r3, #32
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	699b      	ldr	r3, [r3, #24]
 801df10:	4928      	ldr	r1, [pc, #160]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df12:	4313      	orrs	r3, r2
 801df14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801df16:	4b27      	ldr	r3, [pc, #156]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df1a:	4a26      	ldr	r2, [pc, #152]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df1c:	f023 0310 	bic.w	r3, r3, #16
 801df20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801df22:	4b24      	ldr	r3, [pc, #144]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801df26:	4b24      	ldr	r3, [pc, #144]	; (801dfb8 <RCCEx_PLL2_Config+0x160>)
 801df28:	4013      	ands	r3, r2
 801df2a:	687a      	ldr	r2, [r7, #4]
 801df2c:	69d2      	ldr	r2, [r2, #28]
 801df2e:	00d2      	lsls	r2, r2, #3
 801df30:	4920      	ldr	r1, [pc, #128]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df32:	4313      	orrs	r3, r2
 801df34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801df36:	4b1f      	ldr	r3, [pc, #124]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df3a:	4a1e      	ldr	r2, [pc, #120]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df3c:	f043 0310 	orr.w	r3, r3, #16
 801df40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801df42:	683b      	ldr	r3, [r7, #0]
 801df44:	2b00      	cmp	r3, #0
 801df46:	d106      	bne.n	801df56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801df48:	4b1a      	ldr	r3, [pc, #104]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df4c:	4a19      	ldr	r2, [pc, #100]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801df52:	62d3      	str	r3, [r2, #44]	; 0x2c
 801df54:	e00f      	b.n	801df76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801df56:	683b      	ldr	r3, [r7, #0]
 801df58:	2b01      	cmp	r3, #1
 801df5a:	d106      	bne.n	801df6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801df5c:	4b15      	ldr	r3, [pc, #84]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df60:	4a14      	ldr	r2, [pc, #80]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801df66:	62d3      	str	r3, [r2, #44]	; 0x2c
 801df68:	e005      	b.n	801df76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801df6a:	4b12      	ldr	r3, [pc, #72]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df6e:	4a11      	ldr	r2, [pc, #68]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801df74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801df76:	4b0f      	ldr	r3, [pc, #60]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	4a0e      	ldr	r2, [pc, #56]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801df80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801df82:	f7f6 feb7 	bl	8014cf4 <HAL_GetTick>
 801df86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801df88:	e008      	b.n	801df9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801df8a:	f7f6 feb3 	bl	8014cf4 <HAL_GetTick>
 801df8e:	4602      	mov	r2, r0
 801df90:	68bb      	ldr	r3, [r7, #8]
 801df92:	1ad3      	subs	r3, r2, r3
 801df94:	2b02      	cmp	r3, #2
 801df96:	d901      	bls.n	801df9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801df98:	2303      	movs	r3, #3
 801df9a:	e006      	b.n	801dfaa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801df9c:	4b05      	ldr	r3, [pc, #20]	; (801dfb4 <RCCEx_PLL2_Config+0x15c>)
 801df9e:	681b      	ldr	r3, [r3, #0]
 801dfa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d0f0      	beq.n	801df8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801dfa8:	7bfb      	ldrb	r3, [r7, #15]
}
 801dfaa:	4618      	mov	r0, r3
 801dfac:	3710      	adds	r7, #16
 801dfae:	46bd      	mov	sp, r7
 801dfb0:	bd80      	pop	{r7, pc}
 801dfb2:	bf00      	nop
 801dfb4:	58024400 	.word	0x58024400
 801dfb8:	ffff0007 	.word	0xffff0007

0801dfbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801dfbc:	b580      	push	{r7, lr}
 801dfbe:	b084      	sub	sp, #16
 801dfc0:	af00      	add	r7, sp, #0
 801dfc2:	6078      	str	r0, [r7, #4]
 801dfc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801dfc6:	2300      	movs	r3, #0
 801dfc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801dfca:	4b53      	ldr	r3, [pc, #332]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801dfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dfce:	f003 0303 	and.w	r3, r3, #3
 801dfd2:	2b03      	cmp	r3, #3
 801dfd4:	d101      	bne.n	801dfda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801dfd6:	2301      	movs	r3, #1
 801dfd8:	e099      	b.n	801e10e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801dfda:	4b4f      	ldr	r3, [pc, #316]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	4a4e      	ldr	r2, [pc, #312]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801dfe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801dfe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801dfe6:	f7f6 fe85 	bl	8014cf4 <HAL_GetTick>
 801dfea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801dfec:	e008      	b.n	801e000 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801dfee:	f7f6 fe81 	bl	8014cf4 <HAL_GetTick>
 801dff2:	4602      	mov	r2, r0
 801dff4:	68bb      	ldr	r3, [r7, #8]
 801dff6:	1ad3      	subs	r3, r2, r3
 801dff8:	2b02      	cmp	r3, #2
 801dffa:	d901      	bls.n	801e000 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801dffc:	2303      	movs	r3, #3
 801dffe:	e086      	b.n	801e10e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e000:	4b45      	ldr	r3, [pc, #276]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e008:	2b00      	cmp	r3, #0
 801e00a:	d1f0      	bne.n	801dfee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801e00c:	4b42      	ldr	r3, [pc, #264]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e010:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	681b      	ldr	r3, [r3, #0]
 801e018:	051b      	lsls	r3, r3, #20
 801e01a:	493f      	ldr	r1, [pc, #252]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e01c:	4313      	orrs	r3, r2
 801e01e:	628b      	str	r3, [r1, #40]	; 0x28
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	685b      	ldr	r3, [r3, #4]
 801e024:	3b01      	subs	r3, #1
 801e026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	689b      	ldr	r3, [r3, #8]
 801e02e:	3b01      	subs	r3, #1
 801e030:	025b      	lsls	r3, r3, #9
 801e032:	b29b      	uxth	r3, r3
 801e034:	431a      	orrs	r2, r3
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	68db      	ldr	r3, [r3, #12]
 801e03a:	3b01      	subs	r3, #1
 801e03c:	041b      	lsls	r3, r3, #16
 801e03e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e042:	431a      	orrs	r2, r3
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	691b      	ldr	r3, [r3, #16]
 801e048:	3b01      	subs	r3, #1
 801e04a:	061b      	lsls	r3, r3, #24
 801e04c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e050:	4931      	ldr	r1, [pc, #196]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e052:	4313      	orrs	r3, r2
 801e054:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801e056:	4b30      	ldr	r3, [pc, #192]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e05a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	695b      	ldr	r3, [r3, #20]
 801e062:	492d      	ldr	r1, [pc, #180]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e064:	4313      	orrs	r3, r2
 801e066:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801e068:	4b2b      	ldr	r3, [pc, #172]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e06c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	699b      	ldr	r3, [r3, #24]
 801e074:	4928      	ldr	r1, [pc, #160]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e076:	4313      	orrs	r3, r2
 801e078:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801e07a:	4b27      	ldr	r3, [pc, #156]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e07e:	4a26      	ldr	r2, [pc, #152]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801e086:	4b24      	ldr	r3, [pc, #144]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e08a:	4b24      	ldr	r3, [pc, #144]	; (801e11c <RCCEx_PLL3_Config+0x160>)
 801e08c:	4013      	ands	r3, r2
 801e08e:	687a      	ldr	r2, [r7, #4]
 801e090:	69d2      	ldr	r2, [r2, #28]
 801e092:	00d2      	lsls	r2, r2, #3
 801e094:	4920      	ldr	r1, [pc, #128]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e096:	4313      	orrs	r3, r2
 801e098:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801e09a:	4b1f      	ldr	r3, [pc, #124]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e09e:	4a1e      	ldr	r2, [pc, #120]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e0a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e0a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801e0a6:	683b      	ldr	r3, [r7, #0]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d106      	bne.n	801e0ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801e0ac:	4b1a      	ldr	r3, [pc, #104]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0b0:	4a19      	ldr	r2, [pc, #100]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e0b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801e0b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e0b8:	e00f      	b.n	801e0da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801e0ba:	683b      	ldr	r3, [r7, #0]
 801e0bc:	2b01      	cmp	r3, #1
 801e0be:	d106      	bne.n	801e0ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801e0c0:	4b15      	ldr	r3, [pc, #84]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0c4:	4a14      	ldr	r2, [pc, #80]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e0c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801e0ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e0cc:	e005      	b.n	801e0da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801e0ce:	4b12      	ldr	r3, [pc, #72]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0d2:	4a11      	ldr	r2, [pc, #68]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e0d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e0d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801e0da:	4b0f      	ldr	r3, [pc, #60]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	4a0e      	ldr	r2, [pc, #56]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e0e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e0e6:	f7f6 fe05 	bl	8014cf4 <HAL_GetTick>
 801e0ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e0ec:	e008      	b.n	801e100 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801e0ee:	f7f6 fe01 	bl	8014cf4 <HAL_GetTick>
 801e0f2:	4602      	mov	r2, r0
 801e0f4:	68bb      	ldr	r3, [r7, #8]
 801e0f6:	1ad3      	subs	r3, r2, r3
 801e0f8:	2b02      	cmp	r3, #2
 801e0fa:	d901      	bls.n	801e100 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e0fc:	2303      	movs	r3, #3
 801e0fe:	e006      	b.n	801e10e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e100:	4b05      	ldr	r3, [pc, #20]	; (801e118 <RCCEx_PLL3_Config+0x15c>)
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e108:	2b00      	cmp	r3, #0
 801e10a:	d0f0      	beq.n	801e0ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801e10c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e10e:	4618      	mov	r0, r3
 801e110:	3710      	adds	r7, #16
 801e112:	46bd      	mov	sp, r7
 801e114:	bd80      	pop	{r7, pc}
 801e116:	bf00      	nop
 801e118:	58024400 	.word	0x58024400
 801e11c:	ffff0007 	.word	0xffff0007

0801e120 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801e120:	b580      	push	{r7, lr}
 801e122:	b08a      	sub	sp, #40	; 0x28
 801e124:	af00      	add	r7, sp, #0
 801e126:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d101      	bne.n	801e132 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801e12e:	2301      	movs	r3, #1
 801e130:	e07c      	b.n	801e22c <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e138:	b2db      	uxtb	r3, r3
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	d10c      	bne.n	801e158 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	2200      	movs	r2, #0
 801e142:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	699b      	ldr	r3, [r3, #24]
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d102      	bne.n	801e152 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	2202      	movs	r2, #2
 801e150:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801e152:	6878      	ldr	r0, [r7, #4]
 801e154:	f7f5 f94e 	bl	80133f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	2203      	movs	r2, #3
 801e15c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801e160:	6878      	ldr	r0, [r7, #4]
 801e162:	f000 f867 	bl	801e234 <HAL_SD_InitCard>
 801e166:	4603      	mov	r3, r0
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d001      	beq.n	801e170 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 801e16c:	2301      	movs	r3, #1
 801e16e:	e05d      	b.n	801e22c <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801e170:	f107 0308 	add.w	r3, r7, #8
 801e174:	4619      	mov	r1, r3
 801e176:	6878      	ldr	r0, [r7, #4]
 801e178:	f000 fdb6 	bl	801ece8 <HAL_SD_GetCardStatus>
 801e17c:	4603      	mov	r3, r0
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d001      	beq.n	801e186 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 801e182:	2301      	movs	r3, #1
 801e184:	e052      	b.n	801e22c <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 801e186:	7e3b      	ldrb	r3, [r7, #24]
 801e188:	b2db      	uxtb	r3, r3
 801e18a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 801e18c:	7e7b      	ldrb	r3, [r7, #25]
 801e18e:	b2db      	uxtb	r3, r3
 801e190:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e196:	2b01      	cmp	r3, #1
 801e198:	d10a      	bne.n	801e1b0 <HAL_SD_Init+0x90>
 801e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d102      	bne.n	801e1a6 <HAL_SD_Init+0x86>
 801e1a0:	6a3b      	ldr	r3, [r7, #32]
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	d004      	beq.n	801e1b0 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e1ac:	65da      	str	r2, [r3, #92]	; 0x5c
 801e1ae:	e00b      	b.n	801e1c8 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e1b4:	2b01      	cmp	r3, #1
 801e1b6:	d104      	bne.n	801e1c2 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e1be:	65da      	str	r2, [r3, #92]	; 0x5c
 801e1c0:	e002      	b.n	801e1c8 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	2200      	movs	r2, #0
 801e1c6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	68db      	ldr	r3, [r3, #12]
 801e1cc:	4619      	mov	r1, r3
 801e1ce:	6878      	ldr	r0, [r7, #4]
 801e1d0:	f000 fe6c 	bl	801eeac <HAL_SD_ConfigWideBusOperation>
 801e1d4:	4603      	mov	r3, r0
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d001      	beq.n	801e1de <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 801e1da:	2301      	movs	r3, #1
 801e1dc:	e026      	b.n	801e22c <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801e1de:	f7f6 fd89 	bl	8014cf4 <HAL_GetTick>
 801e1e2:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801e1e4:	e011      	b.n	801e20a <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 801e1e6:	f7f6 fd85 	bl	8014cf4 <HAL_GetTick>
 801e1ea:	4602      	mov	r2, r0
 801e1ec:	69fb      	ldr	r3, [r7, #28]
 801e1ee:	1ad3      	subs	r3, r2, r3
 801e1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e1f4:	d109      	bne.n	801e20a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801e1fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	2201      	movs	r2, #1
 801e202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 801e206:	2303      	movs	r3, #3
 801e208:	e010      	b.n	801e22c <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801e20a:	6878      	ldr	r0, [r7, #4]
 801e20c:	f000 fef8 	bl	801f000 <HAL_SD_GetCardState>
 801e210:	4603      	mov	r3, r0
 801e212:	2b04      	cmp	r3, #4
 801e214:	d1e7      	bne.n	801e1e6 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	2200      	movs	r2, #0
 801e21a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801e21c:	687b      	ldr	r3, [r7, #4]
 801e21e:	2200      	movs	r2, #0
 801e220:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	2201      	movs	r2, #1
 801e226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801e22a:	2300      	movs	r3, #0
}
 801e22c:	4618      	mov	r0, r3
 801e22e:	3728      	adds	r7, #40	; 0x28
 801e230:	46bd      	mov	sp, r7
 801e232:	bd80      	pop	{r7, pc}

0801e234 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 801e234:	b5b0      	push	{r4, r5, r7, lr}
 801e236:	b08e      	sub	sp, #56	; 0x38
 801e238:	af04      	add	r7, sp, #16
 801e23a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801e23c:	2300      	movs	r3, #0
 801e23e:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801e240:	2300      	movs	r3, #0
 801e242:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801e244:	2300      	movs	r3, #0
 801e246:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801e248:	2300      	movs	r3, #0
 801e24a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801e24c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801e250:	f7fe ff90 	bl	801d174 <HAL_RCCEx_GetPeriphCLKFreq>
 801e254:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 801e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e258:	0a1b      	lsrs	r3, r3, #8
 801e25a:	4a40      	ldr	r2, [pc, #256]	; (801e35c <HAL_SD_InitCard+0x128>)
 801e25c:	fba2 2303 	umull	r2, r3, r2, r3
 801e260:	091b      	lsrs	r3, r3, #4
 801e262:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	699b      	ldr	r3, [r3, #24]
 801e268:	2b02      	cmp	r3, #2
 801e26a:	d107      	bne.n	801e27c <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	681a      	ldr	r2, [r3, #0]
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	f042 0210 	orr.w	r2, r2, #16
 801e27a:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	681d      	ldr	r5, [r3, #0]
 801e280:	466c      	mov	r4, sp
 801e282:	f107 0314 	add.w	r3, r7, #20
 801e286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e28a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e28e:	f107 0308 	add.w	r3, r7, #8
 801e292:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e294:	4628      	mov	r0, r5
 801e296:	f004 fd95 	bl	8022dc4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	681b      	ldr	r3, [r3, #0]
 801e29e:	4618      	mov	r0, r3
 801e2a0:	f004 fdd8 	bl	8022e54 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 801e2a4:	69bb      	ldr	r3, [r7, #24]
 801e2a6:	005b      	lsls	r3, r3, #1
 801e2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 801e2ae:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 801e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d008      	beq.n	801e2c8 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 801e2b6:	4a2a      	ldr	r2, [pc, #168]	; (801e360 <HAL_SD_InitCard+0x12c>)
 801e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 801e2be:	3301      	adds	r3, #1
 801e2c0:	4618      	mov	r0, r3
 801e2c2:	f7f6 fd23 	bl	8014d0c <HAL_Delay>
 801e2c6:	e002      	b.n	801e2ce <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 801e2c8:	2002      	movs	r0, #2
 801e2ca:	f7f6 fd1f 	bl	8014d0c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801e2ce:	6878      	ldr	r0, [r7, #4]
 801e2d0:	f000 ff74 	bl	801f1bc <SD_PowerON>
 801e2d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801e2d6:	6a3b      	ldr	r3, [r7, #32]
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d00b      	beq.n	801e2f4 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	2201      	movs	r2, #1
 801e2e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e2e8:	6a3b      	ldr	r3, [r7, #32]
 801e2ea:	431a      	orrs	r2, r3
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801e2f0:	2301      	movs	r3, #1
 801e2f2:	e02e      	b.n	801e352 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801e2f4:	6878      	ldr	r0, [r7, #4]
 801e2f6:	f000 fea3 	bl	801f040 <SD_InitCard>
 801e2fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801e2fc:	6a3b      	ldr	r3, [r7, #32]
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d00b      	beq.n	801e31a <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	2201      	movs	r2, #1
 801e306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e30e:	6a3b      	ldr	r3, [r7, #32]
 801e310:	431a      	orrs	r2, r3
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801e316:	2301      	movs	r3, #1
 801e318:	e01b      	b.n	801e352 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e322:	4618      	mov	r0, r3
 801e324:	f004 fe2c 	bl	8022f80 <SDMMC_CmdBlockLength>
 801e328:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801e32a:	6a3b      	ldr	r3, [r7, #32]
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	d00f      	beq.n	801e350 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	4a0b      	ldr	r2, [pc, #44]	; (801e364 <HAL_SD_InitCard+0x130>)
 801e336:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e33c:	6a3b      	ldr	r3, [r7, #32]
 801e33e:	431a      	orrs	r2, r3
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	2201      	movs	r2, #1
 801e348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801e34c:	2301      	movs	r3, #1
 801e34e:	e000      	b.n	801e352 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 801e350:	2300      	movs	r3, #0
}
 801e352:	4618      	mov	r0, r3
 801e354:	3728      	adds	r7, #40	; 0x28
 801e356:	46bd      	mov	sp, r7
 801e358:	bdb0      	pop	{r4, r5, r7, pc}
 801e35a:	bf00      	nop
 801e35c:	014f8b59 	.word	0x014f8b59
 801e360:	00012110 	.word	0x00012110
 801e364:	1fe00fff 	.word	0x1fe00fff

0801e368 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b08c      	sub	sp, #48	; 0x30
 801e36c:	af00      	add	r7, sp, #0
 801e36e:	60f8      	str	r0, [r7, #12]
 801e370:	60b9      	str	r1, [r7, #8]
 801e372:	607a      	str	r2, [r7, #4]
 801e374:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801e37a:	68bb      	ldr	r3, [r7, #8]
 801e37c:	2b00      	cmp	r3, #0
 801e37e:	d107      	bne.n	801e390 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e384:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801e38c:	2301      	movs	r3, #1
 801e38e:	e08d      	b.n	801e4ac <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 801e390:	68fb      	ldr	r3, [r7, #12]
 801e392:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e396:	b2db      	uxtb	r3, r3
 801e398:	2b01      	cmp	r3, #1
 801e39a:	f040 8086 	bne.w	801e4aa <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801e39e:	68fb      	ldr	r3, [r7, #12]
 801e3a0:	2200      	movs	r2, #0
 801e3a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801e3a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e3a6:	683b      	ldr	r3, [r7, #0]
 801e3a8:	441a      	add	r2, r3
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e3ae:	429a      	cmp	r2, r3
 801e3b0:	d907      	bls.n	801e3c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801e3be:	2301      	movs	r3, #1
 801e3c0:	e074      	b.n	801e4ac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801e3c2:	68fb      	ldr	r3, [r7, #12]
 801e3c4:	2203      	movs	r2, #3
 801e3c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801e3ca:	68fb      	ldr	r3, [r7, #12]
 801e3cc:	681b      	ldr	r3, [r3, #0]
 801e3ce:	2200      	movs	r2, #0
 801e3d0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	68ba      	ldr	r2, [r7, #8]
 801e3d6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 801e3d8:	683b      	ldr	r3, [r7, #0]
 801e3da:	025a      	lsls	r2, r3, #9
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e3e4:	2b01      	cmp	r3, #1
 801e3e6:	d002      	beq.n	801e3ee <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 801e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3ea:	025b      	lsls	r3, r3, #9
 801e3ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801e3ee:	f04f 33ff 	mov.w	r3, #4294967295
 801e3f2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801e3f4:	683b      	ldr	r3, [r7, #0]
 801e3f6:	025b      	lsls	r3, r3, #9
 801e3f8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801e3fa:	2390      	movs	r3, #144	; 0x90
 801e3fc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801e3fe:	2302      	movs	r3, #2
 801e400:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801e402:	2300      	movs	r3, #0
 801e404:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801e406:	2300      	movs	r3, #0
 801e408:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801e40a:	68fb      	ldr	r3, [r7, #12]
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	f107 0210 	add.w	r2, r7, #16
 801e412:	4611      	mov	r1, r2
 801e414:	4618      	mov	r0, r3
 801e416:	f004 fd87 	bl	8022f28 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 801e41a:	68fb      	ldr	r3, [r7, #12]
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	68da      	ldr	r2, [r3, #12]
 801e420:	68fb      	ldr	r3, [r7, #12]
 801e422:	681b      	ldr	r3, [r3, #0]
 801e424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e428:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	68ba      	ldr	r2, [r7, #8]
 801e430:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	2201      	movs	r2, #1
 801e438:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 801e43a:	683b      	ldr	r3, [r7, #0]
 801e43c:	2b01      	cmp	r3, #1
 801e43e:	d90a      	bls.n	801e456 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	2282      	movs	r2, #130	; 0x82
 801e444:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e44c:	4618      	mov	r0, r3
 801e44e:	f004 fddd 	bl	802300c <SDMMC_CmdReadMultiBlock>
 801e452:	62f8      	str	r0, [r7, #44]	; 0x2c
 801e454:	e009      	b.n	801e46a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	2281      	movs	r2, #129	; 0x81
 801e45a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e462:	4618      	mov	r0, r3
 801e464:	f004 fdaf 	bl	8022fc6 <SDMMC_CmdReadSingleBlock>
 801e468:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 801e46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d012      	beq.n	801e496 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	4a0f      	ldr	r2, [pc, #60]	; (801e4b4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 801e476:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e47e:	431a      	orrs	r2, r3
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	2201      	movs	r2, #1
 801e488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	2200      	movs	r2, #0
 801e490:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 801e492:	2301      	movs	r3, #1
 801e494:	e00a      	b.n	801e4ac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 801e4a4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 801e4a6:	2300      	movs	r3, #0
 801e4a8:	e000      	b.n	801e4ac <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801e4aa:	2302      	movs	r3, #2
  }
}
 801e4ac:	4618      	mov	r0, r3
 801e4ae:	3730      	adds	r7, #48	; 0x30
 801e4b0:	46bd      	mov	sp, r7
 801e4b2:	bd80      	pop	{r7, pc}
 801e4b4:	1fe00fff 	.word	0x1fe00fff

0801e4b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 801e4b8:	b580      	push	{r7, lr}
 801e4ba:	b08c      	sub	sp, #48	; 0x30
 801e4bc:	af00      	add	r7, sp, #0
 801e4be:	60f8      	str	r0, [r7, #12]
 801e4c0:	60b9      	str	r1, [r7, #8]
 801e4c2:	607a      	str	r2, [r7, #4]
 801e4c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 801e4ca:	68bb      	ldr	r3, [r7, #8]
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d107      	bne.n	801e4e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801e4d0:	68fb      	ldr	r3, [r7, #12]
 801e4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e4d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801e4dc:	2301      	movs	r3, #1
 801e4de:	e08d      	b.n	801e5fc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 801e4e0:	68fb      	ldr	r3, [r7, #12]
 801e4e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e4e6:	b2db      	uxtb	r3, r3
 801e4e8:	2b01      	cmp	r3, #1
 801e4ea:	f040 8086 	bne.w	801e5fa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801e4ee:	68fb      	ldr	r3, [r7, #12]
 801e4f0:	2200      	movs	r2, #0
 801e4f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801e4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e4f6:	683b      	ldr	r3, [r7, #0]
 801e4f8:	441a      	add	r2, r3
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e4fe:	429a      	cmp	r2, r3
 801e500:	d907      	bls.n	801e512 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e506:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801e50a:	68fb      	ldr	r3, [r7, #12]
 801e50c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801e50e:	2301      	movs	r3, #1
 801e510:	e074      	b.n	801e5fc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801e512:	68fb      	ldr	r3, [r7, #12]
 801e514:	2203      	movs	r2, #3
 801e516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801e51a:	68fb      	ldr	r3, [r7, #12]
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	2200      	movs	r2, #0
 801e520:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 801e522:	68fb      	ldr	r3, [r7, #12]
 801e524:	68ba      	ldr	r2, [r7, #8]
 801e526:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 801e528:	683b      	ldr	r3, [r7, #0]
 801e52a:	025a      	lsls	r2, r3, #9
 801e52c:	68fb      	ldr	r3, [r7, #12]
 801e52e:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801e530:	68fb      	ldr	r3, [r7, #12]
 801e532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e534:	2b01      	cmp	r3, #1
 801e536:	d002      	beq.n	801e53e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 801e538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e53a:	025b      	lsls	r3, r3, #9
 801e53c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801e53e:	f04f 33ff 	mov.w	r3, #4294967295
 801e542:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801e544:	683b      	ldr	r3, [r7, #0]
 801e546:	025b      	lsls	r3, r3, #9
 801e548:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801e54a:	2390      	movs	r3, #144	; 0x90
 801e54c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801e54e:	2300      	movs	r3, #0
 801e550:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801e552:	2300      	movs	r3, #0
 801e554:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801e556:	2300      	movs	r3, #0
 801e558:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801e55a:	68fb      	ldr	r3, [r7, #12]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	f107 0210 	add.w	r2, r7, #16
 801e562:	4611      	mov	r1, r2
 801e564:	4618      	mov	r0, r3
 801e566:	f004 fcdf 	bl	8022f28 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 801e56a:	68fb      	ldr	r3, [r7, #12]
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	68da      	ldr	r2, [r3, #12]
 801e570:	68fb      	ldr	r3, [r7, #12]
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e578:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	68ba      	ldr	r2, [r7, #8]
 801e580:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	2201      	movs	r2, #1
 801e588:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 801e58a:	683b      	ldr	r3, [r7, #0]
 801e58c:	2b01      	cmp	r3, #1
 801e58e:	d90a      	bls.n	801e5a6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801e590:	68fb      	ldr	r3, [r7, #12]
 801e592:	22a0      	movs	r2, #160	; 0xa0
 801e594:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801e596:	68fb      	ldr	r3, [r7, #12]
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e59c:	4618      	mov	r0, r3
 801e59e:	f004 fd7b 	bl	8023098 <SDMMC_CmdWriteMultiBlock>
 801e5a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 801e5a4:	e009      	b.n	801e5ba <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801e5a6:	68fb      	ldr	r3, [r7, #12]
 801e5a8:	2290      	movs	r2, #144	; 0x90
 801e5aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e5b2:	4618      	mov	r0, r3
 801e5b4:	f004 fd4d 	bl	8023052 <SDMMC_CmdWriteSingleBlock>
 801e5b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 801e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d012      	beq.n	801e5e6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	4a0f      	ldr	r2, [pc, #60]	; (801e604 <HAL_SD_WriteBlocks_DMA+0x14c>)
 801e5c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801e5c8:	68fb      	ldr	r3, [r7, #12]
 801e5ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5ce:	431a      	orrs	r2, r3
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801e5d4:	68fb      	ldr	r3, [r7, #12]
 801e5d6:	2201      	movs	r2, #1
 801e5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801e5dc:	68fb      	ldr	r3, [r7, #12]
 801e5de:	2200      	movs	r2, #0
 801e5e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 801e5e2:	2301      	movs	r3, #1
 801e5e4:	e00a      	b.n	801e5fc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 801e5f4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801e5f6:	2300      	movs	r3, #0
 801e5f8:	e000      	b.n	801e5fc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801e5fa:	2302      	movs	r3, #2
  }
}
 801e5fc:	4618      	mov	r0, r3
 801e5fe:	3730      	adds	r7, #48	; 0x30
 801e600:	46bd      	mov	sp, r7
 801e602:	bd80      	pop	{r7, pc}
 801e604:	1fe00fff 	.word	0x1fe00fff

0801e608 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 801e608:	b580      	push	{r7, lr}
 801e60a:	b084      	sub	sp, #16
 801e60c:	af00      	add	r7, sp, #0
 801e60e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e614:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801e616:	687b      	ldr	r3, [r7, #4]
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e61c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801e620:	2b00      	cmp	r3, #0
 801e622:	d008      	beq.n	801e636 <HAL_SD_IRQHandler+0x2e>
 801e624:	68fb      	ldr	r3, [r7, #12]
 801e626:	f003 0308 	and.w	r3, r3, #8
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	d003      	beq.n	801e636 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801e62e:	6878      	ldr	r0, [r7, #4]
 801e630:	f001 f92a 	bl	801f888 <SD_Read_IT>
 801e634:	e19a      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e63c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e640:	2b00      	cmp	r3, #0
 801e642:	f000 80ac 	beq.w	801e79e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e64e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	681a      	ldr	r2, [r3, #0]
 801e65a:	4b9d      	ldr	r3, [pc, #628]	; (801e8d0 <HAL_SD_IRQHandler+0x2c8>)
 801e65c:	400b      	ands	r3, r1
 801e65e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	681b      	ldr	r3, [r3, #0]
 801e664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801e66e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	68da      	ldr	r2, [r3, #12]
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e67e:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 801e680:	68fb      	ldr	r3, [r7, #12]
 801e682:	f003 0308 	and.w	r3, r3, #8
 801e686:	2b00      	cmp	r3, #0
 801e688:	d038      	beq.n	801e6fc <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	f003 0302 	and.w	r3, r3, #2
 801e690:	2b00      	cmp	r3, #0
 801e692:	d104      	bne.n	801e69e <HAL_SD_IRQHandler+0x96>
 801e694:	68fb      	ldr	r3, [r7, #12]
 801e696:	f003 0320 	and.w	r3, r3, #32
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	d011      	beq.n	801e6c2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	681b      	ldr	r3, [r3, #0]
 801e6a2:	4618      	mov	r0, r3
 801e6a4:	f004 fd1c 	bl	80230e0 <SDMMC_CmdStopTransfer>
 801e6a8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 801e6aa:	68bb      	ldr	r3, [r7, #8]
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d008      	beq.n	801e6c2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e6b4:	68bb      	ldr	r3, [r7, #8]
 801e6b6:	431a      	orrs	r2, r3
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801e6bc:	6878      	ldr	r0, [r7, #4]
 801e6be:	f000 f959 	bl	801e974 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	4a83      	ldr	r2, [pc, #524]	; (801e8d4 <HAL_SD_IRQHandler+0x2cc>)
 801e6c8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 801e6ca:	687b      	ldr	r3, [r7, #4]
 801e6cc:	2201      	movs	r2, #1
 801e6ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	2200      	movs	r2, #0
 801e6d6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801e6d8:	68fb      	ldr	r3, [r7, #12]
 801e6da:	f003 0301 	and.w	r3, r3, #1
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d104      	bne.n	801e6ec <HAL_SD_IRQHandler+0xe4>
 801e6e2:	68fb      	ldr	r3, [r7, #12]
 801e6e4:	f003 0302 	and.w	r3, r3, #2
 801e6e8:	2b00      	cmp	r3, #0
 801e6ea:	d003      	beq.n	801e6f4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801e6ec:	6878      	ldr	r0, [r7, #4]
 801e6ee:	f005 fc9b 	bl	8024028 <HAL_SD_RxCpltCallback>
 801e6f2:	e13b      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 801e6f4:	6878      	ldr	r0, [r7, #4]
 801e6f6:	f005 fc8d 	bl	8024014 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801e6fa:	e137      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 801e6fc:	68fb      	ldr	r3, [r7, #12]
 801e6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e702:	2b00      	cmp	r3, #0
 801e704:	f000 8132 	beq.w	801e96c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	2200      	movs	r2, #0
 801e70e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	681b      	ldr	r3, [r3, #0]
 801e714:	2200      	movs	r2, #0
 801e716:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	2200      	movs	r2, #0
 801e71e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801e720:	68fb      	ldr	r3, [r7, #12]
 801e722:	f003 0302 	and.w	r3, r3, #2
 801e726:	2b00      	cmp	r3, #0
 801e728:	d104      	bne.n	801e734 <HAL_SD_IRQHandler+0x12c>
 801e72a:	68fb      	ldr	r3, [r7, #12]
 801e72c:	f003 0320 	and.w	r3, r3, #32
 801e730:	2b00      	cmp	r3, #0
 801e732:	d011      	beq.n	801e758 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	4618      	mov	r0, r3
 801e73a:	f004 fcd1 	bl	80230e0 <SDMMC_CmdStopTransfer>
 801e73e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 801e740:	68bb      	ldr	r3, [r7, #8]
 801e742:	2b00      	cmp	r3, #0
 801e744:	d008      	beq.n	801e758 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e74a:	68bb      	ldr	r3, [r7, #8]
 801e74c:	431a      	orrs	r2, r3
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 801e752:	6878      	ldr	r0, [r7, #4]
 801e754:	f000 f90e 	bl	801e974 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	2201      	movs	r2, #1
 801e75c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	2200      	movs	r2, #0
 801e764:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	f003 0310 	and.w	r3, r3, #16
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d104      	bne.n	801e77a <HAL_SD_IRQHandler+0x172>
 801e770:	68fb      	ldr	r3, [r7, #12]
 801e772:	f003 0320 	and.w	r3, r3, #32
 801e776:	2b00      	cmp	r3, #0
 801e778:	d002      	beq.n	801e780 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 801e77a:	6878      	ldr	r0, [r7, #4]
 801e77c:	f005 fc4a 	bl	8024014 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801e780:	68fb      	ldr	r3, [r7, #12]
 801e782:	f003 0301 	and.w	r3, r3, #1
 801e786:	2b00      	cmp	r3, #0
 801e788:	d105      	bne.n	801e796 <HAL_SD_IRQHandler+0x18e>
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	f003 0302 	and.w	r3, r3, #2
 801e790:	2b00      	cmp	r3, #0
 801e792:	f000 80eb 	beq.w	801e96c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 801e796:	6878      	ldr	r0, [r7, #4]
 801e798:	f005 fc46 	bl	8024028 <HAL_SD_RxCpltCallback>
}
 801e79c:	e0e6      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e7a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	d008      	beq.n	801e7be <HAL_SD_IRQHandler+0x1b6>
 801e7ac:	68fb      	ldr	r3, [r7, #12]
 801e7ae:	f003 0308 	and.w	r3, r3, #8
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d003      	beq.n	801e7be <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 801e7b6:	6878      	ldr	r0, [r7, #4]
 801e7b8:	f001 f8ac 	bl	801f914 <SD_Write_IT>
 801e7bc:	e0d6      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 801e7be:	687b      	ldr	r3, [r7, #4]
 801e7c0:	681b      	ldr	r3, [r3, #0]
 801e7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e7c4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	f000 80a2 	beq.w	801e912 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e7d4:	f003 0302 	and.w	r3, r3, #2
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d005      	beq.n	801e7e8 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7e0:	f043 0202 	orr.w	r2, r3, #2
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e7ee:	f003 0308 	and.w	r3, r3, #8
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d005      	beq.n	801e802 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7fa:	f043 0208 	orr.w	r2, r3, #8
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e808:	f003 0320 	and.w	r3, r3, #32
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	d005      	beq.n	801e81c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e814:	f043 0220 	orr.w	r2, r3, #32
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e822:	f003 0310 	and.w	r3, r3, #16
 801e826:	2b00      	cmp	r3, #0
 801e828:	d005      	beq.n	801e836 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e82e:	f043 0210 	orr.w	r2, r3, #16
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	681b      	ldr	r3, [r3, #0]
 801e83a:	4a26      	ldr	r2, [pc, #152]	; (801e8d4 <HAL_SD_IRQHandler+0x2cc>)
 801e83c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	681b      	ldr	r3, [r3, #0]
 801e842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	681b      	ldr	r3, [r3, #0]
 801e848:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 801e84c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 801e84e:	687b      	ldr	r3, [r7, #4]
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	68da      	ldr	r2, [r3, #12]
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e85c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 801e85e:	687b      	ldr	r3, [r7, #4]
 801e860:	681b      	ldr	r3, [r3, #0]
 801e862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e86c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	68da      	ldr	r2, [r3, #12]
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801e87c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801e87e:	687b      	ldr	r3, [r7, #4]
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	4618      	mov	r0, r3
 801e884:	f004 fc2c 	bl	80230e0 <SDMMC_CmdStopTransfer>
 801e888:	4602      	mov	r2, r0
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e88e:	431a      	orrs	r2, r3
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	68da      	ldr	r2, [r3, #12]
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	681b      	ldr	r3, [r3, #0]
 801e89e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e8a2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	681b      	ldr	r3, [r3, #0]
 801e8a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e8ac:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	f003 0308 	and.w	r3, r3, #8
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	d00f      	beq.n	801e8d8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	2201      	movs	r2, #1
 801e8bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	2200      	movs	r2, #0
 801e8c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 801e8c6:	6878      	ldr	r0, [r7, #4]
 801e8c8:	f000 f854 	bl	801e974 <HAL_SD_ErrorCallback>
}
 801e8cc:	e04e      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
 801e8ce:	bf00      	nop
 801e8d0:	ffff3ec5 	.word	0xffff3ec5
 801e8d4:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 801e8d8:	68fb      	ldr	r3, [r7, #12]
 801e8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e8de:	2b00      	cmp	r3, #0
 801e8e0:	d044      	beq.n	801e96c <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801e8e2:	687b      	ldr	r3, [r7, #4]
 801e8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d040      	beq.n	801e96c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801e8f8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	2200      	movs	r2, #0
 801e900:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	2201      	movs	r2, #1
 801e906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 801e90a:	6878      	ldr	r0, [r7, #4]
 801e90c:	f000 f832 	bl	801e974 <HAL_SD_ErrorCallback>
}
 801e910:	e02c      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	681b      	ldr	r3, [r3, #0]
 801e916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d025      	beq.n	801e96c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e928:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	681b      	ldr	r3, [r3, #0]
 801e92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e930:	f003 0304 	and.w	r3, r3, #4
 801e934:	2b00      	cmp	r3, #0
 801e936:	d10c      	bne.n	801e952 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	f003 0320 	and.w	r3, r3, #32
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d003      	beq.n	801e94a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 801e942:	6878      	ldr	r0, [r7, #4]
 801e944:	f001 f84e 	bl	801f9e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 801e948:	e010      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 801e94a:	6878      	ldr	r0, [r7, #4]
 801e94c:	f001 f836 	bl	801f9bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 801e950:	e00c      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	f003 0320 	and.w	r3, r3, #32
 801e958:	2b00      	cmp	r3, #0
 801e95a:	d003      	beq.n	801e964 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 801e95c:	6878      	ldr	r0, [r7, #4]
 801e95e:	f001 f837 	bl	801f9d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 801e962:	e003      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 801e964:	6878      	ldr	r0, [r7, #4]
 801e966:	f001 f81f 	bl	801f9a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 801e96a:	e7ff      	b.n	801e96c <HAL_SD_IRQHandler+0x364>
 801e96c:	bf00      	nop
 801e96e:	3710      	adds	r7, #16
 801e970:	46bd      	mov	sp, r7
 801e972:	bd80      	pop	{r7, pc}

0801e974 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 801e974:	b480      	push	{r7}
 801e976:	b083      	sub	sp, #12
 801e978:	af00      	add	r7, sp, #0
 801e97a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801e97c:	bf00      	nop
 801e97e:	370c      	adds	r7, #12
 801e980:	46bd      	mov	sp, r7
 801e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e986:	4770      	bx	lr

0801e988 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 801e988:	b480      	push	{r7}
 801e98a:	b083      	sub	sp, #12
 801e98c:	af00      	add	r7, sp, #0
 801e98e:	4603      	mov	r3, r0
 801e990:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 801e992:	bf00      	nop
 801e994:	370c      	adds	r7, #12
 801e996:	46bd      	mov	sp, r7
 801e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99c:	4770      	bx	lr
	...

0801e9a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801e9a0:	b480      	push	{r7}
 801e9a2:	b083      	sub	sp, #12
 801e9a4:	af00      	add	r7, sp, #0
 801e9a6:	6078      	str	r0, [r7, #4]
 801e9a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e9ae:	0f9b      	lsrs	r3, r3, #30
 801e9b0:	b2da      	uxtb	r2, r3
 801e9b2:	683b      	ldr	r3, [r7, #0]
 801e9b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801e9b6:	687b      	ldr	r3, [r7, #4]
 801e9b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e9ba:	0e9b      	lsrs	r3, r3, #26
 801e9bc:	b2db      	uxtb	r3, r3
 801e9be:	f003 030f 	and.w	r3, r3, #15
 801e9c2:	b2da      	uxtb	r2, r3
 801e9c4:	683b      	ldr	r3, [r7, #0]
 801e9c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e9cc:	0e1b      	lsrs	r3, r3, #24
 801e9ce:	b2db      	uxtb	r3, r3
 801e9d0:	f003 0303 	and.w	r3, r3, #3
 801e9d4:	b2da      	uxtb	r2, r3
 801e9d6:	683b      	ldr	r3, [r7, #0]
 801e9d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e9de:	0c1b      	lsrs	r3, r3, #16
 801e9e0:	b2da      	uxtb	r2, r3
 801e9e2:	683b      	ldr	r3, [r7, #0]
 801e9e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e9ea:	0a1b      	lsrs	r3, r3, #8
 801e9ec:	b2da      	uxtb	r2, r3
 801e9ee:	683b      	ldr	r3, [r7, #0]
 801e9f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e9f6:	b2da      	uxtb	r2, r3
 801e9f8:	683b      	ldr	r3, [r7, #0]
 801e9fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ea00:	0d1b      	lsrs	r3, r3, #20
 801ea02:	b29a      	uxth	r2, r3
 801ea04:	683b      	ldr	r3, [r7, #0]
 801ea06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ea0c:	0c1b      	lsrs	r3, r3, #16
 801ea0e:	b2db      	uxtb	r3, r3
 801ea10:	f003 030f 	and.w	r3, r3, #15
 801ea14:	b2da      	uxtb	r2, r3
 801ea16:	683b      	ldr	r3, [r7, #0]
 801ea18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ea1e:	0bdb      	lsrs	r3, r3, #15
 801ea20:	b2db      	uxtb	r3, r3
 801ea22:	f003 0301 	and.w	r3, r3, #1
 801ea26:	b2da      	uxtb	r2, r3
 801ea28:	683b      	ldr	r3, [r7, #0]
 801ea2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ea30:	0b9b      	lsrs	r3, r3, #14
 801ea32:	b2db      	uxtb	r3, r3
 801ea34:	f003 0301 	and.w	r3, r3, #1
 801ea38:	b2da      	uxtb	r2, r3
 801ea3a:	683b      	ldr	r3, [r7, #0]
 801ea3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801ea3e:	687b      	ldr	r3, [r7, #4]
 801ea40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ea42:	0b5b      	lsrs	r3, r3, #13
 801ea44:	b2db      	uxtb	r3, r3
 801ea46:	f003 0301 	and.w	r3, r3, #1
 801ea4a:	b2da      	uxtb	r2, r3
 801ea4c:	683b      	ldr	r3, [r7, #0]
 801ea4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ea54:	0b1b      	lsrs	r3, r3, #12
 801ea56:	b2db      	uxtb	r3, r3
 801ea58:	f003 0301 	and.w	r3, r3, #1
 801ea5c:	b2da      	uxtb	r2, r3
 801ea5e:	683b      	ldr	r3, [r7, #0]
 801ea60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801ea62:	683b      	ldr	r3, [r7, #0]
 801ea64:	2200      	movs	r2, #0
 801ea66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d163      	bne.n	801eb38 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ea74:	009a      	lsls	r2, r3, #2
 801ea76:	f640 73fc 	movw	r3, #4092	; 0xffc
 801ea7a:	4013      	ands	r3, r2
 801ea7c:	687a      	ldr	r2, [r7, #4]
 801ea7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801ea80:	0f92      	lsrs	r2, r2, #30
 801ea82:	431a      	orrs	r2, r3
 801ea84:	683b      	ldr	r3, [r7, #0]
 801ea86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ea8c:	0edb      	lsrs	r3, r3, #27
 801ea8e:	b2db      	uxtb	r3, r3
 801ea90:	f003 0307 	and.w	r3, r3, #7
 801ea94:	b2da      	uxtb	r2, r3
 801ea96:	683b      	ldr	r3, [r7, #0]
 801ea98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ea9e:	0e1b      	lsrs	r3, r3, #24
 801eaa0:	b2db      	uxtb	r3, r3
 801eaa2:	f003 0307 	and.w	r3, r3, #7
 801eaa6:	b2da      	uxtb	r2, r3
 801eaa8:	683b      	ldr	r3, [r7, #0]
 801eaaa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801eab0:	0d5b      	lsrs	r3, r3, #21
 801eab2:	b2db      	uxtb	r3, r3
 801eab4:	f003 0307 	and.w	r3, r3, #7
 801eab8:	b2da      	uxtb	r2, r3
 801eaba:	683b      	ldr	r3, [r7, #0]
 801eabc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801eac2:	0c9b      	lsrs	r3, r3, #18
 801eac4:	b2db      	uxtb	r3, r3
 801eac6:	f003 0307 	and.w	r3, r3, #7
 801eaca:	b2da      	uxtb	r2, r3
 801eacc:	683b      	ldr	r3, [r7, #0]
 801eace:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ead4:	0bdb      	lsrs	r3, r3, #15
 801ead6:	b2db      	uxtb	r3, r3
 801ead8:	f003 0307 	and.w	r3, r3, #7
 801eadc:	b2da      	uxtb	r2, r3
 801eade:	683b      	ldr	r3, [r7, #0]
 801eae0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801eae2:	683b      	ldr	r3, [r7, #0]
 801eae4:	691b      	ldr	r3, [r3, #16]
 801eae6:	1c5a      	adds	r2, r3, #1
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801eaec:	683b      	ldr	r3, [r7, #0]
 801eaee:	7e1b      	ldrb	r3, [r3, #24]
 801eaf0:	b2db      	uxtb	r3, r3
 801eaf2:	f003 0307 	and.w	r3, r3, #7
 801eaf6:	3302      	adds	r3, #2
 801eaf8:	2201      	movs	r2, #1
 801eafa:	fa02 f303 	lsl.w	r3, r2, r3
 801eafe:	687a      	ldr	r2, [r7, #4]
 801eb00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801eb02:	fb02 f203 	mul.w	r2, r2, r3
 801eb06:	687b      	ldr	r3, [r7, #4]
 801eb08:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801eb0a:	683b      	ldr	r3, [r7, #0]
 801eb0c:	7a1b      	ldrb	r3, [r3, #8]
 801eb0e:	b2db      	uxtb	r3, r3
 801eb10:	f003 030f 	and.w	r3, r3, #15
 801eb14:	2201      	movs	r2, #1
 801eb16:	409a      	lsls	r2, r3
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801eb20:	687a      	ldr	r2, [r7, #4]
 801eb22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801eb24:	0a52      	lsrs	r2, r2, #9
 801eb26:	fb02 f203 	mul.w	r2, r2, r3
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 801eb2e:	687b      	ldr	r3, [r7, #4]
 801eb30:	f44f 7200 	mov.w	r2, #512	; 0x200
 801eb34:	659a      	str	r2, [r3, #88]	; 0x58
 801eb36:	e031      	b.n	801eb9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eb3c:	2b01      	cmp	r3, #1
 801eb3e:	d11d      	bne.n	801eb7c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801eb44:	041b      	lsls	r3, r3, #16
 801eb46:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801eb4e:	0c1b      	lsrs	r3, r3, #16
 801eb50:	431a      	orrs	r2, r3
 801eb52:	683b      	ldr	r3, [r7, #0]
 801eb54:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801eb56:	683b      	ldr	r3, [r7, #0]
 801eb58:	691b      	ldr	r3, [r3, #16]
 801eb5a:	3301      	adds	r3, #1
 801eb5c:	029a      	lsls	r2, r3, #10
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 801eb6a:	687b      	ldr	r3, [r7, #4]
 801eb6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801eb70:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801eb72:	687b      	ldr	r3, [r7, #4]
 801eb74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	659a      	str	r2, [r3, #88]	; 0x58
 801eb7a:	e00f      	b.n	801eb9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801eb7c:	687b      	ldr	r3, [r7, #4]
 801eb7e:	681b      	ldr	r3, [r3, #0]
 801eb80:	4a58      	ldr	r2, [pc, #352]	; (801ece4 <HAL_SD_GetCardCSD+0x344>)
 801eb82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	2201      	movs	r2, #1
 801eb94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801eb98:	2301      	movs	r3, #1
 801eb9a:	e09d      	b.n	801ecd8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801eba0:	0b9b      	lsrs	r3, r3, #14
 801eba2:	b2db      	uxtb	r3, r3
 801eba4:	f003 0301 	and.w	r3, r3, #1
 801eba8:	b2da      	uxtb	r2, r3
 801ebaa:	683b      	ldr	r3, [r7, #0]
 801ebac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ebb2:	09db      	lsrs	r3, r3, #7
 801ebb4:	b2db      	uxtb	r3, r3
 801ebb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ebba:	b2da      	uxtb	r2, r3
 801ebbc:	683b      	ldr	r3, [r7, #0]
 801ebbe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ebc4:	b2db      	uxtb	r3, r3
 801ebc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ebca:	b2da      	uxtb	r2, r3
 801ebcc:	683b      	ldr	r3, [r7, #0]
 801ebce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ebd4:	0fdb      	lsrs	r3, r3, #31
 801ebd6:	b2da      	uxtb	r2, r3
 801ebd8:	683b      	ldr	r3, [r7, #0]
 801ebda:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ebe0:	0f5b      	lsrs	r3, r3, #29
 801ebe2:	b2db      	uxtb	r3, r3
 801ebe4:	f003 0303 	and.w	r3, r3, #3
 801ebe8:	b2da      	uxtb	r2, r3
 801ebea:	683b      	ldr	r3, [r7, #0]
 801ebec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ebf2:	0e9b      	lsrs	r3, r3, #26
 801ebf4:	b2db      	uxtb	r3, r3
 801ebf6:	f003 0307 	and.w	r3, r3, #7
 801ebfa:	b2da      	uxtb	r2, r3
 801ebfc:	683b      	ldr	r3, [r7, #0]
 801ebfe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec04:	0d9b      	lsrs	r3, r3, #22
 801ec06:	b2db      	uxtb	r3, r3
 801ec08:	f003 030f 	and.w	r3, r3, #15
 801ec0c:	b2da      	uxtb	r2, r3
 801ec0e:	683b      	ldr	r3, [r7, #0]
 801ec10:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec16:	0d5b      	lsrs	r3, r3, #21
 801ec18:	b2db      	uxtb	r3, r3
 801ec1a:	f003 0301 	and.w	r3, r3, #1
 801ec1e:	b2da      	uxtb	r2, r3
 801ec20:	683b      	ldr	r3, [r7, #0]
 801ec22:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801ec26:	683b      	ldr	r3, [r7, #0]
 801ec28:	2200      	movs	r2, #0
 801ec2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec32:	0c1b      	lsrs	r3, r3, #16
 801ec34:	b2db      	uxtb	r3, r3
 801ec36:	f003 0301 	and.w	r3, r3, #1
 801ec3a:	b2da      	uxtb	r2, r3
 801ec3c:	683b      	ldr	r3, [r7, #0]
 801ec3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec46:	0bdb      	lsrs	r3, r3, #15
 801ec48:	b2db      	uxtb	r3, r3
 801ec4a:	f003 0301 	and.w	r3, r3, #1
 801ec4e:	b2da      	uxtb	r2, r3
 801ec50:	683b      	ldr	r3, [r7, #0]
 801ec52:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec5a:	0b9b      	lsrs	r3, r3, #14
 801ec5c:	b2db      	uxtb	r3, r3
 801ec5e:	f003 0301 	and.w	r3, r3, #1
 801ec62:	b2da      	uxtb	r2, r3
 801ec64:	683b      	ldr	r3, [r7, #0]
 801ec66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec6e:	0b5b      	lsrs	r3, r3, #13
 801ec70:	b2db      	uxtb	r3, r3
 801ec72:	f003 0301 	and.w	r3, r3, #1
 801ec76:	b2da      	uxtb	r2, r3
 801ec78:	683b      	ldr	r3, [r7, #0]
 801ec7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec82:	0b1b      	lsrs	r3, r3, #12
 801ec84:	b2db      	uxtb	r3, r3
 801ec86:	f003 0301 	and.w	r3, r3, #1
 801ec8a:	b2da      	uxtb	r2, r3
 801ec8c:	683b      	ldr	r3, [r7, #0]
 801ec8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec96:	0a9b      	lsrs	r3, r3, #10
 801ec98:	b2db      	uxtb	r3, r3
 801ec9a:	f003 0303 	and.w	r3, r3, #3
 801ec9e:	b2da      	uxtb	r2, r3
 801eca0:	683b      	ldr	r3, [r7, #0]
 801eca2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ecaa:	0a1b      	lsrs	r3, r3, #8
 801ecac:	b2db      	uxtb	r3, r3
 801ecae:	f003 0303 	and.w	r3, r3, #3
 801ecb2:	b2da      	uxtb	r2, r3
 801ecb4:	683b      	ldr	r3, [r7, #0]
 801ecb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ecbe:	085b      	lsrs	r3, r3, #1
 801ecc0:	b2db      	uxtb	r3, r3
 801ecc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ecc6:	b2da      	uxtb	r2, r3
 801ecc8:	683b      	ldr	r3, [r7, #0]
 801ecca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801ecce:	683b      	ldr	r3, [r7, #0]
 801ecd0:	2201      	movs	r2, #1
 801ecd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 801ecd6:	2300      	movs	r3, #0
}
 801ecd8:	4618      	mov	r0, r3
 801ecda:	370c      	adds	r7, #12
 801ecdc:	46bd      	mov	sp, r7
 801ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ece2:	4770      	bx	lr
 801ece4:	1fe00fff 	.word	0x1fe00fff

0801ece8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 801ece8:	b580      	push	{r7, lr}
 801ecea:	b094      	sub	sp, #80	; 0x50
 801ecec:	af00      	add	r7, sp, #0
 801ecee:	6078      	str	r0, [r7, #4]
 801ecf0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801ecf2:	2300      	movs	r3, #0
 801ecf4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 801ecf8:	f107 0308 	add.w	r3, r7, #8
 801ecfc:	4619      	mov	r1, r3
 801ecfe:	6878      	ldr	r0, [r7, #4]
 801ed00:	f000 fb64 	bl	801f3cc <SD_SendSDStatus>
 801ed04:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 801ed06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d011      	beq.n	801ed30 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	681b      	ldr	r3, [r3, #0]
 801ed10:	4a4f      	ldr	r2, [pc, #316]	; (801ee50 <HAL_SD_GetCardStatus+0x168>)
 801ed12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801ed14:	687b      	ldr	r3, [r7, #4]
 801ed16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ed18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ed1a:	431a      	orrs	r2, r3
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	2201      	movs	r2, #1
 801ed24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 801ed28:	2301      	movs	r3, #1
 801ed2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801ed2e:	e070      	b.n	801ee12 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801ed30:	68bb      	ldr	r3, [r7, #8]
 801ed32:	099b      	lsrs	r3, r3, #6
 801ed34:	b2db      	uxtb	r3, r3
 801ed36:	f003 0303 	and.w	r3, r3, #3
 801ed3a:	b2da      	uxtb	r2, r3
 801ed3c:	683b      	ldr	r3, [r7, #0]
 801ed3e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 801ed40:	68bb      	ldr	r3, [r7, #8]
 801ed42:	095b      	lsrs	r3, r3, #5
 801ed44:	b2db      	uxtb	r3, r3
 801ed46:	f003 0301 	and.w	r3, r3, #1
 801ed4a:	b2da      	uxtb	r2, r3
 801ed4c:	683b      	ldr	r3, [r7, #0]
 801ed4e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801ed50:	68bb      	ldr	r3, [r7, #8]
 801ed52:	0a1b      	lsrs	r3, r3, #8
 801ed54:	b29b      	uxth	r3, r3
 801ed56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801ed5a:	b29a      	uxth	r2, r3
 801ed5c:	68bb      	ldr	r3, [r7, #8]
 801ed5e:	0e1b      	lsrs	r3, r3, #24
 801ed60:	b29b      	uxth	r3, r3
 801ed62:	4313      	orrs	r3, r2
 801ed64:	b29a      	uxth	r2, r3
 801ed66:	683b      	ldr	r3, [r7, #0]
 801ed68:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	061a      	lsls	r2, r3, #24
 801ed6e:	68fb      	ldr	r3, [r7, #12]
 801ed70:	021b      	lsls	r3, r3, #8
 801ed72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ed76:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801ed78:	68fb      	ldr	r3, [r7, #12]
 801ed7a:	0a1b      	lsrs	r3, r3, #8
 801ed7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801ed80:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801ed82:	68fb      	ldr	r3, [r7, #12]
 801ed84:	0e1b      	lsrs	r3, r3, #24
 801ed86:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801ed88:	683b      	ldr	r3, [r7, #0]
 801ed8a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 801ed8c:	693b      	ldr	r3, [r7, #16]
 801ed8e:	b2da      	uxtb	r2, r3
 801ed90:	683b      	ldr	r3, [r7, #0]
 801ed92:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 801ed94:	693b      	ldr	r3, [r7, #16]
 801ed96:	0a1b      	lsrs	r3, r3, #8
 801ed98:	b2da      	uxtb	r2, r3
 801ed9a:	683b      	ldr	r3, [r7, #0]
 801ed9c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801ed9e:	693b      	ldr	r3, [r7, #16]
 801eda0:	0d1b      	lsrs	r3, r3, #20
 801eda2:	b2db      	uxtb	r3, r3
 801eda4:	f003 030f 	and.w	r3, r3, #15
 801eda8:	b2da      	uxtb	r2, r3
 801edaa:	683b      	ldr	r3, [r7, #0]
 801edac:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801edae:	693b      	ldr	r3, [r7, #16]
 801edb0:	0c1b      	lsrs	r3, r3, #16
 801edb2:	b29b      	uxth	r3, r3
 801edb4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801edb8:	b29a      	uxth	r2, r3
 801edba:	697b      	ldr	r3, [r7, #20]
 801edbc:	b29b      	uxth	r3, r3
 801edbe:	b2db      	uxtb	r3, r3
 801edc0:	b29b      	uxth	r3, r3
 801edc2:	4313      	orrs	r3, r2
 801edc4:	b29a      	uxth	r2, r3
 801edc6:	683b      	ldr	r3, [r7, #0]
 801edc8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 801edca:	697b      	ldr	r3, [r7, #20]
 801edcc:	0a9b      	lsrs	r3, r3, #10
 801edce:	b2db      	uxtb	r3, r3
 801edd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801edd4:	b2da      	uxtb	r2, r3
 801edd6:	683b      	ldr	r3, [r7, #0]
 801edd8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801edda:	697b      	ldr	r3, [r7, #20]
 801eddc:	0a1b      	lsrs	r3, r3, #8
 801edde:	b2db      	uxtb	r3, r3
 801ede0:	f003 0303 	and.w	r3, r3, #3
 801ede4:	b2da      	uxtb	r2, r3
 801ede6:	683b      	ldr	r3, [r7, #0]
 801ede8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801edea:	697b      	ldr	r3, [r7, #20]
 801edec:	091b      	lsrs	r3, r3, #4
 801edee:	b2db      	uxtb	r3, r3
 801edf0:	f003 030f 	and.w	r3, r3, #15
 801edf4:	b2da      	uxtb	r2, r3
 801edf6:	683b      	ldr	r3, [r7, #0]
 801edf8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801edfa:	697b      	ldr	r3, [r7, #20]
 801edfc:	b2db      	uxtb	r3, r3
 801edfe:	f003 030f 	and.w	r3, r3, #15
 801ee02:	b2da      	uxtb	r2, r3
 801ee04:	683b      	ldr	r3, [r7, #0]
 801ee06:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 801ee08:	69bb      	ldr	r3, [r7, #24]
 801ee0a:	0e1b      	lsrs	r3, r3, #24
 801ee0c:	b2da      	uxtb	r2, r3
 801ee0e:	683b      	ldr	r3, [r7, #0]
 801ee10:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	681b      	ldr	r3, [r3, #0]
 801ee16:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ee1a:	4618      	mov	r0, r3
 801ee1c:	f004 f8b0 	bl	8022f80 <SDMMC_CmdBlockLength>
 801ee20:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 801ee22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d00d      	beq.n	801ee44 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	4a08      	ldr	r2, [pc, #32]	; (801ee50 <HAL_SD_GetCardStatus+0x168>)
 801ee2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ee34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	2201      	movs	r2, #1
 801ee3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 801ee3e:	2301      	movs	r3, #1
 801ee40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 801ee44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 801ee48:	4618      	mov	r0, r3
 801ee4a:	3750      	adds	r7, #80	; 0x50
 801ee4c:	46bd      	mov	sp, r7
 801ee4e:	bd80      	pop	{r7, pc}
 801ee50:	1fe00fff 	.word	0x1fe00fff

0801ee54 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 801ee54:	b480      	push	{r7}
 801ee56:	b083      	sub	sp, #12
 801ee58:	af00      	add	r7, sp, #0
 801ee5a:	6078      	str	r0, [r7, #4]
 801ee5c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801ee62:	683b      	ldr	r3, [r7, #0]
 801ee64:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ee6a:	683b      	ldr	r3, [r7, #0]
 801ee6c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ee72:	683b      	ldr	r3, [r7, #0]
 801ee74:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ee7a:	683b      	ldr	r3, [r7, #0]
 801ee7c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801ee7e:	687b      	ldr	r3, [r7, #4]
 801ee80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ee82:	683b      	ldr	r3, [r7, #0]
 801ee84:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ee8a:	683b      	ldr	r3, [r7, #0]
 801ee8c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ee92:	683b      	ldr	r3, [r7, #0]
 801ee94:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ee9a:	683b      	ldr	r3, [r7, #0]
 801ee9c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801ee9e:	2300      	movs	r3, #0
}
 801eea0:	4618      	mov	r0, r3
 801eea2:	370c      	adds	r7, #12
 801eea4:	46bd      	mov	sp, r7
 801eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eeaa:	4770      	bx	lr

0801eeac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 801eeac:	b5b0      	push	{r4, r5, r7, lr}
 801eeae:	b08e      	sub	sp, #56	; 0x38
 801eeb0:	af04      	add	r7, sp, #16
 801eeb2:	6078      	str	r0, [r7, #4]
 801eeb4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	2203      	movs	r2, #3
 801eec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eec8:	2b03      	cmp	r3, #3
 801eeca:	d02e      	beq.n	801ef2a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 801eecc:	683b      	ldr	r3, [r7, #0]
 801eece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801eed2:	d106      	bne.n	801eee2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eed8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	639a      	str	r2, [r3, #56]	; 0x38
 801eee0:	e029      	b.n	801ef36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801eee2:	683b      	ldr	r3, [r7, #0]
 801eee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801eee8:	d10a      	bne.n	801ef00 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801eeea:	6878      	ldr	r0, [r7, #4]
 801eeec:	f000 fb66 	bl	801f5bc <SD_WideBus_Enable>
 801eef0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801eef2:	687b      	ldr	r3, [r7, #4]
 801eef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801eef6:	6a3b      	ldr	r3, [r7, #32]
 801eef8:	431a      	orrs	r2, r3
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	639a      	str	r2, [r3, #56]	; 0x38
 801eefe:	e01a      	b.n	801ef36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 801ef00:	683b      	ldr	r3, [r7, #0]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d10a      	bne.n	801ef1c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801ef06:	6878      	ldr	r0, [r7, #4]
 801ef08:	f000 fba3 	bl	801f652 <SD_WideBus_Disable>
 801ef0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ef12:	6a3b      	ldr	r3, [r7, #32]
 801ef14:	431a      	orrs	r2, r3
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	639a      	str	r2, [r3, #56]	; 0x38
 801ef1a:	e00c      	b.n	801ef36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	639a      	str	r2, [r3, #56]	; 0x38
 801ef28:	e005      	b.n	801ef36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801ef36:	687b      	ldr	r3, [r7, #4]
 801ef38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef3a:	2b00      	cmp	r3, #0
 801ef3c:	d007      	beq.n	801ef4e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801ef3e:	687b      	ldr	r3, [r7, #4]
 801ef40:	681b      	ldr	r3, [r3, #0]
 801ef42:	4a2e      	ldr	r2, [pc, #184]	; (801effc <HAL_SD_ConfigWideBusOperation+0x150>)
 801ef44:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801ef46:	2301      	movs	r3, #1
 801ef48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ef4c:	e034      	b.n	801efb8 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	685b      	ldr	r3, [r3, #4]
 801ef52:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	689b      	ldr	r3, [r3, #8]
 801ef58:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 801ef5a:	683b      	ldr	r3, [r7, #0]
 801ef5c:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	691b      	ldr	r3, [r3, #16]
 801ef62:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	695b      	ldr	r3, [r3, #20]
 801ef68:	2b03      	cmp	r3, #3
 801ef6a:	d903      	bls.n	801ef74 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	695b      	ldr	r3, [r3, #20]
 801ef70:	61bb      	str	r3, [r7, #24]
 801ef72:	e012      	b.n	801ef9a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 801ef74:	687b      	ldr	r3, [r7, #4]
 801ef76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ef78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ef7c:	d103      	bne.n	801ef86 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 801ef7e:	687b      	ldr	r3, [r7, #4]
 801ef80:	695b      	ldr	r3, [r3, #20]
 801ef82:	61bb      	str	r3, [r7, #24]
 801ef84:	e009      	b.n	801ef9a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ef8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ef8e:	d102      	bne.n	801ef96 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 801ef90:	2302      	movs	r3, #2
 801ef92:	61bb      	str	r3, [r7, #24]
 801ef94:	e001      	b.n	801ef9a <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 801ef96:	2304      	movs	r3, #4
 801ef98:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	681d      	ldr	r5, [r3, #0]
 801ef9e:	466c      	mov	r4, sp
 801efa0:	f107 0314 	add.w	r3, r7, #20
 801efa4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801efa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801efac:	f107 0308 	add.w	r3, r7, #8
 801efb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801efb2:	4628      	mov	r0, r5
 801efb4:	f003 ff06 	bl	8022dc4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 801efc0:	4618      	mov	r0, r3
 801efc2:	f003 ffdd 	bl	8022f80 <SDMMC_CmdBlockLength>
 801efc6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801efc8:	6a3b      	ldr	r3, [r7, #32]
 801efca:	2b00      	cmp	r3, #0
 801efcc:	d00c      	beq.n	801efe8 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	4a0a      	ldr	r2, [pc, #40]	; (801effc <HAL_SD_ConfigWideBusOperation+0x150>)
 801efd4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801efda:	6a3b      	ldr	r3, [r7, #32]
 801efdc:	431a      	orrs	r2, r3
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801efe2:	2301      	movs	r3, #1
 801efe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	2201      	movs	r2, #1
 801efec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 801eff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801eff4:	4618      	mov	r0, r3
 801eff6:	3728      	adds	r7, #40	; 0x28
 801eff8:	46bd      	mov	sp, r7
 801effa:	bdb0      	pop	{r4, r5, r7, pc}
 801effc:	1fe00fff 	.word	0x1fe00fff

0801f000 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801f000:	b580      	push	{r7, lr}
 801f002:	b086      	sub	sp, #24
 801f004:	af00      	add	r7, sp, #0
 801f006:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801f008:	2300      	movs	r3, #0
 801f00a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 801f00c:	f107 030c 	add.w	r3, r7, #12
 801f010:	4619      	mov	r1, r3
 801f012:	6878      	ldr	r0, [r7, #4]
 801f014:	f000 faaa 	bl	801f56c <SD_SendStatus>
 801f018:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f01a:	697b      	ldr	r3, [r7, #20]
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	d005      	beq.n	801f02c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f024:	697b      	ldr	r3, [r7, #20]
 801f026:	431a      	orrs	r2, r3
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801f02c:	68fb      	ldr	r3, [r7, #12]
 801f02e:	0a5b      	lsrs	r3, r3, #9
 801f030:	f003 030f 	and.w	r3, r3, #15
 801f034:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801f036:	693b      	ldr	r3, [r7, #16]
}
 801f038:	4618      	mov	r0, r3
 801f03a:	3718      	adds	r7, #24
 801f03c:	46bd      	mov	sp, r7
 801f03e:	bd80      	pop	{r7, pc}

0801f040 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801f040:	b590      	push	{r4, r7, lr}
 801f042:	b091      	sub	sp, #68	; 0x44
 801f044:	af00      	add	r7, sp, #0
 801f046:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 801f048:	2301      	movs	r3, #1
 801f04a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	4618      	mov	r0, r3
 801f052:	f003 ff10 	bl	8022e76 <SDMMC_GetPowerState>
 801f056:	4603      	mov	r3, r0
 801f058:	2b00      	cmp	r3, #0
 801f05a:	d102      	bne.n	801f062 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801f05c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801f060:	e0a8      	b.n	801f1b4 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f066:	2b03      	cmp	r3, #3
 801f068:	d02e      	beq.n	801f0c8 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	4618      	mov	r0, r3
 801f070:	f004 f95c 	bl	802332c <SDMMC_CmdSendCID>
 801f074:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801f076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f078:	2b00      	cmp	r3, #0
 801f07a:	d001      	beq.n	801f080 <SD_InitCard+0x40>
    {
      return errorstate;
 801f07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f07e:	e099      	b.n	801f1b4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	2100      	movs	r1, #0
 801f086:	4618      	mov	r0, r3
 801f088:	f003 ff3b 	bl	8022f02 <SDMMC_GetResponse>
 801f08c:	4602      	mov	r2, r0
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	2104      	movs	r1, #4
 801f098:	4618      	mov	r0, r3
 801f09a:	f003 ff32 	bl	8022f02 <SDMMC_GetResponse>
 801f09e:	4602      	mov	r2, r0
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	2108      	movs	r1, #8
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	f003 ff29 	bl	8022f02 <SDMMC_GetResponse>
 801f0b0:	4602      	mov	r2, r0
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	210c      	movs	r1, #12
 801f0bc:	4618      	mov	r0, r3
 801f0be:	f003 ff20 	bl	8022f02 <SDMMC_GetResponse>
 801f0c2:	4602      	mov	r2, r0
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f0cc:	2b03      	cmp	r3, #3
 801f0ce:	d00d      	beq.n	801f0ec <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	f107 020e 	add.w	r2, r7, #14
 801f0d8:	4611      	mov	r1, r2
 801f0da:	4618      	mov	r0, r3
 801f0dc:	f004 f965 	bl	80233aa <SDMMC_CmdSetRelAdd>
 801f0e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801f0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	d001      	beq.n	801f0ec <SD_InitCard+0xac>
    {
      return errorstate;
 801f0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f0ea:	e063      	b.n	801f1b4 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f0f0:	2b03      	cmp	r3, #3
 801f0f2:	d036      	beq.n	801f162 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801f0f4:	89fb      	ldrh	r3, [r7, #14]
 801f0f6:	461a      	mov	r2, r3
 801f0f8:	687b      	ldr	r3, [r7, #4]
 801f0fa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	681a      	ldr	r2, [r3, #0]
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f104:	041b      	lsls	r3, r3, #16
 801f106:	4619      	mov	r1, r3
 801f108:	4610      	mov	r0, r2
 801f10a:	f004 f92e 	bl	802336a <SDMMC_CmdSendCSD>
 801f10e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801f110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f112:	2b00      	cmp	r3, #0
 801f114:	d001      	beq.n	801f11a <SD_InitCard+0xda>
    {
      return errorstate;
 801f116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f118:	e04c      	b.n	801f1b4 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	681b      	ldr	r3, [r3, #0]
 801f11e:	2100      	movs	r1, #0
 801f120:	4618      	mov	r0, r3
 801f122:	f003 feee 	bl	8022f02 <SDMMC_GetResponse>
 801f126:	4602      	mov	r2, r0
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	2104      	movs	r1, #4
 801f132:	4618      	mov	r0, r3
 801f134:	f003 fee5 	bl	8022f02 <SDMMC_GetResponse>
 801f138:	4602      	mov	r2, r0
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801f13e:	687b      	ldr	r3, [r7, #4]
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	2108      	movs	r1, #8
 801f144:	4618      	mov	r0, r3
 801f146:	f003 fedc 	bl	8022f02 <SDMMC_GetResponse>
 801f14a:	4602      	mov	r2, r0
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	210c      	movs	r1, #12
 801f156:	4618      	mov	r0, r3
 801f158:	f003 fed3 	bl	8022f02 <SDMMC_GetResponse>
 801f15c:	4602      	mov	r2, r0
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	2104      	movs	r1, #4
 801f168:	4618      	mov	r0, r3
 801f16a:	f003 feca 	bl	8022f02 <SDMMC_GetResponse>
 801f16e:	4603      	mov	r3, r0
 801f170:	0d1a      	lsrs	r2, r3, #20
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801f176:	f107 0310 	add.w	r3, r7, #16
 801f17a:	4619      	mov	r1, r3
 801f17c:	6878      	ldr	r0, [r7, #4]
 801f17e:	f7ff fc0f 	bl	801e9a0 <HAL_SD_GetCardCSD>
 801f182:	4603      	mov	r3, r0
 801f184:	2b00      	cmp	r3, #0
 801f186:	d002      	beq.n	801f18e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801f188:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f18c:	e012      	b.n	801f1b4 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	6819      	ldr	r1, [r3, #0]
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f196:	041b      	lsls	r3, r3, #16
 801f198:	f04f 0400 	mov.w	r4, #0
 801f19c:	461a      	mov	r2, r3
 801f19e:	4623      	mov	r3, r4
 801f1a0:	4608      	mov	r0, r1
 801f1a2:	f003 ffd9 	bl	8023158 <SDMMC_CmdSelDesel>
 801f1a6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 801f1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	d001      	beq.n	801f1b2 <SD_InitCard+0x172>
  {
    return errorstate;
 801f1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f1b0:	e000      	b.n	801f1b4 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801f1b2:	2300      	movs	r3, #0
}
 801f1b4:	4618      	mov	r0, r3
 801f1b6:	3744      	adds	r7, #68	; 0x44
 801f1b8:	46bd      	mov	sp, r7
 801f1ba:	bd90      	pop	{r4, r7, pc}

0801f1bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801f1bc:	b580      	push	{r7, lr}
 801f1be:	b088      	sub	sp, #32
 801f1c0:	af00      	add	r7, sp, #0
 801f1c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801f1c4:	2300      	movs	r3, #0
 801f1c6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	61fb      	str	r3, [r7, #28]
 801f1cc:	2300      	movs	r3, #0
 801f1ce:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 801f1d0:	f7f5 fd90 	bl	8014cf4 <HAL_GetTick>
 801f1d4:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801f1d6:	687b      	ldr	r3, [r7, #4]
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	4618      	mov	r0, r3
 801f1dc:	f003 ffe0 	bl	80231a0 <SDMMC_CmdGoIdleState>
 801f1e0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f1e2:	693b      	ldr	r3, [r7, #16]
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d001      	beq.n	801f1ec <SD_PowerON+0x30>
  {
    return errorstate;
 801f1e8:	693b      	ldr	r3, [r7, #16]
 801f1ea:	e0e9      	b.n	801f3c0 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	4618      	mov	r0, r3
 801f1f2:	f003 fff3 	bl	80231dc <SDMMC_CmdOperCond>
 801f1f6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f1f8:	693b      	ldr	r3, [r7, #16]
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d00d      	beq.n	801f21a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	2200      	movs	r2, #0
 801f202:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	681b      	ldr	r3, [r3, #0]
 801f208:	4618      	mov	r0, r3
 801f20a:	f003 ffc9 	bl	80231a0 <SDMMC_CmdGoIdleState>
 801f20e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f210:	693b      	ldr	r3, [r7, #16]
 801f212:	2b00      	cmp	r3, #0
 801f214:	d004      	beq.n	801f220 <SD_PowerON+0x64>
    {
      return errorstate;
 801f216:	693b      	ldr	r3, [r7, #16]
 801f218:	e0d2      	b.n	801f3c0 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	2201      	movs	r2, #1
 801f21e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f224:	2b01      	cmp	r3, #1
 801f226:	d137      	bne.n	801f298 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	681b      	ldr	r3, [r3, #0]
 801f22c:	2100      	movs	r1, #0
 801f22e:	4618      	mov	r0, r3
 801f230:	f003 fff4 	bl	802321c <SDMMC_CmdAppCommand>
 801f234:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f236:	693b      	ldr	r3, [r7, #16]
 801f238:	2b00      	cmp	r3, #0
 801f23a:	d02d      	beq.n	801f298 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801f23c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f240:	e0be      	b.n	801f3c0 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	681b      	ldr	r3, [r3, #0]
 801f246:	2100      	movs	r1, #0
 801f248:	4618      	mov	r0, r3
 801f24a:	f003 ffe7 	bl	802321c <SDMMC_CmdAppCommand>
 801f24e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f250:	693b      	ldr	r3, [r7, #16]
 801f252:	2b00      	cmp	r3, #0
 801f254:	d001      	beq.n	801f25a <SD_PowerON+0x9e>
    {
      return errorstate;
 801f256:	693b      	ldr	r3, [r7, #16]
 801f258:	e0b2      	b.n	801f3c0 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801f25a:	687b      	ldr	r3, [r7, #4]
 801f25c:	681b      	ldr	r3, [r3, #0]
 801f25e:	495a      	ldr	r1, [pc, #360]	; (801f3c8 <SD_PowerON+0x20c>)
 801f260:	4618      	mov	r0, r3
 801f262:	f003 fffe 	bl	8023262 <SDMMC_CmdAppOperCommand>
 801f266:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f268:	693b      	ldr	r3, [r7, #16]
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	d002      	beq.n	801f274 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801f26e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f272:	e0a5      	b.n	801f3c0 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	2100      	movs	r1, #0
 801f27a:	4618      	mov	r0, r3
 801f27c:	f003 fe41 	bl	8022f02 <SDMMC_GetResponse>
 801f280:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801f282:	69fb      	ldr	r3, [r7, #28]
 801f284:	0fdb      	lsrs	r3, r3, #31
 801f286:	2b01      	cmp	r3, #1
 801f288:	d101      	bne.n	801f28e <SD_PowerON+0xd2>
 801f28a:	2301      	movs	r3, #1
 801f28c:	e000      	b.n	801f290 <SD_PowerON+0xd4>
 801f28e:	2300      	movs	r3, #0
 801f290:	61bb      	str	r3, [r7, #24]

    count++;
 801f292:	68fb      	ldr	r3, [r7, #12]
 801f294:	3301      	adds	r3, #1
 801f296:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801f298:	68fb      	ldr	r3, [r7, #12]
 801f29a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f29e:	4293      	cmp	r3, r2
 801f2a0:	d802      	bhi.n	801f2a8 <SD_PowerON+0xec>
 801f2a2:	69bb      	ldr	r3, [r7, #24]
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	d0cc      	beq.n	801f242 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801f2a8:	68fb      	ldr	r3, [r7, #12]
 801f2aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f2ae:	4293      	cmp	r3, r2
 801f2b0:	d902      	bls.n	801f2b8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801f2b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801f2b6:	e083      	b.n	801f3c0 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801f2b8:	69fb      	ldr	r3, [r7, #28]
 801f2ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801f2be:	2b00      	cmp	r3, #0
 801f2c0:	d07d      	beq.n	801f3be <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	2201      	movs	r2, #1
 801f2c6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	699b      	ldr	r3, [r3, #24]
 801f2cc:	2b02      	cmp	r3, #2
 801f2ce:	d176      	bne.n	801f3be <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 801f2d0:	69fb      	ldr	r3, [r7, #28]
 801f2d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d071      	beq.n	801f3be <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f2e0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	681b      	ldr	r3, [r3, #0]
 801f2e6:	681a      	ldr	r2, [r3, #0]
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	681b      	ldr	r3, [r3, #0]
 801f2ec:	f042 0208 	orr.w	r2, r2, #8
 801f2f0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 801f2f2:	687b      	ldr	r3, [r7, #4]
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	4618      	mov	r0, r3
 801f2f8:	f004 f8be 	bl	8023478 <SDMMC_CmdVoltageSwitch>
 801f2fc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 801f2fe:	693b      	ldr	r3, [r7, #16]
 801f300:	2b00      	cmp	r3, #0
 801f302:	d00c      	beq.n	801f31e <SD_PowerON+0x162>
        {
          return errorstate;
 801f304:	693b      	ldr	r3, [r7, #16]
 801f306:	e05b      	b.n	801f3c0 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801f308:	f7f5 fcf4 	bl	8014cf4 <HAL_GetTick>
 801f30c:	4602      	mov	r2, r0
 801f30e:	697b      	ldr	r3, [r7, #20]
 801f310:	1ad3      	subs	r3, r2, r3
 801f312:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f316:	d102      	bne.n	801f31e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 801f318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801f31c:	e050      	b.n	801f3c0 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 801f31e:	687b      	ldr	r3, [r7, #4]
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801f328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801f32c:	d1ec      	bne.n	801f308 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	681b      	ldr	r3, [r3, #0]
 801f332:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801f336:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	681b      	ldr	r3, [r3, #0]
 801f33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f33e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f346:	d002      	beq.n	801f34e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 801f348:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f34c:	e038      	b.n	801f3c0 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 801f34e:	2001      	movs	r0, #1
 801f350:	f7ff fb1a 	bl	801e988 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	681b      	ldr	r3, [r3, #0]
 801f358:	681a      	ldr	r2, [r3, #0]
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	681b      	ldr	r3, [r3, #0]
 801f35e:	f042 0204 	orr.w	r2, r2, #4
 801f362:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801f364:	e00a      	b.n	801f37c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801f366:	f7f5 fcc5 	bl	8014cf4 <HAL_GetTick>
 801f36a:	4602      	mov	r2, r0
 801f36c:	697b      	ldr	r3, [r7, #20]
 801f36e:	1ad3      	subs	r3, r2, r3
 801f370:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f374:	d102      	bne.n	801f37c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 801f376:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801f37a:	e021      	b.n	801f3c0 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801f37c:	687b      	ldr	r3, [r7, #4]
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801f38a:	d1ec      	bne.n	801f366 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	681b      	ldr	r3, [r3, #0]
 801f390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801f394:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 801f396:	687b      	ldr	r3, [r7, #4]
 801f398:	681b      	ldr	r3, [r3, #0]
 801f39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f39c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f3a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f3a4:	d102      	bne.n	801f3ac <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801f3a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801f3aa:	e009      	b.n	801f3c0 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 801f3ac:	687b      	ldr	r3, [r7, #4]
 801f3ae:	681b      	ldr	r3, [r3, #0]
 801f3b0:	2213      	movs	r2, #19
 801f3b2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 801f3b4:	687b      	ldr	r3, [r7, #4]
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	f04f 32ff 	mov.w	r2, #4294967295
 801f3bc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801f3be:	2300      	movs	r3, #0
}
 801f3c0:	4618      	mov	r0, r3
 801f3c2:	3720      	adds	r7, #32
 801f3c4:	46bd      	mov	sp, r7
 801f3c6:	bd80      	pop	{r7, pc}
 801f3c8:	c1100000 	.word	0xc1100000

0801f3cc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801f3cc:	b580      	push	{r7, lr}
 801f3ce:	b08c      	sub	sp, #48	; 0x30
 801f3d0:	af00      	add	r7, sp, #0
 801f3d2:	6078      	str	r0, [r7, #4]
 801f3d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801f3d6:	f7f5 fc8d 	bl	8014cf4 <HAL_GetTick>
 801f3da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801f3dc:	683b      	ldr	r3, [r7, #0]
 801f3de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801f3e0:	687b      	ldr	r3, [r7, #4]
 801f3e2:	681b      	ldr	r3, [r3, #0]
 801f3e4:	2100      	movs	r1, #0
 801f3e6:	4618      	mov	r0, r3
 801f3e8:	f003 fd8b 	bl	8022f02 <SDMMC_GetResponse>
 801f3ec:	4603      	mov	r3, r0
 801f3ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f3f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801f3f6:	d102      	bne.n	801f3fe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801f3f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f3fc:	e0b0      	b.n	801f560 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	2140      	movs	r1, #64	; 0x40
 801f404:	4618      	mov	r0, r3
 801f406:	f003 fdbb 	bl	8022f80 <SDMMC_CmdBlockLength>
 801f40a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f40c:	6a3b      	ldr	r3, [r7, #32]
 801f40e:	2b00      	cmp	r3, #0
 801f410:	d005      	beq.n	801f41e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801f412:	687b      	ldr	r3, [r7, #4]
 801f414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801f41a:	6a3b      	ldr	r3, [r7, #32]
 801f41c:	e0a0      	b.n	801f560 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	681a      	ldr	r2, [r3, #0]
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f426:	041b      	lsls	r3, r3, #16
 801f428:	4619      	mov	r1, r3
 801f42a:	4610      	mov	r0, r2
 801f42c:	f003 fef6 	bl	802321c <SDMMC_CmdAppCommand>
 801f430:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f432:	6a3b      	ldr	r3, [r7, #32]
 801f434:	2b00      	cmp	r3, #0
 801f436:	d005      	beq.n	801f444 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801f440:	6a3b      	ldr	r3, [r7, #32]
 801f442:	e08d      	b.n	801f560 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801f444:	f04f 33ff 	mov.w	r3, #4294967295
 801f448:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801f44a:	2340      	movs	r3, #64	; 0x40
 801f44c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801f44e:	2360      	movs	r3, #96	; 0x60
 801f450:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801f452:	2302      	movs	r3, #2
 801f454:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801f456:	2300      	movs	r3, #0
 801f458:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801f45a:	2301      	movs	r3, #1
 801f45c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	f107 0208 	add.w	r2, r7, #8
 801f466:	4611      	mov	r1, r2
 801f468:	4618      	mov	r0, r3
 801f46a:	f003 fd5d 	bl	8022f28 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 801f46e:	687b      	ldr	r3, [r7, #4]
 801f470:	681b      	ldr	r3, [r3, #0]
 801f472:	4618      	mov	r0, r3
 801f474:	f003 ffde 	bl	8023434 <SDMMC_CmdStatusRegister>
 801f478:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f47a:	6a3b      	ldr	r3, [r7, #32]
 801f47c:	2b00      	cmp	r3, #0
 801f47e:	d02b      	beq.n	801f4d8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801f488:	6a3b      	ldr	r3, [r7, #32]
 801f48a:	e069      	b.n	801f560 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801f496:	2b00      	cmp	r3, #0
 801f498:	d013      	beq.n	801f4c2 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 801f49a:	2300      	movs	r3, #0
 801f49c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f49e:	e00d      	b.n	801f4bc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 801f4a0:	687b      	ldr	r3, [r7, #4]
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	4618      	mov	r0, r3
 801f4a6:	f003 fcb7 	bl	8022e18 <SDMMC_ReadFIFO>
 801f4aa:	4602      	mov	r2, r0
 801f4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4ae:	601a      	str	r2, [r3, #0]
        pData++;
 801f4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4b2:	3304      	adds	r3, #4
 801f4b4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 801f4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4b8:	3301      	adds	r3, #1
 801f4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4be:	2b07      	cmp	r3, #7
 801f4c0:	d9ee      	bls.n	801f4a0 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801f4c2:	f7f5 fc17 	bl	8014cf4 <HAL_GetTick>
 801f4c6:	4602      	mov	r2, r0
 801f4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4ca:	1ad3      	subs	r3, r2, r3
 801f4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f4d0:	d102      	bne.n	801f4d8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801f4d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801f4d6:	e043      	b.n	801f560 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f4de:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	d0d2      	beq.n	801f48c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f4ec:	f003 0308 	and.w	r3, r3, #8
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	d001      	beq.n	801f4f8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801f4f4:	2308      	movs	r3, #8
 801f4f6:	e033      	b.n	801f560 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	681b      	ldr	r3, [r3, #0]
 801f4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f4fe:	f003 0302 	and.w	r3, r3, #2
 801f502:	2b00      	cmp	r3, #0
 801f504:	d001      	beq.n	801f50a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801f506:	2302      	movs	r3, #2
 801f508:	e02a      	b.n	801f560 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801f50a:	687b      	ldr	r3, [r7, #4]
 801f50c:	681b      	ldr	r3, [r3, #0]
 801f50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f510:	f003 0320 	and.w	r3, r3, #32
 801f514:	2b00      	cmp	r3, #0
 801f516:	d017      	beq.n	801f548 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 801f518:	2320      	movs	r3, #32
 801f51a:	e021      	b.n	801f560 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	4618      	mov	r0, r3
 801f522:	f003 fc79 	bl	8022e18 <SDMMC_ReadFIFO>
 801f526:	4602      	mov	r2, r0
 801f528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f52a:	601a      	str	r2, [r3, #0]
    pData++;
 801f52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f52e:	3304      	adds	r3, #4
 801f530:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801f532:	f7f5 fbdf 	bl	8014cf4 <HAL_GetTick>
 801f536:	4602      	mov	r2, r0
 801f538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f53a:	1ad3      	subs	r3, r2, r3
 801f53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f540:	d102      	bne.n	801f548 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801f542:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801f546:	e00b      	b.n	801f560 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f54e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801f552:	2b00      	cmp	r3, #0
 801f554:	d1e2      	bne.n	801f51c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	4a03      	ldr	r2, [pc, #12]	; (801f568 <SD_SendSDStatus+0x19c>)
 801f55c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 801f55e:	2300      	movs	r3, #0
}
 801f560:	4618      	mov	r0, r3
 801f562:	3730      	adds	r7, #48	; 0x30
 801f564:	46bd      	mov	sp, r7
 801f566:	bd80      	pop	{r7, pc}
 801f568:	18000f3a 	.word	0x18000f3a

0801f56c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 801f56c:	b580      	push	{r7, lr}
 801f56e:	b084      	sub	sp, #16
 801f570:	af00      	add	r7, sp, #0
 801f572:	6078      	str	r0, [r7, #4]
 801f574:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801f576:	683b      	ldr	r3, [r7, #0]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d102      	bne.n	801f582 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 801f57c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801f580:	e018      	b.n	801f5b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	681a      	ldr	r2, [r3, #0]
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f58a:	041b      	lsls	r3, r3, #16
 801f58c:	4619      	mov	r1, r3
 801f58e:	4610      	mov	r0, r2
 801f590:	f003 ff2d 	bl	80233ee <SDMMC_CmdSendStatus>
 801f594:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f596:	68fb      	ldr	r3, [r7, #12]
 801f598:	2b00      	cmp	r3, #0
 801f59a:	d001      	beq.n	801f5a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 801f59c:	68fb      	ldr	r3, [r7, #12]
 801f59e:	e009      	b.n	801f5b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	2100      	movs	r1, #0
 801f5a6:	4618      	mov	r0, r3
 801f5a8:	f003 fcab 	bl	8022f02 <SDMMC_GetResponse>
 801f5ac:	4602      	mov	r2, r0
 801f5ae:	683b      	ldr	r3, [r7, #0]
 801f5b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801f5b2:	2300      	movs	r3, #0
}
 801f5b4:	4618      	mov	r0, r3
 801f5b6:	3710      	adds	r7, #16
 801f5b8:	46bd      	mov	sp, r7
 801f5ba:	bd80      	pop	{r7, pc}

0801f5bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801f5bc:	b580      	push	{r7, lr}
 801f5be:	b086      	sub	sp, #24
 801f5c0:	af00      	add	r7, sp, #0
 801f5c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801f5c4:	2300      	movs	r3, #0
 801f5c6:	60fb      	str	r3, [r7, #12]
 801f5c8:	2300      	movs	r3, #0
 801f5ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	681b      	ldr	r3, [r3, #0]
 801f5d0:	2100      	movs	r1, #0
 801f5d2:	4618      	mov	r0, r3
 801f5d4:	f003 fc95 	bl	8022f02 <SDMMC_GetResponse>
 801f5d8:	4603      	mov	r3, r0
 801f5da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f5de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801f5e2:	d102      	bne.n	801f5ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801f5e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f5e8:	e02f      	b.n	801f64a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801f5ea:	f107 030c 	add.w	r3, r7, #12
 801f5ee:	4619      	mov	r1, r3
 801f5f0:	6878      	ldr	r0, [r7, #4]
 801f5f2:	f000 f879 	bl	801f6e8 <SD_FindSCR>
 801f5f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f5f8:	697b      	ldr	r3, [r7, #20]
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	d001      	beq.n	801f602 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801f5fe:	697b      	ldr	r3, [r7, #20]
 801f600:	e023      	b.n	801f64a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801f602:	693b      	ldr	r3, [r7, #16]
 801f604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d01c      	beq.n	801f646 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	681a      	ldr	r2, [r3, #0]
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f614:	041b      	lsls	r3, r3, #16
 801f616:	4619      	mov	r1, r3
 801f618:	4610      	mov	r0, r2
 801f61a:	f003 fdff 	bl	802321c <SDMMC_CmdAppCommand>
 801f61e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f620:	697b      	ldr	r3, [r7, #20]
 801f622:	2b00      	cmp	r3, #0
 801f624:	d001      	beq.n	801f62a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801f626:	697b      	ldr	r3, [r7, #20]
 801f628:	e00f      	b.n	801f64a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	681b      	ldr	r3, [r3, #0]
 801f62e:	2102      	movs	r1, #2
 801f630:	4618      	mov	r0, r3
 801f632:	f003 fe36 	bl	80232a2 <SDMMC_CmdBusWidth>
 801f636:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f638:	697b      	ldr	r3, [r7, #20]
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	d001      	beq.n	801f642 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801f63e:	697b      	ldr	r3, [r7, #20]
 801f640:	e003      	b.n	801f64a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801f642:	2300      	movs	r3, #0
 801f644:	e001      	b.n	801f64a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801f646:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801f64a:	4618      	mov	r0, r3
 801f64c:	3718      	adds	r7, #24
 801f64e:	46bd      	mov	sp, r7
 801f650:	bd80      	pop	{r7, pc}

0801f652 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801f652:	b580      	push	{r7, lr}
 801f654:	b086      	sub	sp, #24
 801f656:	af00      	add	r7, sp, #0
 801f658:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801f65a:	2300      	movs	r3, #0
 801f65c:	60fb      	str	r3, [r7, #12]
 801f65e:	2300      	movs	r3, #0
 801f660:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	2100      	movs	r1, #0
 801f668:	4618      	mov	r0, r3
 801f66a:	f003 fc4a 	bl	8022f02 <SDMMC_GetResponse>
 801f66e:	4603      	mov	r3, r0
 801f670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801f678:	d102      	bne.n	801f680 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801f67a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f67e:	e02f      	b.n	801f6e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801f680:	f107 030c 	add.w	r3, r7, #12
 801f684:	4619      	mov	r1, r3
 801f686:	6878      	ldr	r0, [r7, #4]
 801f688:	f000 f82e 	bl	801f6e8 <SD_FindSCR>
 801f68c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801f68e:	697b      	ldr	r3, [r7, #20]
 801f690:	2b00      	cmp	r3, #0
 801f692:	d001      	beq.n	801f698 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801f694:	697b      	ldr	r3, [r7, #20]
 801f696:	e023      	b.n	801f6e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801f698:	693b      	ldr	r3, [r7, #16]
 801f69a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d01c      	beq.n	801f6dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	681a      	ldr	r2, [r3, #0]
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f6aa:	041b      	lsls	r3, r3, #16
 801f6ac:	4619      	mov	r1, r3
 801f6ae:	4610      	mov	r0, r2
 801f6b0:	f003 fdb4 	bl	802321c <SDMMC_CmdAppCommand>
 801f6b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f6b6:	697b      	ldr	r3, [r7, #20]
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	d001      	beq.n	801f6c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801f6bc:	697b      	ldr	r3, [r7, #20]
 801f6be:	e00f      	b.n	801f6e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	681b      	ldr	r3, [r3, #0]
 801f6c4:	2100      	movs	r1, #0
 801f6c6:	4618      	mov	r0, r3
 801f6c8:	f003 fdeb 	bl	80232a2 <SDMMC_CmdBusWidth>
 801f6cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801f6ce:	697b      	ldr	r3, [r7, #20]
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	d001      	beq.n	801f6d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801f6d4:	697b      	ldr	r3, [r7, #20]
 801f6d6:	e003      	b.n	801f6e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801f6d8:	2300      	movs	r3, #0
 801f6da:	e001      	b.n	801f6e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801f6dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801f6e0:	4618      	mov	r0, r3
 801f6e2:	3718      	adds	r7, #24
 801f6e4:	46bd      	mov	sp, r7
 801f6e6:	bd80      	pop	{r7, pc}

0801f6e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801f6e8:	b580      	push	{r7, lr}
 801f6ea:	b08e      	sub	sp, #56	; 0x38
 801f6ec:	af00      	add	r7, sp, #0
 801f6ee:	6078      	str	r0, [r7, #4]
 801f6f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801f6f2:	f7f5 faff 	bl	8014cf4 <HAL_GetTick>
 801f6f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 801f6f8:	2300      	movs	r3, #0
 801f6fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801f6fc:	2300      	movs	r3, #0
 801f6fe:	60bb      	str	r3, [r7, #8]
 801f700:	2300      	movs	r3, #0
 801f702:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801f704:	683b      	ldr	r3, [r7, #0]
 801f706:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	2108      	movs	r1, #8
 801f70e:	4618      	mov	r0, r3
 801f710:	f003 fc36 	bl	8022f80 <SDMMC_CmdBlockLength>
 801f714:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801f716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f718:	2b00      	cmp	r3, #0
 801f71a:	d001      	beq.n	801f720 <SD_FindSCR+0x38>
  {
    return errorstate;
 801f71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f71e:	e0ad      	b.n	801f87c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	681a      	ldr	r2, [r3, #0]
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f728:	041b      	lsls	r3, r3, #16
 801f72a:	4619      	mov	r1, r3
 801f72c:	4610      	mov	r0, r2
 801f72e:	f003 fd75 	bl	802321c <SDMMC_CmdAppCommand>
 801f732:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801f734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f736:	2b00      	cmp	r3, #0
 801f738:	d001      	beq.n	801f73e <SD_FindSCR+0x56>
  {
    return errorstate;
 801f73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f73c:	e09e      	b.n	801f87c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801f73e:	f04f 33ff 	mov.w	r3, #4294967295
 801f742:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801f744:	2308      	movs	r3, #8
 801f746:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 801f748:	2330      	movs	r3, #48	; 0x30
 801f74a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801f74c:	2302      	movs	r3, #2
 801f74e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801f750:	2300      	movs	r3, #0
 801f752:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801f754:	2301      	movs	r3, #1
 801f756:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	681b      	ldr	r3, [r3, #0]
 801f75c:	f107 0210 	add.w	r2, r7, #16
 801f760:	4611      	mov	r1, r2
 801f762:	4618      	mov	r0, r3
 801f764:	f003 fbe0 	bl	8022f28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	681b      	ldr	r3, [r3, #0]
 801f76c:	4618      	mov	r0, r3
 801f76e:	f003 fdbb 	bl	80232e8 <SDMMC_CmdSendSCR>
 801f772:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f776:	2b00      	cmp	r3, #0
 801f778:	d027      	beq.n	801f7ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 801f77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f77c:	e07e      	b.n	801f87c <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	681b      	ldr	r3, [r3, #0]
 801f782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d113      	bne.n	801f7b4 <SD_FindSCR+0xcc>
 801f78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d110      	bne.n	801f7b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	681b      	ldr	r3, [r3, #0]
 801f796:	4618      	mov	r0, r3
 801f798:	f003 fb3e 	bl	8022e18 <SDMMC_ReadFIFO>
 801f79c:	4603      	mov	r3, r0
 801f79e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 801f7a0:	687b      	ldr	r3, [r7, #4]
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	4618      	mov	r0, r3
 801f7a6:	f003 fb37 	bl	8022e18 <SDMMC_ReadFIFO>
 801f7aa:	4603      	mov	r3, r0
 801f7ac:	60fb      	str	r3, [r7, #12]
      index++;
 801f7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f7b0:	3301      	adds	r3, #1
 801f7b2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801f7b4:	f7f5 fa9e 	bl	8014cf4 <HAL_GetTick>
 801f7b8:	4602      	mov	r2, r0
 801f7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f7bc:	1ad3      	subs	r3, r2, r3
 801f7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f7c2:	d102      	bne.n	801f7ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801f7c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801f7c8:	e058      	b.n	801f87c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	681b      	ldr	r3, [r3, #0]
 801f7ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801f7d0:	f240 532a 	movw	r3, #1322	; 0x52a
 801f7d4:	4013      	ands	r3, r2
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d0d1      	beq.n	801f77e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f7e0:	f003 0308 	and.w	r3, r3, #8
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	d005      	beq.n	801f7f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	2208      	movs	r2, #8
 801f7ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801f7f0:	2308      	movs	r3, #8
 801f7f2:	e043      	b.n	801f87c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801f7f4:	687b      	ldr	r3, [r7, #4]
 801f7f6:	681b      	ldr	r3, [r3, #0]
 801f7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f7fa:	f003 0302 	and.w	r3, r3, #2
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	d005      	beq.n	801f80e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	2202      	movs	r2, #2
 801f808:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801f80a:	2302      	movs	r3, #2
 801f80c:	e036      	b.n	801f87c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f814:	f003 0320 	and.w	r3, r3, #32
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d005      	beq.n	801f828 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	681b      	ldr	r3, [r3, #0]
 801f820:	2220      	movs	r2, #32
 801f822:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801f824:	2320      	movs	r3, #32
 801f826:	e029      	b.n	801f87c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801f828:	687b      	ldr	r3, [r7, #4]
 801f82a:	681b      	ldr	r3, [r3, #0]
 801f82c:	4a15      	ldr	r2, [pc, #84]	; (801f884 <SD_FindSCR+0x19c>)
 801f82e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801f830:	68fb      	ldr	r3, [r7, #12]
 801f832:	061a      	lsls	r2, r3, #24
 801f834:	68fb      	ldr	r3, [r7, #12]
 801f836:	021b      	lsls	r3, r3, #8
 801f838:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801f83c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801f83e:	68fb      	ldr	r3, [r7, #12]
 801f840:	0a1b      	lsrs	r3, r3, #8
 801f842:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801f846:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801f848:	68fb      	ldr	r3, [r7, #12]
 801f84a:	0e1b      	lsrs	r3, r3, #24
 801f84c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801f84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f850:	601a      	str	r2, [r3, #0]
    scr++;
 801f852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f854:	3304      	adds	r3, #4
 801f856:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801f858:	68bb      	ldr	r3, [r7, #8]
 801f85a:	061a      	lsls	r2, r3, #24
 801f85c:	68bb      	ldr	r3, [r7, #8]
 801f85e:	021b      	lsls	r3, r3, #8
 801f860:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801f864:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801f866:	68bb      	ldr	r3, [r7, #8]
 801f868:	0a1b      	lsrs	r3, r3, #8
 801f86a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801f86e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801f870:	68bb      	ldr	r3, [r7, #8]
 801f872:	0e1b      	lsrs	r3, r3, #24
 801f874:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801f876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f878:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801f87a:	2300      	movs	r3, #0
}
 801f87c:	4618      	mov	r0, r3
 801f87e:	3738      	adds	r7, #56	; 0x38
 801f880:	46bd      	mov	sp, r7
 801f882:	bd80      	pop	{r7, pc}
 801f884:	18000f3a 	.word	0x18000f3a

0801f888 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 801f888:	b580      	push	{r7, lr}
 801f88a:	b086      	sub	sp, #24
 801f88c:	af00      	add	r7, sp, #0
 801f88e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f894:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f89a:	2b1f      	cmp	r3, #31
 801f89c:	d936      	bls.n	801f90c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 801f89e:	2300      	movs	r3, #0
 801f8a0:	617b      	str	r3, [r7, #20]
 801f8a2:	e027      	b.n	801f8f4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	4618      	mov	r0, r3
 801f8aa:	f003 fab5 	bl	8022e18 <SDMMC_ReadFIFO>
 801f8ae:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 801f8b0:	68fb      	ldr	r3, [r7, #12]
 801f8b2:	b2da      	uxtb	r2, r3
 801f8b4:	693b      	ldr	r3, [r7, #16]
 801f8b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f8b8:	693b      	ldr	r3, [r7, #16]
 801f8ba:	3301      	adds	r3, #1
 801f8bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	0a1b      	lsrs	r3, r3, #8
 801f8c2:	b2da      	uxtb	r2, r3
 801f8c4:	693b      	ldr	r3, [r7, #16]
 801f8c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f8c8:	693b      	ldr	r3, [r7, #16]
 801f8ca:	3301      	adds	r3, #1
 801f8cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801f8ce:	68fb      	ldr	r3, [r7, #12]
 801f8d0:	0c1b      	lsrs	r3, r3, #16
 801f8d2:	b2da      	uxtb	r2, r3
 801f8d4:	693b      	ldr	r3, [r7, #16]
 801f8d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f8d8:	693b      	ldr	r3, [r7, #16]
 801f8da:	3301      	adds	r3, #1
 801f8dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801f8de:	68fb      	ldr	r3, [r7, #12]
 801f8e0:	0e1b      	lsrs	r3, r3, #24
 801f8e2:	b2da      	uxtb	r2, r3
 801f8e4:	693b      	ldr	r3, [r7, #16]
 801f8e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 801f8e8:	693b      	ldr	r3, [r7, #16]
 801f8ea:	3301      	adds	r3, #1
 801f8ec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801f8ee:	697b      	ldr	r3, [r7, #20]
 801f8f0:	3301      	adds	r3, #1
 801f8f2:	617b      	str	r3, [r7, #20]
 801f8f4:	697b      	ldr	r3, [r7, #20]
 801f8f6:	2b07      	cmp	r3, #7
 801f8f8:	d9d4      	bls.n	801f8a4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	693a      	ldr	r2, [r7, #16]
 801f8fe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f904:	f1a3 0220 	sub.w	r2, r3, #32
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 801f90c:	bf00      	nop
 801f90e:	3718      	adds	r7, #24
 801f910:	46bd      	mov	sp, r7
 801f912:	bd80      	pop	{r7, pc}

0801f914 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 801f914:	b580      	push	{r7, lr}
 801f916:	b086      	sub	sp, #24
 801f918:	af00      	add	r7, sp, #0
 801f91a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	6a1b      	ldr	r3, [r3, #32]
 801f920:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f926:	2b1f      	cmp	r3, #31
 801f928:	d93a      	bls.n	801f9a0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 801f92a:	2300      	movs	r3, #0
 801f92c:	617b      	str	r3, [r7, #20]
 801f92e:	e02b      	b.n	801f988 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 801f930:	693b      	ldr	r3, [r7, #16]
 801f932:	781b      	ldrb	r3, [r3, #0]
 801f934:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f936:	693b      	ldr	r3, [r7, #16]
 801f938:	3301      	adds	r3, #1
 801f93a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 801f93c:	693b      	ldr	r3, [r7, #16]
 801f93e:	781b      	ldrb	r3, [r3, #0]
 801f940:	021a      	lsls	r2, r3, #8
 801f942:	68fb      	ldr	r3, [r7, #12]
 801f944:	4313      	orrs	r3, r2
 801f946:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f948:	693b      	ldr	r3, [r7, #16]
 801f94a:	3301      	adds	r3, #1
 801f94c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801f94e:	693b      	ldr	r3, [r7, #16]
 801f950:	781b      	ldrb	r3, [r3, #0]
 801f952:	041a      	lsls	r2, r3, #16
 801f954:	68fb      	ldr	r3, [r7, #12]
 801f956:	4313      	orrs	r3, r2
 801f958:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f95a:	693b      	ldr	r3, [r7, #16]
 801f95c:	3301      	adds	r3, #1
 801f95e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801f960:	693b      	ldr	r3, [r7, #16]
 801f962:	781b      	ldrb	r3, [r3, #0]
 801f964:	061a      	lsls	r2, r3, #24
 801f966:	68fb      	ldr	r3, [r7, #12]
 801f968:	4313      	orrs	r3, r2
 801f96a:	60fb      	str	r3, [r7, #12]
      tmp++;
 801f96c:	693b      	ldr	r3, [r7, #16]
 801f96e:	3301      	adds	r3, #1
 801f970:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	f107 020c 	add.w	r2, r7, #12
 801f97a:	4611      	mov	r1, r2
 801f97c:	4618      	mov	r0, r3
 801f97e:	f003 fa58 	bl	8022e32 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 801f982:	697b      	ldr	r3, [r7, #20]
 801f984:	3301      	adds	r3, #1
 801f986:	617b      	str	r3, [r7, #20]
 801f988:	697b      	ldr	r3, [r7, #20]
 801f98a:	2b07      	cmp	r3, #7
 801f98c:	d9d0      	bls.n	801f930 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	693a      	ldr	r2, [r7, #16]
 801f992:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f998:	f1a3 0220 	sub.w	r2, r3, #32
 801f99c:	687b      	ldr	r3, [r7, #4]
 801f99e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 801f9a0:	bf00      	nop
 801f9a2:	3718      	adds	r7, #24
 801f9a4:	46bd      	mov	sp, r7
 801f9a6:	bd80      	pop	{r7, pc}

0801f9a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801f9a8:	b480      	push	{r7}
 801f9aa:	b083      	sub	sp, #12
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801f9b0:	bf00      	nop
 801f9b2:	370c      	adds	r7, #12
 801f9b4:	46bd      	mov	sp, r7
 801f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9ba:	4770      	bx	lr

0801f9bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801f9bc:	b480      	push	{r7}
 801f9be:	b083      	sub	sp, #12
 801f9c0:	af00      	add	r7, sp, #0
 801f9c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801f9c4:	bf00      	nop
 801f9c6:	370c      	adds	r7, #12
 801f9c8:	46bd      	mov	sp, r7
 801f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9ce:	4770      	bx	lr

0801f9d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801f9d0:	b480      	push	{r7}
 801f9d2:	b083      	sub	sp, #12
 801f9d4:	af00      	add	r7, sp, #0
 801f9d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 801f9d8:	bf00      	nop
 801f9da:	370c      	adds	r7, #12
 801f9dc:	46bd      	mov	sp, r7
 801f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9e2:	4770      	bx	lr

0801f9e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 801f9e4:	b480      	push	{r7}
 801f9e6:	b083      	sub	sp, #12
 801f9e8:	af00      	add	r7, sp, #0
 801f9ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801f9ec:	bf00      	nop
 801f9ee:	370c      	adds	r7, #12
 801f9f0:	46bd      	mov	sp, r7
 801f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9f6:	4770      	bx	lr

0801f9f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f9f8:	b580      	push	{r7, lr}
 801f9fa:	b082      	sub	sp, #8
 801f9fc:	af00      	add	r7, sp, #0
 801f9fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fa00:	687b      	ldr	r3, [r7, #4]
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d101      	bne.n	801fa0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801fa06:	2301      	movs	r3, #1
 801fa08:	e049      	b.n	801fa9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fa10:	b2db      	uxtb	r3, r3
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d106      	bne.n	801fa24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	2200      	movs	r2, #0
 801fa1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801fa1e:	6878      	ldr	r0, [r7, #4]
 801fa20:	f7f4 fbc0 	bl	80141a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	2202      	movs	r2, #2
 801fa28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fa2c:	687b      	ldr	r3, [r7, #4]
 801fa2e:	681a      	ldr	r2, [r3, #0]
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	3304      	adds	r3, #4
 801fa34:	4619      	mov	r1, r3
 801fa36:	4610      	mov	r0, r2
 801fa38:	f000 fef6 	bl	8020828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	2201      	movs	r2, #1
 801fa40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fa44:	687b      	ldr	r3, [r7, #4]
 801fa46:	2201      	movs	r2, #1
 801fa48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fa4c:	687b      	ldr	r3, [r7, #4]
 801fa4e:	2201      	movs	r2, #1
 801fa50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	2201      	movs	r2, #1
 801fa58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	2201      	movs	r2, #1
 801fa60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	2201      	movs	r2, #1
 801fa68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	2201      	movs	r2, #1
 801fa70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	2201      	movs	r2, #1
 801fa78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	2201      	movs	r2, #1
 801fa80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801fa84:	687b      	ldr	r3, [r7, #4]
 801fa86:	2201      	movs	r2, #1
 801fa88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801fa8c:	687b      	ldr	r3, [r7, #4]
 801fa8e:	2201      	movs	r2, #1
 801fa90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	2201      	movs	r2, #1
 801fa98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fa9c:	2300      	movs	r3, #0
}
 801fa9e:	4618      	mov	r0, r3
 801faa0:	3708      	adds	r7, #8
 801faa2:	46bd      	mov	sp, r7
 801faa4:	bd80      	pop	{r7, pc}
	...

0801faa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801faa8:	b480      	push	{r7}
 801faaa:	b085      	sub	sp, #20
 801faac:	af00      	add	r7, sp, #0
 801faae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fab6:	b2db      	uxtb	r3, r3
 801fab8:	2b01      	cmp	r3, #1
 801faba:	d001      	beq.n	801fac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801fabc:	2301      	movs	r3, #1
 801fabe:	e021      	b.n	801fb04 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	2202      	movs	r2, #2
 801fac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	68da      	ldr	r2, [r3, #12]
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	681b      	ldr	r3, [r3, #0]
 801fad2:	f042 0201 	orr.w	r2, r2, #1
 801fad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	681b      	ldr	r3, [r3, #0]
 801fadc:	689a      	ldr	r2, [r3, #8]
 801fade:	4b0c      	ldr	r3, [pc, #48]	; (801fb10 <HAL_TIM_Base_Start_IT+0x68>)
 801fae0:	4013      	ands	r3, r2
 801fae2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fae4:	68fb      	ldr	r3, [r7, #12]
 801fae6:	2b06      	cmp	r3, #6
 801fae8:	d00b      	beq.n	801fb02 <HAL_TIM_Base_Start_IT+0x5a>
 801faea:	68fb      	ldr	r3, [r7, #12]
 801faec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801faf0:	d007      	beq.n	801fb02 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	681b      	ldr	r3, [r3, #0]
 801faf6:	681a      	ldr	r2, [r3, #0]
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	f042 0201 	orr.w	r2, r2, #1
 801fb00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801fb02:	2300      	movs	r3, #0
}
 801fb04:	4618      	mov	r0, r3
 801fb06:	3714      	adds	r7, #20
 801fb08:	46bd      	mov	sp, r7
 801fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb0e:	4770      	bx	lr
 801fb10:	00010007 	.word	0x00010007

0801fb14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801fb14:	b580      	push	{r7, lr}
 801fb16:	b082      	sub	sp, #8
 801fb18:	af00      	add	r7, sp, #0
 801fb1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	d101      	bne.n	801fb26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801fb22:	2301      	movs	r3, #1
 801fb24:	e049      	b.n	801fbba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fb26:	687b      	ldr	r3, [r7, #4]
 801fb28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fb2c:	b2db      	uxtb	r3, r3
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d106      	bne.n	801fb40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	2200      	movs	r2, #0
 801fb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801fb3a:	6878      	ldr	r0, [r7, #4]
 801fb3c:	f000 f841 	bl	801fbc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	2202      	movs	r2, #2
 801fb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	681a      	ldr	r2, [r3, #0]
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	3304      	adds	r3, #4
 801fb50:	4619      	mov	r1, r3
 801fb52:	4610      	mov	r0, r2
 801fb54:	f000 fe68 	bl	8020828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	2201      	movs	r2, #1
 801fb5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	2201      	movs	r2, #1
 801fb64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	2201      	movs	r2, #1
 801fb6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	2201      	movs	r2, #1
 801fb74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	2201      	movs	r2, #1
 801fb7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	2201      	movs	r2, #1
 801fb84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	2201      	movs	r2, #1
 801fb8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	2201      	movs	r2, #1
 801fb94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	2201      	movs	r2, #1
 801fb9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	2201      	movs	r2, #1
 801fba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801fba8:	687b      	ldr	r3, [r7, #4]
 801fbaa:	2201      	movs	r2, #1
 801fbac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	2201      	movs	r2, #1
 801fbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fbb8:	2300      	movs	r3, #0
}
 801fbba:	4618      	mov	r0, r3
 801fbbc:	3708      	adds	r7, #8
 801fbbe:	46bd      	mov	sp, r7
 801fbc0:	bd80      	pop	{r7, pc}

0801fbc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801fbc2:	b480      	push	{r7}
 801fbc4:	b083      	sub	sp, #12
 801fbc6:	af00      	add	r7, sp, #0
 801fbc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801fbca:	bf00      	nop
 801fbcc:	370c      	adds	r7, #12
 801fbce:	46bd      	mov	sp, r7
 801fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbd4:	4770      	bx	lr
	...

0801fbd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fbd8:	b580      	push	{r7, lr}
 801fbda:	b084      	sub	sp, #16
 801fbdc:	af00      	add	r7, sp, #0
 801fbde:	6078      	str	r0, [r7, #4]
 801fbe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801fbe2:	683b      	ldr	r3, [r7, #0]
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d109      	bne.n	801fbfc <HAL_TIM_PWM_Start+0x24>
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fbee:	b2db      	uxtb	r3, r3
 801fbf0:	2b01      	cmp	r3, #1
 801fbf2:	bf14      	ite	ne
 801fbf4:	2301      	movne	r3, #1
 801fbf6:	2300      	moveq	r3, #0
 801fbf8:	b2db      	uxtb	r3, r3
 801fbfa:	e03c      	b.n	801fc76 <HAL_TIM_PWM_Start+0x9e>
 801fbfc:	683b      	ldr	r3, [r7, #0]
 801fbfe:	2b04      	cmp	r3, #4
 801fc00:	d109      	bne.n	801fc16 <HAL_TIM_PWM_Start+0x3e>
 801fc02:	687b      	ldr	r3, [r7, #4]
 801fc04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801fc08:	b2db      	uxtb	r3, r3
 801fc0a:	2b01      	cmp	r3, #1
 801fc0c:	bf14      	ite	ne
 801fc0e:	2301      	movne	r3, #1
 801fc10:	2300      	moveq	r3, #0
 801fc12:	b2db      	uxtb	r3, r3
 801fc14:	e02f      	b.n	801fc76 <HAL_TIM_PWM_Start+0x9e>
 801fc16:	683b      	ldr	r3, [r7, #0]
 801fc18:	2b08      	cmp	r3, #8
 801fc1a:	d109      	bne.n	801fc30 <HAL_TIM_PWM_Start+0x58>
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fc22:	b2db      	uxtb	r3, r3
 801fc24:	2b01      	cmp	r3, #1
 801fc26:	bf14      	ite	ne
 801fc28:	2301      	movne	r3, #1
 801fc2a:	2300      	moveq	r3, #0
 801fc2c:	b2db      	uxtb	r3, r3
 801fc2e:	e022      	b.n	801fc76 <HAL_TIM_PWM_Start+0x9e>
 801fc30:	683b      	ldr	r3, [r7, #0]
 801fc32:	2b0c      	cmp	r3, #12
 801fc34:	d109      	bne.n	801fc4a <HAL_TIM_PWM_Start+0x72>
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fc3c:	b2db      	uxtb	r3, r3
 801fc3e:	2b01      	cmp	r3, #1
 801fc40:	bf14      	ite	ne
 801fc42:	2301      	movne	r3, #1
 801fc44:	2300      	moveq	r3, #0
 801fc46:	b2db      	uxtb	r3, r3
 801fc48:	e015      	b.n	801fc76 <HAL_TIM_PWM_Start+0x9e>
 801fc4a:	683b      	ldr	r3, [r7, #0]
 801fc4c:	2b10      	cmp	r3, #16
 801fc4e:	d109      	bne.n	801fc64 <HAL_TIM_PWM_Start+0x8c>
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801fc56:	b2db      	uxtb	r3, r3
 801fc58:	2b01      	cmp	r3, #1
 801fc5a:	bf14      	ite	ne
 801fc5c:	2301      	movne	r3, #1
 801fc5e:	2300      	moveq	r3, #0
 801fc60:	b2db      	uxtb	r3, r3
 801fc62:	e008      	b.n	801fc76 <HAL_TIM_PWM_Start+0x9e>
 801fc64:	687b      	ldr	r3, [r7, #4]
 801fc66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fc6a:	b2db      	uxtb	r3, r3
 801fc6c:	2b01      	cmp	r3, #1
 801fc6e:	bf14      	ite	ne
 801fc70:	2301      	movne	r3, #1
 801fc72:	2300      	moveq	r3, #0
 801fc74:	b2db      	uxtb	r3, r3
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d001      	beq.n	801fc7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801fc7a:	2301      	movs	r3, #1
 801fc7c:	e06e      	b.n	801fd5c <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801fc7e:	683b      	ldr	r3, [r7, #0]
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d104      	bne.n	801fc8e <HAL_TIM_PWM_Start+0xb6>
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	2202      	movs	r2, #2
 801fc88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fc8c:	e023      	b.n	801fcd6 <HAL_TIM_PWM_Start+0xfe>
 801fc8e:	683b      	ldr	r3, [r7, #0]
 801fc90:	2b04      	cmp	r3, #4
 801fc92:	d104      	bne.n	801fc9e <HAL_TIM_PWM_Start+0xc6>
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	2202      	movs	r2, #2
 801fc98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fc9c:	e01b      	b.n	801fcd6 <HAL_TIM_PWM_Start+0xfe>
 801fc9e:	683b      	ldr	r3, [r7, #0]
 801fca0:	2b08      	cmp	r3, #8
 801fca2:	d104      	bne.n	801fcae <HAL_TIM_PWM_Start+0xd6>
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	2202      	movs	r2, #2
 801fca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fcac:	e013      	b.n	801fcd6 <HAL_TIM_PWM_Start+0xfe>
 801fcae:	683b      	ldr	r3, [r7, #0]
 801fcb0:	2b0c      	cmp	r3, #12
 801fcb2:	d104      	bne.n	801fcbe <HAL_TIM_PWM_Start+0xe6>
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	2202      	movs	r2, #2
 801fcb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801fcbc:	e00b      	b.n	801fcd6 <HAL_TIM_PWM_Start+0xfe>
 801fcbe:	683b      	ldr	r3, [r7, #0]
 801fcc0:	2b10      	cmp	r3, #16
 801fcc2:	d104      	bne.n	801fcce <HAL_TIM_PWM_Start+0xf6>
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	2202      	movs	r2, #2
 801fcc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fccc:	e003      	b.n	801fcd6 <HAL_TIM_PWM_Start+0xfe>
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	2202      	movs	r2, #2
 801fcd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	681b      	ldr	r3, [r3, #0]
 801fcda:	2201      	movs	r2, #1
 801fcdc:	6839      	ldr	r1, [r7, #0]
 801fcde:	4618      	mov	r0, r3
 801fce0:	f001 fad2 	bl	8021288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	4a1e      	ldr	r2, [pc, #120]	; (801fd64 <HAL_TIM_PWM_Start+0x18c>)
 801fcea:	4293      	cmp	r3, r2
 801fcec:	d013      	beq.n	801fd16 <HAL_TIM_PWM_Start+0x13e>
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	4a1d      	ldr	r2, [pc, #116]	; (801fd68 <HAL_TIM_PWM_Start+0x190>)
 801fcf4:	4293      	cmp	r3, r2
 801fcf6:	d00e      	beq.n	801fd16 <HAL_TIM_PWM_Start+0x13e>
 801fcf8:	687b      	ldr	r3, [r7, #4]
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	4a1b      	ldr	r2, [pc, #108]	; (801fd6c <HAL_TIM_PWM_Start+0x194>)
 801fcfe:	4293      	cmp	r3, r2
 801fd00:	d009      	beq.n	801fd16 <HAL_TIM_PWM_Start+0x13e>
 801fd02:	687b      	ldr	r3, [r7, #4]
 801fd04:	681b      	ldr	r3, [r3, #0]
 801fd06:	4a1a      	ldr	r2, [pc, #104]	; (801fd70 <HAL_TIM_PWM_Start+0x198>)
 801fd08:	4293      	cmp	r3, r2
 801fd0a:	d004      	beq.n	801fd16 <HAL_TIM_PWM_Start+0x13e>
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	4a18      	ldr	r2, [pc, #96]	; (801fd74 <HAL_TIM_PWM_Start+0x19c>)
 801fd12:	4293      	cmp	r3, r2
 801fd14:	d101      	bne.n	801fd1a <HAL_TIM_PWM_Start+0x142>
 801fd16:	2301      	movs	r3, #1
 801fd18:	e000      	b.n	801fd1c <HAL_TIM_PWM_Start+0x144>
 801fd1a:	2300      	movs	r3, #0
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d007      	beq.n	801fd30 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fd26:	687b      	ldr	r3, [r7, #4]
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801fd2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fd30:	687b      	ldr	r3, [r7, #4]
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	689a      	ldr	r2, [r3, #8]
 801fd36:	4b10      	ldr	r3, [pc, #64]	; (801fd78 <HAL_TIM_PWM_Start+0x1a0>)
 801fd38:	4013      	ands	r3, r2
 801fd3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fd3c:	68fb      	ldr	r3, [r7, #12]
 801fd3e:	2b06      	cmp	r3, #6
 801fd40:	d00b      	beq.n	801fd5a <HAL_TIM_PWM_Start+0x182>
 801fd42:	68fb      	ldr	r3, [r7, #12]
 801fd44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fd48:	d007      	beq.n	801fd5a <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	681b      	ldr	r3, [r3, #0]
 801fd4e:	681a      	ldr	r2, [r3, #0]
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	681b      	ldr	r3, [r3, #0]
 801fd54:	f042 0201 	orr.w	r2, r2, #1
 801fd58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801fd5a:	2300      	movs	r3, #0
}
 801fd5c:	4618      	mov	r0, r3
 801fd5e:	3710      	adds	r7, #16
 801fd60:	46bd      	mov	sp, r7
 801fd62:	bd80      	pop	{r7, pc}
 801fd64:	40010000 	.word	0x40010000
 801fd68:	40010400 	.word	0x40010400
 801fd6c:	40014000 	.word	0x40014000
 801fd70:	40014400 	.word	0x40014400
 801fd74:	40014800 	.word	0x40014800
 801fd78:	00010007 	.word	0x00010007

0801fd7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801fd7c:	b580      	push	{r7, lr}
 801fd7e:	b082      	sub	sp, #8
 801fd80:	af00      	add	r7, sp, #0
 801fd82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d101      	bne.n	801fd8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801fd8a:	2301      	movs	r3, #1
 801fd8c:	e049      	b.n	801fe22 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fd8e:	687b      	ldr	r3, [r7, #4]
 801fd90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fd94:	b2db      	uxtb	r3, r3
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d106      	bne.n	801fda8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	2200      	movs	r2, #0
 801fd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801fda2:	6878      	ldr	r0, [r7, #4]
 801fda4:	f7f4 fa98 	bl	80142d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	2202      	movs	r2, #2
 801fdac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fdb0:	687b      	ldr	r3, [r7, #4]
 801fdb2:	681a      	ldr	r2, [r3, #0]
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	3304      	adds	r3, #4
 801fdb8:	4619      	mov	r1, r3
 801fdba:	4610      	mov	r0, r2
 801fdbc:	f000 fd34 	bl	8020828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	2201      	movs	r2, #1
 801fdc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	2201      	movs	r2, #1
 801fdcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	2201      	movs	r2, #1
 801fdd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	2201      	movs	r2, #1
 801fddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	2201      	movs	r2, #1
 801fde4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	2201      	movs	r2, #1
 801fdec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	2201      	movs	r2, #1
 801fdf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	2201      	movs	r2, #1
 801fdfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	2201      	movs	r2, #1
 801fe04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	2201      	movs	r2, #1
 801fe0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	2201      	movs	r2, #1
 801fe14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	2201      	movs	r2, #1
 801fe1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fe20:	2300      	movs	r3, #0
}
 801fe22:	4618      	mov	r0, r3
 801fe24:	3708      	adds	r7, #8
 801fe26:	46bd      	mov	sp, r7
 801fe28:	bd80      	pop	{r7, pc}
	...

0801fe2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fe2c:	b580      	push	{r7, lr}
 801fe2e:	b084      	sub	sp, #16
 801fe30:	af00      	add	r7, sp, #0
 801fe32:	6078      	str	r0, [r7, #4]
 801fe34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801fe36:	683b      	ldr	r3, [r7, #0]
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	d104      	bne.n	801fe46 <HAL_TIM_IC_Start_IT+0x1a>
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fe42:	b2db      	uxtb	r3, r3
 801fe44:	e023      	b.n	801fe8e <HAL_TIM_IC_Start_IT+0x62>
 801fe46:	683b      	ldr	r3, [r7, #0]
 801fe48:	2b04      	cmp	r3, #4
 801fe4a:	d104      	bne.n	801fe56 <HAL_TIM_IC_Start_IT+0x2a>
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801fe52:	b2db      	uxtb	r3, r3
 801fe54:	e01b      	b.n	801fe8e <HAL_TIM_IC_Start_IT+0x62>
 801fe56:	683b      	ldr	r3, [r7, #0]
 801fe58:	2b08      	cmp	r3, #8
 801fe5a:	d104      	bne.n	801fe66 <HAL_TIM_IC_Start_IT+0x3a>
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fe62:	b2db      	uxtb	r3, r3
 801fe64:	e013      	b.n	801fe8e <HAL_TIM_IC_Start_IT+0x62>
 801fe66:	683b      	ldr	r3, [r7, #0]
 801fe68:	2b0c      	cmp	r3, #12
 801fe6a:	d104      	bne.n	801fe76 <HAL_TIM_IC_Start_IT+0x4a>
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fe72:	b2db      	uxtb	r3, r3
 801fe74:	e00b      	b.n	801fe8e <HAL_TIM_IC_Start_IT+0x62>
 801fe76:	683b      	ldr	r3, [r7, #0]
 801fe78:	2b10      	cmp	r3, #16
 801fe7a:	d104      	bne.n	801fe86 <HAL_TIM_IC_Start_IT+0x5a>
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801fe82:	b2db      	uxtb	r3, r3
 801fe84:	e003      	b.n	801fe8e <HAL_TIM_IC_Start_IT+0x62>
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801fe8c:	b2db      	uxtb	r3, r3
 801fe8e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801fe90:	683b      	ldr	r3, [r7, #0]
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	d104      	bne.n	801fea0 <HAL_TIM_IC_Start_IT+0x74>
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801fe9c:	b2db      	uxtb	r3, r3
 801fe9e:	e013      	b.n	801fec8 <HAL_TIM_IC_Start_IT+0x9c>
 801fea0:	683b      	ldr	r3, [r7, #0]
 801fea2:	2b04      	cmp	r3, #4
 801fea4:	d104      	bne.n	801feb0 <HAL_TIM_IC_Start_IT+0x84>
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801feac:	b2db      	uxtb	r3, r3
 801feae:	e00b      	b.n	801fec8 <HAL_TIM_IC_Start_IT+0x9c>
 801feb0:	683b      	ldr	r3, [r7, #0]
 801feb2:	2b08      	cmp	r3, #8
 801feb4:	d104      	bne.n	801fec0 <HAL_TIM_IC_Start_IT+0x94>
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801febc:	b2db      	uxtb	r3, r3
 801febe:	e003      	b.n	801fec8 <HAL_TIM_IC_Start_IT+0x9c>
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801fec6:	b2db      	uxtb	r3, r3
 801fec8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801feca:	7bfb      	ldrb	r3, [r7, #15]
 801fecc:	2b01      	cmp	r3, #1
 801fece:	d102      	bne.n	801fed6 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801fed0:	7bbb      	ldrb	r3, [r7, #14]
 801fed2:	2b01      	cmp	r3, #1
 801fed4:	d001      	beq.n	801feda <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 801fed6:	2301      	movs	r3, #1
 801fed8:	e0aa      	b.n	8020030 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801feda:	683b      	ldr	r3, [r7, #0]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d104      	bne.n	801feea <HAL_TIM_IC_Start_IT+0xbe>
 801fee0:	687b      	ldr	r3, [r7, #4]
 801fee2:	2202      	movs	r2, #2
 801fee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801fee8:	e023      	b.n	801ff32 <HAL_TIM_IC_Start_IT+0x106>
 801feea:	683b      	ldr	r3, [r7, #0]
 801feec:	2b04      	cmp	r3, #4
 801feee:	d104      	bne.n	801fefa <HAL_TIM_IC_Start_IT+0xce>
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	2202      	movs	r2, #2
 801fef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801fef8:	e01b      	b.n	801ff32 <HAL_TIM_IC_Start_IT+0x106>
 801fefa:	683b      	ldr	r3, [r7, #0]
 801fefc:	2b08      	cmp	r3, #8
 801fefe:	d104      	bne.n	801ff0a <HAL_TIM_IC_Start_IT+0xde>
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	2202      	movs	r2, #2
 801ff04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ff08:	e013      	b.n	801ff32 <HAL_TIM_IC_Start_IT+0x106>
 801ff0a:	683b      	ldr	r3, [r7, #0]
 801ff0c:	2b0c      	cmp	r3, #12
 801ff0e:	d104      	bne.n	801ff1a <HAL_TIM_IC_Start_IT+0xee>
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	2202      	movs	r2, #2
 801ff14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ff18:	e00b      	b.n	801ff32 <HAL_TIM_IC_Start_IT+0x106>
 801ff1a:	683b      	ldr	r3, [r7, #0]
 801ff1c:	2b10      	cmp	r3, #16
 801ff1e:	d104      	bne.n	801ff2a <HAL_TIM_IC_Start_IT+0xfe>
 801ff20:	687b      	ldr	r3, [r7, #4]
 801ff22:	2202      	movs	r2, #2
 801ff24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ff28:	e003      	b.n	801ff32 <HAL_TIM_IC_Start_IT+0x106>
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	2202      	movs	r2, #2
 801ff2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ff32:	683b      	ldr	r3, [r7, #0]
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	d104      	bne.n	801ff42 <HAL_TIM_IC_Start_IT+0x116>
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	2202      	movs	r2, #2
 801ff3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ff40:	e013      	b.n	801ff6a <HAL_TIM_IC_Start_IT+0x13e>
 801ff42:	683b      	ldr	r3, [r7, #0]
 801ff44:	2b04      	cmp	r3, #4
 801ff46:	d104      	bne.n	801ff52 <HAL_TIM_IC_Start_IT+0x126>
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	2202      	movs	r2, #2
 801ff4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ff50:	e00b      	b.n	801ff6a <HAL_TIM_IC_Start_IT+0x13e>
 801ff52:	683b      	ldr	r3, [r7, #0]
 801ff54:	2b08      	cmp	r3, #8
 801ff56:	d104      	bne.n	801ff62 <HAL_TIM_IC_Start_IT+0x136>
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	2202      	movs	r2, #2
 801ff5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ff60:	e003      	b.n	801ff6a <HAL_TIM_IC_Start_IT+0x13e>
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	2202      	movs	r2, #2
 801ff66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801ff6a:	683b      	ldr	r3, [r7, #0]
 801ff6c:	2b0c      	cmp	r3, #12
 801ff6e:	d841      	bhi.n	801fff4 <HAL_TIM_IC_Start_IT+0x1c8>
 801ff70:	a201      	add	r2, pc, #4	; (adr r2, 801ff78 <HAL_TIM_IC_Start_IT+0x14c>)
 801ff72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff76:	bf00      	nop
 801ff78:	0801ffad 	.word	0x0801ffad
 801ff7c:	0801fff5 	.word	0x0801fff5
 801ff80:	0801fff5 	.word	0x0801fff5
 801ff84:	0801fff5 	.word	0x0801fff5
 801ff88:	0801ffbf 	.word	0x0801ffbf
 801ff8c:	0801fff5 	.word	0x0801fff5
 801ff90:	0801fff5 	.word	0x0801fff5
 801ff94:	0801fff5 	.word	0x0801fff5
 801ff98:	0801ffd1 	.word	0x0801ffd1
 801ff9c:	0801fff5 	.word	0x0801fff5
 801ffa0:	0801fff5 	.word	0x0801fff5
 801ffa4:	0801fff5 	.word	0x0801fff5
 801ffa8:	0801ffe3 	.word	0x0801ffe3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	68da      	ldr	r2, [r3, #12]
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	681b      	ldr	r3, [r3, #0]
 801ffb6:	f042 0202 	orr.w	r2, r2, #2
 801ffba:	60da      	str	r2, [r3, #12]
      break;
 801ffbc:	e01b      	b.n	801fff6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	681b      	ldr	r3, [r3, #0]
 801ffc2:	68da      	ldr	r2, [r3, #12]
 801ffc4:	687b      	ldr	r3, [r7, #4]
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	f042 0204 	orr.w	r2, r2, #4
 801ffcc:	60da      	str	r2, [r3, #12]
      break;
 801ffce:	e012      	b.n	801fff6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	68da      	ldr	r2, [r3, #12]
 801ffd6:	687b      	ldr	r3, [r7, #4]
 801ffd8:	681b      	ldr	r3, [r3, #0]
 801ffda:	f042 0208 	orr.w	r2, r2, #8
 801ffde:	60da      	str	r2, [r3, #12]
      break;
 801ffe0:	e009      	b.n	801fff6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	681b      	ldr	r3, [r3, #0]
 801ffe6:	68da      	ldr	r2, [r3, #12]
 801ffe8:	687b      	ldr	r3, [r7, #4]
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	f042 0210 	orr.w	r2, r2, #16
 801fff0:	60da      	str	r2, [r3, #12]
      break;
 801fff2:	e000      	b.n	801fff6 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 801fff4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	2201      	movs	r2, #1
 801fffc:	6839      	ldr	r1, [r7, #0]
 801fffe:	4618      	mov	r0, r3
 8020000:	f001 f942 	bl	8021288 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020004:	687b      	ldr	r3, [r7, #4]
 8020006:	681b      	ldr	r3, [r3, #0]
 8020008:	689a      	ldr	r2, [r3, #8]
 802000a:	4b0b      	ldr	r3, [pc, #44]	; (8020038 <HAL_TIM_IC_Start_IT+0x20c>)
 802000c:	4013      	ands	r3, r2
 802000e:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020010:	68bb      	ldr	r3, [r7, #8]
 8020012:	2b06      	cmp	r3, #6
 8020014:	d00b      	beq.n	802002e <HAL_TIM_IC_Start_IT+0x202>
 8020016:	68bb      	ldr	r3, [r7, #8]
 8020018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802001c:	d007      	beq.n	802002e <HAL_TIM_IC_Start_IT+0x202>
  {
    __HAL_TIM_ENABLE(htim);
 802001e:	687b      	ldr	r3, [r7, #4]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	681a      	ldr	r2, [r3, #0]
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	681b      	ldr	r3, [r3, #0]
 8020028:	f042 0201 	orr.w	r2, r2, #1
 802002c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802002e:	2300      	movs	r3, #0
}
 8020030:	4618      	mov	r0, r3
 8020032:	3710      	adds	r7, #16
 8020034:	46bd      	mov	sp, r7
 8020036:	bd80      	pop	{r7, pc}
 8020038:	00010007 	.word	0x00010007

0802003c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802003c:	b580      	push	{r7, lr}
 802003e:	b082      	sub	sp, #8
 8020040:	af00      	add	r7, sp, #0
 8020042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8020044:	687b      	ldr	r3, [r7, #4]
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	691b      	ldr	r3, [r3, #16]
 802004a:	f003 0302 	and.w	r3, r3, #2
 802004e:	2b02      	cmp	r3, #2
 8020050:	d122      	bne.n	8020098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	681b      	ldr	r3, [r3, #0]
 8020056:	68db      	ldr	r3, [r3, #12]
 8020058:	f003 0302 	and.w	r3, r3, #2
 802005c:	2b02      	cmp	r3, #2
 802005e:	d11b      	bne.n	8020098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	681b      	ldr	r3, [r3, #0]
 8020064:	f06f 0202 	mvn.w	r2, #2
 8020068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802006a:	687b      	ldr	r3, [r7, #4]
 802006c:	2201      	movs	r2, #1
 802006e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	681b      	ldr	r3, [r3, #0]
 8020074:	699b      	ldr	r3, [r3, #24]
 8020076:	f003 0303 	and.w	r3, r3, #3
 802007a:	2b00      	cmp	r3, #0
 802007c:	d003      	beq.n	8020086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802007e:	6878      	ldr	r0, [r7, #4]
 8020080:	f7f2 fb4a 	bl	8012718 <HAL_TIM_IC_CaptureCallback>
 8020084:	e005      	b.n	8020092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8020086:	6878      	ldr	r0, [r7, #4]
 8020088:	f000 fbb0 	bl	80207ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802008c:	6878      	ldr	r0, [r7, #4]
 802008e:	f000 fbb7 	bl	8020800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020092:	687b      	ldr	r3, [r7, #4]
 8020094:	2200      	movs	r2, #0
 8020096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	691b      	ldr	r3, [r3, #16]
 802009e:	f003 0304 	and.w	r3, r3, #4
 80200a2:	2b04      	cmp	r3, #4
 80200a4:	d122      	bne.n	80200ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	681b      	ldr	r3, [r3, #0]
 80200aa:	68db      	ldr	r3, [r3, #12]
 80200ac:	f003 0304 	and.w	r3, r3, #4
 80200b0:	2b04      	cmp	r3, #4
 80200b2:	d11b      	bne.n	80200ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	f06f 0204 	mvn.w	r2, #4
 80200bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	2202      	movs	r2, #2
 80200c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	699b      	ldr	r3, [r3, #24]
 80200ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80200ce:	2b00      	cmp	r3, #0
 80200d0:	d003      	beq.n	80200da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80200d2:	6878      	ldr	r0, [r7, #4]
 80200d4:	f7f2 fb20 	bl	8012718 <HAL_TIM_IC_CaptureCallback>
 80200d8:	e005      	b.n	80200e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80200da:	6878      	ldr	r0, [r7, #4]
 80200dc:	f000 fb86 	bl	80207ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80200e0:	6878      	ldr	r0, [r7, #4]
 80200e2:	f000 fb8d 	bl	8020800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	2200      	movs	r2, #0
 80200ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	691b      	ldr	r3, [r3, #16]
 80200f2:	f003 0308 	and.w	r3, r3, #8
 80200f6:	2b08      	cmp	r3, #8
 80200f8:	d122      	bne.n	8020140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80200fa:	687b      	ldr	r3, [r7, #4]
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	68db      	ldr	r3, [r3, #12]
 8020100:	f003 0308 	and.w	r3, r3, #8
 8020104:	2b08      	cmp	r3, #8
 8020106:	d11b      	bne.n	8020140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	681b      	ldr	r3, [r3, #0]
 802010c:	f06f 0208 	mvn.w	r2, #8
 8020110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	2204      	movs	r2, #4
 8020116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	69db      	ldr	r3, [r3, #28]
 802011e:	f003 0303 	and.w	r3, r3, #3
 8020122:	2b00      	cmp	r3, #0
 8020124:	d003      	beq.n	802012e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020126:	6878      	ldr	r0, [r7, #4]
 8020128:	f7f2 faf6 	bl	8012718 <HAL_TIM_IC_CaptureCallback>
 802012c:	e005      	b.n	802013a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802012e:	6878      	ldr	r0, [r7, #4]
 8020130:	f000 fb5c 	bl	80207ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020134:	6878      	ldr	r0, [r7, #4]
 8020136:	f000 fb63 	bl	8020800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	2200      	movs	r2, #0
 802013e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	681b      	ldr	r3, [r3, #0]
 8020144:	691b      	ldr	r3, [r3, #16]
 8020146:	f003 0310 	and.w	r3, r3, #16
 802014a:	2b10      	cmp	r3, #16
 802014c:	d122      	bne.n	8020194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802014e:	687b      	ldr	r3, [r7, #4]
 8020150:	681b      	ldr	r3, [r3, #0]
 8020152:	68db      	ldr	r3, [r3, #12]
 8020154:	f003 0310 	and.w	r3, r3, #16
 8020158:	2b10      	cmp	r3, #16
 802015a:	d11b      	bne.n	8020194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	681b      	ldr	r3, [r3, #0]
 8020160:	f06f 0210 	mvn.w	r2, #16
 8020164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	2208      	movs	r2, #8
 802016a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	681b      	ldr	r3, [r3, #0]
 8020170:	69db      	ldr	r3, [r3, #28]
 8020172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020176:	2b00      	cmp	r3, #0
 8020178:	d003      	beq.n	8020182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802017a:	6878      	ldr	r0, [r7, #4]
 802017c:	f7f2 facc 	bl	8012718 <HAL_TIM_IC_CaptureCallback>
 8020180:	e005      	b.n	802018e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020182:	6878      	ldr	r0, [r7, #4]
 8020184:	f000 fb32 	bl	80207ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020188:	6878      	ldr	r0, [r7, #4]
 802018a:	f000 fb39 	bl	8020800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802018e:	687b      	ldr	r3, [r7, #4]
 8020190:	2200      	movs	r2, #0
 8020192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	691b      	ldr	r3, [r3, #16]
 802019a:	f003 0301 	and.w	r3, r3, #1
 802019e:	2b01      	cmp	r3, #1
 80201a0:	d10e      	bne.n	80201c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80201a2:	687b      	ldr	r3, [r7, #4]
 80201a4:	681b      	ldr	r3, [r3, #0]
 80201a6:	68db      	ldr	r3, [r3, #12]
 80201a8:	f003 0301 	and.w	r3, r3, #1
 80201ac:	2b01      	cmp	r3, #1
 80201ae:	d107      	bne.n	80201c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	f06f 0201 	mvn.w	r2, #1
 80201b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80201ba:	6878      	ldr	r0, [r7, #4]
 80201bc:	f7f3 f8dc 	bl	8013378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	681b      	ldr	r3, [r3, #0]
 80201c4:	691b      	ldr	r3, [r3, #16]
 80201c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80201ca:	2b80      	cmp	r3, #128	; 0x80
 80201cc:	d10e      	bne.n	80201ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80201ce:	687b      	ldr	r3, [r7, #4]
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	68db      	ldr	r3, [r3, #12]
 80201d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80201d8:	2b80      	cmp	r3, #128	; 0x80
 80201da:	d107      	bne.n	80201ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80201dc:	687b      	ldr	r3, [r7, #4]
 80201de:	681b      	ldr	r3, [r3, #0]
 80201e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80201e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80201e6:	6878      	ldr	r0, [r7, #4]
 80201e8:	f001 f984 	bl	80214f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	681b      	ldr	r3, [r3, #0]
 80201f0:	691b      	ldr	r3, [r3, #16]
 80201f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80201f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80201fa:	d10e      	bne.n	802021a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	68db      	ldr	r3, [r3, #12]
 8020202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020206:	2b80      	cmp	r3, #128	; 0x80
 8020208:	d107      	bne.n	802021a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8020212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8020214:	6878      	ldr	r0, [r7, #4]
 8020216:	f001 f977 	bl	8021508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802021a:	687b      	ldr	r3, [r7, #4]
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	691b      	ldr	r3, [r3, #16]
 8020220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020224:	2b40      	cmp	r3, #64	; 0x40
 8020226:	d10e      	bne.n	8020246 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8020228:	687b      	ldr	r3, [r7, #4]
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	68db      	ldr	r3, [r3, #12]
 802022e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020232:	2b40      	cmp	r3, #64	; 0x40
 8020234:	d107      	bne.n	8020246 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	681b      	ldr	r3, [r3, #0]
 802023a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802023e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8020240:	6878      	ldr	r0, [r7, #4]
 8020242:	f000 fae7 	bl	8020814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	681b      	ldr	r3, [r3, #0]
 802024a:	691b      	ldr	r3, [r3, #16]
 802024c:	f003 0320 	and.w	r3, r3, #32
 8020250:	2b20      	cmp	r3, #32
 8020252:	d10e      	bne.n	8020272 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	681b      	ldr	r3, [r3, #0]
 8020258:	68db      	ldr	r3, [r3, #12]
 802025a:	f003 0320 	and.w	r3, r3, #32
 802025e:	2b20      	cmp	r3, #32
 8020260:	d107      	bne.n	8020272 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	681b      	ldr	r3, [r3, #0]
 8020266:	f06f 0220 	mvn.w	r2, #32
 802026a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802026c:	6878      	ldr	r0, [r7, #4]
 802026e:	f001 f937 	bl	80214e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8020272:	bf00      	nop
 8020274:	3708      	adds	r7, #8
 8020276:	46bd      	mov	sp, r7
 8020278:	bd80      	pop	{r7, pc}

0802027a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 802027a:	b580      	push	{r7, lr}
 802027c:	b084      	sub	sp, #16
 802027e:	af00      	add	r7, sp, #0
 8020280:	60f8      	str	r0, [r7, #12]
 8020282:	60b9      	str	r1, [r7, #8]
 8020284:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802028c:	2b01      	cmp	r3, #1
 802028e:	d101      	bne.n	8020294 <HAL_TIM_IC_ConfigChannel+0x1a>
 8020290:	2302      	movs	r3, #2
 8020292:	e082      	b.n	802039a <HAL_TIM_IC_ConfigChannel+0x120>
 8020294:	68fb      	ldr	r3, [r7, #12]
 8020296:	2201      	movs	r2, #1
 8020298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d11b      	bne.n	80202da <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80202a2:	68fb      	ldr	r3, [r7, #12]
 80202a4:	6818      	ldr	r0, [r3, #0]
 80202a6:	68bb      	ldr	r3, [r7, #8]
 80202a8:	6819      	ldr	r1, [r3, #0]
 80202aa:	68bb      	ldr	r3, [r7, #8]
 80202ac:	685a      	ldr	r2, [r3, #4]
 80202ae:	68bb      	ldr	r3, [r7, #8]
 80202b0:	68db      	ldr	r3, [r3, #12]
 80202b2:	f000 fe21 	bl	8020ef8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80202b6:	68fb      	ldr	r3, [r7, #12]
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	699a      	ldr	r2, [r3, #24]
 80202bc:	68fb      	ldr	r3, [r7, #12]
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	f022 020c 	bic.w	r2, r2, #12
 80202c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80202c6:	68fb      	ldr	r3, [r7, #12]
 80202c8:	681b      	ldr	r3, [r3, #0]
 80202ca:	6999      	ldr	r1, [r3, #24]
 80202cc:	68bb      	ldr	r3, [r7, #8]
 80202ce:	689a      	ldr	r2, [r3, #8]
 80202d0:	68fb      	ldr	r3, [r7, #12]
 80202d2:	681b      	ldr	r3, [r3, #0]
 80202d4:	430a      	orrs	r2, r1
 80202d6:	619a      	str	r2, [r3, #24]
 80202d8:	e05a      	b.n	8020390 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	2b04      	cmp	r3, #4
 80202de:	d11c      	bne.n	802031a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80202e0:	68fb      	ldr	r3, [r7, #12]
 80202e2:	6818      	ldr	r0, [r3, #0]
 80202e4:	68bb      	ldr	r3, [r7, #8]
 80202e6:	6819      	ldr	r1, [r3, #0]
 80202e8:	68bb      	ldr	r3, [r7, #8]
 80202ea:	685a      	ldr	r2, [r3, #4]
 80202ec:	68bb      	ldr	r3, [r7, #8]
 80202ee:	68db      	ldr	r3, [r3, #12]
 80202f0:	f000 fea5 	bl	802103e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80202f4:	68fb      	ldr	r3, [r7, #12]
 80202f6:	681b      	ldr	r3, [r3, #0]
 80202f8:	699a      	ldr	r2, [r3, #24]
 80202fa:	68fb      	ldr	r3, [r7, #12]
 80202fc:	681b      	ldr	r3, [r3, #0]
 80202fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8020302:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8020304:	68fb      	ldr	r3, [r7, #12]
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	6999      	ldr	r1, [r3, #24]
 802030a:	68bb      	ldr	r3, [r7, #8]
 802030c:	689b      	ldr	r3, [r3, #8]
 802030e:	021a      	lsls	r2, r3, #8
 8020310:	68fb      	ldr	r3, [r7, #12]
 8020312:	681b      	ldr	r3, [r3, #0]
 8020314:	430a      	orrs	r2, r1
 8020316:	619a      	str	r2, [r3, #24]
 8020318:	e03a      	b.n	8020390 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	2b08      	cmp	r3, #8
 802031e:	d11b      	bne.n	8020358 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8020320:	68fb      	ldr	r3, [r7, #12]
 8020322:	6818      	ldr	r0, [r3, #0]
 8020324:	68bb      	ldr	r3, [r7, #8]
 8020326:	6819      	ldr	r1, [r3, #0]
 8020328:	68bb      	ldr	r3, [r7, #8]
 802032a:	685a      	ldr	r2, [r3, #4]
 802032c:	68bb      	ldr	r3, [r7, #8]
 802032e:	68db      	ldr	r3, [r3, #12]
 8020330:	f000 fef2 	bl	8021118 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8020334:	68fb      	ldr	r3, [r7, #12]
 8020336:	681b      	ldr	r3, [r3, #0]
 8020338:	69da      	ldr	r2, [r3, #28]
 802033a:	68fb      	ldr	r3, [r7, #12]
 802033c:	681b      	ldr	r3, [r3, #0]
 802033e:	f022 020c 	bic.w	r2, r2, #12
 8020342:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8020344:	68fb      	ldr	r3, [r7, #12]
 8020346:	681b      	ldr	r3, [r3, #0]
 8020348:	69d9      	ldr	r1, [r3, #28]
 802034a:	68bb      	ldr	r3, [r7, #8]
 802034c:	689a      	ldr	r2, [r3, #8]
 802034e:	68fb      	ldr	r3, [r7, #12]
 8020350:	681b      	ldr	r3, [r3, #0]
 8020352:	430a      	orrs	r2, r1
 8020354:	61da      	str	r2, [r3, #28]
 8020356:	e01b      	b.n	8020390 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8020358:	68fb      	ldr	r3, [r7, #12]
 802035a:	6818      	ldr	r0, [r3, #0]
 802035c:	68bb      	ldr	r3, [r7, #8]
 802035e:	6819      	ldr	r1, [r3, #0]
 8020360:	68bb      	ldr	r3, [r7, #8]
 8020362:	685a      	ldr	r2, [r3, #4]
 8020364:	68bb      	ldr	r3, [r7, #8]
 8020366:	68db      	ldr	r3, [r3, #12]
 8020368:	f000 ff12 	bl	8021190 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 802036c:	68fb      	ldr	r3, [r7, #12]
 802036e:	681b      	ldr	r3, [r3, #0]
 8020370:	69da      	ldr	r2, [r3, #28]
 8020372:	68fb      	ldr	r3, [r7, #12]
 8020374:	681b      	ldr	r3, [r3, #0]
 8020376:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 802037a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 802037c:	68fb      	ldr	r3, [r7, #12]
 802037e:	681b      	ldr	r3, [r3, #0]
 8020380:	69d9      	ldr	r1, [r3, #28]
 8020382:	68bb      	ldr	r3, [r7, #8]
 8020384:	689b      	ldr	r3, [r3, #8]
 8020386:	021a      	lsls	r2, r3, #8
 8020388:	68fb      	ldr	r3, [r7, #12]
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	430a      	orrs	r2, r1
 802038e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8020390:	68fb      	ldr	r3, [r7, #12]
 8020392:	2200      	movs	r2, #0
 8020394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020398:	2300      	movs	r3, #0
}
 802039a:	4618      	mov	r0, r3
 802039c:	3710      	adds	r7, #16
 802039e:	46bd      	mov	sp, r7
 80203a0:	bd80      	pop	{r7, pc}
	...

080203a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80203a4:	b580      	push	{r7, lr}
 80203a6:	b084      	sub	sp, #16
 80203a8:	af00      	add	r7, sp, #0
 80203aa:	60f8      	str	r0, [r7, #12]
 80203ac:	60b9      	str	r1, [r7, #8]
 80203ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80203b0:	68fb      	ldr	r3, [r7, #12]
 80203b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80203b6:	2b01      	cmp	r3, #1
 80203b8:	d101      	bne.n	80203be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80203ba:	2302      	movs	r3, #2
 80203bc:	e0fd      	b.n	80205ba <HAL_TIM_PWM_ConfigChannel+0x216>
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	2201      	movs	r2, #1
 80203c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	2b14      	cmp	r3, #20
 80203ca:	f200 80f0 	bhi.w	80205ae <HAL_TIM_PWM_ConfigChannel+0x20a>
 80203ce:	a201      	add	r2, pc, #4	; (adr r2, 80203d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80203d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203d4:	08020429 	.word	0x08020429
 80203d8:	080205af 	.word	0x080205af
 80203dc:	080205af 	.word	0x080205af
 80203e0:	080205af 	.word	0x080205af
 80203e4:	08020469 	.word	0x08020469
 80203e8:	080205af 	.word	0x080205af
 80203ec:	080205af 	.word	0x080205af
 80203f0:	080205af 	.word	0x080205af
 80203f4:	080204ab 	.word	0x080204ab
 80203f8:	080205af 	.word	0x080205af
 80203fc:	080205af 	.word	0x080205af
 8020400:	080205af 	.word	0x080205af
 8020404:	080204eb 	.word	0x080204eb
 8020408:	080205af 	.word	0x080205af
 802040c:	080205af 	.word	0x080205af
 8020410:	080205af 	.word	0x080205af
 8020414:	0802052d 	.word	0x0802052d
 8020418:	080205af 	.word	0x080205af
 802041c:	080205af 	.word	0x080205af
 8020420:	080205af 	.word	0x080205af
 8020424:	0802056d 	.word	0x0802056d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020428:	68fb      	ldr	r3, [r7, #12]
 802042a:	681b      	ldr	r3, [r3, #0]
 802042c:	68b9      	ldr	r1, [r7, #8]
 802042e:	4618      	mov	r0, r3
 8020430:	f000 fa94 	bl	802095c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8020434:	68fb      	ldr	r3, [r7, #12]
 8020436:	681b      	ldr	r3, [r3, #0]
 8020438:	699a      	ldr	r2, [r3, #24]
 802043a:	68fb      	ldr	r3, [r7, #12]
 802043c:	681b      	ldr	r3, [r3, #0]
 802043e:	f042 0208 	orr.w	r2, r2, #8
 8020442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020444:	68fb      	ldr	r3, [r7, #12]
 8020446:	681b      	ldr	r3, [r3, #0]
 8020448:	699a      	ldr	r2, [r3, #24]
 802044a:	68fb      	ldr	r3, [r7, #12]
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	f022 0204 	bic.w	r2, r2, #4
 8020452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020454:	68fb      	ldr	r3, [r7, #12]
 8020456:	681b      	ldr	r3, [r3, #0]
 8020458:	6999      	ldr	r1, [r3, #24]
 802045a:	68bb      	ldr	r3, [r7, #8]
 802045c:	691a      	ldr	r2, [r3, #16]
 802045e:	68fb      	ldr	r3, [r7, #12]
 8020460:	681b      	ldr	r3, [r3, #0]
 8020462:	430a      	orrs	r2, r1
 8020464:	619a      	str	r2, [r3, #24]
      break;
 8020466:	e0a3      	b.n	80205b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020468:	68fb      	ldr	r3, [r7, #12]
 802046a:	681b      	ldr	r3, [r3, #0]
 802046c:	68b9      	ldr	r1, [r7, #8]
 802046e:	4618      	mov	r0, r3
 8020470:	f000 fb04 	bl	8020a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8020474:	68fb      	ldr	r3, [r7, #12]
 8020476:	681b      	ldr	r3, [r3, #0]
 8020478:	699a      	ldr	r2, [r3, #24]
 802047a:	68fb      	ldr	r3, [r7, #12]
 802047c:	681b      	ldr	r3, [r3, #0]
 802047e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8020484:	68fb      	ldr	r3, [r7, #12]
 8020486:	681b      	ldr	r3, [r3, #0]
 8020488:	699a      	ldr	r2, [r3, #24]
 802048a:	68fb      	ldr	r3, [r7, #12]
 802048c:	681b      	ldr	r3, [r3, #0]
 802048e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020494:	68fb      	ldr	r3, [r7, #12]
 8020496:	681b      	ldr	r3, [r3, #0]
 8020498:	6999      	ldr	r1, [r3, #24]
 802049a:	68bb      	ldr	r3, [r7, #8]
 802049c:	691b      	ldr	r3, [r3, #16]
 802049e:	021a      	lsls	r2, r3, #8
 80204a0:	68fb      	ldr	r3, [r7, #12]
 80204a2:	681b      	ldr	r3, [r3, #0]
 80204a4:	430a      	orrs	r2, r1
 80204a6:	619a      	str	r2, [r3, #24]
      break;
 80204a8:	e082      	b.n	80205b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80204aa:	68fb      	ldr	r3, [r7, #12]
 80204ac:	681b      	ldr	r3, [r3, #0]
 80204ae:	68b9      	ldr	r1, [r7, #8]
 80204b0:	4618      	mov	r0, r3
 80204b2:	f000 fb6d 	bl	8020b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80204b6:	68fb      	ldr	r3, [r7, #12]
 80204b8:	681b      	ldr	r3, [r3, #0]
 80204ba:	69da      	ldr	r2, [r3, #28]
 80204bc:	68fb      	ldr	r3, [r7, #12]
 80204be:	681b      	ldr	r3, [r3, #0]
 80204c0:	f042 0208 	orr.w	r2, r2, #8
 80204c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80204c6:	68fb      	ldr	r3, [r7, #12]
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	69da      	ldr	r2, [r3, #28]
 80204cc:	68fb      	ldr	r3, [r7, #12]
 80204ce:	681b      	ldr	r3, [r3, #0]
 80204d0:	f022 0204 	bic.w	r2, r2, #4
 80204d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80204d6:	68fb      	ldr	r3, [r7, #12]
 80204d8:	681b      	ldr	r3, [r3, #0]
 80204da:	69d9      	ldr	r1, [r3, #28]
 80204dc:	68bb      	ldr	r3, [r7, #8]
 80204de:	691a      	ldr	r2, [r3, #16]
 80204e0:	68fb      	ldr	r3, [r7, #12]
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	430a      	orrs	r2, r1
 80204e6:	61da      	str	r2, [r3, #28]
      break;
 80204e8:	e062      	b.n	80205b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80204ea:	68fb      	ldr	r3, [r7, #12]
 80204ec:	681b      	ldr	r3, [r3, #0]
 80204ee:	68b9      	ldr	r1, [r7, #8]
 80204f0:	4618      	mov	r0, r3
 80204f2:	f000 fbd3 	bl	8020c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80204f6:	68fb      	ldr	r3, [r7, #12]
 80204f8:	681b      	ldr	r3, [r3, #0]
 80204fa:	69da      	ldr	r2, [r3, #28]
 80204fc:	68fb      	ldr	r3, [r7, #12]
 80204fe:	681b      	ldr	r3, [r3, #0]
 8020500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020506:	68fb      	ldr	r3, [r7, #12]
 8020508:	681b      	ldr	r3, [r3, #0]
 802050a:	69da      	ldr	r2, [r3, #28]
 802050c:	68fb      	ldr	r3, [r7, #12]
 802050e:	681b      	ldr	r3, [r3, #0]
 8020510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020516:	68fb      	ldr	r3, [r7, #12]
 8020518:	681b      	ldr	r3, [r3, #0]
 802051a:	69d9      	ldr	r1, [r3, #28]
 802051c:	68bb      	ldr	r3, [r7, #8]
 802051e:	691b      	ldr	r3, [r3, #16]
 8020520:	021a      	lsls	r2, r3, #8
 8020522:	68fb      	ldr	r3, [r7, #12]
 8020524:	681b      	ldr	r3, [r3, #0]
 8020526:	430a      	orrs	r2, r1
 8020528:	61da      	str	r2, [r3, #28]
      break;
 802052a:	e041      	b.n	80205b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 802052c:	68fb      	ldr	r3, [r7, #12]
 802052e:	681b      	ldr	r3, [r3, #0]
 8020530:	68b9      	ldr	r1, [r7, #8]
 8020532:	4618      	mov	r0, r3
 8020534:	f000 fc1a 	bl	8020d6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	681b      	ldr	r3, [r3, #0]
 802053c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802053e:	68fb      	ldr	r3, [r7, #12]
 8020540:	681b      	ldr	r3, [r3, #0]
 8020542:	f042 0208 	orr.w	r2, r2, #8
 8020546:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8020548:	68fb      	ldr	r3, [r7, #12]
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802054e:	68fb      	ldr	r3, [r7, #12]
 8020550:	681b      	ldr	r3, [r3, #0]
 8020552:	f022 0204 	bic.w	r2, r2, #4
 8020556:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8020558:	68fb      	ldr	r3, [r7, #12]
 802055a:	681b      	ldr	r3, [r3, #0]
 802055c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 802055e:	68bb      	ldr	r3, [r7, #8]
 8020560:	691a      	ldr	r2, [r3, #16]
 8020562:	68fb      	ldr	r3, [r7, #12]
 8020564:	681b      	ldr	r3, [r3, #0]
 8020566:	430a      	orrs	r2, r1
 8020568:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 802056a:	e021      	b.n	80205b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 802056c:	68fb      	ldr	r3, [r7, #12]
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	68b9      	ldr	r1, [r7, #8]
 8020572:	4618      	mov	r0, r3
 8020574:	f000 fc5c 	bl	8020e30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8020578:	68fb      	ldr	r3, [r7, #12]
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802057e:	68fb      	ldr	r3, [r7, #12]
 8020580:	681b      	ldr	r3, [r3, #0]
 8020582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8020588:	68fb      	ldr	r3, [r7, #12]
 802058a:	681b      	ldr	r3, [r3, #0]
 802058c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802058e:	68fb      	ldr	r3, [r7, #12]
 8020590:	681b      	ldr	r3, [r3, #0]
 8020592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020596:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8020598:	68fb      	ldr	r3, [r7, #12]
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 802059e:	68bb      	ldr	r3, [r7, #8]
 80205a0:	691b      	ldr	r3, [r3, #16]
 80205a2:	021a      	lsls	r2, r3, #8
 80205a4:	68fb      	ldr	r3, [r7, #12]
 80205a6:	681b      	ldr	r3, [r3, #0]
 80205a8:	430a      	orrs	r2, r1
 80205aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80205ac:	e000      	b.n	80205b0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80205ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80205b0:	68fb      	ldr	r3, [r7, #12]
 80205b2:	2200      	movs	r2, #0
 80205b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80205b8:	2300      	movs	r3, #0
}
 80205ba:	4618      	mov	r0, r3
 80205bc:	3710      	adds	r7, #16
 80205be:	46bd      	mov	sp, r7
 80205c0:	bd80      	pop	{r7, pc}
 80205c2:	bf00      	nop

080205c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80205c4:	b580      	push	{r7, lr}
 80205c6:	b084      	sub	sp, #16
 80205c8:	af00      	add	r7, sp, #0
 80205ca:	6078      	str	r0, [r7, #4]
 80205cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80205ce:	687b      	ldr	r3, [r7, #4]
 80205d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80205d4:	2b01      	cmp	r3, #1
 80205d6:	d101      	bne.n	80205dc <HAL_TIM_ConfigClockSource+0x18>
 80205d8:	2302      	movs	r3, #2
 80205da:	e0b7      	b.n	802074c <HAL_TIM_ConfigClockSource+0x188>
 80205dc:	687b      	ldr	r3, [r7, #4]
 80205de:	2201      	movs	r2, #1
 80205e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80205e4:	687b      	ldr	r3, [r7, #4]
 80205e6:	2202      	movs	r2, #2
 80205e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	681b      	ldr	r3, [r3, #0]
 80205f0:	689b      	ldr	r3, [r3, #8]
 80205f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80205f4:	68fa      	ldr	r2, [r7, #12]
 80205f6:	4b57      	ldr	r3, [pc, #348]	; (8020754 <HAL_TIM_ConfigClockSource+0x190>)
 80205f8:	4013      	ands	r3, r2
 80205fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80205fc:	68fb      	ldr	r3, [r7, #12]
 80205fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020602:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8020604:	687b      	ldr	r3, [r7, #4]
 8020606:	681b      	ldr	r3, [r3, #0]
 8020608:	68fa      	ldr	r2, [r7, #12]
 802060a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802060c:	683b      	ldr	r3, [r7, #0]
 802060e:	681b      	ldr	r3, [r3, #0]
 8020610:	2b70      	cmp	r3, #112	; 0x70
 8020612:	d02e      	beq.n	8020672 <HAL_TIM_ConfigClockSource+0xae>
 8020614:	2b70      	cmp	r3, #112	; 0x70
 8020616:	d812      	bhi.n	802063e <HAL_TIM_ConfigClockSource+0x7a>
 8020618:	2b30      	cmp	r3, #48	; 0x30
 802061a:	f000 8084 	beq.w	8020726 <HAL_TIM_ConfigClockSource+0x162>
 802061e:	2b30      	cmp	r3, #48	; 0x30
 8020620:	d806      	bhi.n	8020630 <HAL_TIM_ConfigClockSource+0x6c>
 8020622:	2b10      	cmp	r3, #16
 8020624:	d07f      	beq.n	8020726 <HAL_TIM_ConfigClockSource+0x162>
 8020626:	2b20      	cmp	r3, #32
 8020628:	d07d      	beq.n	8020726 <HAL_TIM_ConfigClockSource+0x162>
 802062a:	2b00      	cmp	r3, #0
 802062c:	d07b      	beq.n	8020726 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 802062e:	e084      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8020630:	2b50      	cmp	r3, #80	; 0x50
 8020632:	d048      	beq.n	80206c6 <HAL_TIM_ConfigClockSource+0x102>
 8020634:	2b60      	cmp	r3, #96	; 0x60
 8020636:	d056      	beq.n	80206e6 <HAL_TIM_ConfigClockSource+0x122>
 8020638:	2b40      	cmp	r3, #64	; 0x40
 802063a:	d064      	beq.n	8020706 <HAL_TIM_ConfigClockSource+0x142>
      break;
 802063c:	e07d      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 802063e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8020642:	d070      	beq.n	8020726 <HAL_TIM_ConfigClockSource+0x162>
 8020644:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8020648:	d809      	bhi.n	802065e <HAL_TIM_ConfigClockSource+0x9a>
 802064a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802064e:	d027      	beq.n	80206a0 <HAL_TIM_ConfigClockSource+0xdc>
 8020650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020654:	d067      	beq.n	8020726 <HAL_TIM_ConfigClockSource+0x162>
 8020656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802065a:	d06d      	beq.n	8020738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 802065c:	e06d      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 802065e:	4a3e      	ldr	r2, [pc, #248]	; (8020758 <HAL_TIM_ConfigClockSource+0x194>)
 8020660:	4293      	cmp	r3, r2
 8020662:	d060      	beq.n	8020726 <HAL_TIM_ConfigClockSource+0x162>
 8020664:	4a3d      	ldr	r2, [pc, #244]	; (802075c <HAL_TIM_ConfigClockSource+0x198>)
 8020666:	4293      	cmp	r3, r2
 8020668:	d05d      	beq.n	8020726 <HAL_TIM_ConfigClockSource+0x162>
 802066a:	4a3d      	ldr	r2, [pc, #244]	; (8020760 <HAL_TIM_ConfigClockSource+0x19c>)
 802066c:	4293      	cmp	r3, r2
 802066e:	d05a      	beq.n	8020726 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8020670:	e063      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	6818      	ldr	r0, [r3, #0]
 8020676:	683b      	ldr	r3, [r7, #0]
 8020678:	6899      	ldr	r1, [r3, #8]
 802067a:	683b      	ldr	r3, [r7, #0]
 802067c:	685a      	ldr	r2, [r3, #4]
 802067e:	683b      	ldr	r3, [r7, #0]
 8020680:	68db      	ldr	r3, [r3, #12]
 8020682:	f000 fde1 	bl	8021248 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8020686:	687b      	ldr	r3, [r7, #4]
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	689b      	ldr	r3, [r3, #8]
 802068c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802068e:	68fb      	ldr	r3, [r7, #12]
 8020690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8020694:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	681b      	ldr	r3, [r3, #0]
 802069a:	68fa      	ldr	r2, [r7, #12]
 802069c:	609a      	str	r2, [r3, #8]
      break;
 802069e:	e04c      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	6818      	ldr	r0, [r3, #0]
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	6899      	ldr	r1, [r3, #8]
 80206a8:	683b      	ldr	r3, [r7, #0]
 80206aa:	685a      	ldr	r2, [r3, #4]
 80206ac:	683b      	ldr	r3, [r7, #0]
 80206ae:	68db      	ldr	r3, [r3, #12]
 80206b0:	f000 fdca 	bl	8021248 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	689a      	ldr	r2, [r3, #8]
 80206ba:	687b      	ldr	r3, [r7, #4]
 80206bc:	681b      	ldr	r3, [r3, #0]
 80206be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80206c2:	609a      	str	r2, [r3, #8]
      break;
 80206c4:	e039      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80206c6:	687b      	ldr	r3, [r7, #4]
 80206c8:	6818      	ldr	r0, [r3, #0]
 80206ca:	683b      	ldr	r3, [r7, #0]
 80206cc:	6859      	ldr	r1, [r3, #4]
 80206ce:	683b      	ldr	r3, [r7, #0]
 80206d0:	68db      	ldr	r3, [r3, #12]
 80206d2:	461a      	mov	r2, r3
 80206d4:	f000 fc84 	bl	8020fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	2150      	movs	r1, #80	; 0x50
 80206de:	4618      	mov	r0, r3
 80206e0:	f000 fd94 	bl	802120c <TIM_ITRx_SetConfig>
      break;
 80206e4:	e029      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80206e6:	687b      	ldr	r3, [r7, #4]
 80206e8:	6818      	ldr	r0, [r3, #0]
 80206ea:	683b      	ldr	r3, [r7, #0]
 80206ec:	6859      	ldr	r1, [r3, #4]
 80206ee:	683b      	ldr	r3, [r7, #0]
 80206f0:	68db      	ldr	r3, [r3, #12]
 80206f2:	461a      	mov	r2, r3
 80206f4:	f000 fce0 	bl	80210b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80206f8:	687b      	ldr	r3, [r7, #4]
 80206fa:	681b      	ldr	r3, [r3, #0]
 80206fc:	2160      	movs	r1, #96	; 0x60
 80206fe:	4618      	mov	r0, r3
 8020700:	f000 fd84 	bl	802120c <TIM_ITRx_SetConfig>
      break;
 8020704:	e019      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8020706:	687b      	ldr	r3, [r7, #4]
 8020708:	6818      	ldr	r0, [r3, #0]
 802070a:	683b      	ldr	r3, [r7, #0]
 802070c:	6859      	ldr	r1, [r3, #4]
 802070e:	683b      	ldr	r3, [r7, #0]
 8020710:	68db      	ldr	r3, [r3, #12]
 8020712:	461a      	mov	r2, r3
 8020714:	f000 fc64 	bl	8020fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020718:	687b      	ldr	r3, [r7, #4]
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	2140      	movs	r1, #64	; 0x40
 802071e:	4618      	mov	r0, r3
 8020720:	f000 fd74 	bl	802120c <TIM_ITRx_SetConfig>
      break;
 8020724:	e009      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	681a      	ldr	r2, [r3, #0]
 802072a:	683b      	ldr	r3, [r7, #0]
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	4619      	mov	r1, r3
 8020730:	4610      	mov	r0, r2
 8020732:	f000 fd6b 	bl	802120c <TIM_ITRx_SetConfig>
      break;
 8020736:	e000      	b.n	802073a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8020738:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	2201      	movs	r2, #1
 802073e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020742:	687b      	ldr	r3, [r7, #4]
 8020744:	2200      	movs	r2, #0
 8020746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802074a:	2300      	movs	r3, #0
}
 802074c:	4618      	mov	r0, r3
 802074e:	3710      	adds	r7, #16
 8020750:	46bd      	mov	sp, r7
 8020752:	bd80      	pop	{r7, pc}
 8020754:	ffceff88 	.word	0xffceff88
 8020758:	00100030 	.word	0x00100030
 802075c:	00100040 	.word	0x00100040
 8020760:	00100020 	.word	0x00100020

08020764 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8020764:	b480      	push	{r7}
 8020766:	b085      	sub	sp, #20
 8020768:	af00      	add	r7, sp, #0
 802076a:	6078      	str	r0, [r7, #4]
 802076c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 802076e:	2300      	movs	r3, #0
 8020770:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8020772:	683b      	ldr	r3, [r7, #0]
 8020774:	2b0c      	cmp	r3, #12
 8020776:	d831      	bhi.n	80207dc <HAL_TIM_ReadCapturedValue+0x78>
 8020778:	a201      	add	r2, pc, #4	; (adr r2, 8020780 <HAL_TIM_ReadCapturedValue+0x1c>)
 802077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802077e:	bf00      	nop
 8020780:	080207b5 	.word	0x080207b5
 8020784:	080207dd 	.word	0x080207dd
 8020788:	080207dd 	.word	0x080207dd
 802078c:	080207dd 	.word	0x080207dd
 8020790:	080207bf 	.word	0x080207bf
 8020794:	080207dd 	.word	0x080207dd
 8020798:	080207dd 	.word	0x080207dd
 802079c:	080207dd 	.word	0x080207dd
 80207a0:	080207c9 	.word	0x080207c9
 80207a4:	080207dd 	.word	0x080207dd
 80207a8:	080207dd 	.word	0x080207dd
 80207ac:	080207dd 	.word	0x080207dd
 80207b0:	080207d3 	.word	0x080207d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80207ba:	60fb      	str	r3, [r7, #12]

      break;
 80207bc:	e00f      	b.n	80207de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	681b      	ldr	r3, [r3, #0]
 80207c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80207c4:	60fb      	str	r3, [r7, #12]

      break;
 80207c6:	e00a      	b.n	80207de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80207c8:	687b      	ldr	r3, [r7, #4]
 80207ca:	681b      	ldr	r3, [r3, #0]
 80207cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80207ce:	60fb      	str	r3, [r7, #12]

      break;
 80207d0:	e005      	b.n	80207de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80207d2:	687b      	ldr	r3, [r7, #4]
 80207d4:	681b      	ldr	r3, [r3, #0]
 80207d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80207d8:	60fb      	str	r3, [r7, #12]

      break;
 80207da:	e000      	b.n	80207de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80207dc:	bf00      	nop
  }

  return tmpreg;
 80207de:	68fb      	ldr	r3, [r7, #12]
}
 80207e0:	4618      	mov	r0, r3
 80207e2:	3714      	adds	r7, #20
 80207e4:	46bd      	mov	sp, r7
 80207e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ea:	4770      	bx	lr

080207ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80207ec:	b480      	push	{r7}
 80207ee:	b083      	sub	sp, #12
 80207f0:	af00      	add	r7, sp, #0
 80207f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80207f4:	bf00      	nop
 80207f6:	370c      	adds	r7, #12
 80207f8:	46bd      	mov	sp, r7
 80207fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207fe:	4770      	bx	lr

08020800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8020800:	b480      	push	{r7}
 8020802:	b083      	sub	sp, #12
 8020804:	af00      	add	r7, sp, #0
 8020806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8020808:	bf00      	nop
 802080a:	370c      	adds	r7, #12
 802080c:	46bd      	mov	sp, r7
 802080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020812:	4770      	bx	lr

08020814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8020814:	b480      	push	{r7}
 8020816:	b083      	sub	sp, #12
 8020818:	af00      	add	r7, sp, #0
 802081a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802081c:	bf00      	nop
 802081e:	370c      	adds	r7, #12
 8020820:	46bd      	mov	sp, r7
 8020822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020826:	4770      	bx	lr

08020828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8020828:	b480      	push	{r7}
 802082a:	b085      	sub	sp, #20
 802082c:	af00      	add	r7, sp, #0
 802082e:	6078      	str	r0, [r7, #4]
 8020830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	681b      	ldr	r3, [r3, #0]
 8020836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	4a40      	ldr	r2, [pc, #256]	; (802093c <TIM_Base_SetConfig+0x114>)
 802083c:	4293      	cmp	r3, r2
 802083e:	d013      	beq.n	8020868 <TIM_Base_SetConfig+0x40>
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020846:	d00f      	beq.n	8020868 <TIM_Base_SetConfig+0x40>
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	4a3d      	ldr	r2, [pc, #244]	; (8020940 <TIM_Base_SetConfig+0x118>)
 802084c:	4293      	cmp	r3, r2
 802084e:	d00b      	beq.n	8020868 <TIM_Base_SetConfig+0x40>
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	4a3c      	ldr	r2, [pc, #240]	; (8020944 <TIM_Base_SetConfig+0x11c>)
 8020854:	4293      	cmp	r3, r2
 8020856:	d007      	beq.n	8020868 <TIM_Base_SetConfig+0x40>
 8020858:	687b      	ldr	r3, [r7, #4]
 802085a:	4a3b      	ldr	r2, [pc, #236]	; (8020948 <TIM_Base_SetConfig+0x120>)
 802085c:	4293      	cmp	r3, r2
 802085e:	d003      	beq.n	8020868 <TIM_Base_SetConfig+0x40>
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	4a3a      	ldr	r2, [pc, #232]	; (802094c <TIM_Base_SetConfig+0x124>)
 8020864:	4293      	cmp	r3, r2
 8020866:	d108      	bne.n	802087a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020868:	68fb      	ldr	r3, [r7, #12]
 802086a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802086e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020870:	683b      	ldr	r3, [r7, #0]
 8020872:	685b      	ldr	r3, [r3, #4]
 8020874:	68fa      	ldr	r2, [r7, #12]
 8020876:	4313      	orrs	r3, r2
 8020878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802087a:	687b      	ldr	r3, [r7, #4]
 802087c:	4a2f      	ldr	r2, [pc, #188]	; (802093c <TIM_Base_SetConfig+0x114>)
 802087e:	4293      	cmp	r3, r2
 8020880:	d01f      	beq.n	80208c2 <TIM_Base_SetConfig+0x9a>
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020888:	d01b      	beq.n	80208c2 <TIM_Base_SetConfig+0x9a>
 802088a:	687b      	ldr	r3, [r7, #4]
 802088c:	4a2c      	ldr	r2, [pc, #176]	; (8020940 <TIM_Base_SetConfig+0x118>)
 802088e:	4293      	cmp	r3, r2
 8020890:	d017      	beq.n	80208c2 <TIM_Base_SetConfig+0x9a>
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	4a2b      	ldr	r2, [pc, #172]	; (8020944 <TIM_Base_SetConfig+0x11c>)
 8020896:	4293      	cmp	r3, r2
 8020898:	d013      	beq.n	80208c2 <TIM_Base_SetConfig+0x9a>
 802089a:	687b      	ldr	r3, [r7, #4]
 802089c:	4a2a      	ldr	r2, [pc, #168]	; (8020948 <TIM_Base_SetConfig+0x120>)
 802089e:	4293      	cmp	r3, r2
 80208a0:	d00f      	beq.n	80208c2 <TIM_Base_SetConfig+0x9a>
 80208a2:	687b      	ldr	r3, [r7, #4]
 80208a4:	4a29      	ldr	r2, [pc, #164]	; (802094c <TIM_Base_SetConfig+0x124>)
 80208a6:	4293      	cmp	r3, r2
 80208a8:	d00b      	beq.n	80208c2 <TIM_Base_SetConfig+0x9a>
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	4a28      	ldr	r2, [pc, #160]	; (8020950 <TIM_Base_SetConfig+0x128>)
 80208ae:	4293      	cmp	r3, r2
 80208b0:	d007      	beq.n	80208c2 <TIM_Base_SetConfig+0x9a>
 80208b2:	687b      	ldr	r3, [r7, #4]
 80208b4:	4a27      	ldr	r2, [pc, #156]	; (8020954 <TIM_Base_SetConfig+0x12c>)
 80208b6:	4293      	cmp	r3, r2
 80208b8:	d003      	beq.n	80208c2 <TIM_Base_SetConfig+0x9a>
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	4a26      	ldr	r2, [pc, #152]	; (8020958 <TIM_Base_SetConfig+0x130>)
 80208be:	4293      	cmp	r3, r2
 80208c0:	d108      	bne.n	80208d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80208c2:	68fb      	ldr	r3, [r7, #12]
 80208c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80208c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80208ca:	683b      	ldr	r3, [r7, #0]
 80208cc:	68db      	ldr	r3, [r3, #12]
 80208ce:	68fa      	ldr	r2, [r7, #12]
 80208d0:	4313      	orrs	r3, r2
 80208d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80208d4:	68fb      	ldr	r3, [r7, #12]
 80208d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80208da:	683b      	ldr	r3, [r7, #0]
 80208dc:	695b      	ldr	r3, [r3, #20]
 80208de:	4313      	orrs	r3, r2
 80208e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80208e2:	687b      	ldr	r3, [r7, #4]
 80208e4:	68fa      	ldr	r2, [r7, #12]
 80208e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80208e8:	683b      	ldr	r3, [r7, #0]
 80208ea:	689a      	ldr	r2, [r3, #8]
 80208ec:	687b      	ldr	r3, [r7, #4]
 80208ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80208f0:	683b      	ldr	r3, [r7, #0]
 80208f2:	681a      	ldr	r2, [r3, #0]
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80208f8:	687b      	ldr	r3, [r7, #4]
 80208fa:	4a10      	ldr	r2, [pc, #64]	; (802093c <TIM_Base_SetConfig+0x114>)
 80208fc:	4293      	cmp	r3, r2
 80208fe:	d00f      	beq.n	8020920 <TIM_Base_SetConfig+0xf8>
 8020900:	687b      	ldr	r3, [r7, #4]
 8020902:	4a12      	ldr	r2, [pc, #72]	; (802094c <TIM_Base_SetConfig+0x124>)
 8020904:	4293      	cmp	r3, r2
 8020906:	d00b      	beq.n	8020920 <TIM_Base_SetConfig+0xf8>
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	4a11      	ldr	r2, [pc, #68]	; (8020950 <TIM_Base_SetConfig+0x128>)
 802090c:	4293      	cmp	r3, r2
 802090e:	d007      	beq.n	8020920 <TIM_Base_SetConfig+0xf8>
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	4a10      	ldr	r2, [pc, #64]	; (8020954 <TIM_Base_SetConfig+0x12c>)
 8020914:	4293      	cmp	r3, r2
 8020916:	d003      	beq.n	8020920 <TIM_Base_SetConfig+0xf8>
 8020918:	687b      	ldr	r3, [r7, #4]
 802091a:	4a0f      	ldr	r2, [pc, #60]	; (8020958 <TIM_Base_SetConfig+0x130>)
 802091c:	4293      	cmp	r3, r2
 802091e:	d103      	bne.n	8020928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020920:	683b      	ldr	r3, [r7, #0]
 8020922:	691a      	ldr	r2, [r3, #16]
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	2201      	movs	r2, #1
 802092c:	615a      	str	r2, [r3, #20]
}
 802092e:	bf00      	nop
 8020930:	3714      	adds	r7, #20
 8020932:	46bd      	mov	sp, r7
 8020934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020938:	4770      	bx	lr
 802093a:	bf00      	nop
 802093c:	40010000 	.word	0x40010000
 8020940:	40000400 	.word	0x40000400
 8020944:	40000800 	.word	0x40000800
 8020948:	40000c00 	.word	0x40000c00
 802094c:	40010400 	.word	0x40010400
 8020950:	40014000 	.word	0x40014000
 8020954:	40014400 	.word	0x40014400
 8020958:	40014800 	.word	0x40014800

0802095c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802095c:	b480      	push	{r7}
 802095e:	b087      	sub	sp, #28
 8020960:	af00      	add	r7, sp, #0
 8020962:	6078      	str	r0, [r7, #4]
 8020964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	6a1b      	ldr	r3, [r3, #32]
 802096a:	f023 0201 	bic.w	r2, r3, #1
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020972:	687b      	ldr	r3, [r7, #4]
 8020974:	6a1b      	ldr	r3, [r3, #32]
 8020976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020978:	687b      	ldr	r3, [r7, #4]
 802097a:	685b      	ldr	r3, [r3, #4]
 802097c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	699b      	ldr	r3, [r3, #24]
 8020982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020984:	68fa      	ldr	r2, [r7, #12]
 8020986:	4b37      	ldr	r3, [pc, #220]	; (8020a64 <TIM_OC1_SetConfig+0x108>)
 8020988:	4013      	ands	r3, r2
 802098a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 802098c:	68fb      	ldr	r3, [r7, #12]
 802098e:	f023 0303 	bic.w	r3, r3, #3
 8020992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020994:	683b      	ldr	r3, [r7, #0]
 8020996:	681b      	ldr	r3, [r3, #0]
 8020998:	68fa      	ldr	r2, [r7, #12]
 802099a:	4313      	orrs	r3, r2
 802099c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802099e:	697b      	ldr	r3, [r7, #20]
 80209a0:	f023 0302 	bic.w	r3, r3, #2
 80209a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80209a6:	683b      	ldr	r3, [r7, #0]
 80209a8:	689b      	ldr	r3, [r3, #8]
 80209aa:	697a      	ldr	r2, [r7, #20]
 80209ac:	4313      	orrs	r3, r2
 80209ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	4a2d      	ldr	r2, [pc, #180]	; (8020a68 <TIM_OC1_SetConfig+0x10c>)
 80209b4:	4293      	cmp	r3, r2
 80209b6:	d00f      	beq.n	80209d8 <TIM_OC1_SetConfig+0x7c>
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	4a2c      	ldr	r2, [pc, #176]	; (8020a6c <TIM_OC1_SetConfig+0x110>)
 80209bc:	4293      	cmp	r3, r2
 80209be:	d00b      	beq.n	80209d8 <TIM_OC1_SetConfig+0x7c>
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	4a2b      	ldr	r2, [pc, #172]	; (8020a70 <TIM_OC1_SetConfig+0x114>)
 80209c4:	4293      	cmp	r3, r2
 80209c6:	d007      	beq.n	80209d8 <TIM_OC1_SetConfig+0x7c>
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	4a2a      	ldr	r2, [pc, #168]	; (8020a74 <TIM_OC1_SetConfig+0x118>)
 80209cc:	4293      	cmp	r3, r2
 80209ce:	d003      	beq.n	80209d8 <TIM_OC1_SetConfig+0x7c>
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	4a29      	ldr	r2, [pc, #164]	; (8020a78 <TIM_OC1_SetConfig+0x11c>)
 80209d4:	4293      	cmp	r3, r2
 80209d6:	d10c      	bne.n	80209f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80209d8:	697b      	ldr	r3, [r7, #20]
 80209da:	f023 0308 	bic.w	r3, r3, #8
 80209de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80209e0:	683b      	ldr	r3, [r7, #0]
 80209e2:	68db      	ldr	r3, [r3, #12]
 80209e4:	697a      	ldr	r2, [r7, #20]
 80209e6:	4313      	orrs	r3, r2
 80209e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80209ea:	697b      	ldr	r3, [r7, #20]
 80209ec:	f023 0304 	bic.w	r3, r3, #4
 80209f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80209f2:	687b      	ldr	r3, [r7, #4]
 80209f4:	4a1c      	ldr	r2, [pc, #112]	; (8020a68 <TIM_OC1_SetConfig+0x10c>)
 80209f6:	4293      	cmp	r3, r2
 80209f8:	d00f      	beq.n	8020a1a <TIM_OC1_SetConfig+0xbe>
 80209fa:	687b      	ldr	r3, [r7, #4]
 80209fc:	4a1b      	ldr	r2, [pc, #108]	; (8020a6c <TIM_OC1_SetConfig+0x110>)
 80209fe:	4293      	cmp	r3, r2
 8020a00:	d00b      	beq.n	8020a1a <TIM_OC1_SetConfig+0xbe>
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	4a1a      	ldr	r2, [pc, #104]	; (8020a70 <TIM_OC1_SetConfig+0x114>)
 8020a06:	4293      	cmp	r3, r2
 8020a08:	d007      	beq.n	8020a1a <TIM_OC1_SetConfig+0xbe>
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	4a19      	ldr	r2, [pc, #100]	; (8020a74 <TIM_OC1_SetConfig+0x118>)
 8020a0e:	4293      	cmp	r3, r2
 8020a10:	d003      	beq.n	8020a1a <TIM_OC1_SetConfig+0xbe>
 8020a12:	687b      	ldr	r3, [r7, #4]
 8020a14:	4a18      	ldr	r2, [pc, #96]	; (8020a78 <TIM_OC1_SetConfig+0x11c>)
 8020a16:	4293      	cmp	r3, r2
 8020a18:	d111      	bne.n	8020a3e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020a1a:	693b      	ldr	r3, [r7, #16]
 8020a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020a22:	693b      	ldr	r3, [r7, #16]
 8020a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020a2a:	683b      	ldr	r3, [r7, #0]
 8020a2c:	695b      	ldr	r3, [r3, #20]
 8020a2e:	693a      	ldr	r2, [r7, #16]
 8020a30:	4313      	orrs	r3, r2
 8020a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020a34:	683b      	ldr	r3, [r7, #0]
 8020a36:	699b      	ldr	r3, [r3, #24]
 8020a38:	693a      	ldr	r2, [r7, #16]
 8020a3a:	4313      	orrs	r3, r2
 8020a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020a3e:	687b      	ldr	r3, [r7, #4]
 8020a40:	693a      	ldr	r2, [r7, #16]
 8020a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	68fa      	ldr	r2, [r7, #12]
 8020a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020a4a:	683b      	ldr	r3, [r7, #0]
 8020a4c:	685a      	ldr	r2, [r3, #4]
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020a52:	687b      	ldr	r3, [r7, #4]
 8020a54:	697a      	ldr	r2, [r7, #20]
 8020a56:	621a      	str	r2, [r3, #32]
}
 8020a58:	bf00      	nop
 8020a5a:	371c      	adds	r7, #28
 8020a5c:	46bd      	mov	sp, r7
 8020a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a62:	4770      	bx	lr
 8020a64:	fffeff8f 	.word	0xfffeff8f
 8020a68:	40010000 	.word	0x40010000
 8020a6c:	40010400 	.word	0x40010400
 8020a70:	40014000 	.word	0x40014000
 8020a74:	40014400 	.word	0x40014400
 8020a78:	40014800 	.word	0x40014800

08020a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020a7c:	b480      	push	{r7}
 8020a7e:	b087      	sub	sp, #28
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
 8020a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020a86:	687b      	ldr	r3, [r7, #4]
 8020a88:	6a1b      	ldr	r3, [r3, #32]
 8020a8a:	f023 0210 	bic.w	r2, r3, #16
 8020a8e:	687b      	ldr	r3, [r7, #4]
 8020a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020a92:	687b      	ldr	r3, [r7, #4]
 8020a94:	6a1b      	ldr	r3, [r3, #32]
 8020a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020a98:	687b      	ldr	r3, [r7, #4]
 8020a9a:	685b      	ldr	r3, [r3, #4]
 8020a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	699b      	ldr	r3, [r3, #24]
 8020aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020aa4:	68fa      	ldr	r2, [r7, #12]
 8020aa6:	4b34      	ldr	r3, [pc, #208]	; (8020b78 <TIM_OC2_SetConfig+0xfc>)
 8020aa8:	4013      	ands	r3, r2
 8020aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020aac:	68fb      	ldr	r3, [r7, #12]
 8020aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020ab4:	683b      	ldr	r3, [r7, #0]
 8020ab6:	681b      	ldr	r3, [r3, #0]
 8020ab8:	021b      	lsls	r3, r3, #8
 8020aba:	68fa      	ldr	r2, [r7, #12]
 8020abc:	4313      	orrs	r3, r2
 8020abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020ac0:	697b      	ldr	r3, [r7, #20]
 8020ac2:	f023 0320 	bic.w	r3, r3, #32
 8020ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020ac8:	683b      	ldr	r3, [r7, #0]
 8020aca:	689b      	ldr	r3, [r3, #8]
 8020acc:	011b      	lsls	r3, r3, #4
 8020ace:	697a      	ldr	r2, [r7, #20]
 8020ad0:	4313      	orrs	r3, r2
 8020ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	4a29      	ldr	r2, [pc, #164]	; (8020b7c <TIM_OC2_SetConfig+0x100>)
 8020ad8:	4293      	cmp	r3, r2
 8020ada:	d003      	beq.n	8020ae4 <TIM_OC2_SetConfig+0x68>
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	4a28      	ldr	r2, [pc, #160]	; (8020b80 <TIM_OC2_SetConfig+0x104>)
 8020ae0:	4293      	cmp	r3, r2
 8020ae2:	d10d      	bne.n	8020b00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020ae4:	697b      	ldr	r3, [r7, #20]
 8020ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020aec:	683b      	ldr	r3, [r7, #0]
 8020aee:	68db      	ldr	r3, [r3, #12]
 8020af0:	011b      	lsls	r3, r3, #4
 8020af2:	697a      	ldr	r2, [r7, #20]
 8020af4:	4313      	orrs	r3, r2
 8020af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020af8:	697b      	ldr	r3, [r7, #20]
 8020afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020afe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020b00:	687b      	ldr	r3, [r7, #4]
 8020b02:	4a1e      	ldr	r2, [pc, #120]	; (8020b7c <TIM_OC2_SetConfig+0x100>)
 8020b04:	4293      	cmp	r3, r2
 8020b06:	d00f      	beq.n	8020b28 <TIM_OC2_SetConfig+0xac>
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	4a1d      	ldr	r2, [pc, #116]	; (8020b80 <TIM_OC2_SetConfig+0x104>)
 8020b0c:	4293      	cmp	r3, r2
 8020b0e:	d00b      	beq.n	8020b28 <TIM_OC2_SetConfig+0xac>
 8020b10:	687b      	ldr	r3, [r7, #4]
 8020b12:	4a1c      	ldr	r2, [pc, #112]	; (8020b84 <TIM_OC2_SetConfig+0x108>)
 8020b14:	4293      	cmp	r3, r2
 8020b16:	d007      	beq.n	8020b28 <TIM_OC2_SetConfig+0xac>
 8020b18:	687b      	ldr	r3, [r7, #4]
 8020b1a:	4a1b      	ldr	r2, [pc, #108]	; (8020b88 <TIM_OC2_SetConfig+0x10c>)
 8020b1c:	4293      	cmp	r3, r2
 8020b1e:	d003      	beq.n	8020b28 <TIM_OC2_SetConfig+0xac>
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	4a1a      	ldr	r2, [pc, #104]	; (8020b8c <TIM_OC2_SetConfig+0x110>)
 8020b24:	4293      	cmp	r3, r2
 8020b26:	d113      	bne.n	8020b50 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020b28:	693b      	ldr	r3, [r7, #16]
 8020b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020b30:	693b      	ldr	r3, [r7, #16]
 8020b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020b38:	683b      	ldr	r3, [r7, #0]
 8020b3a:	695b      	ldr	r3, [r3, #20]
 8020b3c:	009b      	lsls	r3, r3, #2
 8020b3e:	693a      	ldr	r2, [r7, #16]
 8020b40:	4313      	orrs	r3, r2
 8020b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020b44:	683b      	ldr	r3, [r7, #0]
 8020b46:	699b      	ldr	r3, [r3, #24]
 8020b48:	009b      	lsls	r3, r3, #2
 8020b4a:	693a      	ldr	r2, [r7, #16]
 8020b4c:	4313      	orrs	r3, r2
 8020b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	693a      	ldr	r2, [r7, #16]
 8020b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020b56:	687b      	ldr	r3, [r7, #4]
 8020b58:	68fa      	ldr	r2, [r7, #12]
 8020b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020b5c:	683b      	ldr	r3, [r7, #0]
 8020b5e:	685a      	ldr	r2, [r3, #4]
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	697a      	ldr	r2, [r7, #20]
 8020b68:	621a      	str	r2, [r3, #32]
}
 8020b6a:	bf00      	nop
 8020b6c:	371c      	adds	r7, #28
 8020b6e:	46bd      	mov	sp, r7
 8020b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b74:	4770      	bx	lr
 8020b76:	bf00      	nop
 8020b78:	feff8fff 	.word	0xfeff8fff
 8020b7c:	40010000 	.word	0x40010000
 8020b80:	40010400 	.word	0x40010400
 8020b84:	40014000 	.word	0x40014000
 8020b88:	40014400 	.word	0x40014400
 8020b8c:	40014800 	.word	0x40014800

08020b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020b90:	b480      	push	{r7}
 8020b92:	b087      	sub	sp, #28
 8020b94:	af00      	add	r7, sp, #0
 8020b96:	6078      	str	r0, [r7, #4]
 8020b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020b9a:	687b      	ldr	r3, [r7, #4]
 8020b9c:	6a1b      	ldr	r3, [r3, #32]
 8020b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	6a1b      	ldr	r3, [r3, #32]
 8020baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	685b      	ldr	r3, [r3, #4]
 8020bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020bb2:	687b      	ldr	r3, [r7, #4]
 8020bb4:	69db      	ldr	r3, [r3, #28]
 8020bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020bb8:	68fb      	ldr	r3, [r7, #12]
 8020bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	f023 0303 	bic.w	r3, r3, #3
 8020bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020bc8:	683b      	ldr	r3, [r7, #0]
 8020bca:	681b      	ldr	r3, [r3, #0]
 8020bcc:	68fa      	ldr	r2, [r7, #12]
 8020bce:	4313      	orrs	r3, r2
 8020bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020bd2:	697b      	ldr	r3, [r7, #20]
 8020bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020bda:	683b      	ldr	r3, [r7, #0]
 8020bdc:	689b      	ldr	r3, [r3, #8]
 8020bde:	021b      	lsls	r3, r3, #8
 8020be0:	697a      	ldr	r2, [r7, #20]
 8020be2:	4313      	orrs	r3, r2
 8020be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	4a27      	ldr	r2, [pc, #156]	; (8020c88 <TIM_OC3_SetConfig+0xf8>)
 8020bea:	4293      	cmp	r3, r2
 8020bec:	d003      	beq.n	8020bf6 <TIM_OC3_SetConfig+0x66>
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	4a26      	ldr	r2, [pc, #152]	; (8020c8c <TIM_OC3_SetConfig+0xfc>)
 8020bf2:	4293      	cmp	r3, r2
 8020bf4:	d10d      	bne.n	8020c12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020bf6:	697b      	ldr	r3, [r7, #20]
 8020bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020bfe:	683b      	ldr	r3, [r7, #0]
 8020c00:	68db      	ldr	r3, [r3, #12]
 8020c02:	021b      	lsls	r3, r3, #8
 8020c04:	697a      	ldr	r2, [r7, #20]
 8020c06:	4313      	orrs	r3, r2
 8020c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020c0a:	697b      	ldr	r3, [r7, #20]
 8020c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020c12:	687b      	ldr	r3, [r7, #4]
 8020c14:	4a1c      	ldr	r2, [pc, #112]	; (8020c88 <TIM_OC3_SetConfig+0xf8>)
 8020c16:	4293      	cmp	r3, r2
 8020c18:	d00f      	beq.n	8020c3a <TIM_OC3_SetConfig+0xaa>
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	4a1b      	ldr	r2, [pc, #108]	; (8020c8c <TIM_OC3_SetConfig+0xfc>)
 8020c1e:	4293      	cmp	r3, r2
 8020c20:	d00b      	beq.n	8020c3a <TIM_OC3_SetConfig+0xaa>
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	4a1a      	ldr	r2, [pc, #104]	; (8020c90 <TIM_OC3_SetConfig+0x100>)
 8020c26:	4293      	cmp	r3, r2
 8020c28:	d007      	beq.n	8020c3a <TIM_OC3_SetConfig+0xaa>
 8020c2a:	687b      	ldr	r3, [r7, #4]
 8020c2c:	4a19      	ldr	r2, [pc, #100]	; (8020c94 <TIM_OC3_SetConfig+0x104>)
 8020c2e:	4293      	cmp	r3, r2
 8020c30:	d003      	beq.n	8020c3a <TIM_OC3_SetConfig+0xaa>
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	4a18      	ldr	r2, [pc, #96]	; (8020c98 <TIM_OC3_SetConfig+0x108>)
 8020c36:	4293      	cmp	r3, r2
 8020c38:	d113      	bne.n	8020c62 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020c3a:	693b      	ldr	r3, [r7, #16]
 8020c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020c42:	693b      	ldr	r3, [r7, #16]
 8020c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020c4a:	683b      	ldr	r3, [r7, #0]
 8020c4c:	695b      	ldr	r3, [r3, #20]
 8020c4e:	011b      	lsls	r3, r3, #4
 8020c50:	693a      	ldr	r2, [r7, #16]
 8020c52:	4313      	orrs	r3, r2
 8020c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020c56:	683b      	ldr	r3, [r7, #0]
 8020c58:	699b      	ldr	r3, [r3, #24]
 8020c5a:	011b      	lsls	r3, r3, #4
 8020c5c:	693a      	ldr	r2, [r7, #16]
 8020c5e:	4313      	orrs	r3, r2
 8020c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020c62:	687b      	ldr	r3, [r7, #4]
 8020c64:	693a      	ldr	r2, [r7, #16]
 8020c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020c68:	687b      	ldr	r3, [r7, #4]
 8020c6a:	68fa      	ldr	r2, [r7, #12]
 8020c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020c6e:	683b      	ldr	r3, [r7, #0]
 8020c70:	685a      	ldr	r2, [r3, #4]
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020c76:	687b      	ldr	r3, [r7, #4]
 8020c78:	697a      	ldr	r2, [r7, #20]
 8020c7a:	621a      	str	r2, [r3, #32]
}
 8020c7c:	bf00      	nop
 8020c7e:	371c      	adds	r7, #28
 8020c80:	46bd      	mov	sp, r7
 8020c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c86:	4770      	bx	lr
 8020c88:	40010000 	.word	0x40010000
 8020c8c:	40010400 	.word	0x40010400
 8020c90:	40014000 	.word	0x40014000
 8020c94:	40014400 	.word	0x40014400
 8020c98:	40014800 	.word	0x40014800

08020c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020c9c:	b480      	push	{r7}
 8020c9e:	b087      	sub	sp, #28
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	6078      	str	r0, [r7, #4]
 8020ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	6a1b      	ldr	r3, [r3, #32]
 8020caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020cae:	687b      	ldr	r3, [r7, #4]
 8020cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	6a1b      	ldr	r3, [r3, #32]
 8020cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	685b      	ldr	r3, [r3, #4]
 8020cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	69db      	ldr	r3, [r3, #28]
 8020cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020cc4:	68fb      	ldr	r3, [r7, #12]
 8020cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020ccc:	68fb      	ldr	r3, [r7, #12]
 8020cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020cd4:	683b      	ldr	r3, [r7, #0]
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	021b      	lsls	r3, r3, #8
 8020cda:	68fa      	ldr	r2, [r7, #12]
 8020cdc:	4313      	orrs	r3, r2
 8020cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020ce0:	693b      	ldr	r3, [r7, #16]
 8020ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020ce8:	683b      	ldr	r3, [r7, #0]
 8020cea:	689b      	ldr	r3, [r3, #8]
 8020cec:	031b      	lsls	r3, r3, #12
 8020cee:	693a      	ldr	r2, [r7, #16]
 8020cf0:	4313      	orrs	r3, r2
 8020cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020cf4:	687b      	ldr	r3, [r7, #4]
 8020cf6:	4a18      	ldr	r2, [pc, #96]	; (8020d58 <TIM_OC4_SetConfig+0xbc>)
 8020cf8:	4293      	cmp	r3, r2
 8020cfa:	d00f      	beq.n	8020d1c <TIM_OC4_SetConfig+0x80>
 8020cfc:	687b      	ldr	r3, [r7, #4]
 8020cfe:	4a17      	ldr	r2, [pc, #92]	; (8020d5c <TIM_OC4_SetConfig+0xc0>)
 8020d00:	4293      	cmp	r3, r2
 8020d02:	d00b      	beq.n	8020d1c <TIM_OC4_SetConfig+0x80>
 8020d04:	687b      	ldr	r3, [r7, #4]
 8020d06:	4a16      	ldr	r2, [pc, #88]	; (8020d60 <TIM_OC4_SetConfig+0xc4>)
 8020d08:	4293      	cmp	r3, r2
 8020d0a:	d007      	beq.n	8020d1c <TIM_OC4_SetConfig+0x80>
 8020d0c:	687b      	ldr	r3, [r7, #4]
 8020d0e:	4a15      	ldr	r2, [pc, #84]	; (8020d64 <TIM_OC4_SetConfig+0xc8>)
 8020d10:	4293      	cmp	r3, r2
 8020d12:	d003      	beq.n	8020d1c <TIM_OC4_SetConfig+0x80>
 8020d14:	687b      	ldr	r3, [r7, #4]
 8020d16:	4a14      	ldr	r2, [pc, #80]	; (8020d68 <TIM_OC4_SetConfig+0xcc>)
 8020d18:	4293      	cmp	r3, r2
 8020d1a:	d109      	bne.n	8020d30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020d1c:	697b      	ldr	r3, [r7, #20]
 8020d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020d24:	683b      	ldr	r3, [r7, #0]
 8020d26:	695b      	ldr	r3, [r3, #20]
 8020d28:	019b      	lsls	r3, r3, #6
 8020d2a:	697a      	ldr	r2, [r7, #20]
 8020d2c:	4313      	orrs	r3, r2
 8020d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	697a      	ldr	r2, [r7, #20]
 8020d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	68fa      	ldr	r2, [r7, #12]
 8020d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020d3c:	683b      	ldr	r3, [r7, #0]
 8020d3e:	685a      	ldr	r2, [r3, #4]
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	693a      	ldr	r2, [r7, #16]
 8020d48:	621a      	str	r2, [r3, #32]
}
 8020d4a:	bf00      	nop
 8020d4c:	371c      	adds	r7, #28
 8020d4e:	46bd      	mov	sp, r7
 8020d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d54:	4770      	bx	lr
 8020d56:	bf00      	nop
 8020d58:	40010000 	.word	0x40010000
 8020d5c:	40010400 	.word	0x40010400
 8020d60:	40014000 	.word	0x40014000
 8020d64:	40014400 	.word	0x40014400
 8020d68:	40014800 	.word	0x40014800

08020d6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8020d6c:	b480      	push	{r7}
 8020d6e:	b087      	sub	sp, #28
 8020d70:	af00      	add	r7, sp, #0
 8020d72:	6078      	str	r0, [r7, #4]
 8020d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	6a1b      	ldr	r3, [r3, #32]
 8020d7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	6a1b      	ldr	r3, [r3, #32]
 8020d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020d88:	687b      	ldr	r3, [r7, #4]
 8020d8a:	685b      	ldr	r3, [r3, #4]
 8020d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020d8e:	687b      	ldr	r3, [r7, #4]
 8020d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8020d94:	68fb      	ldr	r3, [r7, #12]
 8020d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020d9c:	683b      	ldr	r3, [r7, #0]
 8020d9e:	681b      	ldr	r3, [r3, #0]
 8020da0:	68fa      	ldr	r2, [r7, #12]
 8020da2:	4313      	orrs	r3, r2
 8020da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8020da6:	693b      	ldr	r3, [r7, #16]
 8020da8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8020dac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8020dae:	683b      	ldr	r3, [r7, #0]
 8020db0:	689b      	ldr	r3, [r3, #8]
 8020db2:	041b      	lsls	r3, r3, #16
 8020db4:	693a      	ldr	r2, [r7, #16]
 8020db6:	4313      	orrs	r3, r2
 8020db8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020dba:	687b      	ldr	r3, [r7, #4]
 8020dbc:	4a17      	ldr	r2, [pc, #92]	; (8020e1c <TIM_OC5_SetConfig+0xb0>)
 8020dbe:	4293      	cmp	r3, r2
 8020dc0:	d00f      	beq.n	8020de2 <TIM_OC5_SetConfig+0x76>
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	4a16      	ldr	r2, [pc, #88]	; (8020e20 <TIM_OC5_SetConfig+0xb4>)
 8020dc6:	4293      	cmp	r3, r2
 8020dc8:	d00b      	beq.n	8020de2 <TIM_OC5_SetConfig+0x76>
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	4a15      	ldr	r2, [pc, #84]	; (8020e24 <TIM_OC5_SetConfig+0xb8>)
 8020dce:	4293      	cmp	r3, r2
 8020dd0:	d007      	beq.n	8020de2 <TIM_OC5_SetConfig+0x76>
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	4a14      	ldr	r2, [pc, #80]	; (8020e28 <TIM_OC5_SetConfig+0xbc>)
 8020dd6:	4293      	cmp	r3, r2
 8020dd8:	d003      	beq.n	8020de2 <TIM_OC5_SetConfig+0x76>
 8020dda:	687b      	ldr	r3, [r7, #4]
 8020ddc:	4a13      	ldr	r2, [pc, #76]	; (8020e2c <TIM_OC5_SetConfig+0xc0>)
 8020dde:	4293      	cmp	r3, r2
 8020de0:	d109      	bne.n	8020df6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8020de2:	697b      	ldr	r3, [r7, #20]
 8020de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020de8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8020dea:	683b      	ldr	r3, [r7, #0]
 8020dec:	695b      	ldr	r3, [r3, #20]
 8020dee:	021b      	lsls	r3, r3, #8
 8020df0:	697a      	ldr	r2, [r7, #20]
 8020df2:	4313      	orrs	r3, r2
 8020df4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	697a      	ldr	r2, [r7, #20]
 8020dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	68fa      	ldr	r2, [r7, #12]
 8020e00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020e02:	683b      	ldr	r3, [r7, #0]
 8020e04:	685a      	ldr	r2, [r3, #4]
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020e0a:	687b      	ldr	r3, [r7, #4]
 8020e0c:	693a      	ldr	r2, [r7, #16]
 8020e0e:	621a      	str	r2, [r3, #32]
}
 8020e10:	bf00      	nop
 8020e12:	371c      	adds	r7, #28
 8020e14:	46bd      	mov	sp, r7
 8020e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e1a:	4770      	bx	lr
 8020e1c:	40010000 	.word	0x40010000
 8020e20:	40010400 	.word	0x40010400
 8020e24:	40014000 	.word	0x40014000
 8020e28:	40014400 	.word	0x40014400
 8020e2c:	40014800 	.word	0x40014800

08020e30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8020e30:	b480      	push	{r7}
 8020e32:	b087      	sub	sp, #28
 8020e34:	af00      	add	r7, sp, #0
 8020e36:	6078      	str	r0, [r7, #4]
 8020e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020e3a:	687b      	ldr	r3, [r7, #4]
 8020e3c:	6a1b      	ldr	r3, [r3, #32]
 8020e3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	6a1b      	ldr	r3, [r3, #32]
 8020e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	685b      	ldr	r3, [r3, #4]
 8020e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8020e58:	68fb      	ldr	r3, [r7, #12]
 8020e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020e60:	683b      	ldr	r3, [r7, #0]
 8020e62:	681b      	ldr	r3, [r3, #0]
 8020e64:	021b      	lsls	r3, r3, #8
 8020e66:	68fa      	ldr	r2, [r7, #12]
 8020e68:	4313      	orrs	r3, r2
 8020e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8020e6c:	693b      	ldr	r3, [r7, #16]
 8020e6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8020e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8020e74:	683b      	ldr	r3, [r7, #0]
 8020e76:	689b      	ldr	r3, [r3, #8]
 8020e78:	051b      	lsls	r3, r3, #20
 8020e7a:	693a      	ldr	r2, [r7, #16]
 8020e7c:	4313      	orrs	r3, r2
 8020e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	4a18      	ldr	r2, [pc, #96]	; (8020ee4 <TIM_OC6_SetConfig+0xb4>)
 8020e84:	4293      	cmp	r3, r2
 8020e86:	d00f      	beq.n	8020ea8 <TIM_OC6_SetConfig+0x78>
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	4a17      	ldr	r2, [pc, #92]	; (8020ee8 <TIM_OC6_SetConfig+0xb8>)
 8020e8c:	4293      	cmp	r3, r2
 8020e8e:	d00b      	beq.n	8020ea8 <TIM_OC6_SetConfig+0x78>
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	4a16      	ldr	r2, [pc, #88]	; (8020eec <TIM_OC6_SetConfig+0xbc>)
 8020e94:	4293      	cmp	r3, r2
 8020e96:	d007      	beq.n	8020ea8 <TIM_OC6_SetConfig+0x78>
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	4a15      	ldr	r2, [pc, #84]	; (8020ef0 <TIM_OC6_SetConfig+0xc0>)
 8020e9c:	4293      	cmp	r3, r2
 8020e9e:	d003      	beq.n	8020ea8 <TIM_OC6_SetConfig+0x78>
 8020ea0:	687b      	ldr	r3, [r7, #4]
 8020ea2:	4a14      	ldr	r2, [pc, #80]	; (8020ef4 <TIM_OC6_SetConfig+0xc4>)
 8020ea4:	4293      	cmp	r3, r2
 8020ea6:	d109      	bne.n	8020ebc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8020ea8:	697b      	ldr	r3, [r7, #20]
 8020eaa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8020eae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8020eb0:	683b      	ldr	r3, [r7, #0]
 8020eb2:	695b      	ldr	r3, [r3, #20]
 8020eb4:	029b      	lsls	r3, r3, #10
 8020eb6:	697a      	ldr	r2, [r7, #20]
 8020eb8:	4313      	orrs	r3, r2
 8020eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	697a      	ldr	r2, [r7, #20]
 8020ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020ec2:	687b      	ldr	r3, [r7, #4]
 8020ec4:	68fa      	ldr	r2, [r7, #12]
 8020ec6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8020ec8:	683b      	ldr	r3, [r7, #0]
 8020eca:	685a      	ldr	r2, [r3, #4]
 8020ecc:	687b      	ldr	r3, [r7, #4]
 8020ece:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	693a      	ldr	r2, [r7, #16]
 8020ed4:	621a      	str	r2, [r3, #32]
}
 8020ed6:	bf00      	nop
 8020ed8:	371c      	adds	r7, #28
 8020eda:	46bd      	mov	sp, r7
 8020edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee0:	4770      	bx	lr
 8020ee2:	bf00      	nop
 8020ee4:	40010000 	.word	0x40010000
 8020ee8:	40010400 	.word	0x40010400
 8020eec:	40014000 	.word	0x40014000
 8020ef0:	40014400 	.word	0x40014400
 8020ef4:	40014800 	.word	0x40014800

08020ef8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8020ef8:	b480      	push	{r7}
 8020efa:	b087      	sub	sp, #28
 8020efc:	af00      	add	r7, sp, #0
 8020efe:	60f8      	str	r0, [r7, #12]
 8020f00:	60b9      	str	r1, [r7, #8]
 8020f02:	607a      	str	r2, [r7, #4]
 8020f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020f06:	68fb      	ldr	r3, [r7, #12]
 8020f08:	6a1b      	ldr	r3, [r3, #32]
 8020f0a:	f023 0201 	bic.w	r2, r3, #1
 8020f0e:	68fb      	ldr	r3, [r7, #12]
 8020f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020f12:	68fb      	ldr	r3, [r7, #12]
 8020f14:	699b      	ldr	r3, [r3, #24]
 8020f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020f18:	68fb      	ldr	r3, [r7, #12]
 8020f1a:	6a1b      	ldr	r3, [r3, #32]
 8020f1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8020f1e:	68fb      	ldr	r3, [r7, #12]
 8020f20:	4a28      	ldr	r2, [pc, #160]	; (8020fc4 <TIM_TI1_SetConfig+0xcc>)
 8020f22:	4293      	cmp	r3, r2
 8020f24:	d01b      	beq.n	8020f5e <TIM_TI1_SetConfig+0x66>
 8020f26:	68fb      	ldr	r3, [r7, #12]
 8020f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020f2c:	d017      	beq.n	8020f5e <TIM_TI1_SetConfig+0x66>
 8020f2e:	68fb      	ldr	r3, [r7, #12]
 8020f30:	4a25      	ldr	r2, [pc, #148]	; (8020fc8 <TIM_TI1_SetConfig+0xd0>)
 8020f32:	4293      	cmp	r3, r2
 8020f34:	d013      	beq.n	8020f5e <TIM_TI1_SetConfig+0x66>
 8020f36:	68fb      	ldr	r3, [r7, #12]
 8020f38:	4a24      	ldr	r2, [pc, #144]	; (8020fcc <TIM_TI1_SetConfig+0xd4>)
 8020f3a:	4293      	cmp	r3, r2
 8020f3c:	d00f      	beq.n	8020f5e <TIM_TI1_SetConfig+0x66>
 8020f3e:	68fb      	ldr	r3, [r7, #12]
 8020f40:	4a23      	ldr	r2, [pc, #140]	; (8020fd0 <TIM_TI1_SetConfig+0xd8>)
 8020f42:	4293      	cmp	r3, r2
 8020f44:	d00b      	beq.n	8020f5e <TIM_TI1_SetConfig+0x66>
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	4a22      	ldr	r2, [pc, #136]	; (8020fd4 <TIM_TI1_SetConfig+0xdc>)
 8020f4a:	4293      	cmp	r3, r2
 8020f4c:	d007      	beq.n	8020f5e <TIM_TI1_SetConfig+0x66>
 8020f4e:	68fb      	ldr	r3, [r7, #12]
 8020f50:	4a21      	ldr	r2, [pc, #132]	; (8020fd8 <TIM_TI1_SetConfig+0xe0>)
 8020f52:	4293      	cmp	r3, r2
 8020f54:	d003      	beq.n	8020f5e <TIM_TI1_SetConfig+0x66>
 8020f56:	68fb      	ldr	r3, [r7, #12]
 8020f58:	4a20      	ldr	r2, [pc, #128]	; (8020fdc <TIM_TI1_SetConfig+0xe4>)
 8020f5a:	4293      	cmp	r3, r2
 8020f5c:	d101      	bne.n	8020f62 <TIM_TI1_SetConfig+0x6a>
 8020f5e:	2301      	movs	r3, #1
 8020f60:	e000      	b.n	8020f64 <TIM_TI1_SetConfig+0x6c>
 8020f62:	2300      	movs	r3, #0
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	d008      	beq.n	8020f7a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8020f68:	697b      	ldr	r3, [r7, #20]
 8020f6a:	f023 0303 	bic.w	r3, r3, #3
 8020f6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8020f70:	697a      	ldr	r2, [r7, #20]
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	4313      	orrs	r3, r2
 8020f76:	617b      	str	r3, [r7, #20]
 8020f78:	e003      	b.n	8020f82 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8020f7a:	697b      	ldr	r3, [r7, #20]
 8020f7c:	f043 0301 	orr.w	r3, r3, #1
 8020f80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020f82:	697b      	ldr	r3, [r7, #20]
 8020f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	011b      	lsls	r3, r3, #4
 8020f8e:	b2db      	uxtb	r3, r3
 8020f90:	697a      	ldr	r2, [r7, #20]
 8020f92:	4313      	orrs	r3, r2
 8020f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020f96:	693b      	ldr	r3, [r7, #16]
 8020f98:	f023 030a 	bic.w	r3, r3, #10
 8020f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8020f9e:	68bb      	ldr	r3, [r7, #8]
 8020fa0:	f003 030a 	and.w	r3, r3, #10
 8020fa4:	693a      	ldr	r2, [r7, #16]
 8020fa6:	4313      	orrs	r3, r2
 8020fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020faa:	68fb      	ldr	r3, [r7, #12]
 8020fac:	697a      	ldr	r2, [r7, #20]
 8020fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020fb0:	68fb      	ldr	r3, [r7, #12]
 8020fb2:	693a      	ldr	r2, [r7, #16]
 8020fb4:	621a      	str	r2, [r3, #32]
}
 8020fb6:	bf00      	nop
 8020fb8:	371c      	adds	r7, #28
 8020fba:	46bd      	mov	sp, r7
 8020fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fc0:	4770      	bx	lr
 8020fc2:	bf00      	nop
 8020fc4:	40010000 	.word	0x40010000
 8020fc8:	40000400 	.word	0x40000400
 8020fcc:	40000800 	.word	0x40000800
 8020fd0:	40000c00 	.word	0x40000c00
 8020fd4:	40010400 	.word	0x40010400
 8020fd8:	40001800 	.word	0x40001800
 8020fdc:	40014000 	.word	0x40014000

08020fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020fe0:	b480      	push	{r7}
 8020fe2:	b087      	sub	sp, #28
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	60f8      	str	r0, [r7, #12]
 8020fe8:	60b9      	str	r1, [r7, #8]
 8020fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020fec:	68fb      	ldr	r3, [r7, #12]
 8020fee:	6a1b      	ldr	r3, [r3, #32]
 8020ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020ff2:	68fb      	ldr	r3, [r7, #12]
 8020ff4:	6a1b      	ldr	r3, [r3, #32]
 8020ff6:	f023 0201 	bic.w	r2, r3, #1
 8020ffa:	68fb      	ldr	r3, [r7, #12]
 8020ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020ffe:	68fb      	ldr	r3, [r7, #12]
 8021000:	699b      	ldr	r3, [r3, #24]
 8021002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8021004:	693b      	ldr	r3, [r7, #16]
 8021006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802100a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	011b      	lsls	r3, r3, #4
 8021010:	693a      	ldr	r2, [r7, #16]
 8021012:	4313      	orrs	r3, r2
 8021014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8021016:	697b      	ldr	r3, [r7, #20]
 8021018:	f023 030a 	bic.w	r3, r3, #10
 802101c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802101e:	697a      	ldr	r2, [r7, #20]
 8021020:	68bb      	ldr	r3, [r7, #8]
 8021022:	4313      	orrs	r3, r2
 8021024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8021026:	68fb      	ldr	r3, [r7, #12]
 8021028:	693a      	ldr	r2, [r7, #16]
 802102a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802102c:	68fb      	ldr	r3, [r7, #12]
 802102e:	697a      	ldr	r2, [r7, #20]
 8021030:	621a      	str	r2, [r3, #32]
}
 8021032:	bf00      	nop
 8021034:	371c      	adds	r7, #28
 8021036:	46bd      	mov	sp, r7
 8021038:	f85d 7b04 	ldr.w	r7, [sp], #4
 802103c:	4770      	bx	lr

0802103e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 802103e:	b480      	push	{r7}
 8021040:	b087      	sub	sp, #28
 8021042:	af00      	add	r7, sp, #0
 8021044:	60f8      	str	r0, [r7, #12]
 8021046:	60b9      	str	r1, [r7, #8]
 8021048:	607a      	str	r2, [r7, #4]
 802104a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802104c:	68fb      	ldr	r3, [r7, #12]
 802104e:	6a1b      	ldr	r3, [r3, #32]
 8021050:	f023 0210 	bic.w	r2, r3, #16
 8021054:	68fb      	ldr	r3, [r7, #12]
 8021056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021058:	68fb      	ldr	r3, [r7, #12]
 802105a:	699b      	ldr	r3, [r3, #24]
 802105c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802105e:	68fb      	ldr	r3, [r7, #12]
 8021060:	6a1b      	ldr	r3, [r3, #32]
 8021062:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8021064:	697b      	ldr	r3, [r7, #20]
 8021066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802106a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 802106c:	687b      	ldr	r3, [r7, #4]
 802106e:	021b      	lsls	r3, r3, #8
 8021070:	697a      	ldr	r2, [r7, #20]
 8021072:	4313      	orrs	r3, r2
 8021074:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8021076:	697b      	ldr	r3, [r7, #20]
 8021078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802107c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 802107e:	683b      	ldr	r3, [r7, #0]
 8021080:	031b      	lsls	r3, r3, #12
 8021082:	b29b      	uxth	r3, r3
 8021084:	697a      	ldr	r2, [r7, #20]
 8021086:	4313      	orrs	r3, r2
 8021088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802108a:	693b      	ldr	r3, [r7, #16]
 802108c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8021090:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8021092:	68bb      	ldr	r3, [r7, #8]
 8021094:	011b      	lsls	r3, r3, #4
 8021096:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 802109a:	693a      	ldr	r2, [r7, #16]
 802109c:	4313      	orrs	r3, r2
 802109e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80210a0:	68fb      	ldr	r3, [r7, #12]
 80210a2:	697a      	ldr	r2, [r7, #20]
 80210a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80210a6:	68fb      	ldr	r3, [r7, #12]
 80210a8:	693a      	ldr	r2, [r7, #16]
 80210aa:	621a      	str	r2, [r3, #32]
}
 80210ac:	bf00      	nop
 80210ae:	371c      	adds	r7, #28
 80210b0:	46bd      	mov	sp, r7
 80210b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210b6:	4770      	bx	lr

080210b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80210b8:	b480      	push	{r7}
 80210ba:	b087      	sub	sp, #28
 80210bc:	af00      	add	r7, sp, #0
 80210be:	60f8      	str	r0, [r7, #12]
 80210c0:	60b9      	str	r1, [r7, #8]
 80210c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80210c4:	68fb      	ldr	r3, [r7, #12]
 80210c6:	6a1b      	ldr	r3, [r3, #32]
 80210c8:	f023 0210 	bic.w	r2, r3, #16
 80210cc:	68fb      	ldr	r3, [r7, #12]
 80210ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80210d0:	68fb      	ldr	r3, [r7, #12]
 80210d2:	699b      	ldr	r3, [r3, #24]
 80210d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80210d6:	68fb      	ldr	r3, [r7, #12]
 80210d8:	6a1b      	ldr	r3, [r3, #32]
 80210da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80210dc:	697b      	ldr	r3, [r7, #20]
 80210de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80210e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	031b      	lsls	r3, r3, #12
 80210e8:	697a      	ldr	r2, [r7, #20]
 80210ea:	4313      	orrs	r3, r2
 80210ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80210ee:	693b      	ldr	r3, [r7, #16]
 80210f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80210f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80210f6:	68bb      	ldr	r3, [r7, #8]
 80210f8:	011b      	lsls	r3, r3, #4
 80210fa:	693a      	ldr	r2, [r7, #16]
 80210fc:	4313      	orrs	r3, r2
 80210fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021100:	68fb      	ldr	r3, [r7, #12]
 8021102:	697a      	ldr	r2, [r7, #20]
 8021104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021106:	68fb      	ldr	r3, [r7, #12]
 8021108:	693a      	ldr	r2, [r7, #16]
 802110a:	621a      	str	r2, [r3, #32]
}
 802110c:	bf00      	nop
 802110e:	371c      	adds	r7, #28
 8021110:	46bd      	mov	sp, r7
 8021112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021116:	4770      	bx	lr

08021118 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8021118:	b480      	push	{r7}
 802111a:	b087      	sub	sp, #28
 802111c:	af00      	add	r7, sp, #0
 802111e:	60f8      	str	r0, [r7, #12]
 8021120:	60b9      	str	r1, [r7, #8]
 8021122:	607a      	str	r2, [r7, #4]
 8021124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8021126:	68fb      	ldr	r3, [r7, #12]
 8021128:	6a1b      	ldr	r3, [r3, #32]
 802112a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802112e:	68fb      	ldr	r3, [r7, #12]
 8021130:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8021132:	68fb      	ldr	r3, [r7, #12]
 8021134:	69db      	ldr	r3, [r3, #28]
 8021136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8021138:	68fb      	ldr	r3, [r7, #12]
 802113a:	6a1b      	ldr	r3, [r3, #32]
 802113c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 802113e:	697b      	ldr	r3, [r7, #20]
 8021140:	f023 0303 	bic.w	r3, r3, #3
 8021144:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8021146:	697a      	ldr	r2, [r7, #20]
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	4313      	orrs	r3, r2
 802114c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 802114e:	697b      	ldr	r3, [r7, #20]
 8021150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8021156:	683b      	ldr	r3, [r7, #0]
 8021158:	011b      	lsls	r3, r3, #4
 802115a:	b2db      	uxtb	r3, r3
 802115c:	697a      	ldr	r2, [r7, #20]
 802115e:	4313      	orrs	r3, r2
 8021160:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8021162:	693b      	ldr	r3, [r7, #16]
 8021164:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8021168:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 802116a:	68bb      	ldr	r3, [r7, #8]
 802116c:	021b      	lsls	r3, r3, #8
 802116e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8021172:	693a      	ldr	r2, [r7, #16]
 8021174:	4313      	orrs	r3, r2
 8021176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8021178:	68fb      	ldr	r3, [r7, #12]
 802117a:	697a      	ldr	r2, [r7, #20]
 802117c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 802117e:	68fb      	ldr	r3, [r7, #12]
 8021180:	693a      	ldr	r2, [r7, #16]
 8021182:	621a      	str	r2, [r3, #32]
}
 8021184:	bf00      	nop
 8021186:	371c      	adds	r7, #28
 8021188:	46bd      	mov	sp, r7
 802118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802118e:	4770      	bx	lr

08021190 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8021190:	b480      	push	{r7}
 8021192:	b087      	sub	sp, #28
 8021194:	af00      	add	r7, sp, #0
 8021196:	60f8      	str	r0, [r7, #12]
 8021198:	60b9      	str	r1, [r7, #8]
 802119a:	607a      	str	r2, [r7, #4]
 802119c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802119e:	68fb      	ldr	r3, [r7, #12]
 80211a0:	6a1b      	ldr	r3, [r3, #32]
 80211a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80211a6:	68fb      	ldr	r3, [r7, #12]
 80211a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80211aa:	68fb      	ldr	r3, [r7, #12]
 80211ac:	69db      	ldr	r3, [r3, #28]
 80211ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80211b0:	68fb      	ldr	r3, [r7, #12]
 80211b2:	6a1b      	ldr	r3, [r3, #32]
 80211b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80211b6:	697b      	ldr	r3, [r7, #20]
 80211b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80211bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	021b      	lsls	r3, r3, #8
 80211c2:	697a      	ldr	r2, [r7, #20]
 80211c4:	4313      	orrs	r3, r2
 80211c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80211c8:	697b      	ldr	r3, [r7, #20]
 80211ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80211ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80211d0:	683b      	ldr	r3, [r7, #0]
 80211d2:	031b      	lsls	r3, r3, #12
 80211d4:	b29b      	uxth	r3, r3
 80211d6:	697a      	ldr	r2, [r7, #20]
 80211d8:	4313      	orrs	r3, r2
 80211da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80211dc:	693b      	ldr	r3, [r7, #16]
 80211de:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80211e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80211e4:	68bb      	ldr	r3, [r7, #8]
 80211e6:	031b      	lsls	r3, r3, #12
 80211e8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80211ec:	693a      	ldr	r2, [r7, #16]
 80211ee:	4313      	orrs	r3, r2
 80211f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80211f2:	68fb      	ldr	r3, [r7, #12]
 80211f4:	697a      	ldr	r2, [r7, #20]
 80211f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80211f8:	68fb      	ldr	r3, [r7, #12]
 80211fa:	693a      	ldr	r2, [r7, #16]
 80211fc:	621a      	str	r2, [r3, #32]
}
 80211fe:	bf00      	nop
 8021200:	371c      	adds	r7, #28
 8021202:	46bd      	mov	sp, r7
 8021204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021208:	4770      	bx	lr
	...

0802120c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802120c:	b480      	push	{r7}
 802120e:	b085      	sub	sp, #20
 8021210:	af00      	add	r7, sp, #0
 8021212:	6078      	str	r0, [r7, #4]
 8021214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	689b      	ldr	r3, [r3, #8]
 802121a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802121c:	68fa      	ldr	r2, [r7, #12]
 802121e:	4b09      	ldr	r3, [pc, #36]	; (8021244 <TIM_ITRx_SetConfig+0x38>)
 8021220:	4013      	ands	r3, r2
 8021222:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8021224:	683a      	ldr	r2, [r7, #0]
 8021226:	68fb      	ldr	r3, [r7, #12]
 8021228:	4313      	orrs	r3, r2
 802122a:	f043 0307 	orr.w	r3, r3, #7
 802122e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021230:	687b      	ldr	r3, [r7, #4]
 8021232:	68fa      	ldr	r2, [r7, #12]
 8021234:	609a      	str	r2, [r3, #8]
}
 8021236:	bf00      	nop
 8021238:	3714      	adds	r7, #20
 802123a:	46bd      	mov	sp, r7
 802123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021240:	4770      	bx	lr
 8021242:	bf00      	nop
 8021244:	ffcfff8f 	.word	0xffcfff8f

08021248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8021248:	b480      	push	{r7}
 802124a:	b087      	sub	sp, #28
 802124c:	af00      	add	r7, sp, #0
 802124e:	60f8      	str	r0, [r7, #12]
 8021250:	60b9      	str	r1, [r7, #8]
 8021252:	607a      	str	r2, [r7, #4]
 8021254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8021256:	68fb      	ldr	r3, [r7, #12]
 8021258:	689b      	ldr	r3, [r3, #8]
 802125a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802125c:	697b      	ldr	r3, [r7, #20]
 802125e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8021264:	683b      	ldr	r3, [r7, #0]
 8021266:	021a      	lsls	r2, r3, #8
 8021268:	687b      	ldr	r3, [r7, #4]
 802126a:	431a      	orrs	r2, r3
 802126c:	68bb      	ldr	r3, [r7, #8]
 802126e:	4313      	orrs	r3, r2
 8021270:	697a      	ldr	r2, [r7, #20]
 8021272:	4313      	orrs	r3, r2
 8021274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021276:	68fb      	ldr	r3, [r7, #12]
 8021278:	697a      	ldr	r2, [r7, #20]
 802127a:	609a      	str	r2, [r3, #8]
}
 802127c:	bf00      	nop
 802127e:	371c      	adds	r7, #28
 8021280:	46bd      	mov	sp, r7
 8021282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021286:	4770      	bx	lr

08021288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8021288:	b480      	push	{r7}
 802128a:	b087      	sub	sp, #28
 802128c:	af00      	add	r7, sp, #0
 802128e:	60f8      	str	r0, [r7, #12]
 8021290:	60b9      	str	r1, [r7, #8]
 8021292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8021294:	68bb      	ldr	r3, [r7, #8]
 8021296:	f003 031f 	and.w	r3, r3, #31
 802129a:	2201      	movs	r2, #1
 802129c:	fa02 f303 	lsl.w	r3, r2, r3
 80212a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80212a2:	68fb      	ldr	r3, [r7, #12]
 80212a4:	6a1a      	ldr	r2, [r3, #32]
 80212a6:	697b      	ldr	r3, [r7, #20]
 80212a8:	43db      	mvns	r3, r3
 80212aa:	401a      	ands	r2, r3
 80212ac:	68fb      	ldr	r3, [r7, #12]
 80212ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80212b0:	68fb      	ldr	r3, [r7, #12]
 80212b2:	6a1a      	ldr	r2, [r3, #32]
 80212b4:	68bb      	ldr	r3, [r7, #8]
 80212b6:	f003 031f 	and.w	r3, r3, #31
 80212ba:	6879      	ldr	r1, [r7, #4]
 80212bc:	fa01 f303 	lsl.w	r3, r1, r3
 80212c0:	431a      	orrs	r2, r3
 80212c2:	68fb      	ldr	r3, [r7, #12]
 80212c4:	621a      	str	r2, [r3, #32]
}
 80212c6:	bf00      	nop
 80212c8:	371c      	adds	r7, #28
 80212ca:	46bd      	mov	sp, r7
 80212cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212d0:	4770      	bx	lr
	...

080212d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80212d4:	b480      	push	{r7}
 80212d6:	b085      	sub	sp, #20
 80212d8:	af00      	add	r7, sp, #0
 80212da:	6078      	str	r0, [r7, #4]
 80212dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80212de:	687b      	ldr	r3, [r7, #4]
 80212e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80212e4:	2b01      	cmp	r3, #1
 80212e6:	d101      	bne.n	80212ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80212e8:	2302      	movs	r3, #2
 80212ea:	e068      	b.n	80213be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80212ec:	687b      	ldr	r3, [r7, #4]
 80212ee:	2201      	movs	r2, #1
 80212f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80212f4:	687b      	ldr	r3, [r7, #4]
 80212f6:	2202      	movs	r2, #2
 80212f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	685b      	ldr	r3, [r3, #4]
 8021302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	689b      	ldr	r3, [r3, #8]
 802130a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 802130c:	687b      	ldr	r3, [r7, #4]
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	4a2e      	ldr	r2, [pc, #184]	; (80213cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8021312:	4293      	cmp	r3, r2
 8021314:	d004      	beq.n	8021320 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	681b      	ldr	r3, [r3, #0]
 802131a:	4a2d      	ldr	r2, [pc, #180]	; (80213d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 802131c:	4293      	cmp	r3, r2
 802131e:	d108      	bne.n	8021332 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8021320:	68fb      	ldr	r3, [r7, #12]
 8021322:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8021326:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8021328:	683b      	ldr	r3, [r7, #0]
 802132a:	685b      	ldr	r3, [r3, #4]
 802132c:	68fa      	ldr	r2, [r7, #12]
 802132e:	4313      	orrs	r3, r2
 8021330:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8021332:	68fb      	ldr	r3, [r7, #12]
 8021334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021338:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802133a:	683b      	ldr	r3, [r7, #0]
 802133c:	681b      	ldr	r3, [r3, #0]
 802133e:	68fa      	ldr	r2, [r7, #12]
 8021340:	4313      	orrs	r3, r2
 8021342:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	68fa      	ldr	r2, [r7, #12]
 802134a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	681b      	ldr	r3, [r3, #0]
 8021350:	4a1e      	ldr	r2, [pc, #120]	; (80213cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8021352:	4293      	cmp	r3, r2
 8021354:	d01d      	beq.n	8021392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802135e:	d018      	beq.n	8021392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	681b      	ldr	r3, [r3, #0]
 8021364:	4a1b      	ldr	r2, [pc, #108]	; (80213d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8021366:	4293      	cmp	r3, r2
 8021368:	d013      	beq.n	8021392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 802136a:	687b      	ldr	r3, [r7, #4]
 802136c:	681b      	ldr	r3, [r3, #0]
 802136e:	4a1a      	ldr	r2, [pc, #104]	; (80213d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8021370:	4293      	cmp	r3, r2
 8021372:	d00e      	beq.n	8021392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	4a18      	ldr	r2, [pc, #96]	; (80213dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802137a:	4293      	cmp	r3, r2
 802137c:	d009      	beq.n	8021392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	4a13      	ldr	r2, [pc, #76]	; (80213d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8021384:	4293      	cmp	r3, r2
 8021386:	d004      	beq.n	8021392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	4a14      	ldr	r2, [pc, #80]	; (80213e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 802138e:	4293      	cmp	r3, r2
 8021390:	d10c      	bne.n	80213ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8021392:	68bb      	ldr	r3, [r7, #8]
 8021394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802139a:	683b      	ldr	r3, [r7, #0]
 802139c:	689b      	ldr	r3, [r3, #8]
 802139e:	68ba      	ldr	r2, [r7, #8]
 80213a0:	4313      	orrs	r3, r2
 80213a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	68ba      	ldr	r2, [r7, #8]
 80213aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80213ac:	687b      	ldr	r3, [r7, #4]
 80213ae:	2201      	movs	r2, #1
 80213b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	2200      	movs	r2, #0
 80213b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80213bc:	2300      	movs	r3, #0
}
 80213be:	4618      	mov	r0, r3
 80213c0:	3714      	adds	r7, #20
 80213c2:	46bd      	mov	sp, r7
 80213c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213c8:	4770      	bx	lr
 80213ca:	bf00      	nop
 80213cc:	40010000 	.word	0x40010000
 80213d0:	40010400 	.word	0x40010400
 80213d4:	40000400 	.word	0x40000400
 80213d8:	40000800 	.word	0x40000800
 80213dc:	40000c00 	.word	0x40000c00
 80213e0:	40001800 	.word	0x40001800

080213e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80213e4:	b480      	push	{r7}
 80213e6:	b085      	sub	sp, #20
 80213e8:	af00      	add	r7, sp, #0
 80213ea:	6078      	str	r0, [r7, #4]
 80213ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80213ee:	2300      	movs	r3, #0
 80213f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80213f2:	687b      	ldr	r3, [r7, #4]
 80213f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80213f8:	2b01      	cmp	r3, #1
 80213fa:	d101      	bne.n	8021400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80213fc:	2302      	movs	r3, #2
 80213fe:	e065      	b.n	80214cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	2201      	movs	r2, #1
 8021404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8021408:	68fb      	ldr	r3, [r7, #12]
 802140a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802140e:	683b      	ldr	r3, [r7, #0]
 8021410:	68db      	ldr	r3, [r3, #12]
 8021412:	4313      	orrs	r3, r2
 8021414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8021416:	68fb      	ldr	r3, [r7, #12]
 8021418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802141c:	683b      	ldr	r3, [r7, #0]
 802141e:	689b      	ldr	r3, [r3, #8]
 8021420:	4313      	orrs	r3, r2
 8021422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8021424:	68fb      	ldr	r3, [r7, #12]
 8021426:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802142a:	683b      	ldr	r3, [r7, #0]
 802142c:	685b      	ldr	r3, [r3, #4]
 802142e:	4313      	orrs	r3, r2
 8021430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8021432:	68fb      	ldr	r3, [r7, #12]
 8021434:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8021438:	683b      	ldr	r3, [r7, #0]
 802143a:	681b      	ldr	r3, [r3, #0]
 802143c:	4313      	orrs	r3, r2
 802143e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8021440:	68fb      	ldr	r3, [r7, #12]
 8021442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8021446:	683b      	ldr	r3, [r7, #0]
 8021448:	691b      	ldr	r3, [r3, #16]
 802144a:	4313      	orrs	r3, r2
 802144c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802144e:	68fb      	ldr	r3, [r7, #12]
 8021450:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8021454:	683b      	ldr	r3, [r7, #0]
 8021456:	695b      	ldr	r3, [r3, #20]
 8021458:	4313      	orrs	r3, r2
 802145a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802145c:	68fb      	ldr	r3, [r7, #12]
 802145e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8021462:	683b      	ldr	r3, [r7, #0]
 8021464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021466:	4313      	orrs	r3, r2
 8021468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 802146a:	68fb      	ldr	r3, [r7, #12]
 802146c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8021470:	683b      	ldr	r3, [r7, #0]
 8021472:	699b      	ldr	r3, [r3, #24]
 8021474:	041b      	lsls	r3, r3, #16
 8021476:	4313      	orrs	r3, r2
 8021478:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 802147a:	687b      	ldr	r3, [r7, #4]
 802147c:	681b      	ldr	r3, [r3, #0]
 802147e:	4a16      	ldr	r2, [pc, #88]	; (80214d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8021480:	4293      	cmp	r3, r2
 8021482:	d004      	beq.n	802148e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	681b      	ldr	r3, [r3, #0]
 8021488:	4a14      	ldr	r2, [pc, #80]	; (80214dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 802148a:	4293      	cmp	r3, r2
 802148c:	d115      	bne.n	80214ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 802148e:	68fb      	ldr	r3, [r7, #12]
 8021490:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8021494:	683b      	ldr	r3, [r7, #0]
 8021496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021498:	051b      	lsls	r3, r3, #20
 802149a:	4313      	orrs	r3, r2
 802149c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 802149e:	68fb      	ldr	r3, [r7, #12]
 80214a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80214a4:	683b      	ldr	r3, [r7, #0]
 80214a6:	69db      	ldr	r3, [r3, #28]
 80214a8:	4313      	orrs	r3, r2
 80214aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80214ac:	68fb      	ldr	r3, [r7, #12]
 80214ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80214b2:	683b      	ldr	r3, [r7, #0]
 80214b4:	6a1b      	ldr	r3, [r3, #32]
 80214b6:	4313      	orrs	r3, r2
 80214b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	681b      	ldr	r3, [r3, #0]
 80214be:	68fa      	ldr	r2, [r7, #12]
 80214c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	2200      	movs	r2, #0
 80214c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80214ca:	2300      	movs	r3, #0
}
 80214cc:	4618      	mov	r0, r3
 80214ce:	3714      	adds	r7, #20
 80214d0:	46bd      	mov	sp, r7
 80214d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214d6:	4770      	bx	lr
 80214d8:	40010000 	.word	0x40010000
 80214dc:	40010400 	.word	0x40010400

080214e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80214e0:	b480      	push	{r7}
 80214e2:	b083      	sub	sp, #12
 80214e4:	af00      	add	r7, sp, #0
 80214e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80214e8:	bf00      	nop
 80214ea:	370c      	adds	r7, #12
 80214ec:	46bd      	mov	sp, r7
 80214ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214f2:	4770      	bx	lr

080214f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80214f4:	b480      	push	{r7}
 80214f6:	b083      	sub	sp, #12
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80214fc:	bf00      	nop
 80214fe:	370c      	adds	r7, #12
 8021500:	46bd      	mov	sp, r7
 8021502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021506:	4770      	bx	lr

08021508 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8021508:	b480      	push	{r7}
 802150a:	b083      	sub	sp, #12
 802150c:	af00      	add	r7, sp, #0
 802150e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8021510:	bf00      	nop
 8021512:	370c      	adds	r7, #12
 8021514:	46bd      	mov	sp, r7
 8021516:	f85d 7b04 	ldr.w	r7, [sp], #4
 802151a:	4770      	bx	lr

0802151c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802151c:	b580      	push	{r7, lr}
 802151e:	b082      	sub	sp, #8
 8021520:	af00      	add	r7, sp, #0
 8021522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	2b00      	cmp	r3, #0
 8021528:	d101      	bne.n	802152e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802152a:	2301      	movs	r3, #1
 802152c:	e042      	b.n	80215b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021534:	2b00      	cmp	r3, #0
 8021536:	d106      	bne.n	8021546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	2200      	movs	r2, #0
 802153c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021540:	6878      	ldr	r0, [r7, #4]
 8021542:	f7f3 f96f 	bl	8014824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	2224      	movs	r2, #36	; 0x24
 802154a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	681b      	ldr	r3, [r3, #0]
 8021552:	681a      	ldr	r2, [r3, #0]
 8021554:	687b      	ldr	r3, [r7, #4]
 8021556:	681b      	ldr	r3, [r3, #0]
 8021558:	f022 0201 	bic.w	r2, r2, #1
 802155c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 802155e:	6878      	ldr	r0, [r7, #4]
 8021560:	f000 fae8 	bl	8021b34 <UART_SetConfig>
 8021564:	4603      	mov	r3, r0
 8021566:	2b01      	cmp	r3, #1
 8021568:	d101      	bne.n	802156e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 802156a:	2301      	movs	r3, #1
 802156c:	e022      	b.n	80215b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021572:	2b00      	cmp	r3, #0
 8021574:	d002      	beq.n	802157c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8021576:	6878      	ldr	r0, [r7, #4]
 8021578:	f001 f88c 	bl	8022694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	681b      	ldr	r3, [r3, #0]
 8021580:	685a      	ldr	r2, [r3, #4]
 8021582:	687b      	ldr	r3, [r7, #4]
 8021584:	681b      	ldr	r3, [r3, #0]
 8021586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802158a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	681b      	ldr	r3, [r3, #0]
 8021590:	689a      	ldr	r2, [r3, #8]
 8021592:	687b      	ldr	r3, [r7, #4]
 8021594:	681b      	ldr	r3, [r3, #0]
 8021596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802159a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	681b      	ldr	r3, [r3, #0]
 80215a0:	681a      	ldr	r2, [r3, #0]
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	f042 0201 	orr.w	r2, r2, #1
 80215aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80215ac:	6878      	ldr	r0, [r7, #4]
 80215ae:	f001 f913 	bl	80227d8 <UART_CheckIdleState>
 80215b2:	4603      	mov	r3, r0
}
 80215b4:	4618      	mov	r0, r3
 80215b6:	3708      	adds	r7, #8
 80215b8:	46bd      	mov	sp, r7
 80215ba:	bd80      	pop	{r7, pc}

080215bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b08a      	sub	sp, #40	; 0x28
 80215c0:	af02      	add	r7, sp, #8
 80215c2:	60f8      	str	r0, [r7, #12]
 80215c4:	60b9      	str	r1, [r7, #8]
 80215c6:	603b      	str	r3, [r7, #0]
 80215c8:	4613      	mov	r3, r2
 80215ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80215cc:	68fb      	ldr	r3, [r7, #12]
 80215ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80215d2:	2b20      	cmp	r3, #32
 80215d4:	f040 8083 	bne.w	80216de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80215d8:	68bb      	ldr	r3, [r7, #8]
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d002      	beq.n	80215e4 <HAL_UART_Transmit+0x28>
 80215de:	88fb      	ldrh	r3, [r7, #6]
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	d101      	bne.n	80215e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80215e4:	2301      	movs	r3, #1
 80215e6:	e07b      	b.n	80216e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80215e8:	68fb      	ldr	r3, [r7, #12]
 80215ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80215ee:	2b01      	cmp	r3, #1
 80215f0:	d101      	bne.n	80215f6 <HAL_UART_Transmit+0x3a>
 80215f2:	2302      	movs	r3, #2
 80215f4:	e074      	b.n	80216e0 <HAL_UART_Transmit+0x124>
 80215f6:	68fb      	ldr	r3, [r7, #12]
 80215f8:	2201      	movs	r2, #1
 80215fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80215fe:	68fb      	ldr	r3, [r7, #12]
 8021600:	2200      	movs	r2, #0
 8021602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8021606:	68fb      	ldr	r3, [r7, #12]
 8021608:	2221      	movs	r2, #33	; 0x21
 802160a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 802160e:	f7f3 fb71 	bl	8014cf4 <HAL_GetTick>
 8021612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8021614:	68fb      	ldr	r3, [r7, #12]
 8021616:	88fa      	ldrh	r2, [r7, #6]
 8021618:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 802161c:	68fb      	ldr	r3, [r7, #12]
 802161e:	88fa      	ldrh	r2, [r7, #6]
 8021620:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021624:	68fb      	ldr	r3, [r7, #12]
 8021626:	689b      	ldr	r3, [r3, #8]
 8021628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802162c:	d108      	bne.n	8021640 <HAL_UART_Transmit+0x84>
 802162e:	68fb      	ldr	r3, [r7, #12]
 8021630:	691b      	ldr	r3, [r3, #16]
 8021632:	2b00      	cmp	r3, #0
 8021634:	d104      	bne.n	8021640 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8021636:	2300      	movs	r3, #0
 8021638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 802163a:	68bb      	ldr	r3, [r7, #8]
 802163c:	61bb      	str	r3, [r7, #24]
 802163e:	e003      	b.n	8021648 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8021640:	68bb      	ldr	r3, [r7, #8]
 8021642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8021644:	2300      	movs	r3, #0
 8021646:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8021648:	68fb      	ldr	r3, [r7, #12]
 802164a:	2200      	movs	r2, #0
 802164c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8021650:	e02c      	b.n	80216ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021652:	683b      	ldr	r3, [r7, #0]
 8021654:	9300      	str	r3, [sp, #0]
 8021656:	697b      	ldr	r3, [r7, #20]
 8021658:	2200      	movs	r2, #0
 802165a:	2180      	movs	r1, #128	; 0x80
 802165c:	68f8      	ldr	r0, [r7, #12]
 802165e:	f001 f903 	bl	8022868 <UART_WaitOnFlagUntilTimeout>
 8021662:	4603      	mov	r3, r0
 8021664:	2b00      	cmp	r3, #0
 8021666:	d001      	beq.n	802166c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8021668:	2303      	movs	r3, #3
 802166a:	e039      	b.n	80216e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 802166c:	69fb      	ldr	r3, [r7, #28]
 802166e:	2b00      	cmp	r3, #0
 8021670:	d10b      	bne.n	802168a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8021672:	69bb      	ldr	r3, [r7, #24]
 8021674:	881b      	ldrh	r3, [r3, #0]
 8021676:	461a      	mov	r2, r3
 8021678:	68fb      	ldr	r3, [r7, #12]
 802167a:	681b      	ldr	r3, [r3, #0]
 802167c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021680:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8021682:	69bb      	ldr	r3, [r7, #24]
 8021684:	3302      	adds	r3, #2
 8021686:	61bb      	str	r3, [r7, #24]
 8021688:	e007      	b.n	802169a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 802168a:	69fb      	ldr	r3, [r7, #28]
 802168c:	781a      	ldrb	r2, [r3, #0]
 802168e:	68fb      	ldr	r3, [r7, #12]
 8021690:	681b      	ldr	r3, [r3, #0]
 8021692:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8021694:	69fb      	ldr	r3, [r7, #28]
 8021696:	3301      	adds	r3, #1
 8021698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802169a:	68fb      	ldr	r3, [r7, #12]
 802169c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80216a0:	b29b      	uxth	r3, r3
 80216a2:	3b01      	subs	r3, #1
 80216a4:	b29a      	uxth	r2, r3
 80216a6:	68fb      	ldr	r3, [r7, #12]
 80216a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80216ac:	68fb      	ldr	r3, [r7, #12]
 80216ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80216b2:	b29b      	uxth	r3, r3
 80216b4:	2b00      	cmp	r3, #0
 80216b6:	d1cc      	bne.n	8021652 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80216b8:	683b      	ldr	r3, [r7, #0]
 80216ba:	9300      	str	r3, [sp, #0]
 80216bc:	697b      	ldr	r3, [r7, #20]
 80216be:	2200      	movs	r2, #0
 80216c0:	2140      	movs	r1, #64	; 0x40
 80216c2:	68f8      	ldr	r0, [r7, #12]
 80216c4:	f001 f8d0 	bl	8022868 <UART_WaitOnFlagUntilTimeout>
 80216c8:	4603      	mov	r3, r0
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d001      	beq.n	80216d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80216ce:	2303      	movs	r3, #3
 80216d0:	e006      	b.n	80216e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80216d2:	68fb      	ldr	r3, [r7, #12]
 80216d4:	2220      	movs	r2, #32
 80216d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80216da:	2300      	movs	r3, #0
 80216dc:	e000      	b.n	80216e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80216de:	2302      	movs	r3, #2
  }
}
 80216e0:	4618      	mov	r0, r3
 80216e2:	3720      	adds	r7, #32
 80216e4:	46bd      	mov	sp, r7
 80216e6:	bd80      	pop	{r7, pc}

080216e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80216e8:	b580      	push	{r7, lr}
 80216ea:	b084      	sub	sp, #16
 80216ec:	af00      	add	r7, sp, #0
 80216ee:	60f8      	str	r0, [r7, #12]
 80216f0:	60b9      	str	r1, [r7, #8]
 80216f2:	4613      	mov	r3, r2
 80216f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80216f6:	68fb      	ldr	r3, [r7, #12]
 80216f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80216fc:	2b20      	cmp	r3, #32
 80216fe:	d170      	bne.n	80217e2 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8021700:	68bb      	ldr	r3, [r7, #8]
 8021702:	2b00      	cmp	r3, #0
 8021704:	d002      	beq.n	802170c <HAL_UART_Receive_DMA+0x24>
 8021706:	88fb      	ldrh	r3, [r7, #6]
 8021708:	2b00      	cmp	r3, #0
 802170a:	d101      	bne.n	8021710 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 802170c:	2301      	movs	r3, #1
 802170e:	e069      	b.n	80217e4 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8021710:	68fb      	ldr	r3, [r7, #12]
 8021712:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8021716:	2b01      	cmp	r3, #1
 8021718:	d101      	bne.n	802171e <HAL_UART_Receive_DMA+0x36>
 802171a:	2302      	movs	r3, #2
 802171c:	e062      	b.n	80217e4 <HAL_UART_Receive_DMA+0xfc>
 802171e:	68fb      	ldr	r3, [r7, #12]
 8021720:	2201      	movs	r2, #1
 8021722:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8021726:	68fb      	ldr	r3, [r7, #12]
 8021728:	68ba      	ldr	r2, [r7, #8]
 802172a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 802172c:	68fb      	ldr	r3, [r7, #12]
 802172e:	88fa      	ldrh	r2, [r7, #6]
 8021730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021734:	68fb      	ldr	r3, [r7, #12]
 8021736:	2200      	movs	r2, #0
 8021738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 802173c:	68fb      	ldr	r3, [r7, #12]
 802173e:	2222      	movs	r2, #34	; 0x22
 8021740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8021744:	68fb      	ldr	r3, [r7, #12]
 8021746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021748:	2b00      	cmp	r3, #0
 802174a:	d02c      	beq.n	80217a6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 802174c:	68fb      	ldr	r3, [r7, #12]
 802174e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021750:	4a26      	ldr	r2, [pc, #152]	; (80217ec <HAL_UART_Receive_DMA+0x104>)
 8021752:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8021754:	68fb      	ldr	r3, [r7, #12]
 8021756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021758:	4a25      	ldr	r2, [pc, #148]	; (80217f0 <HAL_UART_Receive_DMA+0x108>)
 802175a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 802175c:	68fb      	ldr	r3, [r7, #12]
 802175e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021760:	4a24      	ldr	r2, [pc, #144]	; (80217f4 <HAL_UART_Receive_DMA+0x10c>)
 8021762:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8021764:	68fb      	ldr	r3, [r7, #12]
 8021766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021768:	2200      	movs	r2, #0
 802176a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 802176c:	68fb      	ldr	r3, [r7, #12]
 802176e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8021770:	68fb      	ldr	r3, [r7, #12]
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	3324      	adds	r3, #36	; 0x24
 8021776:	4619      	mov	r1, r3
 8021778:	68fb      	ldr	r3, [r7, #12]
 802177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802177c:	461a      	mov	r2, r3
 802177e:	88fb      	ldrh	r3, [r7, #6]
 8021780:	f7f4 fe7c 	bl	801647c <HAL_DMA_Start_IT>
 8021784:	4603      	mov	r3, r0
 8021786:	2b00      	cmp	r3, #0
 8021788:	d00d      	beq.n	80217a6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 802178a:	68fb      	ldr	r3, [r7, #12]
 802178c:	2210      	movs	r2, #16
 802178e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8021792:	68fb      	ldr	r3, [r7, #12]
 8021794:	2200      	movs	r2, #0
 8021796:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 802179a:	68fb      	ldr	r3, [r7, #12]
 802179c:	2220      	movs	r2, #32
 802179e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80217a2:	2301      	movs	r3, #1
 80217a4:	e01e      	b.n	80217e4 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80217a6:	68fb      	ldr	r3, [r7, #12]
 80217a8:	2200      	movs	r2, #0
 80217aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80217ae:	68fb      	ldr	r3, [r7, #12]
 80217b0:	681b      	ldr	r3, [r3, #0]
 80217b2:	681a      	ldr	r2, [r3, #0]
 80217b4:	68fb      	ldr	r3, [r7, #12]
 80217b6:	681b      	ldr	r3, [r3, #0]
 80217b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80217bc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80217be:	68fb      	ldr	r3, [r7, #12]
 80217c0:	681b      	ldr	r3, [r3, #0]
 80217c2:	689a      	ldr	r2, [r3, #8]
 80217c4:	68fb      	ldr	r3, [r7, #12]
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	f042 0201 	orr.w	r2, r2, #1
 80217cc:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80217ce:	68fb      	ldr	r3, [r7, #12]
 80217d0:	681b      	ldr	r3, [r3, #0]
 80217d2:	689a      	ldr	r2, [r3, #8]
 80217d4:	68fb      	ldr	r3, [r7, #12]
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80217dc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80217de:	2300      	movs	r3, #0
 80217e0:	e000      	b.n	80217e4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80217e2:	2302      	movs	r3, #2
  }
}
 80217e4:	4618      	mov	r0, r3
 80217e6:	3710      	adds	r7, #16
 80217e8:	46bd      	mov	sp, r7
 80217ea:	bd80      	pop	{r7, pc}
 80217ec:	080229ed 	.word	0x080229ed
 80217f0:	08022a53 	.word	0x08022a53
 80217f4:	08022a6f 	.word	0x08022a6f

080217f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80217f8:	b580      	push	{r7, lr}
 80217fa:	b088      	sub	sp, #32
 80217fc:	af00      	add	r7, sp, #0
 80217fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	681b      	ldr	r3, [r3, #0]
 8021804:	69db      	ldr	r3, [r3, #28]
 8021806:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8021808:	687b      	ldr	r3, [r7, #4]
 802180a:	681b      	ldr	r3, [r3, #0]
 802180c:	681b      	ldr	r3, [r3, #0]
 802180e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	681b      	ldr	r3, [r3, #0]
 8021814:	689b      	ldr	r3, [r3, #8]
 8021816:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8021818:	69fa      	ldr	r2, [r7, #28]
 802181a:	f640 030f 	movw	r3, #2063	; 0x80f
 802181e:	4013      	ands	r3, r2
 8021820:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8021822:	693b      	ldr	r3, [r7, #16]
 8021824:	2b00      	cmp	r3, #0
 8021826:	d118      	bne.n	802185a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8021828:	69fb      	ldr	r3, [r7, #28]
 802182a:	f003 0320 	and.w	r3, r3, #32
 802182e:	2b00      	cmp	r3, #0
 8021830:	d013      	beq.n	802185a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8021832:	69bb      	ldr	r3, [r7, #24]
 8021834:	f003 0320 	and.w	r3, r3, #32
 8021838:	2b00      	cmp	r3, #0
 802183a:	d104      	bne.n	8021846 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 802183c:	697b      	ldr	r3, [r7, #20]
 802183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021842:	2b00      	cmp	r3, #0
 8021844:	d009      	beq.n	802185a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8021846:	687b      	ldr	r3, [r7, #4]
 8021848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802184a:	2b00      	cmp	r3, #0
 802184c:	f000 8145 	beq.w	8021ada <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021854:	6878      	ldr	r0, [r7, #4]
 8021856:	4798      	blx	r3
      }
      return;
 8021858:	e13f      	b.n	8021ada <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 802185a:	693b      	ldr	r3, [r7, #16]
 802185c:	2b00      	cmp	r3, #0
 802185e:	f000 80e8 	beq.w	8021a32 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8021862:	697a      	ldr	r2, [r7, #20]
 8021864:	4ba1      	ldr	r3, [pc, #644]	; (8021aec <HAL_UART_IRQHandler+0x2f4>)
 8021866:	4013      	ands	r3, r2
 8021868:	2b00      	cmp	r3, #0
 802186a:	d105      	bne.n	8021878 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 802186c:	69ba      	ldr	r2, [r7, #24]
 802186e:	4ba0      	ldr	r3, [pc, #640]	; (8021af0 <HAL_UART_IRQHandler+0x2f8>)
 8021870:	4013      	ands	r3, r2
 8021872:	2b00      	cmp	r3, #0
 8021874:	f000 80dd 	beq.w	8021a32 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8021878:	69fb      	ldr	r3, [r7, #28]
 802187a:	f003 0301 	and.w	r3, r3, #1
 802187e:	2b00      	cmp	r3, #0
 8021880:	d010      	beq.n	80218a4 <HAL_UART_IRQHandler+0xac>
 8021882:	69bb      	ldr	r3, [r7, #24]
 8021884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021888:	2b00      	cmp	r3, #0
 802188a:	d00b      	beq.n	80218a4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 802188c:	687b      	ldr	r3, [r7, #4]
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	2201      	movs	r2, #1
 8021892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802189a:	f043 0201 	orr.w	r2, r3, #1
 802189e:	687b      	ldr	r3, [r7, #4]
 80218a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80218a4:	69fb      	ldr	r3, [r7, #28]
 80218a6:	f003 0302 	and.w	r3, r3, #2
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d010      	beq.n	80218d0 <HAL_UART_IRQHandler+0xd8>
 80218ae:	697b      	ldr	r3, [r7, #20]
 80218b0:	f003 0301 	and.w	r3, r3, #1
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	d00b      	beq.n	80218d0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80218b8:	687b      	ldr	r3, [r7, #4]
 80218ba:	681b      	ldr	r3, [r3, #0]
 80218bc:	2202      	movs	r2, #2
 80218be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80218c6:	f043 0204 	orr.w	r2, r3, #4
 80218ca:	687b      	ldr	r3, [r7, #4]
 80218cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80218d0:	69fb      	ldr	r3, [r7, #28]
 80218d2:	f003 0304 	and.w	r3, r3, #4
 80218d6:	2b00      	cmp	r3, #0
 80218d8:	d010      	beq.n	80218fc <HAL_UART_IRQHandler+0x104>
 80218da:	697b      	ldr	r3, [r7, #20]
 80218dc:	f003 0301 	and.w	r3, r3, #1
 80218e0:	2b00      	cmp	r3, #0
 80218e2:	d00b      	beq.n	80218fc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80218e4:	687b      	ldr	r3, [r7, #4]
 80218e6:	681b      	ldr	r3, [r3, #0]
 80218e8:	2204      	movs	r2, #4
 80218ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80218f2:	f043 0202 	orr.w	r2, r3, #2
 80218f6:	687b      	ldr	r3, [r7, #4]
 80218f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80218fc:	69fb      	ldr	r3, [r7, #28]
 80218fe:	f003 0308 	and.w	r3, r3, #8
 8021902:	2b00      	cmp	r3, #0
 8021904:	d015      	beq.n	8021932 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8021906:	69bb      	ldr	r3, [r7, #24]
 8021908:	f003 0320 	and.w	r3, r3, #32
 802190c:	2b00      	cmp	r3, #0
 802190e:	d104      	bne.n	802191a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8021910:	697a      	ldr	r2, [r7, #20]
 8021912:	4b76      	ldr	r3, [pc, #472]	; (8021aec <HAL_UART_IRQHandler+0x2f4>)
 8021914:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8021916:	2b00      	cmp	r3, #0
 8021918:	d00b      	beq.n	8021932 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	681b      	ldr	r3, [r3, #0]
 802191e:	2208      	movs	r2, #8
 8021920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8021922:	687b      	ldr	r3, [r7, #4]
 8021924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021928:	f043 0208 	orr.w	r2, r3, #8
 802192c:	687b      	ldr	r3, [r7, #4]
 802192e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8021932:	69fb      	ldr	r3, [r7, #28]
 8021934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021938:	2b00      	cmp	r3, #0
 802193a:	d011      	beq.n	8021960 <HAL_UART_IRQHandler+0x168>
 802193c:	69bb      	ldr	r3, [r7, #24]
 802193e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8021942:	2b00      	cmp	r3, #0
 8021944:	d00c      	beq.n	8021960 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8021946:	687b      	ldr	r3, [r7, #4]
 8021948:	681b      	ldr	r3, [r3, #0]
 802194a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802194e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8021950:	687b      	ldr	r3, [r7, #4]
 8021952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021956:	f043 0220 	orr.w	r2, r3, #32
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021966:	2b00      	cmp	r3, #0
 8021968:	f000 80b9 	beq.w	8021ade <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 802196c:	69fb      	ldr	r3, [r7, #28]
 802196e:	f003 0320 	and.w	r3, r3, #32
 8021972:	2b00      	cmp	r3, #0
 8021974:	d011      	beq.n	802199a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8021976:	69bb      	ldr	r3, [r7, #24]
 8021978:	f003 0320 	and.w	r3, r3, #32
 802197c:	2b00      	cmp	r3, #0
 802197e:	d104      	bne.n	802198a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8021980:	697b      	ldr	r3, [r7, #20]
 8021982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021986:	2b00      	cmp	r3, #0
 8021988:	d007      	beq.n	802199a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 802198a:	687b      	ldr	r3, [r7, #4]
 802198c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802198e:	2b00      	cmp	r3, #0
 8021990:	d003      	beq.n	802199a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8021992:	687b      	ldr	r3, [r7, #4]
 8021994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021996:	6878      	ldr	r0, [r7, #4]
 8021998:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80219a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80219a2:	687b      	ldr	r3, [r7, #4]
 80219a4:	681b      	ldr	r3, [r3, #0]
 80219a6:	689b      	ldr	r3, [r3, #8]
 80219a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80219ac:	2b40      	cmp	r3, #64	; 0x40
 80219ae:	d004      	beq.n	80219ba <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80219b0:	68fb      	ldr	r3, [r7, #12]
 80219b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	d031      	beq.n	8021a1e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80219ba:	6878      	ldr	r0, [r7, #4]
 80219bc:	f000 fff2 	bl	80229a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	681b      	ldr	r3, [r3, #0]
 80219c4:	689b      	ldr	r3, [r3, #8]
 80219c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80219ca:	2b40      	cmp	r3, #64	; 0x40
 80219cc:	d123      	bne.n	8021a16 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80219ce:	687b      	ldr	r3, [r7, #4]
 80219d0:	681b      	ldr	r3, [r3, #0]
 80219d2:	689a      	ldr	r2, [r3, #8]
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	681b      	ldr	r3, [r3, #0]
 80219d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80219dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d013      	beq.n	8021a0e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80219e6:	687b      	ldr	r3, [r7, #4]
 80219e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80219ea:	4a42      	ldr	r2, [pc, #264]	; (8021af4 <HAL_UART_IRQHandler+0x2fc>)
 80219ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80219ee:	687b      	ldr	r3, [r7, #4]
 80219f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80219f2:	4618      	mov	r0, r3
 80219f4:	f7f4 ffac 	bl	8016950 <HAL_DMA_Abort_IT>
 80219f8:	4603      	mov	r3, r0
 80219fa:	2b00      	cmp	r3, #0
 80219fc:	d017      	beq.n	8021a2e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80219fe:	687b      	ldr	r3, [r7, #4]
 8021a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021a04:	687a      	ldr	r2, [r7, #4]
 8021a06:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8021a08:	4610      	mov	r0, r2
 8021a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021a0c:	e00f      	b.n	8021a2e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8021a0e:	6878      	ldr	r0, [r7, #4]
 8021a10:	f000 f886 	bl	8021b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021a14:	e00b      	b.n	8021a2e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021a16:	6878      	ldr	r0, [r7, #4]
 8021a18:	f000 f882 	bl	8021b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021a1c:	e007      	b.n	8021a2e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8021a1e:	6878      	ldr	r0, [r7, #4]
 8021a20:	f000 f87e 	bl	8021b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	2200      	movs	r2, #0
 8021a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8021a2c:	e057      	b.n	8021ade <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021a2e:	bf00      	nop
    return;
 8021a30:	e055      	b.n	8021ade <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8021a32:	69fb      	ldr	r3, [r7, #28]
 8021a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d00d      	beq.n	8021a58 <HAL_UART_IRQHandler+0x260>
 8021a3c:	697b      	ldr	r3, [r7, #20]
 8021a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d008      	beq.n	8021a58 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8021a46:	687b      	ldr	r3, [r7, #4]
 8021a48:	681b      	ldr	r3, [r3, #0]
 8021a4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8021a4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8021a50:	6878      	ldr	r0, [r7, #4]
 8021a52:	f001 f87c 	bl	8022b4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8021a56:	e045      	b.n	8021ae4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8021a58:	69fb      	ldr	r3, [r7, #28]
 8021a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021a5e:	2b00      	cmp	r3, #0
 8021a60:	d012      	beq.n	8021a88 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8021a62:	69bb      	ldr	r3, [r7, #24]
 8021a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d104      	bne.n	8021a76 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8021a6c:	697b      	ldr	r3, [r7, #20]
 8021a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d008      	beq.n	8021a88 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021a7a:	2b00      	cmp	r3, #0
 8021a7c:	d031      	beq.n	8021ae2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8021a7e:	687b      	ldr	r3, [r7, #4]
 8021a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021a82:	6878      	ldr	r0, [r7, #4]
 8021a84:	4798      	blx	r3
    }
    return;
 8021a86:	e02c      	b.n	8021ae2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8021a88:	69fb      	ldr	r3, [r7, #28]
 8021a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021a8e:	2b00      	cmp	r3, #0
 8021a90:	d008      	beq.n	8021aa4 <HAL_UART_IRQHandler+0x2ac>
 8021a92:	69bb      	ldr	r3, [r7, #24]
 8021a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021a98:	2b00      	cmp	r3, #0
 8021a9a:	d003      	beq.n	8021aa4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8021a9c:	6878      	ldr	r0, [r7, #4]
 8021a9e:	f001 f83c 	bl	8022b1a <UART_EndTransmit_IT>
    return;
 8021aa2:	e01f      	b.n	8021ae4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8021aa4:	69fb      	ldr	r3, [r7, #28]
 8021aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d008      	beq.n	8021ac0 <HAL_UART_IRQHandler+0x2c8>
 8021aae:	69bb      	ldr	r3, [r7, #24]
 8021ab0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d003      	beq.n	8021ac0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8021ab8:	6878      	ldr	r0, [r7, #4]
 8021aba:	f001 f85c 	bl	8022b76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8021abe:	e011      	b.n	8021ae4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8021ac0:	69fb      	ldr	r3, [r7, #28]
 8021ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8021ac6:	2b00      	cmp	r3, #0
 8021ac8:	d00c      	beq.n	8021ae4 <HAL_UART_IRQHandler+0x2ec>
 8021aca:	69bb      	ldr	r3, [r7, #24]
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	da09      	bge.n	8021ae4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8021ad0:	6878      	ldr	r0, [r7, #4]
 8021ad2:	f001 f846 	bl	8022b62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8021ad6:	bf00      	nop
 8021ad8:	e004      	b.n	8021ae4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8021ada:	bf00      	nop
 8021adc:	e002      	b.n	8021ae4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8021ade:	bf00      	nop
 8021ae0:	e000      	b.n	8021ae4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8021ae2:	bf00      	nop
  }
}
 8021ae4:	3720      	adds	r7, #32
 8021ae6:	46bd      	mov	sp, r7
 8021ae8:	bd80      	pop	{r7, pc}
 8021aea:	bf00      	nop
 8021aec:	10000001 	.word	0x10000001
 8021af0:	04000120 	.word	0x04000120
 8021af4:	08022aef 	.word	0x08022aef

08021af8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8021af8:	b480      	push	{r7}
 8021afa:	b083      	sub	sp, #12
 8021afc:	af00      	add	r7, sp, #0
 8021afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8021b00:	bf00      	nop
 8021b02:	370c      	adds	r7, #12
 8021b04:	46bd      	mov	sp, r7
 8021b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b0a:	4770      	bx	lr

08021b0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8021b0c:	b480      	push	{r7}
 8021b0e:	b083      	sub	sp, #12
 8021b10:	af00      	add	r7, sp, #0
 8021b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8021b14:	bf00      	nop
 8021b16:	370c      	adds	r7, #12
 8021b18:	46bd      	mov	sp, r7
 8021b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b1e:	4770      	bx	lr

08021b20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8021b20:	b480      	push	{r7}
 8021b22:	b083      	sub	sp, #12
 8021b24:	af00      	add	r7, sp, #0
 8021b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8021b28:	bf00      	nop
 8021b2a:	370c      	adds	r7, #12
 8021b2c:	46bd      	mov	sp, r7
 8021b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b32:	4770      	bx	lr

08021b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021b34:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8021b38:	b08e      	sub	sp, #56	; 0x38
 8021b3a:	af00      	add	r7, sp, #0
 8021b3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8021b3e:	2300      	movs	r3, #0
 8021b40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	689a      	ldr	r2, [r3, #8]
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	691b      	ldr	r3, [r3, #16]
 8021b4c:	431a      	orrs	r2, r3
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	695b      	ldr	r3, [r3, #20]
 8021b52:	431a      	orrs	r2, r3
 8021b54:	687b      	ldr	r3, [r7, #4]
 8021b56:	69db      	ldr	r3, [r3, #28]
 8021b58:	4313      	orrs	r3, r2
 8021b5a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021b62:	4313      	orrs	r3, r2
 8021b64:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8021b66:	687b      	ldr	r3, [r7, #4]
 8021b68:	681b      	ldr	r3, [r3, #0]
 8021b6a:	681a      	ldr	r2, [r3, #0]
 8021b6c:	4bc1      	ldr	r3, [pc, #772]	; (8021e74 <UART_SetConfig+0x340>)
 8021b6e:	4013      	ands	r3, r2
 8021b70:	687a      	ldr	r2, [r7, #4]
 8021b72:	6812      	ldr	r2, [r2, #0]
 8021b74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021b76:	430b      	orrs	r3, r1
 8021b78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021b7a:	687b      	ldr	r3, [r7, #4]
 8021b7c:	681b      	ldr	r3, [r3, #0]
 8021b7e:	685b      	ldr	r3, [r3, #4]
 8021b80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8021b84:	687b      	ldr	r3, [r7, #4]
 8021b86:	68da      	ldr	r2, [r3, #12]
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	681b      	ldr	r3, [r3, #0]
 8021b8c:	430a      	orrs	r2, r1
 8021b8e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	699b      	ldr	r3, [r3, #24]
 8021b94:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8021b96:	687b      	ldr	r3, [r7, #4]
 8021b98:	681b      	ldr	r3, [r3, #0]
 8021b9a:	4ab7      	ldr	r2, [pc, #732]	; (8021e78 <UART_SetConfig+0x344>)
 8021b9c:	4293      	cmp	r3, r2
 8021b9e:	d004      	beq.n	8021baa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	6a1b      	ldr	r3, [r3, #32]
 8021ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021ba6:	4313      	orrs	r3, r2
 8021ba8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	681b      	ldr	r3, [r3, #0]
 8021bae:	689a      	ldr	r2, [r3, #8]
 8021bb0:	4bb2      	ldr	r3, [pc, #712]	; (8021e7c <UART_SetConfig+0x348>)
 8021bb2:	4013      	ands	r3, r2
 8021bb4:	687a      	ldr	r2, [r7, #4]
 8021bb6:	6812      	ldr	r2, [r2, #0]
 8021bb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021bba:	430b      	orrs	r3, r1
 8021bbc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8021bbe:	687b      	ldr	r3, [r7, #4]
 8021bc0:	681b      	ldr	r3, [r3, #0]
 8021bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021bc4:	f023 010f 	bic.w	r1, r3, #15
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	681b      	ldr	r3, [r3, #0]
 8021bd0:	430a      	orrs	r2, r1
 8021bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8021bd4:	687b      	ldr	r3, [r7, #4]
 8021bd6:	681b      	ldr	r3, [r3, #0]
 8021bd8:	4aa9      	ldr	r2, [pc, #676]	; (8021e80 <UART_SetConfig+0x34c>)
 8021bda:	4293      	cmp	r3, r2
 8021bdc:	d177      	bne.n	8021cce <UART_SetConfig+0x19a>
 8021bde:	4ba9      	ldr	r3, [pc, #676]	; (8021e84 <UART_SetConfig+0x350>)
 8021be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8021be6:	2b28      	cmp	r3, #40	; 0x28
 8021be8:	d86c      	bhi.n	8021cc4 <UART_SetConfig+0x190>
 8021bea:	a201      	add	r2, pc, #4	; (adr r2, 8021bf0 <UART_SetConfig+0xbc>)
 8021bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021bf0:	08021c95 	.word	0x08021c95
 8021bf4:	08021cc5 	.word	0x08021cc5
 8021bf8:	08021cc5 	.word	0x08021cc5
 8021bfc:	08021cc5 	.word	0x08021cc5
 8021c00:	08021cc5 	.word	0x08021cc5
 8021c04:	08021cc5 	.word	0x08021cc5
 8021c08:	08021cc5 	.word	0x08021cc5
 8021c0c:	08021cc5 	.word	0x08021cc5
 8021c10:	08021c9d 	.word	0x08021c9d
 8021c14:	08021cc5 	.word	0x08021cc5
 8021c18:	08021cc5 	.word	0x08021cc5
 8021c1c:	08021cc5 	.word	0x08021cc5
 8021c20:	08021cc5 	.word	0x08021cc5
 8021c24:	08021cc5 	.word	0x08021cc5
 8021c28:	08021cc5 	.word	0x08021cc5
 8021c2c:	08021cc5 	.word	0x08021cc5
 8021c30:	08021ca5 	.word	0x08021ca5
 8021c34:	08021cc5 	.word	0x08021cc5
 8021c38:	08021cc5 	.word	0x08021cc5
 8021c3c:	08021cc5 	.word	0x08021cc5
 8021c40:	08021cc5 	.word	0x08021cc5
 8021c44:	08021cc5 	.word	0x08021cc5
 8021c48:	08021cc5 	.word	0x08021cc5
 8021c4c:	08021cc5 	.word	0x08021cc5
 8021c50:	08021cad 	.word	0x08021cad
 8021c54:	08021cc5 	.word	0x08021cc5
 8021c58:	08021cc5 	.word	0x08021cc5
 8021c5c:	08021cc5 	.word	0x08021cc5
 8021c60:	08021cc5 	.word	0x08021cc5
 8021c64:	08021cc5 	.word	0x08021cc5
 8021c68:	08021cc5 	.word	0x08021cc5
 8021c6c:	08021cc5 	.word	0x08021cc5
 8021c70:	08021cb5 	.word	0x08021cb5
 8021c74:	08021cc5 	.word	0x08021cc5
 8021c78:	08021cc5 	.word	0x08021cc5
 8021c7c:	08021cc5 	.word	0x08021cc5
 8021c80:	08021cc5 	.word	0x08021cc5
 8021c84:	08021cc5 	.word	0x08021cc5
 8021c88:	08021cc5 	.word	0x08021cc5
 8021c8c:	08021cc5 	.word	0x08021cc5
 8021c90:	08021cbd 	.word	0x08021cbd
 8021c94:	2301      	movs	r3, #1
 8021c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021c9a:	e233      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021c9c:	2304      	movs	r3, #4
 8021c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021ca2:	e22f      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021ca4:	2308      	movs	r3, #8
 8021ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021caa:	e22b      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021cac:	2310      	movs	r3, #16
 8021cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021cb2:	e227      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021cb4:	2320      	movs	r3, #32
 8021cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021cba:	e223      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021cbc:	2340      	movs	r3, #64	; 0x40
 8021cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021cc2:	e21f      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021cc4:	2380      	movs	r3, #128	; 0x80
 8021cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021cca:	bf00      	nop
 8021ccc:	e21a      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021cce:	687b      	ldr	r3, [r7, #4]
 8021cd0:	681b      	ldr	r3, [r3, #0]
 8021cd2:	4a6d      	ldr	r2, [pc, #436]	; (8021e88 <UART_SetConfig+0x354>)
 8021cd4:	4293      	cmp	r3, r2
 8021cd6:	d132      	bne.n	8021d3e <UART_SetConfig+0x20a>
 8021cd8:	4b6a      	ldr	r3, [pc, #424]	; (8021e84 <UART_SetConfig+0x350>)
 8021cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021cdc:	f003 0307 	and.w	r3, r3, #7
 8021ce0:	2b05      	cmp	r3, #5
 8021ce2:	d827      	bhi.n	8021d34 <UART_SetConfig+0x200>
 8021ce4:	a201      	add	r2, pc, #4	; (adr r2, 8021cec <UART_SetConfig+0x1b8>)
 8021ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021cea:	bf00      	nop
 8021cec:	08021d05 	.word	0x08021d05
 8021cf0:	08021d0d 	.word	0x08021d0d
 8021cf4:	08021d15 	.word	0x08021d15
 8021cf8:	08021d1d 	.word	0x08021d1d
 8021cfc:	08021d25 	.word	0x08021d25
 8021d00:	08021d2d 	.word	0x08021d2d
 8021d04:	2300      	movs	r3, #0
 8021d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d0a:	e1fb      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d0c:	2304      	movs	r3, #4
 8021d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d12:	e1f7      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d14:	2308      	movs	r3, #8
 8021d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d1a:	e1f3      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d1c:	2310      	movs	r3, #16
 8021d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d22:	e1ef      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d24:	2320      	movs	r3, #32
 8021d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d2a:	e1eb      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d2c:	2340      	movs	r3, #64	; 0x40
 8021d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d32:	e1e7      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d34:	2380      	movs	r3, #128	; 0x80
 8021d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d3a:	bf00      	nop
 8021d3c:	e1e2      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d3e:	687b      	ldr	r3, [r7, #4]
 8021d40:	681b      	ldr	r3, [r3, #0]
 8021d42:	4a52      	ldr	r2, [pc, #328]	; (8021e8c <UART_SetConfig+0x358>)
 8021d44:	4293      	cmp	r3, r2
 8021d46:	d132      	bne.n	8021dae <UART_SetConfig+0x27a>
 8021d48:	4b4e      	ldr	r3, [pc, #312]	; (8021e84 <UART_SetConfig+0x350>)
 8021d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021d4c:	f003 0307 	and.w	r3, r3, #7
 8021d50:	2b05      	cmp	r3, #5
 8021d52:	d827      	bhi.n	8021da4 <UART_SetConfig+0x270>
 8021d54:	a201      	add	r2, pc, #4	; (adr r2, 8021d5c <UART_SetConfig+0x228>)
 8021d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d5a:	bf00      	nop
 8021d5c:	08021d75 	.word	0x08021d75
 8021d60:	08021d7d 	.word	0x08021d7d
 8021d64:	08021d85 	.word	0x08021d85
 8021d68:	08021d8d 	.word	0x08021d8d
 8021d6c:	08021d95 	.word	0x08021d95
 8021d70:	08021d9d 	.word	0x08021d9d
 8021d74:	2300      	movs	r3, #0
 8021d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d7a:	e1c3      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d7c:	2304      	movs	r3, #4
 8021d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d82:	e1bf      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d84:	2308      	movs	r3, #8
 8021d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d8a:	e1bb      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d8c:	2310      	movs	r3, #16
 8021d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d92:	e1b7      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d94:	2320      	movs	r3, #32
 8021d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021d9a:	e1b3      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021d9c:	2340      	movs	r3, #64	; 0x40
 8021d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021da2:	e1af      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021da4:	2380      	movs	r3, #128	; 0x80
 8021da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021daa:	bf00      	nop
 8021dac:	e1aa      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021dae:	687b      	ldr	r3, [r7, #4]
 8021db0:	681b      	ldr	r3, [r3, #0]
 8021db2:	4a37      	ldr	r2, [pc, #220]	; (8021e90 <UART_SetConfig+0x35c>)
 8021db4:	4293      	cmp	r3, r2
 8021db6:	d132      	bne.n	8021e1e <UART_SetConfig+0x2ea>
 8021db8:	4b32      	ldr	r3, [pc, #200]	; (8021e84 <UART_SetConfig+0x350>)
 8021dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021dbc:	f003 0307 	and.w	r3, r3, #7
 8021dc0:	2b05      	cmp	r3, #5
 8021dc2:	d827      	bhi.n	8021e14 <UART_SetConfig+0x2e0>
 8021dc4:	a201      	add	r2, pc, #4	; (adr r2, 8021dcc <UART_SetConfig+0x298>)
 8021dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021dca:	bf00      	nop
 8021dcc:	08021de5 	.word	0x08021de5
 8021dd0:	08021ded 	.word	0x08021ded
 8021dd4:	08021df5 	.word	0x08021df5
 8021dd8:	08021dfd 	.word	0x08021dfd
 8021ddc:	08021e05 	.word	0x08021e05
 8021de0:	08021e0d 	.word	0x08021e0d
 8021de4:	2300      	movs	r3, #0
 8021de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021dea:	e18b      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021dec:	2304      	movs	r3, #4
 8021dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021df2:	e187      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021df4:	2308      	movs	r3, #8
 8021df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021dfa:	e183      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021dfc:	2310      	movs	r3, #16
 8021dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021e02:	e17f      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021e04:	2320      	movs	r3, #32
 8021e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021e0a:	e17b      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021e0c:	2340      	movs	r3, #64	; 0x40
 8021e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021e12:	e177      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021e14:	2380      	movs	r3, #128	; 0x80
 8021e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021e1a:	bf00      	nop
 8021e1c:	e172      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	681b      	ldr	r3, [r3, #0]
 8021e22:	4a1c      	ldr	r2, [pc, #112]	; (8021e94 <UART_SetConfig+0x360>)
 8021e24:	4293      	cmp	r3, r2
 8021e26:	d144      	bne.n	8021eb2 <UART_SetConfig+0x37e>
 8021e28:	4b16      	ldr	r3, [pc, #88]	; (8021e84 <UART_SetConfig+0x350>)
 8021e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021e2c:	f003 0307 	and.w	r3, r3, #7
 8021e30:	2b05      	cmp	r3, #5
 8021e32:	d839      	bhi.n	8021ea8 <UART_SetConfig+0x374>
 8021e34:	a201      	add	r2, pc, #4	; (adr r2, 8021e3c <UART_SetConfig+0x308>)
 8021e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021e3a:	bf00      	nop
 8021e3c:	08021e55 	.word	0x08021e55
 8021e40:	08021e5d 	.word	0x08021e5d
 8021e44:	08021e65 	.word	0x08021e65
 8021e48:	08021e6d 	.word	0x08021e6d
 8021e4c:	08021e99 	.word	0x08021e99
 8021e50:	08021ea1 	.word	0x08021ea1
 8021e54:	2300      	movs	r3, #0
 8021e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021e5a:	e153      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021e5c:	2304      	movs	r3, #4
 8021e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021e62:	e14f      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021e64:	2308      	movs	r3, #8
 8021e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021e6a:	e14b      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021e6c:	2310      	movs	r3, #16
 8021e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021e72:	e147      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021e74:	cfff69f3 	.word	0xcfff69f3
 8021e78:	58000c00 	.word	0x58000c00
 8021e7c:	11fff4ff 	.word	0x11fff4ff
 8021e80:	40011000 	.word	0x40011000
 8021e84:	58024400 	.word	0x58024400
 8021e88:	40004400 	.word	0x40004400
 8021e8c:	40004800 	.word	0x40004800
 8021e90:	40004c00 	.word	0x40004c00
 8021e94:	40005000 	.word	0x40005000
 8021e98:	2320      	movs	r3, #32
 8021e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021e9e:	e131      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021ea0:	2340      	movs	r3, #64	; 0x40
 8021ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021ea6:	e12d      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021ea8:	2380      	movs	r3, #128	; 0x80
 8021eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021eae:	bf00      	nop
 8021eb0:	e128      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021eb2:	687b      	ldr	r3, [r7, #4]
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	4ab6      	ldr	r2, [pc, #728]	; (8022190 <UART_SetConfig+0x65c>)
 8021eb8:	4293      	cmp	r3, r2
 8021eba:	d178      	bne.n	8021fae <UART_SetConfig+0x47a>
 8021ebc:	4bb5      	ldr	r3, [pc, #724]	; (8022194 <UART_SetConfig+0x660>)
 8021ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021ec0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8021ec4:	2b28      	cmp	r3, #40	; 0x28
 8021ec6:	d86d      	bhi.n	8021fa4 <UART_SetConfig+0x470>
 8021ec8:	a201      	add	r2, pc, #4	; (adr r2, 8021ed0 <UART_SetConfig+0x39c>)
 8021eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ece:	bf00      	nop
 8021ed0:	08021f75 	.word	0x08021f75
 8021ed4:	08021fa5 	.word	0x08021fa5
 8021ed8:	08021fa5 	.word	0x08021fa5
 8021edc:	08021fa5 	.word	0x08021fa5
 8021ee0:	08021fa5 	.word	0x08021fa5
 8021ee4:	08021fa5 	.word	0x08021fa5
 8021ee8:	08021fa5 	.word	0x08021fa5
 8021eec:	08021fa5 	.word	0x08021fa5
 8021ef0:	08021f7d 	.word	0x08021f7d
 8021ef4:	08021fa5 	.word	0x08021fa5
 8021ef8:	08021fa5 	.word	0x08021fa5
 8021efc:	08021fa5 	.word	0x08021fa5
 8021f00:	08021fa5 	.word	0x08021fa5
 8021f04:	08021fa5 	.word	0x08021fa5
 8021f08:	08021fa5 	.word	0x08021fa5
 8021f0c:	08021fa5 	.word	0x08021fa5
 8021f10:	08021f85 	.word	0x08021f85
 8021f14:	08021fa5 	.word	0x08021fa5
 8021f18:	08021fa5 	.word	0x08021fa5
 8021f1c:	08021fa5 	.word	0x08021fa5
 8021f20:	08021fa5 	.word	0x08021fa5
 8021f24:	08021fa5 	.word	0x08021fa5
 8021f28:	08021fa5 	.word	0x08021fa5
 8021f2c:	08021fa5 	.word	0x08021fa5
 8021f30:	08021f8d 	.word	0x08021f8d
 8021f34:	08021fa5 	.word	0x08021fa5
 8021f38:	08021fa5 	.word	0x08021fa5
 8021f3c:	08021fa5 	.word	0x08021fa5
 8021f40:	08021fa5 	.word	0x08021fa5
 8021f44:	08021fa5 	.word	0x08021fa5
 8021f48:	08021fa5 	.word	0x08021fa5
 8021f4c:	08021fa5 	.word	0x08021fa5
 8021f50:	08021f95 	.word	0x08021f95
 8021f54:	08021fa5 	.word	0x08021fa5
 8021f58:	08021fa5 	.word	0x08021fa5
 8021f5c:	08021fa5 	.word	0x08021fa5
 8021f60:	08021fa5 	.word	0x08021fa5
 8021f64:	08021fa5 	.word	0x08021fa5
 8021f68:	08021fa5 	.word	0x08021fa5
 8021f6c:	08021fa5 	.word	0x08021fa5
 8021f70:	08021f9d 	.word	0x08021f9d
 8021f74:	2301      	movs	r3, #1
 8021f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021f7a:	e0c3      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021f7c:	2304      	movs	r3, #4
 8021f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021f82:	e0bf      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021f84:	2308      	movs	r3, #8
 8021f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021f8a:	e0bb      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021f8c:	2310      	movs	r3, #16
 8021f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021f92:	e0b7      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021f94:	2320      	movs	r3, #32
 8021f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021f9a:	e0b3      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021f9c:	2340      	movs	r3, #64	; 0x40
 8021f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021fa2:	e0af      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021fa4:	2380      	movs	r3, #128	; 0x80
 8021fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021faa:	bf00      	nop
 8021fac:	e0aa      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021fae:	687b      	ldr	r3, [r7, #4]
 8021fb0:	681b      	ldr	r3, [r3, #0]
 8021fb2:	4a79      	ldr	r2, [pc, #484]	; (8022198 <UART_SetConfig+0x664>)
 8021fb4:	4293      	cmp	r3, r2
 8021fb6:	d132      	bne.n	802201e <UART_SetConfig+0x4ea>
 8021fb8:	4b76      	ldr	r3, [pc, #472]	; (8022194 <UART_SetConfig+0x660>)
 8021fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021fbc:	f003 0307 	and.w	r3, r3, #7
 8021fc0:	2b05      	cmp	r3, #5
 8021fc2:	d827      	bhi.n	8022014 <UART_SetConfig+0x4e0>
 8021fc4:	a201      	add	r2, pc, #4	; (adr r2, 8021fcc <UART_SetConfig+0x498>)
 8021fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021fca:	bf00      	nop
 8021fcc:	08021fe5 	.word	0x08021fe5
 8021fd0:	08021fed 	.word	0x08021fed
 8021fd4:	08021ff5 	.word	0x08021ff5
 8021fd8:	08021ffd 	.word	0x08021ffd
 8021fdc:	08022005 	.word	0x08022005
 8021fe0:	0802200d 	.word	0x0802200d
 8021fe4:	2300      	movs	r3, #0
 8021fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021fea:	e08b      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021fec:	2304      	movs	r3, #4
 8021fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021ff2:	e087      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021ff4:	2308      	movs	r3, #8
 8021ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8021ffa:	e083      	b.n	8022104 <UART_SetConfig+0x5d0>
 8021ffc:	2310      	movs	r3, #16
 8021ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8022002:	e07f      	b.n	8022104 <UART_SetConfig+0x5d0>
 8022004:	2320      	movs	r3, #32
 8022006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802200a:	e07b      	b.n	8022104 <UART_SetConfig+0x5d0>
 802200c:	2340      	movs	r3, #64	; 0x40
 802200e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8022012:	e077      	b.n	8022104 <UART_SetConfig+0x5d0>
 8022014:	2380      	movs	r3, #128	; 0x80
 8022016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802201a:	bf00      	nop
 802201c:	e072      	b.n	8022104 <UART_SetConfig+0x5d0>
 802201e:	687b      	ldr	r3, [r7, #4]
 8022020:	681b      	ldr	r3, [r3, #0]
 8022022:	4a5e      	ldr	r2, [pc, #376]	; (802219c <UART_SetConfig+0x668>)
 8022024:	4293      	cmp	r3, r2
 8022026:	d132      	bne.n	802208e <UART_SetConfig+0x55a>
 8022028:	4b5a      	ldr	r3, [pc, #360]	; (8022194 <UART_SetConfig+0x660>)
 802202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802202c:	f003 0307 	and.w	r3, r3, #7
 8022030:	2b05      	cmp	r3, #5
 8022032:	d827      	bhi.n	8022084 <UART_SetConfig+0x550>
 8022034:	a201      	add	r2, pc, #4	; (adr r2, 802203c <UART_SetConfig+0x508>)
 8022036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802203a:	bf00      	nop
 802203c:	08022055 	.word	0x08022055
 8022040:	0802205d 	.word	0x0802205d
 8022044:	08022065 	.word	0x08022065
 8022048:	0802206d 	.word	0x0802206d
 802204c:	08022075 	.word	0x08022075
 8022050:	0802207d 	.word	0x0802207d
 8022054:	2300      	movs	r3, #0
 8022056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802205a:	e053      	b.n	8022104 <UART_SetConfig+0x5d0>
 802205c:	2304      	movs	r3, #4
 802205e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8022062:	e04f      	b.n	8022104 <UART_SetConfig+0x5d0>
 8022064:	2308      	movs	r3, #8
 8022066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802206a:	e04b      	b.n	8022104 <UART_SetConfig+0x5d0>
 802206c:	2310      	movs	r3, #16
 802206e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8022072:	e047      	b.n	8022104 <UART_SetConfig+0x5d0>
 8022074:	2320      	movs	r3, #32
 8022076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802207a:	e043      	b.n	8022104 <UART_SetConfig+0x5d0>
 802207c:	2340      	movs	r3, #64	; 0x40
 802207e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8022082:	e03f      	b.n	8022104 <UART_SetConfig+0x5d0>
 8022084:	2380      	movs	r3, #128	; 0x80
 8022086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 802208a:	bf00      	nop
 802208c:	e03a      	b.n	8022104 <UART_SetConfig+0x5d0>
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	681b      	ldr	r3, [r3, #0]
 8022092:	4a43      	ldr	r2, [pc, #268]	; (80221a0 <UART_SetConfig+0x66c>)
 8022094:	4293      	cmp	r3, r2
 8022096:	d132      	bne.n	80220fe <UART_SetConfig+0x5ca>
 8022098:	4b3e      	ldr	r3, [pc, #248]	; (8022194 <UART_SetConfig+0x660>)
 802209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802209c:	f003 0307 	and.w	r3, r3, #7
 80220a0:	2b05      	cmp	r3, #5
 80220a2:	d827      	bhi.n	80220f4 <UART_SetConfig+0x5c0>
 80220a4:	a201      	add	r2, pc, #4	; (adr r2, 80220ac <UART_SetConfig+0x578>)
 80220a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80220aa:	bf00      	nop
 80220ac:	080220c5 	.word	0x080220c5
 80220b0:	080220cd 	.word	0x080220cd
 80220b4:	080220d5 	.word	0x080220d5
 80220b8:	080220dd 	.word	0x080220dd
 80220bc:	080220e5 	.word	0x080220e5
 80220c0:	080220ed 	.word	0x080220ed
 80220c4:	2302      	movs	r3, #2
 80220c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80220ca:	e01b      	b.n	8022104 <UART_SetConfig+0x5d0>
 80220cc:	2304      	movs	r3, #4
 80220ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80220d2:	e017      	b.n	8022104 <UART_SetConfig+0x5d0>
 80220d4:	2308      	movs	r3, #8
 80220d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80220da:	e013      	b.n	8022104 <UART_SetConfig+0x5d0>
 80220dc:	2310      	movs	r3, #16
 80220de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80220e2:	e00f      	b.n	8022104 <UART_SetConfig+0x5d0>
 80220e4:	2320      	movs	r3, #32
 80220e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80220ea:	e00b      	b.n	8022104 <UART_SetConfig+0x5d0>
 80220ec:	2340      	movs	r3, #64	; 0x40
 80220ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80220f2:	e007      	b.n	8022104 <UART_SetConfig+0x5d0>
 80220f4:	2380      	movs	r3, #128	; 0x80
 80220f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80220fa:	bf00      	nop
 80220fc:	e002      	b.n	8022104 <UART_SetConfig+0x5d0>
 80220fe:	2380      	movs	r3, #128	; 0x80
 8022100:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8022104:	687b      	ldr	r3, [r7, #4]
 8022106:	681b      	ldr	r3, [r3, #0]
 8022108:	4a25      	ldr	r2, [pc, #148]	; (80221a0 <UART_SetConfig+0x66c>)
 802210a:	4293      	cmp	r3, r2
 802210c:	f040 80b8 	bne.w	8022280 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8022110:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8022114:	2b08      	cmp	r3, #8
 8022116:	d019      	beq.n	802214c <UART_SetConfig+0x618>
 8022118:	2b08      	cmp	r3, #8
 802211a:	dc04      	bgt.n	8022126 <UART_SetConfig+0x5f2>
 802211c:	2b02      	cmp	r3, #2
 802211e:	d009      	beq.n	8022134 <UART_SetConfig+0x600>
 8022120:	2b04      	cmp	r3, #4
 8022122:	d00b      	beq.n	802213c <UART_SetConfig+0x608>
 8022124:	e042      	b.n	80221ac <UART_SetConfig+0x678>
 8022126:	2b20      	cmp	r3, #32
 8022128:	d02b      	beq.n	8022182 <UART_SetConfig+0x64e>
 802212a:	2b40      	cmp	r3, #64	; 0x40
 802212c:	d02c      	beq.n	8022188 <UART_SetConfig+0x654>
 802212e:	2b10      	cmp	r3, #16
 8022130:	d014      	beq.n	802215c <UART_SetConfig+0x628>
 8022132:	e03b      	b.n	80221ac <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8022134:	f7fb fa96 	bl	801d664 <HAL_RCCEx_GetD3PCLK1Freq>
 8022138:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 802213a:	e03d      	b.n	80221b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802213c:	f107 0314 	add.w	r3, r7, #20
 8022140:	4618      	mov	r0, r3
 8022142:	f7fb faa5 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8022146:	69bb      	ldr	r3, [r7, #24]
 8022148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802214a:	e035      	b.n	80221b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802214c:	f107 0308 	add.w	r3, r7, #8
 8022150:	4618      	mov	r0, r3
 8022152:	f7fb fbe9 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8022156:	68fb      	ldr	r3, [r7, #12]
 8022158:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802215a:	e02d      	b.n	80221b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802215c:	4b0d      	ldr	r3, [pc, #52]	; (8022194 <UART_SetConfig+0x660>)
 802215e:	681b      	ldr	r3, [r3, #0]
 8022160:	f003 0320 	and.w	r3, r3, #32
 8022164:	2b00      	cmp	r3, #0
 8022166:	d009      	beq.n	802217c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8022168:	4b0a      	ldr	r3, [pc, #40]	; (8022194 <UART_SetConfig+0x660>)
 802216a:	681b      	ldr	r3, [r3, #0]
 802216c:	08db      	lsrs	r3, r3, #3
 802216e:	f003 0303 	and.w	r3, r3, #3
 8022172:	4a0c      	ldr	r2, [pc, #48]	; (80221a4 <UART_SetConfig+0x670>)
 8022174:	fa22 f303 	lsr.w	r3, r2, r3
 8022178:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802217a:	e01d      	b.n	80221b8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 802217c:	4b09      	ldr	r3, [pc, #36]	; (80221a4 <UART_SetConfig+0x670>)
 802217e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8022180:	e01a      	b.n	80221b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8022182:	4b09      	ldr	r3, [pc, #36]	; (80221a8 <UART_SetConfig+0x674>)
 8022184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8022186:	e017      	b.n	80221b8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8022188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802218c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802218e:	e013      	b.n	80221b8 <UART_SetConfig+0x684>
 8022190:	40011400 	.word	0x40011400
 8022194:	58024400 	.word	0x58024400
 8022198:	40007800 	.word	0x40007800
 802219c:	40007c00 	.word	0x40007c00
 80221a0:	58000c00 	.word	0x58000c00
 80221a4:	03d09000 	.word	0x03d09000
 80221a8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80221ac:	2300      	movs	r3, #0
 80221ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80221b0:	2301      	movs	r3, #1
 80221b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80221b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80221b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	f000 824d 	beq.w	802265a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80221c4:	4aad      	ldr	r2, [pc, #692]	; (802247c <UART_SetConfig+0x948>)
 80221c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80221ca:	461a      	mov	r2, r3
 80221cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80221d2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80221d4:	687b      	ldr	r3, [r7, #4]
 80221d6:	685a      	ldr	r2, [r3, #4]
 80221d8:	4613      	mov	r3, r2
 80221da:	005b      	lsls	r3, r3, #1
 80221dc:	4413      	add	r3, r2
 80221de:	6a3a      	ldr	r2, [r7, #32]
 80221e0:	429a      	cmp	r2, r3
 80221e2:	d305      	bcc.n	80221f0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	685b      	ldr	r3, [r3, #4]
 80221e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80221ea:	6a3a      	ldr	r2, [r7, #32]
 80221ec:	429a      	cmp	r2, r3
 80221ee:	d903      	bls.n	80221f8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80221f0:	2301      	movs	r3, #1
 80221f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80221f6:	e230      	b.n	802265a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80221f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80221fa:	4618      	mov	r0, r3
 80221fc:	f04f 0100 	mov.w	r1, #0
 8022200:	687b      	ldr	r3, [r7, #4]
 8022202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022204:	4a9d      	ldr	r2, [pc, #628]	; (802247c <UART_SetConfig+0x948>)
 8022206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802220a:	b29b      	uxth	r3, r3
 802220c:	f04f 0400 	mov.w	r4, #0
 8022210:	461a      	mov	r2, r3
 8022212:	4623      	mov	r3, r4
 8022214:	f7de fac0 	bl	8000798 <__aeabi_uldivmod>
 8022218:	4603      	mov	r3, r0
 802221a:	460c      	mov	r4, r1
 802221c:	4619      	mov	r1, r3
 802221e:	4622      	mov	r2, r4
 8022220:	f04f 0300 	mov.w	r3, #0
 8022224:	f04f 0400 	mov.w	r4, #0
 8022228:	0214      	lsls	r4, r2, #8
 802222a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 802222e:	020b      	lsls	r3, r1, #8
 8022230:	687a      	ldr	r2, [r7, #4]
 8022232:	6852      	ldr	r2, [r2, #4]
 8022234:	0852      	lsrs	r2, r2, #1
 8022236:	4611      	mov	r1, r2
 8022238:	f04f 0200 	mov.w	r2, #0
 802223c:	eb13 0b01 	adds.w	fp, r3, r1
 8022240:	eb44 0c02 	adc.w	ip, r4, r2
 8022244:	4658      	mov	r0, fp
 8022246:	4661      	mov	r1, ip
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	685b      	ldr	r3, [r3, #4]
 802224c:	f04f 0400 	mov.w	r4, #0
 8022250:	461a      	mov	r2, r3
 8022252:	4623      	mov	r3, r4
 8022254:	f7de faa0 	bl	8000798 <__aeabi_uldivmod>
 8022258:	4603      	mov	r3, r0
 802225a:	460c      	mov	r4, r1
 802225c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8022264:	d308      	bcc.n	8022278 <UART_SetConfig+0x744>
 8022266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802226c:	d204      	bcs.n	8022278 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022274:	60da      	str	r2, [r3, #12]
 8022276:	e1f0      	b.n	802265a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8022278:	2301      	movs	r3, #1
 802227a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 802227e:	e1ec      	b.n	802265a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	69db      	ldr	r3, [r3, #28]
 8022284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022288:	f040 8100 	bne.w	802248c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 802228c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8022290:	2b40      	cmp	r3, #64	; 0x40
 8022292:	f200 80b7 	bhi.w	8022404 <UART_SetConfig+0x8d0>
 8022296:	a201      	add	r2, pc, #4	; (adr r2, 802229c <UART_SetConfig+0x768>)
 8022298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802229c:	080223a1 	.word	0x080223a1
 80222a0:	080223a9 	.word	0x080223a9
 80222a4:	08022405 	.word	0x08022405
 80222a8:	08022405 	.word	0x08022405
 80222ac:	080223b1 	.word	0x080223b1
 80222b0:	08022405 	.word	0x08022405
 80222b4:	08022405 	.word	0x08022405
 80222b8:	08022405 	.word	0x08022405
 80222bc:	080223c1 	.word	0x080223c1
 80222c0:	08022405 	.word	0x08022405
 80222c4:	08022405 	.word	0x08022405
 80222c8:	08022405 	.word	0x08022405
 80222cc:	08022405 	.word	0x08022405
 80222d0:	08022405 	.word	0x08022405
 80222d4:	08022405 	.word	0x08022405
 80222d8:	08022405 	.word	0x08022405
 80222dc:	080223d1 	.word	0x080223d1
 80222e0:	08022405 	.word	0x08022405
 80222e4:	08022405 	.word	0x08022405
 80222e8:	08022405 	.word	0x08022405
 80222ec:	08022405 	.word	0x08022405
 80222f0:	08022405 	.word	0x08022405
 80222f4:	08022405 	.word	0x08022405
 80222f8:	08022405 	.word	0x08022405
 80222fc:	08022405 	.word	0x08022405
 8022300:	08022405 	.word	0x08022405
 8022304:	08022405 	.word	0x08022405
 8022308:	08022405 	.word	0x08022405
 802230c:	08022405 	.word	0x08022405
 8022310:	08022405 	.word	0x08022405
 8022314:	08022405 	.word	0x08022405
 8022318:	08022405 	.word	0x08022405
 802231c:	080223f7 	.word	0x080223f7
 8022320:	08022405 	.word	0x08022405
 8022324:	08022405 	.word	0x08022405
 8022328:	08022405 	.word	0x08022405
 802232c:	08022405 	.word	0x08022405
 8022330:	08022405 	.word	0x08022405
 8022334:	08022405 	.word	0x08022405
 8022338:	08022405 	.word	0x08022405
 802233c:	08022405 	.word	0x08022405
 8022340:	08022405 	.word	0x08022405
 8022344:	08022405 	.word	0x08022405
 8022348:	08022405 	.word	0x08022405
 802234c:	08022405 	.word	0x08022405
 8022350:	08022405 	.word	0x08022405
 8022354:	08022405 	.word	0x08022405
 8022358:	08022405 	.word	0x08022405
 802235c:	08022405 	.word	0x08022405
 8022360:	08022405 	.word	0x08022405
 8022364:	08022405 	.word	0x08022405
 8022368:	08022405 	.word	0x08022405
 802236c:	08022405 	.word	0x08022405
 8022370:	08022405 	.word	0x08022405
 8022374:	08022405 	.word	0x08022405
 8022378:	08022405 	.word	0x08022405
 802237c:	08022405 	.word	0x08022405
 8022380:	08022405 	.word	0x08022405
 8022384:	08022405 	.word	0x08022405
 8022388:	08022405 	.word	0x08022405
 802238c:	08022405 	.word	0x08022405
 8022390:	08022405 	.word	0x08022405
 8022394:	08022405 	.word	0x08022405
 8022398:	08022405 	.word	0x08022405
 802239c:	080223fd 	.word	0x080223fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80223a0:	f7f9 ff8c 	bl	801c2bc <HAL_RCC_GetPCLK1Freq>
 80223a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80223a6:	e033      	b.n	8022410 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80223a8:	f7f9 ff9e 	bl	801c2e8 <HAL_RCC_GetPCLK2Freq>
 80223ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80223ae:	e02f      	b.n	8022410 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80223b0:	f107 0314 	add.w	r3, r7, #20
 80223b4:	4618      	mov	r0, r3
 80223b6:	f7fb f96b 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80223ba:	69bb      	ldr	r3, [r7, #24]
 80223bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80223be:	e027      	b.n	8022410 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80223c0:	f107 0308 	add.w	r3, r7, #8
 80223c4:	4618      	mov	r0, r3
 80223c6:	f7fb faaf 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80223ca:	68fb      	ldr	r3, [r7, #12]
 80223cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80223ce:	e01f      	b.n	8022410 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80223d0:	4b2b      	ldr	r3, [pc, #172]	; (8022480 <UART_SetConfig+0x94c>)
 80223d2:	681b      	ldr	r3, [r3, #0]
 80223d4:	f003 0320 	and.w	r3, r3, #32
 80223d8:	2b00      	cmp	r3, #0
 80223da:	d009      	beq.n	80223f0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80223dc:	4b28      	ldr	r3, [pc, #160]	; (8022480 <UART_SetConfig+0x94c>)
 80223de:	681b      	ldr	r3, [r3, #0]
 80223e0:	08db      	lsrs	r3, r3, #3
 80223e2:	f003 0303 	and.w	r3, r3, #3
 80223e6:	4a27      	ldr	r2, [pc, #156]	; (8022484 <UART_SetConfig+0x950>)
 80223e8:	fa22 f303 	lsr.w	r3, r2, r3
 80223ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80223ee:	e00f      	b.n	8022410 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80223f0:	4b24      	ldr	r3, [pc, #144]	; (8022484 <UART_SetConfig+0x950>)
 80223f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80223f4:	e00c      	b.n	8022410 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80223f6:	4b24      	ldr	r3, [pc, #144]	; (8022488 <UART_SetConfig+0x954>)
 80223f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80223fa:	e009      	b.n	8022410 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80223fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8022400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8022402:	e005      	b.n	8022410 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8022404:	2300      	movs	r3, #0
 8022406:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8022408:	2301      	movs	r3, #1
 802240a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 802240e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8022410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022412:	2b00      	cmp	r3, #0
 8022414:	f000 8121 	beq.w	802265a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802241c:	4a17      	ldr	r2, [pc, #92]	; (802247c <UART_SetConfig+0x948>)
 802241e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022422:	461a      	mov	r2, r3
 8022424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022426:	fbb3 f3f2 	udiv	r3, r3, r2
 802242a:	005a      	lsls	r2, r3, #1
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	685b      	ldr	r3, [r3, #4]
 8022430:	085b      	lsrs	r3, r3, #1
 8022432:	441a      	add	r2, r3
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	685b      	ldr	r3, [r3, #4]
 8022438:	fbb2 f3f3 	udiv	r3, r2, r3
 802243c:	b29b      	uxth	r3, r3
 802243e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8022440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022442:	2b0f      	cmp	r3, #15
 8022444:	d916      	bls.n	8022474 <UART_SetConfig+0x940>
 8022446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802244c:	d212      	bcs.n	8022474 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022450:	b29b      	uxth	r3, r3
 8022452:	f023 030f 	bic.w	r3, r3, #15
 8022456:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8022458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802245a:	085b      	lsrs	r3, r3, #1
 802245c:	b29b      	uxth	r3, r3
 802245e:	f003 0307 	and.w	r3, r3, #7
 8022462:	b29a      	uxth	r2, r3
 8022464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022466:	4313      	orrs	r3, r2
 8022468:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	681b      	ldr	r3, [r3, #0]
 802246e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8022470:	60da      	str	r2, [r3, #12]
 8022472:	e0f2      	b.n	802265a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8022474:	2301      	movs	r3, #1
 8022476:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 802247a:	e0ee      	b.n	802265a <UART_SetConfig+0xb26>
 802247c:	0802fc34 	.word	0x0802fc34
 8022480:	58024400 	.word	0x58024400
 8022484:	03d09000 	.word	0x03d09000
 8022488:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 802248c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8022490:	2b40      	cmp	r3, #64	; 0x40
 8022492:	f200 80b7 	bhi.w	8022604 <UART_SetConfig+0xad0>
 8022496:	a201      	add	r2, pc, #4	; (adr r2, 802249c <UART_SetConfig+0x968>)
 8022498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802249c:	080225a1 	.word	0x080225a1
 80224a0:	080225a9 	.word	0x080225a9
 80224a4:	08022605 	.word	0x08022605
 80224a8:	08022605 	.word	0x08022605
 80224ac:	080225b1 	.word	0x080225b1
 80224b0:	08022605 	.word	0x08022605
 80224b4:	08022605 	.word	0x08022605
 80224b8:	08022605 	.word	0x08022605
 80224bc:	080225c1 	.word	0x080225c1
 80224c0:	08022605 	.word	0x08022605
 80224c4:	08022605 	.word	0x08022605
 80224c8:	08022605 	.word	0x08022605
 80224cc:	08022605 	.word	0x08022605
 80224d0:	08022605 	.word	0x08022605
 80224d4:	08022605 	.word	0x08022605
 80224d8:	08022605 	.word	0x08022605
 80224dc:	080225d1 	.word	0x080225d1
 80224e0:	08022605 	.word	0x08022605
 80224e4:	08022605 	.word	0x08022605
 80224e8:	08022605 	.word	0x08022605
 80224ec:	08022605 	.word	0x08022605
 80224f0:	08022605 	.word	0x08022605
 80224f4:	08022605 	.word	0x08022605
 80224f8:	08022605 	.word	0x08022605
 80224fc:	08022605 	.word	0x08022605
 8022500:	08022605 	.word	0x08022605
 8022504:	08022605 	.word	0x08022605
 8022508:	08022605 	.word	0x08022605
 802250c:	08022605 	.word	0x08022605
 8022510:	08022605 	.word	0x08022605
 8022514:	08022605 	.word	0x08022605
 8022518:	08022605 	.word	0x08022605
 802251c:	080225f7 	.word	0x080225f7
 8022520:	08022605 	.word	0x08022605
 8022524:	08022605 	.word	0x08022605
 8022528:	08022605 	.word	0x08022605
 802252c:	08022605 	.word	0x08022605
 8022530:	08022605 	.word	0x08022605
 8022534:	08022605 	.word	0x08022605
 8022538:	08022605 	.word	0x08022605
 802253c:	08022605 	.word	0x08022605
 8022540:	08022605 	.word	0x08022605
 8022544:	08022605 	.word	0x08022605
 8022548:	08022605 	.word	0x08022605
 802254c:	08022605 	.word	0x08022605
 8022550:	08022605 	.word	0x08022605
 8022554:	08022605 	.word	0x08022605
 8022558:	08022605 	.word	0x08022605
 802255c:	08022605 	.word	0x08022605
 8022560:	08022605 	.word	0x08022605
 8022564:	08022605 	.word	0x08022605
 8022568:	08022605 	.word	0x08022605
 802256c:	08022605 	.word	0x08022605
 8022570:	08022605 	.word	0x08022605
 8022574:	08022605 	.word	0x08022605
 8022578:	08022605 	.word	0x08022605
 802257c:	08022605 	.word	0x08022605
 8022580:	08022605 	.word	0x08022605
 8022584:	08022605 	.word	0x08022605
 8022588:	08022605 	.word	0x08022605
 802258c:	08022605 	.word	0x08022605
 8022590:	08022605 	.word	0x08022605
 8022594:	08022605 	.word	0x08022605
 8022598:	08022605 	.word	0x08022605
 802259c:	080225fd 	.word	0x080225fd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80225a0:	f7f9 fe8c 	bl	801c2bc <HAL_RCC_GetPCLK1Freq>
 80225a4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80225a6:	e033      	b.n	8022610 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80225a8:	f7f9 fe9e 	bl	801c2e8 <HAL_RCC_GetPCLK2Freq>
 80225ac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80225ae:	e02f      	b.n	8022610 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80225b0:	f107 0314 	add.w	r3, r7, #20
 80225b4:	4618      	mov	r0, r3
 80225b6:	f7fb f86b 	bl	801d690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80225ba:	69bb      	ldr	r3, [r7, #24]
 80225bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80225be:	e027      	b.n	8022610 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80225c0:	f107 0308 	add.w	r3, r7, #8
 80225c4:	4618      	mov	r0, r3
 80225c6:	f7fb f9af 	bl	801d928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80225ca:	68fb      	ldr	r3, [r7, #12]
 80225cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80225ce:	e01f      	b.n	8022610 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80225d0:	4b2c      	ldr	r3, [pc, #176]	; (8022684 <UART_SetConfig+0xb50>)
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	f003 0320 	and.w	r3, r3, #32
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d009      	beq.n	80225f0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80225dc:	4b29      	ldr	r3, [pc, #164]	; (8022684 <UART_SetConfig+0xb50>)
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	08db      	lsrs	r3, r3, #3
 80225e2:	f003 0303 	and.w	r3, r3, #3
 80225e6:	4a28      	ldr	r2, [pc, #160]	; (8022688 <UART_SetConfig+0xb54>)
 80225e8:	fa22 f303 	lsr.w	r3, r2, r3
 80225ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80225ee:	e00f      	b.n	8022610 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80225f0:	4b25      	ldr	r3, [pc, #148]	; (8022688 <UART_SetConfig+0xb54>)
 80225f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80225f4:	e00c      	b.n	8022610 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80225f6:	4b25      	ldr	r3, [pc, #148]	; (802268c <UART_SetConfig+0xb58>)
 80225f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80225fa:	e009      	b.n	8022610 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80225fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8022600:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8022602:	e005      	b.n	8022610 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8022604:	2300      	movs	r3, #0
 8022606:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8022608:	2301      	movs	r3, #1
 802260a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 802260e:	bf00      	nop
    }

    if (pclk != 0U)
 8022610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022612:	2b00      	cmp	r3, #0
 8022614:	d021      	beq.n	802265a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802261a:	4a1d      	ldr	r2, [pc, #116]	; (8022690 <UART_SetConfig+0xb5c>)
 802261c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022620:	461a      	mov	r2, r3
 8022622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022624:	fbb3 f2f2 	udiv	r2, r3, r2
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	685b      	ldr	r3, [r3, #4]
 802262c:	085b      	lsrs	r3, r3, #1
 802262e:	441a      	add	r2, r3
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	685b      	ldr	r3, [r3, #4]
 8022634:	fbb2 f3f3 	udiv	r3, r2, r3
 8022638:	b29b      	uxth	r3, r3
 802263a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802263e:	2b0f      	cmp	r3, #15
 8022640:	d908      	bls.n	8022654 <UART_SetConfig+0xb20>
 8022642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022648:	d204      	bcs.n	8022654 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	681b      	ldr	r3, [r3, #0]
 802264e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022650:	60da      	str	r2, [r3, #12]
 8022652:	e002      	b.n	802265a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8022654:	2301      	movs	r3, #1
 8022656:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	2201      	movs	r2, #1
 802265e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8022662:	687b      	ldr	r3, [r7, #4]
 8022664:	2201      	movs	r2, #1
 8022666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	2200      	movs	r2, #0
 802266e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	2200      	movs	r2, #0
 8022674:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8022676:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 802267a:	4618      	mov	r0, r3
 802267c:	3738      	adds	r7, #56	; 0x38
 802267e:	46bd      	mov	sp, r7
 8022680:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8022684:	58024400 	.word	0x58024400
 8022688:	03d09000 	.word	0x03d09000
 802268c:	003d0900 	.word	0x003d0900
 8022690:	0802fc34 	.word	0x0802fc34

08022694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8022694:	b480      	push	{r7}
 8022696:	b083      	sub	sp, #12
 8022698:	af00      	add	r7, sp, #0
 802269a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226a0:	f003 0301 	and.w	r3, r3, #1
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	d00a      	beq.n	80226be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80226a8:	687b      	ldr	r3, [r7, #4]
 80226aa:	681b      	ldr	r3, [r3, #0]
 80226ac:	685b      	ldr	r3, [r3, #4]
 80226ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	681b      	ldr	r3, [r3, #0]
 80226ba:	430a      	orrs	r2, r1
 80226bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226c2:	f003 0302 	and.w	r3, r3, #2
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	d00a      	beq.n	80226e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	681b      	ldr	r3, [r3, #0]
 80226ce:	685b      	ldr	r3, [r3, #4]
 80226d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	430a      	orrs	r2, r1
 80226de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226e4:	f003 0304 	and.w	r3, r3, #4
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	d00a      	beq.n	8022702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80226ec:	687b      	ldr	r3, [r7, #4]
 80226ee:	681b      	ldr	r3, [r3, #0]
 80226f0:	685b      	ldr	r3, [r3, #4]
 80226f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80226f6:	687b      	ldr	r3, [r7, #4]
 80226f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	430a      	orrs	r2, r1
 8022700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022706:	f003 0308 	and.w	r3, r3, #8
 802270a:	2b00      	cmp	r3, #0
 802270c:	d00a      	beq.n	8022724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802270e:	687b      	ldr	r3, [r7, #4]
 8022710:	681b      	ldr	r3, [r3, #0]
 8022712:	685b      	ldr	r3, [r3, #4]
 8022714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802271c:	687b      	ldr	r3, [r7, #4]
 802271e:	681b      	ldr	r3, [r3, #0]
 8022720:	430a      	orrs	r2, r1
 8022722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8022724:	687b      	ldr	r3, [r7, #4]
 8022726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022728:	f003 0310 	and.w	r3, r3, #16
 802272c:	2b00      	cmp	r3, #0
 802272e:	d00a      	beq.n	8022746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	681b      	ldr	r3, [r3, #0]
 8022734:	689b      	ldr	r3, [r3, #8]
 8022736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802273a:	687b      	ldr	r3, [r7, #4]
 802273c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	681b      	ldr	r3, [r3, #0]
 8022742:	430a      	orrs	r2, r1
 8022744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8022746:	687b      	ldr	r3, [r7, #4]
 8022748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802274a:	f003 0320 	and.w	r3, r3, #32
 802274e:	2b00      	cmp	r3, #0
 8022750:	d00a      	beq.n	8022768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	681b      	ldr	r3, [r3, #0]
 8022756:	689b      	ldr	r3, [r3, #8]
 8022758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022760:	687b      	ldr	r3, [r7, #4]
 8022762:	681b      	ldr	r3, [r3, #0]
 8022764:	430a      	orrs	r2, r1
 8022766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8022768:	687b      	ldr	r3, [r7, #4]
 802276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022770:	2b00      	cmp	r3, #0
 8022772:	d01a      	beq.n	80227aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	681b      	ldr	r3, [r3, #0]
 8022778:	685b      	ldr	r3, [r3, #4]
 802277a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 802277e:	687b      	ldr	r3, [r7, #4]
 8022780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8022782:	687b      	ldr	r3, [r7, #4]
 8022784:	681b      	ldr	r3, [r3, #0]
 8022786:	430a      	orrs	r2, r1
 8022788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802278a:	687b      	ldr	r3, [r7, #4]
 802278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802278e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8022792:	d10a      	bne.n	80227aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	681b      	ldr	r3, [r3, #0]
 8022798:	685b      	ldr	r3, [r3, #4]
 802279a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 802279e:	687b      	ldr	r3, [r7, #4]
 80227a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	430a      	orrs	r2, r1
 80227a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80227ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80227b2:	2b00      	cmp	r3, #0
 80227b4:	d00a      	beq.n	80227cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80227b6:	687b      	ldr	r3, [r7, #4]
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	685b      	ldr	r3, [r3, #4]
 80227bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80227c4:	687b      	ldr	r3, [r7, #4]
 80227c6:	681b      	ldr	r3, [r3, #0]
 80227c8:	430a      	orrs	r2, r1
 80227ca:	605a      	str	r2, [r3, #4]
  }
}
 80227cc:	bf00      	nop
 80227ce:	370c      	adds	r7, #12
 80227d0:	46bd      	mov	sp, r7
 80227d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227d6:	4770      	bx	lr

080227d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80227d8:	b580      	push	{r7, lr}
 80227da:	b086      	sub	sp, #24
 80227dc:	af02      	add	r7, sp, #8
 80227de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	2200      	movs	r2, #0
 80227e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80227e8:	f7f2 fa84 	bl	8014cf4 <HAL_GetTick>
 80227ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80227ee:	687b      	ldr	r3, [r7, #4]
 80227f0:	681b      	ldr	r3, [r3, #0]
 80227f2:	681b      	ldr	r3, [r3, #0]
 80227f4:	f003 0308 	and.w	r3, r3, #8
 80227f8:	2b08      	cmp	r3, #8
 80227fa:	d10e      	bne.n	802281a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80227fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8022800:	9300      	str	r3, [sp, #0]
 8022802:	68fb      	ldr	r3, [r7, #12]
 8022804:	2200      	movs	r2, #0
 8022806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802280a:	6878      	ldr	r0, [r7, #4]
 802280c:	f000 f82c 	bl	8022868 <UART_WaitOnFlagUntilTimeout>
 8022810:	4603      	mov	r3, r0
 8022812:	2b00      	cmp	r3, #0
 8022814:	d001      	beq.n	802281a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8022816:	2303      	movs	r3, #3
 8022818:	e022      	b.n	8022860 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	681b      	ldr	r3, [r3, #0]
 802281e:	681b      	ldr	r3, [r3, #0]
 8022820:	f003 0304 	and.w	r3, r3, #4
 8022824:	2b04      	cmp	r3, #4
 8022826:	d10e      	bne.n	8022846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8022828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802282c:	9300      	str	r3, [sp, #0]
 802282e:	68fb      	ldr	r3, [r7, #12]
 8022830:	2200      	movs	r2, #0
 8022832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8022836:	6878      	ldr	r0, [r7, #4]
 8022838:	f000 f816 	bl	8022868 <UART_WaitOnFlagUntilTimeout>
 802283c:	4603      	mov	r3, r0
 802283e:	2b00      	cmp	r3, #0
 8022840:	d001      	beq.n	8022846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8022842:	2303      	movs	r3, #3
 8022844:	e00c      	b.n	8022860 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	2220      	movs	r2, #32
 802284a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 802284e:	687b      	ldr	r3, [r7, #4]
 8022850:	2220      	movs	r2, #32
 8022852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	2200      	movs	r2, #0
 802285a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 802285e:	2300      	movs	r3, #0
}
 8022860:	4618      	mov	r0, r3
 8022862:	3710      	adds	r7, #16
 8022864:	46bd      	mov	sp, r7
 8022866:	bd80      	pop	{r7, pc}

08022868 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8022868:	b580      	push	{r7, lr}
 802286a:	b084      	sub	sp, #16
 802286c:	af00      	add	r7, sp, #0
 802286e:	60f8      	str	r0, [r7, #12]
 8022870:	60b9      	str	r1, [r7, #8]
 8022872:	603b      	str	r3, [r7, #0]
 8022874:	4613      	mov	r3, r2
 8022876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022878:	e062      	b.n	8022940 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802287a:	69bb      	ldr	r3, [r7, #24]
 802287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022880:	d05e      	beq.n	8022940 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8022882:	f7f2 fa37 	bl	8014cf4 <HAL_GetTick>
 8022886:	4602      	mov	r2, r0
 8022888:	683b      	ldr	r3, [r7, #0]
 802288a:	1ad3      	subs	r3, r2, r3
 802288c:	69ba      	ldr	r2, [r7, #24]
 802288e:	429a      	cmp	r2, r3
 8022890:	d302      	bcc.n	8022898 <UART_WaitOnFlagUntilTimeout+0x30>
 8022892:	69bb      	ldr	r3, [r7, #24]
 8022894:	2b00      	cmp	r3, #0
 8022896:	d11d      	bne.n	80228d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	681a      	ldr	r2, [r3, #0]
 802289e:	68fb      	ldr	r3, [r7, #12]
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80228a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80228a8:	68fb      	ldr	r3, [r7, #12]
 80228aa:	681b      	ldr	r3, [r3, #0]
 80228ac:	689a      	ldr	r2, [r3, #8]
 80228ae:	68fb      	ldr	r3, [r7, #12]
 80228b0:	681b      	ldr	r3, [r3, #0]
 80228b2:	f022 0201 	bic.w	r2, r2, #1
 80228b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80228b8:	68fb      	ldr	r3, [r7, #12]
 80228ba:	2220      	movs	r2, #32
 80228bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80228c0:	68fb      	ldr	r3, [r7, #12]
 80228c2:	2220      	movs	r2, #32
 80228c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80228c8:	68fb      	ldr	r3, [r7, #12]
 80228ca:	2200      	movs	r2, #0
 80228cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80228d0:	2303      	movs	r3, #3
 80228d2:	e045      	b.n	8022960 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80228d4:	68fb      	ldr	r3, [r7, #12]
 80228d6:	681b      	ldr	r3, [r3, #0]
 80228d8:	681b      	ldr	r3, [r3, #0]
 80228da:	f003 0304 	and.w	r3, r3, #4
 80228de:	2b00      	cmp	r3, #0
 80228e0:	d02e      	beq.n	8022940 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80228e2:	68fb      	ldr	r3, [r7, #12]
 80228e4:	681b      	ldr	r3, [r3, #0]
 80228e6:	69db      	ldr	r3, [r3, #28]
 80228e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80228ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80228f0:	d126      	bne.n	8022940 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80228f2:	68fb      	ldr	r3, [r7, #12]
 80228f4:	681b      	ldr	r3, [r3, #0]
 80228f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80228fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80228fc:	68fb      	ldr	r3, [r7, #12]
 80228fe:	681b      	ldr	r3, [r3, #0]
 8022900:	681a      	ldr	r2, [r3, #0]
 8022902:	68fb      	ldr	r3, [r7, #12]
 8022904:	681b      	ldr	r3, [r3, #0]
 8022906:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 802290a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802290c:	68fb      	ldr	r3, [r7, #12]
 802290e:	681b      	ldr	r3, [r3, #0]
 8022910:	689a      	ldr	r2, [r3, #8]
 8022912:	68fb      	ldr	r3, [r7, #12]
 8022914:	681b      	ldr	r3, [r3, #0]
 8022916:	f022 0201 	bic.w	r2, r2, #1
 802291a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 802291c:	68fb      	ldr	r3, [r7, #12]
 802291e:	2220      	movs	r2, #32
 8022920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8022924:	68fb      	ldr	r3, [r7, #12]
 8022926:	2220      	movs	r2, #32
 8022928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802292c:	68fb      	ldr	r3, [r7, #12]
 802292e:	2220      	movs	r2, #32
 8022930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8022934:	68fb      	ldr	r3, [r7, #12]
 8022936:	2200      	movs	r2, #0
 8022938:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 802293c:	2303      	movs	r3, #3
 802293e:	e00f      	b.n	8022960 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	681b      	ldr	r3, [r3, #0]
 8022944:	69da      	ldr	r2, [r3, #28]
 8022946:	68bb      	ldr	r3, [r7, #8]
 8022948:	4013      	ands	r3, r2
 802294a:	68ba      	ldr	r2, [r7, #8]
 802294c:	429a      	cmp	r2, r3
 802294e:	bf0c      	ite	eq
 8022950:	2301      	moveq	r3, #1
 8022952:	2300      	movne	r3, #0
 8022954:	b2db      	uxtb	r3, r3
 8022956:	461a      	mov	r2, r3
 8022958:	79fb      	ldrb	r3, [r7, #7]
 802295a:	429a      	cmp	r2, r3
 802295c:	d08d      	beq.n	802287a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802295e:	2300      	movs	r3, #0
}
 8022960:	4618      	mov	r0, r3
 8022962:	3710      	adds	r7, #16
 8022964:	46bd      	mov	sp, r7
 8022966:	bd80      	pop	{r7, pc}

08022968 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8022968:	b480      	push	{r7}
 802296a:	b083      	sub	sp, #12
 802296c:	af00      	add	r7, sp, #0
 802296e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	681a      	ldr	r2, [r3, #0]
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	681b      	ldr	r3, [r3, #0]
 802297a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 802297e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	689a      	ldr	r2, [r3, #8]
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	681b      	ldr	r3, [r3, #0]
 802298a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 802298e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	2220      	movs	r2, #32
 8022994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8022998:	bf00      	nop
 802299a:	370c      	adds	r7, #12
 802299c:	46bd      	mov	sp, r7
 802299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229a2:	4770      	bx	lr

080229a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80229a4:	b480      	push	{r7}
 80229a6:	b083      	sub	sp, #12
 80229a8:	af00      	add	r7, sp, #0
 80229aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	681b      	ldr	r3, [r3, #0]
 80229b0:	681a      	ldr	r2, [r3, #0]
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	681b      	ldr	r3, [r3, #0]
 80229b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80229ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80229bc:	687b      	ldr	r3, [r7, #4]
 80229be:	681b      	ldr	r3, [r3, #0]
 80229c0:	6899      	ldr	r1, [r3, #8]
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	681a      	ldr	r2, [r3, #0]
 80229c6:	4b08      	ldr	r3, [pc, #32]	; (80229e8 <UART_EndRxTransfer+0x44>)
 80229c8:	400b      	ands	r3, r1
 80229ca:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	2220      	movs	r2, #32
 80229d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80229d4:	687b      	ldr	r3, [r7, #4]
 80229d6:	2200      	movs	r2, #0
 80229d8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80229da:	bf00      	nop
 80229dc:	370c      	adds	r7, #12
 80229de:	46bd      	mov	sp, r7
 80229e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229e4:	4770      	bx	lr
 80229e6:	bf00      	nop
 80229e8:	effffffe 	.word	0xeffffffe

080229ec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80229ec:	b580      	push	{r7, lr}
 80229ee:	b084      	sub	sp, #16
 80229f0:	af00      	add	r7, sp, #0
 80229f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229f8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	69db      	ldr	r3, [r3, #28]
 80229fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022a02:	d01f      	beq.n	8022a44 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8022a04:	68fb      	ldr	r3, [r7, #12]
 8022a06:	2200      	movs	r2, #0
 8022a08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8022a0c:	68fb      	ldr	r3, [r7, #12]
 8022a0e:	681b      	ldr	r3, [r3, #0]
 8022a10:	681a      	ldr	r2, [r3, #0]
 8022a12:	68fb      	ldr	r3, [r7, #12]
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022a1a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022a1c:	68fb      	ldr	r3, [r7, #12]
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	689a      	ldr	r2, [r3, #8]
 8022a22:	68fb      	ldr	r3, [r7, #12]
 8022a24:	681b      	ldr	r3, [r3, #0]
 8022a26:	f022 0201 	bic.w	r2, r2, #1
 8022a2a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022a2c:	68fb      	ldr	r3, [r7, #12]
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	689a      	ldr	r2, [r3, #8]
 8022a32:	68fb      	ldr	r3, [r7, #12]
 8022a34:	681b      	ldr	r3, [r3, #0]
 8022a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022a3a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8022a3c:	68fb      	ldr	r3, [r7, #12]
 8022a3e:	2220      	movs	r2, #32
 8022a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8022a44:	68f8      	ldr	r0, [r7, #12]
 8022a46:	f7ef fdcd 	bl	80125e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022a4a:	bf00      	nop
 8022a4c:	3710      	adds	r7, #16
 8022a4e:	46bd      	mov	sp, r7
 8022a50:	bd80      	pop	{r7, pc}

08022a52 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8022a52:	b580      	push	{r7, lr}
 8022a54:	b084      	sub	sp, #16
 8022a56:	af00      	add	r7, sp, #0
 8022a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8022a60:	68f8      	ldr	r0, [r7, #12]
 8022a62:	f7ff f853 	bl	8021b0c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022a66:	bf00      	nop
 8022a68:	3710      	adds	r7, #16
 8022a6a:	46bd      	mov	sp, r7
 8022a6c:	bd80      	pop	{r7, pc}

08022a6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8022a6e:	b580      	push	{r7, lr}
 8022a70:	b086      	sub	sp, #24
 8022a72:	af00      	add	r7, sp, #0
 8022a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8022a7c:	697b      	ldr	r3, [r7, #20]
 8022a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8022a82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8022a84:	697b      	ldr	r3, [r7, #20]
 8022a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022a8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8022a8c:	697b      	ldr	r3, [r7, #20]
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	689b      	ldr	r3, [r3, #8]
 8022a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022a96:	2b80      	cmp	r3, #128	; 0x80
 8022a98:	d109      	bne.n	8022aae <UART_DMAError+0x40>
 8022a9a:	693b      	ldr	r3, [r7, #16]
 8022a9c:	2b21      	cmp	r3, #33	; 0x21
 8022a9e:	d106      	bne.n	8022aae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8022aa0:	697b      	ldr	r3, [r7, #20]
 8022aa2:	2200      	movs	r2, #0
 8022aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8022aa8:	6978      	ldr	r0, [r7, #20]
 8022aaa:	f7ff ff5d 	bl	8022968 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8022aae:	697b      	ldr	r3, [r7, #20]
 8022ab0:	681b      	ldr	r3, [r3, #0]
 8022ab2:	689b      	ldr	r3, [r3, #8]
 8022ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022ab8:	2b40      	cmp	r3, #64	; 0x40
 8022aba:	d109      	bne.n	8022ad0 <UART_DMAError+0x62>
 8022abc:	68fb      	ldr	r3, [r7, #12]
 8022abe:	2b22      	cmp	r3, #34	; 0x22
 8022ac0:	d106      	bne.n	8022ad0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8022ac2:	697b      	ldr	r3, [r7, #20]
 8022ac4:	2200      	movs	r2, #0
 8022ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8022aca:	6978      	ldr	r0, [r7, #20]
 8022acc:	f7ff ff6a 	bl	80229a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8022ad0:	697b      	ldr	r3, [r7, #20]
 8022ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022ad6:	f043 0210 	orr.w	r2, r3, #16
 8022ada:	697b      	ldr	r3, [r7, #20]
 8022adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022ae0:	6978      	ldr	r0, [r7, #20]
 8022ae2:	f7ff f81d 	bl	8021b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022ae6:	bf00      	nop
 8022ae8:	3718      	adds	r7, #24
 8022aea:	46bd      	mov	sp, r7
 8022aec:	bd80      	pop	{r7, pc}

08022aee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8022aee:	b580      	push	{r7, lr}
 8022af0:	b084      	sub	sp, #16
 8022af2:	af00      	add	r7, sp, #0
 8022af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8022af6:	687b      	ldr	r3, [r7, #4]
 8022af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022afa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8022afc:	68fb      	ldr	r3, [r7, #12]
 8022afe:	2200      	movs	r2, #0
 8022b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8022b04:	68fb      	ldr	r3, [r7, #12]
 8022b06:	2200      	movs	r2, #0
 8022b08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022b0c:	68f8      	ldr	r0, [r7, #12]
 8022b0e:	f7ff f807 	bl	8021b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022b12:	bf00      	nop
 8022b14:	3710      	adds	r7, #16
 8022b16:	46bd      	mov	sp, r7
 8022b18:	bd80      	pop	{r7, pc}

08022b1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022b1a:	b580      	push	{r7, lr}
 8022b1c:	b082      	sub	sp, #8
 8022b1e:	af00      	add	r7, sp, #0
 8022b20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	681b      	ldr	r3, [r3, #0]
 8022b26:	681a      	ldr	r2, [r3, #0]
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	681b      	ldr	r3, [r3, #0]
 8022b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022b30:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	2220      	movs	r2, #32
 8022b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	2200      	movs	r2, #0
 8022b3e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022b40:	6878      	ldr	r0, [r7, #4]
 8022b42:	f7fe ffd9 	bl	8021af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022b46:	bf00      	nop
 8022b48:	3708      	adds	r7, #8
 8022b4a:	46bd      	mov	sp, r7
 8022b4c:	bd80      	pop	{r7, pc}

08022b4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8022b4e:	b480      	push	{r7}
 8022b50:	b083      	sub	sp, #12
 8022b52:	af00      	add	r7, sp, #0
 8022b54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8022b56:	bf00      	nop
 8022b58:	370c      	adds	r7, #12
 8022b5a:	46bd      	mov	sp, r7
 8022b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b60:	4770      	bx	lr

08022b62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8022b62:	b480      	push	{r7}
 8022b64:	b083      	sub	sp, #12
 8022b66:	af00      	add	r7, sp, #0
 8022b68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8022b6a:	bf00      	nop
 8022b6c:	370c      	adds	r7, #12
 8022b6e:	46bd      	mov	sp, r7
 8022b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b74:	4770      	bx	lr

08022b76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8022b76:	b480      	push	{r7}
 8022b78:	b083      	sub	sp, #12
 8022b7a:	af00      	add	r7, sp, #0
 8022b7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8022b7e:	bf00      	nop
 8022b80:	370c      	adds	r7, #12
 8022b82:	46bd      	mov	sp, r7
 8022b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b88:	4770      	bx	lr

08022b8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8022b8a:	b480      	push	{r7}
 8022b8c:	b085      	sub	sp, #20
 8022b8e:	af00      	add	r7, sp, #0
 8022b90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8022b98:	2b01      	cmp	r3, #1
 8022b9a:	d101      	bne.n	8022ba0 <HAL_UARTEx_DisableFifoMode+0x16>
 8022b9c:	2302      	movs	r3, #2
 8022b9e:	e027      	b.n	8022bf0 <HAL_UARTEx_DisableFifoMode+0x66>
 8022ba0:	687b      	ldr	r3, [r7, #4]
 8022ba2:	2201      	movs	r2, #1
 8022ba4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	2224      	movs	r2, #36	; 0x24
 8022bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	681b      	ldr	r3, [r3, #0]
 8022bb4:	681b      	ldr	r3, [r3, #0]
 8022bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	681b      	ldr	r3, [r3, #0]
 8022bbc:	681a      	ldr	r2, [r3, #0]
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	681b      	ldr	r3, [r3, #0]
 8022bc2:	f022 0201 	bic.w	r2, r2, #1
 8022bc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8022bc8:	68fb      	ldr	r3, [r7, #12]
 8022bca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8022bce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	2200      	movs	r2, #0
 8022bd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	681b      	ldr	r3, [r3, #0]
 8022bda:	68fa      	ldr	r2, [r7, #12]
 8022bdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022bde:	687b      	ldr	r3, [r7, #4]
 8022be0:	2220      	movs	r2, #32
 8022be2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022be6:	687b      	ldr	r3, [r7, #4]
 8022be8:	2200      	movs	r2, #0
 8022bea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8022bee:	2300      	movs	r3, #0
}
 8022bf0:	4618      	mov	r0, r3
 8022bf2:	3714      	adds	r7, #20
 8022bf4:	46bd      	mov	sp, r7
 8022bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bfa:	4770      	bx	lr

08022bfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022bfc:	b580      	push	{r7, lr}
 8022bfe:	b084      	sub	sp, #16
 8022c00:	af00      	add	r7, sp, #0
 8022c02:	6078      	str	r0, [r7, #4]
 8022c04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022c06:	687b      	ldr	r3, [r7, #4]
 8022c08:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8022c0c:	2b01      	cmp	r3, #1
 8022c0e:	d101      	bne.n	8022c14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8022c10:	2302      	movs	r3, #2
 8022c12:	e02d      	b.n	8022c70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	2201      	movs	r2, #1
 8022c18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8022c1c:	687b      	ldr	r3, [r7, #4]
 8022c1e:	2224      	movs	r2, #36	; 0x24
 8022c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022c24:	687b      	ldr	r3, [r7, #4]
 8022c26:	681b      	ldr	r3, [r3, #0]
 8022c28:	681b      	ldr	r3, [r3, #0]
 8022c2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022c2c:	687b      	ldr	r3, [r7, #4]
 8022c2e:	681b      	ldr	r3, [r3, #0]
 8022c30:	681a      	ldr	r2, [r3, #0]
 8022c32:	687b      	ldr	r3, [r7, #4]
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	f022 0201 	bic.w	r2, r2, #1
 8022c3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	681b      	ldr	r3, [r3, #0]
 8022c40:	689b      	ldr	r3, [r3, #8]
 8022c42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	681b      	ldr	r3, [r3, #0]
 8022c4a:	683a      	ldr	r2, [r7, #0]
 8022c4c:	430a      	orrs	r2, r1
 8022c4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022c50:	6878      	ldr	r0, [r7, #4]
 8022c52:	f000 f84f 	bl	8022cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022c56:	687b      	ldr	r3, [r7, #4]
 8022c58:	681b      	ldr	r3, [r3, #0]
 8022c5a:	68fa      	ldr	r2, [r7, #12]
 8022c5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022c5e:	687b      	ldr	r3, [r7, #4]
 8022c60:	2220      	movs	r2, #32
 8022c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022c66:	687b      	ldr	r3, [r7, #4]
 8022c68:	2200      	movs	r2, #0
 8022c6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8022c6e:	2300      	movs	r3, #0
}
 8022c70:	4618      	mov	r0, r3
 8022c72:	3710      	adds	r7, #16
 8022c74:	46bd      	mov	sp, r7
 8022c76:	bd80      	pop	{r7, pc}

08022c78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022c78:	b580      	push	{r7, lr}
 8022c7a:	b084      	sub	sp, #16
 8022c7c:	af00      	add	r7, sp, #0
 8022c7e:	6078      	str	r0, [r7, #4]
 8022c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022c82:	687b      	ldr	r3, [r7, #4]
 8022c84:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8022c88:	2b01      	cmp	r3, #1
 8022c8a:	d101      	bne.n	8022c90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8022c8c:	2302      	movs	r3, #2
 8022c8e:	e02d      	b.n	8022cec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	2201      	movs	r2, #1
 8022c94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8022c98:	687b      	ldr	r3, [r7, #4]
 8022c9a:	2224      	movs	r2, #36	; 0x24
 8022c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	681b      	ldr	r3, [r3, #0]
 8022ca4:	681b      	ldr	r3, [r3, #0]
 8022ca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	681b      	ldr	r3, [r3, #0]
 8022cac:	681a      	ldr	r2, [r3, #0]
 8022cae:	687b      	ldr	r3, [r7, #4]
 8022cb0:	681b      	ldr	r3, [r3, #0]
 8022cb2:	f022 0201 	bic.w	r2, r2, #1
 8022cb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	681b      	ldr	r3, [r3, #0]
 8022cbc:	689b      	ldr	r3, [r3, #8]
 8022cbe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	681b      	ldr	r3, [r3, #0]
 8022cc6:	683a      	ldr	r2, [r7, #0]
 8022cc8:	430a      	orrs	r2, r1
 8022cca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022ccc:	6878      	ldr	r0, [r7, #4]
 8022cce:	f000 f811 	bl	8022cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022cd2:	687b      	ldr	r3, [r7, #4]
 8022cd4:	681b      	ldr	r3, [r3, #0]
 8022cd6:	68fa      	ldr	r2, [r7, #12]
 8022cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	2220      	movs	r2, #32
 8022cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022ce2:	687b      	ldr	r3, [r7, #4]
 8022ce4:	2200      	movs	r2, #0
 8022ce6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8022cea:	2300      	movs	r3, #0
}
 8022cec:	4618      	mov	r0, r3
 8022cee:	3710      	adds	r7, #16
 8022cf0:	46bd      	mov	sp, r7
 8022cf2:	bd80      	pop	{r7, pc}

08022cf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8022cf4:	b480      	push	{r7}
 8022cf6:	b089      	sub	sp, #36	; 0x24
 8022cf8:	af00      	add	r7, sp, #0
 8022cfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8022cfc:	4a2f      	ldr	r2, [pc, #188]	; (8022dbc <UARTEx_SetNbDataToProcess+0xc8>)
 8022cfe:	f107 0314 	add.w	r3, r7, #20
 8022d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022d06:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8022d0a:	4a2d      	ldr	r2, [pc, #180]	; (8022dc0 <UARTEx_SetNbDataToProcess+0xcc>)
 8022d0c:	f107 030c 	add.w	r3, r7, #12
 8022d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022d14:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8022d18:	687b      	ldr	r3, [r7, #4]
 8022d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022d1c:	2b00      	cmp	r3, #0
 8022d1e:	d108      	bne.n	8022d32 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	2201      	movs	r2, #1
 8022d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8022d28:	687b      	ldr	r3, [r7, #4]
 8022d2a:	2201      	movs	r2, #1
 8022d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8022d30:	e03d      	b.n	8022dae <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8022d32:	2310      	movs	r3, #16
 8022d34:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8022d36:	2310      	movs	r3, #16
 8022d38:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8022d3a:	687b      	ldr	r3, [r7, #4]
 8022d3c:	681b      	ldr	r3, [r3, #0]
 8022d3e:	689b      	ldr	r3, [r3, #8]
 8022d40:	0e5b      	lsrs	r3, r3, #25
 8022d42:	b2db      	uxtb	r3, r3
 8022d44:	f003 0307 	and.w	r3, r3, #7
 8022d48:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8022d4a:	687b      	ldr	r3, [r7, #4]
 8022d4c:	681b      	ldr	r3, [r3, #0]
 8022d4e:	689b      	ldr	r3, [r3, #8]
 8022d50:	0f5b      	lsrs	r3, r3, #29
 8022d52:	b2db      	uxtb	r3, r3
 8022d54:	f003 0307 	and.w	r3, r3, #7
 8022d58:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8022d5a:	7fbb      	ldrb	r3, [r7, #30]
 8022d5c:	7f3a      	ldrb	r2, [r7, #28]
 8022d5e:	f107 0120 	add.w	r1, r7, #32
 8022d62:	440a      	add	r2, r1
 8022d64:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8022d68:	fb02 f303 	mul.w	r3, r2, r3
 8022d6c:	7f3a      	ldrb	r2, [r7, #28]
 8022d6e:	f107 0120 	add.w	r1, r7, #32
 8022d72:	440a      	add	r2, r1
 8022d74:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8022d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8022d7c:	b29a      	uxth	r2, r3
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8022d84:	7ffb      	ldrb	r3, [r7, #31]
 8022d86:	7f7a      	ldrb	r2, [r7, #29]
 8022d88:	f107 0120 	add.w	r1, r7, #32
 8022d8c:	440a      	add	r2, r1
 8022d8e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8022d92:	fb02 f303 	mul.w	r3, r2, r3
 8022d96:	7f7a      	ldrb	r2, [r7, #29]
 8022d98:	f107 0120 	add.w	r1, r7, #32
 8022d9c:	440a      	add	r2, r1
 8022d9e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8022da2:	fb93 f3f2 	sdiv	r3, r3, r2
 8022da6:	b29a      	uxth	r2, r3
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8022dae:	bf00      	nop
 8022db0:	3724      	adds	r7, #36	; 0x24
 8022db2:	46bd      	mov	sp, r7
 8022db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022db8:	4770      	bx	lr
 8022dba:	bf00      	nop
 8022dbc:	0802f180 	.word	0x0802f180
 8022dc0:	0802f188 	.word	0x0802f188

08022dc4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8022dc4:	b084      	sub	sp, #16
 8022dc6:	b480      	push	{r7}
 8022dc8:	b085      	sub	sp, #20
 8022dca:	af00      	add	r7, sp, #0
 8022dcc:	6078      	str	r0, [r7, #4]
 8022dce:	f107 001c 	add.w	r0, r7, #28
 8022dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8022dd6:	2300      	movs	r3, #0
 8022dd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8022dda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8022ddc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8022dde:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8022de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8022de2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8022de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8022de6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8022de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8022dea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8022dec:	68fa      	ldr	r2, [r7, #12]
 8022dee:	4313      	orrs	r3, r2
 8022df0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8022df2:	687b      	ldr	r3, [r7, #4]
 8022df4:	685a      	ldr	r2, [r3, #4]
 8022df6:	4b07      	ldr	r3, [pc, #28]	; (8022e14 <SDMMC_Init+0x50>)
 8022df8:	4013      	ands	r3, r2
 8022dfa:	68fa      	ldr	r2, [r7, #12]
 8022dfc:	431a      	orrs	r2, r3
 8022dfe:	687b      	ldr	r3, [r7, #4]
 8022e00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8022e02:	2300      	movs	r3, #0
}
 8022e04:	4618      	mov	r0, r3
 8022e06:	3714      	adds	r7, #20
 8022e08:	46bd      	mov	sp, r7
 8022e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e0e:	b004      	add	sp, #16
 8022e10:	4770      	bx	lr
 8022e12:	bf00      	nop
 8022e14:	ffc02c00 	.word	0xffc02c00

08022e18 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8022e18:	b480      	push	{r7}
 8022e1a:	b083      	sub	sp, #12
 8022e1c:	af00      	add	r7, sp, #0
 8022e1e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8022e20:	687b      	ldr	r3, [r7, #4]
 8022e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8022e26:	4618      	mov	r0, r3
 8022e28:	370c      	adds	r7, #12
 8022e2a:	46bd      	mov	sp, r7
 8022e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e30:	4770      	bx	lr

08022e32 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8022e32:	b480      	push	{r7}
 8022e34:	b083      	sub	sp, #12
 8022e36:	af00      	add	r7, sp, #0
 8022e38:	6078      	str	r0, [r7, #4]
 8022e3a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8022e3c:	683b      	ldr	r3, [r7, #0]
 8022e3e:	681a      	ldr	r2, [r3, #0]
 8022e40:	687b      	ldr	r3, [r7, #4]
 8022e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8022e46:	2300      	movs	r3, #0
}
 8022e48:	4618      	mov	r0, r3
 8022e4a:	370c      	adds	r7, #12
 8022e4c:	46bd      	mov	sp, r7
 8022e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e52:	4770      	bx	lr

08022e54 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8022e54:	b480      	push	{r7}
 8022e56:	b083      	sub	sp, #12
 8022e58:	af00      	add	r7, sp, #0
 8022e5a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8022e5c:	687b      	ldr	r3, [r7, #4]
 8022e5e:	681b      	ldr	r3, [r3, #0]
 8022e60:	f043 0203 	orr.w	r2, r3, #3
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8022e68:	2300      	movs	r3, #0
}
 8022e6a:	4618      	mov	r0, r3
 8022e6c:	370c      	adds	r7, #12
 8022e6e:	46bd      	mov	sp, r7
 8022e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e74:	4770      	bx	lr

08022e76 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8022e76:	b480      	push	{r7}
 8022e78:	b083      	sub	sp, #12
 8022e7a:	af00      	add	r7, sp, #0
 8022e7c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8022e7e:	687b      	ldr	r3, [r7, #4]
 8022e80:	681b      	ldr	r3, [r3, #0]
 8022e82:	f003 0303 	and.w	r3, r3, #3
}
 8022e86:	4618      	mov	r0, r3
 8022e88:	370c      	adds	r7, #12
 8022e8a:	46bd      	mov	sp, r7
 8022e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e90:	4770      	bx	lr
	...

08022e94 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8022e94:	b480      	push	{r7}
 8022e96:	b085      	sub	sp, #20
 8022e98:	af00      	add	r7, sp, #0
 8022e9a:	6078      	str	r0, [r7, #4]
 8022e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8022e9e:	2300      	movs	r3, #0
 8022ea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8022ea2:	683b      	ldr	r3, [r7, #0]
 8022ea4:	681a      	ldr	r2, [r3, #0]
 8022ea6:	687b      	ldr	r3, [r7, #4]
 8022ea8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8022eaa:	683b      	ldr	r3, [r7, #0]
 8022eac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8022eae:	683b      	ldr	r3, [r7, #0]
 8022eb0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8022eb2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8022eb4:	683b      	ldr	r3, [r7, #0]
 8022eb6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8022eb8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8022eba:	683b      	ldr	r3, [r7, #0]
 8022ebc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8022ebe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8022ec0:	68fa      	ldr	r2, [r7, #12]
 8022ec2:	4313      	orrs	r3, r2
 8022ec4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	68da      	ldr	r2, [r3, #12]
 8022eca:	4b06      	ldr	r3, [pc, #24]	; (8022ee4 <SDMMC_SendCommand+0x50>)
 8022ecc:	4013      	ands	r3, r2
 8022ece:	68fa      	ldr	r2, [r7, #12]
 8022ed0:	431a      	orrs	r2, r3
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8022ed6:	2300      	movs	r3, #0
}
 8022ed8:	4618      	mov	r0, r3
 8022eda:	3714      	adds	r7, #20
 8022edc:	46bd      	mov	sp, r7
 8022ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ee2:	4770      	bx	lr
 8022ee4:	fffee0c0 	.word	0xfffee0c0

08022ee8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8022ee8:	b480      	push	{r7}
 8022eea:	b083      	sub	sp, #12
 8022eec:	af00      	add	r7, sp, #0
 8022eee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8022ef0:	687b      	ldr	r3, [r7, #4]
 8022ef2:	691b      	ldr	r3, [r3, #16]
 8022ef4:	b2db      	uxtb	r3, r3
}
 8022ef6:	4618      	mov	r0, r3
 8022ef8:	370c      	adds	r7, #12
 8022efa:	46bd      	mov	sp, r7
 8022efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f00:	4770      	bx	lr

08022f02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8022f02:	b480      	push	{r7}
 8022f04:	b085      	sub	sp, #20
 8022f06:	af00      	add	r7, sp, #0
 8022f08:	6078      	str	r0, [r7, #4]
 8022f0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8022f0c:	687b      	ldr	r3, [r7, #4]
 8022f0e:	3314      	adds	r3, #20
 8022f10:	461a      	mov	r2, r3
 8022f12:	683b      	ldr	r3, [r7, #0]
 8022f14:	4413      	add	r3, r2
 8022f16:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8022f18:	68fb      	ldr	r3, [r7, #12]
 8022f1a:	681b      	ldr	r3, [r3, #0]
}
 8022f1c:	4618      	mov	r0, r3
 8022f1e:	3714      	adds	r7, #20
 8022f20:	46bd      	mov	sp, r7
 8022f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f26:	4770      	bx	lr

08022f28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8022f28:	b480      	push	{r7}
 8022f2a:	b085      	sub	sp, #20
 8022f2c:	af00      	add	r7, sp, #0
 8022f2e:	6078      	str	r0, [r7, #4]
 8022f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8022f32:	2300      	movs	r3, #0
 8022f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8022f36:	683b      	ldr	r3, [r7, #0]
 8022f38:	681a      	ldr	r2, [r3, #0]
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8022f3e:	683b      	ldr	r3, [r7, #0]
 8022f40:	685a      	ldr	r2, [r3, #4]
 8022f42:	687b      	ldr	r3, [r7, #4]
 8022f44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8022f46:	683b      	ldr	r3, [r7, #0]
 8022f48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8022f4a:	683b      	ldr	r3, [r7, #0]
 8022f4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8022f4e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8022f50:	683b      	ldr	r3, [r7, #0]
 8022f52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8022f54:	431a      	orrs	r2, r3
                       Data->DPSM);
 8022f56:	683b      	ldr	r3, [r7, #0]
 8022f58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8022f5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8022f5c:	68fa      	ldr	r2, [r7, #12]
 8022f5e:	4313      	orrs	r3, r2
 8022f60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8022f62:	687b      	ldr	r3, [r7, #4]
 8022f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8022f6a:	68fb      	ldr	r3, [r7, #12]
 8022f6c:	431a      	orrs	r2, r3
 8022f6e:	687b      	ldr	r3, [r7, #4]
 8022f70:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8022f72:	2300      	movs	r3, #0

}
 8022f74:	4618      	mov	r0, r3
 8022f76:	3714      	adds	r7, #20
 8022f78:	46bd      	mov	sp, r7
 8022f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f7e:	4770      	bx	lr

08022f80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8022f80:	b580      	push	{r7, lr}
 8022f82:	b088      	sub	sp, #32
 8022f84:	af00      	add	r7, sp, #0
 8022f86:	6078      	str	r0, [r7, #4]
 8022f88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8022f8a:	683b      	ldr	r3, [r7, #0]
 8022f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8022f8e:	2310      	movs	r3, #16
 8022f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022f96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022f98:	2300      	movs	r3, #0
 8022f9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022fa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022fa2:	f107 0308 	add.w	r3, r7, #8
 8022fa6:	4619      	mov	r1, r3
 8022fa8:	6878      	ldr	r0, [r7, #4]
 8022faa:	f7ff ff73 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8022fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8022fb2:	2110      	movs	r1, #16
 8022fb4:	6878      	ldr	r0, [r7, #4]
 8022fb6:	f000 faaf 	bl	8023518 <SDMMC_GetCmdResp1>
 8022fba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022fbc:	69fb      	ldr	r3, [r7, #28]
}
 8022fbe:	4618      	mov	r0, r3
 8022fc0:	3720      	adds	r7, #32
 8022fc2:	46bd      	mov	sp, r7
 8022fc4:	bd80      	pop	{r7, pc}

08022fc6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8022fc6:	b580      	push	{r7, lr}
 8022fc8:	b088      	sub	sp, #32
 8022fca:	af00      	add	r7, sp, #0
 8022fcc:	6078      	str	r0, [r7, #4]
 8022fce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8022fd0:	683b      	ldr	r3, [r7, #0]
 8022fd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8022fd4:	2311      	movs	r3, #17
 8022fd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8022fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022fde:	2300      	movs	r3, #0
 8022fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022fe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022fe8:	f107 0308 	add.w	r3, r7, #8
 8022fec:	4619      	mov	r1, r3
 8022fee:	6878      	ldr	r0, [r7, #4]
 8022ff0:	f7ff ff50 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8022ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8022ff8:	2111      	movs	r1, #17
 8022ffa:	6878      	ldr	r0, [r7, #4]
 8022ffc:	f000 fa8c 	bl	8023518 <SDMMC_GetCmdResp1>
 8023000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023002:	69fb      	ldr	r3, [r7, #28]
}
 8023004:	4618      	mov	r0, r3
 8023006:	3720      	adds	r7, #32
 8023008:	46bd      	mov	sp, r7
 802300a:	bd80      	pop	{r7, pc}

0802300c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 802300c:	b580      	push	{r7, lr}
 802300e:	b088      	sub	sp, #32
 8023010:	af00      	add	r7, sp, #0
 8023012:	6078      	str	r0, [r7, #4]
 8023014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8023016:	683b      	ldr	r3, [r7, #0]
 8023018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 802301a:	2312      	movs	r3, #18
 802301c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802301e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023024:	2300      	movs	r3, #0
 8023026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802302c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802302e:	f107 0308 	add.w	r3, r7, #8
 8023032:	4619      	mov	r1, r3
 8023034:	6878      	ldr	r0, [r7, #4]
 8023036:	f7ff ff2d 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 802303a:	f241 3288 	movw	r2, #5000	; 0x1388
 802303e:	2112      	movs	r1, #18
 8023040:	6878      	ldr	r0, [r7, #4]
 8023042:	f000 fa69 	bl	8023518 <SDMMC_GetCmdResp1>
 8023046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023048:	69fb      	ldr	r3, [r7, #28]
}
 802304a:	4618      	mov	r0, r3
 802304c:	3720      	adds	r7, #32
 802304e:	46bd      	mov	sp, r7
 8023050:	bd80      	pop	{r7, pc}

08023052 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8023052:	b580      	push	{r7, lr}
 8023054:	b088      	sub	sp, #32
 8023056:	af00      	add	r7, sp, #0
 8023058:	6078      	str	r0, [r7, #4]
 802305a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 802305c:	683b      	ldr	r3, [r7, #0]
 802305e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8023060:	2318      	movs	r3, #24
 8023062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8023064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802306a:	2300      	movs	r3, #0
 802306c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802306e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023074:	f107 0308 	add.w	r3, r7, #8
 8023078:	4619      	mov	r1, r3
 802307a:	6878      	ldr	r0, [r7, #4]
 802307c:	f7ff ff0a 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8023080:	f241 3288 	movw	r2, #5000	; 0x1388
 8023084:	2118      	movs	r1, #24
 8023086:	6878      	ldr	r0, [r7, #4]
 8023088:	f000 fa46 	bl	8023518 <SDMMC_GetCmdResp1>
 802308c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802308e:	69fb      	ldr	r3, [r7, #28]
}
 8023090:	4618      	mov	r0, r3
 8023092:	3720      	adds	r7, #32
 8023094:	46bd      	mov	sp, r7
 8023096:	bd80      	pop	{r7, pc}

08023098 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8023098:	b580      	push	{r7, lr}
 802309a:	b088      	sub	sp, #32
 802309c:	af00      	add	r7, sp, #0
 802309e:	6078      	str	r0, [r7, #4]
 80230a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80230a2:	683b      	ldr	r3, [r7, #0]
 80230a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80230a6:	2319      	movs	r3, #25
 80230a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80230aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80230ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80230b0:	2300      	movs	r3, #0
 80230b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80230b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80230b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80230ba:	f107 0308 	add.w	r3, r7, #8
 80230be:	4619      	mov	r1, r3
 80230c0:	6878      	ldr	r0, [r7, #4]
 80230c2:	f7ff fee7 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80230c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80230ca:	2119      	movs	r1, #25
 80230cc:	6878      	ldr	r0, [r7, #4]
 80230ce:	f000 fa23 	bl	8023518 <SDMMC_GetCmdResp1>
 80230d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80230d4:	69fb      	ldr	r3, [r7, #28]
}
 80230d6:	4618      	mov	r0, r3
 80230d8:	3720      	adds	r7, #32
 80230da:	46bd      	mov	sp, r7
 80230dc:	bd80      	pop	{r7, pc}
	...

080230e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80230e0:	b580      	push	{r7, lr}
 80230e2:	b088      	sub	sp, #32
 80230e4:	af00      	add	r7, sp, #0
 80230e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80230e8:	2300      	movs	r3, #0
 80230ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80230ec:	230c      	movs	r3, #12
 80230ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80230f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80230f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80230f6:	2300      	movs	r3, #0
 80230f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80230fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80230fe:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8023100:	687b      	ldr	r3, [r7, #4]
 8023102:	68db      	ldr	r3, [r3, #12]
 8023104:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8023108:	687b      	ldr	r3, [r7, #4]
 802310a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	68db      	ldr	r3, [r3, #12]
 8023110:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8023114:	687b      	ldr	r3, [r7, #4]
 8023116:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023118:	f107 0308 	add.w	r3, r7, #8
 802311c:	4619      	mov	r1, r3
 802311e:	6878      	ldr	r0, [r7, #4]
 8023120:	f7ff feb8 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8023124:	4a0b      	ldr	r2, [pc, #44]	; (8023154 <SDMMC_CmdStopTransfer+0x74>)
 8023126:	210c      	movs	r1, #12
 8023128:	6878      	ldr	r0, [r7, #4]
 802312a:	f000 f9f5 	bl	8023518 <SDMMC_GetCmdResp1>
 802312e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8023130:	687b      	ldr	r3, [r7, #4]
 8023132:	68db      	ldr	r3, [r3, #12]
 8023134:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8023138:	687b      	ldr	r3, [r7, #4]
 802313a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 802313c:	69fb      	ldr	r3, [r7, #28]
 802313e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8023142:	d101      	bne.n	8023148 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8023144:	2300      	movs	r3, #0
 8023146:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8023148:	69fb      	ldr	r3, [r7, #28]
}
 802314a:	4618      	mov	r0, r3
 802314c:	3720      	adds	r7, #32
 802314e:	46bd      	mov	sp, r7
 8023150:	bd80      	pop	{r7, pc}
 8023152:	bf00      	nop
 8023154:	05f5e100 	.word	0x05f5e100

08023158 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8023158:	b580      	push	{r7, lr}
 802315a:	b08a      	sub	sp, #40	; 0x28
 802315c:	af00      	add	r7, sp, #0
 802315e:	60f8      	str	r0, [r7, #12]
 8023160:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8023164:	683b      	ldr	r3, [r7, #0]
 8023166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8023168:	2307      	movs	r3, #7
 802316a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802316c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023170:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023172:	2300      	movs	r3, #0
 8023174:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802317a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802317c:	f107 0310 	add.w	r3, r7, #16
 8023180:	4619      	mov	r1, r3
 8023182:	68f8      	ldr	r0, [r7, #12]
 8023184:	f7ff fe86 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8023188:	f241 3288 	movw	r2, #5000	; 0x1388
 802318c:	2107      	movs	r1, #7
 802318e:	68f8      	ldr	r0, [r7, #12]
 8023190:	f000 f9c2 	bl	8023518 <SDMMC_GetCmdResp1>
 8023194:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8023196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8023198:	4618      	mov	r0, r3
 802319a:	3728      	adds	r7, #40	; 0x28
 802319c:	46bd      	mov	sp, r7
 802319e:	bd80      	pop	{r7, pc}

080231a0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80231a0:	b580      	push	{r7, lr}
 80231a2:	b088      	sub	sp, #32
 80231a4:	af00      	add	r7, sp, #0
 80231a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80231a8:	2300      	movs	r3, #0
 80231aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80231ac:	2300      	movs	r3, #0
 80231ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80231b0:	2300      	movs	r3, #0
 80231b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80231b4:	2300      	movs	r3, #0
 80231b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80231b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80231bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80231be:	f107 0308 	add.w	r3, r7, #8
 80231c2:	4619      	mov	r1, r3
 80231c4:	6878      	ldr	r0, [r7, #4]
 80231c6:	f7ff fe65 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80231ca:	6878      	ldr	r0, [r7, #4]
 80231cc:	f000 f976 	bl	80234bc <SDMMC_GetCmdError>
 80231d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80231d2:	69fb      	ldr	r3, [r7, #28]
}
 80231d4:	4618      	mov	r0, r3
 80231d6:	3720      	adds	r7, #32
 80231d8:	46bd      	mov	sp, r7
 80231da:	bd80      	pop	{r7, pc}

080231dc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80231dc:	b580      	push	{r7, lr}
 80231de:	b088      	sub	sp, #32
 80231e0:	af00      	add	r7, sp, #0
 80231e2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80231e4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80231e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80231ea:	2308      	movs	r3, #8
 80231ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80231ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80231f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80231f4:	2300      	movs	r3, #0
 80231f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80231f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80231fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80231fe:	f107 0308 	add.w	r3, r7, #8
 8023202:	4619      	mov	r1, r3
 8023204:	6878      	ldr	r0, [r7, #4]
 8023206:	f7ff fe45 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 802320a:	6878      	ldr	r0, [r7, #4]
 802320c:	f000 fb78 	bl	8023900 <SDMMC_GetCmdResp7>
 8023210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023212:	69fb      	ldr	r3, [r7, #28]
}
 8023214:	4618      	mov	r0, r3
 8023216:	3720      	adds	r7, #32
 8023218:	46bd      	mov	sp, r7
 802321a:	bd80      	pop	{r7, pc}

0802321c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802321c:	b580      	push	{r7, lr}
 802321e:	b088      	sub	sp, #32
 8023220:	af00      	add	r7, sp, #0
 8023222:	6078      	str	r0, [r7, #4]
 8023224:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8023226:	683b      	ldr	r3, [r7, #0]
 8023228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 802322a:	2337      	movs	r3, #55	; 0x37
 802322c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802322e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023234:	2300      	movs	r3, #0
 8023236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802323c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802323e:	f107 0308 	add.w	r3, r7, #8
 8023242:	4619      	mov	r1, r3
 8023244:	6878      	ldr	r0, [r7, #4]
 8023246:	f7ff fe25 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 802324a:	f241 3288 	movw	r2, #5000	; 0x1388
 802324e:	2137      	movs	r1, #55	; 0x37
 8023250:	6878      	ldr	r0, [r7, #4]
 8023252:	f000 f961 	bl	8023518 <SDMMC_GetCmdResp1>
 8023256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023258:	69fb      	ldr	r3, [r7, #28]
}
 802325a:	4618      	mov	r0, r3
 802325c:	3720      	adds	r7, #32
 802325e:	46bd      	mov	sp, r7
 8023260:	bd80      	pop	{r7, pc}

08023262 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8023262:	b580      	push	{r7, lr}
 8023264:	b088      	sub	sp, #32
 8023266:	af00      	add	r7, sp, #0
 8023268:	6078      	str	r0, [r7, #4]
 802326a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 802326c:	683b      	ldr	r3, [r7, #0]
 802326e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8023270:	2329      	movs	r3, #41	; 0x29
 8023272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8023274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802327a:	2300      	movs	r3, #0
 802327c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802327e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023284:	f107 0308 	add.w	r3, r7, #8
 8023288:	4619      	mov	r1, r3
 802328a:	6878      	ldr	r0, [r7, #4]
 802328c:	f7ff fe02 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8023290:	6878      	ldr	r0, [r7, #4]
 8023292:	f000 fa7d 	bl	8023790 <SDMMC_GetCmdResp3>
 8023296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023298:	69fb      	ldr	r3, [r7, #28]
}
 802329a:	4618      	mov	r0, r3
 802329c:	3720      	adds	r7, #32
 802329e:	46bd      	mov	sp, r7
 80232a0:	bd80      	pop	{r7, pc}

080232a2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80232a2:	b580      	push	{r7, lr}
 80232a4:	b088      	sub	sp, #32
 80232a6:	af00      	add	r7, sp, #0
 80232a8:	6078      	str	r0, [r7, #4]
 80232aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80232ac:	683b      	ldr	r3, [r7, #0]
 80232ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80232b0:	2306      	movs	r3, #6
 80232b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80232b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80232b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80232ba:	2300      	movs	r3, #0
 80232bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80232be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80232c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80232c4:	f107 0308 	add.w	r3, r7, #8
 80232c8:	4619      	mov	r1, r3
 80232ca:	6878      	ldr	r0, [r7, #4]
 80232cc:	f7ff fde2 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80232d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80232d4:	2106      	movs	r1, #6
 80232d6:	6878      	ldr	r0, [r7, #4]
 80232d8:	f000 f91e 	bl	8023518 <SDMMC_GetCmdResp1>
 80232dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80232de:	69fb      	ldr	r3, [r7, #28]
}
 80232e0:	4618      	mov	r0, r3
 80232e2:	3720      	adds	r7, #32
 80232e4:	46bd      	mov	sp, r7
 80232e6:	bd80      	pop	{r7, pc}

080232e8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80232e8:	b580      	push	{r7, lr}
 80232ea:	b088      	sub	sp, #32
 80232ec:	af00      	add	r7, sp, #0
 80232ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80232f0:	2300      	movs	r3, #0
 80232f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80232f4:	2333      	movs	r3, #51	; 0x33
 80232f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80232f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80232fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80232fe:	2300      	movs	r3, #0
 8023300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023308:	f107 0308 	add.w	r3, r7, #8
 802330c:	4619      	mov	r1, r3
 802330e:	6878      	ldr	r0, [r7, #4]
 8023310:	f7ff fdc0 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8023314:	f241 3288 	movw	r2, #5000	; 0x1388
 8023318:	2133      	movs	r1, #51	; 0x33
 802331a:	6878      	ldr	r0, [r7, #4]
 802331c:	f000 f8fc 	bl	8023518 <SDMMC_GetCmdResp1>
 8023320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023322:	69fb      	ldr	r3, [r7, #28]
}
 8023324:	4618      	mov	r0, r3
 8023326:	3720      	adds	r7, #32
 8023328:	46bd      	mov	sp, r7
 802332a:	bd80      	pop	{r7, pc}

0802332c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 802332c:	b580      	push	{r7, lr}
 802332e:	b088      	sub	sp, #32
 8023330:	af00      	add	r7, sp, #0
 8023332:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8023334:	2300      	movs	r3, #0
 8023336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8023338:	2302      	movs	r3, #2
 802333a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802333c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8023340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023342:	2300      	movs	r3, #0
 8023344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802334a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802334c:	f107 0308 	add.w	r3, r7, #8
 8023350:	4619      	mov	r1, r3
 8023352:	6878      	ldr	r0, [r7, #4]
 8023354:	f7ff fd9e 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8023358:	6878      	ldr	r0, [r7, #4]
 802335a:	f000 f9cf 	bl	80236fc <SDMMC_GetCmdResp2>
 802335e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8023360:	69fb      	ldr	r3, [r7, #28]
}
 8023362:	4618      	mov	r0, r3
 8023364:	3720      	adds	r7, #32
 8023366:	46bd      	mov	sp, r7
 8023368:	bd80      	pop	{r7, pc}

0802336a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802336a:	b580      	push	{r7, lr}
 802336c:	b088      	sub	sp, #32
 802336e:	af00      	add	r7, sp, #0
 8023370:	6078      	str	r0, [r7, #4]
 8023372:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8023374:	683b      	ldr	r3, [r7, #0]
 8023376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8023378:	2309      	movs	r3, #9
 802337a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802337c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8023380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023382:	2300      	movs	r3, #0
 8023384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802338a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802338c:	f107 0308 	add.w	r3, r7, #8
 8023390:	4619      	mov	r1, r3
 8023392:	6878      	ldr	r0, [r7, #4]
 8023394:	f7ff fd7e 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8023398:	6878      	ldr	r0, [r7, #4]
 802339a:	f000 f9af 	bl	80236fc <SDMMC_GetCmdResp2>
 802339e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80233a0:	69fb      	ldr	r3, [r7, #28]
}
 80233a2:	4618      	mov	r0, r3
 80233a4:	3720      	adds	r7, #32
 80233a6:	46bd      	mov	sp, r7
 80233a8:	bd80      	pop	{r7, pc}

080233aa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80233aa:	b580      	push	{r7, lr}
 80233ac:	b088      	sub	sp, #32
 80233ae:	af00      	add	r7, sp, #0
 80233b0:	6078      	str	r0, [r7, #4]
 80233b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80233b4:	2300      	movs	r3, #0
 80233b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80233b8:	2303      	movs	r3, #3
 80233ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80233bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80233c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80233c2:	2300      	movs	r3, #0
 80233c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80233c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80233ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80233cc:	f107 0308 	add.w	r3, r7, #8
 80233d0:	4619      	mov	r1, r3
 80233d2:	6878      	ldr	r0, [r7, #4]
 80233d4:	f7ff fd5e 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80233d8:	683a      	ldr	r2, [r7, #0]
 80233da:	2103      	movs	r1, #3
 80233dc:	6878      	ldr	r0, [r7, #4]
 80233de:	f000 fa17 	bl	8023810 <SDMMC_GetCmdResp6>
 80233e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80233e4:	69fb      	ldr	r3, [r7, #28]
}
 80233e6:	4618      	mov	r0, r3
 80233e8:	3720      	adds	r7, #32
 80233ea:	46bd      	mov	sp, r7
 80233ec:	bd80      	pop	{r7, pc}

080233ee <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80233ee:	b580      	push	{r7, lr}
 80233f0:	b088      	sub	sp, #32
 80233f2:	af00      	add	r7, sp, #0
 80233f4:	6078      	str	r0, [r7, #4]
 80233f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80233f8:	683b      	ldr	r3, [r7, #0]
 80233fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80233fc:	230d      	movs	r3, #13
 80233fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8023400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023406:	2300      	movs	r3, #0
 8023408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802340a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802340e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023410:	f107 0308 	add.w	r3, r7, #8
 8023414:	4619      	mov	r1, r3
 8023416:	6878      	ldr	r0, [r7, #4]
 8023418:	f7ff fd3c 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 802341c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023420:	210d      	movs	r1, #13
 8023422:	6878      	ldr	r0, [r7, #4]
 8023424:	f000 f878 	bl	8023518 <SDMMC_GetCmdResp1>
 8023428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802342a:	69fb      	ldr	r3, [r7, #28]
}
 802342c:	4618      	mov	r0, r3
 802342e:	3720      	adds	r7, #32
 8023430:	46bd      	mov	sp, r7
 8023432:	bd80      	pop	{r7, pc}

08023434 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8023434:	b580      	push	{r7, lr}
 8023436:	b088      	sub	sp, #32
 8023438:	af00      	add	r7, sp, #0
 802343a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 802343c:	2300      	movs	r3, #0
 802343e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8023440:	230d      	movs	r3, #13
 8023442:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8023444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8023448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802344a:	2300      	movs	r3, #0
 802344c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802344e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023454:	f107 0308 	add.w	r3, r7, #8
 8023458:	4619      	mov	r1, r3
 802345a:	6878      	ldr	r0, [r7, #4]
 802345c:	f7ff fd1a 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8023460:	f241 3288 	movw	r2, #5000	; 0x1388
 8023464:	210d      	movs	r1, #13
 8023466:	6878      	ldr	r0, [r7, #4]
 8023468:	f000 f856 	bl	8023518 <SDMMC_GetCmdResp1>
 802346c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802346e:	69fb      	ldr	r3, [r7, #28]
}
 8023470:	4618      	mov	r0, r3
 8023472:	3720      	adds	r7, #32
 8023474:	46bd      	mov	sp, r7
 8023476:	bd80      	pop	{r7, pc}

08023478 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8023478:	b580      	push	{r7, lr}
 802347a:	b088      	sub	sp, #32
 802347c:	af00      	add	r7, sp, #0
 802347e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8023480:	2300      	movs	r3, #0
 8023482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8023484:	230b      	movs	r3, #11
 8023486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8023488:	f44f 7380 	mov.w	r3, #256	; 0x100
 802348c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802348e:	2300      	movs	r3, #0
 8023490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023498:	f107 0308 	add.w	r3, r7, #8
 802349c:	4619      	mov	r1, r3
 802349e:	6878      	ldr	r0, [r7, #4]
 80234a0:	f7ff fcf8 	bl	8022e94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80234a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80234a8:	210b      	movs	r1, #11
 80234aa:	6878      	ldr	r0, [r7, #4]
 80234ac:	f000 f834 	bl	8023518 <SDMMC_GetCmdResp1>
 80234b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80234b2:	69fb      	ldr	r3, [r7, #28]
}
 80234b4:	4618      	mov	r0, r3
 80234b6:	3720      	adds	r7, #32
 80234b8:	46bd      	mov	sp, r7
 80234ba:	bd80      	pop	{r7, pc}

080234bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80234bc:	b480      	push	{r7}
 80234be:	b085      	sub	sp, #20
 80234c0:	af00      	add	r7, sp, #0
 80234c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80234c4:	4b11      	ldr	r3, [pc, #68]	; (802350c <SDMMC_GetCmdError+0x50>)
 80234c6:	681b      	ldr	r3, [r3, #0]
 80234c8:	4a11      	ldr	r2, [pc, #68]	; (8023510 <SDMMC_GetCmdError+0x54>)
 80234ca:	fba2 2303 	umull	r2, r3, r2, r3
 80234ce:	0a5b      	lsrs	r3, r3, #9
 80234d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80234d4:	fb02 f303 	mul.w	r3, r2, r3
 80234d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80234da:	68fb      	ldr	r3, [r7, #12]
 80234dc:	1e5a      	subs	r2, r3, #1
 80234de:	60fa      	str	r2, [r7, #12]
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d102      	bne.n	80234ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80234e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80234e8:	e009      	b.n	80234fe <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80234ea:	687b      	ldr	r3, [r7, #4]
 80234ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80234ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80234f2:	2b00      	cmp	r3, #0
 80234f4:	d0f1      	beq.n	80234da <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80234f6:	687b      	ldr	r3, [r7, #4]
 80234f8:	4a06      	ldr	r2, [pc, #24]	; (8023514 <SDMMC_GetCmdError+0x58>)
 80234fa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80234fc:	2300      	movs	r3, #0
}
 80234fe:	4618      	mov	r0, r3
 8023500:	3714      	adds	r7, #20
 8023502:	46bd      	mov	sp, r7
 8023504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023508:	4770      	bx	lr
 802350a:	bf00      	nop
 802350c:	24000658 	.word	0x24000658
 8023510:	10624dd3 	.word	0x10624dd3
 8023514:	002000c5 	.word	0x002000c5

08023518 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8023518:	b580      	push	{r7, lr}
 802351a:	b088      	sub	sp, #32
 802351c:	af00      	add	r7, sp, #0
 802351e:	60f8      	str	r0, [r7, #12]
 8023520:	460b      	mov	r3, r1
 8023522:	607a      	str	r2, [r7, #4]
 8023524:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8023526:	4b70      	ldr	r3, [pc, #448]	; (80236e8 <SDMMC_GetCmdResp1+0x1d0>)
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	4a70      	ldr	r2, [pc, #448]	; (80236ec <SDMMC_GetCmdResp1+0x1d4>)
 802352c:	fba2 2303 	umull	r2, r3, r2, r3
 8023530:	0a5a      	lsrs	r2, r3, #9
 8023532:	687b      	ldr	r3, [r7, #4]
 8023534:	fb02 f303 	mul.w	r3, r2, r3
 8023538:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 802353a:	69fb      	ldr	r3, [r7, #28]
 802353c:	1e5a      	subs	r2, r3, #1
 802353e:	61fa      	str	r2, [r7, #28]
 8023540:	2b00      	cmp	r3, #0
 8023542:	d102      	bne.n	802354a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8023544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023548:	e0c9      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 802354a:	68fb      	ldr	r3, [r7, #12]
 802354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802354e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8023550:	69ba      	ldr	r2, [r7, #24]
 8023552:	4b67      	ldr	r3, [pc, #412]	; (80236f0 <SDMMC_GetCmdResp1+0x1d8>)
 8023554:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8023556:	2b00      	cmp	r3, #0
 8023558:	d0ef      	beq.n	802353a <SDMMC_GetCmdResp1+0x22>
 802355a:	69bb      	ldr	r3, [r7, #24]
 802355c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8023560:	2b00      	cmp	r3, #0
 8023562:	d1ea      	bne.n	802353a <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8023564:	68fb      	ldr	r3, [r7, #12]
 8023566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023568:	f003 0304 	and.w	r3, r3, #4
 802356c:	2b00      	cmp	r3, #0
 802356e:	d004      	beq.n	802357a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8023570:	68fb      	ldr	r3, [r7, #12]
 8023572:	2204      	movs	r2, #4
 8023574:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8023576:	2304      	movs	r3, #4
 8023578:	e0b1      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802357a:	68fb      	ldr	r3, [r7, #12]
 802357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802357e:	f003 0301 	and.w	r3, r3, #1
 8023582:	2b00      	cmp	r3, #0
 8023584:	d004      	beq.n	8023590 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8023586:	68fb      	ldr	r3, [r7, #12]
 8023588:	2201      	movs	r2, #1
 802358a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 802358c:	2301      	movs	r3, #1
 802358e:	e0a6      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8023590:	68fb      	ldr	r3, [r7, #12]
 8023592:	4a58      	ldr	r2, [pc, #352]	; (80236f4 <SDMMC_GetCmdResp1+0x1dc>)
 8023594:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8023596:	68f8      	ldr	r0, [r7, #12]
 8023598:	f7ff fca6 	bl	8022ee8 <SDMMC_GetCommandResponse>
 802359c:	4603      	mov	r3, r0
 802359e:	461a      	mov	r2, r3
 80235a0:	7afb      	ldrb	r3, [r7, #11]
 80235a2:	4293      	cmp	r3, r2
 80235a4:	d001      	beq.n	80235aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80235a6:	2301      	movs	r3, #1
 80235a8:	e099      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80235aa:	2100      	movs	r1, #0
 80235ac:	68f8      	ldr	r0, [r7, #12]
 80235ae:	f7ff fca8 	bl	8022f02 <SDMMC_GetResponse>
 80235b2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80235b4:	697a      	ldr	r2, [r7, #20]
 80235b6:	4b50      	ldr	r3, [pc, #320]	; (80236f8 <SDMMC_GetCmdResp1+0x1e0>)
 80235b8:	4013      	ands	r3, r2
 80235ba:	2b00      	cmp	r3, #0
 80235bc:	d101      	bne.n	80235c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80235be:	2300      	movs	r3, #0
 80235c0:	e08d      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80235c2:	697b      	ldr	r3, [r7, #20]
 80235c4:	2b00      	cmp	r3, #0
 80235c6:	da02      	bge.n	80235ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80235c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80235cc:	e087      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80235ce:	697b      	ldr	r3, [r7, #20]
 80235d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80235d4:	2b00      	cmp	r3, #0
 80235d6:	d001      	beq.n	80235dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80235d8:	2340      	movs	r3, #64	; 0x40
 80235da:	e080      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80235dc:	697b      	ldr	r3, [r7, #20]
 80235de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80235e2:	2b00      	cmp	r3, #0
 80235e4:	d001      	beq.n	80235ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80235e6:	2380      	movs	r3, #128	; 0x80
 80235e8:	e079      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80235ea:	697b      	ldr	r3, [r7, #20]
 80235ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d002      	beq.n	80235fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80235f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80235f8:	e071      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80235fa:	697b      	ldr	r3, [r7, #20]
 80235fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023600:	2b00      	cmp	r3, #0
 8023602:	d002      	beq.n	802360a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8023604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8023608:	e069      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 802360a:	697b      	ldr	r3, [r7, #20]
 802360c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8023610:	2b00      	cmp	r3, #0
 8023612:	d002      	beq.n	802361a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8023614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023618:	e061      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 802361a:	697b      	ldr	r3, [r7, #20]
 802361c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023620:	2b00      	cmp	r3, #0
 8023622:	d002      	beq.n	802362a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8023624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023628:	e059      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 802362a:	697b      	ldr	r3, [r7, #20]
 802362c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8023630:	2b00      	cmp	r3, #0
 8023632:	d002      	beq.n	802363a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8023634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023638:	e051      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 802363a:	697b      	ldr	r3, [r7, #20]
 802363c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023640:	2b00      	cmp	r3, #0
 8023642:	d002      	beq.n	802364a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8023644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023648:	e049      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 802364a:	697b      	ldr	r3, [r7, #20]
 802364c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8023650:	2b00      	cmp	r3, #0
 8023652:	d002      	beq.n	802365a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8023654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8023658:	e041      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 802365a:	697b      	ldr	r3, [r7, #20]
 802365c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023660:	2b00      	cmp	r3, #0
 8023662:	d002      	beq.n	802366a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8023664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8023668:	e039      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 802366a:	697b      	ldr	r3, [r7, #20]
 802366c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023670:	2b00      	cmp	r3, #0
 8023672:	d002      	beq.n	802367a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8023674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8023678:	e031      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 802367a:	697b      	ldr	r3, [r7, #20]
 802367c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023680:	2b00      	cmp	r3, #0
 8023682:	d002      	beq.n	802368a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8023684:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023688:	e029      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 802368a:	697b      	ldr	r3, [r7, #20]
 802368c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023690:	2b00      	cmp	r3, #0
 8023692:	d002      	beq.n	802369a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8023694:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8023698:	e021      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 802369a:	697b      	ldr	r3, [r7, #20]
 802369c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80236a0:	2b00      	cmp	r3, #0
 80236a2:	d002      	beq.n	80236aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80236a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80236a8:	e019      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80236aa:	697b      	ldr	r3, [r7, #20]
 80236ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80236b0:	2b00      	cmp	r3, #0
 80236b2:	d002      	beq.n	80236ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80236b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80236b8:	e011      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80236ba:	697b      	ldr	r3, [r7, #20]
 80236bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	d002      	beq.n	80236ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80236c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80236c8:	e009      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80236ca:	697b      	ldr	r3, [r7, #20]
 80236cc:	f003 0308 	and.w	r3, r3, #8
 80236d0:	2b00      	cmp	r3, #0
 80236d2:	d002      	beq.n	80236da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80236d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80236d8:	e001      	b.n	80236de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80236da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80236de:	4618      	mov	r0, r3
 80236e0:	3720      	adds	r7, #32
 80236e2:	46bd      	mov	sp, r7
 80236e4:	bd80      	pop	{r7, pc}
 80236e6:	bf00      	nop
 80236e8:	24000658 	.word	0x24000658
 80236ec:	10624dd3 	.word	0x10624dd3
 80236f0:	00200045 	.word	0x00200045
 80236f4:	002000c5 	.word	0x002000c5
 80236f8:	fdffe008 	.word	0xfdffe008

080236fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80236fc:	b480      	push	{r7}
 80236fe:	b085      	sub	sp, #20
 8023700:	af00      	add	r7, sp, #0
 8023702:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8023704:	4b1f      	ldr	r3, [pc, #124]	; (8023784 <SDMMC_GetCmdResp2+0x88>)
 8023706:	681b      	ldr	r3, [r3, #0]
 8023708:	4a1f      	ldr	r2, [pc, #124]	; (8023788 <SDMMC_GetCmdResp2+0x8c>)
 802370a:	fba2 2303 	umull	r2, r3, r2, r3
 802370e:	0a5b      	lsrs	r3, r3, #9
 8023710:	f241 3288 	movw	r2, #5000	; 0x1388
 8023714:	fb02 f303 	mul.w	r3, r2, r3
 8023718:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 802371a:	68fb      	ldr	r3, [r7, #12]
 802371c:	1e5a      	subs	r2, r3, #1
 802371e:	60fa      	str	r2, [r7, #12]
 8023720:	2b00      	cmp	r3, #0
 8023722:	d102      	bne.n	802372a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8023724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023728:	e026      	b.n	8023778 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 802372a:	687b      	ldr	r3, [r7, #4]
 802372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802372e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8023730:	68bb      	ldr	r3, [r7, #8]
 8023732:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8023736:	2b00      	cmp	r3, #0
 8023738:	d0ef      	beq.n	802371a <SDMMC_GetCmdResp2+0x1e>
 802373a:	68bb      	ldr	r3, [r7, #8]
 802373c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8023740:	2b00      	cmp	r3, #0
 8023742:	d1ea      	bne.n	802371a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8023744:	687b      	ldr	r3, [r7, #4]
 8023746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023748:	f003 0304 	and.w	r3, r3, #4
 802374c:	2b00      	cmp	r3, #0
 802374e:	d004      	beq.n	802375a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8023750:	687b      	ldr	r3, [r7, #4]
 8023752:	2204      	movs	r2, #4
 8023754:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8023756:	2304      	movs	r3, #4
 8023758:	e00e      	b.n	8023778 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802375a:	687b      	ldr	r3, [r7, #4]
 802375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802375e:	f003 0301 	and.w	r3, r3, #1
 8023762:	2b00      	cmp	r3, #0
 8023764:	d004      	beq.n	8023770 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	2201      	movs	r2, #1
 802376a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 802376c:	2301      	movs	r3, #1
 802376e:	e003      	b.n	8023778 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	4a06      	ldr	r2, [pc, #24]	; (802378c <SDMMC_GetCmdResp2+0x90>)
 8023774:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8023776:	2300      	movs	r3, #0
}
 8023778:	4618      	mov	r0, r3
 802377a:	3714      	adds	r7, #20
 802377c:	46bd      	mov	sp, r7
 802377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023782:	4770      	bx	lr
 8023784:	24000658 	.word	0x24000658
 8023788:	10624dd3 	.word	0x10624dd3
 802378c:	002000c5 	.word	0x002000c5

08023790 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8023790:	b480      	push	{r7}
 8023792:	b085      	sub	sp, #20
 8023794:	af00      	add	r7, sp, #0
 8023796:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8023798:	4b1a      	ldr	r3, [pc, #104]	; (8023804 <SDMMC_GetCmdResp3+0x74>)
 802379a:	681b      	ldr	r3, [r3, #0]
 802379c:	4a1a      	ldr	r2, [pc, #104]	; (8023808 <SDMMC_GetCmdResp3+0x78>)
 802379e:	fba2 2303 	umull	r2, r3, r2, r3
 80237a2:	0a5b      	lsrs	r3, r3, #9
 80237a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80237a8:	fb02 f303 	mul.w	r3, r2, r3
 80237ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80237ae:	68fb      	ldr	r3, [r7, #12]
 80237b0:	1e5a      	subs	r2, r3, #1
 80237b2:	60fa      	str	r2, [r7, #12]
 80237b4:	2b00      	cmp	r3, #0
 80237b6:	d102      	bne.n	80237be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80237b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80237bc:	e01b      	b.n	80237f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80237c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80237c4:	68bb      	ldr	r3, [r7, #8]
 80237c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80237ca:	2b00      	cmp	r3, #0
 80237cc:	d0ef      	beq.n	80237ae <SDMMC_GetCmdResp3+0x1e>
 80237ce:	68bb      	ldr	r3, [r7, #8]
 80237d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	d1ea      	bne.n	80237ae <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80237d8:	687b      	ldr	r3, [r7, #4]
 80237da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80237dc:	f003 0304 	and.w	r3, r3, #4
 80237e0:	2b00      	cmp	r3, #0
 80237e2:	d004      	beq.n	80237ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80237e4:	687b      	ldr	r3, [r7, #4]
 80237e6:	2204      	movs	r2, #4
 80237e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80237ea:	2304      	movs	r3, #4
 80237ec:	e003      	b.n	80237f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80237ee:	687b      	ldr	r3, [r7, #4]
 80237f0:	4a06      	ldr	r2, [pc, #24]	; (802380c <SDMMC_GetCmdResp3+0x7c>)
 80237f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80237f4:	2300      	movs	r3, #0
}
 80237f6:	4618      	mov	r0, r3
 80237f8:	3714      	adds	r7, #20
 80237fa:	46bd      	mov	sp, r7
 80237fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023800:	4770      	bx	lr
 8023802:	bf00      	nop
 8023804:	24000658 	.word	0x24000658
 8023808:	10624dd3 	.word	0x10624dd3
 802380c:	002000c5 	.word	0x002000c5

08023810 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8023810:	b580      	push	{r7, lr}
 8023812:	b088      	sub	sp, #32
 8023814:	af00      	add	r7, sp, #0
 8023816:	60f8      	str	r0, [r7, #12]
 8023818:	460b      	mov	r3, r1
 802381a:	607a      	str	r2, [r7, #4]
 802381c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802381e:	4b35      	ldr	r3, [pc, #212]	; (80238f4 <SDMMC_GetCmdResp6+0xe4>)
 8023820:	681b      	ldr	r3, [r3, #0]
 8023822:	4a35      	ldr	r2, [pc, #212]	; (80238f8 <SDMMC_GetCmdResp6+0xe8>)
 8023824:	fba2 2303 	umull	r2, r3, r2, r3
 8023828:	0a5b      	lsrs	r3, r3, #9
 802382a:	f241 3288 	movw	r2, #5000	; 0x1388
 802382e:	fb02 f303 	mul.w	r3, r2, r3
 8023832:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8023834:	69fb      	ldr	r3, [r7, #28]
 8023836:	1e5a      	subs	r2, r3, #1
 8023838:	61fa      	str	r2, [r7, #28]
 802383a:	2b00      	cmp	r3, #0
 802383c:	d102      	bne.n	8023844 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 802383e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023842:	e052      	b.n	80238ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8023844:	68fb      	ldr	r3, [r7, #12]
 8023846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023848:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802384a:	69bb      	ldr	r3, [r7, #24]
 802384c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8023850:	2b00      	cmp	r3, #0
 8023852:	d0ef      	beq.n	8023834 <SDMMC_GetCmdResp6+0x24>
 8023854:	69bb      	ldr	r3, [r7, #24]
 8023856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802385a:	2b00      	cmp	r3, #0
 802385c:	d1ea      	bne.n	8023834 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802385e:	68fb      	ldr	r3, [r7, #12]
 8023860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023862:	f003 0304 	and.w	r3, r3, #4
 8023866:	2b00      	cmp	r3, #0
 8023868:	d004      	beq.n	8023874 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802386a:	68fb      	ldr	r3, [r7, #12]
 802386c:	2204      	movs	r2, #4
 802386e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8023870:	2304      	movs	r3, #4
 8023872:	e03a      	b.n	80238ea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8023874:	68fb      	ldr	r3, [r7, #12]
 8023876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023878:	f003 0301 	and.w	r3, r3, #1
 802387c:	2b00      	cmp	r3, #0
 802387e:	d004      	beq.n	802388a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8023880:	68fb      	ldr	r3, [r7, #12]
 8023882:	2201      	movs	r2, #1
 8023884:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8023886:	2301      	movs	r3, #1
 8023888:	e02f      	b.n	80238ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 802388a:	68f8      	ldr	r0, [r7, #12]
 802388c:	f7ff fb2c 	bl	8022ee8 <SDMMC_GetCommandResponse>
 8023890:	4603      	mov	r3, r0
 8023892:	461a      	mov	r2, r3
 8023894:	7afb      	ldrb	r3, [r7, #11]
 8023896:	4293      	cmp	r3, r2
 8023898:	d001      	beq.n	802389e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802389a:	2301      	movs	r3, #1
 802389c:	e025      	b.n	80238ea <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802389e:	68fb      	ldr	r3, [r7, #12]
 80238a0:	4a16      	ldr	r2, [pc, #88]	; (80238fc <SDMMC_GetCmdResp6+0xec>)
 80238a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80238a4:	2100      	movs	r1, #0
 80238a6:	68f8      	ldr	r0, [r7, #12]
 80238a8:	f7ff fb2b 	bl	8022f02 <SDMMC_GetResponse>
 80238ac:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80238ae:	697b      	ldr	r3, [r7, #20]
 80238b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	d106      	bne.n	80238c6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80238b8:	697b      	ldr	r3, [r7, #20]
 80238ba:	0c1b      	lsrs	r3, r3, #16
 80238bc:	b29a      	uxth	r2, r3
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80238c2:	2300      	movs	r3, #0
 80238c4:	e011      	b.n	80238ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80238c6:	697b      	ldr	r3, [r7, #20]
 80238c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80238cc:	2b00      	cmp	r3, #0
 80238ce:	d002      	beq.n	80238d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80238d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80238d4:	e009      	b.n	80238ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80238d6:	697b      	ldr	r3, [r7, #20]
 80238d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80238dc:	2b00      	cmp	r3, #0
 80238de:	d002      	beq.n	80238e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80238e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80238e4:	e001      	b.n	80238ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80238e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80238ea:	4618      	mov	r0, r3
 80238ec:	3720      	adds	r7, #32
 80238ee:	46bd      	mov	sp, r7
 80238f0:	bd80      	pop	{r7, pc}
 80238f2:	bf00      	nop
 80238f4:	24000658 	.word	0x24000658
 80238f8:	10624dd3 	.word	0x10624dd3
 80238fc:	002000c5 	.word	0x002000c5

08023900 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8023900:	b480      	push	{r7}
 8023902:	b085      	sub	sp, #20
 8023904:	af00      	add	r7, sp, #0
 8023906:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8023908:	4b22      	ldr	r3, [pc, #136]	; (8023994 <SDMMC_GetCmdResp7+0x94>)
 802390a:	681b      	ldr	r3, [r3, #0]
 802390c:	4a22      	ldr	r2, [pc, #136]	; (8023998 <SDMMC_GetCmdResp7+0x98>)
 802390e:	fba2 2303 	umull	r2, r3, r2, r3
 8023912:	0a5b      	lsrs	r3, r3, #9
 8023914:	f241 3288 	movw	r2, #5000	; 0x1388
 8023918:	fb02 f303 	mul.w	r3, r2, r3
 802391c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 802391e:	68fb      	ldr	r3, [r7, #12]
 8023920:	1e5a      	subs	r2, r3, #1
 8023922:	60fa      	str	r2, [r7, #12]
 8023924:	2b00      	cmp	r3, #0
 8023926:	d102      	bne.n	802392e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8023928:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802392c:	e02c      	b.n	8023988 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023932:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8023934:	68bb      	ldr	r3, [r7, #8]
 8023936:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802393a:	2b00      	cmp	r3, #0
 802393c:	d0ef      	beq.n	802391e <SDMMC_GetCmdResp7+0x1e>
 802393e:	68bb      	ldr	r3, [r7, #8]
 8023940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8023944:	2b00      	cmp	r3, #0
 8023946:	d1ea      	bne.n	802391e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8023948:	687b      	ldr	r3, [r7, #4]
 802394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802394c:	f003 0304 	and.w	r3, r3, #4
 8023950:	2b00      	cmp	r3, #0
 8023952:	d004      	beq.n	802395e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8023954:	687b      	ldr	r3, [r7, #4]
 8023956:	2204      	movs	r2, #4
 8023958:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802395a:	2304      	movs	r3, #4
 802395c:	e014      	b.n	8023988 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802395e:	687b      	ldr	r3, [r7, #4]
 8023960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023962:	f003 0301 	and.w	r3, r3, #1
 8023966:	2b00      	cmp	r3, #0
 8023968:	d004      	beq.n	8023974 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802396a:	687b      	ldr	r3, [r7, #4]
 802396c:	2201      	movs	r2, #1
 802396e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8023970:	2301      	movs	r3, #1
 8023972:	e009      	b.n	8023988 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802397c:	2b00      	cmp	r3, #0
 802397e:	d002      	beq.n	8023986 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	2240      	movs	r2, #64	; 0x40
 8023984:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8023986:	2300      	movs	r3, #0

}
 8023988:	4618      	mov	r0, r3
 802398a:	3714      	adds	r7, #20
 802398c:	46bd      	mov	sp, r7
 802398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023992:	4770      	bx	lr
 8023994:	24000658 	.word	0x24000658
 8023998:	10624dd3 	.word	0x10624dd3

0802399c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802399c:	b084      	sub	sp, #16
 802399e:	b580      	push	{r7, lr}
 80239a0:	b084      	sub	sp, #16
 80239a2:	af00      	add	r7, sp, #0
 80239a4:	6078      	str	r0, [r7, #4]
 80239a6:	f107 001c 	add.w	r0, r7, #28
 80239aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80239ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80239b0:	2b01      	cmp	r3, #1
 80239b2:	d120      	bne.n	80239f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80239b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	68da      	ldr	r2, [r3, #12]
 80239c4:	4b25      	ldr	r3, [pc, #148]	; (8023a5c <USB_CoreInit+0xc0>)
 80239c6:	4013      	ands	r3, r2
 80239c8:	687a      	ldr	r2, [r7, #4]
 80239ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80239cc:	687b      	ldr	r3, [r7, #4]
 80239ce:	68db      	ldr	r3, [r3, #12]
 80239d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80239d4:	687b      	ldr	r3, [r7, #4]
 80239d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80239d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80239da:	2b01      	cmp	r3, #1
 80239dc:	d105      	bne.n	80239ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	68db      	ldr	r3, [r3, #12]
 80239e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80239ea:	6878      	ldr	r0, [r7, #4]
 80239ec:	f000 fa4c 	bl	8023e88 <USB_CoreReset>
 80239f0:	4603      	mov	r3, r0
 80239f2:	73fb      	strb	r3, [r7, #15]
 80239f4:	e01a      	b.n	8023a2c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80239f6:	687b      	ldr	r3, [r7, #4]
 80239f8:	68db      	ldr	r3, [r3, #12]
 80239fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8023a02:	6878      	ldr	r0, [r7, #4]
 8023a04:	f000 fa40 	bl	8023e88 <USB_CoreReset>
 8023a08:	4603      	mov	r3, r0
 8023a0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8023a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023a0e:	2b00      	cmp	r3, #0
 8023a10:	d106      	bne.n	8023a20 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023a16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8023a1a:	687b      	ldr	r3, [r7, #4]
 8023a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8023a1e:	e005      	b.n	8023a2c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023a24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8023a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a2e:	2b01      	cmp	r3, #1
 8023a30:	d10b      	bne.n	8023a4a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8023a32:	687b      	ldr	r3, [r7, #4]
 8023a34:	689b      	ldr	r3, [r3, #8]
 8023a36:	f043 0206 	orr.w	r2, r3, #6
 8023a3a:	687b      	ldr	r3, [r7, #4]
 8023a3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	689b      	ldr	r3, [r3, #8]
 8023a42:	f043 0220 	orr.w	r2, r3, #32
 8023a46:	687b      	ldr	r3, [r7, #4]
 8023a48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8023a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8023a4c:	4618      	mov	r0, r3
 8023a4e:	3710      	adds	r7, #16
 8023a50:	46bd      	mov	sp, r7
 8023a52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8023a56:	b004      	add	sp, #16
 8023a58:	4770      	bx	lr
 8023a5a:	bf00      	nop
 8023a5c:	ffbdffbf 	.word	0xffbdffbf

08023a60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8023a60:	b480      	push	{r7}
 8023a62:	b083      	sub	sp, #12
 8023a64:	af00      	add	r7, sp, #0
 8023a66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8023a68:	687b      	ldr	r3, [r7, #4]
 8023a6a:	689b      	ldr	r3, [r3, #8]
 8023a6c:	f023 0201 	bic.w	r2, r3, #1
 8023a70:	687b      	ldr	r3, [r7, #4]
 8023a72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8023a74:	2300      	movs	r3, #0
}
 8023a76:	4618      	mov	r0, r3
 8023a78:	370c      	adds	r7, #12
 8023a7a:	46bd      	mov	sp, r7
 8023a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a80:	4770      	bx	lr

08023a82 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8023a82:	b580      	push	{r7, lr}
 8023a84:	b082      	sub	sp, #8
 8023a86:	af00      	add	r7, sp, #0
 8023a88:	6078      	str	r0, [r7, #4]
 8023a8a:	460b      	mov	r3, r1
 8023a8c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8023a8e:	687b      	ldr	r3, [r7, #4]
 8023a90:	68db      	ldr	r3, [r3, #12]
 8023a92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8023a9a:	78fb      	ldrb	r3, [r7, #3]
 8023a9c:	2b01      	cmp	r3, #1
 8023a9e:	d106      	bne.n	8023aae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8023aa0:	687b      	ldr	r3, [r7, #4]
 8023aa2:	68db      	ldr	r3, [r3, #12]
 8023aa4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	60da      	str	r2, [r3, #12]
 8023aac:	e00b      	b.n	8023ac6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8023aae:	78fb      	ldrb	r3, [r7, #3]
 8023ab0:	2b00      	cmp	r3, #0
 8023ab2:	d106      	bne.n	8023ac2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	68db      	ldr	r3, [r3, #12]
 8023ab8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8023abc:	687b      	ldr	r3, [r7, #4]
 8023abe:	60da      	str	r2, [r3, #12]
 8023ac0:	e001      	b.n	8023ac6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8023ac2:	2301      	movs	r3, #1
 8023ac4:	e003      	b.n	8023ace <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8023ac6:	2032      	movs	r0, #50	; 0x32
 8023ac8:	f7f1 f920 	bl	8014d0c <HAL_Delay>

  return HAL_OK;
 8023acc:	2300      	movs	r3, #0
}
 8023ace:	4618      	mov	r0, r3
 8023ad0:	3708      	adds	r7, #8
 8023ad2:	46bd      	mov	sp, r7
 8023ad4:	bd80      	pop	{r7, pc}
	...

08023ad8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8023ad8:	b084      	sub	sp, #16
 8023ada:	b580      	push	{r7, lr}
 8023adc:	b086      	sub	sp, #24
 8023ade:	af00      	add	r7, sp, #0
 8023ae0:	6078      	str	r0, [r7, #4]
 8023ae2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8023ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8023aea:	2300      	movs	r3, #0
 8023aec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8023af2:	2300      	movs	r3, #0
 8023af4:	613b      	str	r3, [r7, #16]
 8023af6:	e009      	b.n	8023b0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8023af8:	687a      	ldr	r2, [r7, #4]
 8023afa:	693b      	ldr	r3, [r7, #16]
 8023afc:	3340      	adds	r3, #64	; 0x40
 8023afe:	009b      	lsls	r3, r3, #2
 8023b00:	4413      	add	r3, r2
 8023b02:	2200      	movs	r2, #0
 8023b04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8023b06:	693b      	ldr	r3, [r7, #16]
 8023b08:	3301      	adds	r3, #1
 8023b0a:	613b      	str	r3, [r7, #16]
 8023b0c:	693b      	ldr	r3, [r7, #16]
 8023b0e:	2b0e      	cmp	r3, #14
 8023b10:	d9f2      	bls.n	8023af8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8023b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	d11c      	bne.n	8023b52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8023b18:	68fb      	ldr	r3, [r7, #12]
 8023b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023b1e:	685b      	ldr	r3, [r3, #4]
 8023b20:	68fa      	ldr	r2, [r7, #12]
 8023b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8023b26:	f043 0302 	orr.w	r3, r3, #2
 8023b2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8023b2c:	687b      	ldr	r3, [r7, #4]
 8023b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023b30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8023b34:	687b      	ldr	r3, [r7, #4]
 8023b36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8023b38:	687b      	ldr	r3, [r7, #4]
 8023b3a:	681b      	ldr	r3, [r3, #0]
 8023b3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	681b      	ldr	r3, [r3, #0]
 8023b48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8023b4c:	687b      	ldr	r3, [r7, #4]
 8023b4e:	601a      	str	r2, [r3, #0]
 8023b50:	e005      	b.n	8023b5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023b56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8023b5e:	68fb      	ldr	r3, [r7, #12]
 8023b60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8023b64:	461a      	mov	r2, r3
 8023b66:	2300      	movs	r3, #0
 8023b68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8023b6a:	68fb      	ldr	r3, [r7, #12]
 8023b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023b70:	4619      	mov	r1, r3
 8023b72:	68fb      	ldr	r3, [r7, #12]
 8023b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023b78:	461a      	mov	r2, r3
 8023b7a:	680b      	ldr	r3, [r1, #0]
 8023b7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8023b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b80:	2b01      	cmp	r3, #1
 8023b82:	d10c      	bne.n	8023b9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8023b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	d104      	bne.n	8023b94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8023b8a:	2100      	movs	r1, #0
 8023b8c:	6878      	ldr	r0, [r7, #4]
 8023b8e:	f000 f949 	bl	8023e24 <USB_SetDevSpeed>
 8023b92:	e008      	b.n	8023ba6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8023b94:	2101      	movs	r1, #1
 8023b96:	6878      	ldr	r0, [r7, #4]
 8023b98:	f000 f944 	bl	8023e24 <USB_SetDevSpeed>
 8023b9c:	e003      	b.n	8023ba6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8023b9e:	2103      	movs	r1, #3
 8023ba0:	6878      	ldr	r0, [r7, #4]
 8023ba2:	f000 f93f 	bl	8023e24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8023ba6:	2110      	movs	r1, #16
 8023ba8:	6878      	ldr	r0, [r7, #4]
 8023baa:	f000 f8f3 	bl	8023d94 <USB_FlushTxFifo>
 8023bae:	4603      	mov	r3, r0
 8023bb0:	2b00      	cmp	r3, #0
 8023bb2:	d001      	beq.n	8023bb8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8023bb4:	2301      	movs	r3, #1
 8023bb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8023bb8:	6878      	ldr	r0, [r7, #4]
 8023bba:	f000 f911 	bl	8023de0 <USB_FlushRxFifo>
 8023bbe:	4603      	mov	r3, r0
 8023bc0:	2b00      	cmp	r3, #0
 8023bc2:	d001      	beq.n	8023bc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8023bc4:	2301      	movs	r3, #1
 8023bc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8023bc8:	68fb      	ldr	r3, [r7, #12]
 8023bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023bce:	461a      	mov	r2, r3
 8023bd0:	2300      	movs	r3, #0
 8023bd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8023bd4:	68fb      	ldr	r3, [r7, #12]
 8023bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023bda:	461a      	mov	r2, r3
 8023bdc:	2300      	movs	r3, #0
 8023bde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8023be0:	68fb      	ldr	r3, [r7, #12]
 8023be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023be6:	461a      	mov	r2, r3
 8023be8:	2300      	movs	r3, #0
 8023bea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023bec:	2300      	movs	r3, #0
 8023bee:	613b      	str	r3, [r7, #16]
 8023bf0:	e043      	b.n	8023c7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8023bf2:	693b      	ldr	r3, [r7, #16]
 8023bf4:	015a      	lsls	r2, r3, #5
 8023bf6:	68fb      	ldr	r3, [r7, #12]
 8023bf8:	4413      	add	r3, r2
 8023bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023bfe:	681b      	ldr	r3, [r3, #0]
 8023c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8023c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023c08:	d118      	bne.n	8023c3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8023c0a:	693b      	ldr	r3, [r7, #16]
 8023c0c:	2b00      	cmp	r3, #0
 8023c0e:	d10a      	bne.n	8023c26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8023c10:	693b      	ldr	r3, [r7, #16]
 8023c12:	015a      	lsls	r2, r3, #5
 8023c14:	68fb      	ldr	r3, [r7, #12]
 8023c16:	4413      	add	r3, r2
 8023c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023c1c:	461a      	mov	r2, r3
 8023c1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8023c22:	6013      	str	r3, [r2, #0]
 8023c24:	e013      	b.n	8023c4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8023c26:	693b      	ldr	r3, [r7, #16]
 8023c28:	015a      	lsls	r2, r3, #5
 8023c2a:	68fb      	ldr	r3, [r7, #12]
 8023c2c:	4413      	add	r3, r2
 8023c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023c32:	461a      	mov	r2, r3
 8023c34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8023c38:	6013      	str	r3, [r2, #0]
 8023c3a:	e008      	b.n	8023c4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8023c3c:	693b      	ldr	r3, [r7, #16]
 8023c3e:	015a      	lsls	r2, r3, #5
 8023c40:	68fb      	ldr	r3, [r7, #12]
 8023c42:	4413      	add	r3, r2
 8023c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023c48:	461a      	mov	r2, r3
 8023c4a:	2300      	movs	r3, #0
 8023c4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8023c4e:	693b      	ldr	r3, [r7, #16]
 8023c50:	015a      	lsls	r2, r3, #5
 8023c52:	68fb      	ldr	r3, [r7, #12]
 8023c54:	4413      	add	r3, r2
 8023c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023c5a:	461a      	mov	r2, r3
 8023c5c:	2300      	movs	r3, #0
 8023c5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8023c60:	693b      	ldr	r3, [r7, #16]
 8023c62:	015a      	lsls	r2, r3, #5
 8023c64:	68fb      	ldr	r3, [r7, #12]
 8023c66:	4413      	add	r3, r2
 8023c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023c6c:	461a      	mov	r2, r3
 8023c6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8023c72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023c74:	693b      	ldr	r3, [r7, #16]
 8023c76:	3301      	adds	r3, #1
 8023c78:	613b      	str	r3, [r7, #16]
 8023c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c7c:	693a      	ldr	r2, [r7, #16]
 8023c7e:	429a      	cmp	r2, r3
 8023c80:	d3b7      	bcc.n	8023bf2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023c82:	2300      	movs	r3, #0
 8023c84:	613b      	str	r3, [r7, #16]
 8023c86:	e043      	b.n	8023d10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8023c88:	693b      	ldr	r3, [r7, #16]
 8023c8a:	015a      	lsls	r2, r3, #5
 8023c8c:	68fb      	ldr	r3, [r7, #12]
 8023c8e:	4413      	add	r3, r2
 8023c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023c94:	681b      	ldr	r3, [r3, #0]
 8023c96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8023c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023c9e:	d118      	bne.n	8023cd2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8023ca0:	693b      	ldr	r3, [r7, #16]
 8023ca2:	2b00      	cmp	r3, #0
 8023ca4:	d10a      	bne.n	8023cbc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8023ca6:	693b      	ldr	r3, [r7, #16]
 8023ca8:	015a      	lsls	r2, r3, #5
 8023caa:	68fb      	ldr	r3, [r7, #12]
 8023cac:	4413      	add	r3, r2
 8023cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023cb2:	461a      	mov	r2, r3
 8023cb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8023cb8:	6013      	str	r3, [r2, #0]
 8023cba:	e013      	b.n	8023ce4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8023cbc:	693b      	ldr	r3, [r7, #16]
 8023cbe:	015a      	lsls	r2, r3, #5
 8023cc0:	68fb      	ldr	r3, [r7, #12]
 8023cc2:	4413      	add	r3, r2
 8023cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023cc8:	461a      	mov	r2, r3
 8023cca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8023cce:	6013      	str	r3, [r2, #0]
 8023cd0:	e008      	b.n	8023ce4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8023cd2:	693b      	ldr	r3, [r7, #16]
 8023cd4:	015a      	lsls	r2, r3, #5
 8023cd6:	68fb      	ldr	r3, [r7, #12]
 8023cd8:	4413      	add	r3, r2
 8023cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023cde:	461a      	mov	r2, r3
 8023ce0:	2300      	movs	r3, #0
 8023ce2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8023ce4:	693b      	ldr	r3, [r7, #16]
 8023ce6:	015a      	lsls	r2, r3, #5
 8023ce8:	68fb      	ldr	r3, [r7, #12]
 8023cea:	4413      	add	r3, r2
 8023cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023cf0:	461a      	mov	r2, r3
 8023cf2:	2300      	movs	r3, #0
 8023cf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8023cf6:	693b      	ldr	r3, [r7, #16]
 8023cf8:	015a      	lsls	r2, r3, #5
 8023cfa:	68fb      	ldr	r3, [r7, #12]
 8023cfc:	4413      	add	r3, r2
 8023cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023d02:	461a      	mov	r2, r3
 8023d04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8023d08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023d0a:	693b      	ldr	r3, [r7, #16]
 8023d0c:	3301      	adds	r3, #1
 8023d0e:	613b      	str	r3, [r7, #16]
 8023d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d12:	693a      	ldr	r2, [r7, #16]
 8023d14:	429a      	cmp	r2, r3
 8023d16:	d3b7      	bcc.n	8023c88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8023d18:	68fb      	ldr	r3, [r7, #12]
 8023d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023d1e:	691b      	ldr	r3, [r3, #16]
 8023d20:	68fa      	ldr	r2, [r7, #12]
 8023d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8023d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023d2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	2200      	movs	r2, #0
 8023d30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8023d32:	687b      	ldr	r3, [r7, #4]
 8023d34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8023d38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8023d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d3c:	2b00      	cmp	r3, #0
 8023d3e:	d105      	bne.n	8023d4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	699b      	ldr	r3, [r3, #24]
 8023d44:	f043 0210 	orr.w	r2, r3, #16
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8023d4c:	687b      	ldr	r3, [r7, #4]
 8023d4e:	699a      	ldr	r2, [r3, #24]
 8023d50:	4b0e      	ldr	r3, [pc, #56]	; (8023d8c <USB_DevInit+0x2b4>)
 8023d52:	4313      	orrs	r3, r2
 8023d54:	687a      	ldr	r2, [r7, #4]
 8023d56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8023d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	d005      	beq.n	8023d6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	699b      	ldr	r3, [r3, #24]
 8023d62:	f043 0208 	orr.w	r2, r3, #8
 8023d66:	687b      	ldr	r3, [r7, #4]
 8023d68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8023d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023d6c:	2b01      	cmp	r3, #1
 8023d6e:	d105      	bne.n	8023d7c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8023d70:	687b      	ldr	r3, [r7, #4]
 8023d72:	699a      	ldr	r2, [r3, #24]
 8023d74:	4b06      	ldr	r3, [pc, #24]	; (8023d90 <USB_DevInit+0x2b8>)
 8023d76:	4313      	orrs	r3, r2
 8023d78:	687a      	ldr	r2, [r7, #4]
 8023d7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8023d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8023d7e:	4618      	mov	r0, r3
 8023d80:	3718      	adds	r7, #24
 8023d82:	46bd      	mov	sp, r7
 8023d84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8023d88:	b004      	add	sp, #16
 8023d8a:	4770      	bx	lr
 8023d8c:	803c3800 	.word	0x803c3800
 8023d90:	40000004 	.word	0x40000004

08023d94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8023d94:	b480      	push	{r7}
 8023d96:	b085      	sub	sp, #20
 8023d98:	af00      	add	r7, sp, #0
 8023d9a:	6078      	str	r0, [r7, #4]
 8023d9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8023d9e:	2300      	movs	r3, #0
 8023da0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8023da2:	683b      	ldr	r3, [r7, #0]
 8023da4:	019b      	lsls	r3, r3, #6
 8023da6:	f043 0220 	orr.w	r2, r3, #32
 8023daa:	687b      	ldr	r3, [r7, #4]
 8023dac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8023dae:	68fb      	ldr	r3, [r7, #12]
 8023db0:	3301      	adds	r3, #1
 8023db2:	60fb      	str	r3, [r7, #12]
 8023db4:	68fb      	ldr	r3, [r7, #12]
 8023db6:	4a09      	ldr	r2, [pc, #36]	; (8023ddc <USB_FlushTxFifo+0x48>)
 8023db8:	4293      	cmp	r3, r2
 8023dba:	d901      	bls.n	8023dc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8023dbc:	2303      	movs	r3, #3
 8023dbe:	e006      	b.n	8023dce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8023dc0:	687b      	ldr	r3, [r7, #4]
 8023dc2:	691b      	ldr	r3, [r3, #16]
 8023dc4:	f003 0320 	and.w	r3, r3, #32
 8023dc8:	2b20      	cmp	r3, #32
 8023dca:	d0f0      	beq.n	8023dae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8023dcc:	2300      	movs	r3, #0
}
 8023dce:	4618      	mov	r0, r3
 8023dd0:	3714      	adds	r7, #20
 8023dd2:	46bd      	mov	sp, r7
 8023dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dd8:	4770      	bx	lr
 8023dda:	bf00      	nop
 8023ddc:	00030d40 	.word	0x00030d40

08023de0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8023de0:	b480      	push	{r7}
 8023de2:	b085      	sub	sp, #20
 8023de4:	af00      	add	r7, sp, #0
 8023de6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8023de8:	2300      	movs	r3, #0
 8023dea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8023dec:	687b      	ldr	r3, [r7, #4]
 8023dee:	2210      	movs	r2, #16
 8023df0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8023df2:	68fb      	ldr	r3, [r7, #12]
 8023df4:	3301      	adds	r3, #1
 8023df6:	60fb      	str	r3, [r7, #12]
 8023df8:	68fb      	ldr	r3, [r7, #12]
 8023dfa:	4a09      	ldr	r2, [pc, #36]	; (8023e20 <USB_FlushRxFifo+0x40>)
 8023dfc:	4293      	cmp	r3, r2
 8023dfe:	d901      	bls.n	8023e04 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8023e00:	2303      	movs	r3, #3
 8023e02:	e006      	b.n	8023e12 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8023e04:	687b      	ldr	r3, [r7, #4]
 8023e06:	691b      	ldr	r3, [r3, #16]
 8023e08:	f003 0310 	and.w	r3, r3, #16
 8023e0c:	2b10      	cmp	r3, #16
 8023e0e:	d0f0      	beq.n	8023df2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8023e10:	2300      	movs	r3, #0
}
 8023e12:	4618      	mov	r0, r3
 8023e14:	3714      	adds	r7, #20
 8023e16:	46bd      	mov	sp, r7
 8023e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e1c:	4770      	bx	lr
 8023e1e:	bf00      	nop
 8023e20:	00030d40 	.word	0x00030d40

08023e24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8023e24:	b480      	push	{r7}
 8023e26:	b085      	sub	sp, #20
 8023e28:	af00      	add	r7, sp, #0
 8023e2a:	6078      	str	r0, [r7, #4]
 8023e2c:	460b      	mov	r3, r1
 8023e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8023e34:	68fb      	ldr	r3, [r7, #12]
 8023e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023e3a:	681a      	ldr	r2, [r3, #0]
 8023e3c:	78fb      	ldrb	r3, [r7, #3]
 8023e3e:	68f9      	ldr	r1, [r7, #12]
 8023e40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8023e44:	4313      	orrs	r3, r2
 8023e46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8023e48:	2300      	movs	r3, #0
}
 8023e4a:	4618      	mov	r0, r3
 8023e4c:	3714      	adds	r7, #20
 8023e4e:	46bd      	mov	sp, r7
 8023e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e54:	4770      	bx	lr

08023e56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8023e56:	b580      	push	{r7, lr}
 8023e58:	b084      	sub	sp, #16
 8023e5a:	af00      	add	r7, sp, #0
 8023e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8023e5e:	687b      	ldr	r3, [r7, #4]
 8023e60:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8023e62:	68fb      	ldr	r3, [r7, #12]
 8023e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023e68:	685b      	ldr	r3, [r3, #4]
 8023e6a:	68fa      	ldr	r2, [r7, #12]
 8023e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8023e70:	f043 0302 	orr.w	r3, r3, #2
 8023e74:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8023e76:	2003      	movs	r0, #3
 8023e78:	f7f0 ff48 	bl	8014d0c <HAL_Delay>

  return HAL_OK;
 8023e7c:	2300      	movs	r3, #0
}
 8023e7e:	4618      	mov	r0, r3
 8023e80:	3710      	adds	r7, #16
 8023e82:	46bd      	mov	sp, r7
 8023e84:	bd80      	pop	{r7, pc}
	...

08023e88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8023e88:	b480      	push	{r7}
 8023e8a:	b085      	sub	sp, #20
 8023e8c:	af00      	add	r7, sp, #0
 8023e8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8023e90:	2300      	movs	r3, #0
 8023e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8023e94:	68fb      	ldr	r3, [r7, #12]
 8023e96:	3301      	adds	r3, #1
 8023e98:	60fb      	str	r3, [r7, #12]
 8023e9a:	68fb      	ldr	r3, [r7, #12]
 8023e9c:	4a13      	ldr	r2, [pc, #76]	; (8023eec <USB_CoreReset+0x64>)
 8023e9e:	4293      	cmp	r3, r2
 8023ea0:	d901      	bls.n	8023ea6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8023ea2:	2303      	movs	r3, #3
 8023ea4:	e01b      	b.n	8023ede <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8023ea6:	687b      	ldr	r3, [r7, #4]
 8023ea8:	691b      	ldr	r3, [r3, #16]
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	daf2      	bge.n	8023e94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8023eae:	2300      	movs	r3, #0
 8023eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8023eb2:	687b      	ldr	r3, [r7, #4]
 8023eb4:	691b      	ldr	r3, [r3, #16]
 8023eb6:	f043 0201 	orr.w	r2, r3, #1
 8023eba:	687b      	ldr	r3, [r7, #4]
 8023ebc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8023ebe:	68fb      	ldr	r3, [r7, #12]
 8023ec0:	3301      	adds	r3, #1
 8023ec2:	60fb      	str	r3, [r7, #12]
 8023ec4:	68fb      	ldr	r3, [r7, #12]
 8023ec6:	4a09      	ldr	r2, [pc, #36]	; (8023eec <USB_CoreReset+0x64>)
 8023ec8:	4293      	cmp	r3, r2
 8023eca:	d901      	bls.n	8023ed0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8023ecc:	2303      	movs	r3, #3
 8023ece:	e006      	b.n	8023ede <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8023ed0:	687b      	ldr	r3, [r7, #4]
 8023ed2:	691b      	ldr	r3, [r3, #16]
 8023ed4:	f003 0301 	and.w	r3, r3, #1
 8023ed8:	2b01      	cmp	r3, #1
 8023eda:	d0f0      	beq.n	8023ebe <USB_CoreReset+0x36>

  return HAL_OK;
 8023edc:	2300      	movs	r3, #0
}
 8023ede:	4618      	mov	r0, r3
 8023ee0:	3714      	adds	r7, #20
 8023ee2:	46bd      	mov	sp, r7
 8023ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ee8:	4770      	bx	lr
 8023eea:	bf00      	nop
 8023eec:	00030d40 	.word	0x00030d40

08023ef0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8023ef0:	b580      	push	{r7, lr}
 8023ef2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8023ef4:	4904      	ldr	r1, [pc, #16]	; (8023f08 <MX_FATFS_Init+0x18>)
 8023ef6:	4805      	ldr	r0, [pc, #20]	; (8023f0c <MX_FATFS_Init+0x1c>)
 8023ef8:	f002 fcb4 	bl	8026864 <FATFS_LinkDriver>
 8023efc:	4603      	mov	r3, r0
 8023efe:	461a      	mov	r2, r3
 8023f00:	4b03      	ldr	r3, [pc, #12]	; (8023f10 <MX_FATFS_Init+0x20>)
 8023f02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8023f04:	bf00      	nop
 8023f06:	bd80      	pop	{r7, pc}
 8023f08:	2400cefc 	.word	0x2400cefc
 8023f0c:	0802fc4c 	.word	0x0802fc4c
 8023f10:	2400cef8 	.word	0x2400cef8

08023f14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8023f14:	b480      	push	{r7}
 8023f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8023f18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8023f1a:	4618      	mov	r0, r3
 8023f1c:	46bd      	mov	sp, r7
 8023f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f22:	4770      	bx	lr

08023f24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8023f24:	b580      	push	{r7, lr}
 8023f26:	b082      	sub	sp, #8
 8023f28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8023f2a:	2300      	movs	r3, #0
 8023f2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8023f2e:	f000 f885 	bl	802403c <BSP_SD_IsDetected>
 8023f32:	4603      	mov	r3, r0
 8023f34:	2b01      	cmp	r3, #1
 8023f36:	d001      	beq.n	8023f3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8023f38:	2302      	movs	r3, #2
 8023f3a:	e012      	b.n	8023f62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8023f3c:	480b      	ldr	r0, [pc, #44]	; (8023f6c <BSP_SD_Init+0x48>)
 8023f3e:	f7fa f8ef 	bl	801e120 <HAL_SD_Init>
 8023f42:	4603      	mov	r3, r0
 8023f44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8023f46:	79fb      	ldrb	r3, [r7, #7]
 8023f48:	2b00      	cmp	r3, #0
 8023f4a:	d109      	bne.n	8023f60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8023f4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8023f50:	4806      	ldr	r0, [pc, #24]	; (8023f6c <BSP_SD_Init+0x48>)
 8023f52:	f7fa ffab 	bl	801eeac <HAL_SD_ConfigWideBusOperation>
 8023f56:	4603      	mov	r3, r0
 8023f58:	2b00      	cmp	r3, #0
 8023f5a:	d001      	beq.n	8023f60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8023f5c:	2301      	movs	r3, #1
 8023f5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8023f60:	79fb      	ldrb	r3, [r7, #7]
}
 8023f62:	4618      	mov	r0, r3
 8023f64:	3708      	adds	r7, #8
 8023f66:	46bd      	mov	sp, r7
 8023f68:	bd80      	pop	{r7, pc}
 8023f6a:	bf00      	nop
 8023f6c:	2400c4ec 	.word	0x2400c4ec

08023f70 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8023f70:	b580      	push	{r7, lr}
 8023f72:	b086      	sub	sp, #24
 8023f74:	af00      	add	r7, sp, #0
 8023f76:	60f8      	str	r0, [r7, #12]
 8023f78:	60b9      	str	r1, [r7, #8]
 8023f7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8023f7c:	2300      	movs	r3, #0
 8023f7e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8023f80:	687b      	ldr	r3, [r7, #4]
 8023f82:	68ba      	ldr	r2, [r7, #8]
 8023f84:	68f9      	ldr	r1, [r7, #12]
 8023f86:	4806      	ldr	r0, [pc, #24]	; (8023fa0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8023f88:	f7fa f9ee 	bl	801e368 <HAL_SD_ReadBlocks_DMA>
 8023f8c:	4603      	mov	r3, r0
 8023f8e:	2b00      	cmp	r3, #0
 8023f90:	d001      	beq.n	8023f96 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8023f92:	2301      	movs	r3, #1
 8023f94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8023f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8023f98:	4618      	mov	r0, r3
 8023f9a:	3718      	adds	r7, #24
 8023f9c:	46bd      	mov	sp, r7
 8023f9e:	bd80      	pop	{r7, pc}
 8023fa0:	2400c4ec 	.word	0x2400c4ec

08023fa4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8023fa4:	b580      	push	{r7, lr}
 8023fa6:	b086      	sub	sp, #24
 8023fa8:	af00      	add	r7, sp, #0
 8023faa:	60f8      	str	r0, [r7, #12]
 8023fac:	60b9      	str	r1, [r7, #8]
 8023fae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8023fb0:	2300      	movs	r3, #0
 8023fb2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8023fb4:	687b      	ldr	r3, [r7, #4]
 8023fb6:	68ba      	ldr	r2, [r7, #8]
 8023fb8:	68f9      	ldr	r1, [r7, #12]
 8023fba:	4806      	ldr	r0, [pc, #24]	; (8023fd4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8023fbc:	f7fa fa7c 	bl	801e4b8 <HAL_SD_WriteBlocks_DMA>
 8023fc0:	4603      	mov	r3, r0
 8023fc2:	2b00      	cmp	r3, #0
 8023fc4:	d001      	beq.n	8023fca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8023fc6:	2301      	movs	r3, #1
 8023fc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8023fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8023fcc:	4618      	mov	r0, r3
 8023fce:	3718      	adds	r7, #24
 8023fd0:	46bd      	mov	sp, r7
 8023fd2:	bd80      	pop	{r7, pc}
 8023fd4:	2400c4ec 	.word	0x2400c4ec

08023fd8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8023fd8:	b580      	push	{r7, lr}
 8023fda:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8023fdc:	4805      	ldr	r0, [pc, #20]	; (8023ff4 <BSP_SD_GetCardState+0x1c>)
 8023fde:	f7fb f80f 	bl	801f000 <HAL_SD_GetCardState>
 8023fe2:	4603      	mov	r3, r0
 8023fe4:	2b04      	cmp	r3, #4
 8023fe6:	bf14      	ite	ne
 8023fe8:	2301      	movne	r3, #1
 8023fea:	2300      	moveq	r3, #0
 8023fec:	b2db      	uxtb	r3, r3
}
 8023fee:	4618      	mov	r0, r3
 8023ff0:	bd80      	pop	{r7, pc}
 8023ff2:	bf00      	nop
 8023ff4:	2400c4ec 	.word	0x2400c4ec

08023ff8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8023ff8:	b580      	push	{r7, lr}
 8023ffa:	b082      	sub	sp, #8
 8023ffc:	af00      	add	r7, sp, #0
 8023ffe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8024000:	6879      	ldr	r1, [r7, #4]
 8024002:	4803      	ldr	r0, [pc, #12]	; (8024010 <BSP_SD_GetCardInfo+0x18>)
 8024004:	f7fa ff26 	bl	801ee54 <HAL_SD_GetCardInfo>
}
 8024008:	bf00      	nop
 802400a:	3708      	adds	r7, #8
 802400c:	46bd      	mov	sp, r7
 802400e:	bd80      	pop	{r7, pc}
 8024010:	2400c4ec 	.word	0x2400c4ec

08024014 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8024014:	b580      	push	{r7, lr}
 8024016:	b082      	sub	sp, #8
 8024018:	af00      	add	r7, sp, #0
 802401a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 802401c:	f000 f9ac 	bl	8024378 <BSP_SD_WriteCpltCallback>
}
 8024020:	bf00      	nop
 8024022:	3708      	adds	r7, #8
 8024024:	46bd      	mov	sp, r7
 8024026:	bd80      	pop	{r7, pc}

08024028 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8024028:	b580      	push	{r7, lr}
 802402a:	b082      	sub	sp, #8
 802402c:	af00      	add	r7, sp, #0
 802402e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8024030:	f000 f9b4 	bl	802439c <BSP_SD_ReadCpltCallback>
}
 8024034:	bf00      	nop
 8024036:	3708      	adds	r7, #8
 8024038:	46bd      	mov	sp, r7
 802403a:	bd80      	pop	{r7, pc}

0802403c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 802403c:	b580      	push	{r7, lr}
 802403e:	b082      	sub	sp, #8
 8024040:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8024042:	2301      	movs	r3, #1
 8024044:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8024046:	f000 f80b 	bl	8024060 <BSP_PlatformIsDetected>
 802404a:	4603      	mov	r3, r0
 802404c:	2b00      	cmp	r3, #0
 802404e:	d101      	bne.n	8024054 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8024050:	2300      	movs	r3, #0
 8024052:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8024054:	79fb      	ldrb	r3, [r7, #7]
 8024056:	b2db      	uxtb	r3, r3
}
 8024058:	4618      	mov	r0, r3
 802405a:	3708      	adds	r7, #8
 802405c:	46bd      	mov	sp, r7
 802405e:	bd80      	pop	{r7, pc}

08024060 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8024060:	b580      	push	{r7, lr}
 8024062:	b082      	sub	sp, #8
 8024064:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8024066:	2301      	movs	r3, #1
 8024068:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 802406a:	2120      	movs	r1, #32
 802406c:	4806      	ldr	r0, [pc, #24]	; (8024088 <BSP_PlatformIsDetected+0x28>)
 802406e:	f7f4 fb8f 	bl	8018790 <HAL_GPIO_ReadPin>
 8024072:	4603      	mov	r3, r0
 8024074:	2b00      	cmp	r3, #0
 8024076:	d001      	beq.n	802407c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8024078:	2300      	movs	r3, #0
 802407a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 802407c:	79fb      	ldrb	r3, [r7, #7]
}
 802407e:	4618      	mov	r0, r3
 8024080:	3708      	adds	r7, #8
 8024082:	46bd      	mov	sp, r7
 8024084:	bd80      	pop	{r7, pc}
 8024086:	bf00      	nop
 8024088:	58020800 	.word	0x58020800

0802408c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 802408c:	b580      	push	{r7, lr}
 802408e:	b084      	sub	sp, #16
 8024090:	af00      	add	r7, sp, #0
 8024092:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8024094:	f002 fd08 	bl	8026aa8 <osKernelGetTickCount>
 8024098:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 802409a:	e006      	b.n	80240aa <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 802409c:	f7ff ff9c 	bl	8023fd8 <BSP_SD_GetCardState>
 80240a0:	4603      	mov	r3, r0
 80240a2:	2b00      	cmp	r3, #0
 80240a4:	d101      	bne.n	80240aa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80240a6:	2300      	movs	r3, #0
 80240a8:	e009      	b.n	80240be <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80240aa:	f002 fcfd 	bl	8026aa8 <osKernelGetTickCount>
 80240ae:	4602      	mov	r2, r0
 80240b0:	68fb      	ldr	r3, [r7, #12]
 80240b2:	1ad3      	subs	r3, r2, r3
 80240b4:	687a      	ldr	r2, [r7, #4]
 80240b6:	429a      	cmp	r2, r3
 80240b8:	d8f0      	bhi.n	802409c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80240ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80240be:	4618      	mov	r0, r3
 80240c0:	3710      	adds	r7, #16
 80240c2:	46bd      	mov	sp, r7
 80240c4:	bd80      	pop	{r7, pc}
	...

080240c8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80240c8:	b580      	push	{r7, lr}
 80240ca:	b082      	sub	sp, #8
 80240cc:	af00      	add	r7, sp, #0
 80240ce:	4603      	mov	r3, r0
 80240d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80240d2:	4b0b      	ldr	r3, [pc, #44]	; (8024100 <SD_CheckStatus+0x38>)
 80240d4:	2201      	movs	r2, #1
 80240d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80240d8:	f7ff ff7e 	bl	8023fd8 <BSP_SD_GetCardState>
 80240dc:	4603      	mov	r3, r0
 80240de:	2b00      	cmp	r3, #0
 80240e0:	d107      	bne.n	80240f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80240e2:	4b07      	ldr	r3, [pc, #28]	; (8024100 <SD_CheckStatus+0x38>)
 80240e4:	781b      	ldrb	r3, [r3, #0]
 80240e6:	b2db      	uxtb	r3, r3
 80240e8:	f023 0301 	bic.w	r3, r3, #1
 80240ec:	b2da      	uxtb	r2, r3
 80240ee:	4b04      	ldr	r3, [pc, #16]	; (8024100 <SD_CheckStatus+0x38>)
 80240f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80240f2:	4b03      	ldr	r3, [pc, #12]	; (8024100 <SD_CheckStatus+0x38>)
 80240f4:	781b      	ldrb	r3, [r3, #0]
 80240f6:	b2db      	uxtb	r3, r3
}
 80240f8:	4618      	mov	r0, r3
 80240fa:	3708      	adds	r7, #8
 80240fc:	46bd      	mov	sp, r7
 80240fe:	bd80      	pop	{r7, pc}
 8024100:	24000665 	.word	0x24000665

08024104 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8024104:	b580      	push	{r7, lr}
 8024106:	b082      	sub	sp, #8
 8024108:	af00      	add	r7, sp, #0
 802410a:	4603      	mov	r3, r0
 802410c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 802410e:	4b1c      	ldr	r3, [pc, #112]	; (8024180 <SD_initialize+0x7c>)
 8024110:	2201      	movs	r2, #1
 8024112:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8024114:	f002 fc38 	bl	8026988 <osKernelGetState>
 8024118:	4603      	mov	r3, r0
 802411a:	2b02      	cmp	r3, #2
 802411c:	d129      	bne.n	8024172 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 802411e:	f7ff ff01 	bl	8023f24 <BSP_SD_Init>
 8024122:	4603      	mov	r3, r0
 8024124:	2b00      	cmp	r3, #0
 8024126:	d107      	bne.n	8024138 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8024128:	79fb      	ldrb	r3, [r7, #7]
 802412a:	4618      	mov	r0, r3
 802412c:	f7ff ffcc 	bl	80240c8 <SD_CheckStatus>
 8024130:	4603      	mov	r3, r0
 8024132:	461a      	mov	r2, r3
 8024134:	4b12      	ldr	r3, [pc, #72]	; (8024180 <SD_initialize+0x7c>)
 8024136:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8024138:	4b11      	ldr	r3, [pc, #68]	; (8024180 <SD_initialize+0x7c>)
 802413a:	781b      	ldrb	r3, [r3, #0]
 802413c:	b2db      	uxtb	r3, r3
 802413e:	2b01      	cmp	r3, #1
 8024140:	d017      	beq.n	8024172 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8024142:	4b10      	ldr	r3, [pc, #64]	; (8024184 <SD_initialize+0x80>)
 8024144:	681b      	ldr	r3, [r3, #0]
 8024146:	2b00      	cmp	r3, #0
 8024148:	d107      	bne.n	802415a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 802414a:	2200      	movs	r2, #0
 802414c:	2102      	movs	r1, #2
 802414e:	200a      	movs	r0, #10
 8024150:	f003 f8f2 	bl	8027338 <osMessageQueueNew>
 8024154:	4602      	mov	r2, r0
 8024156:	4b0b      	ldr	r3, [pc, #44]	; (8024184 <SD_initialize+0x80>)
 8024158:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 802415a:	4b0a      	ldr	r3, [pc, #40]	; (8024184 <SD_initialize+0x80>)
 802415c:	681b      	ldr	r3, [r3, #0]
 802415e:	2b00      	cmp	r3, #0
 8024160:	d107      	bne.n	8024172 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8024162:	4b07      	ldr	r3, [pc, #28]	; (8024180 <SD_initialize+0x7c>)
 8024164:	781b      	ldrb	r3, [r3, #0]
 8024166:	b2db      	uxtb	r3, r3
 8024168:	f043 0301 	orr.w	r3, r3, #1
 802416c:	b2da      	uxtb	r2, r3
 802416e:	4b04      	ldr	r3, [pc, #16]	; (8024180 <SD_initialize+0x7c>)
 8024170:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8024172:	4b03      	ldr	r3, [pc, #12]	; (8024180 <SD_initialize+0x7c>)
 8024174:	781b      	ldrb	r3, [r3, #0]
 8024176:	b2db      	uxtb	r3, r3
}
 8024178:	4618      	mov	r0, r3
 802417a:	3708      	adds	r7, #8
 802417c:	46bd      	mov	sp, r7
 802417e:	bd80      	pop	{r7, pc}
 8024180:	24000665 	.word	0x24000665
 8024184:	24001464 	.word	0x24001464

08024188 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8024188:	b580      	push	{r7, lr}
 802418a:	b082      	sub	sp, #8
 802418c:	af00      	add	r7, sp, #0
 802418e:	4603      	mov	r3, r0
 8024190:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8024192:	79fb      	ldrb	r3, [r7, #7]
 8024194:	4618      	mov	r0, r3
 8024196:	f7ff ff97 	bl	80240c8 <SD_CheckStatus>
 802419a:	4603      	mov	r3, r0
}
 802419c:	4618      	mov	r0, r3
 802419e:	3708      	adds	r7, #8
 80241a0:	46bd      	mov	sp, r7
 80241a2:	bd80      	pop	{r7, pc}

080241a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80241a4:	b580      	push	{r7, lr}
 80241a6:	b088      	sub	sp, #32
 80241a8:	af00      	add	r7, sp, #0
 80241aa:	60b9      	str	r1, [r7, #8]
 80241ac:	607a      	str	r2, [r7, #4]
 80241ae:	603b      	str	r3, [r7, #0]
 80241b0:	4603      	mov	r3, r0
 80241b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80241b4:	2301      	movs	r3, #1
 80241b6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80241b8:	f247 5030 	movw	r0, #30000	; 0x7530
 80241bc:	f7ff ff66 	bl	802408c <SD_CheckStatusWithTimeout>
 80241c0:	4603      	mov	r3, r0
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	da01      	bge.n	80241ca <SD_read+0x26>
  {
    return res;
 80241c6:	7ffb      	ldrb	r3, [r7, #31]
 80241c8:	e02f      	b.n	802422a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80241ca:	683a      	ldr	r2, [r7, #0]
 80241cc:	6879      	ldr	r1, [r7, #4]
 80241ce:	68b8      	ldr	r0, [r7, #8]
 80241d0:	f7ff fece 	bl	8023f70 <BSP_SD_ReadBlocks_DMA>
 80241d4:	4603      	mov	r3, r0
 80241d6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80241d8:	7fbb      	ldrb	r3, [r7, #30]
 80241da:	2b00      	cmp	r3, #0
 80241dc:	d124      	bne.n	8024228 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80241de:	4b15      	ldr	r3, [pc, #84]	; (8024234 <SD_read+0x90>)
 80241e0:	6818      	ldr	r0, [r3, #0]
 80241e2:	f107 0112 	add.w	r1, r7, #18
 80241e6:	f247 5330 	movw	r3, #30000	; 0x7530
 80241ea:	2200      	movs	r2, #0
 80241ec:	f003 f99e 	bl	802752c <osMessageQueueGet>
 80241f0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80241f2:	69bb      	ldr	r3, [r7, #24]
 80241f4:	2b00      	cmp	r3, #0
 80241f6:	d117      	bne.n	8024228 <SD_read+0x84>
 80241f8:	8a7b      	ldrh	r3, [r7, #18]
 80241fa:	2b01      	cmp	r3, #1
 80241fc:	d114      	bne.n	8024228 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80241fe:	f002 fc53 	bl	8026aa8 <osKernelGetTickCount>
 8024202:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8024204:	e007      	b.n	8024216 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8024206:	f7ff fee7 	bl	8023fd8 <BSP_SD_GetCardState>
 802420a:	4603      	mov	r3, r0
 802420c:	2b00      	cmp	r3, #0
 802420e:	d102      	bne.n	8024216 <SD_read+0x72>
              {
                res = RES_OK;
 8024210:	2300      	movs	r3, #0
 8024212:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8024214:	e008      	b.n	8024228 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8024216:	f002 fc47 	bl	8026aa8 <osKernelGetTickCount>
 802421a:	4602      	mov	r2, r0
 802421c:	697b      	ldr	r3, [r7, #20]
 802421e:	1ad3      	subs	r3, r2, r3
 8024220:	f247 522f 	movw	r2, #29999	; 0x752f
 8024224:	4293      	cmp	r3, r2
 8024226:	d9ee      	bls.n	8024206 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8024228:	7ffb      	ldrb	r3, [r7, #31]
}
 802422a:	4618      	mov	r0, r3
 802422c:	3720      	adds	r7, #32
 802422e:	46bd      	mov	sp, r7
 8024230:	bd80      	pop	{r7, pc}
 8024232:	bf00      	nop
 8024234:	24001464 	.word	0x24001464

08024238 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8024238:	b580      	push	{r7, lr}
 802423a:	b088      	sub	sp, #32
 802423c:	af00      	add	r7, sp, #0
 802423e:	60b9      	str	r1, [r7, #8]
 8024240:	607a      	str	r2, [r7, #4]
 8024242:	603b      	str	r3, [r7, #0]
 8024244:	4603      	mov	r3, r0
 8024246:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8024248:	2301      	movs	r3, #1
 802424a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 802424c:	f247 5030 	movw	r0, #30000	; 0x7530
 8024250:	f7ff ff1c 	bl	802408c <SD_CheckStatusWithTimeout>
 8024254:	4603      	mov	r3, r0
 8024256:	2b00      	cmp	r3, #0
 8024258:	da01      	bge.n	802425e <SD_write+0x26>
  {
    return res;
 802425a:	7ffb      	ldrb	r3, [r7, #31]
 802425c:	e02d      	b.n	80242ba <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 802425e:	683a      	ldr	r2, [r7, #0]
 8024260:	6879      	ldr	r1, [r7, #4]
 8024262:	68b8      	ldr	r0, [r7, #8]
 8024264:	f7ff fe9e 	bl	8023fa4 <BSP_SD_WriteBlocks_DMA>
 8024268:	4603      	mov	r3, r0
 802426a:	2b00      	cmp	r3, #0
 802426c:	d124      	bne.n	80242b8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 802426e:	4b15      	ldr	r3, [pc, #84]	; (80242c4 <SD_write+0x8c>)
 8024270:	6818      	ldr	r0, [r3, #0]
 8024272:	f107 0112 	add.w	r1, r7, #18
 8024276:	f247 5330 	movw	r3, #30000	; 0x7530
 802427a:	2200      	movs	r2, #0
 802427c:	f003 f956 	bl	802752c <osMessageQueueGet>
 8024280:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8024282:	69bb      	ldr	r3, [r7, #24]
 8024284:	2b00      	cmp	r3, #0
 8024286:	d117      	bne.n	80242b8 <SD_write+0x80>
 8024288:	8a7b      	ldrh	r3, [r7, #18]
 802428a:	2b02      	cmp	r3, #2
 802428c:	d114      	bne.n	80242b8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 802428e:	f002 fc0b 	bl	8026aa8 <osKernelGetTickCount>
 8024292:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8024294:	e007      	b.n	80242a6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8024296:	f7ff fe9f 	bl	8023fd8 <BSP_SD_GetCardState>
 802429a:	4603      	mov	r3, r0
 802429c:	2b00      	cmp	r3, #0
 802429e:	d102      	bne.n	80242a6 <SD_write+0x6e>
          {
            res = RES_OK;
 80242a0:	2300      	movs	r3, #0
 80242a2:	77fb      	strb	r3, [r7, #31]
            break;
 80242a4:	e008      	b.n	80242b8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80242a6:	f002 fbff 	bl	8026aa8 <osKernelGetTickCount>
 80242aa:	4602      	mov	r2, r0
 80242ac:	697b      	ldr	r3, [r7, #20]
 80242ae:	1ad3      	subs	r3, r2, r3
 80242b0:	f247 522f 	movw	r2, #29999	; 0x752f
 80242b4:	4293      	cmp	r3, r2
 80242b6:	d9ee      	bls.n	8024296 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80242b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80242ba:	4618      	mov	r0, r3
 80242bc:	3720      	adds	r7, #32
 80242be:	46bd      	mov	sp, r7
 80242c0:	bd80      	pop	{r7, pc}
 80242c2:	bf00      	nop
 80242c4:	24001464 	.word	0x24001464

080242c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80242c8:	b580      	push	{r7, lr}
 80242ca:	b08c      	sub	sp, #48	; 0x30
 80242cc:	af00      	add	r7, sp, #0
 80242ce:	4603      	mov	r3, r0
 80242d0:	603a      	str	r2, [r7, #0]
 80242d2:	71fb      	strb	r3, [r7, #7]
 80242d4:	460b      	mov	r3, r1
 80242d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80242d8:	2301      	movs	r3, #1
 80242da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80242de:	4b25      	ldr	r3, [pc, #148]	; (8024374 <SD_ioctl+0xac>)
 80242e0:	781b      	ldrb	r3, [r3, #0]
 80242e2:	b2db      	uxtb	r3, r3
 80242e4:	f003 0301 	and.w	r3, r3, #1
 80242e8:	2b00      	cmp	r3, #0
 80242ea:	d001      	beq.n	80242f0 <SD_ioctl+0x28>
 80242ec:	2303      	movs	r3, #3
 80242ee:	e03c      	b.n	802436a <SD_ioctl+0xa2>

  switch (cmd)
 80242f0:	79bb      	ldrb	r3, [r7, #6]
 80242f2:	2b03      	cmp	r3, #3
 80242f4:	d834      	bhi.n	8024360 <SD_ioctl+0x98>
 80242f6:	a201      	add	r2, pc, #4	; (adr r2, 80242fc <SD_ioctl+0x34>)
 80242f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80242fc:	0802430d 	.word	0x0802430d
 8024300:	08024315 	.word	0x08024315
 8024304:	0802432d 	.word	0x0802432d
 8024308:	08024347 	.word	0x08024347
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 802430c:	2300      	movs	r3, #0
 802430e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8024312:	e028      	b.n	8024366 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8024314:	f107 0308 	add.w	r3, r7, #8
 8024318:	4618      	mov	r0, r3
 802431a:	f7ff fe6d 	bl	8023ff8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 802431e:	6a3a      	ldr	r2, [r7, #32]
 8024320:	683b      	ldr	r3, [r7, #0]
 8024322:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8024324:	2300      	movs	r3, #0
 8024326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802432a:	e01c      	b.n	8024366 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802432c:	f107 0308 	add.w	r3, r7, #8
 8024330:	4618      	mov	r0, r3
 8024332:	f7ff fe61 	bl	8023ff8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8024336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024338:	b29a      	uxth	r2, r3
 802433a:	683b      	ldr	r3, [r7, #0]
 802433c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 802433e:	2300      	movs	r3, #0
 8024340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8024344:	e00f      	b.n	8024366 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8024346:	f107 0308 	add.w	r3, r7, #8
 802434a:	4618      	mov	r0, r3
 802434c:	f7ff fe54 	bl	8023ff8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8024350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024352:	0a5a      	lsrs	r2, r3, #9
 8024354:	683b      	ldr	r3, [r7, #0]
 8024356:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8024358:	2300      	movs	r3, #0
 802435a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802435e:	e002      	b.n	8024366 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8024360:	2304      	movs	r3, #4
 8024362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8024366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802436a:	4618      	mov	r0, r3
 802436c:	3730      	adds	r7, #48	; 0x30
 802436e:	46bd      	mov	sp, r7
 8024370:	bd80      	pop	{r7, pc}
 8024372:	bf00      	nop
 8024374:	24000665 	.word	0x24000665

08024378 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8024378:	b580      	push	{r7, lr}
 802437a:	b082      	sub	sp, #8
 802437c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 802437e:	2302      	movs	r3, #2
 8024380:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8024382:	4b05      	ldr	r3, [pc, #20]	; (8024398 <BSP_SD_WriteCpltCallback+0x20>)
 8024384:	6818      	ldr	r0, [r3, #0]
 8024386:	1db9      	adds	r1, r7, #6
 8024388:	2300      	movs	r3, #0
 802438a:	2200      	movs	r2, #0
 802438c:	f003 f85a 	bl	8027444 <osMessageQueuePut>
#endif
}
 8024390:	bf00      	nop
 8024392:	3708      	adds	r7, #8
 8024394:	46bd      	mov	sp, r7
 8024396:	bd80      	pop	{r7, pc}
 8024398:	24001464 	.word	0x24001464

0802439c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 802439c:	b580      	push	{r7, lr}
 802439e:	b082      	sub	sp, #8
 80243a0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80243a2:	2301      	movs	r3, #1
 80243a4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80243a6:	4b05      	ldr	r3, [pc, #20]	; (80243bc <BSP_SD_ReadCpltCallback+0x20>)
 80243a8:	6818      	ldr	r0, [r3, #0]
 80243aa:	1db9      	adds	r1, r7, #6
 80243ac:	2300      	movs	r3, #0
 80243ae:	2200      	movs	r2, #0
 80243b0:	f003 f848 	bl	8027444 <osMessageQueuePut>
#endif
}
 80243b4:	bf00      	nop
 80243b6:	3708      	adds	r7, #8
 80243b8:	46bd      	mov	sp, r7
 80243ba:	bd80      	pop	{r7, pc}
 80243bc:	24001464 	.word	0x24001464

080243c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80243c0:	b580      	push	{r7, lr}
 80243c2:	b084      	sub	sp, #16
 80243c4:	af00      	add	r7, sp, #0
 80243c6:	4603      	mov	r3, r0
 80243c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80243ca:	79fb      	ldrb	r3, [r7, #7]
 80243cc:	4a08      	ldr	r2, [pc, #32]	; (80243f0 <disk_status+0x30>)
 80243ce:	009b      	lsls	r3, r3, #2
 80243d0:	4413      	add	r3, r2
 80243d2:	685b      	ldr	r3, [r3, #4]
 80243d4:	685b      	ldr	r3, [r3, #4]
 80243d6:	79fa      	ldrb	r2, [r7, #7]
 80243d8:	4905      	ldr	r1, [pc, #20]	; (80243f0 <disk_status+0x30>)
 80243da:	440a      	add	r2, r1
 80243dc:	7a12      	ldrb	r2, [r2, #8]
 80243de:	4610      	mov	r0, r2
 80243e0:	4798      	blx	r3
 80243e2:	4603      	mov	r3, r0
 80243e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80243e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80243e8:	4618      	mov	r0, r3
 80243ea:	3710      	adds	r7, #16
 80243ec:	46bd      	mov	sp, r7
 80243ee:	bd80      	pop	{r7, pc}
 80243f0:	24001490 	.word	0x24001490

080243f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80243f4:	b580      	push	{r7, lr}
 80243f6:	b084      	sub	sp, #16
 80243f8:	af00      	add	r7, sp, #0
 80243fa:	4603      	mov	r3, r0
 80243fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80243fe:	2300      	movs	r3, #0
 8024400:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8024402:	79fb      	ldrb	r3, [r7, #7]
 8024404:	4a0d      	ldr	r2, [pc, #52]	; (802443c <disk_initialize+0x48>)
 8024406:	5cd3      	ldrb	r3, [r2, r3]
 8024408:	2b00      	cmp	r3, #0
 802440a:	d111      	bne.n	8024430 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 802440c:	79fb      	ldrb	r3, [r7, #7]
 802440e:	4a0b      	ldr	r2, [pc, #44]	; (802443c <disk_initialize+0x48>)
 8024410:	2101      	movs	r1, #1
 8024412:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8024414:	79fb      	ldrb	r3, [r7, #7]
 8024416:	4a09      	ldr	r2, [pc, #36]	; (802443c <disk_initialize+0x48>)
 8024418:	009b      	lsls	r3, r3, #2
 802441a:	4413      	add	r3, r2
 802441c:	685b      	ldr	r3, [r3, #4]
 802441e:	681b      	ldr	r3, [r3, #0]
 8024420:	79fa      	ldrb	r2, [r7, #7]
 8024422:	4906      	ldr	r1, [pc, #24]	; (802443c <disk_initialize+0x48>)
 8024424:	440a      	add	r2, r1
 8024426:	7a12      	ldrb	r2, [r2, #8]
 8024428:	4610      	mov	r0, r2
 802442a:	4798      	blx	r3
 802442c:	4603      	mov	r3, r0
 802442e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8024430:	7bfb      	ldrb	r3, [r7, #15]
}
 8024432:	4618      	mov	r0, r3
 8024434:	3710      	adds	r7, #16
 8024436:	46bd      	mov	sp, r7
 8024438:	bd80      	pop	{r7, pc}
 802443a:	bf00      	nop
 802443c:	24001490 	.word	0x24001490

08024440 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8024440:	b590      	push	{r4, r7, lr}
 8024442:	b087      	sub	sp, #28
 8024444:	af00      	add	r7, sp, #0
 8024446:	60b9      	str	r1, [r7, #8]
 8024448:	607a      	str	r2, [r7, #4]
 802444a:	603b      	str	r3, [r7, #0]
 802444c:	4603      	mov	r3, r0
 802444e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8024450:	7bfb      	ldrb	r3, [r7, #15]
 8024452:	4a0a      	ldr	r2, [pc, #40]	; (802447c <disk_read+0x3c>)
 8024454:	009b      	lsls	r3, r3, #2
 8024456:	4413      	add	r3, r2
 8024458:	685b      	ldr	r3, [r3, #4]
 802445a:	689c      	ldr	r4, [r3, #8]
 802445c:	7bfb      	ldrb	r3, [r7, #15]
 802445e:	4a07      	ldr	r2, [pc, #28]	; (802447c <disk_read+0x3c>)
 8024460:	4413      	add	r3, r2
 8024462:	7a18      	ldrb	r0, [r3, #8]
 8024464:	683b      	ldr	r3, [r7, #0]
 8024466:	687a      	ldr	r2, [r7, #4]
 8024468:	68b9      	ldr	r1, [r7, #8]
 802446a:	47a0      	blx	r4
 802446c:	4603      	mov	r3, r0
 802446e:	75fb      	strb	r3, [r7, #23]
  return res;
 8024470:	7dfb      	ldrb	r3, [r7, #23]
}
 8024472:	4618      	mov	r0, r3
 8024474:	371c      	adds	r7, #28
 8024476:	46bd      	mov	sp, r7
 8024478:	bd90      	pop	{r4, r7, pc}
 802447a:	bf00      	nop
 802447c:	24001490 	.word	0x24001490

08024480 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8024480:	b590      	push	{r4, r7, lr}
 8024482:	b087      	sub	sp, #28
 8024484:	af00      	add	r7, sp, #0
 8024486:	60b9      	str	r1, [r7, #8]
 8024488:	607a      	str	r2, [r7, #4]
 802448a:	603b      	str	r3, [r7, #0]
 802448c:	4603      	mov	r3, r0
 802448e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8024490:	7bfb      	ldrb	r3, [r7, #15]
 8024492:	4a0a      	ldr	r2, [pc, #40]	; (80244bc <disk_write+0x3c>)
 8024494:	009b      	lsls	r3, r3, #2
 8024496:	4413      	add	r3, r2
 8024498:	685b      	ldr	r3, [r3, #4]
 802449a:	68dc      	ldr	r4, [r3, #12]
 802449c:	7bfb      	ldrb	r3, [r7, #15]
 802449e:	4a07      	ldr	r2, [pc, #28]	; (80244bc <disk_write+0x3c>)
 80244a0:	4413      	add	r3, r2
 80244a2:	7a18      	ldrb	r0, [r3, #8]
 80244a4:	683b      	ldr	r3, [r7, #0]
 80244a6:	687a      	ldr	r2, [r7, #4]
 80244a8:	68b9      	ldr	r1, [r7, #8]
 80244aa:	47a0      	blx	r4
 80244ac:	4603      	mov	r3, r0
 80244ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80244b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80244b2:	4618      	mov	r0, r3
 80244b4:	371c      	adds	r7, #28
 80244b6:	46bd      	mov	sp, r7
 80244b8:	bd90      	pop	{r4, r7, pc}
 80244ba:	bf00      	nop
 80244bc:	24001490 	.word	0x24001490

080244c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80244c0:	b580      	push	{r7, lr}
 80244c2:	b084      	sub	sp, #16
 80244c4:	af00      	add	r7, sp, #0
 80244c6:	4603      	mov	r3, r0
 80244c8:	603a      	str	r2, [r7, #0]
 80244ca:	71fb      	strb	r3, [r7, #7]
 80244cc:	460b      	mov	r3, r1
 80244ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80244d0:	79fb      	ldrb	r3, [r7, #7]
 80244d2:	4a09      	ldr	r2, [pc, #36]	; (80244f8 <disk_ioctl+0x38>)
 80244d4:	009b      	lsls	r3, r3, #2
 80244d6:	4413      	add	r3, r2
 80244d8:	685b      	ldr	r3, [r3, #4]
 80244da:	691b      	ldr	r3, [r3, #16]
 80244dc:	79fa      	ldrb	r2, [r7, #7]
 80244de:	4906      	ldr	r1, [pc, #24]	; (80244f8 <disk_ioctl+0x38>)
 80244e0:	440a      	add	r2, r1
 80244e2:	7a10      	ldrb	r0, [r2, #8]
 80244e4:	79b9      	ldrb	r1, [r7, #6]
 80244e6:	683a      	ldr	r2, [r7, #0]
 80244e8:	4798      	blx	r3
 80244ea:	4603      	mov	r3, r0
 80244ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80244ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80244f0:	4618      	mov	r0, r3
 80244f2:	3710      	adds	r7, #16
 80244f4:	46bd      	mov	sp, r7
 80244f6:	bd80      	pop	{r7, pc}
 80244f8:	24001490 	.word	0x24001490

080244fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80244fc:	b480      	push	{r7}
 80244fe:	b085      	sub	sp, #20
 8024500:	af00      	add	r7, sp, #0
 8024502:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	3301      	adds	r3, #1
 8024508:	781b      	ldrb	r3, [r3, #0]
 802450a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 802450c:	89fb      	ldrh	r3, [r7, #14]
 802450e:	021b      	lsls	r3, r3, #8
 8024510:	b21a      	sxth	r2, r3
 8024512:	687b      	ldr	r3, [r7, #4]
 8024514:	781b      	ldrb	r3, [r3, #0]
 8024516:	b21b      	sxth	r3, r3
 8024518:	4313      	orrs	r3, r2
 802451a:	b21b      	sxth	r3, r3
 802451c:	81fb      	strh	r3, [r7, #14]
	return rv;
 802451e:	89fb      	ldrh	r3, [r7, #14]
}
 8024520:	4618      	mov	r0, r3
 8024522:	3714      	adds	r7, #20
 8024524:	46bd      	mov	sp, r7
 8024526:	f85d 7b04 	ldr.w	r7, [sp], #4
 802452a:	4770      	bx	lr

0802452c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 802452c:	b480      	push	{r7}
 802452e:	b085      	sub	sp, #20
 8024530:	af00      	add	r7, sp, #0
 8024532:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	3303      	adds	r3, #3
 8024538:	781b      	ldrb	r3, [r3, #0]
 802453a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 802453c:	68fb      	ldr	r3, [r7, #12]
 802453e:	021b      	lsls	r3, r3, #8
 8024540:	687a      	ldr	r2, [r7, #4]
 8024542:	3202      	adds	r2, #2
 8024544:	7812      	ldrb	r2, [r2, #0]
 8024546:	4313      	orrs	r3, r2
 8024548:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 802454a:	68fb      	ldr	r3, [r7, #12]
 802454c:	021b      	lsls	r3, r3, #8
 802454e:	687a      	ldr	r2, [r7, #4]
 8024550:	3201      	adds	r2, #1
 8024552:	7812      	ldrb	r2, [r2, #0]
 8024554:	4313      	orrs	r3, r2
 8024556:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8024558:	68fb      	ldr	r3, [r7, #12]
 802455a:	021b      	lsls	r3, r3, #8
 802455c:	687a      	ldr	r2, [r7, #4]
 802455e:	7812      	ldrb	r2, [r2, #0]
 8024560:	4313      	orrs	r3, r2
 8024562:	60fb      	str	r3, [r7, #12]
	return rv;
 8024564:	68fb      	ldr	r3, [r7, #12]
}
 8024566:	4618      	mov	r0, r3
 8024568:	3714      	adds	r7, #20
 802456a:	46bd      	mov	sp, r7
 802456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024570:	4770      	bx	lr

08024572 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8024572:	b480      	push	{r7}
 8024574:	b083      	sub	sp, #12
 8024576:	af00      	add	r7, sp, #0
 8024578:	6078      	str	r0, [r7, #4]
 802457a:	460b      	mov	r3, r1
 802457c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 802457e:	687b      	ldr	r3, [r7, #4]
 8024580:	1c5a      	adds	r2, r3, #1
 8024582:	607a      	str	r2, [r7, #4]
 8024584:	887a      	ldrh	r2, [r7, #2]
 8024586:	b2d2      	uxtb	r2, r2
 8024588:	701a      	strb	r2, [r3, #0]
 802458a:	887b      	ldrh	r3, [r7, #2]
 802458c:	0a1b      	lsrs	r3, r3, #8
 802458e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8024590:	687b      	ldr	r3, [r7, #4]
 8024592:	1c5a      	adds	r2, r3, #1
 8024594:	607a      	str	r2, [r7, #4]
 8024596:	887a      	ldrh	r2, [r7, #2]
 8024598:	b2d2      	uxtb	r2, r2
 802459a:	701a      	strb	r2, [r3, #0]
}
 802459c:	bf00      	nop
 802459e:	370c      	adds	r7, #12
 80245a0:	46bd      	mov	sp, r7
 80245a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245a6:	4770      	bx	lr

080245a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80245a8:	b480      	push	{r7}
 80245aa:	b083      	sub	sp, #12
 80245ac:	af00      	add	r7, sp, #0
 80245ae:	6078      	str	r0, [r7, #4]
 80245b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80245b2:	687b      	ldr	r3, [r7, #4]
 80245b4:	1c5a      	adds	r2, r3, #1
 80245b6:	607a      	str	r2, [r7, #4]
 80245b8:	683a      	ldr	r2, [r7, #0]
 80245ba:	b2d2      	uxtb	r2, r2
 80245bc:	701a      	strb	r2, [r3, #0]
 80245be:	683b      	ldr	r3, [r7, #0]
 80245c0:	0a1b      	lsrs	r3, r3, #8
 80245c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80245c4:	687b      	ldr	r3, [r7, #4]
 80245c6:	1c5a      	adds	r2, r3, #1
 80245c8:	607a      	str	r2, [r7, #4]
 80245ca:	683a      	ldr	r2, [r7, #0]
 80245cc:	b2d2      	uxtb	r2, r2
 80245ce:	701a      	strb	r2, [r3, #0]
 80245d0:	683b      	ldr	r3, [r7, #0]
 80245d2:	0a1b      	lsrs	r3, r3, #8
 80245d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80245d6:	687b      	ldr	r3, [r7, #4]
 80245d8:	1c5a      	adds	r2, r3, #1
 80245da:	607a      	str	r2, [r7, #4]
 80245dc:	683a      	ldr	r2, [r7, #0]
 80245de:	b2d2      	uxtb	r2, r2
 80245e0:	701a      	strb	r2, [r3, #0]
 80245e2:	683b      	ldr	r3, [r7, #0]
 80245e4:	0a1b      	lsrs	r3, r3, #8
 80245e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80245e8:	687b      	ldr	r3, [r7, #4]
 80245ea:	1c5a      	adds	r2, r3, #1
 80245ec:	607a      	str	r2, [r7, #4]
 80245ee:	683a      	ldr	r2, [r7, #0]
 80245f0:	b2d2      	uxtb	r2, r2
 80245f2:	701a      	strb	r2, [r3, #0]
}
 80245f4:	bf00      	nop
 80245f6:	370c      	adds	r7, #12
 80245f8:	46bd      	mov	sp, r7
 80245fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245fe:	4770      	bx	lr

08024600 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8024600:	b480      	push	{r7}
 8024602:	b087      	sub	sp, #28
 8024604:	af00      	add	r7, sp, #0
 8024606:	60f8      	str	r0, [r7, #12]
 8024608:	60b9      	str	r1, [r7, #8]
 802460a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 802460c:	68fb      	ldr	r3, [r7, #12]
 802460e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8024610:	68bb      	ldr	r3, [r7, #8]
 8024612:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8024614:	687b      	ldr	r3, [r7, #4]
 8024616:	2b00      	cmp	r3, #0
 8024618:	d00d      	beq.n	8024636 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 802461a:	693a      	ldr	r2, [r7, #16]
 802461c:	1c53      	adds	r3, r2, #1
 802461e:	613b      	str	r3, [r7, #16]
 8024620:	697b      	ldr	r3, [r7, #20]
 8024622:	1c59      	adds	r1, r3, #1
 8024624:	6179      	str	r1, [r7, #20]
 8024626:	7812      	ldrb	r2, [r2, #0]
 8024628:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 802462a:	687b      	ldr	r3, [r7, #4]
 802462c:	3b01      	subs	r3, #1
 802462e:	607b      	str	r3, [r7, #4]
 8024630:	687b      	ldr	r3, [r7, #4]
 8024632:	2b00      	cmp	r3, #0
 8024634:	d1f1      	bne.n	802461a <mem_cpy+0x1a>
	}
}
 8024636:	bf00      	nop
 8024638:	371c      	adds	r7, #28
 802463a:	46bd      	mov	sp, r7
 802463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024640:	4770      	bx	lr

08024642 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8024642:	b480      	push	{r7}
 8024644:	b087      	sub	sp, #28
 8024646:	af00      	add	r7, sp, #0
 8024648:	60f8      	str	r0, [r7, #12]
 802464a:	60b9      	str	r1, [r7, #8]
 802464c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 802464e:	68fb      	ldr	r3, [r7, #12]
 8024650:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8024652:	697b      	ldr	r3, [r7, #20]
 8024654:	1c5a      	adds	r2, r3, #1
 8024656:	617a      	str	r2, [r7, #20]
 8024658:	68ba      	ldr	r2, [r7, #8]
 802465a:	b2d2      	uxtb	r2, r2
 802465c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 802465e:	687b      	ldr	r3, [r7, #4]
 8024660:	3b01      	subs	r3, #1
 8024662:	607b      	str	r3, [r7, #4]
 8024664:	687b      	ldr	r3, [r7, #4]
 8024666:	2b00      	cmp	r3, #0
 8024668:	d1f3      	bne.n	8024652 <mem_set+0x10>
}
 802466a:	bf00      	nop
 802466c:	371c      	adds	r7, #28
 802466e:	46bd      	mov	sp, r7
 8024670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024674:	4770      	bx	lr

08024676 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8024676:	b480      	push	{r7}
 8024678:	b089      	sub	sp, #36	; 0x24
 802467a:	af00      	add	r7, sp, #0
 802467c:	60f8      	str	r0, [r7, #12]
 802467e:	60b9      	str	r1, [r7, #8]
 8024680:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8024682:	68fb      	ldr	r3, [r7, #12]
 8024684:	61fb      	str	r3, [r7, #28]
 8024686:	68bb      	ldr	r3, [r7, #8]
 8024688:	61bb      	str	r3, [r7, #24]
	int r = 0;
 802468a:	2300      	movs	r3, #0
 802468c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 802468e:	69fb      	ldr	r3, [r7, #28]
 8024690:	1c5a      	adds	r2, r3, #1
 8024692:	61fa      	str	r2, [r7, #28]
 8024694:	781b      	ldrb	r3, [r3, #0]
 8024696:	4619      	mov	r1, r3
 8024698:	69bb      	ldr	r3, [r7, #24]
 802469a:	1c5a      	adds	r2, r3, #1
 802469c:	61ba      	str	r2, [r7, #24]
 802469e:	781b      	ldrb	r3, [r3, #0]
 80246a0:	1acb      	subs	r3, r1, r3
 80246a2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80246a4:	687b      	ldr	r3, [r7, #4]
 80246a6:	3b01      	subs	r3, #1
 80246a8:	607b      	str	r3, [r7, #4]
 80246aa:	687b      	ldr	r3, [r7, #4]
 80246ac:	2b00      	cmp	r3, #0
 80246ae:	d002      	beq.n	80246b6 <mem_cmp+0x40>
 80246b0:	697b      	ldr	r3, [r7, #20]
 80246b2:	2b00      	cmp	r3, #0
 80246b4:	d0eb      	beq.n	802468e <mem_cmp+0x18>

	return r;
 80246b6:	697b      	ldr	r3, [r7, #20]
}
 80246b8:	4618      	mov	r0, r3
 80246ba:	3724      	adds	r7, #36	; 0x24
 80246bc:	46bd      	mov	sp, r7
 80246be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246c2:	4770      	bx	lr

080246c4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80246c4:	b480      	push	{r7}
 80246c6:	b083      	sub	sp, #12
 80246c8:	af00      	add	r7, sp, #0
 80246ca:	6078      	str	r0, [r7, #4]
 80246cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80246ce:	e002      	b.n	80246d6 <chk_chr+0x12>
 80246d0:	687b      	ldr	r3, [r7, #4]
 80246d2:	3301      	adds	r3, #1
 80246d4:	607b      	str	r3, [r7, #4]
 80246d6:	687b      	ldr	r3, [r7, #4]
 80246d8:	781b      	ldrb	r3, [r3, #0]
 80246da:	2b00      	cmp	r3, #0
 80246dc:	d005      	beq.n	80246ea <chk_chr+0x26>
 80246de:	687b      	ldr	r3, [r7, #4]
 80246e0:	781b      	ldrb	r3, [r3, #0]
 80246e2:	461a      	mov	r2, r3
 80246e4:	683b      	ldr	r3, [r7, #0]
 80246e6:	4293      	cmp	r3, r2
 80246e8:	d1f2      	bne.n	80246d0 <chk_chr+0xc>
	return *str;
 80246ea:	687b      	ldr	r3, [r7, #4]
 80246ec:	781b      	ldrb	r3, [r3, #0]
}
 80246ee:	4618      	mov	r0, r3
 80246f0:	370c      	adds	r7, #12
 80246f2:	46bd      	mov	sp, r7
 80246f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246f8:	4770      	bx	lr

080246fa <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80246fa:	b580      	push	{r7, lr}
 80246fc:	b082      	sub	sp, #8
 80246fe:	af00      	add	r7, sp, #0
 8024700:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8024702:	687b      	ldr	r3, [r7, #4]
 8024704:	2b00      	cmp	r3, #0
 8024706:	d009      	beq.n	802471c <lock_fs+0x22>
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	68db      	ldr	r3, [r3, #12]
 802470c:	4618      	mov	r0, r3
 802470e:	f002 f8df 	bl	80268d0 <ff_req_grant>
 8024712:	4603      	mov	r3, r0
 8024714:	2b00      	cmp	r3, #0
 8024716:	d001      	beq.n	802471c <lock_fs+0x22>
 8024718:	2301      	movs	r3, #1
 802471a:	e000      	b.n	802471e <lock_fs+0x24>
 802471c:	2300      	movs	r3, #0
}
 802471e:	4618      	mov	r0, r3
 8024720:	3708      	adds	r7, #8
 8024722:	46bd      	mov	sp, r7
 8024724:	bd80      	pop	{r7, pc}

08024726 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8024726:	b580      	push	{r7, lr}
 8024728:	b082      	sub	sp, #8
 802472a:	af00      	add	r7, sp, #0
 802472c:	6078      	str	r0, [r7, #4]
 802472e:	460b      	mov	r3, r1
 8024730:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8024732:	687b      	ldr	r3, [r7, #4]
 8024734:	2b00      	cmp	r3, #0
 8024736:	d00d      	beq.n	8024754 <unlock_fs+0x2e>
 8024738:	78fb      	ldrb	r3, [r7, #3]
 802473a:	2b0c      	cmp	r3, #12
 802473c:	d00a      	beq.n	8024754 <unlock_fs+0x2e>
 802473e:	78fb      	ldrb	r3, [r7, #3]
 8024740:	2b0b      	cmp	r3, #11
 8024742:	d007      	beq.n	8024754 <unlock_fs+0x2e>
 8024744:	78fb      	ldrb	r3, [r7, #3]
 8024746:	2b0f      	cmp	r3, #15
 8024748:	d004      	beq.n	8024754 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	68db      	ldr	r3, [r3, #12]
 802474e:	4618      	mov	r0, r3
 8024750:	f002 f8d3 	bl	80268fa <ff_rel_grant>
	}
}
 8024754:	bf00      	nop
 8024756:	3708      	adds	r7, #8
 8024758:	46bd      	mov	sp, r7
 802475a:	bd80      	pop	{r7, pc}

0802475c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 802475c:	b480      	push	{r7}
 802475e:	b085      	sub	sp, #20
 8024760:	af00      	add	r7, sp, #0
 8024762:	6078      	str	r0, [r7, #4]
 8024764:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8024766:	2300      	movs	r3, #0
 8024768:	60bb      	str	r3, [r7, #8]
 802476a:	68bb      	ldr	r3, [r7, #8]
 802476c:	60fb      	str	r3, [r7, #12]
 802476e:	e029      	b.n	80247c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8024770:	4a27      	ldr	r2, [pc, #156]	; (8024810 <chk_lock+0xb4>)
 8024772:	68fb      	ldr	r3, [r7, #12]
 8024774:	011b      	lsls	r3, r3, #4
 8024776:	4413      	add	r3, r2
 8024778:	681b      	ldr	r3, [r3, #0]
 802477a:	2b00      	cmp	r3, #0
 802477c:	d01d      	beq.n	80247ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 802477e:	4a24      	ldr	r2, [pc, #144]	; (8024810 <chk_lock+0xb4>)
 8024780:	68fb      	ldr	r3, [r7, #12]
 8024782:	011b      	lsls	r3, r3, #4
 8024784:	4413      	add	r3, r2
 8024786:	681a      	ldr	r2, [r3, #0]
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	681b      	ldr	r3, [r3, #0]
 802478c:	429a      	cmp	r2, r3
 802478e:	d116      	bne.n	80247be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8024790:	4a1f      	ldr	r2, [pc, #124]	; (8024810 <chk_lock+0xb4>)
 8024792:	68fb      	ldr	r3, [r7, #12]
 8024794:	011b      	lsls	r3, r3, #4
 8024796:	4413      	add	r3, r2
 8024798:	3304      	adds	r3, #4
 802479a:	681a      	ldr	r2, [r3, #0]
 802479c:	687b      	ldr	r3, [r7, #4]
 802479e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80247a0:	429a      	cmp	r2, r3
 80247a2:	d10c      	bne.n	80247be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80247a4:	4a1a      	ldr	r2, [pc, #104]	; (8024810 <chk_lock+0xb4>)
 80247a6:	68fb      	ldr	r3, [r7, #12]
 80247a8:	011b      	lsls	r3, r3, #4
 80247aa:	4413      	add	r3, r2
 80247ac:	3308      	adds	r3, #8
 80247ae:	681a      	ldr	r2, [r3, #0]
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80247b4:	429a      	cmp	r2, r3
 80247b6:	d102      	bne.n	80247be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80247b8:	e007      	b.n	80247ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80247ba:	2301      	movs	r3, #1
 80247bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80247be:	68fb      	ldr	r3, [r7, #12]
 80247c0:	3301      	adds	r3, #1
 80247c2:	60fb      	str	r3, [r7, #12]
 80247c4:	68fb      	ldr	r3, [r7, #12]
 80247c6:	2b01      	cmp	r3, #1
 80247c8:	d9d2      	bls.n	8024770 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80247ca:	68fb      	ldr	r3, [r7, #12]
 80247cc:	2b02      	cmp	r3, #2
 80247ce:	d109      	bne.n	80247e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80247d0:	68bb      	ldr	r3, [r7, #8]
 80247d2:	2b00      	cmp	r3, #0
 80247d4:	d102      	bne.n	80247dc <chk_lock+0x80>
 80247d6:	683b      	ldr	r3, [r7, #0]
 80247d8:	2b02      	cmp	r3, #2
 80247da:	d101      	bne.n	80247e0 <chk_lock+0x84>
 80247dc:	2300      	movs	r3, #0
 80247de:	e010      	b.n	8024802 <chk_lock+0xa6>
 80247e0:	2312      	movs	r3, #18
 80247e2:	e00e      	b.n	8024802 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80247e4:	683b      	ldr	r3, [r7, #0]
 80247e6:	2b00      	cmp	r3, #0
 80247e8:	d108      	bne.n	80247fc <chk_lock+0xa0>
 80247ea:	4a09      	ldr	r2, [pc, #36]	; (8024810 <chk_lock+0xb4>)
 80247ec:	68fb      	ldr	r3, [r7, #12]
 80247ee:	011b      	lsls	r3, r3, #4
 80247f0:	4413      	add	r3, r2
 80247f2:	330c      	adds	r3, #12
 80247f4:	881b      	ldrh	r3, [r3, #0]
 80247f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80247fa:	d101      	bne.n	8024800 <chk_lock+0xa4>
 80247fc:	2310      	movs	r3, #16
 80247fe:	e000      	b.n	8024802 <chk_lock+0xa6>
 8024800:	2300      	movs	r3, #0
}
 8024802:	4618      	mov	r0, r3
 8024804:	3714      	adds	r7, #20
 8024806:	46bd      	mov	sp, r7
 8024808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802480c:	4770      	bx	lr
 802480e:	bf00      	nop
 8024810:	24001470 	.word	0x24001470

08024814 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8024814:	b480      	push	{r7}
 8024816:	b083      	sub	sp, #12
 8024818:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 802481a:	2300      	movs	r3, #0
 802481c:	607b      	str	r3, [r7, #4]
 802481e:	e002      	b.n	8024826 <enq_lock+0x12>
 8024820:	687b      	ldr	r3, [r7, #4]
 8024822:	3301      	adds	r3, #1
 8024824:	607b      	str	r3, [r7, #4]
 8024826:	687b      	ldr	r3, [r7, #4]
 8024828:	2b01      	cmp	r3, #1
 802482a:	d806      	bhi.n	802483a <enq_lock+0x26>
 802482c:	4a09      	ldr	r2, [pc, #36]	; (8024854 <enq_lock+0x40>)
 802482e:	687b      	ldr	r3, [r7, #4]
 8024830:	011b      	lsls	r3, r3, #4
 8024832:	4413      	add	r3, r2
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	2b00      	cmp	r3, #0
 8024838:	d1f2      	bne.n	8024820 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 802483a:	687b      	ldr	r3, [r7, #4]
 802483c:	2b02      	cmp	r3, #2
 802483e:	bf14      	ite	ne
 8024840:	2301      	movne	r3, #1
 8024842:	2300      	moveq	r3, #0
 8024844:	b2db      	uxtb	r3, r3
}
 8024846:	4618      	mov	r0, r3
 8024848:	370c      	adds	r7, #12
 802484a:	46bd      	mov	sp, r7
 802484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024850:	4770      	bx	lr
 8024852:	bf00      	nop
 8024854:	24001470 	.word	0x24001470

08024858 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8024858:	b480      	push	{r7}
 802485a:	b085      	sub	sp, #20
 802485c:	af00      	add	r7, sp, #0
 802485e:	6078      	str	r0, [r7, #4]
 8024860:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8024862:	2300      	movs	r3, #0
 8024864:	60fb      	str	r3, [r7, #12]
 8024866:	e01f      	b.n	80248a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8024868:	4a41      	ldr	r2, [pc, #260]	; (8024970 <inc_lock+0x118>)
 802486a:	68fb      	ldr	r3, [r7, #12]
 802486c:	011b      	lsls	r3, r3, #4
 802486e:	4413      	add	r3, r2
 8024870:	681a      	ldr	r2, [r3, #0]
 8024872:	687b      	ldr	r3, [r7, #4]
 8024874:	681b      	ldr	r3, [r3, #0]
 8024876:	429a      	cmp	r2, r3
 8024878:	d113      	bne.n	80248a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 802487a:	4a3d      	ldr	r2, [pc, #244]	; (8024970 <inc_lock+0x118>)
 802487c:	68fb      	ldr	r3, [r7, #12]
 802487e:	011b      	lsls	r3, r3, #4
 8024880:	4413      	add	r3, r2
 8024882:	3304      	adds	r3, #4
 8024884:	681a      	ldr	r2, [r3, #0]
 8024886:	687b      	ldr	r3, [r7, #4]
 8024888:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 802488a:	429a      	cmp	r2, r3
 802488c:	d109      	bne.n	80248a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 802488e:	4a38      	ldr	r2, [pc, #224]	; (8024970 <inc_lock+0x118>)
 8024890:	68fb      	ldr	r3, [r7, #12]
 8024892:	011b      	lsls	r3, r3, #4
 8024894:	4413      	add	r3, r2
 8024896:	3308      	adds	r3, #8
 8024898:	681a      	ldr	r2, [r3, #0]
 802489a:	687b      	ldr	r3, [r7, #4]
 802489c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 802489e:	429a      	cmp	r2, r3
 80248a0:	d006      	beq.n	80248b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80248a2:	68fb      	ldr	r3, [r7, #12]
 80248a4:	3301      	adds	r3, #1
 80248a6:	60fb      	str	r3, [r7, #12]
 80248a8:	68fb      	ldr	r3, [r7, #12]
 80248aa:	2b01      	cmp	r3, #1
 80248ac:	d9dc      	bls.n	8024868 <inc_lock+0x10>
 80248ae:	e000      	b.n	80248b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80248b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80248b2:	68fb      	ldr	r3, [r7, #12]
 80248b4:	2b02      	cmp	r3, #2
 80248b6:	d132      	bne.n	802491e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80248b8:	2300      	movs	r3, #0
 80248ba:	60fb      	str	r3, [r7, #12]
 80248bc:	e002      	b.n	80248c4 <inc_lock+0x6c>
 80248be:	68fb      	ldr	r3, [r7, #12]
 80248c0:	3301      	adds	r3, #1
 80248c2:	60fb      	str	r3, [r7, #12]
 80248c4:	68fb      	ldr	r3, [r7, #12]
 80248c6:	2b01      	cmp	r3, #1
 80248c8:	d806      	bhi.n	80248d8 <inc_lock+0x80>
 80248ca:	4a29      	ldr	r2, [pc, #164]	; (8024970 <inc_lock+0x118>)
 80248cc:	68fb      	ldr	r3, [r7, #12]
 80248ce:	011b      	lsls	r3, r3, #4
 80248d0:	4413      	add	r3, r2
 80248d2:	681b      	ldr	r3, [r3, #0]
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	d1f2      	bne.n	80248be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80248d8:	68fb      	ldr	r3, [r7, #12]
 80248da:	2b02      	cmp	r3, #2
 80248dc:	d101      	bne.n	80248e2 <inc_lock+0x8a>
 80248de:	2300      	movs	r3, #0
 80248e0:	e040      	b.n	8024964 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80248e2:	687b      	ldr	r3, [r7, #4]
 80248e4:	681a      	ldr	r2, [r3, #0]
 80248e6:	4922      	ldr	r1, [pc, #136]	; (8024970 <inc_lock+0x118>)
 80248e8:	68fb      	ldr	r3, [r7, #12]
 80248ea:	011b      	lsls	r3, r3, #4
 80248ec:	440b      	add	r3, r1
 80248ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80248f0:	687b      	ldr	r3, [r7, #4]
 80248f2:	689a      	ldr	r2, [r3, #8]
 80248f4:	491e      	ldr	r1, [pc, #120]	; (8024970 <inc_lock+0x118>)
 80248f6:	68fb      	ldr	r3, [r7, #12]
 80248f8:	011b      	lsls	r3, r3, #4
 80248fa:	440b      	add	r3, r1
 80248fc:	3304      	adds	r3, #4
 80248fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	695a      	ldr	r2, [r3, #20]
 8024904:	491a      	ldr	r1, [pc, #104]	; (8024970 <inc_lock+0x118>)
 8024906:	68fb      	ldr	r3, [r7, #12]
 8024908:	011b      	lsls	r3, r3, #4
 802490a:	440b      	add	r3, r1
 802490c:	3308      	adds	r3, #8
 802490e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8024910:	4a17      	ldr	r2, [pc, #92]	; (8024970 <inc_lock+0x118>)
 8024912:	68fb      	ldr	r3, [r7, #12]
 8024914:	011b      	lsls	r3, r3, #4
 8024916:	4413      	add	r3, r2
 8024918:	330c      	adds	r3, #12
 802491a:	2200      	movs	r2, #0
 802491c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 802491e:	683b      	ldr	r3, [r7, #0]
 8024920:	2b00      	cmp	r3, #0
 8024922:	d009      	beq.n	8024938 <inc_lock+0xe0>
 8024924:	4a12      	ldr	r2, [pc, #72]	; (8024970 <inc_lock+0x118>)
 8024926:	68fb      	ldr	r3, [r7, #12]
 8024928:	011b      	lsls	r3, r3, #4
 802492a:	4413      	add	r3, r2
 802492c:	330c      	adds	r3, #12
 802492e:	881b      	ldrh	r3, [r3, #0]
 8024930:	2b00      	cmp	r3, #0
 8024932:	d001      	beq.n	8024938 <inc_lock+0xe0>
 8024934:	2300      	movs	r3, #0
 8024936:	e015      	b.n	8024964 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8024938:	683b      	ldr	r3, [r7, #0]
 802493a:	2b00      	cmp	r3, #0
 802493c:	d108      	bne.n	8024950 <inc_lock+0xf8>
 802493e:	4a0c      	ldr	r2, [pc, #48]	; (8024970 <inc_lock+0x118>)
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	011b      	lsls	r3, r3, #4
 8024944:	4413      	add	r3, r2
 8024946:	330c      	adds	r3, #12
 8024948:	881b      	ldrh	r3, [r3, #0]
 802494a:	3301      	adds	r3, #1
 802494c:	b29a      	uxth	r2, r3
 802494e:	e001      	b.n	8024954 <inc_lock+0xfc>
 8024950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8024954:	4906      	ldr	r1, [pc, #24]	; (8024970 <inc_lock+0x118>)
 8024956:	68fb      	ldr	r3, [r7, #12]
 8024958:	011b      	lsls	r3, r3, #4
 802495a:	440b      	add	r3, r1
 802495c:	330c      	adds	r3, #12
 802495e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8024960:	68fb      	ldr	r3, [r7, #12]
 8024962:	3301      	adds	r3, #1
}
 8024964:	4618      	mov	r0, r3
 8024966:	3714      	adds	r7, #20
 8024968:	46bd      	mov	sp, r7
 802496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802496e:	4770      	bx	lr
 8024970:	24001470 	.word	0x24001470

08024974 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8024974:	b480      	push	{r7}
 8024976:	b085      	sub	sp, #20
 8024978:	af00      	add	r7, sp, #0
 802497a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	3b01      	subs	r3, #1
 8024980:	607b      	str	r3, [r7, #4]
 8024982:	687b      	ldr	r3, [r7, #4]
 8024984:	2b01      	cmp	r3, #1
 8024986:	d825      	bhi.n	80249d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8024988:	4a17      	ldr	r2, [pc, #92]	; (80249e8 <dec_lock+0x74>)
 802498a:	687b      	ldr	r3, [r7, #4]
 802498c:	011b      	lsls	r3, r3, #4
 802498e:	4413      	add	r3, r2
 8024990:	330c      	adds	r3, #12
 8024992:	881b      	ldrh	r3, [r3, #0]
 8024994:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8024996:	89fb      	ldrh	r3, [r7, #14]
 8024998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802499c:	d101      	bne.n	80249a2 <dec_lock+0x2e>
 802499e:	2300      	movs	r3, #0
 80249a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80249a2:	89fb      	ldrh	r3, [r7, #14]
 80249a4:	2b00      	cmp	r3, #0
 80249a6:	d002      	beq.n	80249ae <dec_lock+0x3a>
 80249a8:	89fb      	ldrh	r3, [r7, #14]
 80249aa:	3b01      	subs	r3, #1
 80249ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80249ae:	4a0e      	ldr	r2, [pc, #56]	; (80249e8 <dec_lock+0x74>)
 80249b0:	687b      	ldr	r3, [r7, #4]
 80249b2:	011b      	lsls	r3, r3, #4
 80249b4:	4413      	add	r3, r2
 80249b6:	330c      	adds	r3, #12
 80249b8:	89fa      	ldrh	r2, [r7, #14]
 80249ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80249bc:	89fb      	ldrh	r3, [r7, #14]
 80249be:	2b00      	cmp	r3, #0
 80249c0:	d105      	bne.n	80249ce <dec_lock+0x5a>
 80249c2:	4a09      	ldr	r2, [pc, #36]	; (80249e8 <dec_lock+0x74>)
 80249c4:	687b      	ldr	r3, [r7, #4]
 80249c6:	011b      	lsls	r3, r3, #4
 80249c8:	4413      	add	r3, r2
 80249ca:	2200      	movs	r2, #0
 80249cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80249ce:	2300      	movs	r3, #0
 80249d0:	737b      	strb	r3, [r7, #13]
 80249d2:	e001      	b.n	80249d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80249d4:	2302      	movs	r3, #2
 80249d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80249d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80249da:	4618      	mov	r0, r3
 80249dc:	3714      	adds	r7, #20
 80249de:	46bd      	mov	sp, r7
 80249e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249e4:	4770      	bx	lr
 80249e6:	bf00      	nop
 80249e8:	24001470 	.word	0x24001470

080249ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80249ec:	b480      	push	{r7}
 80249ee:	b085      	sub	sp, #20
 80249f0:	af00      	add	r7, sp, #0
 80249f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80249f4:	2300      	movs	r3, #0
 80249f6:	60fb      	str	r3, [r7, #12]
 80249f8:	e010      	b.n	8024a1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80249fa:	4a0d      	ldr	r2, [pc, #52]	; (8024a30 <clear_lock+0x44>)
 80249fc:	68fb      	ldr	r3, [r7, #12]
 80249fe:	011b      	lsls	r3, r3, #4
 8024a00:	4413      	add	r3, r2
 8024a02:	681b      	ldr	r3, [r3, #0]
 8024a04:	687a      	ldr	r2, [r7, #4]
 8024a06:	429a      	cmp	r2, r3
 8024a08:	d105      	bne.n	8024a16 <clear_lock+0x2a>
 8024a0a:	4a09      	ldr	r2, [pc, #36]	; (8024a30 <clear_lock+0x44>)
 8024a0c:	68fb      	ldr	r3, [r7, #12]
 8024a0e:	011b      	lsls	r3, r3, #4
 8024a10:	4413      	add	r3, r2
 8024a12:	2200      	movs	r2, #0
 8024a14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8024a16:	68fb      	ldr	r3, [r7, #12]
 8024a18:	3301      	adds	r3, #1
 8024a1a:	60fb      	str	r3, [r7, #12]
 8024a1c:	68fb      	ldr	r3, [r7, #12]
 8024a1e:	2b01      	cmp	r3, #1
 8024a20:	d9eb      	bls.n	80249fa <clear_lock+0xe>
	}
}
 8024a22:	bf00      	nop
 8024a24:	3714      	adds	r7, #20
 8024a26:	46bd      	mov	sp, r7
 8024a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a2c:	4770      	bx	lr
 8024a2e:	bf00      	nop
 8024a30:	24001470 	.word	0x24001470

08024a34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8024a34:	b580      	push	{r7, lr}
 8024a36:	b086      	sub	sp, #24
 8024a38:	af00      	add	r7, sp, #0
 8024a3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8024a3c:	2300      	movs	r3, #0
 8024a3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8024a40:	687b      	ldr	r3, [r7, #4]
 8024a42:	78db      	ldrb	r3, [r3, #3]
 8024a44:	2b00      	cmp	r3, #0
 8024a46:	d034      	beq.n	8024ab2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8024a4e:	687b      	ldr	r3, [r7, #4]
 8024a50:	7858      	ldrb	r0, [r3, #1]
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8024a58:	2301      	movs	r3, #1
 8024a5a:	697a      	ldr	r2, [r7, #20]
 8024a5c:	f7ff fd10 	bl	8024480 <disk_write>
 8024a60:	4603      	mov	r3, r0
 8024a62:	2b00      	cmp	r3, #0
 8024a64:	d002      	beq.n	8024a6c <sync_window+0x38>
			res = FR_DISK_ERR;
 8024a66:	2301      	movs	r3, #1
 8024a68:	73fb      	strb	r3, [r7, #15]
 8024a6a:	e022      	b.n	8024ab2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8024a6c:	687b      	ldr	r3, [r7, #4]
 8024a6e:	2200      	movs	r2, #0
 8024a70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8024a72:	687b      	ldr	r3, [r7, #4]
 8024a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a76:	697a      	ldr	r2, [r7, #20]
 8024a78:	1ad2      	subs	r2, r2, r3
 8024a7a:	687b      	ldr	r3, [r7, #4]
 8024a7c:	69db      	ldr	r3, [r3, #28]
 8024a7e:	429a      	cmp	r2, r3
 8024a80:	d217      	bcs.n	8024ab2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8024a82:	687b      	ldr	r3, [r7, #4]
 8024a84:	789b      	ldrb	r3, [r3, #2]
 8024a86:	613b      	str	r3, [r7, #16]
 8024a88:	e010      	b.n	8024aac <sync_window+0x78>
					wsect += fs->fsize;
 8024a8a:	687b      	ldr	r3, [r7, #4]
 8024a8c:	69db      	ldr	r3, [r3, #28]
 8024a8e:	697a      	ldr	r2, [r7, #20]
 8024a90:	4413      	add	r3, r2
 8024a92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8024a94:	687b      	ldr	r3, [r7, #4]
 8024a96:	7858      	ldrb	r0, [r3, #1]
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8024a9e:	2301      	movs	r3, #1
 8024aa0:	697a      	ldr	r2, [r7, #20]
 8024aa2:	f7ff fced 	bl	8024480 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8024aa6:	693b      	ldr	r3, [r7, #16]
 8024aa8:	3b01      	subs	r3, #1
 8024aaa:	613b      	str	r3, [r7, #16]
 8024aac:	693b      	ldr	r3, [r7, #16]
 8024aae:	2b01      	cmp	r3, #1
 8024ab0:	d8eb      	bhi.n	8024a8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8024ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8024ab4:	4618      	mov	r0, r3
 8024ab6:	3718      	adds	r7, #24
 8024ab8:	46bd      	mov	sp, r7
 8024aba:	bd80      	pop	{r7, pc}

08024abc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8024abc:	b580      	push	{r7, lr}
 8024abe:	b084      	sub	sp, #16
 8024ac0:	af00      	add	r7, sp, #0
 8024ac2:	6078      	str	r0, [r7, #4]
 8024ac4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8024ac6:	2300      	movs	r3, #0
 8024ac8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8024aca:	687b      	ldr	r3, [r7, #4]
 8024acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ace:	683a      	ldr	r2, [r7, #0]
 8024ad0:	429a      	cmp	r2, r3
 8024ad2:	d01b      	beq.n	8024b0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8024ad4:	6878      	ldr	r0, [r7, #4]
 8024ad6:	f7ff ffad 	bl	8024a34 <sync_window>
 8024ada:	4603      	mov	r3, r0
 8024adc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8024ade:	7bfb      	ldrb	r3, [r7, #15]
 8024ae0:	2b00      	cmp	r3, #0
 8024ae2:	d113      	bne.n	8024b0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8024ae4:	687b      	ldr	r3, [r7, #4]
 8024ae6:	7858      	ldrb	r0, [r3, #1]
 8024ae8:	687b      	ldr	r3, [r7, #4]
 8024aea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8024aee:	2301      	movs	r3, #1
 8024af0:	683a      	ldr	r2, [r7, #0]
 8024af2:	f7ff fca5 	bl	8024440 <disk_read>
 8024af6:	4603      	mov	r3, r0
 8024af8:	2b00      	cmp	r3, #0
 8024afa:	d004      	beq.n	8024b06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8024afc:	f04f 33ff 	mov.w	r3, #4294967295
 8024b00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8024b02:	2301      	movs	r3, #1
 8024b04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8024b06:	687b      	ldr	r3, [r7, #4]
 8024b08:	683a      	ldr	r2, [r7, #0]
 8024b0a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8024b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8024b0e:	4618      	mov	r0, r3
 8024b10:	3710      	adds	r7, #16
 8024b12:	46bd      	mov	sp, r7
 8024b14:	bd80      	pop	{r7, pc}
	...

08024b18 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8024b18:	b580      	push	{r7, lr}
 8024b1a:	b084      	sub	sp, #16
 8024b1c:	af00      	add	r7, sp, #0
 8024b1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8024b20:	6878      	ldr	r0, [r7, #4]
 8024b22:	f7ff ff87 	bl	8024a34 <sync_window>
 8024b26:	4603      	mov	r3, r0
 8024b28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8024b2a:	7bfb      	ldrb	r3, [r7, #15]
 8024b2c:	2b00      	cmp	r3, #0
 8024b2e:	d158      	bne.n	8024be2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8024b30:	687b      	ldr	r3, [r7, #4]
 8024b32:	781b      	ldrb	r3, [r3, #0]
 8024b34:	2b03      	cmp	r3, #3
 8024b36:	d148      	bne.n	8024bca <sync_fs+0xb2>
 8024b38:	687b      	ldr	r3, [r7, #4]
 8024b3a:	791b      	ldrb	r3, [r3, #4]
 8024b3c:	2b01      	cmp	r3, #1
 8024b3e:	d144      	bne.n	8024bca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8024b40:	687b      	ldr	r3, [r7, #4]
 8024b42:	3334      	adds	r3, #52	; 0x34
 8024b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024b48:	2100      	movs	r1, #0
 8024b4a:	4618      	mov	r0, r3
 8024b4c:	f7ff fd79 	bl	8024642 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8024b50:	687b      	ldr	r3, [r7, #4]
 8024b52:	3334      	adds	r3, #52	; 0x34
 8024b54:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8024b58:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8024b5c:	4618      	mov	r0, r3
 8024b5e:	f7ff fd08 	bl	8024572 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8024b62:	687b      	ldr	r3, [r7, #4]
 8024b64:	3334      	adds	r3, #52	; 0x34
 8024b66:	4921      	ldr	r1, [pc, #132]	; (8024bec <sync_fs+0xd4>)
 8024b68:	4618      	mov	r0, r3
 8024b6a:	f7ff fd1d 	bl	80245a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	3334      	adds	r3, #52	; 0x34
 8024b72:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8024b76:	491e      	ldr	r1, [pc, #120]	; (8024bf0 <sync_fs+0xd8>)
 8024b78:	4618      	mov	r0, r3
 8024b7a:	f7ff fd15 	bl	80245a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8024b7e:	687b      	ldr	r3, [r7, #4]
 8024b80:	3334      	adds	r3, #52	; 0x34
 8024b82:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8024b86:	687b      	ldr	r3, [r7, #4]
 8024b88:	695b      	ldr	r3, [r3, #20]
 8024b8a:	4619      	mov	r1, r3
 8024b8c:	4610      	mov	r0, r2
 8024b8e:	f7ff fd0b 	bl	80245a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8024b92:	687b      	ldr	r3, [r7, #4]
 8024b94:	3334      	adds	r3, #52	; 0x34
 8024b96:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8024b9a:	687b      	ldr	r3, [r7, #4]
 8024b9c:	691b      	ldr	r3, [r3, #16]
 8024b9e:	4619      	mov	r1, r3
 8024ba0:	4610      	mov	r0, r2
 8024ba2:	f7ff fd01 	bl	80245a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8024ba6:	687b      	ldr	r3, [r7, #4]
 8024ba8:	6a1b      	ldr	r3, [r3, #32]
 8024baa:	1c5a      	adds	r2, r3, #1
 8024bac:	687b      	ldr	r3, [r7, #4]
 8024bae:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8024bb0:	687b      	ldr	r3, [r7, #4]
 8024bb2:	7858      	ldrb	r0, [r3, #1]
 8024bb4:	687b      	ldr	r3, [r7, #4]
 8024bb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8024bba:	687b      	ldr	r3, [r7, #4]
 8024bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8024bbe:	2301      	movs	r3, #1
 8024bc0:	f7ff fc5e 	bl	8024480 <disk_write>
			fs->fsi_flag = 0;
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	2200      	movs	r2, #0
 8024bc8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	785b      	ldrb	r3, [r3, #1]
 8024bce:	2200      	movs	r2, #0
 8024bd0:	2100      	movs	r1, #0
 8024bd2:	4618      	mov	r0, r3
 8024bd4:	f7ff fc74 	bl	80244c0 <disk_ioctl>
 8024bd8:	4603      	mov	r3, r0
 8024bda:	2b00      	cmp	r3, #0
 8024bdc:	d001      	beq.n	8024be2 <sync_fs+0xca>
 8024bde:	2301      	movs	r3, #1
 8024be0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8024be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8024be4:	4618      	mov	r0, r3
 8024be6:	3710      	adds	r7, #16
 8024be8:	46bd      	mov	sp, r7
 8024bea:	bd80      	pop	{r7, pc}
 8024bec:	41615252 	.word	0x41615252
 8024bf0:	61417272 	.word	0x61417272

08024bf4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8024bf4:	b480      	push	{r7}
 8024bf6:	b083      	sub	sp, #12
 8024bf8:	af00      	add	r7, sp, #0
 8024bfa:	6078      	str	r0, [r7, #4]
 8024bfc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8024bfe:	683b      	ldr	r3, [r7, #0]
 8024c00:	3b02      	subs	r3, #2
 8024c02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8024c04:	687b      	ldr	r3, [r7, #4]
 8024c06:	699b      	ldr	r3, [r3, #24]
 8024c08:	3b02      	subs	r3, #2
 8024c0a:	683a      	ldr	r2, [r7, #0]
 8024c0c:	429a      	cmp	r2, r3
 8024c0e:	d301      	bcc.n	8024c14 <clust2sect+0x20>
 8024c10:	2300      	movs	r3, #0
 8024c12:	e008      	b.n	8024c26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8024c14:	687b      	ldr	r3, [r7, #4]
 8024c16:	895b      	ldrh	r3, [r3, #10]
 8024c18:	461a      	mov	r2, r3
 8024c1a:	683b      	ldr	r3, [r7, #0]
 8024c1c:	fb03 f202 	mul.w	r2, r3, r2
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c24:	4413      	add	r3, r2
}
 8024c26:	4618      	mov	r0, r3
 8024c28:	370c      	adds	r7, #12
 8024c2a:	46bd      	mov	sp, r7
 8024c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c30:	4770      	bx	lr

08024c32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8024c32:	b580      	push	{r7, lr}
 8024c34:	b086      	sub	sp, #24
 8024c36:	af00      	add	r7, sp, #0
 8024c38:	6078      	str	r0, [r7, #4]
 8024c3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8024c3c:	687b      	ldr	r3, [r7, #4]
 8024c3e:	681b      	ldr	r3, [r3, #0]
 8024c40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8024c42:	683b      	ldr	r3, [r7, #0]
 8024c44:	2b01      	cmp	r3, #1
 8024c46:	d904      	bls.n	8024c52 <get_fat+0x20>
 8024c48:	693b      	ldr	r3, [r7, #16]
 8024c4a:	699b      	ldr	r3, [r3, #24]
 8024c4c:	683a      	ldr	r2, [r7, #0]
 8024c4e:	429a      	cmp	r2, r3
 8024c50:	d302      	bcc.n	8024c58 <get_fat+0x26>
		val = 1;	/* Internal error */
 8024c52:	2301      	movs	r3, #1
 8024c54:	617b      	str	r3, [r7, #20]
 8024c56:	e08c      	b.n	8024d72 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8024c58:	f04f 33ff 	mov.w	r3, #4294967295
 8024c5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8024c5e:	693b      	ldr	r3, [r7, #16]
 8024c60:	781b      	ldrb	r3, [r3, #0]
 8024c62:	2b02      	cmp	r3, #2
 8024c64:	d045      	beq.n	8024cf2 <get_fat+0xc0>
 8024c66:	2b03      	cmp	r3, #3
 8024c68:	d05d      	beq.n	8024d26 <get_fat+0xf4>
 8024c6a:	2b01      	cmp	r3, #1
 8024c6c:	d177      	bne.n	8024d5e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8024c6e:	683b      	ldr	r3, [r7, #0]
 8024c70:	60fb      	str	r3, [r7, #12]
 8024c72:	68fb      	ldr	r3, [r7, #12]
 8024c74:	085b      	lsrs	r3, r3, #1
 8024c76:	68fa      	ldr	r2, [r7, #12]
 8024c78:	4413      	add	r3, r2
 8024c7a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024c7c:	693b      	ldr	r3, [r7, #16]
 8024c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024c80:	68fb      	ldr	r3, [r7, #12]
 8024c82:	0a5b      	lsrs	r3, r3, #9
 8024c84:	4413      	add	r3, r2
 8024c86:	4619      	mov	r1, r3
 8024c88:	6938      	ldr	r0, [r7, #16]
 8024c8a:	f7ff ff17 	bl	8024abc <move_window>
 8024c8e:	4603      	mov	r3, r0
 8024c90:	2b00      	cmp	r3, #0
 8024c92:	d167      	bne.n	8024d64 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8024c94:	68fb      	ldr	r3, [r7, #12]
 8024c96:	1c5a      	adds	r2, r3, #1
 8024c98:	60fa      	str	r2, [r7, #12]
 8024c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024c9e:	693a      	ldr	r2, [r7, #16]
 8024ca0:	4413      	add	r3, r2
 8024ca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8024ca6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024ca8:	693b      	ldr	r3, [r7, #16]
 8024caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024cac:	68fb      	ldr	r3, [r7, #12]
 8024cae:	0a5b      	lsrs	r3, r3, #9
 8024cb0:	4413      	add	r3, r2
 8024cb2:	4619      	mov	r1, r3
 8024cb4:	6938      	ldr	r0, [r7, #16]
 8024cb6:	f7ff ff01 	bl	8024abc <move_window>
 8024cba:	4603      	mov	r3, r0
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	d153      	bne.n	8024d68 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8024cc0:	68fb      	ldr	r3, [r7, #12]
 8024cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024cc6:	693a      	ldr	r2, [r7, #16]
 8024cc8:	4413      	add	r3, r2
 8024cca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8024cce:	021b      	lsls	r3, r3, #8
 8024cd0:	461a      	mov	r2, r3
 8024cd2:	68bb      	ldr	r3, [r7, #8]
 8024cd4:	4313      	orrs	r3, r2
 8024cd6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8024cd8:	683b      	ldr	r3, [r7, #0]
 8024cda:	f003 0301 	and.w	r3, r3, #1
 8024cde:	2b00      	cmp	r3, #0
 8024ce0:	d002      	beq.n	8024ce8 <get_fat+0xb6>
 8024ce2:	68bb      	ldr	r3, [r7, #8]
 8024ce4:	091b      	lsrs	r3, r3, #4
 8024ce6:	e002      	b.n	8024cee <get_fat+0xbc>
 8024ce8:	68bb      	ldr	r3, [r7, #8]
 8024cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024cee:	617b      	str	r3, [r7, #20]
			break;
 8024cf0:	e03f      	b.n	8024d72 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8024cf2:	693b      	ldr	r3, [r7, #16]
 8024cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024cf6:	683b      	ldr	r3, [r7, #0]
 8024cf8:	0a1b      	lsrs	r3, r3, #8
 8024cfa:	4413      	add	r3, r2
 8024cfc:	4619      	mov	r1, r3
 8024cfe:	6938      	ldr	r0, [r7, #16]
 8024d00:	f7ff fedc 	bl	8024abc <move_window>
 8024d04:	4603      	mov	r3, r0
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	d130      	bne.n	8024d6c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8024d0a:	693b      	ldr	r3, [r7, #16]
 8024d0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024d10:	683b      	ldr	r3, [r7, #0]
 8024d12:	005b      	lsls	r3, r3, #1
 8024d14:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8024d18:	4413      	add	r3, r2
 8024d1a:	4618      	mov	r0, r3
 8024d1c:	f7ff fbee 	bl	80244fc <ld_word>
 8024d20:	4603      	mov	r3, r0
 8024d22:	617b      	str	r3, [r7, #20]
			break;
 8024d24:	e025      	b.n	8024d72 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8024d26:	693b      	ldr	r3, [r7, #16]
 8024d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024d2a:	683b      	ldr	r3, [r7, #0]
 8024d2c:	09db      	lsrs	r3, r3, #7
 8024d2e:	4413      	add	r3, r2
 8024d30:	4619      	mov	r1, r3
 8024d32:	6938      	ldr	r0, [r7, #16]
 8024d34:	f7ff fec2 	bl	8024abc <move_window>
 8024d38:	4603      	mov	r3, r0
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	d118      	bne.n	8024d70 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8024d3e:	693b      	ldr	r3, [r7, #16]
 8024d40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024d44:	683b      	ldr	r3, [r7, #0]
 8024d46:	009b      	lsls	r3, r3, #2
 8024d48:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8024d4c:	4413      	add	r3, r2
 8024d4e:	4618      	mov	r0, r3
 8024d50:	f7ff fbec 	bl	802452c <ld_dword>
 8024d54:	4603      	mov	r3, r0
 8024d56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8024d5a:	617b      	str	r3, [r7, #20]
			break;
 8024d5c:	e009      	b.n	8024d72 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8024d5e:	2301      	movs	r3, #1
 8024d60:	617b      	str	r3, [r7, #20]
 8024d62:	e006      	b.n	8024d72 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024d64:	bf00      	nop
 8024d66:	e004      	b.n	8024d72 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8024d68:	bf00      	nop
 8024d6a:	e002      	b.n	8024d72 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8024d6c:	bf00      	nop
 8024d6e:	e000      	b.n	8024d72 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8024d70:	bf00      	nop
		}
	}

	return val;
 8024d72:	697b      	ldr	r3, [r7, #20]
}
 8024d74:	4618      	mov	r0, r3
 8024d76:	3718      	adds	r7, #24
 8024d78:	46bd      	mov	sp, r7
 8024d7a:	bd80      	pop	{r7, pc}

08024d7c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8024d7c:	b590      	push	{r4, r7, lr}
 8024d7e:	b089      	sub	sp, #36	; 0x24
 8024d80:	af00      	add	r7, sp, #0
 8024d82:	60f8      	str	r0, [r7, #12]
 8024d84:	60b9      	str	r1, [r7, #8]
 8024d86:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8024d88:	2302      	movs	r3, #2
 8024d8a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8024d8c:	68bb      	ldr	r3, [r7, #8]
 8024d8e:	2b01      	cmp	r3, #1
 8024d90:	f240 80d6 	bls.w	8024f40 <put_fat+0x1c4>
 8024d94:	68fb      	ldr	r3, [r7, #12]
 8024d96:	699b      	ldr	r3, [r3, #24]
 8024d98:	68ba      	ldr	r2, [r7, #8]
 8024d9a:	429a      	cmp	r2, r3
 8024d9c:	f080 80d0 	bcs.w	8024f40 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8024da0:	68fb      	ldr	r3, [r7, #12]
 8024da2:	781b      	ldrb	r3, [r3, #0]
 8024da4:	2b02      	cmp	r3, #2
 8024da6:	d073      	beq.n	8024e90 <put_fat+0x114>
 8024da8:	2b03      	cmp	r3, #3
 8024daa:	f000 8091 	beq.w	8024ed0 <put_fat+0x154>
 8024dae:	2b01      	cmp	r3, #1
 8024db0:	f040 80c6 	bne.w	8024f40 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8024db4:	68bb      	ldr	r3, [r7, #8]
 8024db6:	61bb      	str	r3, [r7, #24]
 8024db8:	69bb      	ldr	r3, [r7, #24]
 8024dba:	085b      	lsrs	r3, r3, #1
 8024dbc:	69ba      	ldr	r2, [r7, #24]
 8024dbe:	4413      	add	r3, r2
 8024dc0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8024dc2:	68fb      	ldr	r3, [r7, #12]
 8024dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024dc6:	69bb      	ldr	r3, [r7, #24]
 8024dc8:	0a5b      	lsrs	r3, r3, #9
 8024dca:	4413      	add	r3, r2
 8024dcc:	4619      	mov	r1, r3
 8024dce:	68f8      	ldr	r0, [r7, #12]
 8024dd0:	f7ff fe74 	bl	8024abc <move_window>
 8024dd4:	4603      	mov	r3, r0
 8024dd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8024dd8:	7ffb      	ldrb	r3, [r7, #31]
 8024dda:	2b00      	cmp	r3, #0
 8024ddc:	f040 80a9 	bne.w	8024f32 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8024de0:	68fb      	ldr	r3, [r7, #12]
 8024de2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024de6:	69bb      	ldr	r3, [r7, #24]
 8024de8:	1c59      	adds	r1, r3, #1
 8024dea:	61b9      	str	r1, [r7, #24]
 8024dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024df0:	4413      	add	r3, r2
 8024df2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8024df4:	68bb      	ldr	r3, [r7, #8]
 8024df6:	f003 0301 	and.w	r3, r3, #1
 8024dfa:	2b00      	cmp	r3, #0
 8024dfc:	d00d      	beq.n	8024e1a <put_fat+0x9e>
 8024dfe:	697b      	ldr	r3, [r7, #20]
 8024e00:	781b      	ldrb	r3, [r3, #0]
 8024e02:	b25b      	sxtb	r3, r3
 8024e04:	f003 030f 	and.w	r3, r3, #15
 8024e08:	b25a      	sxtb	r2, r3
 8024e0a:	687b      	ldr	r3, [r7, #4]
 8024e0c:	b2db      	uxtb	r3, r3
 8024e0e:	011b      	lsls	r3, r3, #4
 8024e10:	b25b      	sxtb	r3, r3
 8024e12:	4313      	orrs	r3, r2
 8024e14:	b25b      	sxtb	r3, r3
 8024e16:	b2db      	uxtb	r3, r3
 8024e18:	e001      	b.n	8024e1e <put_fat+0xa2>
 8024e1a:	687b      	ldr	r3, [r7, #4]
 8024e1c:	b2db      	uxtb	r3, r3
 8024e1e:	697a      	ldr	r2, [r7, #20]
 8024e20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8024e22:	68fb      	ldr	r3, [r7, #12]
 8024e24:	2201      	movs	r2, #1
 8024e26:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8024e28:	68fb      	ldr	r3, [r7, #12]
 8024e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024e2c:	69bb      	ldr	r3, [r7, #24]
 8024e2e:	0a5b      	lsrs	r3, r3, #9
 8024e30:	4413      	add	r3, r2
 8024e32:	4619      	mov	r1, r3
 8024e34:	68f8      	ldr	r0, [r7, #12]
 8024e36:	f7ff fe41 	bl	8024abc <move_window>
 8024e3a:	4603      	mov	r3, r0
 8024e3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8024e3e:	7ffb      	ldrb	r3, [r7, #31]
 8024e40:	2b00      	cmp	r3, #0
 8024e42:	d178      	bne.n	8024f36 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8024e44:	68fb      	ldr	r3, [r7, #12]
 8024e46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024e4a:	69bb      	ldr	r3, [r7, #24]
 8024e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024e50:	4413      	add	r3, r2
 8024e52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8024e54:	68bb      	ldr	r3, [r7, #8]
 8024e56:	f003 0301 	and.w	r3, r3, #1
 8024e5a:	2b00      	cmp	r3, #0
 8024e5c:	d003      	beq.n	8024e66 <put_fat+0xea>
 8024e5e:	687b      	ldr	r3, [r7, #4]
 8024e60:	091b      	lsrs	r3, r3, #4
 8024e62:	b2db      	uxtb	r3, r3
 8024e64:	e00e      	b.n	8024e84 <put_fat+0x108>
 8024e66:	697b      	ldr	r3, [r7, #20]
 8024e68:	781b      	ldrb	r3, [r3, #0]
 8024e6a:	b25b      	sxtb	r3, r3
 8024e6c:	f023 030f 	bic.w	r3, r3, #15
 8024e70:	b25a      	sxtb	r2, r3
 8024e72:	687b      	ldr	r3, [r7, #4]
 8024e74:	0a1b      	lsrs	r3, r3, #8
 8024e76:	b25b      	sxtb	r3, r3
 8024e78:	f003 030f 	and.w	r3, r3, #15
 8024e7c:	b25b      	sxtb	r3, r3
 8024e7e:	4313      	orrs	r3, r2
 8024e80:	b25b      	sxtb	r3, r3
 8024e82:	b2db      	uxtb	r3, r3
 8024e84:	697a      	ldr	r2, [r7, #20]
 8024e86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8024e88:	68fb      	ldr	r3, [r7, #12]
 8024e8a:	2201      	movs	r2, #1
 8024e8c:	70da      	strb	r2, [r3, #3]
			break;
 8024e8e:	e057      	b.n	8024f40 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8024e90:	68fb      	ldr	r3, [r7, #12]
 8024e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024e94:	68bb      	ldr	r3, [r7, #8]
 8024e96:	0a1b      	lsrs	r3, r3, #8
 8024e98:	4413      	add	r3, r2
 8024e9a:	4619      	mov	r1, r3
 8024e9c:	68f8      	ldr	r0, [r7, #12]
 8024e9e:	f7ff fe0d 	bl	8024abc <move_window>
 8024ea2:	4603      	mov	r3, r0
 8024ea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8024ea6:	7ffb      	ldrb	r3, [r7, #31]
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	d146      	bne.n	8024f3a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8024eac:	68fb      	ldr	r3, [r7, #12]
 8024eae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024eb2:	68bb      	ldr	r3, [r7, #8]
 8024eb4:	005b      	lsls	r3, r3, #1
 8024eb6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8024eba:	4413      	add	r3, r2
 8024ebc:	687a      	ldr	r2, [r7, #4]
 8024ebe:	b292      	uxth	r2, r2
 8024ec0:	4611      	mov	r1, r2
 8024ec2:	4618      	mov	r0, r3
 8024ec4:	f7ff fb55 	bl	8024572 <st_word>
			fs->wflag = 1;
 8024ec8:	68fb      	ldr	r3, [r7, #12]
 8024eca:	2201      	movs	r2, #1
 8024ecc:	70da      	strb	r2, [r3, #3]
			break;
 8024ece:	e037      	b.n	8024f40 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8024ed0:	68fb      	ldr	r3, [r7, #12]
 8024ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024ed4:	68bb      	ldr	r3, [r7, #8]
 8024ed6:	09db      	lsrs	r3, r3, #7
 8024ed8:	4413      	add	r3, r2
 8024eda:	4619      	mov	r1, r3
 8024edc:	68f8      	ldr	r0, [r7, #12]
 8024ede:	f7ff fded 	bl	8024abc <move_window>
 8024ee2:	4603      	mov	r3, r0
 8024ee4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8024ee6:	7ffb      	ldrb	r3, [r7, #31]
 8024ee8:	2b00      	cmp	r3, #0
 8024eea:	d128      	bne.n	8024f3e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8024eec:	687b      	ldr	r3, [r7, #4]
 8024eee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8024ef2:	68fb      	ldr	r3, [r7, #12]
 8024ef4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024ef8:	68bb      	ldr	r3, [r7, #8]
 8024efa:	009b      	lsls	r3, r3, #2
 8024efc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8024f00:	4413      	add	r3, r2
 8024f02:	4618      	mov	r0, r3
 8024f04:	f7ff fb12 	bl	802452c <ld_dword>
 8024f08:	4603      	mov	r3, r0
 8024f0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8024f0e:	4323      	orrs	r3, r4
 8024f10:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8024f12:	68fb      	ldr	r3, [r7, #12]
 8024f14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8024f18:	68bb      	ldr	r3, [r7, #8]
 8024f1a:	009b      	lsls	r3, r3, #2
 8024f1c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8024f20:	4413      	add	r3, r2
 8024f22:	6879      	ldr	r1, [r7, #4]
 8024f24:	4618      	mov	r0, r3
 8024f26:	f7ff fb3f 	bl	80245a8 <st_dword>
			fs->wflag = 1;
 8024f2a:	68fb      	ldr	r3, [r7, #12]
 8024f2c:	2201      	movs	r2, #1
 8024f2e:	70da      	strb	r2, [r3, #3]
			break;
 8024f30:	e006      	b.n	8024f40 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8024f32:	bf00      	nop
 8024f34:	e004      	b.n	8024f40 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8024f36:	bf00      	nop
 8024f38:	e002      	b.n	8024f40 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8024f3a:	bf00      	nop
 8024f3c:	e000      	b.n	8024f40 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8024f3e:	bf00      	nop
		}
	}
	return res;
 8024f40:	7ffb      	ldrb	r3, [r7, #31]
}
 8024f42:	4618      	mov	r0, r3
 8024f44:	3724      	adds	r7, #36	; 0x24
 8024f46:	46bd      	mov	sp, r7
 8024f48:	bd90      	pop	{r4, r7, pc}

08024f4a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8024f4a:	b580      	push	{r7, lr}
 8024f4c:	b088      	sub	sp, #32
 8024f4e:	af00      	add	r7, sp, #0
 8024f50:	60f8      	str	r0, [r7, #12]
 8024f52:	60b9      	str	r1, [r7, #8]
 8024f54:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8024f56:	2300      	movs	r3, #0
 8024f58:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8024f5a:	68fb      	ldr	r3, [r7, #12]
 8024f5c:	681b      	ldr	r3, [r3, #0]
 8024f5e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8024f60:	68bb      	ldr	r3, [r7, #8]
 8024f62:	2b01      	cmp	r3, #1
 8024f64:	d904      	bls.n	8024f70 <remove_chain+0x26>
 8024f66:	69bb      	ldr	r3, [r7, #24]
 8024f68:	699b      	ldr	r3, [r3, #24]
 8024f6a:	68ba      	ldr	r2, [r7, #8]
 8024f6c:	429a      	cmp	r2, r3
 8024f6e:	d301      	bcc.n	8024f74 <remove_chain+0x2a>
 8024f70:	2302      	movs	r3, #2
 8024f72:	e04b      	b.n	802500c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8024f74:	687b      	ldr	r3, [r7, #4]
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	d00c      	beq.n	8024f94 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8024f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8024f7e:	6879      	ldr	r1, [r7, #4]
 8024f80:	69b8      	ldr	r0, [r7, #24]
 8024f82:	f7ff fefb 	bl	8024d7c <put_fat>
 8024f86:	4603      	mov	r3, r0
 8024f88:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8024f8a:	7ffb      	ldrb	r3, [r7, #31]
 8024f8c:	2b00      	cmp	r3, #0
 8024f8e:	d001      	beq.n	8024f94 <remove_chain+0x4a>
 8024f90:	7ffb      	ldrb	r3, [r7, #31]
 8024f92:	e03b      	b.n	802500c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8024f94:	68b9      	ldr	r1, [r7, #8]
 8024f96:	68f8      	ldr	r0, [r7, #12]
 8024f98:	f7ff fe4b 	bl	8024c32 <get_fat>
 8024f9c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8024f9e:	697b      	ldr	r3, [r7, #20]
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	d031      	beq.n	8025008 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8024fa4:	697b      	ldr	r3, [r7, #20]
 8024fa6:	2b01      	cmp	r3, #1
 8024fa8:	d101      	bne.n	8024fae <remove_chain+0x64>
 8024faa:	2302      	movs	r3, #2
 8024fac:	e02e      	b.n	802500c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8024fae:	697b      	ldr	r3, [r7, #20]
 8024fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024fb4:	d101      	bne.n	8024fba <remove_chain+0x70>
 8024fb6:	2301      	movs	r3, #1
 8024fb8:	e028      	b.n	802500c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8024fba:	2200      	movs	r2, #0
 8024fbc:	68b9      	ldr	r1, [r7, #8]
 8024fbe:	69b8      	ldr	r0, [r7, #24]
 8024fc0:	f7ff fedc 	bl	8024d7c <put_fat>
 8024fc4:	4603      	mov	r3, r0
 8024fc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8024fc8:	7ffb      	ldrb	r3, [r7, #31]
 8024fca:	2b00      	cmp	r3, #0
 8024fcc:	d001      	beq.n	8024fd2 <remove_chain+0x88>
 8024fce:	7ffb      	ldrb	r3, [r7, #31]
 8024fd0:	e01c      	b.n	802500c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8024fd2:	69bb      	ldr	r3, [r7, #24]
 8024fd4:	695a      	ldr	r2, [r3, #20]
 8024fd6:	69bb      	ldr	r3, [r7, #24]
 8024fd8:	699b      	ldr	r3, [r3, #24]
 8024fda:	3b02      	subs	r3, #2
 8024fdc:	429a      	cmp	r2, r3
 8024fde:	d20b      	bcs.n	8024ff8 <remove_chain+0xae>
			fs->free_clst++;
 8024fe0:	69bb      	ldr	r3, [r7, #24]
 8024fe2:	695b      	ldr	r3, [r3, #20]
 8024fe4:	1c5a      	adds	r2, r3, #1
 8024fe6:	69bb      	ldr	r3, [r7, #24]
 8024fe8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8024fea:	69bb      	ldr	r3, [r7, #24]
 8024fec:	791b      	ldrb	r3, [r3, #4]
 8024fee:	f043 0301 	orr.w	r3, r3, #1
 8024ff2:	b2da      	uxtb	r2, r3
 8024ff4:	69bb      	ldr	r3, [r7, #24]
 8024ff6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8024ff8:	697b      	ldr	r3, [r7, #20]
 8024ffa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8024ffc:	69bb      	ldr	r3, [r7, #24]
 8024ffe:	699b      	ldr	r3, [r3, #24]
 8025000:	68ba      	ldr	r2, [r7, #8]
 8025002:	429a      	cmp	r2, r3
 8025004:	d3c6      	bcc.n	8024f94 <remove_chain+0x4a>
 8025006:	e000      	b.n	802500a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8025008:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 802500a:	2300      	movs	r3, #0
}
 802500c:	4618      	mov	r0, r3
 802500e:	3720      	adds	r7, #32
 8025010:	46bd      	mov	sp, r7
 8025012:	bd80      	pop	{r7, pc}

08025014 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8025014:	b580      	push	{r7, lr}
 8025016:	b088      	sub	sp, #32
 8025018:	af00      	add	r7, sp, #0
 802501a:	6078      	str	r0, [r7, #4]
 802501c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 802501e:	687b      	ldr	r3, [r7, #4]
 8025020:	681b      	ldr	r3, [r3, #0]
 8025022:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8025024:	683b      	ldr	r3, [r7, #0]
 8025026:	2b00      	cmp	r3, #0
 8025028:	d10d      	bne.n	8025046 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 802502a:	693b      	ldr	r3, [r7, #16]
 802502c:	691b      	ldr	r3, [r3, #16]
 802502e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8025030:	69bb      	ldr	r3, [r7, #24]
 8025032:	2b00      	cmp	r3, #0
 8025034:	d004      	beq.n	8025040 <create_chain+0x2c>
 8025036:	693b      	ldr	r3, [r7, #16]
 8025038:	699b      	ldr	r3, [r3, #24]
 802503a:	69ba      	ldr	r2, [r7, #24]
 802503c:	429a      	cmp	r2, r3
 802503e:	d31b      	bcc.n	8025078 <create_chain+0x64>
 8025040:	2301      	movs	r3, #1
 8025042:	61bb      	str	r3, [r7, #24]
 8025044:	e018      	b.n	8025078 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8025046:	6839      	ldr	r1, [r7, #0]
 8025048:	6878      	ldr	r0, [r7, #4]
 802504a:	f7ff fdf2 	bl	8024c32 <get_fat>
 802504e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8025050:	68fb      	ldr	r3, [r7, #12]
 8025052:	2b01      	cmp	r3, #1
 8025054:	d801      	bhi.n	802505a <create_chain+0x46>
 8025056:	2301      	movs	r3, #1
 8025058:	e070      	b.n	802513c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 802505a:	68fb      	ldr	r3, [r7, #12]
 802505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025060:	d101      	bne.n	8025066 <create_chain+0x52>
 8025062:	68fb      	ldr	r3, [r7, #12]
 8025064:	e06a      	b.n	802513c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8025066:	693b      	ldr	r3, [r7, #16]
 8025068:	699b      	ldr	r3, [r3, #24]
 802506a:	68fa      	ldr	r2, [r7, #12]
 802506c:	429a      	cmp	r2, r3
 802506e:	d201      	bcs.n	8025074 <create_chain+0x60>
 8025070:	68fb      	ldr	r3, [r7, #12]
 8025072:	e063      	b.n	802513c <create_chain+0x128>
		scl = clst;
 8025074:	683b      	ldr	r3, [r7, #0]
 8025076:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8025078:	69bb      	ldr	r3, [r7, #24]
 802507a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 802507c:	69fb      	ldr	r3, [r7, #28]
 802507e:	3301      	adds	r3, #1
 8025080:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8025082:	693b      	ldr	r3, [r7, #16]
 8025084:	699b      	ldr	r3, [r3, #24]
 8025086:	69fa      	ldr	r2, [r7, #28]
 8025088:	429a      	cmp	r2, r3
 802508a:	d307      	bcc.n	802509c <create_chain+0x88>
				ncl = 2;
 802508c:	2302      	movs	r3, #2
 802508e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8025090:	69fa      	ldr	r2, [r7, #28]
 8025092:	69bb      	ldr	r3, [r7, #24]
 8025094:	429a      	cmp	r2, r3
 8025096:	d901      	bls.n	802509c <create_chain+0x88>
 8025098:	2300      	movs	r3, #0
 802509a:	e04f      	b.n	802513c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 802509c:	69f9      	ldr	r1, [r7, #28]
 802509e:	6878      	ldr	r0, [r7, #4]
 80250a0:	f7ff fdc7 	bl	8024c32 <get_fat>
 80250a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80250a6:	68fb      	ldr	r3, [r7, #12]
 80250a8:	2b00      	cmp	r3, #0
 80250aa:	d00e      	beq.n	80250ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80250ac:	68fb      	ldr	r3, [r7, #12]
 80250ae:	2b01      	cmp	r3, #1
 80250b0:	d003      	beq.n	80250ba <create_chain+0xa6>
 80250b2:	68fb      	ldr	r3, [r7, #12]
 80250b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80250b8:	d101      	bne.n	80250be <create_chain+0xaa>
 80250ba:	68fb      	ldr	r3, [r7, #12]
 80250bc:	e03e      	b.n	802513c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80250be:	69fa      	ldr	r2, [r7, #28]
 80250c0:	69bb      	ldr	r3, [r7, #24]
 80250c2:	429a      	cmp	r2, r3
 80250c4:	d1da      	bne.n	802507c <create_chain+0x68>
 80250c6:	2300      	movs	r3, #0
 80250c8:	e038      	b.n	802513c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80250ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80250cc:	f04f 32ff 	mov.w	r2, #4294967295
 80250d0:	69f9      	ldr	r1, [r7, #28]
 80250d2:	6938      	ldr	r0, [r7, #16]
 80250d4:	f7ff fe52 	bl	8024d7c <put_fat>
 80250d8:	4603      	mov	r3, r0
 80250da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80250dc:	7dfb      	ldrb	r3, [r7, #23]
 80250de:	2b00      	cmp	r3, #0
 80250e0:	d109      	bne.n	80250f6 <create_chain+0xe2>
 80250e2:	683b      	ldr	r3, [r7, #0]
 80250e4:	2b00      	cmp	r3, #0
 80250e6:	d006      	beq.n	80250f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80250e8:	69fa      	ldr	r2, [r7, #28]
 80250ea:	6839      	ldr	r1, [r7, #0]
 80250ec:	6938      	ldr	r0, [r7, #16]
 80250ee:	f7ff fe45 	bl	8024d7c <put_fat>
 80250f2:	4603      	mov	r3, r0
 80250f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80250f6:	7dfb      	ldrb	r3, [r7, #23]
 80250f8:	2b00      	cmp	r3, #0
 80250fa:	d116      	bne.n	802512a <create_chain+0x116>
		fs->last_clst = ncl;
 80250fc:	693b      	ldr	r3, [r7, #16]
 80250fe:	69fa      	ldr	r2, [r7, #28]
 8025100:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8025102:	693b      	ldr	r3, [r7, #16]
 8025104:	695a      	ldr	r2, [r3, #20]
 8025106:	693b      	ldr	r3, [r7, #16]
 8025108:	699b      	ldr	r3, [r3, #24]
 802510a:	3b02      	subs	r3, #2
 802510c:	429a      	cmp	r2, r3
 802510e:	d804      	bhi.n	802511a <create_chain+0x106>
 8025110:	693b      	ldr	r3, [r7, #16]
 8025112:	695b      	ldr	r3, [r3, #20]
 8025114:	1e5a      	subs	r2, r3, #1
 8025116:	693b      	ldr	r3, [r7, #16]
 8025118:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 802511a:	693b      	ldr	r3, [r7, #16]
 802511c:	791b      	ldrb	r3, [r3, #4]
 802511e:	f043 0301 	orr.w	r3, r3, #1
 8025122:	b2da      	uxtb	r2, r3
 8025124:	693b      	ldr	r3, [r7, #16]
 8025126:	711a      	strb	r2, [r3, #4]
 8025128:	e007      	b.n	802513a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 802512a:	7dfb      	ldrb	r3, [r7, #23]
 802512c:	2b01      	cmp	r3, #1
 802512e:	d102      	bne.n	8025136 <create_chain+0x122>
 8025130:	f04f 33ff 	mov.w	r3, #4294967295
 8025134:	e000      	b.n	8025138 <create_chain+0x124>
 8025136:	2301      	movs	r3, #1
 8025138:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 802513a:	69fb      	ldr	r3, [r7, #28]
}
 802513c:	4618      	mov	r0, r3
 802513e:	3720      	adds	r7, #32
 8025140:	46bd      	mov	sp, r7
 8025142:	bd80      	pop	{r7, pc}

08025144 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8025144:	b480      	push	{r7}
 8025146:	b087      	sub	sp, #28
 8025148:	af00      	add	r7, sp, #0
 802514a:	6078      	str	r0, [r7, #4]
 802514c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 802514e:	687b      	ldr	r3, [r7, #4]
 8025150:	681b      	ldr	r3, [r3, #0]
 8025152:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8025154:	687b      	ldr	r3, [r7, #4]
 8025156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025158:	3304      	adds	r3, #4
 802515a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 802515c:	683b      	ldr	r3, [r7, #0]
 802515e:	0a5b      	lsrs	r3, r3, #9
 8025160:	68fa      	ldr	r2, [r7, #12]
 8025162:	8952      	ldrh	r2, [r2, #10]
 8025164:	fbb3 f3f2 	udiv	r3, r3, r2
 8025168:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 802516a:	693b      	ldr	r3, [r7, #16]
 802516c:	1d1a      	adds	r2, r3, #4
 802516e:	613a      	str	r2, [r7, #16]
 8025170:	681b      	ldr	r3, [r3, #0]
 8025172:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8025174:	68bb      	ldr	r3, [r7, #8]
 8025176:	2b00      	cmp	r3, #0
 8025178:	d101      	bne.n	802517e <clmt_clust+0x3a>
 802517a:	2300      	movs	r3, #0
 802517c:	e010      	b.n	80251a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 802517e:	697a      	ldr	r2, [r7, #20]
 8025180:	68bb      	ldr	r3, [r7, #8]
 8025182:	429a      	cmp	r2, r3
 8025184:	d307      	bcc.n	8025196 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8025186:	697a      	ldr	r2, [r7, #20]
 8025188:	68bb      	ldr	r3, [r7, #8]
 802518a:	1ad3      	subs	r3, r2, r3
 802518c:	617b      	str	r3, [r7, #20]
 802518e:	693b      	ldr	r3, [r7, #16]
 8025190:	3304      	adds	r3, #4
 8025192:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8025194:	e7e9      	b.n	802516a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8025196:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8025198:	693b      	ldr	r3, [r7, #16]
 802519a:	681a      	ldr	r2, [r3, #0]
 802519c:	697b      	ldr	r3, [r7, #20]
 802519e:	4413      	add	r3, r2
}
 80251a0:	4618      	mov	r0, r3
 80251a2:	371c      	adds	r7, #28
 80251a4:	46bd      	mov	sp, r7
 80251a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251aa:	4770      	bx	lr

080251ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80251ac:	b580      	push	{r7, lr}
 80251ae:	b086      	sub	sp, #24
 80251b0:	af00      	add	r7, sp, #0
 80251b2:	6078      	str	r0, [r7, #4]
 80251b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80251b6:	687b      	ldr	r3, [r7, #4]
 80251b8:	681b      	ldr	r3, [r3, #0]
 80251ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80251bc:	683b      	ldr	r3, [r7, #0]
 80251be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80251c2:	d204      	bcs.n	80251ce <dir_sdi+0x22>
 80251c4:	683b      	ldr	r3, [r7, #0]
 80251c6:	f003 031f 	and.w	r3, r3, #31
 80251ca:	2b00      	cmp	r3, #0
 80251cc:	d001      	beq.n	80251d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80251ce:	2302      	movs	r3, #2
 80251d0:	e063      	b.n	802529a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80251d2:	687b      	ldr	r3, [r7, #4]
 80251d4:	683a      	ldr	r2, [r7, #0]
 80251d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80251d8:	687b      	ldr	r3, [r7, #4]
 80251da:	689b      	ldr	r3, [r3, #8]
 80251dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80251de:	697b      	ldr	r3, [r7, #20]
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	d106      	bne.n	80251f2 <dir_sdi+0x46>
 80251e4:	693b      	ldr	r3, [r7, #16]
 80251e6:	781b      	ldrb	r3, [r3, #0]
 80251e8:	2b02      	cmp	r3, #2
 80251ea:	d902      	bls.n	80251f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80251ec:	693b      	ldr	r3, [r7, #16]
 80251ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80251f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80251f2:	697b      	ldr	r3, [r7, #20]
 80251f4:	2b00      	cmp	r3, #0
 80251f6:	d10c      	bne.n	8025212 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80251f8:	683b      	ldr	r3, [r7, #0]
 80251fa:	095b      	lsrs	r3, r3, #5
 80251fc:	693a      	ldr	r2, [r7, #16]
 80251fe:	8912      	ldrh	r2, [r2, #8]
 8025200:	4293      	cmp	r3, r2
 8025202:	d301      	bcc.n	8025208 <dir_sdi+0x5c>
 8025204:	2302      	movs	r3, #2
 8025206:	e048      	b.n	802529a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8025208:	693b      	ldr	r3, [r7, #16]
 802520a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	61da      	str	r2, [r3, #28]
 8025210:	e029      	b.n	8025266 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8025212:	693b      	ldr	r3, [r7, #16]
 8025214:	895b      	ldrh	r3, [r3, #10]
 8025216:	025b      	lsls	r3, r3, #9
 8025218:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 802521a:	e019      	b.n	8025250 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 802521c:	687b      	ldr	r3, [r7, #4]
 802521e:	6979      	ldr	r1, [r7, #20]
 8025220:	4618      	mov	r0, r3
 8025222:	f7ff fd06 	bl	8024c32 <get_fat>
 8025226:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8025228:	697b      	ldr	r3, [r7, #20]
 802522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802522e:	d101      	bne.n	8025234 <dir_sdi+0x88>
 8025230:	2301      	movs	r3, #1
 8025232:	e032      	b.n	802529a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8025234:	697b      	ldr	r3, [r7, #20]
 8025236:	2b01      	cmp	r3, #1
 8025238:	d904      	bls.n	8025244 <dir_sdi+0x98>
 802523a:	693b      	ldr	r3, [r7, #16]
 802523c:	699b      	ldr	r3, [r3, #24]
 802523e:	697a      	ldr	r2, [r7, #20]
 8025240:	429a      	cmp	r2, r3
 8025242:	d301      	bcc.n	8025248 <dir_sdi+0x9c>
 8025244:	2302      	movs	r3, #2
 8025246:	e028      	b.n	802529a <dir_sdi+0xee>
			ofs -= csz;
 8025248:	683a      	ldr	r2, [r7, #0]
 802524a:	68fb      	ldr	r3, [r7, #12]
 802524c:	1ad3      	subs	r3, r2, r3
 802524e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8025250:	683a      	ldr	r2, [r7, #0]
 8025252:	68fb      	ldr	r3, [r7, #12]
 8025254:	429a      	cmp	r2, r3
 8025256:	d2e1      	bcs.n	802521c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8025258:	6979      	ldr	r1, [r7, #20]
 802525a:	6938      	ldr	r0, [r7, #16]
 802525c:	f7ff fcca 	bl	8024bf4 <clust2sect>
 8025260:	4602      	mov	r2, r0
 8025262:	687b      	ldr	r3, [r7, #4]
 8025264:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8025266:	687b      	ldr	r3, [r7, #4]
 8025268:	697a      	ldr	r2, [r7, #20]
 802526a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 802526c:	687b      	ldr	r3, [r7, #4]
 802526e:	69db      	ldr	r3, [r3, #28]
 8025270:	2b00      	cmp	r3, #0
 8025272:	d101      	bne.n	8025278 <dir_sdi+0xcc>
 8025274:	2302      	movs	r3, #2
 8025276:	e010      	b.n	802529a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	69da      	ldr	r2, [r3, #28]
 802527c:	683b      	ldr	r3, [r7, #0]
 802527e:	0a5b      	lsrs	r3, r3, #9
 8025280:	441a      	add	r2, r3
 8025282:	687b      	ldr	r3, [r7, #4]
 8025284:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8025286:	693b      	ldr	r3, [r7, #16]
 8025288:	f103 0234 	add.w	r2, r3, #52	; 0x34
 802528c:	683b      	ldr	r3, [r7, #0]
 802528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8025292:	441a      	add	r2, r3
 8025294:	687b      	ldr	r3, [r7, #4]
 8025296:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8025298:	2300      	movs	r3, #0
}
 802529a:	4618      	mov	r0, r3
 802529c:	3718      	adds	r7, #24
 802529e:	46bd      	mov	sp, r7
 80252a0:	bd80      	pop	{r7, pc}

080252a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80252a2:	b580      	push	{r7, lr}
 80252a4:	b086      	sub	sp, #24
 80252a6:	af00      	add	r7, sp, #0
 80252a8:	6078      	str	r0, [r7, #4]
 80252aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80252ac:	687b      	ldr	r3, [r7, #4]
 80252ae:	681b      	ldr	r3, [r3, #0]
 80252b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80252b2:	687b      	ldr	r3, [r7, #4]
 80252b4:	695b      	ldr	r3, [r3, #20]
 80252b6:	3320      	adds	r3, #32
 80252b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80252ba:	687b      	ldr	r3, [r7, #4]
 80252bc:	69db      	ldr	r3, [r3, #28]
 80252be:	2b00      	cmp	r3, #0
 80252c0:	d003      	beq.n	80252ca <dir_next+0x28>
 80252c2:	68bb      	ldr	r3, [r7, #8]
 80252c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80252c8:	d301      	bcc.n	80252ce <dir_next+0x2c>
 80252ca:	2304      	movs	r3, #4
 80252cc:	e0aa      	b.n	8025424 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80252ce:	68bb      	ldr	r3, [r7, #8]
 80252d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80252d4:	2b00      	cmp	r3, #0
 80252d6:	f040 8098 	bne.w	802540a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80252da:	687b      	ldr	r3, [r7, #4]
 80252dc:	69db      	ldr	r3, [r3, #28]
 80252de:	1c5a      	adds	r2, r3, #1
 80252e0:	687b      	ldr	r3, [r7, #4]
 80252e2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80252e4:	687b      	ldr	r3, [r7, #4]
 80252e6:	699b      	ldr	r3, [r3, #24]
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	d10b      	bne.n	8025304 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80252ec:	68bb      	ldr	r3, [r7, #8]
 80252ee:	095b      	lsrs	r3, r3, #5
 80252f0:	68fa      	ldr	r2, [r7, #12]
 80252f2:	8912      	ldrh	r2, [r2, #8]
 80252f4:	4293      	cmp	r3, r2
 80252f6:	f0c0 8088 	bcc.w	802540a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80252fa:	687b      	ldr	r3, [r7, #4]
 80252fc:	2200      	movs	r2, #0
 80252fe:	61da      	str	r2, [r3, #28]
 8025300:	2304      	movs	r3, #4
 8025302:	e08f      	b.n	8025424 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8025304:	68bb      	ldr	r3, [r7, #8]
 8025306:	0a5b      	lsrs	r3, r3, #9
 8025308:	68fa      	ldr	r2, [r7, #12]
 802530a:	8952      	ldrh	r2, [r2, #10]
 802530c:	3a01      	subs	r2, #1
 802530e:	4013      	ands	r3, r2
 8025310:	2b00      	cmp	r3, #0
 8025312:	d17a      	bne.n	802540a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8025314:	687a      	ldr	r2, [r7, #4]
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	699b      	ldr	r3, [r3, #24]
 802531a:	4619      	mov	r1, r3
 802531c:	4610      	mov	r0, r2
 802531e:	f7ff fc88 	bl	8024c32 <get_fat>
 8025322:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8025324:	697b      	ldr	r3, [r7, #20]
 8025326:	2b01      	cmp	r3, #1
 8025328:	d801      	bhi.n	802532e <dir_next+0x8c>
 802532a:	2302      	movs	r3, #2
 802532c:	e07a      	b.n	8025424 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 802532e:	697b      	ldr	r3, [r7, #20]
 8025330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025334:	d101      	bne.n	802533a <dir_next+0x98>
 8025336:	2301      	movs	r3, #1
 8025338:	e074      	b.n	8025424 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 802533a:	68fb      	ldr	r3, [r7, #12]
 802533c:	699b      	ldr	r3, [r3, #24]
 802533e:	697a      	ldr	r2, [r7, #20]
 8025340:	429a      	cmp	r2, r3
 8025342:	d358      	bcc.n	80253f6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8025344:	683b      	ldr	r3, [r7, #0]
 8025346:	2b00      	cmp	r3, #0
 8025348:	d104      	bne.n	8025354 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 802534a:	687b      	ldr	r3, [r7, #4]
 802534c:	2200      	movs	r2, #0
 802534e:	61da      	str	r2, [r3, #28]
 8025350:	2304      	movs	r3, #4
 8025352:	e067      	b.n	8025424 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8025354:	687a      	ldr	r2, [r7, #4]
 8025356:	687b      	ldr	r3, [r7, #4]
 8025358:	699b      	ldr	r3, [r3, #24]
 802535a:	4619      	mov	r1, r3
 802535c:	4610      	mov	r0, r2
 802535e:	f7ff fe59 	bl	8025014 <create_chain>
 8025362:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8025364:	697b      	ldr	r3, [r7, #20]
 8025366:	2b00      	cmp	r3, #0
 8025368:	d101      	bne.n	802536e <dir_next+0xcc>
 802536a:	2307      	movs	r3, #7
 802536c:	e05a      	b.n	8025424 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 802536e:	697b      	ldr	r3, [r7, #20]
 8025370:	2b01      	cmp	r3, #1
 8025372:	d101      	bne.n	8025378 <dir_next+0xd6>
 8025374:	2302      	movs	r3, #2
 8025376:	e055      	b.n	8025424 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8025378:	697b      	ldr	r3, [r7, #20]
 802537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802537e:	d101      	bne.n	8025384 <dir_next+0xe2>
 8025380:	2301      	movs	r3, #1
 8025382:	e04f      	b.n	8025424 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8025384:	68f8      	ldr	r0, [r7, #12]
 8025386:	f7ff fb55 	bl	8024a34 <sync_window>
 802538a:	4603      	mov	r3, r0
 802538c:	2b00      	cmp	r3, #0
 802538e:	d001      	beq.n	8025394 <dir_next+0xf2>
 8025390:	2301      	movs	r3, #1
 8025392:	e047      	b.n	8025424 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8025394:	68fb      	ldr	r3, [r7, #12]
 8025396:	3334      	adds	r3, #52	; 0x34
 8025398:	f44f 7200 	mov.w	r2, #512	; 0x200
 802539c:	2100      	movs	r1, #0
 802539e:	4618      	mov	r0, r3
 80253a0:	f7ff f94f 	bl	8024642 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80253a4:	2300      	movs	r3, #0
 80253a6:	613b      	str	r3, [r7, #16]
 80253a8:	6979      	ldr	r1, [r7, #20]
 80253aa:	68f8      	ldr	r0, [r7, #12]
 80253ac:	f7ff fc22 	bl	8024bf4 <clust2sect>
 80253b0:	4602      	mov	r2, r0
 80253b2:	68fb      	ldr	r3, [r7, #12]
 80253b4:	631a      	str	r2, [r3, #48]	; 0x30
 80253b6:	e012      	b.n	80253de <dir_next+0x13c>
						fs->wflag = 1;
 80253b8:	68fb      	ldr	r3, [r7, #12]
 80253ba:	2201      	movs	r2, #1
 80253bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80253be:	68f8      	ldr	r0, [r7, #12]
 80253c0:	f7ff fb38 	bl	8024a34 <sync_window>
 80253c4:	4603      	mov	r3, r0
 80253c6:	2b00      	cmp	r3, #0
 80253c8:	d001      	beq.n	80253ce <dir_next+0x12c>
 80253ca:	2301      	movs	r3, #1
 80253cc:	e02a      	b.n	8025424 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80253ce:	693b      	ldr	r3, [r7, #16]
 80253d0:	3301      	adds	r3, #1
 80253d2:	613b      	str	r3, [r7, #16]
 80253d4:	68fb      	ldr	r3, [r7, #12]
 80253d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80253d8:	1c5a      	adds	r2, r3, #1
 80253da:	68fb      	ldr	r3, [r7, #12]
 80253dc:	631a      	str	r2, [r3, #48]	; 0x30
 80253de:	68fb      	ldr	r3, [r7, #12]
 80253e0:	895b      	ldrh	r3, [r3, #10]
 80253e2:	461a      	mov	r2, r3
 80253e4:	693b      	ldr	r3, [r7, #16]
 80253e6:	4293      	cmp	r3, r2
 80253e8:	d3e6      	bcc.n	80253b8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80253ea:	68fb      	ldr	r3, [r7, #12]
 80253ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80253ee:	693b      	ldr	r3, [r7, #16]
 80253f0:	1ad2      	subs	r2, r2, r3
 80253f2:	68fb      	ldr	r3, [r7, #12]
 80253f4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80253f6:	687b      	ldr	r3, [r7, #4]
 80253f8:	697a      	ldr	r2, [r7, #20]
 80253fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80253fc:	6979      	ldr	r1, [r7, #20]
 80253fe:	68f8      	ldr	r0, [r7, #12]
 8025400:	f7ff fbf8 	bl	8024bf4 <clust2sect>
 8025404:	4602      	mov	r2, r0
 8025406:	687b      	ldr	r3, [r7, #4]
 8025408:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 802540a:	687b      	ldr	r3, [r7, #4]
 802540c:	68ba      	ldr	r2, [r7, #8]
 802540e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8025410:	68fb      	ldr	r3, [r7, #12]
 8025412:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8025416:	68bb      	ldr	r3, [r7, #8]
 8025418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802541c:	441a      	add	r2, r3
 802541e:	687b      	ldr	r3, [r7, #4]
 8025420:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8025422:	2300      	movs	r3, #0
}
 8025424:	4618      	mov	r0, r3
 8025426:	3718      	adds	r7, #24
 8025428:	46bd      	mov	sp, r7
 802542a:	bd80      	pop	{r7, pc}

0802542c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 802542c:	b580      	push	{r7, lr}
 802542e:	b086      	sub	sp, #24
 8025430:	af00      	add	r7, sp, #0
 8025432:	6078      	str	r0, [r7, #4]
 8025434:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8025436:	687b      	ldr	r3, [r7, #4]
 8025438:	681b      	ldr	r3, [r3, #0]
 802543a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 802543c:	2100      	movs	r1, #0
 802543e:	6878      	ldr	r0, [r7, #4]
 8025440:	f7ff feb4 	bl	80251ac <dir_sdi>
 8025444:	4603      	mov	r3, r0
 8025446:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8025448:	7dfb      	ldrb	r3, [r7, #23]
 802544a:	2b00      	cmp	r3, #0
 802544c:	d12b      	bne.n	80254a6 <dir_alloc+0x7a>
		n = 0;
 802544e:	2300      	movs	r3, #0
 8025450:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8025452:	687b      	ldr	r3, [r7, #4]
 8025454:	69db      	ldr	r3, [r3, #28]
 8025456:	4619      	mov	r1, r3
 8025458:	68f8      	ldr	r0, [r7, #12]
 802545a:	f7ff fb2f 	bl	8024abc <move_window>
 802545e:	4603      	mov	r3, r0
 8025460:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8025462:	7dfb      	ldrb	r3, [r7, #23]
 8025464:	2b00      	cmp	r3, #0
 8025466:	d11d      	bne.n	80254a4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8025468:	687b      	ldr	r3, [r7, #4]
 802546a:	6a1b      	ldr	r3, [r3, #32]
 802546c:	781b      	ldrb	r3, [r3, #0]
 802546e:	2be5      	cmp	r3, #229	; 0xe5
 8025470:	d004      	beq.n	802547c <dir_alloc+0x50>
 8025472:	687b      	ldr	r3, [r7, #4]
 8025474:	6a1b      	ldr	r3, [r3, #32]
 8025476:	781b      	ldrb	r3, [r3, #0]
 8025478:	2b00      	cmp	r3, #0
 802547a:	d107      	bne.n	802548c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 802547c:	693b      	ldr	r3, [r7, #16]
 802547e:	3301      	adds	r3, #1
 8025480:	613b      	str	r3, [r7, #16]
 8025482:	693a      	ldr	r2, [r7, #16]
 8025484:	683b      	ldr	r3, [r7, #0]
 8025486:	429a      	cmp	r2, r3
 8025488:	d102      	bne.n	8025490 <dir_alloc+0x64>
 802548a:	e00c      	b.n	80254a6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 802548c:	2300      	movs	r3, #0
 802548e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8025490:	2101      	movs	r1, #1
 8025492:	6878      	ldr	r0, [r7, #4]
 8025494:	f7ff ff05 	bl	80252a2 <dir_next>
 8025498:	4603      	mov	r3, r0
 802549a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 802549c:	7dfb      	ldrb	r3, [r7, #23]
 802549e:	2b00      	cmp	r3, #0
 80254a0:	d0d7      	beq.n	8025452 <dir_alloc+0x26>
 80254a2:	e000      	b.n	80254a6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80254a4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80254a6:	7dfb      	ldrb	r3, [r7, #23]
 80254a8:	2b04      	cmp	r3, #4
 80254aa:	d101      	bne.n	80254b0 <dir_alloc+0x84>
 80254ac:	2307      	movs	r3, #7
 80254ae:	75fb      	strb	r3, [r7, #23]
	return res;
 80254b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80254b2:	4618      	mov	r0, r3
 80254b4:	3718      	adds	r7, #24
 80254b6:	46bd      	mov	sp, r7
 80254b8:	bd80      	pop	{r7, pc}

080254ba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80254ba:	b580      	push	{r7, lr}
 80254bc:	b084      	sub	sp, #16
 80254be:	af00      	add	r7, sp, #0
 80254c0:	6078      	str	r0, [r7, #4]
 80254c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80254c4:	683b      	ldr	r3, [r7, #0]
 80254c6:	331a      	adds	r3, #26
 80254c8:	4618      	mov	r0, r3
 80254ca:	f7ff f817 	bl	80244fc <ld_word>
 80254ce:	4603      	mov	r3, r0
 80254d0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80254d2:	687b      	ldr	r3, [r7, #4]
 80254d4:	781b      	ldrb	r3, [r3, #0]
 80254d6:	2b03      	cmp	r3, #3
 80254d8:	d109      	bne.n	80254ee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80254da:	683b      	ldr	r3, [r7, #0]
 80254dc:	3314      	adds	r3, #20
 80254de:	4618      	mov	r0, r3
 80254e0:	f7ff f80c 	bl	80244fc <ld_word>
 80254e4:	4603      	mov	r3, r0
 80254e6:	041b      	lsls	r3, r3, #16
 80254e8:	68fa      	ldr	r2, [r7, #12]
 80254ea:	4313      	orrs	r3, r2
 80254ec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80254ee:	68fb      	ldr	r3, [r7, #12]
}
 80254f0:	4618      	mov	r0, r3
 80254f2:	3710      	adds	r7, #16
 80254f4:	46bd      	mov	sp, r7
 80254f6:	bd80      	pop	{r7, pc}

080254f8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80254f8:	b580      	push	{r7, lr}
 80254fa:	b084      	sub	sp, #16
 80254fc:	af00      	add	r7, sp, #0
 80254fe:	60f8      	str	r0, [r7, #12]
 8025500:	60b9      	str	r1, [r7, #8]
 8025502:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8025504:	68bb      	ldr	r3, [r7, #8]
 8025506:	331a      	adds	r3, #26
 8025508:	687a      	ldr	r2, [r7, #4]
 802550a:	b292      	uxth	r2, r2
 802550c:	4611      	mov	r1, r2
 802550e:	4618      	mov	r0, r3
 8025510:	f7ff f82f 	bl	8024572 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8025514:	68fb      	ldr	r3, [r7, #12]
 8025516:	781b      	ldrb	r3, [r3, #0]
 8025518:	2b03      	cmp	r3, #3
 802551a:	d109      	bne.n	8025530 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 802551c:	68bb      	ldr	r3, [r7, #8]
 802551e:	f103 0214 	add.w	r2, r3, #20
 8025522:	687b      	ldr	r3, [r7, #4]
 8025524:	0c1b      	lsrs	r3, r3, #16
 8025526:	b29b      	uxth	r3, r3
 8025528:	4619      	mov	r1, r3
 802552a:	4610      	mov	r0, r2
 802552c:	f7ff f821 	bl	8024572 <st_word>
	}
}
 8025530:	bf00      	nop
 8025532:	3710      	adds	r7, #16
 8025534:	46bd      	mov	sp, r7
 8025536:	bd80      	pop	{r7, pc}

08025538 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8025538:	b580      	push	{r7, lr}
 802553a:	b086      	sub	sp, #24
 802553c:	af00      	add	r7, sp, #0
 802553e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8025540:	687b      	ldr	r3, [r7, #4]
 8025542:	681b      	ldr	r3, [r3, #0]
 8025544:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8025546:	2100      	movs	r1, #0
 8025548:	6878      	ldr	r0, [r7, #4]
 802554a:	f7ff fe2f 	bl	80251ac <dir_sdi>
 802554e:	4603      	mov	r3, r0
 8025550:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8025552:	7dfb      	ldrb	r3, [r7, #23]
 8025554:	2b00      	cmp	r3, #0
 8025556:	d001      	beq.n	802555c <dir_find+0x24>
 8025558:	7dfb      	ldrb	r3, [r7, #23]
 802555a:	e03e      	b.n	80255da <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 802555c:	687b      	ldr	r3, [r7, #4]
 802555e:	69db      	ldr	r3, [r3, #28]
 8025560:	4619      	mov	r1, r3
 8025562:	6938      	ldr	r0, [r7, #16]
 8025564:	f7ff faaa 	bl	8024abc <move_window>
 8025568:	4603      	mov	r3, r0
 802556a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 802556c:	7dfb      	ldrb	r3, [r7, #23]
 802556e:	2b00      	cmp	r3, #0
 8025570:	d12f      	bne.n	80255d2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8025572:	687b      	ldr	r3, [r7, #4]
 8025574:	6a1b      	ldr	r3, [r3, #32]
 8025576:	781b      	ldrb	r3, [r3, #0]
 8025578:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 802557a:	7bfb      	ldrb	r3, [r7, #15]
 802557c:	2b00      	cmp	r3, #0
 802557e:	d102      	bne.n	8025586 <dir_find+0x4e>
 8025580:	2304      	movs	r3, #4
 8025582:	75fb      	strb	r3, [r7, #23]
 8025584:	e028      	b.n	80255d8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8025586:	687b      	ldr	r3, [r7, #4]
 8025588:	6a1b      	ldr	r3, [r3, #32]
 802558a:	330b      	adds	r3, #11
 802558c:	781b      	ldrb	r3, [r3, #0]
 802558e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8025592:	b2da      	uxtb	r2, r3
 8025594:	687b      	ldr	r3, [r7, #4]
 8025596:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8025598:	687b      	ldr	r3, [r7, #4]
 802559a:	6a1b      	ldr	r3, [r3, #32]
 802559c:	330b      	adds	r3, #11
 802559e:	781b      	ldrb	r3, [r3, #0]
 80255a0:	f003 0308 	and.w	r3, r3, #8
 80255a4:	2b00      	cmp	r3, #0
 80255a6:	d10a      	bne.n	80255be <dir_find+0x86>
 80255a8:	687b      	ldr	r3, [r7, #4]
 80255aa:	6a18      	ldr	r0, [r3, #32]
 80255ac:	687b      	ldr	r3, [r7, #4]
 80255ae:	3324      	adds	r3, #36	; 0x24
 80255b0:	220b      	movs	r2, #11
 80255b2:	4619      	mov	r1, r3
 80255b4:	f7ff f85f 	bl	8024676 <mem_cmp>
 80255b8:	4603      	mov	r3, r0
 80255ba:	2b00      	cmp	r3, #0
 80255bc:	d00b      	beq.n	80255d6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80255be:	2100      	movs	r1, #0
 80255c0:	6878      	ldr	r0, [r7, #4]
 80255c2:	f7ff fe6e 	bl	80252a2 <dir_next>
 80255c6:	4603      	mov	r3, r0
 80255c8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80255ca:	7dfb      	ldrb	r3, [r7, #23]
 80255cc:	2b00      	cmp	r3, #0
 80255ce:	d0c5      	beq.n	802555c <dir_find+0x24>
 80255d0:	e002      	b.n	80255d8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80255d2:	bf00      	nop
 80255d4:	e000      	b.n	80255d8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80255d6:	bf00      	nop

	return res;
 80255d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80255da:	4618      	mov	r0, r3
 80255dc:	3718      	adds	r7, #24
 80255de:	46bd      	mov	sp, r7
 80255e0:	bd80      	pop	{r7, pc}

080255e2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80255e2:	b580      	push	{r7, lr}
 80255e4:	b084      	sub	sp, #16
 80255e6:	af00      	add	r7, sp, #0
 80255e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80255ea:	687b      	ldr	r3, [r7, #4]
 80255ec:	681b      	ldr	r3, [r3, #0]
 80255ee:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80255f0:	2101      	movs	r1, #1
 80255f2:	6878      	ldr	r0, [r7, #4]
 80255f4:	f7ff ff1a 	bl	802542c <dir_alloc>
 80255f8:	4603      	mov	r3, r0
 80255fa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80255fc:	7bfb      	ldrb	r3, [r7, #15]
 80255fe:	2b00      	cmp	r3, #0
 8025600:	d11c      	bne.n	802563c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8025602:	687b      	ldr	r3, [r7, #4]
 8025604:	69db      	ldr	r3, [r3, #28]
 8025606:	4619      	mov	r1, r3
 8025608:	68b8      	ldr	r0, [r7, #8]
 802560a:	f7ff fa57 	bl	8024abc <move_window>
 802560e:	4603      	mov	r3, r0
 8025610:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8025612:	7bfb      	ldrb	r3, [r7, #15]
 8025614:	2b00      	cmp	r3, #0
 8025616:	d111      	bne.n	802563c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8025618:	687b      	ldr	r3, [r7, #4]
 802561a:	6a1b      	ldr	r3, [r3, #32]
 802561c:	2220      	movs	r2, #32
 802561e:	2100      	movs	r1, #0
 8025620:	4618      	mov	r0, r3
 8025622:	f7ff f80e 	bl	8024642 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8025626:	687b      	ldr	r3, [r7, #4]
 8025628:	6a18      	ldr	r0, [r3, #32]
 802562a:	687b      	ldr	r3, [r7, #4]
 802562c:	3324      	adds	r3, #36	; 0x24
 802562e:	220b      	movs	r2, #11
 8025630:	4619      	mov	r1, r3
 8025632:	f7fe ffe5 	bl	8024600 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8025636:	68bb      	ldr	r3, [r7, #8]
 8025638:	2201      	movs	r2, #1
 802563a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 802563c:	7bfb      	ldrb	r3, [r7, #15]
}
 802563e:	4618      	mov	r0, r3
 8025640:	3710      	adds	r7, #16
 8025642:	46bd      	mov	sp, r7
 8025644:	bd80      	pop	{r7, pc}
	...

08025648 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8025648:	b580      	push	{r7, lr}
 802564a:	b088      	sub	sp, #32
 802564c:	af00      	add	r7, sp, #0
 802564e:	6078      	str	r0, [r7, #4]
 8025650:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8025652:	683b      	ldr	r3, [r7, #0]
 8025654:	681b      	ldr	r3, [r3, #0]
 8025656:	60fb      	str	r3, [r7, #12]
 8025658:	687b      	ldr	r3, [r7, #4]
 802565a:	3324      	adds	r3, #36	; 0x24
 802565c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 802565e:	220b      	movs	r2, #11
 8025660:	2120      	movs	r1, #32
 8025662:	68b8      	ldr	r0, [r7, #8]
 8025664:	f7fe ffed 	bl	8024642 <mem_set>
	si = i = 0; ni = 8;
 8025668:	2300      	movs	r3, #0
 802566a:	613b      	str	r3, [r7, #16]
 802566c:	693b      	ldr	r3, [r7, #16]
 802566e:	617b      	str	r3, [r7, #20]
 8025670:	2308      	movs	r3, #8
 8025672:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8025674:	697b      	ldr	r3, [r7, #20]
 8025676:	1c5a      	adds	r2, r3, #1
 8025678:	617a      	str	r2, [r7, #20]
 802567a:	68fa      	ldr	r2, [r7, #12]
 802567c:	4413      	add	r3, r2
 802567e:	781b      	ldrb	r3, [r3, #0]
 8025680:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8025682:	7ffb      	ldrb	r3, [r7, #31]
 8025684:	2b20      	cmp	r3, #32
 8025686:	d94e      	bls.n	8025726 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8025688:	7ffb      	ldrb	r3, [r7, #31]
 802568a:	2b2f      	cmp	r3, #47	; 0x2f
 802568c:	d006      	beq.n	802569c <create_name+0x54>
 802568e:	7ffb      	ldrb	r3, [r7, #31]
 8025690:	2b5c      	cmp	r3, #92	; 0x5c
 8025692:	d110      	bne.n	80256b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8025694:	e002      	b.n	802569c <create_name+0x54>
 8025696:	697b      	ldr	r3, [r7, #20]
 8025698:	3301      	adds	r3, #1
 802569a:	617b      	str	r3, [r7, #20]
 802569c:	68fa      	ldr	r2, [r7, #12]
 802569e:	697b      	ldr	r3, [r7, #20]
 80256a0:	4413      	add	r3, r2
 80256a2:	781b      	ldrb	r3, [r3, #0]
 80256a4:	2b2f      	cmp	r3, #47	; 0x2f
 80256a6:	d0f6      	beq.n	8025696 <create_name+0x4e>
 80256a8:	68fa      	ldr	r2, [r7, #12]
 80256aa:	697b      	ldr	r3, [r7, #20]
 80256ac:	4413      	add	r3, r2
 80256ae:	781b      	ldrb	r3, [r3, #0]
 80256b0:	2b5c      	cmp	r3, #92	; 0x5c
 80256b2:	d0f0      	beq.n	8025696 <create_name+0x4e>
			break;
 80256b4:	e038      	b.n	8025728 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80256b6:	7ffb      	ldrb	r3, [r7, #31]
 80256b8:	2b2e      	cmp	r3, #46	; 0x2e
 80256ba:	d003      	beq.n	80256c4 <create_name+0x7c>
 80256bc:	693a      	ldr	r2, [r7, #16]
 80256be:	69bb      	ldr	r3, [r7, #24]
 80256c0:	429a      	cmp	r2, r3
 80256c2:	d30c      	bcc.n	80256de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80256c4:	69bb      	ldr	r3, [r7, #24]
 80256c6:	2b0b      	cmp	r3, #11
 80256c8:	d002      	beq.n	80256d0 <create_name+0x88>
 80256ca:	7ffb      	ldrb	r3, [r7, #31]
 80256cc:	2b2e      	cmp	r3, #46	; 0x2e
 80256ce:	d001      	beq.n	80256d4 <create_name+0x8c>
 80256d0:	2306      	movs	r3, #6
 80256d2:	e044      	b.n	802575e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80256d4:	2308      	movs	r3, #8
 80256d6:	613b      	str	r3, [r7, #16]
 80256d8:	230b      	movs	r3, #11
 80256da:	61bb      	str	r3, [r7, #24]
			continue;
 80256dc:	e022      	b.n	8025724 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80256de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80256e2:	2b00      	cmp	r3, #0
 80256e4:	da04      	bge.n	80256f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80256e6:	7ffb      	ldrb	r3, [r7, #31]
 80256e8:	3b80      	subs	r3, #128	; 0x80
 80256ea:	4a1f      	ldr	r2, [pc, #124]	; (8025768 <create_name+0x120>)
 80256ec:	5cd3      	ldrb	r3, [r2, r3]
 80256ee:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80256f0:	7ffb      	ldrb	r3, [r7, #31]
 80256f2:	4619      	mov	r1, r3
 80256f4:	481d      	ldr	r0, [pc, #116]	; (802576c <create_name+0x124>)
 80256f6:	f7fe ffe5 	bl	80246c4 <chk_chr>
 80256fa:	4603      	mov	r3, r0
 80256fc:	2b00      	cmp	r3, #0
 80256fe:	d001      	beq.n	8025704 <create_name+0xbc>
 8025700:	2306      	movs	r3, #6
 8025702:	e02c      	b.n	802575e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8025704:	7ffb      	ldrb	r3, [r7, #31]
 8025706:	2b60      	cmp	r3, #96	; 0x60
 8025708:	d905      	bls.n	8025716 <create_name+0xce>
 802570a:	7ffb      	ldrb	r3, [r7, #31]
 802570c:	2b7a      	cmp	r3, #122	; 0x7a
 802570e:	d802      	bhi.n	8025716 <create_name+0xce>
 8025710:	7ffb      	ldrb	r3, [r7, #31]
 8025712:	3b20      	subs	r3, #32
 8025714:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8025716:	693b      	ldr	r3, [r7, #16]
 8025718:	1c5a      	adds	r2, r3, #1
 802571a:	613a      	str	r2, [r7, #16]
 802571c:	68ba      	ldr	r2, [r7, #8]
 802571e:	4413      	add	r3, r2
 8025720:	7ffa      	ldrb	r2, [r7, #31]
 8025722:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8025724:	e7a6      	b.n	8025674 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8025726:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8025728:	68fa      	ldr	r2, [r7, #12]
 802572a:	697b      	ldr	r3, [r7, #20]
 802572c:	441a      	add	r2, r3
 802572e:	683b      	ldr	r3, [r7, #0]
 8025730:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8025732:	693b      	ldr	r3, [r7, #16]
 8025734:	2b00      	cmp	r3, #0
 8025736:	d101      	bne.n	802573c <create_name+0xf4>
 8025738:	2306      	movs	r3, #6
 802573a:	e010      	b.n	802575e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 802573c:	68bb      	ldr	r3, [r7, #8]
 802573e:	781b      	ldrb	r3, [r3, #0]
 8025740:	2be5      	cmp	r3, #229	; 0xe5
 8025742:	d102      	bne.n	802574a <create_name+0x102>
 8025744:	68bb      	ldr	r3, [r7, #8]
 8025746:	2205      	movs	r2, #5
 8025748:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 802574a:	7ffb      	ldrb	r3, [r7, #31]
 802574c:	2b20      	cmp	r3, #32
 802574e:	d801      	bhi.n	8025754 <create_name+0x10c>
 8025750:	2204      	movs	r2, #4
 8025752:	e000      	b.n	8025756 <create_name+0x10e>
 8025754:	2200      	movs	r2, #0
 8025756:	68bb      	ldr	r3, [r7, #8]
 8025758:	330b      	adds	r3, #11
 802575a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 802575c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 802575e:	4618      	mov	r0, r3
 8025760:	3720      	adds	r7, #32
 8025762:	46bd      	mov	sp, r7
 8025764:	bd80      	pop	{r7, pc}
 8025766:	bf00      	nop
 8025768:	0802fc60 	.word	0x0802fc60
 802576c:	0802f190 	.word	0x0802f190

08025770 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8025770:	b580      	push	{r7, lr}
 8025772:	b086      	sub	sp, #24
 8025774:	af00      	add	r7, sp, #0
 8025776:	6078      	str	r0, [r7, #4]
 8025778:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 802577a:	687b      	ldr	r3, [r7, #4]
 802577c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 802577e:	693b      	ldr	r3, [r7, #16]
 8025780:	681b      	ldr	r3, [r3, #0]
 8025782:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8025784:	e002      	b.n	802578c <follow_path+0x1c>
 8025786:	683b      	ldr	r3, [r7, #0]
 8025788:	3301      	adds	r3, #1
 802578a:	603b      	str	r3, [r7, #0]
 802578c:	683b      	ldr	r3, [r7, #0]
 802578e:	781b      	ldrb	r3, [r3, #0]
 8025790:	2b2f      	cmp	r3, #47	; 0x2f
 8025792:	d0f8      	beq.n	8025786 <follow_path+0x16>
 8025794:	683b      	ldr	r3, [r7, #0]
 8025796:	781b      	ldrb	r3, [r3, #0]
 8025798:	2b5c      	cmp	r3, #92	; 0x5c
 802579a:	d0f4      	beq.n	8025786 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 802579c:	693b      	ldr	r3, [r7, #16]
 802579e:	2200      	movs	r2, #0
 80257a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80257a2:	683b      	ldr	r3, [r7, #0]
 80257a4:	781b      	ldrb	r3, [r3, #0]
 80257a6:	2b1f      	cmp	r3, #31
 80257a8:	d80a      	bhi.n	80257c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80257aa:	687b      	ldr	r3, [r7, #4]
 80257ac:	2280      	movs	r2, #128	; 0x80
 80257ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80257b2:	2100      	movs	r1, #0
 80257b4:	6878      	ldr	r0, [r7, #4]
 80257b6:	f7ff fcf9 	bl	80251ac <dir_sdi>
 80257ba:	4603      	mov	r3, r0
 80257bc:	75fb      	strb	r3, [r7, #23]
 80257be:	e043      	b.n	8025848 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80257c0:	463b      	mov	r3, r7
 80257c2:	4619      	mov	r1, r3
 80257c4:	6878      	ldr	r0, [r7, #4]
 80257c6:	f7ff ff3f 	bl	8025648 <create_name>
 80257ca:	4603      	mov	r3, r0
 80257cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80257ce:	7dfb      	ldrb	r3, [r7, #23]
 80257d0:	2b00      	cmp	r3, #0
 80257d2:	d134      	bne.n	802583e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80257d4:	6878      	ldr	r0, [r7, #4]
 80257d6:	f7ff feaf 	bl	8025538 <dir_find>
 80257da:	4603      	mov	r3, r0
 80257dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80257de:	687b      	ldr	r3, [r7, #4]
 80257e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80257e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80257e6:	7dfb      	ldrb	r3, [r7, #23]
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	d00a      	beq.n	8025802 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80257ec:	7dfb      	ldrb	r3, [r7, #23]
 80257ee:	2b04      	cmp	r3, #4
 80257f0:	d127      	bne.n	8025842 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80257f2:	7afb      	ldrb	r3, [r7, #11]
 80257f4:	f003 0304 	and.w	r3, r3, #4
 80257f8:	2b00      	cmp	r3, #0
 80257fa:	d122      	bne.n	8025842 <follow_path+0xd2>
 80257fc:	2305      	movs	r3, #5
 80257fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8025800:	e01f      	b.n	8025842 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8025802:	7afb      	ldrb	r3, [r7, #11]
 8025804:	f003 0304 	and.w	r3, r3, #4
 8025808:	2b00      	cmp	r3, #0
 802580a:	d11c      	bne.n	8025846 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 802580c:	693b      	ldr	r3, [r7, #16]
 802580e:	799b      	ldrb	r3, [r3, #6]
 8025810:	f003 0310 	and.w	r3, r3, #16
 8025814:	2b00      	cmp	r3, #0
 8025816:	d102      	bne.n	802581e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8025818:	2305      	movs	r3, #5
 802581a:	75fb      	strb	r3, [r7, #23]
 802581c:	e014      	b.n	8025848 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 802581e:	68fb      	ldr	r3, [r7, #12]
 8025820:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8025824:	687b      	ldr	r3, [r7, #4]
 8025826:	695b      	ldr	r3, [r3, #20]
 8025828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802582c:	4413      	add	r3, r2
 802582e:	4619      	mov	r1, r3
 8025830:	68f8      	ldr	r0, [r7, #12]
 8025832:	f7ff fe42 	bl	80254ba <ld_clust>
 8025836:	4602      	mov	r2, r0
 8025838:	693b      	ldr	r3, [r7, #16]
 802583a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 802583c:	e7c0      	b.n	80257c0 <follow_path+0x50>
			if (res != FR_OK) break;
 802583e:	bf00      	nop
 8025840:	e002      	b.n	8025848 <follow_path+0xd8>
				break;
 8025842:	bf00      	nop
 8025844:	e000      	b.n	8025848 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8025846:	bf00      	nop
			}
		}
	}

	return res;
 8025848:	7dfb      	ldrb	r3, [r7, #23]
}
 802584a:	4618      	mov	r0, r3
 802584c:	3718      	adds	r7, #24
 802584e:	46bd      	mov	sp, r7
 8025850:	bd80      	pop	{r7, pc}

08025852 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8025852:	b480      	push	{r7}
 8025854:	b087      	sub	sp, #28
 8025856:	af00      	add	r7, sp, #0
 8025858:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 802585a:	f04f 33ff 	mov.w	r3, #4294967295
 802585e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8025860:	687b      	ldr	r3, [r7, #4]
 8025862:	681b      	ldr	r3, [r3, #0]
 8025864:	2b00      	cmp	r3, #0
 8025866:	d031      	beq.n	80258cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8025868:	687b      	ldr	r3, [r7, #4]
 802586a:	681b      	ldr	r3, [r3, #0]
 802586c:	617b      	str	r3, [r7, #20]
 802586e:	e002      	b.n	8025876 <get_ldnumber+0x24>
 8025870:	697b      	ldr	r3, [r7, #20]
 8025872:	3301      	adds	r3, #1
 8025874:	617b      	str	r3, [r7, #20]
 8025876:	697b      	ldr	r3, [r7, #20]
 8025878:	781b      	ldrb	r3, [r3, #0]
 802587a:	2b20      	cmp	r3, #32
 802587c:	d903      	bls.n	8025886 <get_ldnumber+0x34>
 802587e:	697b      	ldr	r3, [r7, #20]
 8025880:	781b      	ldrb	r3, [r3, #0]
 8025882:	2b3a      	cmp	r3, #58	; 0x3a
 8025884:	d1f4      	bne.n	8025870 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8025886:	697b      	ldr	r3, [r7, #20]
 8025888:	781b      	ldrb	r3, [r3, #0]
 802588a:	2b3a      	cmp	r3, #58	; 0x3a
 802588c:	d11c      	bne.n	80258c8 <get_ldnumber+0x76>
			tp = *path;
 802588e:	687b      	ldr	r3, [r7, #4]
 8025890:	681b      	ldr	r3, [r3, #0]
 8025892:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8025894:	68fb      	ldr	r3, [r7, #12]
 8025896:	1c5a      	adds	r2, r3, #1
 8025898:	60fa      	str	r2, [r7, #12]
 802589a:	781b      	ldrb	r3, [r3, #0]
 802589c:	3b30      	subs	r3, #48	; 0x30
 802589e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80258a0:	68bb      	ldr	r3, [r7, #8]
 80258a2:	2b09      	cmp	r3, #9
 80258a4:	d80e      	bhi.n	80258c4 <get_ldnumber+0x72>
 80258a6:	68fa      	ldr	r2, [r7, #12]
 80258a8:	697b      	ldr	r3, [r7, #20]
 80258aa:	429a      	cmp	r2, r3
 80258ac:	d10a      	bne.n	80258c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80258ae:	68bb      	ldr	r3, [r7, #8]
 80258b0:	2b00      	cmp	r3, #0
 80258b2:	d107      	bne.n	80258c4 <get_ldnumber+0x72>
					vol = (int)i;
 80258b4:	68bb      	ldr	r3, [r7, #8]
 80258b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80258b8:	697b      	ldr	r3, [r7, #20]
 80258ba:	3301      	adds	r3, #1
 80258bc:	617b      	str	r3, [r7, #20]
 80258be:	687b      	ldr	r3, [r7, #4]
 80258c0:	697a      	ldr	r2, [r7, #20]
 80258c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80258c4:	693b      	ldr	r3, [r7, #16]
 80258c6:	e002      	b.n	80258ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80258c8:	2300      	movs	r3, #0
 80258ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80258cc:	693b      	ldr	r3, [r7, #16]
}
 80258ce:	4618      	mov	r0, r3
 80258d0:	371c      	adds	r7, #28
 80258d2:	46bd      	mov	sp, r7
 80258d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258d8:	4770      	bx	lr
	...

080258dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80258dc:	b580      	push	{r7, lr}
 80258de:	b082      	sub	sp, #8
 80258e0:	af00      	add	r7, sp, #0
 80258e2:	6078      	str	r0, [r7, #4]
 80258e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80258e6:	687b      	ldr	r3, [r7, #4]
 80258e8:	2200      	movs	r2, #0
 80258ea:	70da      	strb	r2, [r3, #3]
 80258ec:	687b      	ldr	r3, [r7, #4]
 80258ee:	f04f 32ff 	mov.w	r2, #4294967295
 80258f2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80258f4:	6839      	ldr	r1, [r7, #0]
 80258f6:	6878      	ldr	r0, [r7, #4]
 80258f8:	f7ff f8e0 	bl	8024abc <move_window>
 80258fc:	4603      	mov	r3, r0
 80258fe:	2b00      	cmp	r3, #0
 8025900:	d001      	beq.n	8025906 <check_fs+0x2a>
 8025902:	2304      	movs	r3, #4
 8025904:	e038      	b.n	8025978 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8025906:	687b      	ldr	r3, [r7, #4]
 8025908:	3334      	adds	r3, #52	; 0x34
 802590a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802590e:	4618      	mov	r0, r3
 8025910:	f7fe fdf4 	bl	80244fc <ld_word>
 8025914:	4603      	mov	r3, r0
 8025916:	461a      	mov	r2, r3
 8025918:	f64a 2355 	movw	r3, #43605	; 0xaa55
 802591c:	429a      	cmp	r2, r3
 802591e:	d001      	beq.n	8025924 <check_fs+0x48>
 8025920:	2303      	movs	r3, #3
 8025922:	e029      	b.n	8025978 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8025924:	687b      	ldr	r3, [r7, #4]
 8025926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802592a:	2be9      	cmp	r3, #233	; 0xe9
 802592c:	d009      	beq.n	8025942 <check_fs+0x66>
 802592e:	687b      	ldr	r3, [r7, #4]
 8025930:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8025934:	2beb      	cmp	r3, #235	; 0xeb
 8025936:	d11e      	bne.n	8025976 <check_fs+0x9a>
 8025938:	687b      	ldr	r3, [r7, #4]
 802593a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 802593e:	2b90      	cmp	r3, #144	; 0x90
 8025940:	d119      	bne.n	8025976 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8025942:	687b      	ldr	r3, [r7, #4]
 8025944:	3334      	adds	r3, #52	; 0x34
 8025946:	3336      	adds	r3, #54	; 0x36
 8025948:	4618      	mov	r0, r3
 802594a:	f7fe fdef 	bl	802452c <ld_dword>
 802594e:	4603      	mov	r3, r0
 8025950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8025954:	4a0a      	ldr	r2, [pc, #40]	; (8025980 <check_fs+0xa4>)
 8025956:	4293      	cmp	r3, r2
 8025958:	d101      	bne.n	802595e <check_fs+0x82>
 802595a:	2300      	movs	r3, #0
 802595c:	e00c      	b.n	8025978 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 802595e:	687b      	ldr	r3, [r7, #4]
 8025960:	3334      	adds	r3, #52	; 0x34
 8025962:	3352      	adds	r3, #82	; 0x52
 8025964:	4618      	mov	r0, r3
 8025966:	f7fe fde1 	bl	802452c <ld_dword>
 802596a:	4602      	mov	r2, r0
 802596c:	4b05      	ldr	r3, [pc, #20]	; (8025984 <check_fs+0xa8>)
 802596e:	429a      	cmp	r2, r3
 8025970:	d101      	bne.n	8025976 <check_fs+0x9a>
 8025972:	2300      	movs	r3, #0
 8025974:	e000      	b.n	8025978 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8025976:	2302      	movs	r3, #2
}
 8025978:	4618      	mov	r0, r3
 802597a:	3708      	adds	r7, #8
 802597c:	46bd      	mov	sp, r7
 802597e:	bd80      	pop	{r7, pc}
 8025980:	00544146 	.word	0x00544146
 8025984:	33544146 	.word	0x33544146

08025988 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8025988:	b580      	push	{r7, lr}
 802598a:	b096      	sub	sp, #88	; 0x58
 802598c:	af00      	add	r7, sp, #0
 802598e:	60f8      	str	r0, [r7, #12]
 8025990:	60b9      	str	r1, [r7, #8]
 8025992:	4613      	mov	r3, r2
 8025994:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8025996:	68bb      	ldr	r3, [r7, #8]
 8025998:	2200      	movs	r2, #0
 802599a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 802599c:	68f8      	ldr	r0, [r7, #12]
 802599e:	f7ff ff58 	bl	8025852 <get_ldnumber>
 80259a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80259a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80259a6:	2b00      	cmp	r3, #0
 80259a8:	da01      	bge.n	80259ae <find_volume+0x26>
 80259aa:	230b      	movs	r3, #11
 80259ac:	e236      	b.n	8025e1c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80259ae:	4aac      	ldr	r2, [pc, #688]	; (8025c60 <find_volume+0x2d8>)
 80259b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80259b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80259b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80259b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259ba:	2b00      	cmp	r3, #0
 80259bc:	d101      	bne.n	80259c2 <find_volume+0x3a>
 80259be:	230c      	movs	r3, #12
 80259c0:	e22c      	b.n	8025e1c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80259c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80259c4:	f7fe fe99 	bl	80246fa <lock_fs>
 80259c8:	4603      	mov	r3, r0
 80259ca:	2b00      	cmp	r3, #0
 80259cc:	d101      	bne.n	80259d2 <find_volume+0x4a>
 80259ce:	230f      	movs	r3, #15
 80259d0:	e224      	b.n	8025e1c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80259d2:	68bb      	ldr	r3, [r7, #8]
 80259d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80259d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80259d8:	79fb      	ldrb	r3, [r7, #7]
 80259da:	f023 0301 	bic.w	r3, r3, #1
 80259de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80259e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259e2:	781b      	ldrb	r3, [r3, #0]
 80259e4:	2b00      	cmp	r3, #0
 80259e6:	d01a      	beq.n	8025a1e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80259e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80259ea:	785b      	ldrb	r3, [r3, #1]
 80259ec:	4618      	mov	r0, r3
 80259ee:	f7fe fce7 	bl	80243c0 <disk_status>
 80259f2:	4603      	mov	r3, r0
 80259f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80259f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80259fc:	f003 0301 	and.w	r3, r3, #1
 8025a00:	2b00      	cmp	r3, #0
 8025a02:	d10c      	bne.n	8025a1e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8025a04:	79fb      	ldrb	r3, [r7, #7]
 8025a06:	2b00      	cmp	r3, #0
 8025a08:	d007      	beq.n	8025a1a <find_volume+0x92>
 8025a0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025a0e:	f003 0304 	and.w	r3, r3, #4
 8025a12:	2b00      	cmp	r3, #0
 8025a14:	d001      	beq.n	8025a1a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8025a16:	230a      	movs	r3, #10
 8025a18:	e200      	b.n	8025e1c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8025a1a:	2300      	movs	r3, #0
 8025a1c:	e1fe      	b.n	8025e1c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8025a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a20:	2200      	movs	r2, #0
 8025a22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8025a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025a26:	b2da      	uxtb	r2, r3
 8025a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8025a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a2e:	785b      	ldrb	r3, [r3, #1]
 8025a30:	4618      	mov	r0, r3
 8025a32:	f7fe fcdf 	bl	80243f4 <disk_initialize>
 8025a36:	4603      	mov	r3, r0
 8025a38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8025a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025a40:	f003 0301 	and.w	r3, r3, #1
 8025a44:	2b00      	cmp	r3, #0
 8025a46:	d001      	beq.n	8025a4c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8025a48:	2303      	movs	r3, #3
 8025a4a:	e1e7      	b.n	8025e1c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8025a4c:	79fb      	ldrb	r3, [r7, #7]
 8025a4e:	2b00      	cmp	r3, #0
 8025a50:	d007      	beq.n	8025a62 <find_volume+0xda>
 8025a52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025a56:	f003 0304 	and.w	r3, r3, #4
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d001      	beq.n	8025a62 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8025a5e:	230a      	movs	r3, #10
 8025a60:	e1dc      	b.n	8025e1c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8025a62:	2300      	movs	r3, #0
 8025a64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8025a66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025a68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025a6a:	f7ff ff37 	bl	80258dc <check_fs>
 8025a6e:	4603      	mov	r3, r0
 8025a70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8025a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025a78:	2b02      	cmp	r3, #2
 8025a7a:	d14b      	bne.n	8025b14 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8025a7c:	2300      	movs	r3, #0
 8025a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8025a80:	e01f      	b.n	8025ac2 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8025a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025a84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8025a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025a8a:	011b      	lsls	r3, r3, #4
 8025a8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8025a90:	4413      	add	r3, r2
 8025a92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8025a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a96:	3304      	adds	r3, #4
 8025a98:	781b      	ldrb	r3, [r3, #0]
 8025a9a:	2b00      	cmp	r3, #0
 8025a9c:	d006      	beq.n	8025aac <find_volume+0x124>
 8025a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025aa0:	3308      	adds	r3, #8
 8025aa2:	4618      	mov	r0, r3
 8025aa4:	f7fe fd42 	bl	802452c <ld_dword>
 8025aa8:	4602      	mov	r2, r0
 8025aaa:	e000      	b.n	8025aae <find_volume+0x126>
 8025aac:	2200      	movs	r2, #0
 8025aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025ab0:	009b      	lsls	r3, r3, #2
 8025ab2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8025ab6:	440b      	add	r3, r1
 8025ab8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8025abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025abe:	3301      	adds	r3, #1
 8025ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8025ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025ac4:	2b03      	cmp	r3, #3
 8025ac6:	d9dc      	bls.n	8025a82 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8025ac8:	2300      	movs	r3, #0
 8025aca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8025acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025ace:	2b00      	cmp	r3, #0
 8025ad0:	d002      	beq.n	8025ad8 <find_volume+0x150>
 8025ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025ad4:	3b01      	subs	r3, #1
 8025ad6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8025ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025ada:	009b      	lsls	r3, r3, #2
 8025adc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8025ae0:	4413      	add	r3, r2
 8025ae2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8025ae6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8025ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	d005      	beq.n	8025afa <find_volume+0x172>
 8025aee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8025af0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025af2:	f7ff fef3 	bl	80258dc <check_fs>
 8025af6:	4603      	mov	r3, r0
 8025af8:	e000      	b.n	8025afc <find_volume+0x174>
 8025afa:	2303      	movs	r3, #3
 8025afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8025b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025b04:	2b01      	cmp	r3, #1
 8025b06:	d905      	bls.n	8025b14 <find_volume+0x18c>
 8025b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025b0a:	3301      	adds	r3, #1
 8025b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8025b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025b10:	2b03      	cmp	r3, #3
 8025b12:	d9e1      	bls.n	8025ad8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8025b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025b18:	2b04      	cmp	r3, #4
 8025b1a:	d101      	bne.n	8025b20 <find_volume+0x198>
 8025b1c:	2301      	movs	r3, #1
 8025b1e:	e17d      	b.n	8025e1c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8025b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025b24:	2b01      	cmp	r3, #1
 8025b26:	d901      	bls.n	8025b2c <find_volume+0x1a4>
 8025b28:	230d      	movs	r3, #13
 8025b2a:	e177      	b.n	8025e1c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8025b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b2e:	3334      	adds	r3, #52	; 0x34
 8025b30:	330b      	adds	r3, #11
 8025b32:	4618      	mov	r0, r3
 8025b34:	f7fe fce2 	bl	80244fc <ld_word>
 8025b38:	4603      	mov	r3, r0
 8025b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025b3e:	d001      	beq.n	8025b44 <find_volume+0x1bc>
 8025b40:	230d      	movs	r3, #13
 8025b42:	e16b      	b.n	8025e1c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8025b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b46:	3334      	adds	r3, #52	; 0x34
 8025b48:	3316      	adds	r3, #22
 8025b4a:	4618      	mov	r0, r3
 8025b4c:	f7fe fcd6 	bl	80244fc <ld_word>
 8025b50:	4603      	mov	r3, r0
 8025b52:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8025b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	d106      	bne.n	8025b68 <find_volume+0x1e0>
 8025b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b5c:	3334      	adds	r3, #52	; 0x34
 8025b5e:	3324      	adds	r3, #36	; 0x24
 8025b60:	4618      	mov	r0, r3
 8025b62:	f7fe fce3 	bl	802452c <ld_dword>
 8025b66:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8025b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8025b6c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8025b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b70:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8025b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8025b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b7a:	789b      	ldrb	r3, [r3, #2]
 8025b7c:	2b01      	cmp	r3, #1
 8025b7e:	d005      	beq.n	8025b8c <find_volume+0x204>
 8025b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b82:	789b      	ldrb	r3, [r3, #2]
 8025b84:	2b02      	cmp	r3, #2
 8025b86:	d001      	beq.n	8025b8c <find_volume+0x204>
 8025b88:	230d      	movs	r3, #13
 8025b8a:	e147      	b.n	8025e1c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8025b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b8e:	789b      	ldrb	r3, [r3, #2]
 8025b90:	461a      	mov	r2, r3
 8025b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025b94:	fb02 f303 	mul.w	r3, r2, r3
 8025b98:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8025b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8025ba0:	b29a      	uxth	r2, r3
 8025ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025ba4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8025ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025ba8:	895b      	ldrh	r3, [r3, #10]
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	d008      	beq.n	8025bc0 <find_volume+0x238>
 8025bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025bb0:	895b      	ldrh	r3, [r3, #10]
 8025bb2:	461a      	mov	r2, r3
 8025bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025bb6:	895b      	ldrh	r3, [r3, #10]
 8025bb8:	3b01      	subs	r3, #1
 8025bba:	4013      	ands	r3, r2
 8025bbc:	2b00      	cmp	r3, #0
 8025bbe:	d001      	beq.n	8025bc4 <find_volume+0x23c>
 8025bc0:	230d      	movs	r3, #13
 8025bc2:	e12b      	b.n	8025e1c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8025bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025bc6:	3334      	adds	r3, #52	; 0x34
 8025bc8:	3311      	adds	r3, #17
 8025bca:	4618      	mov	r0, r3
 8025bcc:	f7fe fc96 	bl	80244fc <ld_word>
 8025bd0:	4603      	mov	r3, r0
 8025bd2:	461a      	mov	r2, r3
 8025bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025bd6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8025bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025bda:	891b      	ldrh	r3, [r3, #8]
 8025bdc:	f003 030f 	and.w	r3, r3, #15
 8025be0:	b29b      	uxth	r3, r3
 8025be2:	2b00      	cmp	r3, #0
 8025be4:	d001      	beq.n	8025bea <find_volume+0x262>
 8025be6:	230d      	movs	r3, #13
 8025be8:	e118      	b.n	8025e1c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8025bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025bec:	3334      	adds	r3, #52	; 0x34
 8025bee:	3313      	adds	r3, #19
 8025bf0:	4618      	mov	r0, r3
 8025bf2:	f7fe fc83 	bl	80244fc <ld_word>
 8025bf6:	4603      	mov	r3, r0
 8025bf8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8025bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025bfc:	2b00      	cmp	r3, #0
 8025bfe:	d106      	bne.n	8025c0e <find_volume+0x286>
 8025c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025c02:	3334      	adds	r3, #52	; 0x34
 8025c04:	3320      	adds	r3, #32
 8025c06:	4618      	mov	r0, r3
 8025c08:	f7fe fc90 	bl	802452c <ld_dword>
 8025c0c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8025c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025c10:	3334      	adds	r3, #52	; 0x34
 8025c12:	330e      	adds	r3, #14
 8025c14:	4618      	mov	r0, r3
 8025c16:	f7fe fc71 	bl	80244fc <ld_word>
 8025c1a:	4603      	mov	r3, r0
 8025c1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8025c1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8025c20:	2b00      	cmp	r3, #0
 8025c22:	d101      	bne.n	8025c28 <find_volume+0x2a0>
 8025c24:	230d      	movs	r3, #13
 8025c26:	e0f9      	b.n	8025e1c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8025c28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8025c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025c2c:	4413      	add	r3, r2
 8025c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025c30:	8912      	ldrh	r2, [r2, #8]
 8025c32:	0912      	lsrs	r2, r2, #4
 8025c34:	b292      	uxth	r2, r2
 8025c36:	4413      	add	r3, r2
 8025c38:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8025c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c3e:	429a      	cmp	r2, r3
 8025c40:	d201      	bcs.n	8025c46 <find_volume+0x2be>
 8025c42:	230d      	movs	r3, #13
 8025c44:	e0ea      	b.n	8025e1c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8025c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025c4a:	1ad3      	subs	r3, r2, r3
 8025c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025c4e:	8952      	ldrh	r2, [r2, #10]
 8025c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8025c54:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8025c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c58:	2b00      	cmp	r3, #0
 8025c5a:	d103      	bne.n	8025c64 <find_volume+0x2dc>
 8025c5c:	230d      	movs	r3, #13
 8025c5e:	e0dd      	b.n	8025e1c <find_volume+0x494>
 8025c60:	24001468 	.word	0x24001468
		fmt = FS_FAT32;
 8025c64:	2303      	movs	r3, #3
 8025c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8025c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c6c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8025c70:	4293      	cmp	r3, r2
 8025c72:	d802      	bhi.n	8025c7a <find_volume+0x2f2>
 8025c74:	2302      	movs	r3, #2
 8025c76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8025c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c7c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8025c80:	4293      	cmp	r3, r2
 8025c82:	d802      	bhi.n	8025c8a <find_volume+0x302>
 8025c84:	2301      	movs	r3, #1
 8025c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8025c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c8c:	1c9a      	adds	r2, r3, #2
 8025c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025c90:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8025c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025c94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025c96:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8025c98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8025c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025c9c:	441a      	add	r2, r3
 8025c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025ca0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8025ca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ca6:	441a      	add	r2, r3
 8025ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025caa:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8025cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025cb0:	2b03      	cmp	r3, #3
 8025cb2:	d11e      	bne.n	8025cf2 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8025cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025cb6:	3334      	adds	r3, #52	; 0x34
 8025cb8:	332a      	adds	r3, #42	; 0x2a
 8025cba:	4618      	mov	r0, r3
 8025cbc:	f7fe fc1e 	bl	80244fc <ld_word>
 8025cc0:	4603      	mov	r3, r0
 8025cc2:	2b00      	cmp	r3, #0
 8025cc4:	d001      	beq.n	8025cca <find_volume+0x342>
 8025cc6:	230d      	movs	r3, #13
 8025cc8:	e0a8      	b.n	8025e1c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8025cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025ccc:	891b      	ldrh	r3, [r3, #8]
 8025cce:	2b00      	cmp	r3, #0
 8025cd0:	d001      	beq.n	8025cd6 <find_volume+0x34e>
 8025cd2:	230d      	movs	r3, #13
 8025cd4:	e0a2      	b.n	8025e1c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8025cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025cd8:	3334      	adds	r3, #52	; 0x34
 8025cda:	332c      	adds	r3, #44	; 0x2c
 8025cdc:	4618      	mov	r0, r3
 8025cde:	f7fe fc25 	bl	802452c <ld_dword>
 8025ce2:	4602      	mov	r2, r0
 8025ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025ce6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8025ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025cea:	699b      	ldr	r3, [r3, #24]
 8025cec:	009b      	lsls	r3, r3, #2
 8025cee:	647b      	str	r3, [r7, #68]	; 0x44
 8025cf0:	e01f      	b.n	8025d32 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8025cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025cf4:	891b      	ldrh	r3, [r3, #8]
 8025cf6:	2b00      	cmp	r3, #0
 8025cf8:	d101      	bne.n	8025cfe <find_volume+0x376>
 8025cfa:	230d      	movs	r3, #13
 8025cfc:	e08e      	b.n	8025e1c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8025cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025d04:	441a      	add	r2, r3
 8025d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d08:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8025d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025d0e:	2b02      	cmp	r3, #2
 8025d10:	d103      	bne.n	8025d1a <find_volume+0x392>
 8025d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d14:	699b      	ldr	r3, [r3, #24]
 8025d16:	005b      	lsls	r3, r3, #1
 8025d18:	e00a      	b.n	8025d30 <find_volume+0x3a8>
 8025d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d1c:	699a      	ldr	r2, [r3, #24]
 8025d1e:	4613      	mov	r3, r2
 8025d20:	005b      	lsls	r3, r3, #1
 8025d22:	4413      	add	r3, r2
 8025d24:	085a      	lsrs	r2, r3, #1
 8025d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d28:	699b      	ldr	r3, [r3, #24]
 8025d2a:	f003 0301 	and.w	r3, r3, #1
 8025d2e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8025d30:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8025d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d34:	69da      	ldr	r2, [r3, #28]
 8025d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025d38:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8025d3c:	0a5b      	lsrs	r3, r3, #9
 8025d3e:	429a      	cmp	r2, r3
 8025d40:	d201      	bcs.n	8025d46 <find_volume+0x3be>
 8025d42:	230d      	movs	r3, #13
 8025d44:	e06a      	b.n	8025e1c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8025d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d48:	f04f 32ff 	mov.w	r2, #4294967295
 8025d4c:	615a      	str	r2, [r3, #20]
 8025d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d50:	695a      	ldr	r2, [r3, #20]
 8025d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d54:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8025d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d58:	2280      	movs	r2, #128	; 0x80
 8025d5a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8025d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8025d60:	2b03      	cmp	r3, #3
 8025d62:	d149      	bne.n	8025df8 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8025d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d66:	3334      	adds	r3, #52	; 0x34
 8025d68:	3330      	adds	r3, #48	; 0x30
 8025d6a:	4618      	mov	r0, r3
 8025d6c:	f7fe fbc6 	bl	80244fc <ld_word>
 8025d70:	4603      	mov	r3, r0
 8025d72:	2b01      	cmp	r3, #1
 8025d74:	d140      	bne.n	8025df8 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8025d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025d78:	3301      	adds	r3, #1
 8025d7a:	4619      	mov	r1, r3
 8025d7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025d7e:	f7fe fe9d 	bl	8024abc <move_window>
 8025d82:	4603      	mov	r3, r0
 8025d84:	2b00      	cmp	r3, #0
 8025d86:	d137      	bne.n	8025df8 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8025d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d8a:	2200      	movs	r2, #0
 8025d8c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8025d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025d90:	3334      	adds	r3, #52	; 0x34
 8025d92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8025d96:	4618      	mov	r0, r3
 8025d98:	f7fe fbb0 	bl	80244fc <ld_word>
 8025d9c:	4603      	mov	r3, r0
 8025d9e:	461a      	mov	r2, r3
 8025da0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8025da4:	429a      	cmp	r2, r3
 8025da6:	d127      	bne.n	8025df8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8025da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025daa:	3334      	adds	r3, #52	; 0x34
 8025dac:	4618      	mov	r0, r3
 8025dae:	f7fe fbbd 	bl	802452c <ld_dword>
 8025db2:	4602      	mov	r2, r0
 8025db4:	4b1b      	ldr	r3, [pc, #108]	; (8025e24 <find_volume+0x49c>)
 8025db6:	429a      	cmp	r2, r3
 8025db8:	d11e      	bne.n	8025df8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8025dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025dbc:	3334      	adds	r3, #52	; 0x34
 8025dbe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8025dc2:	4618      	mov	r0, r3
 8025dc4:	f7fe fbb2 	bl	802452c <ld_dword>
 8025dc8:	4602      	mov	r2, r0
 8025dca:	4b17      	ldr	r3, [pc, #92]	; (8025e28 <find_volume+0x4a0>)
 8025dcc:	429a      	cmp	r2, r3
 8025dce:	d113      	bne.n	8025df8 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8025dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025dd2:	3334      	adds	r3, #52	; 0x34
 8025dd4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8025dd8:	4618      	mov	r0, r3
 8025dda:	f7fe fba7 	bl	802452c <ld_dword>
 8025dde:	4602      	mov	r2, r0
 8025de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025de2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8025de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025de6:	3334      	adds	r3, #52	; 0x34
 8025de8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8025dec:	4618      	mov	r0, r3
 8025dee:	f7fe fb9d 	bl	802452c <ld_dword>
 8025df2:	4602      	mov	r2, r0
 8025df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025df6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8025df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025dfa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8025dfe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8025e00:	4b0a      	ldr	r3, [pc, #40]	; (8025e2c <find_volume+0x4a4>)
 8025e02:	881b      	ldrh	r3, [r3, #0]
 8025e04:	3301      	adds	r3, #1
 8025e06:	b29a      	uxth	r2, r3
 8025e08:	4b08      	ldr	r3, [pc, #32]	; (8025e2c <find_volume+0x4a4>)
 8025e0a:	801a      	strh	r2, [r3, #0]
 8025e0c:	4b07      	ldr	r3, [pc, #28]	; (8025e2c <find_volume+0x4a4>)
 8025e0e:	881a      	ldrh	r2, [r3, #0]
 8025e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025e12:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8025e14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025e16:	f7fe fde9 	bl	80249ec <clear_lock>
#endif
	return FR_OK;
 8025e1a:	2300      	movs	r3, #0
}
 8025e1c:	4618      	mov	r0, r3
 8025e1e:	3758      	adds	r7, #88	; 0x58
 8025e20:	46bd      	mov	sp, r7
 8025e22:	bd80      	pop	{r7, pc}
 8025e24:	41615252 	.word	0x41615252
 8025e28:	61417272 	.word	0x61417272
 8025e2c:	2400146c 	.word	0x2400146c

08025e30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8025e30:	b580      	push	{r7, lr}
 8025e32:	b084      	sub	sp, #16
 8025e34:	af00      	add	r7, sp, #0
 8025e36:	6078      	str	r0, [r7, #4]
 8025e38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8025e3a:	2309      	movs	r3, #9
 8025e3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8025e3e:	687b      	ldr	r3, [r7, #4]
 8025e40:	2b00      	cmp	r3, #0
 8025e42:	d02e      	beq.n	8025ea2 <validate+0x72>
 8025e44:	687b      	ldr	r3, [r7, #4]
 8025e46:	681b      	ldr	r3, [r3, #0]
 8025e48:	2b00      	cmp	r3, #0
 8025e4a:	d02a      	beq.n	8025ea2 <validate+0x72>
 8025e4c:	687b      	ldr	r3, [r7, #4]
 8025e4e:	681b      	ldr	r3, [r3, #0]
 8025e50:	781b      	ldrb	r3, [r3, #0]
 8025e52:	2b00      	cmp	r3, #0
 8025e54:	d025      	beq.n	8025ea2 <validate+0x72>
 8025e56:	687b      	ldr	r3, [r7, #4]
 8025e58:	889a      	ldrh	r2, [r3, #4]
 8025e5a:	687b      	ldr	r3, [r7, #4]
 8025e5c:	681b      	ldr	r3, [r3, #0]
 8025e5e:	88db      	ldrh	r3, [r3, #6]
 8025e60:	429a      	cmp	r2, r3
 8025e62:	d11e      	bne.n	8025ea2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8025e64:	687b      	ldr	r3, [r7, #4]
 8025e66:	681b      	ldr	r3, [r3, #0]
 8025e68:	4618      	mov	r0, r3
 8025e6a:	f7fe fc46 	bl	80246fa <lock_fs>
 8025e6e:	4603      	mov	r3, r0
 8025e70:	2b00      	cmp	r3, #0
 8025e72:	d014      	beq.n	8025e9e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8025e74:	687b      	ldr	r3, [r7, #4]
 8025e76:	681b      	ldr	r3, [r3, #0]
 8025e78:	785b      	ldrb	r3, [r3, #1]
 8025e7a:	4618      	mov	r0, r3
 8025e7c:	f7fe faa0 	bl	80243c0 <disk_status>
 8025e80:	4603      	mov	r3, r0
 8025e82:	f003 0301 	and.w	r3, r3, #1
 8025e86:	2b00      	cmp	r3, #0
 8025e88:	d102      	bne.n	8025e90 <validate+0x60>
				res = FR_OK;
 8025e8a:	2300      	movs	r3, #0
 8025e8c:	73fb      	strb	r3, [r7, #15]
 8025e8e:	e008      	b.n	8025ea2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8025e90:	687b      	ldr	r3, [r7, #4]
 8025e92:	681b      	ldr	r3, [r3, #0]
 8025e94:	2100      	movs	r1, #0
 8025e96:	4618      	mov	r0, r3
 8025e98:	f7fe fc45 	bl	8024726 <unlock_fs>
 8025e9c:	e001      	b.n	8025ea2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8025e9e:	230f      	movs	r3, #15
 8025ea0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8025ea2:	7bfb      	ldrb	r3, [r7, #15]
 8025ea4:	2b00      	cmp	r3, #0
 8025ea6:	d102      	bne.n	8025eae <validate+0x7e>
 8025ea8:	687b      	ldr	r3, [r7, #4]
 8025eaa:	681b      	ldr	r3, [r3, #0]
 8025eac:	e000      	b.n	8025eb0 <validate+0x80>
 8025eae:	2300      	movs	r3, #0
 8025eb0:	683a      	ldr	r2, [r7, #0]
 8025eb2:	6013      	str	r3, [r2, #0]
	return res;
 8025eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8025eb6:	4618      	mov	r0, r3
 8025eb8:	3710      	adds	r7, #16
 8025eba:	46bd      	mov	sp, r7
 8025ebc:	bd80      	pop	{r7, pc}
	...

08025ec0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8025ec0:	b580      	push	{r7, lr}
 8025ec2:	b088      	sub	sp, #32
 8025ec4:	af00      	add	r7, sp, #0
 8025ec6:	60f8      	str	r0, [r7, #12]
 8025ec8:	60b9      	str	r1, [r7, #8]
 8025eca:	4613      	mov	r3, r2
 8025ecc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8025ece:	68bb      	ldr	r3, [r7, #8]
 8025ed0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8025ed2:	f107 0310 	add.w	r3, r7, #16
 8025ed6:	4618      	mov	r0, r3
 8025ed8:	f7ff fcbb 	bl	8025852 <get_ldnumber>
 8025edc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8025ede:	69fb      	ldr	r3, [r7, #28]
 8025ee0:	2b00      	cmp	r3, #0
 8025ee2:	da01      	bge.n	8025ee8 <f_mount+0x28>
 8025ee4:	230b      	movs	r3, #11
 8025ee6:	e048      	b.n	8025f7a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8025ee8:	4a26      	ldr	r2, [pc, #152]	; (8025f84 <f_mount+0xc4>)
 8025eea:	69fb      	ldr	r3, [r7, #28]
 8025eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025ef0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8025ef2:	69bb      	ldr	r3, [r7, #24]
 8025ef4:	2b00      	cmp	r3, #0
 8025ef6:	d00f      	beq.n	8025f18 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8025ef8:	69b8      	ldr	r0, [r7, #24]
 8025efa:	f7fe fd77 	bl	80249ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8025efe:	69bb      	ldr	r3, [r7, #24]
 8025f00:	68db      	ldr	r3, [r3, #12]
 8025f02:	4618      	mov	r0, r3
 8025f04:	f000 fcd8 	bl	80268b8 <ff_del_syncobj>
 8025f08:	4603      	mov	r3, r0
 8025f0a:	2b00      	cmp	r3, #0
 8025f0c:	d101      	bne.n	8025f12 <f_mount+0x52>
 8025f0e:	2302      	movs	r3, #2
 8025f10:	e033      	b.n	8025f7a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8025f12:	69bb      	ldr	r3, [r7, #24]
 8025f14:	2200      	movs	r2, #0
 8025f16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8025f18:	68fb      	ldr	r3, [r7, #12]
 8025f1a:	2b00      	cmp	r3, #0
 8025f1c:	d00f      	beq.n	8025f3e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8025f1e:	68fb      	ldr	r3, [r7, #12]
 8025f20:	2200      	movs	r2, #0
 8025f22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8025f24:	69fb      	ldr	r3, [r7, #28]
 8025f26:	b2da      	uxtb	r2, r3
 8025f28:	68fb      	ldr	r3, [r7, #12]
 8025f2a:	330c      	adds	r3, #12
 8025f2c:	4619      	mov	r1, r3
 8025f2e:	4610      	mov	r0, r2
 8025f30:	f000 fca7 	bl	8026882 <ff_cre_syncobj>
 8025f34:	4603      	mov	r3, r0
 8025f36:	2b00      	cmp	r3, #0
 8025f38:	d101      	bne.n	8025f3e <f_mount+0x7e>
 8025f3a:	2302      	movs	r3, #2
 8025f3c:	e01d      	b.n	8025f7a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8025f3e:	68fa      	ldr	r2, [r7, #12]
 8025f40:	4910      	ldr	r1, [pc, #64]	; (8025f84 <f_mount+0xc4>)
 8025f42:	69fb      	ldr	r3, [r7, #28]
 8025f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8025f48:	68fb      	ldr	r3, [r7, #12]
 8025f4a:	2b00      	cmp	r3, #0
 8025f4c:	d002      	beq.n	8025f54 <f_mount+0x94>
 8025f4e:	79fb      	ldrb	r3, [r7, #7]
 8025f50:	2b01      	cmp	r3, #1
 8025f52:	d001      	beq.n	8025f58 <f_mount+0x98>
 8025f54:	2300      	movs	r3, #0
 8025f56:	e010      	b.n	8025f7a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8025f58:	f107 010c 	add.w	r1, r7, #12
 8025f5c:	f107 0308 	add.w	r3, r7, #8
 8025f60:	2200      	movs	r2, #0
 8025f62:	4618      	mov	r0, r3
 8025f64:	f7ff fd10 	bl	8025988 <find_volume>
 8025f68:	4603      	mov	r3, r0
 8025f6a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8025f6c:	68fb      	ldr	r3, [r7, #12]
 8025f6e:	7dfa      	ldrb	r2, [r7, #23]
 8025f70:	4611      	mov	r1, r2
 8025f72:	4618      	mov	r0, r3
 8025f74:	f7fe fbd7 	bl	8024726 <unlock_fs>
 8025f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8025f7a:	4618      	mov	r0, r3
 8025f7c:	3720      	adds	r7, #32
 8025f7e:	46bd      	mov	sp, r7
 8025f80:	bd80      	pop	{r7, pc}
 8025f82:	bf00      	nop
 8025f84:	24001468 	.word	0x24001468

08025f88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8025f88:	b580      	push	{r7, lr}
 8025f8a:	b098      	sub	sp, #96	; 0x60
 8025f8c:	af00      	add	r7, sp, #0
 8025f8e:	60f8      	str	r0, [r7, #12]
 8025f90:	60b9      	str	r1, [r7, #8]
 8025f92:	4613      	mov	r3, r2
 8025f94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8025f96:	68fb      	ldr	r3, [r7, #12]
 8025f98:	2b00      	cmp	r3, #0
 8025f9a:	d101      	bne.n	8025fa0 <f_open+0x18>
 8025f9c:	2309      	movs	r3, #9
 8025f9e:	e1b4      	b.n	802630a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8025fa0:	79fb      	ldrb	r3, [r7, #7]
 8025fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8025fa6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8025fa8:	79fa      	ldrb	r2, [r7, #7]
 8025faa:	f107 0110 	add.w	r1, r7, #16
 8025fae:	f107 0308 	add.w	r3, r7, #8
 8025fb2:	4618      	mov	r0, r3
 8025fb4:	f7ff fce8 	bl	8025988 <find_volume>
 8025fb8:	4603      	mov	r3, r0
 8025fba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8025fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025fc2:	2b00      	cmp	r3, #0
 8025fc4:	f040 8191 	bne.w	80262ea <f_open+0x362>
		dj.obj.fs = fs;
 8025fc8:	693b      	ldr	r3, [r7, #16]
 8025fca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8025fcc:	68ba      	ldr	r2, [r7, #8]
 8025fce:	f107 0314 	add.w	r3, r7, #20
 8025fd2:	4611      	mov	r1, r2
 8025fd4:	4618      	mov	r0, r3
 8025fd6:	f7ff fbcb 	bl	8025770 <follow_path>
 8025fda:	4603      	mov	r3, r0
 8025fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8025fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8025fe4:	2b00      	cmp	r3, #0
 8025fe6:	d11a      	bne.n	802601e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8025fe8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8025fec:	b25b      	sxtb	r3, r3
 8025fee:	2b00      	cmp	r3, #0
 8025ff0:	da03      	bge.n	8025ffa <f_open+0x72>
				res = FR_INVALID_NAME;
 8025ff2:	2306      	movs	r3, #6
 8025ff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8025ff8:	e011      	b.n	802601e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8025ffa:	79fb      	ldrb	r3, [r7, #7]
 8025ffc:	f023 0301 	bic.w	r3, r3, #1
 8026000:	2b00      	cmp	r3, #0
 8026002:	bf14      	ite	ne
 8026004:	2301      	movne	r3, #1
 8026006:	2300      	moveq	r3, #0
 8026008:	b2db      	uxtb	r3, r3
 802600a:	461a      	mov	r2, r3
 802600c:	f107 0314 	add.w	r3, r7, #20
 8026010:	4611      	mov	r1, r2
 8026012:	4618      	mov	r0, r3
 8026014:	f7fe fba2 	bl	802475c <chk_lock>
 8026018:	4603      	mov	r3, r0
 802601a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 802601e:	79fb      	ldrb	r3, [r7, #7]
 8026020:	f003 031c 	and.w	r3, r3, #28
 8026024:	2b00      	cmp	r3, #0
 8026026:	d07f      	beq.n	8026128 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8026028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802602c:	2b00      	cmp	r3, #0
 802602e:	d017      	beq.n	8026060 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8026030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8026034:	2b04      	cmp	r3, #4
 8026036:	d10e      	bne.n	8026056 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8026038:	f7fe fbec 	bl	8024814 <enq_lock>
 802603c:	4603      	mov	r3, r0
 802603e:	2b00      	cmp	r3, #0
 8026040:	d006      	beq.n	8026050 <f_open+0xc8>
 8026042:	f107 0314 	add.w	r3, r7, #20
 8026046:	4618      	mov	r0, r3
 8026048:	f7ff facb 	bl	80255e2 <dir_register>
 802604c:	4603      	mov	r3, r0
 802604e:	e000      	b.n	8026052 <f_open+0xca>
 8026050:	2312      	movs	r3, #18
 8026052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8026056:	79fb      	ldrb	r3, [r7, #7]
 8026058:	f043 0308 	orr.w	r3, r3, #8
 802605c:	71fb      	strb	r3, [r7, #7]
 802605e:	e010      	b.n	8026082 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8026060:	7ebb      	ldrb	r3, [r7, #26]
 8026062:	f003 0311 	and.w	r3, r3, #17
 8026066:	2b00      	cmp	r3, #0
 8026068:	d003      	beq.n	8026072 <f_open+0xea>
					res = FR_DENIED;
 802606a:	2307      	movs	r3, #7
 802606c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8026070:	e007      	b.n	8026082 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8026072:	79fb      	ldrb	r3, [r7, #7]
 8026074:	f003 0304 	and.w	r3, r3, #4
 8026078:	2b00      	cmp	r3, #0
 802607a:	d002      	beq.n	8026082 <f_open+0xfa>
 802607c:	2308      	movs	r3, #8
 802607e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8026082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8026086:	2b00      	cmp	r3, #0
 8026088:	d168      	bne.n	802615c <f_open+0x1d4>
 802608a:	79fb      	ldrb	r3, [r7, #7]
 802608c:	f003 0308 	and.w	r3, r3, #8
 8026090:	2b00      	cmp	r3, #0
 8026092:	d063      	beq.n	802615c <f_open+0x1d4>
				dw = GET_FATTIME();
 8026094:	f7fd ff3e 	bl	8023f14 <get_fattime>
 8026098:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 802609a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802609c:	330e      	adds	r3, #14
 802609e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80260a0:	4618      	mov	r0, r3
 80260a2:	f7fe fa81 	bl	80245a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80260a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80260a8:	3316      	adds	r3, #22
 80260aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80260ac:	4618      	mov	r0, r3
 80260ae:	f7fe fa7b 	bl	80245a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80260b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80260b4:	330b      	adds	r3, #11
 80260b6:	2220      	movs	r2, #32
 80260b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80260ba:	693b      	ldr	r3, [r7, #16]
 80260bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80260be:	4611      	mov	r1, r2
 80260c0:	4618      	mov	r0, r3
 80260c2:	f7ff f9fa 	bl	80254ba <ld_clust>
 80260c6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80260c8:	693b      	ldr	r3, [r7, #16]
 80260ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80260cc:	2200      	movs	r2, #0
 80260ce:	4618      	mov	r0, r3
 80260d0:	f7ff fa12 	bl	80254f8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80260d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80260d6:	331c      	adds	r3, #28
 80260d8:	2100      	movs	r1, #0
 80260da:	4618      	mov	r0, r3
 80260dc:	f7fe fa64 	bl	80245a8 <st_dword>
					fs->wflag = 1;
 80260e0:	693b      	ldr	r3, [r7, #16]
 80260e2:	2201      	movs	r2, #1
 80260e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80260e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80260e8:	2b00      	cmp	r3, #0
 80260ea:	d037      	beq.n	802615c <f_open+0x1d4>
						dw = fs->winsect;
 80260ec:	693b      	ldr	r3, [r7, #16]
 80260ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80260f0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80260f2:	f107 0314 	add.w	r3, r7, #20
 80260f6:	2200      	movs	r2, #0
 80260f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80260fa:	4618      	mov	r0, r3
 80260fc:	f7fe ff25 	bl	8024f4a <remove_chain>
 8026100:	4603      	mov	r3, r0
 8026102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8026106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802610a:	2b00      	cmp	r3, #0
 802610c:	d126      	bne.n	802615c <f_open+0x1d4>
							res = move_window(fs, dw);
 802610e:	693b      	ldr	r3, [r7, #16]
 8026110:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8026112:	4618      	mov	r0, r3
 8026114:	f7fe fcd2 	bl	8024abc <move_window>
 8026118:	4603      	mov	r3, r0
 802611a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 802611e:	693b      	ldr	r3, [r7, #16]
 8026120:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8026122:	3a01      	subs	r2, #1
 8026124:	611a      	str	r2, [r3, #16]
 8026126:	e019      	b.n	802615c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8026128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 802612c:	2b00      	cmp	r3, #0
 802612e:	d115      	bne.n	802615c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8026130:	7ebb      	ldrb	r3, [r7, #26]
 8026132:	f003 0310 	and.w	r3, r3, #16
 8026136:	2b00      	cmp	r3, #0
 8026138:	d003      	beq.n	8026142 <f_open+0x1ba>
					res = FR_NO_FILE;
 802613a:	2304      	movs	r3, #4
 802613c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8026140:	e00c      	b.n	802615c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8026142:	79fb      	ldrb	r3, [r7, #7]
 8026144:	f003 0302 	and.w	r3, r3, #2
 8026148:	2b00      	cmp	r3, #0
 802614a:	d007      	beq.n	802615c <f_open+0x1d4>
 802614c:	7ebb      	ldrb	r3, [r7, #26]
 802614e:	f003 0301 	and.w	r3, r3, #1
 8026152:	2b00      	cmp	r3, #0
 8026154:	d002      	beq.n	802615c <f_open+0x1d4>
						res = FR_DENIED;
 8026156:	2307      	movs	r3, #7
 8026158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 802615c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8026160:	2b00      	cmp	r3, #0
 8026162:	d128      	bne.n	80261b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8026164:	79fb      	ldrb	r3, [r7, #7]
 8026166:	f003 0308 	and.w	r3, r3, #8
 802616a:	2b00      	cmp	r3, #0
 802616c:	d003      	beq.n	8026176 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 802616e:	79fb      	ldrb	r3, [r7, #7]
 8026170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026174:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8026176:	693b      	ldr	r3, [r7, #16]
 8026178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802617a:	68fb      	ldr	r3, [r7, #12]
 802617c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 802617e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026180:	68fb      	ldr	r3, [r7, #12]
 8026182:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8026184:	79fb      	ldrb	r3, [r7, #7]
 8026186:	f023 0301 	bic.w	r3, r3, #1
 802618a:	2b00      	cmp	r3, #0
 802618c:	bf14      	ite	ne
 802618e:	2301      	movne	r3, #1
 8026190:	2300      	moveq	r3, #0
 8026192:	b2db      	uxtb	r3, r3
 8026194:	461a      	mov	r2, r3
 8026196:	f107 0314 	add.w	r3, r7, #20
 802619a:	4611      	mov	r1, r2
 802619c:	4618      	mov	r0, r3
 802619e:	f7fe fb5b 	bl	8024858 <inc_lock>
 80261a2:	4602      	mov	r2, r0
 80261a4:	68fb      	ldr	r3, [r7, #12]
 80261a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80261a8:	68fb      	ldr	r3, [r7, #12]
 80261aa:	691b      	ldr	r3, [r3, #16]
 80261ac:	2b00      	cmp	r3, #0
 80261ae:	d102      	bne.n	80261b6 <f_open+0x22e>
 80261b0:	2302      	movs	r3, #2
 80261b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80261b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80261ba:	2b00      	cmp	r3, #0
 80261bc:	f040 8095 	bne.w	80262ea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80261c0:	693b      	ldr	r3, [r7, #16]
 80261c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80261c4:	4611      	mov	r1, r2
 80261c6:	4618      	mov	r0, r3
 80261c8:	f7ff f977 	bl	80254ba <ld_clust>
 80261cc:	4602      	mov	r2, r0
 80261ce:	68fb      	ldr	r3, [r7, #12]
 80261d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80261d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80261d4:	331c      	adds	r3, #28
 80261d6:	4618      	mov	r0, r3
 80261d8:	f7fe f9a8 	bl	802452c <ld_dword>
 80261dc:	4602      	mov	r2, r0
 80261de:	68fb      	ldr	r3, [r7, #12]
 80261e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80261e2:	68fb      	ldr	r3, [r7, #12]
 80261e4:	2200      	movs	r2, #0
 80261e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80261e8:	693a      	ldr	r2, [r7, #16]
 80261ea:	68fb      	ldr	r3, [r7, #12]
 80261ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80261ee:	693b      	ldr	r3, [r7, #16]
 80261f0:	88da      	ldrh	r2, [r3, #6]
 80261f2:	68fb      	ldr	r3, [r7, #12]
 80261f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80261f6:	68fb      	ldr	r3, [r7, #12]
 80261f8:	79fa      	ldrb	r2, [r7, #7]
 80261fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80261fc:	68fb      	ldr	r3, [r7, #12]
 80261fe:	2200      	movs	r2, #0
 8026200:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8026202:	68fb      	ldr	r3, [r7, #12]
 8026204:	2200      	movs	r2, #0
 8026206:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8026208:	68fb      	ldr	r3, [r7, #12]
 802620a:	2200      	movs	r2, #0
 802620c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 802620e:	68fb      	ldr	r3, [r7, #12]
 8026210:	3330      	adds	r3, #48	; 0x30
 8026212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026216:	2100      	movs	r1, #0
 8026218:	4618      	mov	r0, r3
 802621a:	f7fe fa12 	bl	8024642 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 802621e:	79fb      	ldrb	r3, [r7, #7]
 8026220:	f003 0320 	and.w	r3, r3, #32
 8026224:	2b00      	cmp	r3, #0
 8026226:	d060      	beq.n	80262ea <f_open+0x362>
 8026228:	68fb      	ldr	r3, [r7, #12]
 802622a:	68db      	ldr	r3, [r3, #12]
 802622c:	2b00      	cmp	r3, #0
 802622e:	d05c      	beq.n	80262ea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8026230:	68fb      	ldr	r3, [r7, #12]
 8026232:	68da      	ldr	r2, [r3, #12]
 8026234:	68fb      	ldr	r3, [r7, #12]
 8026236:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8026238:	693b      	ldr	r3, [r7, #16]
 802623a:	895b      	ldrh	r3, [r3, #10]
 802623c:	025b      	lsls	r3, r3, #9
 802623e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8026240:	68fb      	ldr	r3, [r7, #12]
 8026242:	689b      	ldr	r3, [r3, #8]
 8026244:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8026246:	68fb      	ldr	r3, [r7, #12]
 8026248:	68db      	ldr	r3, [r3, #12]
 802624a:	657b      	str	r3, [r7, #84]	; 0x54
 802624c:	e016      	b.n	802627c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 802624e:	68fb      	ldr	r3, [r7, #12]
 8026250:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8026252:	4618      	mov	r0, r3
 8026254:	f7fe fced 	bl	8024c32 <get_fat>
 8026258:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 802625a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802625c:	2b01      	cmp	r3, #1
 802625e:	d802      	bhi.n	8026266 <f_open+0x2de>
 8026260:	2302      	movs	r3, #2
 8026262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8026266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026268:	f1b3 3fff 	cmp.w	r3, #4294967295
 802626c:	d102      	bne.n	8026274 <f_open+0x2ec>
 802626e:	2301      	movs	r3, #1
 8026270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8026274:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8026276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026278:	1ad3      	subs	r3, r2, r3
 802627a:	657b      	str	r3, [r7, #84]	; 0x54
 802627c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8026280:	2b00      	cmp	r3, #0
 8026282:	d103      	bne.n	802628c <f_open+0x304>
 8026284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8026286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8026288:	429a      	cmp	r2, r3
 802628a:	d8e0      	bhi.n	802624e <f_open+0x2c6>
				}
				fp->clust = clst;
 802628c:	68fb      	ldr	r3, [r7, #12]
 802628e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8026290:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8026292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8026296:	2b00      	cmp	r3, #0
 8026298:	d127      	bne.n	80262ea <f_open+0x362>
 802629a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802629c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80262a0:	2b00      	cmp	r3, #0
 80262a2:	d022      	beq.n	80262ea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80262a4:	693b      	ldr	r3, [r7, #16]
 80262a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80262a8:	4618      	mov	r0, r3
 80262aa:	f7fe fca3 	bl	8024bf4 <clust2sect>
 80262ae:	6478      	str	r0, [r7, #68]	; 0x44
 80262b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80262b2:	2b00      	cmp	r3, #0
 80262b4:	d103      	bne.n	80262be <f_open+0x336>
						res = FR_INT_ERR;
 80262b6:	2302      	movs	r3, #2
 80262b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80262bc:	e015      	b.n	80262ea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80262be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80262c0:	0a5a      	lsrs	r2, r3, #9
 80262c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80262c4:	441a      	add	r2, r3
 80262c6:	68fb      	ldr	r3, [r7, #12]
 80262c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80262ca:	693b      	ldr	r3, [r7, #16]
 80262cc:	7858      	ldrb	r0, [r3, #1]
 80262ce:	68fb      	ldr	r3, [r7, #12]
 80262d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80262d4:	68fb      	ldr	r3, [r7, #12]
 80262d6:	6a1a      	ldr	r2, [r3, #32]
 80262d8:	2301      	movs	r3, #1
 80262da:	f7fe f8b1 	bl	8024440 <disk_read>
 80262de:	4603      	mov	r3, r0
 80262e0:	2b00      	cmp	r3, #0
 80262e2:	d002      	beq.n	80262ea <f_open+0x362>
 80262e4:	2301      	movs	r3, #1
 80262e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80262ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80262ee:	2b00      	cmp	r3, #0
 80262f0:	d002      	beq.n	80262f8 <f_open+0x370>
 80262f2:	68fb      	ldr	r3, [r7, #12]
 80262f4:	2200      	movs	r2, #0
 80262f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80262f8:	693b      	ldr	r3, [r7, #16]
 80262fa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80262fe:	4611      	mov	r1, r2
 8026300:	4618      	mov	r0, r3
 8026302:	f7fe fa10 	bl	8024726 <unlock_fs>
 8026306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 802630a:	4618      	mov	r0, r3
 802630c:	3760      	adds	r7, #96	; 0x60
 802630e:	46bd      	mov	sp, r7
 8026310:	bd80      	pop	{r7, pc}

08026312 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8026312:	b580      	push	{r7, lr}
 8026314:	b08c      	sub	sp, #48	; 0x30
 8026316:	af00      	add	r7, sp, #0
 8026318:	60f8      	str	r0, [r7, #12]
 802631a:	60b9      	str	r1, [r7, #8]
 802631c:	607a      	str	r2, [r7, #4]
 802631e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8026320:	68bb      	ldr	r3, [r7, #8]
 8026322:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8026324:	683b      	ldr	r3, [r7, #0]
 8026326:	2200      	movs	r2, #0
 8026328:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 802632a:	68fb      	ldr	r3, [r7, #12]
 802632c:	f107 0210 	add.w	r2, r7, #16
 8026330:	4611      	mov	r1, r2
 8026332:	4618      	mov	r0, r3
 8026334:	f7ff fd7c 	bl	8025e30 <validate>
 8026338:	4603      	mov	r3, r0
 802633a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 802633e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8026342:	2b00      	cmp	r3, #0
 8026344:	d107      	bne.n	8026356 <f_write+0x44>
 8026346:	68fb      	ldr	r3, [r7, #12]
 8026348:	7d5b      	ldrb	r3, [r3, #21]
 802634a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 802634e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8026352:	2b00      	cmp	r3, #0
 8026354:	d009      	beq.n	802636a <f_write+0x58>
 8026356:	693b      	ldr	r3, [r7, #16]
 8026358:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 802635c:	4611      	mov	r1, r2
 802635e:	4618      	mov	r0, r3
 8026360:	f7fe f9e1 	bl	8024726 <unlock_fs>
 8026364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8026368:	e173      	b.n	8026652 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 802636a:	68fb      	ldr	r3, [r7, #12]
 802636c:	7d1b      	ldrb	r3, [r3, #20]
 802636e:	f003 0302 	and.w	r3, r3, #2
 8026372:	2b00      	cmp	r3, #0
 8026374:	d106      	bne.n	8026384 <f_write+0x72>
 8026376:	693b      	ldr	r3, [r7, #16]
 8026378:	2107      	movs	r1, #7
 802637a:	4618      	mov	r0, r3
 802637c:	f7fe f9d3 	bl	8024726 <unlock_fs>
 8026380:	2307      	movs	r3, #7
 8026382:	e166      	b.n	8026652 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8026384:	68fb      	ldr	r3, [r7, #12]
 8026386:	699a      	ldr	r2, [r3, #24]
 8026388:	687b      	ldr	r3, [r7, #4]
 802638a:	441a      	add	r2, r3
 802638c:	68fb      	ldr	r3, [r7, #12]
 802638e:	699b      	ldr	r3, [r3, #24]
 8026390:	429a      	cmp	r2, r3
 8026392:	f080 814b 	bcs.w	802662c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8026396:	68fb      	ldr	r3, [r7, #12]
 8026398:	699b      	ldr	r3, [r3, #24]
 802639a:	43db      	mvns	r3, r3
 802639c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 802639e:	e145      	b.n	802662c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80263a0:	68fb      	ldr	r3, [r7, #12]
 80263a2:	699b      	ldr	r3, [r3, #24]
 80263a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80263a8:	2b00      	cmp	r3, #0
 80263aa:	f040 8101 	bne.w	80265b0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80263ae:	68fb      	ldr	r3, [r7, #12]
 80263b0:	699b      	ldr	r3, [r3, #24]
 80263b2:	0a5b      	lsrs	r3, r3, #9
 80263b4:	693a      	ldr	r2, [r7, #16]
 80263b6:	8952      	ldrh	r2, [r2, #10]
 80263b8:	3a01      	subs	r2, #1
 80263ba:	4013      	ands	r3, r2
 80263bc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80263be:	69bb      	ldr	r3, [r7, #24]
 80263c0:	2b00      	cmp	r3, #0
 80263c2:	d14d      	bne.n	8026460 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80263c4:	68fb      	ldr	r3, [r7, #12]
 80263c6:	699b      	ldr	r3, [r3, #24]
 80263c8:	2b00      	cmp	r3, #0
 80263ca:	d10c      	bne.n	80263e6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80263cc:	68fb      	ldr	r3, [r7, #12]
 80263ce:	689b      	ldr	r3, [r3, #8]
 80263d0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80263d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	d11a      	bne.n	802640e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80263d8:	68fb      	ldr	r3, [r7, #12]
 80263da:	2100      	movs	r1, #0
 80263dc:	4618      	mov	r0, r3
 80263de:	f7fe fe19 	bl	8025014 <create_chain>
 80263e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80263e4:	e013      	b.n	802640e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80263e6:	68fb      	ldr	r3, [r7, #12]
 80263e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80263ea:	2b00      	cmp	r3, #0
 80263ec:	d007      	beq.n	80263fe <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80263ee:	68fb      	ldr	r3, [r7, #12]
 80263f0:	699b      	ldr	r3, [r3, #24]
 80263f2:	4619      	mov	r1, r3
 80263f4:	68f8      	ldr	r0, [r7, #12]
 80263f6:	f7fe fea5 	bl	8025144 <clmt_clust>
 80263fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80263fc:	e007      	b.n	802640e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80263fe:	68fa      	ldr	r2, [r7, #12]
 8026400:	68fb      	ldr	r3, [r7, #12]
 8026402:	69db      	ldr	r3, [r3, #28]
 8026404:	4619      	mov	r1, r3
 8026406:	4610      	mov	r0, r2
 8026408:	f7fe fe04 	bl	8025014 <create_chain>
 802640c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 802640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026410:	2b00      	cmp	r3, #0
 8026412:	f000 8110 	beq.w	8026636 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8026416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026418:	2b01      	cmp	r3, #1
 802641a:	d109      	bne.n	8026430 <f_write+0x11e>
 802641c:	68fb      	ldr	r3, [r7, #12]
 802641e:	2202      	movs	r2, #2
 8026420:	755a      	strb	r2, [r3, #21]
 8026422:	693b      	ldr	r3, [r7, #16]
 8026424:	2102      	movs	r1, #2
 8026426:	4618      	mov	r0, r3
 8026428:	f7fe f97d 	bl	8024726 <unlock_fs>
 802642c:	2302      	movs	r3, #2
 802642e:	e110      	b.n	8026652 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8026430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026436:	d109      	bne.n	802644c <f_write+0x13a>
 8026438:	68fb      	ldr	r3, [r7, #12]
 802643a:	2201      	movs	r2, #1
 802643c:	755a      	strb	r2, [r3, #21]
 802643e:	693b      	ldr	r3, [r7, #16]
 8026440:	2101      	movs	r1, #1
 8026442:	4618      	mov	r0, r3
 8026444:	f7fe f96f 	bl	8024726 <unlock_fs>
 8026448:	2301      	movs	r3, #1
 802644a:	e102      	b.n	8026652 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 802644c:	68fb      	ldr	r3, [r7, #12]
 802644e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026450:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8026452:	68fb      	ldr	r3, [r7, #12]
 8026454:	689b      	ldr	r3, [r3, #8]
 8026456:	2b00      	cmp	r3, #0
 8026458:	d102      	bne.n	8026460 <f_write+0x14e>
 802645a:	68fb      	ldr	r3, [r7, #12]
 802645c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802645e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8026460:	68fb      	ldr	r3, [r7, #12]
 8026462:	7d1b      	ldrb	r3, [r3, #20]
 8026464:	b25b      	sxtb	r3, r3
 8026466:	2b00      	cmp	r3, #0
 8026468:	da1d      	bge.n	80264a6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 802646a:	693b      	ldr	r3, [r7, #16]
 802646c:	7858      	ldrb	r0, [r3, #1]
 802646e:	68fb      	ldr	r3, [r7, #12]
 8026470:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8026474:	68fb      	ldr	r3, [r7, #12]
 8026476:	6a1a      	ldr	r2, [r3, #32]
 8026478:	2301      	movs	r3, #1
 802647a:	f7fe f801 	bl	8024480 <disk_write>
 802647e:	4603      	mov	r3, r0
 8026480:	2b00      	cmp	r3, #0
 8026482:	d009      	beq.n	8026498 <f_write+0x186>
 8026484:	68fb      	ldr	r3, [r7, #12]
 8026486:	2201      	movs	r2, #1
 8026488:	755a      	strb	r2, [r3, #21]
 802648a:	693b      	ldr	r3, [r7, #16]
 802648c:	2101      	movs	r1, #1
 802648e:	4618      	mov	r0, r3
 8026490:	f7fe f949 	bl	8024726 <unlock_fs>
 8026494:	2301      	movs	r3, #1
 8026496:	e0dc      	b.n	8026652 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8026498:	68fb      	ldr	r3, [r7, #12]
 802649a:	7d1b      	ldrb	r3, [r3, #20]
 802649c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80264a0:	b2da      	uxtb	r2, r3
 80264a2:	68fb      	ldr	r3, [r7, #12]
 80264a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80264a6:	693a      	ldr	r2, [r7, #16]
 80264a8:	68fb      	ldr	r3, [r7, #12]
 80264aa:	69db      	ldr	r3, [r3, #28]
 80264ac:	4619      	mov	r1, r3
 80264ae:	4610      	mov	r0, r2
 80264b0:	f7fe fba0 	bl	8024bf4 <clust2sect>
 80264b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80264b6:	697b      	ldr	r3, [r7, #20]
 80264b8:	2b00      	cmp	r3, #0
 80264ba:	d109      	bne.n	80264d0 <f_write+0x1be>
 80264bc:	68fb      	ldr	r3, [r7, #12]
 80264be:	2202      	movs	r2, #2
 80264c0:	755a      	strb	r2, [r3, #21]
 80264c2:	693b      	ldr	r3, [r7, #16]
 80264c4:	2102      	movs	r1, #2
 80264c6:	4618      	mov	r0, r3
 80264c8:	f7fe f92d 	bl	8024726 <unlock_fs>
 80264cc:	2302      	movs	r3, #2
 80264ce:	e0c0      	b.n	8026652 <f_write+0x340>
			sect += csect;
 80264d0:	697a      	ldr	r2, [r7, #20]
 80264d2:	69bb      	ldr	r3, [r7, #24]
 80264d4:	4413      	add	r3, r2
 80264d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80264d8:	687b      	ldr	r3, [r7, #4]
 80264da:	0a5b      	lsrs	r3, r3, #9
 80264dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80264de:	6a3b      	ldr	r3, [r7, #32]
 80264e0:	2b00      	cmp	r3, #0
 80264e2:	d041      	beq.n	8026568 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80264e4:	69ba      	ldr	r2, [r7, #24]
 80264e6:	6a3b      	ldr	r3, [r7, #32]
 80264e8:	4413      	add	r3, r2
 80264ea:	693a      	ldr	r2, [r7, #16]
 80264ec:	8952      	ldrh	r2, [r2, #10]
 80264ee:	4293      	cmp	r3, r2
 80264f0:	d905      	bls.n	80264fe <f_write+0x1ec>
					cc = fs->csize - csect;
 80264f2:	693b      	ldr	r3, [r7, #16]
 80264f4:	895b      	ldrh	r3, [r3, #10]
 80264f6:	461a      	mov	r2, r3
 80264f8:	69bb      	ldr	r3, [r7, #24]
 80264fa:	1ad3      	subs	r3, r2, r3
 80264fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80264fe:	693b      	ldr	r3, [r7, #16]
 8026500:	7858      	ldrb	r0, [r3, #1]
 8026502:	6a3b      	ldr	r3, [r7, #32]
 8026504:	697a      	ldr	r2, [r7, #20]
 8026506:	69f9      	ldr	r1, [r7, #28]
 8026508:	f7fd ffba 	bl	8024480 <disk_write>
 802650c:	4603      	mov	r3, r0
 802650e:	2b00      	cmp	r3, #0
 8026510:	d009      	beq.n	8026526 <f_write+0x214>
 8026512:	68fb      	ldr	r3, [r7, #12]
 8026514:	2201      	movs	r2, #1
 8026516:	755a      	strb	r2, [r3, #21]
 8026518:	693b      	ldr	r3, [r7, #16]
 802651a:	2101      	movs	r1, #1
 802651c:	4618      	mov	r0, r3
 802651e:	f7fe f902 	bl	8024726 <unlock_fs>
 8026522:	2301      	movs	r3, #1
 8026524:	e095      	b.n	8026652 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8026526:	68fb      	ldr	r3, [r7, #12]
 8026528:	6a1a      	ldr	r2, [r3, #32]
 802652a:	697b      	ldr	r3, [r7, #20]
 802652c:	1ad3      	subs	r3, r2, r3
 802652e:	6a3a      	ldr	r2, [r7, #32]
 8026530:	429a      	cmp	r2, r3
 8026532:	d915      	bls.n	8026560 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8026534:	68fb      	ldr	r3, [r7, #12]
 8026536:	f103 0030 	add.w	r0, r3, #48	; 0x30
 802653a:	68fb      	ldr	r3, [r7, #12]
 802653c:	6a1a      	ldr	r2, [r3, #32]
 802653e:	697b      	ldr	r3, [r7, #20]
 8026540:	1ad3      	subs	r3, r2, r3
 8026542:	025b      	lsls	r3, r3, #9
 8026544:	69fa      	ldr	r2, [r7, #28]
 8026546:	4413      	add	r3, r2
 8026548:	f44f 7200 	mov.w	r2, #512	; 0x200
 802654c:	4619      	mov	r1, r3
 802654e:	f7fe f857 	bl	8024600 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8026552:	68fb      	ldr	r3, [r7, #12]
 8026554:	7d1b      	ldrb	r3, [r3, #20]
 8026556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802655a:	b2da      	uxtb	r2, r3
 802655c:	68fb      	ldr	r3, [r7, #12]
 802655e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8026560:	6a3b      	ldr	r3, [r7, #32]
 8026562:	025b      	lsls	r3, r3, #9
 8026564:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8026566:	e044      	b.n	80265f2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8026568:	68fb      	ldr	r3, [r7, #12]
 802656a:	6a1b      	ldr	r3, [r3, #32]
 802656c:	697a      	ldr	r2, [r7, #20]
 802656e:	429a      	cmp	r2, r3
 8026570:	d01b      	beq.n	80265aa <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8026572:	68fb      	ldr	r3, [r7, #12]
 8026574:	699a      	ldr	r2, [r3, #24]
 8026576:	68fb      	ldr	r3, [r7, #12]
 8026578:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 802657a:	429a      	cmp	r2, r3
 802657c:	d215      	bcs.n	80265aa <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 802657e:	693b      	ldr	r3, [r7, #16]
 8026580:	7858      	ldrb	r0, [r3, #1]
 8026582:	68fb      	ldr	r3, [r7, #12]
 8026584:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8026588:	2301      	movs	r3, #1
 802658a:	697a      	ldr	r2, [r7, #20]
 802658c:	f7fd ff58 	bl	8024440 <disk_read>
 8026590:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8026592:	2b00      	cmp	r3, #0
 8026594:	d009      	beq.n	80265aa <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8026596:	68fb      	ldr	r3, [r7, #12]
 8026598:	2201      	movs	r2, #1
 802659a:	755a      	strb	r2, [r3, #21]
 802659c:	693b      	ldr	r3, [r7, #16]
 802659e:	2101      	movs	r1, #1
 80265a0:	4618      	mov	r0, r3
 80265a2:	f7fe f8c0 	bl	8024726 <unlock_fs>
 80265a6:	2301      	movs	r3, #1
 80265a8:	e053      	b.n	8026652 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80265aa:	68fb      	ldr	r3, [r7, #12]
 80265ac:	697a      	ldr	r2, [r7, #20]
 80265ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80265b0:	68fb      	ldr	r3, [r7, #12]
 80265b2:	699b      	ldr	r3, [r3, #24]
 80265b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80265b8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80265bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80265be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80265c0:	687b      	ldr	r3, [r7, #4]
 80265c2:	429a      	cmp	r2, r3
 80265c4:	d901      	bls.n	80265ca <f_write+0x2b8>
 80265c6:	687b      	ldr	r3, [r7, #4]
 80265c8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80265ca:	68fb      	ldr	r3, [r7, #12]
 80265cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80265d0:	68fb      	ldr	r3, [r7, #12]
 80265d2:	699b      	ldr	r3, [r3, #24]
 80265d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80265d8:	4413      	add	r3, r2
 80265da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80265dc:	69f9      	ldr	r1, [r7, #28]
 80265de:	4618      	mov	r0, r3
 80265e0:	f7fe f80e 	bl	8024600 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80265e4:	68fb      	ldr	r3, [r7, #12]
 80265e6:	7d1b      	ldrb	r3, [r3, #20]
 80265e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80265ec:	b2da      	uxtb	r2, r3
 80265ee:	68fb      	ldr	r3, [r7, #12]
 80265f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80265f2:	69fa      	ldr	r2, [r7, #28]
 80265f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80265f6:	4413      	add	r3, r2
 80265f8:	61fb      	str	r3, [r7, #28]
 80265fa:	68fb      	ldr	r3, [r7, #12]
 80265fc:	699a      	ldr	r2, [r3, #24]
 80265fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026600:	441a      	add	r2, r3
 8026602:	68fb      	ldr	r3, [r7, #12]
 8026604:	619a      	str	r2, [r3, #24]
 8026606:	68fb      	ldr	r3, [r7, #12]
 8026608:	68da      	ldr	r2, [r3, #12]
 802660a:	68fb      	ldr	r3, [r7, #12]
 802660c:	699b      	ldr	r3, [r3, #24]
 802660e:	429a      	cmp	r2, r3
 8026610:	bf38      	it	cc
 8026612:	461a      	movcc	r2, r3
 8026614:	68fb      	ldr	r3, [r7, #12]
 8026616:	60da      	str	r2, [r3, #12]
 8026618:	683b      	ldr	r3, [r7, #0]
 802661a:	681a      	ldr	r2, [r3, #0]
 802661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802661e:	441a      	add	r2, r3
 8026620:	683b      	ldr	r3, [r7, #0]
 8026622:	601a      	str	r2, [r3, #0]
 8026624:	687a      	ldr	r2, [r7, #4]
 8026626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026628:	1ad3      	subs	r3, r2, r3
 802662a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 802662c:	687b      	ldr	r3, [r7, #4]
 802662e:	2b00      	cmp	r3, #0
 8026630:	f47f aeb6 	bne.w	80263a0 <f_write+0x8e>
 8026634:	e000      	b.n	8026638 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8026636:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8026638:	68fb      	ldr	r3, [r7, #12]
 802663a:	7d1b      	ldrb	r3, [r3, #20]
 802663c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026640:	b2da      	uxtb	r2, r3
 8026642:	68fb      	ldr	r3, [r7, #12]
 8026644:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8026646:	693b      	ldr	r3, [r7, #16]
 8026648:	2100      	movs	r1, #0
 802664a:	4618      	mov	r0, r3
 802664c:	f7fe f86b 	bl	8024726 <unlock_fs>
 8026650:	2300      	movs	r3, #0
}
 8026652:	4618      	mov	r0, r3
 8026654:	3730      	adds	r7, #48	; 0x30
 8026656:	46bd      	mov	sp, r7
 8026658:	bd80      	pop	{r7, pc}

0802665a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 802665a:	b580      	push	{r7, lr}
 802665c:	b086      	sub	sp, #24
 802665e:	af00      	add	r7, sp, #0
 8026660:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8026662:	687b      	ldr	r3, [r7, #4]
 8026664:	f107 0208 	add.w	r2, r7, #8
 8026668:	4611      	mov	r1, r2
 802666a:	4618      	mov	r0, r3
 802666c:	f7ff fbe0 	bl	8025e30 <validate>
 8026670:	4603      	mov	r3, r0
 8026672:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8026674:	7dfb      	ldrb	r3, [r7, #23]
 8026676:	2b00      	cmp	r3, #0
 8026678:	d16d      	bne.n	8026756 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 802667a:	687b      	ldr	r3, [r7, #4]
 802667c:	7d1b      	ldrb	r3, [r3, #20]
 802667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026682:	2b00      	cmp	r3, #0
 8026684:	d067      	beq.n	8026756 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8026686:	687b      	ldr	r3, [r7, #4]
 8026688:	7d1b      	ldrb	r3, [r3, #20]
 802668a:	b25b      	sxtb	r3, r3
 802668c:	2b00      	cmp	r3, #0
 802668e:	da1a      	bge.n	80266c6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8026690:	68bb      	ldr	r3, [r7, #8]
 8026692:	7858      	ldrb	r0, [r3, #1]
 8026694:	687b      	ldr	r3, [r7, #4]
 8026696:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802669a:	687b      	ldr	r3, [r7, #4]
 802669c:	6a1a      	ldr	r2, [r3, #32]
 802669e:	2301      	movs	r3, #1
 80266a0:	f7fd feee 	bl	8024480 <disk_write>
 80266a4:	4603      	mov	r3, r0
 80266a6:	2b00      	cmp	r3, #0
 80266a8:	d006      	beq.n	80266b8 <f_sync+0x5e>
 80266aa:	68bb      	ldr	r3, [r7, #8]
 80266ac:	2101      	movs	r1, #1
 80266ae:	4618      	mov	r0, r3
 80266b0:	f7fe f839 	bl	8024726 <unlock_fs>
 80266b4:	2301      	movs	r3, #1
 80266b6:	e055      	b.n	8026764 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80266b8:	687b      	ldr	r3, [r7, #4]
 80266ba:	7d1b      	ldrb	r3, [r3, #20]
 80266bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80266c0:	b2da      	uxtb	r2, r3
 80266c2:	687b      	ldr	r3, [r7, #4]
 80266c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80266c6:	f7fd fc25 	bl	8023f14 <get_fattime>
 80266ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80266cc:	68ba      	ldr	r2, [r7, #8]
 80266ce:	687b      	ldr	r3, [r7, #4]
 80266d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80266d2:	4619      	mov	r1, r3
 80266d4:	4610      	mov	r0, r2
 80266d6:	f7fe f9f1 	bl	8024abc <move_window>
 80266da:	4603      	mov	r3, r0
 80266dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80266de:	7dfb      	ldrb	r3, [r7, #23]
 80266e0:	2b00      	cmp	r3, #0
 80266e2:	d138      	bne.n	8026756 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80266e4:	687b      	ldr	r3, [r7, #4]
 80266e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80266e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80266ea:	68fb      	ldr	r3, [r7, #12]
 80266ec:	330b      	adds	r3, #11
 80266ee:	781a      	ldrb	r2, [r3, #0]
 80266f0:	68fb      	ldr	r3, [r7, #12]
 80266f2:	330b      	adds	r3, #11
 80266f4:	f042 0220 	orr.w	r2, r2, #32
 80266f8:	b2d2      	uxtb	r2, r2
 80266fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80266fc:	687b      	ldr	r3, [r7, #4]
 80266fe:	6818      	ldr	r0, [r3, #0]
 8026700:	687b      	ldr	r3, [r7, #4]
 8026702:	689b      	ldr	r3, [r3, #8]
 8026704:	461a      	mov	r2, r3
 8026706:	68f9      	ldr	r1, [r7, #12]
 8026708:	f7fe fef6 	bl	80254f8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 802670c:	68fb      	ldr	r3, [r7, #12]
 802670e:	f103 021c 	add.w	r2, r3, #28
 8026712:	687b      	ldr	r3, [r7, #4]
 8026714:	68db      	ldr	r3, [r3, #12]
 8026716:	4619      	mov	r1, r3
 8026718:	4610      	mov	r0, r2
 802671a:	f7fd ff45 	bl	80245a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 802671e:	68fb      	ldr	r3, [r7, #12]
 8026720:	3316      	adds	r3, #22
 8026722:	6939      	ldr	r1, [r7, #16]
 8026724:	4618      	mov	r0, r3
 8026726:	f7fd ff3f 	bl	80245a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 802672a:	68fb      	ldr	r3, [r7, #12]
 802672c:	3312      	adds	r3, #18
 802672e:	2100      	movs	r1, #0
 8026730:	4618      	mov	r0, r3
 8026732:	f7fd ff1e 	bl	8024572 <st_word>
					fs->wflag = 1;
 8026736:	68bb      	ldr	r3, [r7, #8]
 8026738:	2201      	movs	r2, #1
 802673a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 802673c:	68bb      	ldr	r3, [r7, #8]
 802673e:	4618      	mov	r0, r3
 8026740:	f7fe f9ea 	bl	8024b18 <sync_fs>
 8026744:	4603      	mov	r3, r0
 8026746:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8026748:	687b      	ldr	r3, [r7, #4]
 802674a:	7d1b      	ldrb	r3, [r3, #20]
 802674c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026750:	b2da      	uxtb	r2, r3
 8026752:	687b      	ldr	r3, [r7, #4]
 8026754:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8026756:	68bb      	ldr	r3, [r7, #8]
 8026758:	7dfa      	ldrb	r2, [r7, #23]
 802675a:	4611      	mov	r1, r2
 802675c:	4618      	mov	r0, r3
 802675e:	f7fd ffe2 	bl	8024726 <unlock_fs>
 8026762:	7dfb      	ldrb	r3, [r7, #23]
}
 8026764:	4618      	mov	r0, r3
 8026766:	3718      	adds	r7, #24
 8026768:	46bd      	mov	sp, r7
 802676a:	bd80      	pop	{r7, pc}

0802676c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 802676c:	b580      	push	{r7, lr}
 802676e:	b084      	sub	sp, #16
 8026770:	af00      	add	r7, sp, #0
 8026772:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8026774:	6878      	ldr	r0, [r7, #4]
 8026776:	f7ff ff70 	bl	802665a <f_sync>
 802677a:	4603      	mov	r3, r0
 802677c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 802677e:	7bfb      	ldrb	r3, [r7, #15]
 8026780:	2b00      	cmp	r3, #0
 8026782:	d11d      	bne.n	80267c0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8026784:	687b      	ldr	r3, [r7, #4]
 8026786:	f107 0208 	add.w	r2, r7, #8
 802678a:	4611      	mov	r1, r2
 802678c:	4618      	mov	r0, r3
 802678e:	f7ff fb4f 	bl	8025e30 <validate>
 8026792:	4603      	mov	r3, r0
 8026794:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8026796:	7bfb      	ldrb	r3, [r7, #15]
 8026798:	2b00      	cmp	r3, #0
 802679a:	d111      	bne.n	80267c0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 802679c:	687b      	ldr	r3, [r7, #4]
 802679e:	691b      	ldr	r3, [r3, #16]
 80267a0:	4618      	mov	r0, r3
 80267a2:	f7fe f8e7 	bl	8024974 <dec_lock>
 80267a6:	4603      	mov	r3, r0
 80267a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80267aa:	7bfb      	ldrb	r3, [r7, #15]
 80267ac:	2b00      	cmp	r3, #0
 80267ae:	d102      	bne.n	80267b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80267b0:	687b      	ldr	r3, [r7, #4]
 80267b2:	2200      	movs	r2, #0
 80267b4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80267b6:	68bb      	ldr	r3, [r7, #8]
 80267b8:	2100      	movs	r1, #0
 80267ba:	4618      	mov	r0, r3
 80267bc:	f7fd ffb3 	bl	8024726 <unlock_fs>
#endif
		}
	}
	return res;
 80267c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80267c2:	4618      	mov	r0, r3
 80267c4:	3710      	adds	r7, #16
 80267c6:	46bd      	mov	sp, r7
 80267c8:	bd80      	pop	{r7, pc}
	...

080267cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80267cc:	b480      	push	{r7}
 80267ce:	b087      	sub	sp, #28
 80267d0:	af00      	add	r7, sp, #0
 80267d2:	60f8      	str	r0, [r7, #12]
 80267d4:	60b9      	str	r1, [r7, #8]
 80267d6:	4613      	mov	r3, r2
 80267d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80267da:	2301      	movs	r3, #1
 80267dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80267de:	2300      	movs	r3, #0
 80267e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80267e2:	4b1f      	ldr	r3, [pc, #124]	; (8026860 <FATFS_LinkDriverEx+0x94>)
 80267e4:	7a5b      	ldrb	r3, [r3, #9]
 80267e6:	b2db      	uxtb	r3, r3
 80267e8:	2b00      	cmp	r3, #0
 80267ea:	d131      	bne.n	8026850 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80267ec:	4b1c      	ldr	r3, [pc, #112]	; (8026860 <FATFS_LinkDriverEx+0x94>)
 80267ee:	7a5b      	ldrb	r3, [r3, #9]
 80267f0:	b2db      	uxtb	r3, r3
 80267f2:	461a      	mov	r2, r3
 80267f4:	4b1a      	ldr	r3, [pc, #104]	; (8026860 <FATFS_LinkDriverEx+0x94>)
 80267f6:	2100      	movs	r1, #0
 80267f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80267fa:	4b19      	ldr	r3, [pc, #100]	; (8026860 <FATFS_LinkDriverEx+0x94>)
 80267fc:	7a5b      	ldrb	r3, [r3, #9]
 80267fe:	b2db      	uxtb	r3, r3
 8026800:	4a17      	ldr	r2, [pc, #92]	; (8026860 <FATFS_LinkDriverEx+0x94>)
 8026802:	009b      	lsls	r3, r3, #2
 8026804:	4413      	add	r3, r2
 8026806:	68fa      	ldr	r2, [r7, #12]
 8026808:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 802680a:	4b15      	ldr	r3, [pc, #84]	; (8026860 <FATFS_LinkDriverEx+0x94>)
 802680c:	7a5b      	ldrb	r3, [r3, #9]
 802680e:	b2db      	uxtb	r3, r3
 8026810:	461a      	mov	r2, r3
 8026812:	4b13      	ldr	r3, [pc, #76]	; (8026860 <FATFS_LinkDriverEx+0x94>)
 8026814:	4413      	add	r3, r2
 8026816:	79fa      	ldrb	r2, [r7, #7]
 8026818:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 802681a:	4b11      	ldr	r3, [pc, #68]	; (8026860 <FATFS_LinkDriverEx+0x94>)
 802681c:	7a5b      	ldrb	r3, [r3, #9]
 802681e:	b2db      	uxtb	r3, r3
 8026820:	1c5a      	adds	r2, r3, #1
 8026822:	b2d1      	uxtb	r1, r2
 8026824:	4a0e      	ldr	r2, [pc, #56]	; (8026860 <FATFS_LinkDriverEx+0x94>)
 8026826:	7251      	strb	r1, [r2, #9]
 8026828:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 802682a:	7dbb      	ldrb	r3, [r7, #22]
 802682c:	3330      	adds	r3, #48	; 0x30
 802682e:	b2da      	uxtb	r2, r3
 8026830:	68bb      	ldr	r3, [r7, #8]
 8026832:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8026834:	68bb      	ldr	r3, [r7, #8]
 8026836:	3301      	adds	r3, #1
 8026838:	223a      	movs	r2, #58	; 0x3a
 802683a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 802683c:	68bb      	ldr	r3, [r7, #8]
 802683e:	3302      	adds	r3, #2
 8026840:	222f      	movs	r2, #47	; 0x2f
 8026842:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8026844:	68bb      	ldr	r3, [r7, #8]
 8026846:	3303      	adds	r3, #3
 8026848:	2200      	movs	r2, #0
 802684a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 802684c:	2300      	movs	r3, #0
 802684e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8026850:	7dfb      	ldrb	r3, [r7, #23]
}
 8026852:	4618      	mov	r0, r3
 8026854:	371c      	adds	r7, #28
 8026856:	46bd      	mov	sp, r7
 8026858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802685c:	4770      	bx	lr
 802685e:	bf00      	nop
 8026860:	24001490 	.word	0x24001490

08026864 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8026864:	b580      	push	{r7, lr}
 8026866:	b082      	sub	sp, #8
 8026868:	af00      	add	r7, sp, #0
 802686a:	6078      	str	r0, [r7, #4]
 802686c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 802686e:	2200      	movs	r2, #0
 8026870:	6839      	ldr	r1, [r7, #0]
 8026872:	6878      	ldr	r0, [r7, #4]
 8026874:	f7ff ffaa 	bl	80267cc <FATFS_LinkDriverEx>
 8026878:	4603      	mov	r3, r0
}
 802687a:	4618      	mov	r0, r3
 802687c:	3708      	adds	r7, #8
 802687e:	46bd      	mov	sp, r7
 8026880:	bd80      	pop	{r7, pc}

08026882 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8026882:	b580      	push	{r7, lr}
 8026884:	b084      	sub	sp, #16
 8026886:	af00      	add	r7, sp, #0
 8026888:	4603      	mov	r3, r0
 802688a:	6039      	str	r1, [r7, #0]
 802688c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 802688e:	2200      	movs	r2, #0
 8026890:	2101      	movs	r1, #1
 8026892:	2001      	movs	r0, #1
 8026894:	f000 fbbe 	bl	8027014 <osSemaphoreNew>
 8026898:	4602      	mov	r2, r0
 802689a:	683b      	ldr	r3, [r7, #0]
 802689c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 802689e:	683b      	ldr	r3, [r7, #0]
 80268a0:	681b      	ldr	r3, [r3, #0]
 80268a2:	2b00      	cmp	r3, #0
 80268a4:	bf14      	ite	ne
 80268a6:	2301      	movne	r3, #1
 80268a8:	2300      	moveq	r3, #0
 80268aa:	b2db      	uxtb	r3, r3
 80268ac:	60fb      	str	r3, [r7, #12]

    return ret;
 80268ae:	68fb      	ldr	r3, [r7, #12]
}
 80268b0:	4618      	mov	r0, r3
 80268b2:	3710      	adds	r7, #16
 80268b4:	46bd      	mov	sp, r7
 80268b6:	bd80      	pop	{r7, pc}

080268b8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80268b8:	b580      	push	{r7, lr}
 80268ba:	b082      	sub	sp, #8
 80268bc:	af00      	add	r7, sp, #0
 80268be:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80268c0:	6878      	ldr	r0, [r7, #4]
 80268c2:	f000 fd03 	bl	80272cc <osSemaphoreDelete>
#endif
    return 1;
 80268c6:	2301      	movs	r3, #1
}
 80268c8:	4618      	mov	r0, r3
 80268ca:	3708      	adds	r7, #8
 80268cc:	46bd      	mov	sp, r7
 80268ce:	bd80      	pop	{r7, pc}

080268d0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80268d0:	b580      	push	{r7, lr}
 80268d2:	b084      	sub	sp, #16
 80268d4:	af00      	add	r7, sp, #0
 80268d6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80268d8:	2300      	movs	r3, #0
 80268da:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80268dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80268e0:	6878      	ldr	r0, [r7, #4]
 80268e2:	f000 fc35 	bl	8027150 <osSemaphoreAcquire>
 80268e6:	4603      	mov	r3, r0
 80268e8:	2b00      	cmp	r3, #0
 80268ea:	d101      	bne.n	80268f0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80268ec:	2301      	movs	r3, #1
 80268ee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80268f0:	68fb      	ldr	r3, [r7, #12]
}
 80268f2:	4618      	mov	r0, r3
 80268f4:	3710      	adds	r7, #16
 80268f6:	46bd      	mov	sp, r7
 80268f8:	bd80      	pop	{r7, pc}

080268fa <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80268fa:	b580      	push	{r7, lr}
 80268fc:	b082      	sub	sp, #8
 80268fe:	af00      	add	r7, sp, #0
 8026900:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8026902:	6878      	ldr	r0, [r7, #4]
 8026904:	f000 fc8a 	bl	802721c <osSemaphoreRelease>
#endif
}
 8026908:	bf00      	nop
 802690a:	3708      	adds	r7, #8
 802690c:	46bd      	mov	sp, r7
 802690e:	bd80      	pop	{r7, pc}

08026910 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8026910:	b480      	push	{r7}
 8026912:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8026914:	bf00      	nop
 8026916:	46bd      	mov	sp, r7
 8026918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802691c:	4770      	bx	lr
	...

08026920 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8026920:	b480      	push	{r7}
 8026922:	b085      	sub	sp, #20
 8026924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026926:	f3ef 8305 	mrs	r3, IPSR
 802692a:	60bb      	str	r3, [r7, #8]
  return(result);
 802692c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 802692e:	2b00      	cmp	r3, #0
 8026930:	d10f      	bne.n	8026952 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026932:	f3ef 8310 	mrs	r3, PRIMASK
 8026936:	607b      	str	r3, [r7, #4]
  return(result);
 8026938:	687b      	ldr	r3, [r7, #4]
 802693a:	2b00      	cmp	r3, #0
 802693c:	d105      	bne.n	802694a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802693e:	f3ef 8311 	mrs	r3, BASEPRI
 8026942:	603b      	str	r3, [r7, #0]
  return(result);
 8026944:	683b      	ldr	r3, [r7, #0]
 8026946:	2b00      	cmp	r3, #0
 8026948:	d007      	beq.n	802695a <osKernelInitialize+0x3a>
 802694a:	4b0e      	ldr	r3, [pc, #56]	; (8026984 <osKernelInitialize+0x64>)
 802694c:	681b      	ldr	r3, [r3, #0]
 802694e:	2b02      	cmp	r3, #2
 8026950:	d103      	bne.n	802695a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8026952:	f06f 0305 	mvn.w	r3, #5
 8026956:	60fb      	str	r3, [r7, #12]
 8026958:	e00c      	b.n	8026974 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 802695a:	4b0a      	ldr	r3, [pc, #40]	; (8026984 <osKernelInitialize+0x64>)
 802695c:	681b      	ldr	r3, [r3, #0]
 802695e:	2b00      	cmp	r3, #0
 8026960:	d105      	bne.n	802696e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8026962:	4b08      	ldr	r3, [pc, #32]	; (8026984 <osKernelInitialize+0x64>)
 8026964:	2201      	movs	r2, #1
 8026966:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8026968:	2300      	movs	r3, #0
 802696a:	60fb      	str	r3, [r7, #12]
 802696c:	e002      	b.n	8026974 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 802696e:	f04f 33ff 	mov.w	r3, #4294967295
 8026972:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8026974:	68fb      	ldr	r3, [r7, #12]
}
 8026976:	4618      	mov	r0, r3
 8026978:	3714      	adds	r7, #20
 802697a:	46bd      	mov	sp, r7
 802697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026980:	4770      	bx	lr
 8026982:	bf00      	nop
 8026984:	2400149c 	.word	0x2400149c

08026988 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8026988:	b580      	push	{r7, lr}
 802698a:	b082      	sub	sp, #8
 802698c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 802698e:	f002 fe23 	bl	80295d8 <xTaskGetSchedulerState>
 8026992:	4603      	mov	r3, r0
 8026994:	2b00      	cmp	r3, #0
 8026996:	d004      	beq.n	80269a2 <osKernelGetState+0x1a>
 8026998:	2b02      	cmp	r3, #2
 802699a:	d105      	bne.n	80269a8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 802699c:	2302      	movs	r3, #2
 802699e:	607b      	str	r3, [r7, #4]
      break;
 80269a0:	e00c      	b.n	80269bc <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80269a2:	2303      	movs	r3, #3
 80269a4:	607b      	str	r3, [r7, #4]
      break;
 80269a6:	e009      	b.n	80269bc <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80269a8:	4b07      	ldr	r3, [pc, #28]	; (80269c8 <osKernelGetState+0x40>)
 80269aa:	681b      	ldr	r3, [r3, #0]
 80269ac:	2b01      	cmp	r3, #1
 80269ae:	d102      	bne.n	80269b6 <osKernelGetState+0x2e>
        state = osKernelReady;
 80269b0:	2301      	movs	r3, #1
 80269b2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80269b4:	e001      	b.n	80269ba <osKernelGetState+0x32>
        state = osKernelInactive;
 80269b6:	2300      	movs	r3, #0
 80269b8:	607b      	str	r3, [r7, #4]
      break;
 80269ba:	bf00      	nop
  }

  return (state);
 80269bc:	687b      	ldr	r3, [r7, #4]
}
 80269be:	4618      	mov	r0, r3
 80269c0:	3708      	adds	r7, #8
 80269c2:	46bd      	mov	sp, r7
 80269c4:	bd80      	pop	{r7, pc}
 80269c6:	bf00      	nop
 80269c8:	2400149c 	.word	0x2400149c

080269cc <osKernelStart>:

osStatus_t osKernelStart (void) {
 80269cc:	b580      	push	{r7, lr}
 80269ce:	b084      	sub	sp, #16
 80269d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80269d2:	f3ef 8305 	mrs	r3, IPSR
 80269d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80269d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80269da:	2b00      	cmp	r3, #0
 80269dc:	d10f      	bne.n	80269fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80269de:	f3ef 8310 	mrs	r3, PRIMASK
 80269e2:	607b      	str	r3, [r7, #4]
  return(result);
 80269e4:	687b      	ldr	r3, [r7, #4]
 80269e6:	2b00      	cmp	r3, #0
 80269e8:	d105      	bne.n	80269f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80269ea:	f3ef 8311 	mrs	r3, BASEPRI
 80269ee:	603b      	str	r3, [r7, #0]
  return(result);
 80269f0:	683b      	ldr	r3, [r7, #0]
 80269f2:	2b00      	cmp	r3, #0
 80269f4:	d007      	beq.n	8026a06 <osKernelStart+0x3a>
 80269f6:	4b0f      	ldr	r3, [pc, #60]	; (8026a34 <osKernelStart+0x68>)
 80269f8:	681b      	ldr	r3, [r3, #0]
 80269fa:	2b02      	cmp	r3, #2
 80269fc:	d103      	bne.n	8026a06 <osKernelStart+0x3a>
    stat = osErrorISR;
 80269fe:	f06f 0305 	mvn.w	r3, #5
 8026a02:	60fb      	str	r3, [r7, #12]
 8026a04:	e010      	b.n	8026a28 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8026a06:	4b0b      	ldr	r3, [pc, #44]	; (8026a34 <osKernelStart+0x68>)
 8026a08:	681b      	ldr	r3, [r3, #0]
 8026a0a:	2b01      	cmp	r3, #1
 8026a0c:	d109      	bne.n	8026a22 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8026a0e:	f7ff ff7f 	bl	8026910 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8026a12:	4b08      	ldr	r3, [pc, #32]	; (8026a34 <osKernelStart+0x68>)
 8026a14:	2202      	movs	r2, #2
 8026a16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8026a18:	f002 f986 	bl	8028d28 <vTaskStartScheduler>
      stat = osOK;
 8026a1c:	2300      	movs	r3, #0
 8026a1e:	60fb      	str	r3, [r7, #12]
 8026a20:	e002      	b.n	8026a28 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8026a22:	f04f 33ff 	mov.w	r3, #4294967295
 8026a26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8026a28:	68fb      	ldr	r3, [r7, #12]
}
 8026a2a:	4618      	mov	r0, r3
 8026a2c:	3710      	adds	r7, #16
 8026a2e:	46bd      	mov	sp, r7
 8026a30:	bd80      	pop	{r7, pc}
 8026a32:	bf00      	nop
 8026a34:	2400149c 	.word	0x2400149c

08026a38 <osKernelLock>:

int32_t osKernelLock (void) {
 8026a38:	b580      	push	{r7, lr}
 8026a3a:	b084      	sub	sp, #16
 8026a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026a3e:	f3ef 8305 	mrs	r3, IPSR
 8026a42:	60bb      	str	r3, [r7, #8]
  return(result);
 8026a44:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 8026a46:	2b00      	cmp	r3, #0
 8026a48:	d10f      	bne.n	8026a6a <osKernelLock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8026a4e:	607b      	str	r3, [r7, #4]
  return(result);
 8026a50:	687b      	ldr	r3, [r7, #4]
 8026a52:	2b00      	cmp	r3, #0
 8026a54:	d105      	bne.n	8026a62 <osKernelLock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026a56:	f3ef 8311 	mrs	r3, BASEPRI
 8026a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8026a5c:	683b      	ldr	r3, [r7, #0]
 8026a5e:	2b00      	cmp	r3, #0
 8026a60:	d007      	beq.n	8026a72 <osKernelLock+0x3a>
 8026a62:	4b10      	ldr	r3, [pc, #64]	; (8026aa4 <osKernelLock+0x6c>)
 8026a64:	681b      	ldr	r3, [r3, #0]
 8026a66:	2b02      	cmp	r3, #2
 8026a68:	d103      	bne.n	8026a72 <osKernelLock+0x3a>
    lock = (int32_t)osErrorISR;
 8026a6a:	f06f 0305 	mvn.w	r3, #5
 8026a6e:	60fb      	str	r3, [r7, #12]
 8026a70:	e013      	b.n	8026a9a <osKernelLock+0x62>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8026a72:	f002 fdb1 	bl	80295d8 <xTaskGetSchedulerState>
 8026a76:	4603      	mov	r3, r0
 8026a78:	2b00      	cmp	r3, #0
 8026a7a:	d002      	beq.n	8026a82 <osKernelLock+0x4a>
 8026a7c:	2b02      	cmp	r3, #2
 8026a7e:	d003      	beq.n	8026a88 <osKernelLock+0x50>
 8026a80:	e007      	b.n	8026a92 <osKernelLock+0x5a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8026a82:	2301      	movs	r3, #1
 8026a84:	60fb      	str	r3, [r7, #12]
        break;
 8026a86:	e008      	b.n	8026a9a <osKernelLock+0x62>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8026a88:	f002 f9b2 	bl	8028df0 <vTaskSuspendAll>
        lock = 0;
 8026a8c:	2300      	movs	r3, #0
 8026a8e:	60fb      	str	r3, [r7, #12]
        break;
 8026a90:	e003      	b.n	8026a9a <osKernelLock+0x62>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8026a92:	f04f 33ff 	mov.w	r3, #4294967295
 8026a96:	60fb      	str	r3, [r7, #12]
        break;
 8026a98:	bf00      	nop
    }
  }

  return (lock);
 8026a9a:	68fb      	ldr	r3, [r7, #12]
}
 8026a9c:	4618      	mov	r0, r3
 8026a9e:	3710      	adds	r7, #16
 8026aa0:	46bd      	mov	sp, r7
 8026aa2:	bd80      	pop	{r7, pc}
 8026aa4:	2400149c 	.word	0x2400149c

08026aa8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8026aa8:	b580      	push	{r7, lr}
 8026aaa:	b084      	sub	sp, #16
 8026aac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026aae:	f3ef 8305 	mrs	r3, IPSR
 8026ab2:	60bb      	str	r3, [r7, #8]
  return(result);
 8026ab4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8026ab6:	2b00      	cmp	r3, #0
 8026ab8:	d10f      	bne.n	8026ada <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026aba:	f3ef 8310 	mrs	r3, PRIMASK
 8026abe:	607b      	str	r3, [r7, #4]
  return(result);
 8026ac0:	687b      	ldr	r3, [r7, #4]
 8026ac2:	2b00      	cmp	r3, #0
 8026ac4:	d105      	bne.n	8026ad2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8026aca:	603b      	str	r3, [r7, #0]
  return(result);
 8026acc:	683b      	ldr	r3, [r7, #0]
 8026ace:	2b00      	cmp	r3, #0
 8026ad0:	d007      	beq.n	8026ae2 <osKernelGetTickCount+0x3a>
 8026ad2:	4b08      	ldr	r3, [pc, #32]	; (8026af4 <osKernelGetTickCount+0x4c>)
 8026ad4:	681b      	ldr	r3, [r3, #0]
 8026ad6:	2b02      	cmp	r3, #2
 8026ad8:	d103      	bne.n	8026ae2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8026ada:	f002 fa43 	bl	8028f64 <xTaskGetTickCountFromISR>
 8026ade:	60f8      	str	r0, [r7, #12]
 8026ae0:	e002      	b.n	8026ae8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8026ae2:	f002 fa2f 	bl	8028f44 <xTaskGetTickCount>
 8026ae6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8026ae8:	68fb      	ldr	r3, [r7, #12]
}
 8026aea:	4618      	mov	r0, r3
 8026aec:	3710      	adds	r7, #16
 8026aee:	46bd      	mov	sp, r7
 8026af0:	bd80      	pop	{r7, pc}
 8026af2:	bf00      	nop
 8026af4:	2400149c 	.word	0x2400149c

08026af8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8026af8:	b580      	push	{r7, lr}
 8026afa:	b090      	sub	sp, #64	; 0x40
 8026afc:	af04      	add	r7, sp, #16
 8026afe:	60f8      	str	r0, [r7, #12]
 8026b00:	60b9      	str	r1, [r7, #8]
 8026b02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8026b04:	2300      	movs	r3, #0
 8026b06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026b08:	f3ef 8305 	mrs	r3, IPSR
 8026b0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8026b0e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8026b10:	2b00      	cmp	r3, #0
 8026b12:	f040 808f 	bne.w	8026c34 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026b16:	f3ef 8310 	mrs	r3, PRIMASK
 8026b1a:	61bb      	str	r3, [r7, #24]
  return(result);
 8026b1c:	69bb      	ldr	r3, [r7, #24]
 8026b1e:	2b00      	cmp	r3, #0
 8026b20:	d105      	bne.n	8026b2e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026b22:	f3ef 8311 	mrs	r3, BASEPRI
 8026b26:	617b      	str	r3, [r7, #20]
  return(result);
 8026b28:	697b      	ldr	r3, [r7, #20]
 8026b2a:	2b00      	cmp	r3, #0
 8026b2c:	d003      	beq.n	8026b36 <osThreadNew+0x3e>
 8026b2e:	4b44      	ldr	r3, [pc, #272]	; (8026c40 <osThreadNew+0x148>)
 8026b30:	681b      	ldr	r3, [r3, #0]
 8026b32:	2b02      	cmp	r3, #2
 8026b34:	d07e      	beq.n	8026c34 <osThreadNew+0x13c>
 8026b36:	68fb      	ldr	r3, [r7, #12]
 8026b38:	2b00      	cmp	r3, #0
 8026b3a:	d07b      	beq.n	8026c34 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8026b3c:	2380      	movs	r3, #128	; 0x80
 8026b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8026b40:	2318      	movs	r3, #24
 8026b42:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8026b44:	2300      	movs	r3, #0
 8026b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8026b48:	f04f 33ff 	mov.w	r3, #4294967295
 8026b4c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8026b4e:	687b      	ldr	r3, [r7, #4]
 8026b50:	2b00      	cmp	r3, #0
 8026b52:	d045      	beq.n	8026be0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8026b54:	687b      	ldr	r3, [r7, #4]
 8026b56:	681b      	ldr	r3, [r3, #0]
 8026b58:	2b00      	cmp	r3, #0
 8026b5a:	d002      	beq.n	8026b62 <osThreadNew+0x6a>
        name = attr->name;
 8026b5c:	687b      	ldr	r3, [r7, #4]
 8026b5e:	681b      	ldr	r3, [r3, #0]
 8026b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8026b62:	687b      	ldr	r3, [r7, #4]
 8026b64:	699b      	ldr	r3, [r3, #24]
 8026b66:	2b00      	cmp	r3, #0
 8026b68:	d002      	beq.n	8026b70 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8026b6a:	687b      	ldr	r3, [r7, #4]
 8026b6c:	699b      	ldr	r3, [r3, #24]
 8026b6e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8026b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b72:	2b00      	cmp	r3, #0
 8026b74:	d008      	beq.n	8026b88 <osThreadNew+0x90>
 8026b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b78:	2b38      	cmp	r3, #56	; 0x38
 8026b7a:	d805      	bhi.n	8026b88 <osThreadNew+0x90>
 8026b7c:	687b      	ldr	r3, [r7, #4]
 8026b7e:	685b      	ldr	r3, [r3, #4]
 8026b80:	f003 0301 	and.w	r3, r3, #1
 8026b84:	2b00      	cmp	r3, #0
 8026b86:	d001      	beq.n	8026b8c <osThreadNew+0x94>
        return (NULL);
 8026b88:	2300      	movs	r3, #0
 8026b8a:	e054      	b.n	8026c36 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8026b8c:	687b      	ldr	r3, [r7, #4]
 8026b8e:	695b      	ldr	r3, [r3, #20]
 8026b90:	2b00      	cmp	r3, #0
 8026b92:	d003      	beq.n	8026b9c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8026b94:	687b      	ldr	r3, [r7, #4]
 8026b96:	695b      	ldr	r3, [r3, #20]
 8026b98:	089b      	lsrs	r3, r3, #2
 8026b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8026b9c:	687b      	ldr	r3, [r7, #4]
 8026b9e:	689b      	ldr	r3, [r3, #8]
 8026ba0:	2b00      	cmp	r3, #0
 8026ba2:	d00e      	beq.n	8026bc2 <osThreadNew+0xca>
 8026ba4:	687b      	ldr	r3, [r7, #4]
 8026ba6:	68db      	ldr	r3, [r3, #12]
 8026ba8:	2b5b      	cmp	r3, #91	; 0x5b
 8026baa:	d90a      	bls.n	8026bc2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8026bac:	687b      	ldr	r3, [r7, #4]
 8026bae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	d006      	beq.n	8026bc2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8026bb4:	687b      	ldr	r3, [r7, #4]
 8026bb6:	695b      	ldr	r3, [r3, #20]
 8026bb8:	2b00      	cmp	r3, #0
 8026bba:	d002      	beq.n	8026bc2 <osThreadNew+0xca>
        mem = 1;
 8026bbc:	2301      	movs	r3, #1
 8026bbe:	623b      	str	r3, [r7, #32]
 8026bc0:	e010      	b.n	8026be4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	689b      	ldr	r3, [r3, #8]
 8026bc6:	2b00      	cmp	r3, #0
 8026bc8:	d10c      	bne.n	8026be4 <osThreadNew+0xec>
 8026bca:	687b      	ldr	r3, [r7, #4]
 8026bcc:	68db      	ldr	r3, [r3, #12]
 8026bce:	2b00      	cmp	r3, #0
 8026bd0:	d108      	bne.n	8026be4 <osThreadNew+0xec>
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	691b      	ldr	r3, [r3, #16]
 8026bd6:	2b00      	cmp	r3, #0
 8026bd8:	d104      	bne.n	8026be4 <osThreadNew+0xec>
          mem = 0;
 8026bda:	2300      	movs	r3, #0
 8026bdc:	623b      	str	r3, [r7, #32]
 8026bde:	e001      	b.n	8026be4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8026be0:	2300      	movs	r3, #0
 8026be2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8026be4:	6a3b      	ldr	r3, [r7, #32]
 8026be6:	2b01      	cmp	r3, #1
 8026be8:	d110      	bne.n	8026c0c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8026bea:	687b      	ldr	r3, [r7, #4]
 8026bec:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8026bee:	687a      	ldr	r2, [r7, #4]
 8026bf0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8026bf2:	9202      	str	r2, [sp, #8]
 8026bf4:	9301      	str	r3, [sp, #4]
 8026bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026bf8:	9300      	str	r3, [sp, #0]
 8026bfa:	68bb      	ldr	r3, [r7, #8]
 8026bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8026c00:	68f8      	ldr	r0, [r7, #12]
 8026c02:	f001 fe45 	bl	8028890 <xTaskCreateStatic>
 8026c06:	4603      	mov	r3, r0
 8026c08:	613b      	str	r3, [r7, #16]
 8026c0a:	e013      	b.n	8026c34 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8026c0c:	6a3b      	ldr	r3, [r7, #32]
 8026c0e:	2b00      	cmp	r3, #0
 8026c10:	d110      	bne.n	8026c34 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8026c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026c14:	b29a      	uxth	r2, r3
 8026c16:	f107 0310 	add.w	r3, r7, #16
 8026c1a:	9301      	str	r3, [sp, #4]
 8026c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026c1e:	9300      	str	r3, [sp, #0]
 8026c20:	68bb      	ldr	r3, [r7, #8]
 8026c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8026c24:	68f8      	ldr	r0, [r7, #12]
 8026c26:	f001 fe8d 	bl	8028944 <xTaskCreate>
 8026c2a:	4603      	mov	r3, r0
 8026c2c:	2b01      	cmp	r3, #1
 8026c2e:	d001      	beq.n	8026c34 <osThreadNew+0x13c>
          hTask = NULL;
 8026c30:	2300      	movs	r3, #0
 8026c32:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8026c34:	693b      	ldr	r3, [r7, #16]
}
 8026c36:	4618      	mov	r0, r3
 8026c38:	3730      	adds	r7, #48	; 0x30
 8026c3a:	46bd      	mov	sp, r7
 8026c3c:	bd80      	pop	{r7, pc}
 8026c3e:	bf00      	nop
 8026c40:	2400149c 	.word	0x2400149c

08026c44 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8026c44:	b580      	push	{r7, lr}
 8026c46:	b08a      	sub	sp, #40	; 0x28
 8026c48:	af02      	add	r7, sp, #8
 8026c4a:	6078      	str	r0, [r7, #4]
 8026c4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8026c4e:	687b      	ldr	r3, [r7, #4]
 8026c50:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8026c52:	69fb      	ldr	r3, [r7, #28]
 8026c54:	2b00      	cmp	r3, #0
 8026c56:	d002      	beq.n	8026c5e <osThreadFlagsSet+0x1a>
 8026c58:	683b      	ldr	r3, [r7, #0]
 8026c5a:	2b00      	cmp	r3, #0
 8026c5c:	da03      	bge.n	8026c66 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8026c5e:	f06f 0303 	mvn.w	r3, #3
 8026c62:	60fb      	str	r3, [r7, #12]
 8026c64:	e046      	b.n	8026cf4 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 8026c66:	f04f 33ff 	mov.w	r3, #4294967295
 8026c6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026c6c:	f3ef 8305 	mrs	r3, IPSR
 8026c70:	61bb      	str	r3, [r7, #24]
  return(result);
 8026c72:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8026c74:	2b00      	cmp	r3, #0
 8026c76:	d10f      	bne.n	8026c98 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026c78:	f3ef 8310 	mrs	r3, PRIMASK
 8026c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8026c7e:	697b      	ldr	r3, [r7, #20]
 8026c80:	2b00      	cmp	r3, #0
 8026c82:	d105      	bne.n	8026c90 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026c84:	f3ef 8311 	mrs	r3, BASEPRI
 8026c88:	613b      	str	r3, [r7, #16]
  return(result);
 8026c8a:	693b      	ldr	r3, [r7, #16]
 8026c8c:	2b00      	cmp	r3, #0
 8026c8e:	d024      	beq.n	8026cda <osThreadFlagsSet+0x96>
 8026c90:	4b1b      	ldr	r3, [pc, #108]	; (8026d00 <osThreadFlagsSet+0xbc>)
 8026c92:	681b      	ldr	r3, [r3, #0]
 8026c94:	2b02      	cmp	r3, #2
 8026c96:	d120      	bne.n	8026cda <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 8026c98:	2300      	movs	r3, #0
 8026c9a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8026c9c:	f107 0308 	add.w	r3, r7, #8
 8026ca0:	9300      	str	r3, [sp, #0]
 8026ca2:	2300      	movs	r3, #0
 8026ca4:	2201      	movs	r2, #1
 8026ca6:	6839      	ldr	r1, [r7, #0]
 8026ca8:	69f8      	ldr	r0, [r7, #28]
 8026caa:	f002 ff29 	bl	8029b00 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8026cae:	f107 020c 	add.w	r2, r7, #12
 8026cb2:	2300      	movs	r3, #0
 8026cb4:	9300      	str	r3, [sp, #0]
 8026cb6:	4613      	mov	r3, r2
 8026cb8:	2200      	movs	r2, #0
 8026cba:	2100      	movs	r1, #0
 8026cbc:	69f8      	ldr	r0, [r7, #28]
 8026cbe:	f002 ff1f 	bl	8029b00 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8026cc2:	68bb      	ldr	r3, [r7, #8]
 8026cc4:	2b00      	cmp	r3, #0
 8026cc6:	d015      	beq.n	8026cf4 <osThreadFlagsSet+0xb0>
 8026cc8:	4b0e      	ldr	r3, [pc, #56]	; (8026d04 <osThreadFlagsSet+0xc0>)
 8026cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8026cce:	601a      	str	r2, [r3, #0]
 8026cd0:	f3bf 8f4f 	dsb	sy
 8026cd4:	f3bf 8f6f 	isb	sy
 8026cd8:	e00c      	b.n	8026cf4 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8026cda:	2300      	movs	r3, #0
 8026cdc:	2201      	movs	r2, #1
 8026cde:	6839      	ldr	r1, [r7, #0]
 8026ce0:	69f8      	ldr	r0, [r7, #28]
 8026ce2:	f002 fe59 	bl	8029998 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8026ce6:	f107 030c 	add.w	r3, r7, #12
 8026cea:	2200      	movs	r2, #0
 8026cec:	2100      	movs	r1, #0
 8026cee:	69f8      	ldr	r0, [r7, #28]
 8026cf0:	f002 fe52 	bl	8029998 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8026cf4:	68fb      	ldr	r3, [r7, #12]
}
 8026cf6:	4618      	mov	r0, r3
 8026cf8:	3720      	adds	r7, #32
 8026cfa:	46bd      	mov	sp, r7
 8026cfc:	bd80      	pop	{r7, pc}
 8026cfe:	bf00      	nop
 8026d00:	2400149c 	.word	0x2400149c
 8026d04:	e000ed04 	.word	0xe000ed04

08026d08 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8026d08:	b580      	push	{r7, lr}
 8026d0a:	b088      	sub	sp, #32
 8026d0c:	af00      	add	r7, sp, #0
 8026d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026d10:	f3ef 8305 	mrs	r3, IPSR
 8026d14:	617b      	str	r3, [r7, #20]
  return(result);
 8026d16:	697b      	ldr	r3, [r7, #20]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8026d18:	2b00      	cmp	r3, #0
 8026d1a:	d10f      	bne.n	8026d3c <osThreadFlagsClear+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8026d20:	613b      	str	r3, [r7, #16]
  return(result);
 8026d22:	693b      	ldr	r3, [r7, #16]
 8026d24:	2b00      	cmp	r3, #0
 8026d26:	d105      	bne.n	8026d34 <osThreadFlagsClear+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026d28:	f3ef 8311 	mrs	r3, BASEPRI
 8026d2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8026d2e:	68fb      	ldr	r3, [r7, #12]
 8026d30:	2b00      	cmp	r3, #0
 8026d32:	d007      	beq.n	8026d44 <osThreadFlagsClear+0x3c>
 8026d34:	4b1b      	ldr	r3, [pc, #108]	; (8026da4 <osThreadFlagsClear+0x9c>)
 8026d36:	681b      	ldr	r3, [r3, #0]
 8026d38:	2b02      	cmp	r3, #2
 8026d3a:	d103      	bne.n	8026d44 <osThreadFlagsClear+0x3c>
    rflags = (uint32_t)osErrorISR;
 8026d3c:	f06f 0305 	mvn.w	r3, #5
 8026d40:	61fb      	str	r3, [r7, #28]
 8026d42:	e02a      	b.n	8026d9a <osThreadFlagsClear+0x92>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8026d44:	687b      	ldr	r3, [r7, #4]
 8026d46:	2b00      	cmp	r3, #0
 8026d48:	da03      	bge.n	8026d52 <osThreadFlagsClear+0x4a>
    rflags = (uint32_t)osErrorParameter;
 8026d4a:	f06f 0303 	mvn.w	r3, #3
 8026d4e:	61fb      	str	r3, [r7, #28]
 8026d50:	e023      	b.n	8026d9a <osThreadFlagsClear+0x92>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8026d52:	f002 fc31 	bl	80295b8 <xTaskGetCurrentTaskHandle>
 8026d56:	61b8      	str	r0, [r7, #24]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 8026d58:	f107 0308 	add.w	r3, r7, #8
 8026d5c:	2200      	movs	r2, #0
 8026d5e:	2100      	movs	r1, #0
 8026d60:	69b8      	ldr	r0, [r7, #24]
 8026d62:	f002 fe19 	bl	8029998 <xTaskGenericNotify>
 8026d66:	4603      	mov	r3, r0
 8026d68:	2b01      	cmp	r3, #1
 8026d6a:	d113      	bne.n	8026d94 <osThreadFlagsClear+0x8c>
      rflags = cflags;
 8026d6c:	68bb      	ldr	r3, [r7, #8]
 8026d6e:	61fb      	str	r3, [r7, #28]
      cflags &= ~flags;
 8026d70:	687b      	ldr	r3, [r7, #4]
 8026d72:	43da      	mvns	r2, r3
 8026d74:	68bb      	ldr	r3, [r7, #8]
 8026d76:	4013      	ands	r3, r2
 8026d78:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 8026d7a:	68b9      	ldr	r1, [r7, #8]
 8026d7c:	2300      	movs	r3, #0
 8026d7e:	2203      	movs	r2, #3
 8026d80:	69b8      	ldr	r0, [r7, #24]
 8026d82:	f002 fe09 	bl	8029998 <xTaskGenericNotify>
 8026d86:	4603      	mov	r3, r0
 8026d88:	2b01      	cmp	r3, #1
 8026d8a:	d006      	beq.n	8026d9a <osThreadFlagsClear+0x92>
        rflags = (uint32_t)osError;
 8026d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8026d90:	61fb      	str	r3, [r7, #28]
 8026d92:	e002      	b.n	8026d9a <osThreadFlagsClear+0x92>
      }
    }
    else {
      rflags = (uint32_t)osError;
 8026d94:	f04f 33ff 	mov.w	r3, #4294967295
 8026d98:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 8026d9a:	69fb      	ldr	r3, [r7, #28]
}
 8026d9c:	4618      	mov	r0, r3
 8026d9e:	3720      	adds	r7, #32
 8026da0:	46bd      	mov	sp, r7
 8026da2:	bd80      	pop	{r7, pc}
 8026da4:	2400149c 	.word	0x2400149c

08026da8 <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 8026da8:	b580      	push	{r7, lr}
 8026daa:	b086      	sub	sp, #24
 8026dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026dae:	f3ef 8305 	mrs	r3, IPSR
 8026db2:	613b      	str	r3, [r7, #16]
  return(result);
 8026db4:	693b      	ldr	r3, [r7, #16]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 8026db6:	2b00      	cmp	r3, #0
 8026db8:	d10f      	bne.n	8026dda <osThreadFlagsGet+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026dba:	f3ef 8310 	mrs	r3, PRIMASK
 8026dbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8026dc0:	68fb      	ldr	r3, [r7, #12]
 8026dc2:	2b00      	cmp	r3, #0
 8026dc4:	d105      	bne.n	8026dd2 <osThreadFlagsGet+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8026dca:	60bb      	str	r3, [r7, #8]
  return(result);
 8026dcc:	68bb      	ldr	r3, [r7, #8]
 8026dce:	2b00      	cmp	r3, #0
 8026dd0:	d007      	beq.n	8026de2 <osThreadFlagsGet+0x3a>
 8026dd2:	4b0e      	ldr	r3, [pc, #56]	; (8026e0c <osThreadFlagsGet+0x64>)
 8026dd4:	681b      	ldr	r3, [r3, #0]
 8026dd6:	2b02      	cmp	r3, #2
 8026dd8:	d103      	bne.n	8026de2 <osThreadFlagsGet+0x3a>
    rflags = (uint32_t)osErrorISR;
 8026dda:	f06f 0305 	mvn.w	r3, #5
 8026dde:	607b      	str	r3, [r7, #4]
 8026de0:	e00e      	b.n	8026e00 <osThreadFlagsGet+0x58>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8026de2:	f002 fbe9 	bl	80295b8 <xTaskGetCurrentTaskHandle>
 8026de6:	6178      	str	r0, [r7, #20]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 8026de8:	1d3b      	adds	r3, r7, #4
 8026dea:	2200      	movs	r2, #0
 8026dec:	2100      	movs	r1, #0
 8026dee:	6978      	ldr	r0, [r7, #20]
 8026df0:	f002 fdd2 	bl	8029998 <xTaskGenericNotify>
 8026df4:	4603      	mov	r3, r0
 8026df6:	2b01      	cmp	r3, #1
 8026df8:	d002      	beq.n	8026e00 <osThreadFlagsGet+0x58>
      rflags = (uint32_t)osError;
 8026dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8026dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 8026e00:	687b      	ldr	r3, [r7, #4]
}
 8026e02:	4618      	mov	r0, r3
 8026e04:	3718      	adds	r7, #24
 8026e06:	46bd      	mov	sp, r7
 8026e08:	bd80      	pop	{r7, pc}
 8026e0a:	bf00      	nop
 8026e0c:	2400149c 	.word	0x2400149c

08026e10 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8026e10:	b580      	push	{r7, lr}
 8026e12:	b08e      	sub	sp, #56	; 0x38
 8026e14:	af00      	add	r7, sp, #0
 8026e16:	60f8      	str	r0, [r7, #12]
 8026e18:	60b9      	str	r1, [r7, #8]
 8026e1a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026e1c:	f3ef 8305 	mrs	r3, IPSR
 8026e20:	61fb      	str	r3, [r7, #28]
  return(result);
 8026e22:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8026e24:	2b00      	cmp	r3, #0
 8026e26:	d10f      	bne.n	8026e48 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026e28:	f3ef 8310 	mrs	r3, PRIMASK
 8026e2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8026e2e:	69bb      	ldr	r3, [r7, #24]
 8026e30:	2b00      	cmp	r3, #0
 8026e32:	d105      	bne.n	8026e40 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026e34:	f3ef 8311 	mrs	r3, BASEPRI
 8026e38:	617b      	str	r3, [r7, #20]
  return(result);
 8026e3a:	697b      	ldr	r3, [r7, #20]
 8026e3c:	2b00      	cmp	r3, #0
 8026e3e:	d007      	beq.n	8026e50 <osThreadFlagsWait+0x40>
 8026e40:	4b3c      	ldr	r3, [pc, #240]	; (8026f34 <osThreadFlagsWait+0x124>)
 8026e42:	681b      	ldr	r3, [r3, #0]
 8026e44:	2b02      	cmp	r3, #2
 8026e46:	d103      	bne.n	8026e50 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8026e48:	f06f 0305 	mvn.w	r3, #5
 8026e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8026e4e:	e06b      	b.n	8026f28 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8026e50:	68fb      	ldr	r3, [r7, #12]
 8026e52:	2b00      	cmp	r3, #0
 8026e54:	da03      	bge.n	8026e5e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8026e56:	f06f 0303 	mvn.w	r3, #3
 8026e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8026e5c:	e064      	b.n	8026f28 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8026e5e:	68bb      	ldr	r3, [r7, #8]
 8026e60:	f003 0302 	and.w	r3, r3, #2
 8026e64:	2b00      	cmp	r3, #0
 8026e66:	d002      	beq.n	8026e6e <osThreadFlagsWait+0x5e>
      clear = 0U;
 8026e68:	2300      	movs	r3, #0
 8026e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8026e6c:	e001      	b.n	8026e72 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8026e6e:	68fb      	ldr	r3, [r7, #12]
 8026e70:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8026e72:	2300      	movs	r3, #0
 8026e74:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8026e76:	687b      	ldr	r3, [r7, #4]
 8026e78:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8026e7a:	f002 f863 	bl	8028f44 <xTaskGetTickCount>
 8026e7e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8026e80:	f107 0210 	add.w	r2, r7, #16
 8026e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8026e88:	2000      	movs	r0, #0
 8026e8a:	f002 fd2b 	bl	80298e4 <xTaskNotifyWait>
 8026e8e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8026e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026e92:	2b01      	cmp	r3, #1
 8026e94:	d137      	bne.n	8026f06 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8026e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026e98:	68fb      	ldr	r3, [r7, #12]
 8026e9a:	4013      	ands	r3, r2
 8026e9c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8026e9e:	693b      	ldr	r3, [r7, #16]
 8026ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026ea2:	4313      	orrs	r3, r2
 8026ea4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8026ea6:	68bb      	ldr	r3, [r7, #8]
 8026ea8:	f003 0301 	and.w	r3, r3, #1
 8026eac:	2b00      	cmp	r3, #0
 8026eae:	d00c      	beq.n	8026eca <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8026eb0:	68fa      	ldr	r2, [r7, #12]
 8026eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026eb4:	4013      	ands	r3, r2
 8026eb6:	68fa      	ldr	r2, [r7, #12]
 8026eb8:	429a      	cmp	r2, r3
 8026eba:	d032      	beq.n	8026f22 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8026ebc:	687b      	ldr	r3, [r7, #4]
 8026ebe:	2b00      	cmp	r3, #0
 8026ec0:	d10f      	bne.n	8026ee2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8026ec2:	f06f 0302 	mvn.w	r3, #2
 8026ec6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8026ec8:	e02e      	b.n	8026f28 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8026eca:	68fa      	ldr	r2, [r7, #12]
 8026ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026ece:	4013      	ands	r3, r2
 8026ed0:	2b00      	cmp	r3, #0
 8026ed2:	d128      	bne.n	8026f26 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8026ed4:	687b      	ldr	r3, [r7, #4]
 8026ed6:	2b00      	cmp	r3, #0
 8026ed8:	d103      	bne.n	8026ee2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8026eda:	f06f 0302 	mvn.w	r3, #2
 8026ede:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8026ee0:	e022      	b.n	8026f28 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8026ee2:	f002 f82f 	bl	8028f44 <xTaskGetTickCount>
 8026ee6:	4602      	mov	r2, r0
 8026ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026eea:	1ad3      	subs	r3, r2, r3
 8026eec:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8026eee:	6a3a      	ldr	r2, [r7, #32]
 8026ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026ef2:	429a      	cmp	r2, r3
 8026ef4:	d902      	bls.n	8026efc <osThreadFlagsWait+0xec>
          tout  = 0;
 8026ef6:	2300      	movs	r3, #0
 8026ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026efa:	e00e      	b.n	8026f1a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8026efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026efe:	6a3b      	ldr	r3, [r7, #32]
 8026f00:	1ad3      	subs	r3, r2, r3
 8026f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026f04:	e009      	b.n	8026f1a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8026f06:	687b      	ldr	r3, [r7, #4]
 8026f08:	2b00      	cmp	r3, #0
 8026f0a:	d103      	bne.n	8026f14 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8026f0c:	f06f 0302 	mvn.w	r3, #2
 8026f10:	637b      	str	r3, [r7, #52]	; 0x34
 8026f12:	e002      	b.n	8026f1a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8026f14:	f06f 0301 	mvn.w	r3, #1
 8026f18:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8026f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026f1c:	2b00      	cmp	r3, #0
 8026f1e:	d1af      	bne.n	8026e80 <osThreadFlagsWait+0x70>
 8026f20:	e002      	b.n	8026f28 <osThreadFlagsWait+0x118>
            break;
 8026f22:	bf00      	nop
 8026f24:	e000      	b.n	8026f28 <osThreadFlagsWait+0x118>
            break;
 8026f26:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8026f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8026f2a:	4618      	mov	r0, r3
 8026f2c:	3738      	adds	r7, #56	; 0x38
 8026f2e:	46bd      	mov	sp, r7
 8026f30:	bd80      	pop	{r7, pc}
 8026f32:	bf00      	nop
 8026f34:	2400149c 	.word	0x2400149c

08026f38 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8026f38:	b580      	push	{r7, lr}
 8026f3a:	b086      	sub	sp, #24
 8026f3c:	af00      	add	r7, sp, #0
 8026f3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026f40:	f3ef 8305 	mrs	r3, IPSR
 8026f44:	613b      	str	r3, [r7, #16]
  return(result);
 8026f46:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8026f48:	2b00      	cmp	r3, #0
 8026f4a:	d10f      	bne.n	8026f6c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8026f50:	60fb      	str	r3, [r7, #12]
  return(result);
 8026f52:	68fb      	ldr	r3, [r7, #12]
 8026f54:	2b00      	cmp	r3, #0
 8026f56:	d105      	bne.n	8026f64 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026f58:	f3ef 8311 	mrs	r3, BASEPRI
 8026f5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8026f5e:	68bb      	ldr	r3, [r7, #8]
 8026f60:	2b00      	cmp	r3, #0
 8026f62:	d007      	beq.n	8026f74 <osDelay+0x3c>
 8026f64:	4b0a      	ldr	r3, [pc, #40]	; (8026f90 <osDelay+0x58>)
 8026f66:	681b      	ldr	r3, [r3, #0]
 8026f68:	2b02      	cmp	r3, #2
 8026f6a:	d103      	bne.n	8026f74 <osDelay+0x3c>
    stat = osErrorISR;
 8026f6c:	f06f 0305 	mvn.w	r3, #5
 8026f70:	617b      	str	r3, [r7, #20]
 8026f72:	e007      	b.n	8026f84 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8026f74:	2300      	movs	r3, #0
 8026f76:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8026f78:	687b      	ldr	r3, [r7, #4]
 8026f7a:	2b00      	cmp	r3, #0
 8026f7c:	d002      	beq.n	8026f84 <osDelay+0x4c>
      vTaskDelay(ticks);
 8026f7e:	6878      	ldr	r0, [r7, #4]
 8026f80:	f001 fe9e 	bl	8028cc0 <vTaskDelay>
    }
  }

  return (stat);
 8026f84:	697b      	ldr	r3, [r7, #20]
}
 8026f86:	4618      	mov	r0, r3
 8026f88:	3718      	adds	r7, #24
 8026f8a:	46bd      	mov	sp, r7
 8026f8c:	bd80      	pop	{r7, pc}
 8026f8e:	bf00      	nop
 8026f90:	2400149c 	.word	0x2400149c

08026f94 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8026f94:	b580      	push	{r7, lr}
 8026f96:	b088      	sub	sp, #32
 8026f98:	af00      	add	r7, sp, #0
 8026f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8026f9c:	f3ef 8305 	mrs	r3, IPSR
 8026fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8026fa2:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8026fa4:	2b00      	cmp	r3, #0
 8026fa6:	d10f      	bne.n	8026fc8 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8026fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8026fac:	613b      	str	r3, [r7, #16]
  return(result);
 8026fae:	693b      	ldr	r3, [r7, #16]
 8026fb0:	2b00      	cmp	r3, #0
 8026fb2:	d105      	bne.n	8026fc0 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8026fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8026fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8026fba:	68fb      	ldr	r3, [r7, #12]
 8026fbc:	2b00      	cmp	r3, #0
 8026fbe:	d007      	beq.n	8026fd0 <osDelayUntil+0x3c>
 8026fc0:	4b13      	ldr	r3, [pc, #76]	; (8027010 <osDelayUntil+0x7c>)
 8026fc2:	681b      	ldr	r3, [r3, #0]
 8026fc4:	2b02      	cmp	r3, #2
 8026fc6:	d103      	bne.n	8026fd0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8026fc8:	f06f 0305 	mvn.w	r3, #5
 8026fcc:	61fb      	str	r3, [r7, #28]
 8026fce:	e019      	b.n	8027004 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8026fd0:	2300      	movs	r3, #0
 8026fd2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8026fd4:	f001 ffb6 	bl	8028f44 <xTaskGetTickCount>
 8026fd8:	4603      	mov	r3, r0
 8026fda:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8026fdc:	68bb      	ldr	r3, [r7, #8]
 8026fde:	687a      	ldr	r2, [r7, #4]
 8026fe0:	1ad3      	subs	r3, r2, r3
 8026fe2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8026fe4:	69bb      	ldr	r3, [r7, #24]
 8026fe6:	2b00      	cmp	r3, #0
 8026fe8:	d009      	beq.n	8026ffe <osDelayUntil+0x6a>
 8026fea:	69bb      	ldr	r3, [r7, #24]
 8026fec:	2b00      	cmp	r3, #0
 8026fee:	db06      	blt.n	8026ffe <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8026ff0:	f107 0308 	add.w	r3, r7, #8
 8026ff4:	69b9      	ldr	r1, [r7, #24]
 8026ff6:	4618      	mov	r0, r3
 8026ff8:	f001 fde8 	bl	8028bcc <vTaskDelayUntil>
 8026ffc:	e002      	b.n	8027004 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8026ffe:	f06f 0303 	mvn.w	r3, #3
 8027002:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8027004:	69fb      	ldr	r3, [r7, #28]
}
 8027006:	4618      	mov	r0, r3
 8027008:	3720      	adds	r7, #32
 802700a:	46bd      	mov	sp, r7
 802700c:	bd80      	pop	{r7, pc}
 802700e:	bf00      	nop
 8027010:	2400149c 	.word	0x2400149c

08027014 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8027014:	b580      	push	{r7, lr}
 8027016:	b08c      	sub	sp, #48	; 0x30
 8027018:	af02      	add	r7, sp, #8
 802701a:	60f8      	str	r0, [r7, #12]
 802701c:	60b9      	str	r1, [r7, #8]
 802701e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8027020:	2300      	movs	r3, #0
 8027022:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8027024:	f3ef 8305 	mrs	r3, IPSR
 8027028:	61bb      	str	r3, [r7, #24]
  return(result);
 802702a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 802702c:	2b00      	cmp	r3, #0
 802702e:	f040 8087 	bne.w	8027140 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8027032:	f3ef 8310 	mrs	r3, PRIMASK
 8027036:	617b      	str	r3, [r7, #20]
  return(result);
 8027038:	697b      	ldr	r3, [r7, #20]
 802703a:	2b00      	cmp	r3, #0
 802703c:	d105      	bne.n	802704a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802703e:	f3ef 8311 	mrs	r3, BASEPRI
 8027042:	613b      	str	r3, [r7, #16]
  return(result);
 8027044:	693b      	ldr	r3, [r7, #16]
 8027046:	2b00      	cmp	r3, #0
 8027048:	d003      	beq.n	8027052 <osSemaphoreNew+0x3e>
 802704a:	4b40      	ldr	r3, [pc, #256]	; (802714c <osSemaphoreNew+0x138>)
 802704c:	681b      	ldr	r3, [r3, #0]
 802704e:	2b02      	cmp	r3, #2
 8027050:	d076      	beq.n	8027140 <osSemaphoreNew+0x12c>
 8027052:	68fb      	ldr	r3, [r7, #12]
 8027054:	2b00      	cmp	r3, #0
 8027056:	d073      	beq.n	8027140 <osSemaphoreNew+0x12c>
 8027058:	68ba      	ldr	r2, [r7, #8]
 802705a:	68fb      	ldr	r3, [r7, #12]
 802705c:	429a      	cmp	r2, r3
 802705e:	d86f      	bhi.n	8027140 <osSemaphoreNew+0x12c>
    mem = -1;
 8027060:	f04f 33ff 	mov.w	r3, #4294967295
 8027064:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8027066:	687b      	ldr	r3, [r7, #4]
 8027068:	2b00      	cmp	r3, #0
 802706a:	d015      	beq.n	8027098 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 802706c:	687b      	ldr	r3, [r7, #4]
 802706e:	689b      	ldr	r3, [r3, #8]
 8027070:	2b00      	cmp	r3, #0
 8027072:	d006      	beq.n	8027082 <osSemaphoreNew+0x6e>
 8027074:	687b      	ldr	r3, [r7, #4]
 8027076:	68db      	ldr	r3, [r3, #12]
 8027078:	2b4f      	cmp	r3, #79	; 0x4f
 802707a:	d902      	bls.n	8027082 <osSemaphoreNew+0x6e>
        mem = 1;
 802707c:	2301      	movs	r3, #1
 802707e:	623b      	str	r3, [r7, #32]
 8027080:	e00c      	b.n	802709c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8027082:	687b      	ldr	r3, [r7, #4]
 8027084:	689b      	ldr	r3, [r3, #8]
 8027086:	2b00      	cmp	r3, #0
 8027088:	d108      	bne.n	802709c <osSemaphoreNew+0x88>
 802708a:	687b      	ldr	r3, [r7, #4]
 802708c:	68db      	ldr	r3, [r3, #12]
 802708e:	2b00      	cmp	r3, #0
 8027090:	d104      	bne.n	802709c <osSemaphoreNew+0x88>
          mem = 0;
 8027092:	2300      	movs	r3, #0
 8027094:	623b      	str	r3, [r7, #32]
 8027096:	e001      	b.n	802709c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8027098:	2300      	movs	r3, #0
 802709a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 802709c:	6a3b      	ldr	r3, [r7, #32]
 802709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80270a2:	d04d      	beq.n	8027140 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80270a4:	68fb      	ldr	r3, [r7, #12]
 80270a6:	2b01      	cmp	r3, #1
 80270a8:	d129      	bne.n	80270fe <osSemaphoreNew+0xea>
        if (mem == 1) {
 80270aa:	6a3b      	ldr	r3, [r7, #32]
 80270ac:	2b01      	cmp	r3, #1
 80270ae:	d10b      	bne.n	80270c8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80270b0:	687b      	ldr	r3, [r7, #4]
 80270b2:	689a      	ldr	r2, [r3, #8]
 80270b4:	2303      	movs	r3, #3
 80270b6:	9300      	str	r3, [sp, #0]
 80270b8:	4613      	mov	r3, r2
 80270ba:	2200      	movs	r2, #0
 80270bc:	2100      	movs	r1, #0
 80270be:	2001      	movs	r0, #1
 80270c0:	f000 fc3e 	bl	8027940 <xQueueGenericCreateStatic>
 80270c4:	6278      	str	r0, [r7, #36]	; 0x24
 80270c6:	e005      	b.n	80270d4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80270c8:	2203      	movs	r2, #3
 80270ca:	2100      	movs	r1, #0
 80270cc:	2001      	movs	r0, #1
 80270ce:	f000 fcaa 	bl	8027a26 <xQueueGenericCreate>
 80270d2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80270d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80270d6:	2b00      	cmp	r3, #0
 80270d8:	d022      	beq.n	8027120 <osSemaphoreNew+0x10c>
 80270da:	68bb      	ldr	r3, [r7, #8]
 80270dc:	2b00      	cmp	r3, #0
 80270de:	d01f      	beq.n	8027120 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80270e0:	2300      	movs	r3, #0
 80270e2:	2200      	movs	r2, #0
 80270e4:	2100      	movs	r1, #0
 80270e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80270e8:	f000 fd66 	bl	8027bb8 <xQueueGenericSend>
 80270ec:	4603      	mov	r3, r0
 80270ee:	2b01      	cmp	r3, #1
 80270f0:	d016      	beq.n	8027120 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80270f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80270f4:	f001 f9fb 	bl	80284ee <vQueueDelete>
            hSemaphore = NULL;
 80270f8:	2300      	movs	r3, #0
 80270fa:	627b      	str	r3, [r7, #36]	; 0x24
 80270fc:	e010      	b.n	8027120 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80270fe:	6a3b      	ldr	r3, [r7, #32]
 8027100:	2b01      	cmp	r3, #1
 8027102:	d108      	bne.n	8027116 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8027104:	687b      	ldr	r3, [r7, #4]
 8027106:	689b      	ldr	r3, [r3, #8]
 8027108:	461a      	mov	r2, r3
 802710a:	68b9      	ldr	r1, [r7, #8]
 802710c:	68f8      	ldr	r0, [r7, #12]
 802710e:	f000 fcec 	bl	8027aea <xQueueCreateCountingSemaphoreStatic>
 8027112:	6278      	str	r0, [r7, #36]	; 0x24
 8027114:	e004      	b.n	8027120 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8027116:	68b9      	ldr	r1, [r7, #8]
 8027118:	68f8      	ldr	r0, [r7, #12]
 802711a:	f000 fd1b 	bl	8027b54 <xQueueCreateCountingSemaphore>
 802711e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8027120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027122:	2b00      	cmp	r3, #0
 8027124:	d00c      	beq.n	8027140 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8027126:	687b      	ldr	r3, [r7, #4]
 8027128:	2b00      	cmp	r3, #0
 802712a:	d003      	beq.n	8027134 <osSemaphoreNew+0x120>
          name = attr->name;
 802712c:	687b      	ldr	r3, [r7, #4]
 802712e:	681b      	ldr	r3, [r3, #0]
 8027130:	61fb      	str	r3, [r7, #28]
 8027132:	e001      	b.n	8027138 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8027134:	2300      	movs	r3, #0
 8027136:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8027138:	69f9      	ldr	r1, [r7, #28]
 802713a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802713c:	f001 fb22 	bl	8028784 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8027140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8027142:	4618      	mov	r0, r3
 8027144:	3728      	adds	r7, #40	; 0x28
 8027146:	46bd      	mov	sp, r7
 8027148:	bd80      	pop	{r7, pc}
 802714a:	bf00      	nop
 802714c:	2400149c 	.word	0x2400149c

08027150 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8027150:	b580      	push	{r7, lr}
 8027152:	b088      	sub	sp, #32
 8027154:	af00      	add	r7, sp, #0
 8027156:	6078      	str	r0, [r7, #4]
 8027158:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 802715a:	687b      	ldr	r3, [r7, #4]
 802715c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 802715e:	2300      	movs	r3, #0
 8027160:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8027162:	69bb      	ldr	r3, [r7, #24]
 8027164:	2b00      	cmp	r3, #0
 8027166:	d103      	bne.n	8027170 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8027168:	f06f 0303 	mvn.w	r3, #3
 802716c:	61fb      	str	r3, [r7, #28]
 802716e:	e04b      	b.n	8027208 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8027170:	f3ef 8305 	mrs	r3, IPSR
 8027174:	617b      	str	r3, [r7, #20]
  return(result);
 8027176:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8027178:	2b00      	cmp	r3, #0
 802717a:	d10f      	bne.n	802719c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802717c:	f3ef 8310 	mrs	r3, PRIMASK
 8027180:	613b      	str	r3, [r7, #16]
  return(result);
 8027182:	693b      	ldr	r3, [r7, #16]
 8027184:	2b00      	cmp	r3, #0
 8027186:	d105      	bne.n	8027194 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8027188:	f3ef 8311 	mrs	r3, BASEPRI
 802718c:	60fb      	str	r3, [r7, #12]
  return(result);
 802718e:	68fb      	ldr	r3, [r7, #12]
 8027190:	2b00      	cmp	r3, #0
 8027192:	d026      	beq.n	80271e2 <osSemaphoreAcquire+0x92>
 8027194:	4b1f      	ldr	r3, [pc, #124]	; (8027214 <osSemaphoreAcquire+0xc4>)
 8027196:	681b      	ldr	r3, [r3, #0]
 8027198:	2b02      	cmp	r3, #2
 802719a:	d122      	bne.n	80271e2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 802719c:	683b      	ldr	r3, [r7, #0]
 802719e:	2b00      	cmp	r3, #0
 80271a0:	d003      	beq.n	80271aa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80271a2:	f06f 0303 	mvn.w	r3, #3
 80271a6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80271a8:	e02d      	b.n	8027206 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80271aa:	2300      	movs	r3, #0
 80271ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80271ae:	f107 0308 	add.w	r3, r7, #8
 80271b2:	461a      	mov	r2, r3
 80271b4:	2100      	movs	r1, #0
 80271b6:	69b8      	ldr	r0, [r7, #24]
 80271b8:	f001 f8fa 	bl	80283b0 <xQueueReceiveFromISR>
 80271bc:	4603      	mov	r3, r0
 80271be:	2b01      	cmp	r3, #1
 80271c0:	d003      	beq.n	80271ca <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80271c2:	f06f 0302 	mvn.w	r3, #2
 80271c6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80271c8:	e01d      	b.n	8027206 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80271ca:	68bb      	ldr	r3, [r7, #8]
 80271cc:	2b00      	cmp	r3, #0
 80271ce:	d01a      	beq.n	8027206 <osSemaphoreAcquire+0xb6>
 80271d0:	4b11      	ldr	r3, [pc, #68]	; (8027218 <osSemaphoreAcquire+0xc8>)
 80271d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80271d6:	601a      	str	r2, [r3, #0]
 80271d8:	f3bf 8f4f 	dsb	sy
 80271dc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80271e0:	e011      	b.n	8027206 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80271e2:	6839      	ldr	r1, [r7, #0]
 80271e4:	69b8      	ldr	r0, [r7, #24]
 80271e6:	f000 ffdb 	bl	80281a0 <xQueueSemaphoreTake>
 80271ea:	4603      	mov	r3, r0
 80271ec:	2b01      	cmp	r3, #1
 80271ee:	d00b      	beq.n	8027208 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80271f0:	683b      	ldr	r3, [r7, #0]
 80271f2:	2b00      	cmp	r3, #0
 80271f4:	d003      	beq.n	80271fe <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80271f6:	f06f 0301 	mvn.w	r3, #1
 80271fa:	61fb      	str	r3, [r7, #28]
 80271fc:	e004      	b.n	8027208 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80271fe:	f06f 0302 	mvn.w	r3, #2
 8027202:	61fb      	str	r3, [r7, #28]
 8027204:	e000      	b.n	8027208 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8027206:	bf00      	nop
      }
    }
  }

  return (stat);
 8027208:	69fb      	ldr	r3, [r7, #28]
}
 802720a:	4618      	mov	r0, r3
 802720c:	3720      	adds	r7, #32
 802720e:	46bd      	mov	sp, r7
 8027210:	bd80      	pop	{r7, pc}
 8027212:	bf00      	nop
 8027214:	2400149c 	.word	0x2400149c
 8027218:	e000ed04 	.word	0xe000ed04

0802721c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 802721c:	b580      	push	{r7, lr}
 802721e:	b088      	sub	sp, #32
 8027220:	af00      	add	r7, sp, #0
 8027222:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8027224:	687b      	ldr	r3, [r7, #4]
 8027226:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8027228:	2300      	movs	r3, #0
 802722a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 802722c:	69bb      	ldr	r3, [r7, #24]
 802722e:	2b00      	cmp	r3, #0
 8027230:	d103      	bne.n	802723a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8027232:	f06f 0303 	mvn.w	r3, #3
 8027236:	61fb      	str	r3, [r7, #28]
 8027238:	e03e      	b.n	80272b8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802723a:	f3ef 8305 	mrs	r3, IPSR
 802723e:	617b      	str	r3, [r7, #20]
  return(result);
 8027240:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8027242:	2b00      	cmp	r3, #0
 8027244:	d10f      	bne.n	8027266 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8027246:	f3ef 8310 	mrs	r3, PRIMASK
 802724a:	613b      	str	r3, [r7, #16]
  return(result);
 802724c:	693b      	ldr	r3, [r7, #16]
 802724e:	2b00      	cmp	r3, #0
 8027250:	d105      	bne.n	802725e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8027252:	f3ef 8311 	mrs	r3, BASEPRI
 8027256:	60fb      	str	r3, [r7, #12]
  return(result);
 8027258:	68fb      	ldr	r3, [r7, #12]
 802725a:	2b00      	cmp	r3, #0
 802725c:	d01e      	beq.n	802729c <osSemaphoreRelease+0x80>
 802725e:	4b19      	ldr	r3, [pc, #100]	; (80272c4 <osSemaphoreRelease+0xa8>)
 8027260:	681b      	ldr	r3, [r3, #0]
 8027262:	2b02      	cmp	r3, #2
 8027264:	d11a      	bne.n	802729c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8027266:	2300      	movs	r3, #0
 8027268:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 802726a:	f107 0308 	add.w	r3, r7, #8
 802726e:	4619      	mov	r1, r3
 8027270:	69b8      	ldr	r0, [r7, #24]
 8027272:	f000 fe2f 	bl	8027ed4 <xQueueGiveFromISR>
 8027276:	4603      	mov	r3, r0
 8027278:	2b01      	cmp	r3, #1
 802727a:	d003      	beq.n	8027284 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 802727c:	f06f 0302 	mvn.w	r3, #2
 8027280:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8027282:	e018      	b.n	80272b6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8027284:	68bb      	ldr	r3, [r7, #8]
 8027286:	2b00      	cmp	r3, #0
 8027288:	d015      	beq.n	80272b6 <osSemaphoreRelease+0x9a>
 802728a:	4b0f      	ldr	r3, [pc, #60]	; (80272c8 <osSemaphoreRelease+0xac>)
 802728c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027290:	601a      	str	r2, [r3, #0]
 8027292:	f3bf 8f4f 	dsb	sy
 8027296:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 802729a:	e00c      	b.n	80272b6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 802729c:	2300      	movs	r3, #0
 802729e:	2200      	movs	r2, #0
 80272a0:	2100      	movs	r1, #0
 80272a2:	69b8      	ldr	r0, [r7, #24]
 80272a4:	f000 fc88 	bl	8027bb8 <xQueueGenericSend>
 80272a8:	4603      	mov	r3, r0
 80272aa:	2b01      	cmp	r3, #1
 80272ac:	d004      	beq.n	80272b8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80272ae:	f06f 0302 	mvn.w	r3, #2
 80272b2:	61fb      	str	r3, [r7, #28]
 80272b4:	e000      	b.n	80272b8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80272b6:	bf00      	nop
    }
  }

  return (stat);
 80272b8:	69fb      	ldr	r3, [r7, #28]
}
 80272ba:	4618      	mov	r0, r3
 80272bc:	3720      	adds	r7, #32
 80272be:	46bd      	mov	sp, r7
 80272c0:	bd80      	pop	{r7, pc}
 80272c2:	bf00      	nop
 80272c4:	2400149c 	.word	0x2400149c
 80272c8:	e000ed04 	.word	0xe000ed04

080272cc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80272cc:	b580      	push	{r7, lr}
 80272ce:	b088      	sub	sp, #32
 80272d0:	af00      	add	r7, sp, #0
 80272d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80272d4:	687b      	ldr	r3, [r7, #4]
 80272d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80272d8:	f3ef 8305 	mrs	r3, IPSR
 80272dc:	617b      	str	r3, [r7, #20]
  return(result);
 80272de:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80272e0:	2b00      	cmp	r3, #0
 80272e2:	d10f      	bne.n	8027304 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80272e4:	f3ef 8310 	mrs	r3, PRIMASK
 80272e8:	613b      	str	r3, [r7, #16]
  return(result);
 80272ea:	693b      	ldr	r3, [r7, #16]
 80272ec:	2b00      	cmp	r3, #0
 80272ee:	d105      	bne.n	80272fc <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80272f0:	f3ef 8311 	mrs	r3, BASEPRI
 80272f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80272f6:	68fb      	ldr	r3, [r7, #12]
 80272f8:	2b00      	cmp	r3, #0
 80272fa:	d007      	beq.n	802730c <osSemaphoreDelete+0x40>
 80272fc:	4b0d      	ldr	r3, [pc, #52]	; (8027334 <osSemaphoreDelete+0x68>)
 80272fe:	681b      	ldr	r3, [r3, #0]
 8027300:	2b02      	cmp	r3, #2
 8027302:	d103      	bne.n	802730c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8027304:	f06f 0305 	mvn.w	r3, #5
 8027308:	61fb      	str	r3, [r7, #28]
 802730a:	e00e      	b.n	802732a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 802730c:	69bb      	ldr	r3, [r7, #24]
 802730e:	2b00      	cmp	r3, #0
 8027310:	d103      	bne.n	802731a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8027312:	f06f 0303 	mvn.w	r3, #3
 8027316:	61fb      	str	r3, [r7, #28]
 8027318:	e007      	b.n	802732a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 802731a:	69b8      	ldr	r0, [r7, #24]
 802731c:	f001 fa5a 	bl	80287d4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8027320:	2300      	movs	r3, #0
 8027322:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8027324:	69b8      	ldr	r0, [r7, #24]
 8027326:	f001 f8e2 	bl	80284ee <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 802732a:	69fb      	ldr	r3, [r7, #28]
}
 802732c:	4618      	mov	r0, r3
 802732e:	3720      	adds	r7, #32
 8027330:	46bd      	mov	sp, r7
 8027332:	bd80      	pop	{r7, pc}
 8027334:	2400149c 	.word	0x2400149c

08027338 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8027338:	b580      	push	{r7, lr}
 802733a:	b08c      	sub	sp, #48	; 0x30
 802733c:	af02      	add	r7, sp, #8
 802733e:	60f8      	str	r0, [r7, #12]
 8027340:	60b9      	str	r1, [r7, #8]
 8027342:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8027344:	2300      	movs	r3, #0
 8027346:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8027348:	f3ef 8305 	mrs	r3, IPSR
 802734c:	61bb      	str	r3, [r7, #24]
  return(result);
 802734e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8027350:	2b00      	cmp	r3, #0
 8027352:	d170      	bne.n	8027436 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8027354:	f3ef 8310 	mrs	r3, PRIMASK
 8027358:	617b      	str	r3, [r7, #20]
  return(result);
 802735a:	697b      	ldr	r3, [r7, #20]
 802735c:	2b00      	cmp	r3, #0
 802735e:	d105      	bne.n	802736c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8027360:	f3ef 8311 	mrs	r3, BASEPRI
 8027364:	613b      	str	r3, [r7, #16]
  return(result);
 8027366:	693b      	ldr	r3, [r7, #16]
 8027368:	2b00      	cmp	r3, #0
 802736a:	d003      	beq.n	8027374 <osMessageQueueNew+0x3c>
 802736c:	4b34      	ldr	r3, [pc, #208]	; (8027440 <osMessageQueueNew+0x108>)
 802736e:	681b      	ldr	r3, [r3, #0]
 8027370:	2b02      	cmp	r3, #2
 8027372:	d060      	beq.n	8027436 <osMessageQueueNew+0xfe>
 8027374:	68fb      	ldr	r3, [r7, #12]
 8027376:	2b00      	cmp	r3, #0
 8027378:	d05d      	beq.n	8027436 <osMessageQueueNew+0xfe>
 802737a:	68bb      	ldr	r3, [r7, #8]
 802737c:	2b00      	cmp	r3, #0
 802737e:	d05a      	beq.n	8027436 <osMessageQueueNew+0xfe>
    mem = -1;
 8027380:	f04f 33ff 	mov.w	r3, #4294967295
 8027384:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	2b00      	cmp	r3, #0
 802738a:	d029      	beq.n	80273e0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 802738c:	687b      	ldr	r3, [r7, #4]
 802738e:	689b      	ldr	r3, [r3, #8]
 8027390:	2b00      	cmp	r3, #0
 8027392:	d012      	beq.n	80273ba <osMessageQueueNew+0x82>
 8027394:	687b      	ldr	r3, [r7, #4]
 8027396:	68db      	ldr	r3, [r3, #12]
 8027398:	2b4f      	cmp	r3, #79	; 0x4f
 802739a:	d90e      	bls.n	80273ba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 802739c:	687b      	ldr	r3, [r7, #4]
 802739e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80273a0:	2b00      	cmp	r3, #0
 80273a2:	d00a      	beq.n	80273ba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80273a4:	687b      	ldr	r3, [r7, #4]
 80273a6:	695a      	ldr	r2, [r3, #20]
 80273a8:	68fb      	ldr	r3, [r7, #12]
 80273aa:	68b9      	ldr	r1, [r7, #8]
 80273ac:	fb01 f303 	mul.w	r3, r1, r3
 80273b0:	429a      	cmp	r2, r3
 80273b2:	d302      	bcc.n	80273ba <osMessageQueueNew+0x82>
        mem = 1;
 80273b4:	2301      	movs	r3, #1
 80273b6:	623b      	str	r3, [r7, #32]
 80273b8:	e014      	b.n	80273e4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80273ba:	687b      	ldr	r3, [r7, #4]
 80273bc:	689b      	ldr	r3, [r3, #8]
 80273be:	2b00      	cmp	r3, #0
 80273c0:	d110      	bne.n	80273e4 <osMessageQueueNew+0xac>
 80273c2:	687b      	ldr	r3, [r7, #4]
 80273c4:	68db      	ldr	r3, [r3, #12]
 80273c6:	2b00      	cmp	r3, #0
 80273c8:	d10c      	bne.n	80273e4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80273ca:	687b      	ldr	r3, [r7, #4]
 80273cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80273ce:	2b00      	cmp	r3, #0
 80273d0:	d108      	bne.n	80273e4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80273d2:	687b      	ldr	r3, [r7, #4]
 80273d4:	695b      	ldr	r3, [r3, #20]
 80273d6:	2b00      	cmp	r3, #0
 80273d8:	d104      	bne.n	80273e4 <osMessageQueueNew+0xac>
          mem = 0;
 80273da:	2300      	movs	r3, #0
 80273dc:	623b      	str	r3, [r7, #32]
 80273de:	e001      	b.n	80273e4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80273e0:	2300      	movs	r3, #0
 80273e2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80273e4:	6a3b      	ldr	r3, [r7, #32]
 80273e6:	2b01      	cmp	r3, #1
 80273e8:	d10c      	bne.n	8027404 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80273ea:	687b      	ldr	r3, [r7, #4]
 80273ec:	691a      	ldr	r2, [r3, #16]
 80273ee:	687b      	ldr	r3, [r7, #4]
 80273f0:	6899      	ldr	r1, [r3, #8]
 80273f2:	2300      	movs	r3, #0
 80273f4:	9300      	str	r3, [sp, #0]
 80273f6:	460b      	mov	r3, r1
 80273f8:	68b9      	ldr	r1, [r7, #8]
 80273fa:	68f8      	ldr	r0, [r7, #12]
 80273fc:	f000 faa0 	bl	8027940 <xQueueGenericCreateStatic>
 8027400:	6278      	str	r0, [r7, #36]	; 0x24
 8027402:	e008      	b.n	8027416 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8027404:	6a3b      	ldr	r3, [r7, #32]
 8027406:	2b00      	cmp	r3, #0
 8027408:	d105      	bne.n	8027416 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 802740a:	2200      	movs	r2, #0
 802740c:	68b9      	ldr	r1, [r7, #8]
 802740e:	68f8      	ldr	r0, [r7, #12]
 8027410:	f000 fb09 	bl	8027a26 <xQueueGenericCreate>
 8027414:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8027416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027418:	2b00      	cmp	r3, #0
 802741a:	d00c      	beq.n	8027436 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 802741c:	687b      	ldr	r3, [r7, #4]
 802741e:	2b00      	cmp	r3, #0
 8027420:	d003      	beq.n	802742a <osMessageQueueNew+0xf2>
        name = attr->name;
 8027422:	687b      	ldr	r3, [r7, #4]
 8027424:	681b      	ldr	r3, [r3, #0]
 8027426:	61fb      	str	r3, [r7, #28]
 8027428:	e001      	b.n	802742e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 802742a:	2300      	movs	r3, #0
 802742c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 802742e:	69f9      	ldr	r1, [r7, #28]
 8027430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027432:	f001 f9a7 	bl	8028784 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8027436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8027438:	4618      	mov	r0, r3
 802743a:	3728      	adds	r7, #40	; 0x28
 802743c:	46bd      	mov	sp, r7
 802743e:	bd80      	pop	{r7, pc}
 8027440:	2400149c 	.word	0x2400149c

08027444 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8027444:	b580      	push	{r7, lr}
 8027446:	b08a      	sub	sp, #40	; 0x28
 8027448:	af00      	add	r7, sp, #0
 802744a:	60f8      	str	r0, [r7, #12]
 802744c:	60b9      	str	r1, [r7, #8]
 802744e:	603b      	str	r3, [r7, #0]
 8027450:	4613      	mov	r3, r2
 8027452:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8027454:	68fb      	ldr	r3, [r7, #12]
 8027456:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8027458:	2300      	movs	r3, #0
 802745a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802745c:	f3ef 8305 	mrs	r3, IPSR
 8027460:	61fb      	str	r3, [r7, #28]
  return(result);
 8027462:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8027464:	2b00      	cmp	r3, #0
 8027466:	d10f      	bne.n	8027488 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8027468:	f3ef 8310 	mrs	r3, PRIMASK
 802746c:	61bb      	str	r3, [r7, #24]
  return(result);
 802746e:	69bb      	ldr	r3, [r7, #24]
 8027470:	2b00      	cmp	r3, #0
 8027472:	d105      	bne.n	8027480 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8027474:	f3ef 8311 	mrs	r3, BASEPRI
 8027478:	617b      	str	r3, [r7, #20]
  return(result);
 802747a:	697b      	ldr	r3, [r7, #20]
 802747c:	2b00      	cmp	r3, #0
 802747e:	d02c      	beq.n	80274da <osMessageQueuePut+0x96>
 8027480:	4b28      	ldr	r3, [pc, #160]	; (8027524 <osMessageQueuePut+0xe0>)
 8027482:	681b      	ldr	r3, [r3, #0]
 8027484:	2b02      	cmp	r3, #2
 8027486:	d128      	bne.n	80274da <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8027488:	6a3b      	ldr	r3, [r7, #32]
 802748a:	2b00      	cmp	r3, #0
 802748c:	d005      	beq.n	802749a <osMessageQueuePut+0x56>
 802748e:	68bb      	ldr	r3, [r7, #8]
 8027490:	2b00      	cmp	r3, #0
 8027492:	d002      	beq.n	802749a <osMessageQueuePut+0x56>
 8027494:	683b      	ldr	r3, [r7, #0]
 8027496:	2b00      	cmp	r3, #0
 8027498:	d003      	beq.n	80274a2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 802749a:	f06f 0303 	mvn.w	r3, #3
 802749e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80274a0:	e039      	b.n	8027516 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80274a2:	2300      	movs	r3, #0
 80274a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80274a6:	f107 0210 	add.w	r2, r7, #16
 80274aa:	2300      	movs	r3, #0
 80274ac:	68b9      	ldr	r1, [r7, #8]
 80274ae:	6a38      	ldr	r0, [r7, #32]
 80274b0:	f000 fc7c 	bl	8027dac <xQueueGenericSendFromISR>
 80274b4:	4603      	mov	r3, r0
 80274b6:	2b01      	cmp	r3, #1
 80274b8:	d003      	beq.n	80274c2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80274ba:	f06f 0302 	mvn.w	r3, #2
 80274be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80274c0:	e029      	b.n	8027516 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80274c2:	693b      	ldr	r3, [r7, #16]
 80274c4:	2b00      	cmp	r3, #0
 80274c6:	d026      	beq.n	8027516 <osMessageQueuePut+0xd2>
 80274c8:	4b17      	ldr	r3, [pc, #92]	; (8027528 <osMessageQueuePut+0xe4>)
 80274ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80274ce:	601a      	str	r2, [r3, #0]
 80274d0:	f3bf 8f4f 	dsb	sy
 80274d4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80274d8:	e01d      	b.n	8027516 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80274da:	6a3b      	ldr	r3, [r7, #32]
 80274dc:	2b00      	cmp	r3, #0
 80274de:	d002      	beq.n	80274e6 <osMessageQueuePut+0xa2>
 80274e0:	68bb      	ldr	r3, [r7, #8]
 80274e2:	2b00      	cmp	r3, #0
 80274e4:	d103      	bne.n	80274ee <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80274e6:	f06f 0303 	mvn.w	r3, #3
 80274ea:	627b      	str	r3, [r7, #36]	; 0x24
 80274ec:	e014      	b.n	8027518 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80274ee:	2300      	movs	r3, #0
 80274f0:	683a      	ldr	r2, [r7, #0]
 80274f2:	68b9      	ldr	r1, [r7, #8]
 80274f4:	6a38      	ldr	r0, [r7, #32]
 80274f6:	f000 fb5f 	bl	8027bb8 <xQueueGenericSend>
 80274fa:	4603      	mov	r3, r0
 80274fc:	2b01      	cmp	r3, #1
 80274fe:	d00b      	beq.n	8027518 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8027500:	683b      	ldr	r3, [r7, #0]
 8027502:	2b00      	cmp	r3, #0
 8027504:	d003      	beq.n	802750e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8027506:	f06f 0301 	mvn.w	r3, #1
 802750a:	627b      	str	r3, [r7, #36]	; 0x24
 802750c:	e004      	b.n	8027518 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 802750e:	f06f 0302 	mvn.w	r3, #2
 8027512:	627b      	str	r3, [r7, #36]	; 0x24
 8027514:	e000      	b.n	8027518 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8027516:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8027518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802751a:	4618      	mov	r0, r3
 802751c:	3728      	adds	r7, #40	; 0x28
 802751e:	46bd      	mov	sp, r7
 8027520:	bd80      	pop	{r7, pc}
 8027522:	bf00      	nop
 8027524:	2400149c 	.word	0x2400149c
 8027528:	e000ed04 	.word	0xe000ed04

0802752c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 802752c:	b580      	push	{r7, lr}
 802752e:	b08a      	sub	sp, #40	; 0x28
 8027530:	af00      	add	r7, sp, #0
 8027532:	60f8      	str	r0, [r7, #12]
 8027534:	60b9      	str	r1, [r7, #8]
 8027536:	607a      	str	r2, [r7, #4]
 8027538:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 802753a:	68fb      	ldr	r3, [r7, #12]
 802753c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 802753e:	2300      	movs	r3, #0
 8027540:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8027542:	f3ef 8305 	mrs	r3, IPSR
 8027546:	61fb      	str	r3, [r7, #28]
  return(result);
 8027548:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 802754a:	2b00      	cmp	r3, #0
 802754c:	d10f      	bne.n	802756e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802754e:	f3ef 8310 	mrs	r3, PRIMASK
 8027552:	61bb      	str	r3, [r7, #24]
  return(result);
 8027554:	69bb      	ldr	r3, [r7, #24]
 8027556:	2b00      	cmp	r3, #0
 8027558:	d105      	bne.n	8027566 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 802755a:	f3ef 8311 	mrs	r3, BASEPRI
 802755e:	617b      	str	r3, [r7, #20]
  return(result);
 8027560:	697b      	ldr	r3, [r7, #20]
 8027562:	2b00      	cmp	r3, #0
 8027564:	d02c      	beq.n	80275c0 <osMessageQueueGet+0x94>
 8027566:	4b28      	ldr	r3, [pc, #160]	; (8027608 <osMessageQueueGet+0xdc>)
 8027568:	681b      	ldr	r3, [r3, #0]
 802756a:	2b02      	cmp	r3, #2
 802756c:	d128      	bne.n	80275c0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 802756e:	6a3b      	ldr	r3, [r7, #32]
 8027570:	2b00      	cmp	r3, #0
 8027572:	d005      	beq.n	8027580 <osMessageQueueGet+0x54>
 8027574:	68bb      	ldr	r3, [r7, #8]
 8027576:	2b00      	cmp	r3, #0
 8027578:	d002      	beq.n	8027580 <osMessageQueueGet+0x54>
 802757a:	683b      	ldr	r3, [r7, #0]
 802757c:	2b00      	cmp	r3, #0
 802757e:	d003      	beq.n	8027588 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8027580:	f06f 0303 	mvn.w	r3, #3
 8027584:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8027586:	e038      	b.n	80275fa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8027588:	2300      	movs	r3, #0
 802758a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 802758c:	f107 0310 	add.w	r3, r7, #16
 8027590:	461a      	mov	r2, r3
 8027592:	68b9      	ldr	r1, [r7, #8]
 8027594:	6a38      	ldr	r0, [r7, #32]
 8027596:	f000 ff0b 	bl	80283b0 <xQueueReceiveFromISR>
 802759a:	4603      	mov	r3, r0
 802759c:	2b01      	cmp	r3, #1
 802759e:	d003      	beq.n	80275a8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80275a0:	f06f 0302 	mvn.w	r3, #2
 80275a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80275a6:	e028      	b.n	80275fa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80275a8:	693b      	ldr	r3, [r7, #16]
 80275aa:	2b00      	cmp	r3, #0
 80275ac:	d025      	beq.n	80275fa <osMessageQueueGet+0xce>
 80275ae:	4b17      	ldr	r3, [pc, #92]	; (802760c <osMessageQueueGet+0xe0>)
 80275b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80275b4:	601a      	str	r2, [r3, #0]
 80275b6:	f3bf 8f4f 	dsb	sy
 80275ba:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80275be:	e01c      	b.n	80275fa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80275c0:	6a3b      	ldr	r3, [r7, #32]
 80275c2:	2b00      	cmp	r3, #0
 80275c4:	d002      	beq.n	80275cc <osMessageQueueGet+0xa0>
 80275c6:	68bb      	ldr	r3, [r7, #8]
 80275c8:	2b00      	cmp	r3, #0
 80275ca:	d103      	bne.n	80275d4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80275cc:	f06f 0303 	mvn.w	r3, #3
 80275d0:	627b      	str	r3, [r7, #36]	; 0x24
 80275d2:	e013      	b.n	80275fc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80275d4:	683a      	ldr	r2, [r7, #0]
 80275d6:	68b9      	ldr	r1, [r7, #8]
 80275d8:	6a38      	ldr	r0, [r7, #32]
 80275da:	f000 fd05 	bl	8027fe8 <xQueueReceive>
 80275de:	4603      	mov	r3, r0
 80275e0:	2b01      	cmp	r3, #1
 80275e2:	d00b      	beq.n	80275fc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80275e4:	683b      	ldr	r3, [r7, #0]
 80275e6:	2b00      	cmp	r3, #0
 80275e8:	d003      	beq.n	80275f2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80275ea:	f06f 0301 	mvn.w	r3, #1
 80275ee:	627b      	str	r3, [r7, #36]	; 0x24
 80275f0:	e004      	b.n	80275fc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80275f2:	f06f 0302 	mvn.w	r3, #2
 80275f6:	627b      	str	r3, [r7, #36]	; 0x24
 80275f8:	e000      	b.n	80275fc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80275fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80275fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80275fe:	4618      	mov	r0, r3
 8027600:	3728      	adds	r7, #40	; 0x28
 8027602:	46bd      	mov	sp, r7
 8027604:	bd80      	pop	{r7, pc}
 8027606:	bf00      	nop
 8027608:	2400149c 	.word	0x2400149c
 802760c:	e000ed04 	.word	0xe000ed04

08027610 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8027610:	b580      	push	{r7, lr}
 8027612:	b08c      	sub	sp, #48	; 0x30
 8027614:	af00      	add	r7, sp, #0
 8027616:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8027618:	687b      	ldr	r3, [r7, #4]
 802761a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 802761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802761e:	2b00      	cmp	r3, #0
 8027620:	d102      	bne.n	8027628 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8027622:	2300      	movs	r3, #0
 8027624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027626:	e033      	b.n	8027690 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8027628:	f3ef 8305 	mrs	r3, IPSR
 802762c:	623b      	str	r3, [r7, #32]
  return(result);
 802762e:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 8027630:	2b00      	cmp	r3, #0
 8027632:	d10f      	bne.n	8027654 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8027634:	f3ef 8310 	mrs	r3, PRIMASK
 8027638:	61fb      	str	r3, [r7, #28]
  return(result);
 802763a:	69fb      	ldr	r3, [r7, #28]
 802763c:	2b00      	cmp	r3, #0
 802763e:	d105      	bne.n	802764c <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8027640:	f3ef 8311 	mrs	r3, BASEPRI
 8027644:	61bb      	str	r3, [r7, #24]
  return(result);
 8027646:	69bb      	ldr	r3, [r7, #24]
 8027648:	2b00      	cmp	r3, #0
 802764a:	d01d      	beq.n	8027688 <osMessageQueueGetSpace+0x78>
 802764c:	4b13      	ldr	r3, [pc, #76]	; (802769c <osMessageQueueGetSpace+0x8c>)
 802764e:	681b      	ldr	r3, [r3, #0]
 8027650:	2b02      	cmp	r3, #2
 8027652:	d119      	bne.n	8027688 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8027654:	f3ef 8211 	mrs	r2, BASEPRI
 8027658:	f04f 0350 	mov.w	r3, #80	; 0x50
 802765c:	f383 8811 	msr	BASEPRI, r3
 8027660:	f3bf 8f6f 	isb	sy
 8027664:	f3bf 8f4f 	dsb	sy
 8027668:	613a      	str	r2, [r7, #16]
 802766a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 802766c:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 802766e:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8027670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8027674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027678:	1ad3      	subs	r3, r2, r3
 802767a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802767e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8027680:	697b      	ldr	r3, [r7, #20]
 8027682:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 8027686:	e003      	b.n	8027690 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8027688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802768a:	f000 ff0e 	bl	80284aa <uxQueueSpacesAvailable>
 802768e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 8027690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8027692:	4618      	mov	r0, r3
 8027694:	3730      	adds	r7, #48	; 0x30
 8027696:	46bd      	mov	sp, r7
 8027698:	bd80      	pop	{r7, pc}
 802769a:	bf00      	nop
 802769c:	2400149c 	.word	0x2400149c

080276a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80276a0:	b480      	push	{r7}
 80276a2:	b085      	sub	sp, #20
 80276a4:	af00      	add	r7, sp, #0
 80276a6:	60f8      	str	r0, [r7, #12]
 80276a8:	60b9      	str	r1, [r7, #8]
 80276aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80276ac:	68fb      	ldr	r3, [r7, #12]
 80276ae:	4a07      	ldr	r2, [pc, #28]	; (80276cc <vApplicationGetIdleTaskMemory+0x2c>)
 80276b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80276b2:	68bb      	ldr	r3, [r7, #8]
 80276b4:	4a06      	ldr	r2, [pc, #24]	; (80276d0 <vApplicationGetIdleTaskMemory+0x30>)
 80276b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80276b8:	687b      	ldr	r3, [r7, #4]
 80276ba:	2280      	movs	r2, #128	; 0x80
 80276bc:	601a      	str	r2, [r3, #0]
}
 80276be:	bf00      	nop
 80276c0:	3714      	adds	r7, #20
 80276c2:	46bd      	mov	sp, r7
 80276c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276c8:	4770      	bx	lr
 80276ca:	bf00      	nop
 80276cc:	240014a0 	.word	0x240014a0
 80276d0:	240014fc 	.word	0x240014fc

080276d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80276d4:	b480      	push	{r7}
 80276d6:	b085      	sub	sp, #20
 80276d8:	af00      	add	r7, sp, #0
 80276da:	60f8      	str	r0, [r7, #12]
 80276dc:	60b9      	str	r1, [r7, #8]
 80276de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80276e0:	68fb      	ldr	r3, [r7, #12]
 80276e2:	4a07      	ldr	r2, [pc, #28]	; (8027700 <vApplicationGetTimerTaskMemory+0x2c>)
 80276e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80276e6:	68bb      	ldr	r3, [r7, #8]
 80276e8:	4a06      	ldr	r2, [pc, #24]	; (8027704 <vApplicationGetTimerTaskMemory+0x30>)
 80276ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80276ec:	687b      	ldr	r3, [r7, #4]
 80276ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80276f2:	601a      	str	r2, [r3, #0]
}
 80276f4:	bf00      	nop
 80276f6:	3714      	adds	r7, #20
 80276f8:	46bd      	mov	sp, r7
 80276fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276fe:	4770      	bx	lr
 8027700:	240016fc 	.word	0x240016fc
 8027704:	24001758 	.word	0x24001758

08027708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8027708:	b480      	push	{r7}
 802770a:	b083      	sub	sp, #12
 802770c:	af00      	add	r7, sp, #0
 802770e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8027710:	687b      	ldr	r3, [r7, #4]
 8027712:	f103 0208 	add.w	r2, r3, #8
 8027716:	687b      	ldr	r3, [r7, #4]
 8027718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 802771a:	687b      	ldr	r3, [r7, #4]
 802771c:	f04f 32ff 	mov.w	r2, #4294967295
 8027720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8027722:	687b      	ldr	r3, [r7, #4]
 8027724:	f103 0208 	add.w	r2, r3, #8
 8027728:	687b      	ldr	r3, [r7, #4]
 802772a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802772c:	687b      	ldr	r3, [r7, #4]
 802772e:	f103 0208 	add.w	r2, r3, #8
 8027732:	687b      	ldr	r3, [r7, #4]
 8027734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8027736:	687b      	ldr	r3, [r7, #4]
 8027738:	2200      	movs	r2, #0
 802773a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 802773c:	bf00      	nop
 802773e:	370c      	adds	r7, #12
 8027740:	46bd      	mov	sp, r7
 8027742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027746:	4770      	bx	lr

08027748 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8027748:	b480      	push	{r7}
 802774a:	b083      	sub	sp, #12
 802774c:	af00      	add	r7, sp, #0
 802774e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8027750:	687b      	ldr	r3, [r7, #4]
 8027752:	2200      	movs	r2, #0
 8027754:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8027756:	bf00      	nop
 8027758:	370c      	adds	r7, #12
 802775a:	46bd      	mov	sp, r7
 802775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027760:	4770      	bx	lr

08027762 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8027762:	b480      	push	{r7}
 8027764:	b085      	sub	sp, #20
 8027766:	af00      	add	r7, sp, #0
 8027768:	6078      	str	r0, [r7, #4]
 802776a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 802776c:	687b      	ldr	r3, [r7, #4]
 802776e:	685b      	ldr	r3, [r3, #4]
 8027770:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8027772:	683b      	ldr	r3, [r7, #0]
 8027774:	68fa      	ldr	r2, [r7, #12]
 8027776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8027778:	68fb      	ldr	r3, [r7, #12]
 802777a:	689a      	ldr	r2, [r3, #8]
 802777c:	683b      	ldr	r3, [r7, #0]
 802777e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8027780:	68fb      	ldr	r3, [r7, #12]
 8027782:	689b      	ldr	r3, [r3, #8]
 8027784:	683a      	ldr	r2, [r7, #0]
 8027786:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8027788:	68fb      	ldr	r3, [r7, #12]
 802778a:	683a      	ldr	r2, [r7, #0]
 802778c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802778e:	683b      	ldr	r3, [r7, #0]
 8027790:	687a      	ldr	r2, [r7, #4]
 8027792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8027794:	687b      	ldr	r3, [r7, #4]
 8027796:	681b      	ldr	r3, [r3, #0]
 8027798:	1c5a      	adds	r2, r3, #1
 802779a:	687b      	ldr	r3, [r7, #4]
 802779c:	601a      	str	r2, [r3, #0]
}
 802779e:	bf00      	nop
 80277a0:	3714      	adds	r7, #20
 80277a2:	46bd      	mov	sp, r7
 80277a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277a8:	4770      	bx	lr

080277aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80277aa:	b480      	push	{r7}
 80277ac:	b085      	sub	sp, #20
 80277ae:	af00      	add	r7, sp, #0
 80277b0:	6078      	str	r0, [r7, #4]
 80277b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80277b4:	683b      	ldr	r3, [r7, #0]
 80277b6:	681b      	ldr	r3, [r3, #0]
 80277b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80277ba:	68bb      	ldr	r3, [r7, #8]
 80277bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80277c0:	d103      	bne.n	80277ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80277c2:	687b      	ldr	r3, [r7, #4]
 80277c4:	691b      	ldr	r3, [r3, #16]
 80277c6:	60fb      	str	r3, [r7, #12]
 80277c8:	e00c      	b.n	80277e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80277ca:	687b      	ldr	r3, [r7, #4]
 80277cc:	3308      	adds	r3, #8
 80277ce:	60fb      	str	r3, [r7, #12]
 80277d0:	e002      	b.n	80277d8 <vListInsert+0x2e>
 80277d2:	68fb      	ldr	r3, [r7, #12]
 80277d4:	685b      	ldr	r3, [r3, #4]
 80277d6:	60fb      	str	r3, [r7, #12]
 80277d8:	68fb      	ldr	r3, [r7, #12]
 80277da:	685b      	ldr	r3, [r3, #4]
 80277dc:	681b      	ldr	r3, [r3, #0]
 80277de:	68ba      	ldr	r2, [r7, #8]
 80277e0:	429a      	cmp	r2, r3
 80277e2:	d2f6      	bcs.n	80277d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80277e4:	68fb      	ldr	r3, [r7, #12]
 80277e6:	685a      	ldr	r2, [r3, #4]
 80277e8:	683b      	ldr	r3, [r7, #0]
 80277ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80277ec:	683b      	ldr	r3, [r7, #0]
 80277ee:	685b      	ldr	r3, [r3, #4]
 80277f0:	683a      	ldr	r2, [r7, #0]
 80277f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80277f4:	683b      	ldr	r3, [r7, #0]
 80277f6:	68fa      	ldr	r2, [r7, #12]
 80277f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80277fa:	68fb      	ldr	r3, [r7, #12]
 80277fc:	683a      	ldr	r2, [r7, #0]
 80277fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8027800:	683b      	ldr	r3, [r7, #0]
 8027802:	687a      	ldr	r2, [r7, #4]
 8027804:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8027806:	687b      	ldr	r3, [r7, #4]
 8027808:	681b      	ldr	r3, [r3, #0]
 802780a:	1c5a      	adds	r2, r3, #1
 802780c:	687b      	ldr	r3, [r7, #4]
 802780e:	601a      	str	r2, [r3, #0]
}
 8027810:	bf00      	nop
 8027812:	3714      	adds	r7, #20
 8027814:	46bd      	mov	sp, r7
 8027816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802781a:	4770      	bx	lr

0802781c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 802781c:	b480      	push	{r7}
 802781e:	b085      	sub	sp, #20
 8027820:	af00      	add	r7, sp, #0
 8027822:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8027824:	687b      	ldr	r3, [r7, #4]
 8027826:	691b      	ldr	r3, [r3, #16]
 8027828:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 802782a:	687b      	ldr	r3, [r7, #4]
 802782c:	685b      	ldr	r3, [r3, #4]
 802782e:	687a      	ldr	r2, [r7, #4]
 8027830:	6892      	ldr	r2, [r2, #8]
 8027832:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8027834:	687b      	ldr	r3, [r7, #4]
 8027836:	689b      	ldr	r3, [r3, #8]
 8027838:	687a      	ldr	r2, [r7, #4]
 802783a:	6852      	ldr	r2, [r2, #4]
 802783c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 802783e:	68fb      	ldr	r3, [r7, #12]
 8027840:	685b      	ldr	r3, [r3, #4]
 8027842:	687a      	ldr	r2, [r7, #4]
 8027844:	429a      	cmp	r2, r3
 8027846:	d103      	bne.n	8027850 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8027848:	687b      	ldr	r3, [r7, #4]
 802784a:	689a      	ldr	r2, [r3, #8]
 802784c:	68fb      	ldr	r3, [r7, #12]
 802784e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8027850:	687b      	ldr	r3, [r7, #4]
 8027852:	2200      	movs	r2, #0
 8027854:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8027856:	68fb      	ldr	r3, [r7, #12]
 8027858:	681b      	ldr	r3, [r3, #0]
 802785a:	1e5a      	subs	r2, r3, #1
 802785c:	68fb      	ldr	r3, [r7, #12]
 802785e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8027860:	68fb      	ldr	r3, [r7, #12]
 8027862:	681b      	ldr	r3, [r3, #0]
}
 8027864:	4618      	mov	r0, r3
 8027866:	3714      	adds	r7, #20
 8027868:	46bd      	mov	sp, r7
 802786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802786e:	4770      	bx	lr

08027870 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8027870:	b580      	push	{r7, lr}
 8027872:	b084      	sub	sp, #16
 8027874:	af00      	add	r7, sp, #0
 8027876:	6078      	str	r0, [r7, #4]
 8027878:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802787a:	687b      	ldr	r3, [r7, #4]
 802787c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802787e:	68fb      	ldr	r3, [r7, #12]
 8027880:	2b00      	cmp	r3, #0
 8027882:	d109      	bne.n	8027898 <xQueueGenericReset+0x28>
	__asm volatile
 8027884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027888:	f383 8811 	msr	BASEPRI, r3
 802788c:	f3bf 8f6f 	isb	sy
 8027890:	f3bf 8f4f 	dsb	sy
 8027894:	60bb      	str	r3, [r7, #8]
 8027896:	e7fe      	b.n	8027896 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8027898:	f002 fec8 	bl	802a62c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802789c:	68fb      	ldr	r3, [r7, #12]
 802789e:	681a      	ldr	r2, [r3, #0]
 80278a0:	68fb      	ldr	r3, [r7, #12]
 80278a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80278a4:	68f9      	ldr	r1, [r7, #12]
 80278a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80278a8:	fb01 f303 	mul.w	r3, r1, r3
 80278ac:	441a      	add	r2, r3
 80278ae:	68fb      	ldr	r3, [r7, #12]
 80278b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80278b2:	68fb      	ldr	r3, [r7, #12]
 80278b4:	2200      	movs	r2, #0
 80278b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80278b8:	68fb      	ldr	r3, [r7, #12]
 80278ba:	681a      	ldr	r2, [r3, #0]
 80278bc:	68fb      	ldr	r3, [r7, #12]
 80278be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80278c0:	68fb      	ldr	r3, [r7, #12]
 80278c2:	681a      	ldr	r2, [r3, #0]
 80278c4:	68fb      	ldr	r3, [r7, #12]
 80278c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80278c8:	3b01      	subs	r3, #1
 80278ca:	68f9      	ldr	r1, [r7, #12]
 80278cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80278ce:	fb01 f303 	mul.w	r3, r1, r3
 80278d2:	441a      	add	r2, r3
 80278d4:	68fb      	ldr	r3, [r7, #12]
 80278d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80278d8:	68fb      	ldr	r3, [r7, #12]
 80278da:	22ff      	movs	r2, #255	; 0xff
 80278dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80278e0:	68fb      	ldr	r3, [r7, #12]
 80278e2:	22ff      	movs	r2, #255	; 0xff
 80278e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80278e8:	683b      	ldr	r3, [r7, #0]
 80278ea:	2b00      	cmp	r3, #0
 80278ec:	d114      	bne.n	8027918 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80278ee:	68fb      	ldr	r3, [r7, #12]
 80278f0:	691b      	ldr	r3, [r3, #16]
 80278f2:	2b00      	cmp	r3, #0
 80278f4:	d01a      	beq.n	802792c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80278f6:	68fb      	ldr	r3, [r7, #12]
 80278f8:	3310      	adds	r3, #16
 80278fa:	4618      	mov	r0, r3
 80278fc:	f001 fca6 	bl	802924c <xTaskRemoveFromEventList>
 8027900:	4603      	mov	r3, r0
 8027902:	2b00      	cmp	r3, #0
 8027904:	d012      	beq.n	802792c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8027906:	4b0d      	ldr	r3, [pc, #52]	; (802793c <xQueueGenericReset+0xcc>)
 8027908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802790c:	601a      	str	r2, [r3, #0]
 802790e:	f3bf 8f4f 	dsb	sy
 8027912:	f3bf 8f6f 	isb	sy
 8027916:	e009      	b.n	802792c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8027918:	68fb      	ldr	r3, [r7, #12]
 802791a:	3310      	adds	r3, #16
 802791c:	4618      	mov	r0, r3
 802791e:	f7ff fef3 	bl	8027708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8027922:	68fb      	ldr	r3, [r7, #12]
 8027924:	3324      	adds	r3, #36	; 0x24
 8027926:	4618      	mov	r0, r3
 8027928:	f7ff feee 	bl	8027708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 802792c:	f002 feac 	bl	802a688 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8027930:	2301      	movs	r3, #1
}
 8027932:	4618      	mov	r0, r3
 8027934:	3710      	adds	r7, #16
 8027936:	46bd      	mov	sp, r7
 8027938:	bd80      	pop	{r7, pc}
 802793a:	bf00      	nop
 802793c:	e000ed04 	.word	0xe000ed04

08027940 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8027940:	b580      	push	{r7, lr}
 8027942:	b08e      	sub	sp, #56	; 0x38
 8027944:	af02      	add	r7, sp, #8
 8027946:	60f8      	str	r0, [r7, #12]
 8027948:	60b9      	str	r1, [r7, #8]
 802794a:	607a      	str	r2, [r7, #4]
 802794c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802794e:	68fb      	ldr	r3, [r7, #12]
 8027950:	2b00      	cmp	r3, #0
 8027952:	d109      	bne.n	8027968 <xQueueGenericCreateStatic+0x28>
 8027954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027958:	f383 8811 	msr	BASEPRI, r3
 802795c:	f3bf 8f6f 	isb	sy
 8027960:	f3bf 8f4f 	dsb	sy
 8027964:	62bb      	str	r3, [r7, #40]	; 0x28
 8027966:	e7fe      	b.n	8027966 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8027968:	683b      	ldr	r3, [r7, #0]
 802796a:	2b00      	cmp	r3, #0
 802796c:	d109      	bne.n	8027982 <xQueueGenericCreateStatic+0x42>
 802796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027972:	f383 8811 	msr	BASEPRI, r3
 8027976:	f3bf 8f6f 	isb	sy
 802797a:	f3bf 8f4f 	dsb	sy
 802797e:	627b      	str	r3, [r7, #36]	; 0x24
 8027980:	e7fe      	b.n	8027980 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8027982:	687b      	ldr	r3, [r7, #4]
 8027984:	2b00      	cmp	r3, #0
 8027986:	d002      	beq.n	802798e <xQueueGenericCreateStatic+0x4e>
 8027988:	68bb      	ldr	r3, [r7, #8]
 802798a:	2b00      	cmp	r3, #0
 802798c:	d001      	beq.n	8027992 <xQueueGenericCreateStatic+0x52>
 802798e:	2301      	movs	r3, #1
 8027990:	e000      	b.n	8027994 <xQueueGenericCreateStatic+0x54>
 8027992:	2300      	movs	r3, #0
 8027994:	2b00      	cmp	r3, #0
 8027996:	d109      	bne.n	80279ac <xQueueGenericCreateStatic+0x6c>
 8027998:	f04f 0350 	mov.w	r3, #80	; 0x50
 802799c:	f383 8811 	msr	BASEPRI, r3
 80279a0:	f3bf 8f6f 	isb	sy
 80279a4:	f3bf 8f4f 	dsb	sy
 80279a8:	623b      	str	r3, [r7, #32]
 80279aa:	e7fe      	b.n	80279aa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80279ac:	687b      	ldr	r3, [r7, #4]
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	d102      	bne.n	80279b8 <xQueueGenericCreateStatic+0x78>
 80279b2:	68bb      	ldr	r3, [r7, #8]
 80279b4:	2b00      	cmp	r3, #0
 80279b6:	d101      	bne.n	80279bc <xQueueGenericCreateStatic+0x7c>
 80279b8:	2301      	movs	r3, #1
 80279ba:	e000      	b.n	80279be <xQueueGenericCreateStatic+0x7e>
 80279bc:	2300      	movs	r3, #0
 80279be:	2b00      	cmp	r3, #0
 80279c0:	d109      	bne.n	80279d6 <xQueueGenericCreateStatic+0x96>
 80279c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80279c6:	f383 8811 	msr	BASEPRI, r3
 80279ca:	f3bf 8f6f 	isb	sy
 80279ce:	f3bf 8f4f 	dsb	sy
 80279d2:	61fb      	str	r3, [r7, #28]
 80279d4:	e7fe      	b.n	80279d4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80279d6:	2350      	movs	r3, #80	; 0x50
 80279d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80279da:	697b      	ldr	r3, [r7, #20]
 80279dc:	2b50      	cmp	r3, #80	; 0x50
 80279de:	d009      	beq.n	80279f4 <xQueueGenericCreateStatic+0xb4>
 80279e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80279e4:	f383 8811 	msr	BASEPRI, r3
 80279e8:	f3bf 8f6f 	isb	sy
 80279ec:	f3bf 8f4f 	dsb	sy
 80279f0:	61bb      	str	r3, [r7, #24]
 80279f2:	e7fe      	b.n	80279f2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80279f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80279f6:	683b      	ldr	r3, [r7, #0]
 80279f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80279fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80279fc:	2b00      	cmp	r3, #0
 80279fe:	d00d      	beq.n	8027a1c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8027a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a02:	2201      	movs	r2, #1
 8027a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8027a08:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8027a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a0e:	9300      	str	r3, [sp, #0]
 8027a10:	4613      	mov	r3, r2
 8027a12:	687a      	ldr	r2, [r7, #4]
 8027a14:	68b9      	ldr	r1, [r7, #8]
 8027a16:	68f8      	ldr	r0, [r7, #12]
 8027a18:	f000 f844 	bl	8027aa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8027a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8027a1e:	4618      	mov	r0, r3
 8027a20:	3730      	adds	r7, #48	; 0x30
 8027a22:	46bd      	mov	sp, r7
 8027a24:	bd80      	pop	{r7, pc}

08027a26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8027a26:	b580      	push	{r7, lr}
 8027a28:	b08a      	sub	sp, #40	; 0x28
 8027a2a:	af02      	add	r7, sp, #8
 8027a2c:	60f8      	str	r0, [r7, #12]
 8027a2e:	60b9      	str	r1, [r7, #8]
 8027a30:	4613      	mov	r3, r2
 8027a32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8027a34:	68fb      	ldr	r3, [r7, #12]
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	d109      	bne.n	8027a4e <xQueueGenericCreate+0x28>
 8027a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027a3e:	f383 8811 	msr	BASEPRI, r3
 8027a42:	f3bf 8f6f 	isb	sy
 8027a46:	f3bf 8f4f 	dsb	sy
 8027a4a:	613b      	str	r3, [r7, #16]
 8027a4c:	e7fe      	b.n	8027a4c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8027a4e:	68bb      	ldr	r3, [r7, #8]
 8027a50:	2b00      	cmp	r3, #0
 8027a52:	d102      	bne.n	8027a5a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8027a54:	2300      	movs	r3, #0
 8027a56:	61fb      	str	r3, [r7, #28]
 8027a58:	e004      	b.n	8027a64 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8027a5a:	68fb      	ldr	r3, [r7, #12]
 8027a5c:	68ba      	ldr	r2, [r7, #8]
 8027a5e:	fb02 f303 	mul.w	r3, r2, r3
 8027a62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8027a64:	69fb      	ldr	r3, [r7, #28]
 8027a66:	3350      	adds	r3, #80	; 0x50
 8027a68:	4618      	mov	r0, r3
 8027a6a:	f002 fef9 	bl	802a860 <pvPortMalloc>
 8027a6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8027a70:	69bb      	ldr	r3, [r7, #24]
 8027a72:	2b00      	cmp	r3, #0
 8027a74:	d011      	beq.n	8027a9a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8027a76:	69bb      	ldr	r3, [r7, #24]
 8027a78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8027a7a:	697b      	ldr	r3, [r7, #20]
 8027a7c:	3350      	adds	r3, #80	; 0x50
 8027a7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8027a80:	69bb      	ldr	r3, [r7, #24]
 8027a82:	2200      	movs	r2, #0
 8027a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8027a88:	79fa      	ldrb	r2, [r7, #7]
 8027a8a:	69bb      	ldr	r3, [r7, #24]
 8027a8c:	9300      	str	r3, [sp, #0]
 8027a8e:	4613      	mov	r3, r2
 8027a90:	697a      	ldr	r2, [r7, #20]
 8027a92:	68b9      	ldr	r1, [r7, #8]
 8027a94:	68f8      	ldr	r0, [r7, #12]
 8027a96:	f000 f805 	bl	8027aa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8027a9a:	69bb      	ldr	r3, [r7, #24]
	}
 8027a9c:	4618      	mov	r0, r3
 8027a9e:	3720      	adds	r7, #32
 8027aa0:	46bd      	mov	sp, r7
 8027aa2:	bd80      	pop	{r7, pc}

08027aa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8027aa4:	b580      	push	{r7, lr}
 8027aa6:	b084      	sub	sp, #16
 8027aa8:	af00      	add	r7, sp, #0
 8027aaa:	60f8      	str	r0, [r7, #12]
 8027aac:	60b9      	str	r1, [r7, #8]
 8027aae:	607a      	str	r2, [r7, #4]
 8027ab0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8027ab2:	68bb      	ldr	r3, [r7, #8]
 8027ab4:	2b00      	cmp	r3, #0
 8027ab6:	d103      	bne.n	8027ac0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8027ab8:	69bb      	ldr	r3, [r7, #24]
 8027aba:	69ba      	ldr	r2, [r7, #24]
 8027abc:	601a      	str	r2, [r3, #0]
 8027abe:	e002      	b.n	8027ac6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8027ac0:	69bb      	ldr	r3, [r7, #24]
 8027ac2:	687a      	ldr	r2, [r7, #4]
 8027ac4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8027ac6:	69bb      	ldr	r3, [r7, #24]
 8027ac8:	68fa      	ldr	r2, [r7, #12]
 8027aca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8027acc:	69bb      	ldr	r3, [r7, #24]
 8027ace:	68ba      	ldr	r2, [r7, #8]
 8027ad0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8027ad2:	2101      	movs	r1, #1
 8027ad4:	69b8      	ldr	r0, [r7, #24]
 8027ad6:	f7ff fecb 	bl	8027870 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8027ada:	69bb      	ldr	r3, [r7, #24]
 8027adc:	78fa      	ldrb	r2, [r7, #3]
 8027ade:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8027ae2:	bf00      	nop
 8027ae4:	3710      	adds	r7, #16
 8027ae6:	46bd      	mov	sp, r7
 8027ae8:	bd80      	pop	{r7, pc}

08027aea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8027aea:	b580      	push	{r7, lr}
 8027aec:	b08a      	sub	sp, #40	; 0x28
 8027aee:	af02      	add	r7, sp, #8
 8027af0:	60f8      	str	r0, [r7, #12]
 8027af2:	60b9      	str	r1, [r7, #8]
 8027af4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8027af6:	68fb      	ldr	r3, [r7, #12]
 8027af8:	2b00      	cmp	r3, #0
 8027afa:	d109      	bne.n	8027b10 <xQueueCreateCountingSemaphoreStatic+0x26>
 8027afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027b00:	f383 8811 	msr	BASEPRI, r3
 8027b04:	f3bf 8f6f 	isb	sy
 8027b08:	f3bf 8f4f 	dsb	sy
 8027b0c:	61bb      	str	r3, [r7, #24]
 8027b0e:	e7fe      	b.n	8027b0e <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8027b10:	68ba      	ldr	r2, [r7, #8]
 8027b12:	68fb      	ldr	r3, [r7, #12]
 8027b14:	429a      	cmp	r2, r3
 8027b16:	d909      	bls.n	8027b2c <xQueueCreateCountingSemaphoreStatic+0x42>
 8027b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027b1c:	f383 8811 	msr	BASEPRI, r3
 8027b20:	f3bf 8f6f 	isb	sy
 8027b24:	f3bf 8f4f 	dsb	sy
 8027b28:	617b      	str	r3, [r7, #20]
 8027b2a:	e7fe      	b.n	8027b2a <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8027b2c:	2302      	movs	r3, #2
 8027b2e:	9300      	str	r3, [sp, #0]
 8027b30:	687b      	ldr	r3, [r7, #4]
 8027b32:	2200      	movs	r2, #0
 8027b34:	2100      	movs	r1, #0
 8027b36:	68f8      	ldr	r0, [r7, #12]
 8027b38:	f7ff ff02 	bl	8027940 <xQueueGenericCreateStatic>
 8027b3c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8027b3e:	69fb      	ldr	r3, [r7, #28]
 8027b40:	2b00      	cmp	r3, #0
 8027b42:	d002      	beq.n	8027b4a <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8027b44:	69fb      	ldr	r3, [r7, #28]
 8027b46:	68ba      	ldr	r2, [r7, #8]
 8027b48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8027b4a:	69fb      	ldr	r3, [r7, #28]
	}
 8027b4c:	4618      	mov	r0, r3
 8027b4e:	3720      	adds	r7, #32
 8027b50:	46bd      	mov	sp, r7
 8027b52:	bd80      	pop	{r7, pc}

08027b54 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8027b54:	b580      	push	{r7, lr}
 8027b56:	b086      	sub	sp, #24
 8027b58:	af00      	add	r7, sp, #0
 8027b5a:	6078      	str	r0, [r7, #4]
 8027b5c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8027b5e:	687b      	ldr	r3, [r7, #4]
 8027b60:	2b00      	cmp	r3, #0
 8027b62:	d109      	bne.n	8027b78 <xQueueCreateCountingSemaphore+0x24>
 8027b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027b68:	f383 8811 	msr	BASEPRI, r3
 8027b6c:	f3bf 8f6f 	isb	sy
 8027b70:	f3bf 8f4f 	dsb	sy
 8027b74:	613b      	str	r3, [r7, #16]
 8027b76:	e7fe      	b.n	8027b76 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8027b78:	683a      	ldr	r2, [r7, #0]
 8027b7a:	687b      	ldr	r3, [r7, #4]
 8027b7c:	429a      	cmp	r2, r3
 8027b7e:	d909      	bls.n	8027b94 <xQueueCreateCountingSemaphore+0x40>
 8027b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027b84:	f383 8811 	msr	BASEPRI, r3
 8027b88:	f3bf 8f6f 	isb	sy
 8027b8c:	f3bf 8f4f 	dsb	sy
 8027b90:	60fb      	str	r3, [r7, #12]
 8027b92:	e7fe      	b.n	8027b92 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8027b94:	2202      	movs	r2, #2
 8027b96:	2100      	movs	r1, #0
 8027b98:	6878      	ldr	r0, [r7, #4]
 8027b9a:	f7ff ff44 	bl	8027a26 <xQueueGenericCreate>
 8027b9e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8027ba0:	697b      	ldr	r3, [r7, #20]
 8027ba2:	2b00      	cmp	r3, #0
 8027ba4:	d002      	beq.n	8027bac <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8027ba6:	697b      	ldr	r3, [r7, #20]
 8027ba8:	683a      	ldr	r2, [r7, #0]
 8027baa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8027bac:	697b      	ldr	r3, [r7, #20]
	}
 8027bae:	4618      	mov	r0, r3
 8027bb0:	3718      	adds	r7, #24
 8027bb2:	46bd      	mov	sp, r7
 8027bb4:	bd80      	pop	{r7, pc}
	...

08027bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8027bb8:	b580      	push	{r7, lr}
 8027bba:	b08e      	sub	sp, #56	; 0x38
 8027bbc:	af00      	add	r7, sp, #0
 8027bbe:	60f8      	str	r0, [r7, #12]
 8027bc0:	60b9      	str	r1, [r7, #8]
 8027bc2:	607a      	str	r2, [r7, #4]
 8027bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8027bc6:	2300      	movs	r3, #0
 8027bc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8027bca:	68fb      	ldr	r3, [r7, #12]
 8027bcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8027bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027bd0:	2b00      	cmp	r3, #0
 8027bd2:	d109      	bne.n	8027be8 <xQueueGenericSend+0x30>
 8027bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027bd8:	f383 8811 	msr	BASEPRI, r3
 8027bdc:	f3bf 8f6f 	isb	sy
 8027be0:	f3bf 8f4f 	dsb	sy
 8027be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8027be6:	e7fe      	b.n	8027be6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8027be8:	68bb      	ldr	r3, [r7, #8]
 8027bea:	2b00      	cmp	r3, #0
 8027bec:	d103      	bne.n	8027bf6 <xQueueGenericSend+0x3e>
 8027bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027bf2:	2b00      	cmp	r3, #0
 8027bf4:	d101      	bne.n	8027bfa <xQueueGenericSend+0x42>
 8027bf6:	2301      	movs	r3, #1
 8027bf8:	e000      	b.n	8027bfc <xQueueGenericSend+0x44>
 8027bfa:	2300      	movs	r3, #0
 8027bfc:	2b00      	cmp	r3, #0
 8027bfe:	d109      	bne.n	8027c14 <xQueueGenericSend+0x5c>
 8027c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027c04:	f383 8811 	msr	BASEPRI, r3
 8027c08:	f3bf 8f6f 	isb	sy
 8027c0c:	f3bf 8f4f 	dsb	sy
 8027c10:	627b      	str	r3, [r7, #36]	; 0x24
 8027c12:	e7fe      	b.n	8027c12 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8027c14:	683b      	ldr	r3, [r7, #0]
 8027c16:	2b02      	cmp	r3, #2
 8027c18:	d103      	bne.n	8027c22 <xQueueGenericSend+0x6a>
 8027c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027c1e:	2b01      	cmp	r3, #1
 8027c20:	d101      	bne.n	8027c26 <xQueueGenericSend+0x6e>
 8027c22:	2301      	movs	r3, #1
 8027c24:	e000      	b.n	8027c28 <xQueueGenericSend+0x70>
 8027c26:	2300      	movs	r3, #0
 8027c28:	2b00      	cmp	r3, #0
 8027c2a:	d109      	bne.n	8027c40 <xQueueGenericSend+0x88>
 8027c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027c30:	f383 8811 	msr	BASEPRI, r3
 8027c34:	f3bf 8f6f 	isb	sy
 8027c38:	f3bf 8f4f 	dsb	sy
 8027c3c:	623b      	str	r3, [r7, #32]
 8027c3e:	e7fe      	b.n	8027c3e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8027c40:	f001 fcca 	bl	80295d8 <xTaskGetSchedulerState>
 8027c44:	4603      	mov	r3, r0
 8027c46:	2b00      	cmp	r3, #0
 8027c48:	d102      	bne.n	8027c50 <xQueueGenericSend+0x98>
 8027c4a:	687b      	ldr	r3, [r7, #4]
 8027c4c:	2b00      	cmp	r3, #0
 8027c4e:	d101      	bne.n	8027c54 <xQueueGenericSend+0x9c>
 8027c50:	2301      	movs	r3, #1
 8027c52:	e000      	b.n	8027c56 <xQueueGenericSend+0x9e>
 8027c54:	2300      	movs	r3, #0
 8027c56:	2b00      	cmp	r3, #0
 8027c58:	d109      	bne.n	8027c6e <xQueueGenericSend+0xb6>
 8027c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027c5e:	f383 8811 	msr	BASEPRI, r3
 8027c62:	f3bf 8f6f 	isb	sy
 8027c66:	f3bf 8f4f 	dsb	sy
 8027c6a:	61fb      	str	r3, [r7, #28]
 8027c6c:	e7fe      	b.n	8027c6c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8027c6e:	f002 fcdd 	bl	802a62c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8027c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8027c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027c7a:	429a      	cmp	r2, r3
 8027c7c:	d302      	bcc.n	8027c84 <xQueueGenericSend+0xcc>
 8027c7e:	683b      	ldr	r3, [r7, #0]
 8027c80:	2b02      	cmp	r3, #2
 8027c82:	d129      	bne.n	8027cd8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8027c84:	683a      	ldr	r2, [r7, #0]
 8027c86:	68b9      	ldr	r1, [r7, #8]
 8027c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027c8a:	f000 fc6a 	bl	8028562 <prvCopyDataToQueue>
 8027c8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8027c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027c94:	2b00      	cmp	r3, #0
 8027c96:	d010      	beq.n	8027cba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8027c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027c9a:	3324      	adds	r3, #36	; 0x24
 8027c9c:	4618      	mov	r0, r3
 8027c9e:	f001 fad5 	bl	802924c <xTaskRemoveFromEventList>
 8027ca2:	4603      	mov	r3, r0
 8027ca4:	2b00      	cmp	r3, #0
 8027ca6:	d013      	beq.n	8027cd0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8027ca8:	4b3f      	ldr	r3, [pc, #252]	; (8027da8 <xQueueGenericSend+0x1f0>)
 8027caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027cae:	601a      	str	r2, [r3, #0]
 8027cb0:	f3bf 8f4f 	dsb	sy
 8027cb4:	f3bf 8f6f 	isb	sy
 8027cb8:	e00a      	b.n	8027cd0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8027cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cbc:	2b00      	cmp	r3, #0
 8027cbe:	d007      	beq.n	8027cd0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8027cc0:	4b39      	ldr	r3, [pc, #228]	; (8027da8 <xQueueGenericSend+0x1f0>)
 8027cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027cc6:	601a      	str	r2, [r3, #0]
 8027cc8:	f3bf 8f4f 	dsb	sy
 8027ccc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8027cd0:	f002 fcda 	bl	802a688 <vPortExitCritical>
				return pdPASS;
 8027cd4:	2301      	movs	r3, #1
 8027cd6:	e063      	b.n	8027da0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8027cd8:	687b      	ldr	r3, [r7, #4]
 8027cda:	2b00      	cmp	r3, #0
 8027cdc:	d103      	bne.n	8027ce6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8027cde:	f002 fcd3 	bl	802a688 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8027ce2:	2300      	movs	r3, #0
 8027ce4:	e05c      	b.n	8027da0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8027ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027ce8:	2b00      	cmp	r3, #0
 8027cea:	d106      	bne.n	8027cfa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8027cec:	f107 0314 	add.w	r3, r7, #20
 8027cf0:	4618      	mov	r0, r3
 8027cf2:	f001 fb0d 	bl	8029310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8027cf6:	2301      	movs	r3, #1
 8027cf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8027cfa:	f002 fcc5 	bl	802a688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8027cfe:	f001 f877 	bl	8028df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8027d02:	f002 fc93 	bl	802a62c <vPortEnterCritical>
 8027d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8027d0c:	b25b      	sxtb	r3, r3
 8027d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d12:	d103      	bne.n	8027d1c <xQueueGenericSend+0x164>
 8027d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027d16:	2200      	movs	r2, #0
 8027d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8027d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8027d22:	b25b      	sxtb	r3, r3
 8027d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d28:	d103      	bne.n	8027d32 <xQueueGenericSend+0x17a>
 8027d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027d2c:	2200      	movs	r2, #0
 8027d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8027d32:	f002 fca9 	bl	802a688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8027d36:	1d3a      	adds	r2, r7, #4
 8027d38:	f107 0314 	add.w	r3, r7, #20
 8027d3c:	4611      	mov	r1, r2
 8027d3e:	4618      	mov	r0, r3
 8027d40:	f001 fafc 	bl	802933c <xTaskCheckForTimeOut>
 8027d44:	4603      	mov	r3, r0
 8027d46:	2b00      	cmp	r3, #0
 8027d48:	d124      	bne.n	8027d94 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8027d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027d4c:	f000 fd01 	bl	8028752 <prvIsQueueFull>
 8027d50:	4603      	mov	r3, r0
 8027d52:	2b00      	cmp	r3, #0
 8027d54:	d018      	beq.n	8027d88 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8027d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027d58:	3310      	adds	r3, #16
 8027d5a:	687a      	ldr	r2, [r7, #4]
 8027d5c:	4611      	mov	r1, r2
 8027d5e:	4618      	mov	r0, r3
 8027d60:	f001 fa26 	bl	80291b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8027d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027d66:	f000 fc8c 	bl	8028682 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8027d6a:	f001 f84f 	bl	8028e0c <xTaskResumeAll>
 8027d6e:	4603      	mov	r3, r0
 8027d70:	2b00      	cmp	r3, #0
 8027d72:	f47f af7c 	bne.w	8027c6e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8027d76:	4b0c      	ldr	r3, [pc, #48]	; (8027da8 <xQueueGenericSend+0x1f0>)
 8027d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8027d7c:	601a      	str	r2, [r3, #0]
 8027d7e:	f3bf 8f4f 	dsb	sy
 8027d82:	f3bf 8f6f 	isb	sy
 8027d86:	e772      	b.n	8027c6e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8027d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027d8a:	f000 fc7a 	bl	8028682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8027d8e:	f001 f83d 	bl	8028e0c <xTaskResumeAll>
 8027d92:	e76c      	b.n	8027c6e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8027d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027d96:	f000 fc74 	bl	8028682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8027d9a:	f001 f837 	bl	8028e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8027d9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8027da0:	4618      	mov	r0, r3
 8027da2:	3738      	adds	r7, #56	; 0x38
 8027da4:	46bd      	mov	sp, r7
 8027da6:	bd80      	pop	{r7, pc}
 8027da8:	e000ed04 	.word	0xe000ed04

08027dac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8027dac:	b580      	push	{r7, lr}
 8027dae:	b08e      	sub	sp, #56	; 0x38
 8027db0:	af00      	add	r7, sp, #0
 8027db2:	60f8      	str	r0, [r7, #12]
 8027db4:	60b9      	str	r1, [r7, #8]
 8027db6:	607a      	str	r2, [r7, #4]
 8027db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8027dba:	68fb      	ldr	r3, [r7, #12]
 8027dbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8027dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027dc0:	2b00      	cmp	r3, #0
 8027dc2:	d109      	bne.n	8027dd8 <xQueueGenericSendFromISR+0x2c>
 8027dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027dc8:	f383 8811 	msr	BASEPRI, r3
 8027dcc:	f3bf 8f6f 	isb	sy
 8027dd0:	f3bf 8f4f 	dsb	sy
 8027dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8027dd6:	e7fe      	b.n	8027dd6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8027dd8:	68bb      	ldr	r3, [r7, #8]
 8027dda:	2b00      	cmp	r3, #0
 8027ddc:	d103      	bne.n	8027de6 <xQueueGenericSendFromISR+0x3a>
 8027dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027de2:	2b00      	cmp	r3, #0
 8027de4:	d101      	bne.n	8027dea <xQueueGenericSendFromISR+0x3e>
 8027de6:	2301      	movs	r3, #1
 8027de8:	e000      	b.n	8027dec <xQueueGenericSendFromISR+0x40>
 8027dea:	2300      	movs	r3, #0
 8027dec:	2b00      	cmp	r3, #0
 8027dee:	d109      	bne.n	8027e04 <xQueueGenericSendFromISR+0x58>
 8027df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027df4:	f383 8811 	msr	BASEPRI, r3
 8027df8:	f3bf 8f6f 	isb	sy
 8027dfc:	f3bf 8f4f 	dsb	sy
 8027e00:	623b      	str	r3, [r7, #32]
 8027e02:	e7fe      	b.n	8027e02 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8027e04:	683b      	ldr	r3, [r7, #0]
 8027e06:	2b02      	cmp	r3, #2
 8027e08:	d103      	bne.n	8027e12 <xQueueGenericSendFromISR+0x66>
 8027e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027e0e:	2b01      	cmp	r3, #1
 8027e10:	d101      	bne.n	8027e16 <xQueueGenericSendFromISR+0x6a>
 8027e12:	2301      	movs	r3, #1
 8027e14:	e000      	b.n	8027e18 <xQueueGenericSendFromISR+0x6c>
 8027e16:	2300      	movs	r3, #0
 8027e18:	2b00      	cmp	r3, #0
 8027e1a:	d109      	bne.n	8027e30 <xQueueGenericSendFromISR+0x84>
 8027e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027e20:	f383 8811 	msr	BASEPRI, r3
 8027e24:	f3bf 8f6f 	isb	sy
 8027e28:	f3bf 8f4f 	dsb	sy
 8027e2c:	61fb      	str	r3, [r7, #28]
 8027e2e:	e7fe      	b.n	8027e2e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8027e30:	f002 fcd8 	bl	802a7e4 <vPortValidateInterruptPriority>
	__asm volatile
 8027e34:	f3ef 8211 	mrs	r2, BASEPRI
 8027e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027e3c:	f383 8811 	msr	BASEPRI, r3
 8027e40:	f3bf 8f6f 	isb	sy
 8027e44:	f3bf 8f4f 	dsb	sy
 8027e48:	61ba      	str	r2, [r7, #24]
 8027e4a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8027e4c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8027e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8027e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8027e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027e58:	429a      	cmp	r2, r3
 8027e5a:	d302      	bcc.n	8027e62 <xQueueGenericSendFromISR+0xb6>
 8027e5c:	683b      	ldr	r3, [r7, #0]
 8027e5e:	2b02      	cmp	r3, #2
 8027e60:	d12c      	bne.n	8027ebc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8027e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8027e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8027e6c:	683a      	ldr	r2, [r7, #0]
 8027e6e:	68b9      	ldr	r1, [r7, #8]
 8027e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8027e72:	f000 fb76 	bl	8028562 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8027e76:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8027e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027e7e:	d112      	bne.n	8027ea6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8027e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027e84:	2b00      	cmp	r3, #0
 8027e86:	d016      	beq.n	8027eb6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8027e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027e8a:	3324      	adds	r3, #36	; 0x24
 8027e8c:	4618      	mov	r0, r3
 8027e8e:	f001 f9dd 	bl	802924c <xTaskRemoveFromEventList>
 8027e92:	4603      	mov	r3, r0
 8027e94:	2b00      	cmp	r3, #0
 8027e96:	d00e      	beq.n	8027eb6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8027e98:	687b      	ldr	r3, [r7, #4]
 8027e9a:	2b00      	cmp	r3, #0
 8027e9c:	d00b      	beq.n	8027eb6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8027e9e:	687b      	ldr	r3, [r7, #4]
 8027ea0:	2201      	movs	r2, #1
 8027ea2:	601a      	str	r2, [r3, #0]
 8027ea4:	e007      	b.n	8027eb6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8027ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8027eaa:	3301      	adds	r3, #1
 8027eac:	b2db      	uxtb	r3, r3
 8027eae:	b25a      	sxtb	r2, r3
 8027eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8027eb6:	2301      	movs	r3, #1
 8027eb8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8027eba:	e001      	b.n	8027ec0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8027ebc:	2300      	movs	r3, #0
 8027ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8027ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ec2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8027ec4:	693b      	ldr	r3, [r7, #16]
 8027ec6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8027eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8027ecc:	4618      	mov	r0, r3
 8027ece:	3738      	adds	r7, #56	; 0x38
 8027ed0:	46bd      	mov	sp, r7
 8027ed2:	bd80      	pop	{r7, pc}

08027ed4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8027ed4:	b580      	push	{r7, lr}
 8027ed6:	b08e      	sub	sp, #56	; 0x38
 8027ed8:	af00      	add	r7, sp, #0
 8027eda:	6078      	str	r0, [r7, #4]
 8027edc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8027ede:	687b      	ldr	r3, [r7, #4]
 8027ee0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8027ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027ee4:	2b00      	cmp	r3, #0
 8027ee6:	d109      	bne.n	8027efc <xQueueGiveFromISR+0x28>
	__asm volatile
 8027ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027eec:	f383 8811 	msr	BASEPRI, r3
 8027ef0:	f3bf 8f6f 	isb	sy
 8027ef4:	f3bf 8f4f 	dsb	sy
 8027ef8:	623b      	str	r3, [r7, #32]
 8027efa:	e7fe      	b.n	8027efa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8027efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027f00:	2b00      	cmp	r3, #0
 8027f02:	d009      	beq.n	8027f18 <xQueueGiveFromISR+0x44>
 8027f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027f08:	f383 8811 	msr	BASEPRI, r3
 8027f0c:	f3bf 8f6f 	isb	sy
 8027f10:	f3bf 8f4f 	dsb	sy
 8027f14:	61fb      	str	r3, [r7, #28]
 8027f16:	e7fe      	b.n	8027f16 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8027f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f1a:	681b      	ldr	r3, [r3, #0]
 8027f1c:	2b00      	cmp	r3, #0
 8027f1e:	d103      	bne.n	8027f28 <xQueueGiveFromISR+0x54>
 8027f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f22:	689b      	ldr	r3, [r3, #8]
 8027f24:	2b00      	cmp	r3, #0
 8027f26:	d101      	bne.n	8027f2c <xQueueGiveFromISR+0x58>
 8027f28:	2301      	movs	r3, #1
 8027f2a:	e000      	b.n	8027f2e <xQueueGiveFromISR+0x5a>
 8027f2c:	2300      	movs	r3, #0
 8027f2e:	2b00      	cmp	r3, #0
 8027f30:	d109      	bne.n	8027f46 <xQueueGiveFromISR+0x72>
 8027f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027f36:	f383 8811 	msr	BASEPRI, r3
 8027f3a:	f3bf 8f6f 	isb	sy
 8027f3e:	f3bf 8f4f 	dsb	sy
 8027f42:	61bb      	str	r3, [r7, #24]
 8027f44:	e7fe      	b.n	8027f44 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8027f46:	f002 fc4d 	bl	802a7e4 <vPortValidateInterruptPriority>
	__asm volatile
 8027f4a:	f3ef 8211 	mrs	r2, BASEPRI
 8027f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8027f52:	f383 8811 	msr	BASEPRI, r3
 8027f56:	f3bf 8f6f 	isb	sy
 8027f5a:	f3bf 8f4f 	dsb	sy
 8027f5e:	617a      	str	r2, [r7, #20]
 8027f60:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8027f62:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8027f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8027f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8027f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027f72:	429a      	cmp	r2, r3
 8027f74:	d22b      	bcs.n	8027fce <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8027f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8027f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8027f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f82:	1c5a      	adds	r2, r3, #1
 8027f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8027f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8027f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027f90:	d112      	bne.n	8027fb8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8027f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027f96:	2b00      	cmp	r3, #0
 8027f98:	d016      	beq.n	8027fc8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8027f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027f9c:	3324      	adds	r3, #36	; 0x24
 8027f9e:	4618      	mov	r0, r3
 8027fa0:	f001 f954 	bl	802924c <xTaskRemoveFromEventList>
 8027fa4:	4603      	mov	r3, r0
 8027fa6:	2b00      	cmp	r3, #0
 8027fa8:	d00e      	beq.n	8027fc8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8027faa:	683b      	ldr	r3, [r7, #0]
 8027fac:	2b00      	cmp	r3, #0
 8027fae:	d00b      	beq.n	8027fc8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8027fb0:	683b      	ldr	r3, [r7, #0]
 8027fb2:	2201      	movs	r2, #1
 8027fb4:	601a      	str	r2, [r3, #0]
 8027fb6:	e007      	b.n	8027fc8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8027fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8027fbc:	3301      	adds	r3, #1
 8027fbe:	b2db      	uxtb	r3, r3
 8027fc0:	b25a      	sxtb	r2, r3
 8027fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8027fc8:	2301      	movs	r3, #1
 8027fca:	637b      	str	r3, [r7, #52]	; 0x34
 8027fcc:	e001      	b.n	8027fd2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8027fce:	2300      	movs	r3, #0
 8027fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8027fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fd4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8027fd6:	68fb      	ldr	r3, [r7, #12]
 8027fd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8027fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8027fde:	4618      	mov	r0, r3
 8027fe0:	3738      	adds	r7, #56	; 0x38
 8027fe2:	46bd      	mov	sp, r7
 8027fe4:	bd80      	pop	{r7, pc}
	...

08027fe8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8027fe8:	b580      	push	{r7, lr}
 8027fea:	b08c      	sub	sp, #48	; 0x30
 8027fec:	af00      	add	r7, sp, #0
 8027fee:	60f8      	str	r0, [r7, #12]
 8027ff0:	60b9      	str	r1, [r7, #8]
 8027ff2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8027ff4:	2300      	movs	r3, #0
 8027ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8027ff8:	68fb      	ldr	r3, [r7, #12]
 8027ffa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8027ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027ffe:	2b00      	cmp	r3, #0
 8028000:	d109      	bne.n	8028016 <xQueueReceive+0x2e>
	__asm volatile
 8028002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028006:	f383 8811 	msr	BASEPRI, r3
 802800a:	f3bf 8f6f 	isb	sy
 802800e:	f3bf 8f4f 	dsb	sy
 8028012:	623b      	str	r3, [r7, #32]
 8028014:	e7fe      	b.n	8028014 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8028016:	68bb      	ldr	r3, [r7, #8]
 8028018:	2b00      	cmp	r3, #0
 802801a:	d103      	bne.n	8028024 <xQueueReceive+0x3c>
 802801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028020:	2b00      	cmp	r3, #0
 8028022:	d101      	bne.n	8028028 <xQueueReceive+0x40>
 8028024:	2301      	movs	r3, #1
 8028026:	e000      	b.n	802802a <xQueueReceive+0x42>
 8028028:	2300      	movs	r3, #0
 802802a:	2b00      	cmp	r3, #0
 802802c:	d109      	bne.n	8028042 <xQueueReceive+0x5a>
 802802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028032:	f383 8811 	msr	BASEPRI, r3
 8028036:	f3bf 8f6f 	isb	sy
 802803a:	f3bf 8f4f 	dsb	sy
 802803e:	61fb      	str	r3, [r7, #28]
 8028040:	e7fe      	b.n	8028040 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8028042:	f001 fac9 	bl	80295d8 <xTaskGetSchedulerState>
 8028046:	4603      	mov	r3, r0
 8028048:	2b00      	cmp	r3, #0
 802804a:	d102      	bne.n	8028052 <xQueueReceive+0x6a>
 802804c:	687b      	ldr	r3, [r7, #4]
 802804e:	2b00      	cmp	r3, #0
 8028050:	d101      	bne.n	8028056 <xQueueReceive+0x6e>
 8028052:	2301      	movs	r3, #1
 8028054:	e000      	b.n	8028058 <xQueueReceive+0x70>
 8028056:	2300      	movs	r3, #0
 8028058:	2b00      	cmp	r3, #0
 802805a:	d109      	bne.n	8028070 <xQueueReceive+0x88>
 802805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028060:	f383 8811 	msr	BASEPRI, r3
 8028064:	f3bf 8f6f 	isb	sy
 8028068:	f3bf 8f4f 	dsb	sy
 802806c:	61bb      	str	r3, [r7, #24]
 802806e:	e7fe      	b.n	802806e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8028070:	f002 fadc 	bl	802a62c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8028074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028078:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802807c:	2b00      	cmp	r3, #0
 802807e:	d01f      	beq.n	80280c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8028080:	68b9      	ldr	r1, [r7, #8]
 8028082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028084:	f000 fad7 	bl	8028636 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8028088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802808a:	1e5a      	subs	r2, r3, #1
 802808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802808e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8028090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028092:	691b      	ldr	r3, [r3, #16]
 8028094:	2b00      	cmp	r3, #0
 8028096:	d00f      	beq.n	80280b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8028098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802809a:	3310      	adds	r3, #16
 802809c:	4618      	mov	r0, r3
 802809e:	f001 f8d5 	bl	802924c <xTaskRemoveFromEventList>
 80280a2:	4603      	mov	r3, r0
 80280a4:	2b00      	cmp	r3, #0
 80280a6:	d007      	beq.n	80280b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80280a8:	4b3c      	ldr	r3, [pc, #240]	; (802819c <xQueueReceive+0x1b4>)
 80280aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80280ae:	601a      	str	r2, [r3, #0]
 80280b0:	f3bf 8f4f 	dsb	sy
 80280b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80280b8:	f002 fae6 	bl	802a688 <vPortExitCritical>
				return pdPASS;
 80280bc:	2301      	movs	r3, #1
 80280be:	e069      	b.n	8028194 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80280c0:	687b      	ldr	r3, [r7, #4]
 80280c2:	2b00      	cmp	r3, #0
 80280c4:	d103      	bne.n	80280ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80280c6:	f002 fadf 	bl	802a688 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80280ca:	2300      	movs	r3, #0
 80280cc:	e062      	b.n	8028194 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80280ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80280d0:	2b00      	cmp	r3, #0
 80280d2:	d106      	bne.n	80280e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80280d4:	f107 0310 	add.w	r3, r7, #16
 80280d8:	4618      	mov	r0, r3
 80280da:	f001 f919 	bl	8029310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80280de:	2301      	movs	r3, #1
 80280e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80280e2:	f002 fad1 	bl	802a688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80280e6:	f000 fe83 	bl	8028df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80280ea:	f002 fa9f 	bl	802a62c <vPortEnterCritical>
 80280ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80280f4:	b25b      	sxtb	r3, r3
 80280f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80280fa:	d103      	bne.n	8028104 <xQueueReceive+0x11c>
 80280fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280fe:	2200      	movs	r2, #0
 8028100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802810a:	b25b      	sxtb	r3, r3
 802810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028110:	d103      	bne.n	802811a <xQueueReceive+0x132>
 8028112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028114:	2200      	movs	r2, #0
 8028116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802811a:	f002 fab5 	bl	802a688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802811e:	1d3a      	adds	r2, r7, #4
 8028120:	f107 0310 	add.w	r3, r7, #16
 8028124:	4611      	mov	r1, r2
 8028126:	4618      	mov	r0, r3
 8028128:	f001 f908 	bl	802933c <xTaskCheckForTimeOut>
 802812c:	4603      	mov	r3, r0
 802812e:	2b00      	cmp	r3, #0
 8028130:	d123      	bne.n	802817a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8028132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028134:	f000 faf7 	bl	8028726 <prvIsQueueEmpty>
 8028138:	4603      	mov	r3, r0
 802813a:	2b00      	cmp	r3, #0
 802813c:	d017      	beq.n	802816e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028140:	3324      	adds	r3, #36	; 0x24
 8028142:	687a      	ldr	r2, [r7, #4]
 8028144:	4611      	mov	r1, r2
 8028146:	4618      	mov	r0, r3
 8028148:	f001 f832 	bl	80291b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802814c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802814e:	f000 fa98 	bl	8028682 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8028152:	f000 fe5b 	bl	8028e0c <xTaskResumeAll>
 8028156:	4603      	mov	r3, r0
 8028158:	2b00      	cmp	r3, #0
 802815a:	d189      	bne.n	8028070 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 802815c:	4b0f      	ldr	r3, [pc, #60]	; (802819c <xQueueReceive+0x1b4>)
 802815e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028162:	601a      	str	r2, [r3, #0]
 8028164:	f3bf 8f4f 	dsb	sy
 8028168:	f3bf 8f6f 	isb	sy
 802816c:	e780      	b.n	8028070 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 802816e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028170:	f000 fa87 	bl	8028682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8028174:	f000 fe4a 	bl	8028e0c <xTaskResumeAll>
 8028178:	e77a      	b.n	8028070 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 802817a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802817c:	f000 fa81 	bl	8028682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8028180:	f000 fe44 	bl	8028e0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8028184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028186:	f000 face 	bl	8028726 <prvIsQueueEmpty>
 802818a:	4603      	mov	r3, r0
 802818c:	2b00      	cmp	r3, #0
 802818e:	f43f af6f 	beq.w	8028070 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8028192:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8028194:	4618      	mov	r0, r3
 8028196:	3730      	adds	r7, #48	; 0x30
 8028198:	46bd      	mov	sp, r7
 802819a:	bd80      	pop	{r7, pc}
 802819c:	e000ed04 	.word	0xe000ed04

080281a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80281a0:	b580      	push	{r7, lr}
 80281a2:	b08e      	sub	sp, #56	; 0x38
 80281a4:	af00      	add	r7, sp, #0
 80281a6:	6078      	str	r0, [r7, #4]
 80281a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80281aa:	2300      	movs	r3, #0
 80281ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80281ae:	687b      	ldr	r3, [r7, #4]
 80281b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80281b2:	2300      	movs	r3, #0
 80281b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80281b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80281b8:	2b00      	cmp	r3, #0
 80281ba:	d109      	bne.n	80281d0 <xQueueSemaphoreTake+0x30>
 80281bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80281c0:	f383 8811 	msr	BASEPRI, r3
 80281c4:	f3bf 8f6f 	isb	sy
 80281c8:	f3bf 8f4f 	dsb	sy
 80281cc:	623b      	str	r3, [r7, #32]
 80281ce:	e7fe      	b.n	80281ce <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80281d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80281d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80281d4:	2b00      	cmp	r3, #0
 80281d6:	d009      	beq.n	80281ec <xQueueSemaphoreTake+0x4c>
 80281d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80281dc:	f383 8811 	msr	BASEPRI, r3
 80281e0:	f3bf 8f6f 	isb	sy
 80281e4:	f3bf 8f4f 	dsb	sy
 80281e8:	61fb      	str	r3, [r7, #28]
 80281ea:	e7fe      	b.n	80281ea <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80281ec:	f001 f9f4 	bl	80295d8 <xTaskGetSchedulerState>
 80281f0:	4603      	mov	r3, r0
 80281f2:	2b00      	cmp	r3, #0
 80281f4:	d102      	bne.n	80281fc <xQueueSemaphoreTake+0x5c>
 80281f6:	683b      	ldr	r3, [r7, #0]
 80281f8:	2b00      	cmp	r3, #0
 80281fa:	d101      	bne.n	8028200 <xQueueSemaphoreTake+0x60>
 80281fc:	2301      	movs	r3, #1
 80281fe:	e000      	b.n	8028202 <xQueueSemaphoreTake+0x62>
 8028200:	2300      	movs	r3, #0
 8028202:	2b00      	cmp	r3, #0
 8028204:	d109      	bne.n	802821a <xQueueSemaphoreTake+0x7a>
 8028206:	f04f 0350 	mov.w	r3, #80	; 0x50
 802820a:	f383 8811 	msr	BASEPRI, r3
 802820e:	f3bf 8f6f 	isb	sy
 8028212:	f3bf 8f4f 	dsb	sy
 8028216:	61bb      	str	r3, [r7, #24]
 8028218:	e7fe      	b.n	8028218 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802821a:	f002 fa07 	bl	802a62c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 802821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028222:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8028224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028226:	2b00      	cmp	r3, #0
 8028228:	d024      	beq.n	8028274 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 802822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802822c:	1e5a      	subs	r2, r3, #1
 802822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028230:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8028232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028234:	681b      	ldr	r3, [r3, #0]
 8028236:	2b00      	cmp	r3, #0
 8028238:	d104      	bne.n	8028244 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 802823a:	f001 fb3f 	bl	80298bc <pvTaskIncrementMutexHeldCount>
 802823e:	4602      	mov	r2, r0
 8028240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028242:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8028244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028246:	691b      	ldr	r3, [r3, #16]
 8028248:	2b00      	cmp	r3, #0
 802824a:	d00f      	beq.n	802826c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802824e:	3310      	adds	r3, #16
 8028250:	4618      	mov	r0, r3
 8028252:	f000 fffb 	bl	802924c <xTaskRemoveFromEventList>
 8028256:	4603      	mov	r3, r0
 8028258:	2b00      	cmp	r3, #0
 802825a:	d007      	beq.n	802826c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 802825c:	4b53      	ldr	r3, [pc, #332]	; (80283ac <xQueueSemaphoreTake+0x20c>)
 802825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028262:	601a      	str	r2, [r3, #0]
 8028264:	f3bf 8f4f 	dsb	sy
 8028268:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802826c:	f002 fa0c 	bl	802a688 <vPortExitCritical>
				return pdPASS;
 8028270:	2301      	movs	r3, #1
 8028272:	e096      	b.n	80283a2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8028274:	683b      	ldr	r3, [r7, #0]
 8028276:	2b00      	cmp	r3, #0
 8028278:	d110      	bne.n	802829c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 802827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802827c:	2b00      	cmp	r3, #0
 802827e:	d009      	beq.n	8028294 <xQueueSemaphoreTake+0xf4>
 8028280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028284:	f383 8811 	msr	BASEPRI, r3
 8028288:	f3bf 8f6f 	isb	sy
 802828c:	f3bf 8f4f 	dsb	sy
 8028290:	617b      	str	r3, [r7, #20]
 8028292:	e7fe      	b.n	8028292 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8028294:	f002 f9f8 	bl	802a688 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8028298:	2300      	movs	r3, #0
 802829a:	e082      	b.n	80283a2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 802829c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802829e:	2b00      	cmp	r3, #0
 80282a0:	d106      	bne.n	80282b0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80282a2:	f107 030c 	add.w	r3, r7, #12
 80282a6:	4618      	mov	r0, r3
 80282a8:	f001 f832 	bl	8029310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80282ac:	2301      	movs	r3, #1
 80282ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80282b0:	f002 f9ea 	bl	802a688 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80282b4:	f000 fd9c 	bl	8028df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80282b8:	f002 f9b8 	bl	802a62c <vPortEnterCritical>
 80282bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80282be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80282c2:	b25b      	sxtb	r3, r3
 80282c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80282c8:	d103      	bne.n	80282d2 <xQueueSemaphoreTake+0x132>
 80282ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80282cc:	2200      	movs	r2, #0
 80282ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80282d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80282d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80282d8:	b25b      	sxtb	r3, r3
 80282da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80282de:	d103      	bne.n	80282e8 <xQueueSemaphoreTake+0x148>
 80282e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80282e2:	2200      	movs	r2, #0
 80282e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80282e8:	f002 f9ce 	bl	802a688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80282ec:	463a      	mov	r2, r7
 80282ee:	f107 030c 	add.w	r3, r7, #12
 80282f2:	4611      	mov	r1, r2
 80282f4:	4618      	mov	r0, r3
 80282f6:	f001 f821 	bl	802933c <xTaskCheckForTimeOut>
 80282fa:	4603      	mov	r3, r0
 80282fc:	2b00      	cmp	r3, #0
 80282fe:	d132      	bne.n	8028366 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8028300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8028302:	f000 fa10 	bl	8028726 <prvIsQueueEmpty>
 8028306:	4603      	mov	r3, r0
 8028308:	2b00      	cmp	r3, #0
 802830a:	d026      	beq.n	802835a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802830c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802830e:	681b      	ldr	r3, [r3, #0]
 8028310:	2b00      	cmp	r3, #0
 8028312:	d109      	bne.n	8028328 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8028314:	f002 f98a 	bl	802a62c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8028318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802831a:	689b      	ldr	r3, [r3, #8]
 802831c:	4618      	mov	r0, r3
 802831e:	f001 f979 	bl	8029614 <xTaskPriorityInherit>
 8028322:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8028324:	f002 f9b0 	bl	802a688 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8028328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802832a:	3324      	adds	r3, #36	; 0x24
 802832c:	683a      	ldr	r2, [r7, #0]
 802832e:	4611      	mov	r1, r2
 8028330:	4618      	mov	r0, r3
 8028332:	f000 ff3d 	bl	80291b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8028336:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8028338:	f000 f9a3 	bl	8028682 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802833c:	f000 fd66 	bl	8028e0c <xTaskResumeAll>
 8028340:	4603      	mov	r3, r0
 8028342:	2b00      	cmp	r3, #0
 8028344:	f47f af69 	bne.w	802821a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8028348:	4b18      	ldr	r3, [pc, #96]	; (80283ac <xQueueSemaphoreTake+0x20c>)
 802834a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802834e:	601a      	str	r2, [r3, #0]
 8028350:	f3bf 8f4f 	dsb	sy
 8028354:	f3bf 8f6f 	isb	sy
 8028358:	e75f      	b.n	802821a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 802835a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802835c:	f000 f991 	bl	8028682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8028360:	f000 fd54 	bl	8028e0c <xTaskResumeAll>
 8028364:	e759      	b.n	802821a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8028366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8028368:	f000 f98b 	bl	8028682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802836c:	f000 fd4e 	bl	8028e0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8028370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8028372:	f000 f9d8 	bl	8028726 <prvIsQueueEmpty>
 8028376:	4603      	mov	r3, r0
 8028378:	2b00      	cmp	r3, #0
 802837a:	f43f af4e 	beq.w	802821a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 802837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028380:	2b00      	cmp	r3, #0
 8028382:	d00d      	beq.n	80283a0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8028384:	f002 f952 	bl	802a62c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8028388:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802838a:	f000 f8d2 	bl	8028532 <prvGetDisinheritPriorityAfterTimeout>
 802838e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8028390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028392:	689b      	ldr	r3, [r3, #8]
 8028394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028396:	4618      	mov	r0, r3
 8028398:	f001 fa10 	bl	80297bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 802839c:	f002 f974 	bl	802a688 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80283a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80283a2:	4618      	mov	r0, r3
 80283a4:	3738      	adds	r7, #56	; 0x38
 80283a6:	46bd      	mov	sp, r7
 80283a8:	bd80      	pop	{r7, pc}
 80283aa:	bf00      	nop
 80283ac:	e000ed04 	.word	0xe000ed04

080283b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80283b0:	b580      	push	{r7, lr}
 80283b2:	b08e      	sub	sp, #56	; 0x38
 80283b4:	af00      	add	r7, sp, #0
 80283b6:	60f8      	str	r0, [r7, #12]
 80283b8:	60b9      	str	r1, [r7, #8]
 80283ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80283bc:	68fb      	ldr	r3, [r7, #12]
 80283be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80283c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80283c2:	2b00      	cmp	r3, #0
 80283c4:	d109      	bne.n	80283da <xQueueReceiveFromISR+0x2a>
 80283c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80283ca:	f383 8811 	msr	BASEPRI, r3
 80283ce:	f3bf 8f6f 	isb	sy
 80283d2:	f3bf 8f4f 	dsb	sy
 80283d6:	623b      	str	r3, [r7, #32]
 80283d8:	e7fe      	b.n	80283d8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80283da:	68bb      	ldr	r3, [r7, #8]
 80283dc:	2b00      	cmp	r3, #0
 80283de:	d103      	bne.n	80283e8 <xQueueReceiveFromISR+0x38>
 80283e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80283e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80283e4:	2b00      	cmp	r3, #0
 80283e6:	d101      	bne.n	80283ec <xQueueReceiveFromISR+0x3c>
 80283e8:	2301      	movs	r3, #1
 80283ea:	e000      	b.n	80283ee <xQueueReceiveFromISR+0x3e>
 80283ec:	2300      	movs	r3, #0
 80283ee:	2b00      	cmp	r3, #0
 80283f0:	d109      	bne.n	8028406 <xQueueReceiveFromISR+0x56>
 80283f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80283f6:	f383 8811 	msr	BASEPRI, r3
 80283fa:	f3bf 8f6f 	isb	sy
 80283fe:	f3bf 8f4f 	dsb	sy
 8028402:	61fb      	str	r3, [r7, #28]
 8028404:	e7fe      	b.n	8028404 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8028406:	f002 f9ed 	bl	802a7e4 <vPortValidateInterruptPriority>
	__asm volatile
 802840a:	f3ef 8211 	mrs	r2, BASEPRI
 802840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028412:	f383 8811 	msr	BASEPRI, r3
 8028416:	f3bf 8f6f 	isb	sy
 802841a:	f3bf 8f4f 	dsb	sy
 802841e:	61ba      	str	r2, [r7, #24]
 8028420:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8028422:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8028424:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8028426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802842a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802842e:	2b00      	cmp	r3, #0
 8028430:	d02f      	beq.n	8028492 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8028432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8028438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 802843c:	68b9      	ldr	r1, [r7, #8]
 802843e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8028440:	f000 f8f9 	bl	8028636 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8028444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028446:	1e5a      	subs	r2, r3, #1
 8028448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802844a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 802844c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8028450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028454:	d112      	bne.n	802847c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8028456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028458:	691b      	ldr	r3, [r3, #16]
 802845a:	2b00      	cmp	r3, #0
 802845c:	d016      	beq.n	802848c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802845e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028460:	3310      	adds	r3, #16
 8028462:	4618      	mov	r0, r3
 8028464:	f000 fef2 	bl	802924c <xTaskRemoveFromEventList>
 8028468:	4603      	mov	r3, r0
 802846a:	2b00      	cmp	r3, #0
 802846c:	d00e      	beq.n	802848c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 802846e:	687b      	ldr	r3, [r7, #4]
 8028470:	2b00      	cmp	r3, #0
 8028472:	d00b      	beq.n	802848c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8028474:	687b      	ldr	r3, [r7, #4]
 8028476:	2201      	movs	r2, #1
 8028478:	601a      	str	r2, [r3, #0]
 802847a:	e007      	b.n	802848c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 802847c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8028480:	3301      	adds	r3, #1
 8028482:	b2db      	uxtb	r3, r3
 8028484:	b25a      	sxtb	r2, r3
 8028486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 802848c:	2301      	movs	r3, #1
 802848e:	637b      	str	r3, [r7, #52]	; 0x34
 8028490:	e001      	b.n	8028496 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8028492:	2300      	movs	r3, #0
 8028494:	637b      	str	r3, [r7, #52]	; 0x34
 8028496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028498:	613b      	str	r3, [r7, #16]
	__asm volatile
 802849a:	693b      	ldr	r3, [r7, #16]
 802849c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80284a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80284a2:	4618      	mov	r0, r3
 80284a4:	3738      	adds	r7, #56	; 0x38
 80284a6:	46bd      	mov	sp, r7
 80284a8:	bd80      	pop	{r7, pc}

080284aa <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80284aa:	b580      	push	{r7, lr}
 80284ac:	b086      	sub	sp, #24
 80284ae:	af00      	add	r7, sp, #0
 80284b0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80284b2:	687b      	ldr	r3, [r7, #4]
 80284b4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80284b6:	697b      	ldr	r3, [r7, #20]
 80284b8:	2b00      	cmp	r3, #0
 80284ba:	d109      	bne.n	80284d0 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 80284bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80284c0:	f383 8811 	msr	BASEPRI, r3
 80284c4:	f3bf 8f6f 	isb	sy
 80284c8:	f3bf 8f4f 	dsb	sy
 80284cc:	60fb      	str	r3, [r7, #12]
 80284ce:	e7fe      	b.n	80284ce <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 80284d0:	f002 f8ac 	bl	802a62c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80284d4:	697b      	ldr	r3, [r7, #20]
 80284d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80284d8:	697b      	ldr	r3, [r7, #20]
 80284da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80284dc:	1ad3      	subs	r3, r2, r3
 80284de:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80284e0:	f002 f8d2 	bl	802a688 <vPortExitCritical>

	return uxReturn;
 80284e4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80284e6:	4618      	mov	r0, r3
 80284e8:	3718      	adds	r7, #24
 80284ea:	46bd      	mov	sp, r7
 80284ec:	bd80      	pop	{r7, pc}

080284ee <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80284ee:	b580      	push	{r7, lr}
 80284f0:	b084      	sub	sp, #16
 80284f2:	af00      	add	r7, sp, #0
 80284f4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80284f6:	687b      	ldr	r3, [r7, #4]
 80284f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80284fa:	68fb      	ldr	r3, [r7, #12]
 80284fc:	2b00      	cmp	r3, #0
 80284fe:	d109      	bne.n	8028514 <vQueueDelete+0x26>
 8028500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028504:	f383 8811 	msr	BASEPRI, r3
 8028508:	f3bf 8f6f 	isb	sy
 802850c:	f3bf 8f4f 	dsb	sy
 8028510:	60bb      	str	r3, [r7, #8]
 8028512:	e7fe      	b.n	8028512 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8028514:	68f8      	ldr	r0, [r7, #12]
 8028516:	f000 f95d 	bl	80287d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 802851a:	68fb      	ldr	r3, [r7, #12]
 802851c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8028520:	2b00      	cmp	r3, #0
 8028522:	d102      	bne.n	802852a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8028524:	68f8      	ldr	r0, [r7, #12]
 8028526:	f002 fa5d 	bl	802a9e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 802852a:	bf00      	nop
 802852c:	3710      	adds	r7, #16
 802852e:	46bd      	mov	sp, r7
 8028530:	bd80      	pop	{r7, pc}

08028532 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8028532:	b480      	push	{r7}
 8028534:	b085      	sub	sp, #20
 8028536:	af00      	add	r7, sp, #0
 8028538:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 802853a:	687b      	ldr	r3, [r7, #4]
 802853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802853e:	2b00      	cmp	r3, #0
 8028540:	d006      	beq.n	8028550 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8028542:	687b      	ldr	r3, [r7, #4]
 8028544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028546:	681b      	ldr	r3, [r3, #0]
 8028548:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802854c:	60fb      	str	r3, [r7, #12]
 802854e:	e001      	b.n	8028554 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8028550:	2300      	movs	r3, #0
 8028552:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8028554:	68fb      	ldr	r3, [r7, #12]
	}
 8028556:	4618      	mov	r0, r3
 8028558:	3714      	adds	r7, #20
 802855a:	46bd      	mov	sp, r7
 802855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028560:	4770      	bx	lr

08028562 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8028562:	b580      	push	{r7, lr}
 8028564:	b086      	sub	sp, #24
 8028566:	af00      	add	r7, sp, #0
 8028568:	60f8      	str	r0, [r7, #12]
 802856a:	60b9      	str	r1, [r7, #8]
 802856c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 802856e:	2300      	movs	r3, #0
 8028570:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8028572:	68fb      	ldr	r3, [r7, #12]
 8028574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028576:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8028578:	68fb      	ldr	r3, [r7, #12]
 802857a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802857c:	2b00      	cmp	r3, #0
 802857e:	d10d      	bne.n	802859c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8028580:	68fb      	ldr	r3, [r7, #12]
 8028582:	681b      	ldr	r3, [r3, #0]
 8028584:	2b00      	cmp	r3, #0
 8028586:	d14d      	bne.n	8028624 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8028588:	68fb      	ldr	r3, [r7, #12]
 802858a:	689b      	ldr	r3, [r3, #8]
 802858c:	4618      	mov	r0, r3
 802858e:	f001 f8a9 	bl	80296e4 <xTaskPriorityDisinherit>
 8028592:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8028594:	68fb      	ldr	r3, [r7, #12]
 8028596:	2200      	movs	r2, #0
 8028598:	609a      	str	r2, [r3, #8]
 802859a:	e043      	b.n	8028624 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802859c:	687b      	ldr	r3, [r7, #4]
 802859e:	2b00      	cmp	r3, #0
 80285a0:	d119      	bne.n	80285d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80285a2:	68fb      	ldr	r3, [r7, #12]
 80285a4:	6858      	ldr	r0, [r3, #4]
 80285a6:	68fb      	ldr	r3, [r7, #12]
 80285a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80285aa:	461a      	mov	r2, r3
 80285ac:	68b9      	ldr	r1, [r7, #8]
 80285ae:	f005 fb3f 	bl	802dc30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80285b2:	68fb      	ldr	r3, [r7, #12]
 80285b4:	685a      	ldr	r2, [r3, #4]
 80285b6:	68fb      	ldr	r3, [r7, #12]
 80285b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80285ba:	441a      	add	r2, r3
 80285bc:	68fb      	ldr	r3, [r7, #12]
 80285be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80285c0:	68fb      	ldr	r3, [r7, #12]
 80285c2:	685a      	ldr	r2, [r3, #4]
 80285c4:	68fb      	ldr	r3, [r7, #12]
 80285c6:	689b      	ldr	r3, [r3, #8]
 80285c8:	429a      	cmp	r2, r3
 80285ca:	d32b      	bcc.n	8028624 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80285cc:	68fb      	ldr	r3, [r7, #12]
 80285ce:	681a      	ldr	r2, [r3, #0]
 80285d0:	68fb      	ldr	r3, [r7, #12]
 80285d2:	605a      	str	r2, [r3, #4]
 80285d4:	e026      	b.n	8028624 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80285d6:	68fb      	ldr	r3, [r7, #12]
 80285d8:	68d8      	ldr	r0, [r3, #12]
 80285da:	68fb      	ldr	r3, [r7, #12]
 80285dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80285de:	461a      	mov	r2, r3
 80285e0:	68b9      	ldr	r1, [r7, #8]
 80285e2:	f005 fb25 	bl	802dc30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80285e6:	68fb      	ldr	r3, [r7, #12]
 80285e8:	68da      	ldr	r2, [r3, #12]
 80285ea:	68fb      	ldr	r3, [r7, #12]
 80285ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80285ee:	425b      	negs	r3, r3
 80285f0:	441a      	add	r2, r3
 80285f2:	68fb      	ldr	r3, [r7, #12]
 80285f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80285f6:	68fb      	ldr	r3, [r7, #12]
 80285f8:	68da      	ldr	r2, [r3, #12]
 80285fa:	68fb      	ldr	r3, [r7, #12]
 80285fc:	681b      	ldr	r3, [r3, #0]
 80285fe:	429a      	cmp	r2, r3
 8028600:	d207      	bcs.n	8028612 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8028602:	68fb      	ldr	r3, [r7, #12]
 8028604:	689a      	ldr	r2, [r3, #8]
 8028606:	68fb      	ldr	r3, [r7, #12]
 8028608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802860a:	425b      	negs	r3, r3
 802860c:	441a      	add	r2, r3
 802860e:	68fb      	ldr	r3, [r7, #12]
 8028610:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8028612:	687b      	ldr	r3, [r7, #4]
 8028614:	2b02      	cmp	r3, #2
 8028616:	d105      	bne.n	8028624 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8028618:	693b      	ldr	r3, [r7, #16]
 802861a:	2b00      	cmp	r3, #0
 802861c:	d002      	beq.n	8028624 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802861e:	693b      	ldr	r3, [r7, #16]
 8028620:	3b01      	subs	r3, #1
 8028622:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8028624:	693b      	ldr	r3, [r7, #16]
 8028626:	1c5a      	adds	r2, r3, #1
 8028628:	68fb      	ldr	r3, [r7, #12]
 802862a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 802862c:	697b      	ldr	r3, [r7, #20]
}
 802862e:	4618      	mov	r0, r3
 8028630:	3718      	adds	r7, #24
 8028632:	46bd      	mov	sp, r7
 8028634:	bd80      	pop	{r7, pc}

08028636 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8028636:	b580      	push	{r7, lr}
 8028638:	b082      	sub	sp, #8
 802863a:	af00      	add	r7, sp, #0
 802863c:	6078      	str	r0, [r7, #4]
 802863e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8028640:	687b      	ldr	r3, [r7, #4]
 8028642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028644:	2b00      	cmp	r3, #0
 8028646:	d018      	beq.n	802867a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	68da      	ldr	r2, [r3, #12]
 802864c:	687b      	ldr	r3, [r7, #4]
 802864e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028650:	441a      	add	r2, r3
 8028652:	687b      	ldr	r3, [r7, #4]
 8028654:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8028656:	687b      	ldr	r3, [r7, #4]
 8028658:	68da      	ldr	r2, [r3, #12]
 802865a:	687b      	ldr	r3, [r7, #4]
 802865c:	689b      	ldr	r3, [r3, #8]
 802865e:	429a      	cmp	r2, r3
 8028660:	d303      	bcc.n	802866a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8028662:	687b      	ldr	r3, [r7, #4]
 8028664:	681a      	ldr	r2, [r3, #0]
 8028666:	687b      	ldr	r3, [r7, #4]
 8028668:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 802866a:	687b      	ldr	r3, [r7, #4]
 802866c:	68d9      	ldr	r1, [r3, #12]
 802866e:	687b      	ldr	r3, [r7, #4]
 8028670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028672:	461a      	mov	r2, r3
 8028674:	6838      	ldr	r0, [r7, #0]
 8028676:	f005 fadb 	bl	802dc30 <memcpy>
	}
}
 802867a:	bf00      	nop
 802867c:	3708      	adds	r7, #8
 802867e:	46bd      	mov	sp, r7
 8028680:	bd80      	pop	{r7, pc}

08028682 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8028682:	b580      	push	{r7, lr}
 8028684:	b084      	sub	sp, #16
 8028686:	af00      	add	r7, sp, #0
 8028688:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 802868a:	f001 ffcf 	bl	802a62c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 802868e:	687b      	ldr	r3, [r7, #4]
 8028690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8028694:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8028696:	e011      	b.n	80286bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802869c:	2b00      	cmp	r3, #0
 802869e:	d012      	beq.n	80286c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80286a0:	687b      	ldr	r3, [r7, #4]
 80286a2:	3324      	adds	r3, #36	; 0x24
 80286a4:	4618      	mov	r0, r3
 80286a6:	f000 fdd1 	bl	802924c <xTaskRemoveFromEventList>
 80286aa:	4603      	mov	r3, r0
 80286ac:	2b00      	cmp	r3, #0
 80286ae:	d001      	beq.n	80286b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80286b0:	f000 fea4 	bl	80293fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80286b4:	7bfb      	ldrb	r3, [r7, #15]
 80286b6:	3b01      	subs	r3, #1
 80286b8:	b2db      	uxtb	r3, r3
 80286ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80286bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80286c0:	2b00      	cmp	r3, #0
 80286c2:	dce9      	bgt.n	8028698 <prvUnlockQueue+0x16>
 80286c4:	e000      	b.n	80286c8 <prvUnlockQueue+0x46>
					break;
 80286c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80286c8:	687b      	ldr	r3, [r7, #4]
 80286ca:	22ff      	movs	r2, #255	; 0xff
 80286cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80286d0:	f001 ffda 	bl	802a688 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80286d4:	f001 ffaa 	bl	802a62c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80286d8:	687b      	ldr	r3, [r7, #4]
 80286da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80286de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80286e0:	e011      	b.n	8028706 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80286e2:	687b      	ldr	r3, [r7, #4]
 80286e4:	691b      	ldr	r3, [r3, #16]
 80286e6:	2b00      	cmp	r3, #0
 80286e8:	d012      	beq.n	8028710 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80286ea:	687b      	ldr	r3, [r7, #4]
 80286ec:	3310      	adds	r3, #16
 80286ee:	4618      	mov	r0, r3
 80286f0:	f000 fdac 	bl	802924c <xTaskRemoveFromEventList>
 80286f4:	4603      	mov	r3, r0
 80286f6:	2b00      	cmp	r3, #0
 80286f8:	d001      	beq.n	80286fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80286fa:	f000 fe7f 	bl	80293fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80286fe:	7bbb      	ldrb	r3, [r7, #14]
 8028700:	3b01      	subs	r3, #1
 8028702:	b2db      	uxtb	r3, r3
 8028704:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8028706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802870a:	2b00      	cmp	r3, #0
 802870c:	dce9      	bgt.n	80286e2 <prvUnlockQueue+0x60>
 802870e:	e000      	b.n	8028712 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8028710:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8028712:	687b      	ldr	r3, [r7, #4]
 8028714:	22ff      	movs	r2, #255	; 0xff
 8028716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 802871a:	f001 ffb5 	bl	802a688 <vPortExitCritical>
}
 802871e:	bf00      	nop
 8028720:	3710      	adds	r7, #16
 8028722:	46bd      	mov	sp, r7
 8028724:	bd80      	pop	{r7, pc}

08028726 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8028726:	b580      	push	{r7, lr}
 8028728:	b084      	sub	sp, #16
 802872a:	af00      	add	r7, sp, #0
 802872c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802872e:	f001 ff7d 	bl	802a62c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8028732:	687b      	ldr	r3, [r7, #4]
 8028734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028736:	2b00      	cmp	r3, #0
 8028738:	d102      	bne.n	8028740 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 802873a:	2301      	movs	r3, #1
 802873c:	60fb      	str	r3, [r7, #12]
 802873e:	e001      	b.n	8028744 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8028740:	2300      	movs	r3, #0
 8028742:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8028744:	f001 ffa0 	bl	802a688 <vPortExitCritical>

	return xReturn;
 8028748:	68fb      	ldr	r3, [r7, #12]
}
 802874a:	4618      	mov	r0, r3
 802874c:	3710      	adds	r7, #16
 802874e:	46bd      	mov	sp, r7
 8028750:	bd80      	pop	{r7, pc}

08028752 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8028752:	b580      	push	{r7, lr}
 8028754:	b084      	sub	sp, #16
 8028756:	af00      	add	r7, sp, #0
 8028758:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802875a:	f001 ff67 	bl	802a62c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 802875e:	687b      	ldr	r3, [r7, #4]
 8028760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028762:	687b      	ldr	r3, [r7, #4]
 8028764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028766:	429a      	cmp	r2, r3
 8028768:	d102      	bne.n	8028770 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 802876a:	2301      	movs	r3, #1
 802876c:	60fb      	str	r3, [r7, #12]
 802876e:	e001      	b.n	8028774 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8028770:	2300      	movs	r3, #0
 8028772:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8028774:	f001 ff88 	bl	802a688 <vPortExitCritical>

	return xReturn;
 8028778:	68fb      	ldr	r3, [r7, #12]
}
 802877a:	4618      	mov	r0, r3
 802877c:	3710      	adds	r7, #16
 802877e:	46bd      	mov	sp, r7
 8028780:	bd80      	pop	{r7, pc}
	...

08028784 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8028784:	b480      	push	{r7}
 8028786:	b085      	sub	sp, #20
 8028788:	af00      	add	r7, sp, #0
 802878a:	6078      	str	r0, [r7, #4]
 802878c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802878e:	2300      	movs	r3, #0
 8028790:	60fb      	str	r3, [r7, #12]
 8028792:	e014      	b.n	80287be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8028794:	4a0e      	ldr	r2, [pc, #56]	; (80287d0 <vQueueAddToRegistry+0x4c>)
 8028796:	68fb      	ldr	r3, [r7, #12]
 8028798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802879c:	2b00      	cmp	r3, #0
 802879e:	d10b      	bne.n	80287b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80287a0:	490b      	ldr	r1, [pc, #44]	; (80287d0 <vQueueAddToRegistry+0x4c>)
 80287a2:	68fb      	ldr	r3, [r7, #12]
 80287a4:	683a      	ldr	r2, [r7, #0]
 80287a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80287aa:	4a09      	ldr	r2, [pc, #36]	; (80287d0 <vQueueAddToRegistry+0x4c>)
 80287ac:	68fb      	ldr	r3, [r7, #12]
 80287ae:	00db      	lsls	r3, r3, #3
 80287b0:	4413      	add	r3, r2
 80287b2:	687a      	ldr	r2, [r7, #4]
 80287b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80287b6:	e005      	b.n	80287c4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80287b8:	68fb      	ldr	r3, [r7, #12]
 80287ba:	3301      	adds	r3, #1
 80287bc:	60fb      	str	r3, [r7, #12]
 80287be:	68fb      	ldr	r3, [r7, #12]
 80287c0:	2b07      	cmp	r3, #7
 80287c2:	d9e7      	bls.n	8028794 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80287c4:	bf00      	nop
 80287c6:	3714      	adds	r7, #20
 80287c8:	46bd      	mov	sp, r7
 80287ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287ce:	4770      	bx	lr
 80287d0:	2400d364 	.word	0x2400d364

080287d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80287d4:	b480      	push	{r7}
 80287d6:	b085      	sub	sp, #20
 80287d8:	af00      	add	r7, sp, #0
 80287da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80287dc:	2300      	movs	r3, #0
 80287de:	60fb      	str	r3, [r7, #12]
 80287e0:	e016      	b.n	8028810 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80287e2:	4a10      	ldr	r2, [pc, #64]	; (8028824 <vQueueUnregisterQueue+0x50>)
 80287e4:	68fb      	ldr	r3, [r7, #12]
 80287e6:	00db      	lsls	r3, r3, #3
 80287e8:	4413      	add	r3, r2
 80287ea:	685b      	ldr	r3, [r3, #4]
 80287ec:	687a      	ldr	r2, [r7, #4]
 80287ee:	429a      	cmp	r2, r3
 80287f0:	d10b      	bne.n	802880a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80287f2:	4a0c      	ldr	r2, [pc, #48]	; (8028824 <vQueueUnregisterQueue+0x50>)
 80287f4:	68fb      	ldr	r3, [r7, #12]
 80287f6:	2100      	movs	r1, #0
 80287f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80287fc:	4a09      	ldr	r2, [pc, #36]	; (8028824 <vQueueUnregisterQueue+0x50>)
 80287fe:	68fb      	ldr	r3, [r7, #12]
 8028800:	00db      	lsls	r3, r3, #3
 8028802:	4413      	add	r3, r2
 8028804:	2200      	movs	r2, #0
 8028806:	605a      	str	r2, [r3, #4]
				break;
 8028808:	e005      	b.n	8028816 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 802880a:	68fb      	ldr	r3, [r7, #12]
 802880c:	3301      	adds	r3, #1
 802880e:	60fb      	str	r3, [r7, #12]
 8028810:	68fb      	ldr	r3, [r7, #12]
 8028812:	2b07      	cmp	r3, #7
 8028814:	d9e5      	bls.n	80287e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8028816:	bf00      	nop
 8028818:	3714      	adds	r7, #20
 802881a:	46bd      	mov	sp, r7
 802881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028820:	4770      	bx	lr
 8028822:	bf00      	nop
 8028824:	2400d364 	.word	0x2400d364

08028828 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8028828:	b580      	push	{r7, lr}
 802882a:	b086      	sub	sp, #24
 802882c:	af00      	add	r7, sp, #0
 802882e:	60f8      	str	r0, [r7, #12]
 8028830:	60b9      	str	r1, [r7, #8]
 8028832:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8028834:	68fb      	ldr	r3, [r7, #12]
 8028836:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8028838:	f001 fef8 	bl	802a62c <vPortEnterCritical>
 802883c:	697b      	ldr	r3, [r7, #20]
 802883e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8028842:	b25b      	sxtb	r3, r3
 8028844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028848:	d103      	bne.n	8028852 <vQueueWaitForMessageRestricted+0x2a>
 802884a:	697b      	ldr	r3, [r7, #20]
 802884c:	2200      	movs	r2, #0
 802884e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028852:	697b      	ldr	r3, [r7, #20]
 8028854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8028858:	b25b      	sxtb	r3, r3
 802885a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802885e:	d103      	bne.n	8028868 <vQueueWaitForMessageRestricted+0x40>
 8028860:	697b      	ldr	r3, [r7, #20]
 8028862:	2200      	movs	r2, #0
 8028864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8028868:	f001 ff0e 	bl	802a688 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 802886c:	697b      	ldr	r3, [r7, #20]
 802886e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028870:	2b00      	cmp	r3, #0
 8028872:	d106      	bne.n	8028882 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8028874:	697b      	ldr	r3, [r7, #20]
 8028876:	3324      	adds	r3, #36	; 0x24
 8028878:	687a      	ldr	r2, [r7, #4]
 802887a:	68b9      	ldr	r1, [r7, #8]
 802887c:	4618      	mov	r0, r3
 802887e:	f000 fcbb 	bl	80291f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8028882:	6978      	ldr	r0, [r7, #20]
 8028884:	f7ff fefd 	bl	8028682 <prvUnlockQueue>
	}
 8028888:	bf00      	nop
 802888a:	3718      	adds	r7, #24
 802888c:	46bd      	mov	sp, r7
 802888e:	bd80      	pop	{r7, pc}

08028890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8028890:	b580      	push	{r7, lr}
 8028892:	b08e      	sub	sp, #56	; 0x38
 8028894:	af04      	add	r7, sp, #16
 8028896:	60f8      	str	r0, [r7, #12]
 8028898:	60b9      	str	r1, [r7, #8]
 802889a:	607a      	str	r2, [r7, #4]
 802889c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 802889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80288a0:	2b00      	cmp	r3, #0
 80288a2:	d109      	bne.n	80288b8 <xTaskCreateStatic+0x28>
 80288a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80288a8:	f383 8811 	msr	BASEPRI, r3
 80288ac:	f3bf 8f6f 	isb	sy
 80288b0:	f3bf 8f4f 	dsb	sy
 80288b4:	623b      	str	r3, [r7, #32]
 80288b6:	e7fe      	b.n	80288b6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80288b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80288ba:	2b00      	cmp	r3, #0
 80288bc:	d109      	bne.n	80288d2 <xTaskCreateStatic+0x42>
 80288be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80288c2:	f383 8811 	msr	BASEPRI, r3
 80288c6:	f3bf 8f6f 	isb	sy
 80288ca:	f3bf 8f4f 	dsb	sy
 80288ce:	61fb      	str	r3, [r7, #28]
 80288d0:	e7fe      	b.n	80288d0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80288d2:	235c      	movs	r3, #92	; 0x5c
 80288d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80288d6:	693b      	ldr	r3, [r7, #16]
 80288d8:	2b5c      	cmp	r3, #92	; 0x5c
 80288da:	d009      	beq.n	80288f0 <xTaskCreateStatic+0x60>
 80288dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80288e0:	f383 8811 	msr	BASEPRI, r3
 80288e4:	f3bf 8f6f 	isb	sy
 80288e8:	f3bf 8f4f 	dsb	sy
 80288ec:	61bb      	str	r3, [r7, #24]
 80288ee:	e7fe      	b.n	80288ee <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80288f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80288f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80288f4:	2b00      	cmp	r3, #0
 80288f6:	d01e      	beq.n	8028936 <xTaskCreateStatic+0xa6>
 80288f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80288fa:	2b00      	cmp	r3, #0
 80288fc:	d01b      	beq.n	8028936 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80288fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028900:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8028902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8028906:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8028908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802890a:	2202      	movs	r2, #2
 802890c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8028910:	2300      	movs	r3, #0
 8028912:	9303      	str	r3, [sp, #12]
 8028914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028916:	9302      	str	r3, [sp, #8]
 8028918:	f107 0314 	add.w	r3, r7, #20
 802891c:	9301      	str	r3, [sp, #4]
 802891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028920:	9300      	str	r3, [sp, #0]
 8028922:	683b      	ldr	r3, [r7, #0]
 8028924:	687a      	ldr	r2, [r7, #4]
 8028926:	68b9      	ldr	r1, [r7, #8]
 8028928:	68f8      	ldr	r0, [r7, #12]
 802892a:	f000 f850 	bl	80289ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 802892e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8028930:	f000 f8dc 	bl	8028aec <prvAddNewTaskToReadyList>
 8028934:	e001      	b.n	802893a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8028936:	2300      	movs	r3, #0
 8028938:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 802893a:	697b      	ldr	r3, [r7, #20]
	}
 802893c:	4618      	mov	r0, r3
 802893e:	3728      	adds	r7, #40	; 0x28
 8028940:	46bd      	mov	sp, r7
 8028942:	bd80      	pop	{r7, pc}

08028944 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8028944:	b580      	push	{r7, lr}
 8028946:	b08c      	sub	sp, #48	; 0x30
 8028948:	af04      	add	r7, sp, #16
 802894a:	60f8      	str	r0, [r7, #12]
 802894c:	60b9      	str	r1, [r7, #8]
 802894e:	603b      	str	r3, [r7, #0]
 8028950:	4613      	mov	r3, r2
 8028952:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8028954:	88fb      	ldrh	r3, [r7, #6]
 8028956:	009b      	lsls	r3, r3, #2
 8028958:	4618      	mov	r0, r3
 802895a:	f001 ff81 	bl	802a860 <pvPortMalloc>
 802895e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8028960:	697b      	ldr	r3, [r7, #20]
 8028962:	2b00      	cmp	r3, #0
 8028964:	d00e      	beq.n	8028984 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8028966:	205c      	movs	r0, #92	; 0x5c
 8028968:	f001 ff7a 	bl	802a860 <pvPortMalloc>
 802896c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 802896e:	69fb      	ldr	r3, [r7, #28]
 8028970:	2b00      	cmp	r3, #0
 8028972:	d003      	beq.n	802897c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8028974:	69fb      	ldr	r3, [r7, #28]
 8028976:	697a      	ldr	r2, [r7, #20]
 8028978:	631a      	str	r2, [r3, #48]	; 0x30
 802897a:	e005      	b.n	8028988 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802897c:	6978      	ldr	r0, [r7, #20]
 802897e:	f002 f831 	bl	802a9e4 <vPortFree>
 8028982:	e001      	b.n	8028988 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8028984:	2300      	movs	r3, #0
 8028986:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8028988:	69fb      	ldr	r3, [r7, #28]
 802898a:	2b00      	cmp	r3, #0
 802898c:	d017      	beq.n	80289be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802898e:	69fb      	ldr	r3, [r7, #28]
 8028990:	2200      	movs	r2, #0
 8028992:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8028996:	88fa      	ldrh	r2, [r7, #6]
 8028998:	2300      	movs	r3, #0
 802899a:	9303      	str	r3, [sp, #12]
 802899c:	69fb      	ldr	r3, [r7, #28]
 802899e:	9302      	str	r3, [sp, #8]
 80289a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80289a2:	9301      	str	r3, [sp, #4]
 80289a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289a6:	9300      	str	r3, [sp, #0]
 80289a8:	683b      	ldr	r3, [r7, #0]
 80289aa:	68b9      	ldr	r1, [r7, #8]
 80289ac:	68f8      	ldr	r0, [r7, #12]
 80289ae:	f000 f80e 	bl	80289ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80289b2:	69f8      	ldr	r0, [r7, #28]
 80289b4:	f000 f89a 	bl	8028aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80289b8:	2301      	movs	r3, #1
 80289ba:	61bb      	str	r3, [r7, #24]
 80289bc:	e002      	b.n	80289c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80289be:	f04f 33ff 	mov.w	r3, #4294967295
 80289c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80289c4:	69bb      	ldr	r3, [r7, #24]
	}
 80289c6:	4618      	mov	r0, r3
 80289c8:	3720      	adds	r7, #32
 80289ca:	46bd      	mov	sp, r7
 80289cc:	bd80      	pop	{r7, pc}

080289ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80289ce:	b580      	push	{r7, lr}
 80289d0:	b088      	sub	sp, #32
 80289d2:	af00      	add	r7, sp, #0
 80289d4:	60f8      	str	r0, [r7, #12]
 80289d6:	60b9      	str	r1, [r7, #8]
 80289d8:	607a      	str	r2, [r7, #4]
 80289da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80289dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80289de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80289e0:	687b      	ldr	r3, [r7, #4]
 80289e2:	009b      	lsls	r3, r3, #2
 80289e4:	461a      	mov	r2, r3
 80289e6:	21a5      	movs	r1, #165	; 0xa5
 80289e8:	f005 f92d 	bl	802dc46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80289ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80289ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80289f0:	6879      	ldr	r1, [r7, #4]
 80289f2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80289f6:	440b      	add	r3, r1
 80289f8:	009b      	lsls	r3, r3, #2
 80289fa:	4413      	add	r3, r2
 80289fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80289fe:	69bb      	ldr	r3, [r7, #24]
 8028a00:	f023 0307 	bic.w	r3, r3, #7
 8028a04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8028a06:	69bb      	ldr	r3, [r7, #24]
 8028a08:	f003 0307 	and.w	r3, r3, #7
 8028a0c:	2b00      	cmp	r3, #0
 8028a0e:	d009      	beq.n	8028a24 <prvInitialiseNewTask+0x56>
 8028a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028a14:	f383 8811 	msr	BASEPRI, r3
 8028a18:	f3bf 8f6f 	isb	sy
 8028a1c:	f3bf 8f4f 	dsb	sy
 8028a20:	617b      	str	r3, [r7, #20]
 8028a22:	e7fe      	b.n	8028a22 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8028a24:	68bb      	ldr	r3, [r7, #8]
 8028a26:	2b00      	cmp	r3, #0
 8028a28:	d01f      	beq.n	8028a6a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8028a2a:	2300      	movs	r3, #0
 8028a2c:	61fb      	str	r3, [r7, #28]
 8028a2e:	e012      	b.n	8028a56 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8028a30:	68ba      	ldr	r2, [r7, #8]
 8028a32:	69fb      	ldr	r3, [r7, #28]
 8028a34:	4413      	add	r3, r2
 8028a36:	7819      	ldrb	r1, [r3, #0]
 8028a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028a3a:	69fb      	ldr	r3, [r7, #28]
 8028a3c:	4413      	add	r3, r2
 8028a3e:	3334      	adds	r3, #52	; 0x34
 8028a40:	460a      	mov	r2, r1
 8028a42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8028a44:	68ba      	ldr	r2, [r7, #8]
 8028a46:	69fb      	ldr	r3, [r7, #28]
 8028a48:	4413      	add	r3, r2
 8028a4a:	781b      	ldrb	r3, [r3, #0]
 8028a4c:	2b00      	cmp	r3, #0
 8028a4e:	d006      	beq.n	8028a5e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8028a50:	69fb      	ldr	r3, [r7, #28]
 8028a52:	3301      	adds	r3, #1
 8028a54:	61fb      	str	r3, [r7, #28]
 8028a56:	69fb      	ldr	r3, [r7, #28]
 8028a58:	2b0f      	cmp	r3, #15
 8028a5a:	d9e9      	bls.n	8028a30 <prvInitialiseNewTask+0x62>
 8028a5c:	e000      	b.n	8028a60 <prvInitialiseNewTask+0x92>
			{
				break;
 8028a5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8028a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a62:	2200      	movs	r2, #0
 8028a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028a68:	e003      	b.n	8028a72 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8028a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a6c:	2200      	movs	r2, #0
 8028a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8028a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a74:	2b37      	cmp	r3, #55	; 0x37
 8028a76:	d901      	bls.n	8028a7c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8028a78:	2337      	movs	r3, #55	; 0x37
 8028a7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8028a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028a80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8028a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028a86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8028a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a8a:	2200      	movs	r2, #0
 8028a8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8028a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a90:	3304      	adds	r3, #4
 8028a92:	4618      	mov	r0, r3
 8028a94:	f7fe fe58 	bl	8027748 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8028a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a9a:	3318      	adds	r3, #24
 8028a9c:	4618      	mov	r0, r3
 8028a9e:	f7fe fe53 	bl	8027748 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8028aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028aa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8028aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028aaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8028aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028ab0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8028ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028ab6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8028ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028aba:	2200      	movs	r2, #0
 8028abc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8028abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028ac0:	2200      	movs	r2, #0
 8028ac2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8028ac6:	683a      	ldr	r2, [r7, #0]
 8028ac8:	68f9      	ldr	r1, [r7, #12]
 8028aca:	69b8      	ldr	r0, [r7, #24]
 8028acc:	f001 fc8a 	bl	802a3e4 <pxPortInitialiseStack>
 8028ad0:	4602      	mov	r2, r0
 8028ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028ad4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8028ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ad8:	2b00      	cmp	r3, #0
 8028ada:	d002      	beq.n	8028ae2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8028adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028ae0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8028ae2:	bf00      	nop
 8028ae4:	3720      	adds	r7, #32
 8028ae6:	46bd      	mov	sp, r7
 8028ae8:	bd80      	pop	{r7, pc}
	...

08028aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8028aec:	b580      	push	{r7, lr}
 8028aee:	b082      	sub	sp, #8
 8028af0:	af00      	add	r7, sp, #0
 8028af2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8028af4:	f001 fd9a 	bl	802a62c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8028af8:	4b2d      	ldr	r3, [pc, #180]	; (8028bb0 <prvAddNewTaskToReadyList+0xc4>)
 8028afa:	681b      	ldr	r3, [r3, #0]
 8028afc:	3301      	adds	r3, #1
 8028afe:	4a2c      	ldr	r2, [pc, #176]	; (8028bb0 <prvAddNewTaskToReadyList+0xc4>)
 8028b00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8028b02:	4b2c      	ldr	r3, [pc, #176]	; (8028bb4 <prvAddNewTaskToReadyList+0xc8>)
 8028b04:	681b      	ldr	r3, [r3, #0]
 8028b06:	2b00      	cmp	r3, #0
 8028b08:	d109      	bne.n	8028b1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8028b0a:	4a2a      	ldr	r2, [pc, #168]	; (8028bb4 <prvAddNewTaskToReadyList+0xc8>)
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8028b10:	4b27      	ldr	r3, [pc, #156]	; (8028bb0 <prvAddNewTaskToReadyList+0xc4>)
 8028b12:	681b      	ldr	r3, [r3, #0]
 8028b14:	2b01      	cmp	r3, #1
 8028b16:	d110      	bne.n	8028b3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8028b18:	f000 fc94 	bl	8029444 <prvInitialiseTaskLists>
 8028b1c:	e00d      	b.n	8028b3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8028b1e:	4b26      	ldr	r3, [pc, #152]	; (8028bb8 <prvAddNewTaskToReadyList+0xcc>)
 8028b20:	681b      	ldr	r3, [r3, #0]
 8028b22:	2b00      	cmp	r3, #0
 8028b24:	d109      	bne.n	8028b3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8028b26:	4b23      	ldr	r3, [pc, #140]	; (8028bb4 <prvAddNewTaskToReadyList+0xc8>)
 8028b28:	681b      	ldr	r3, [r3, #0]
 8028b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028b2c:	687b      	ldr	r3, [r7, #4]
 8028b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028b30:	429a      	cmp	r2, r3
 8028b32:	d802      	bhi.n	8028b3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8028b34:	4a1f      	ldr	r2, [pc, #124]	; (8028bb4 <prvAddNewTaskToReadyList+0xc8>)
 8028b36:	687b      	ldr	r3, [r7, #4]
 8028b38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8028b3a:	4b20      	ldr	r3, [pc, #128]	; (8028bbc <prvAddNewTaskToReadyList+0xd0>)
 8028b3c:	681b      	ldr	r3, [r3, #0]
 8028b3e:	3301      	adds	r3, #1
 8028b40:	4a1e      	ldr	r2, [pc, #120]	; (8028bbc <prvAddNewTaskToReadyList+0xd0>)
 8028b42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8028b44:	4b1d      	ldr	r3, [pc, #116]	; (8028bbc <prvAddNewTaskToReadyList+0xd0>)
 8028b46:	681a      	ldr	r2, [r3, #0]
 8028b48:	687b      	ldr	r3, [r7, #4]
 8028b4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8028b4c:	687b      	ldr	r3, [r7, #4]
 8028b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028b50:	4b1b      	ldr	r3, [pc, #108]	; (8028bc0 <prvAddNewTaskToReadyList+0xd4>)
 8028b52:	681b      	ldr	r3, [r3, #0]
 8028b54:	429a      	cmp	r2, r3
 8028b56:	d903      	bls.n	8028b60 <prvAddNewTaskToReadyList+0x74>
 8028b58:	687b      	ldr	r3, [r7, #4]
 8028b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028b5c:	4a18      	ldr	r2, [pc, #96]	; (8028bc0 <prvAddNewTaskToReadyList+0xd4>)
 8028b5e:	6013      	str	r3, [r2, #0]
 8028b60:	687b      	ldr	r3, [r7, #4]
 8028b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028b64:	4613      	mov	r3, r2
 8028b66:	009b      	lsls	r3, r3, #2
 8028b68:	4413      	add	r3, r2
 8028b6a:	009b      	lsls	r3, r3, #2
 8028b6c:	4a15      	ldr	r2, [pc, #84]	; (8028bc4 <prvAddNewTaskToReadyList+0xd8>)
 8028b6e:	441a      	add	r2, r3
 8028b70:	687b      	ldr	r3, [r7, #4]
 8028b72:	3304      	adds	r3, #4
 8028b74:	4619      	mov	r1, r3
 8028b76:	4610      	mov	r0, r2
 8028b78:	f7fe fdf3 	bl	8027762 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8028b7c:	f001 fd84 	bl	802a688 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8028b80:	4b0d      	ldr	r3, [pc, #52]	; (8028bb8 <prvAddNewTaskToReadyList+0xcc>)
 8028b82:	681b      	ldr	r3, [r3, #0]
 8028b84:	2b00      	cmp	r3, #0
 8028b86:	d00e      	beq.n	8028ba6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8028b88:	4b0a      	ldr	r3, [pc, #40]	; (8028bb4 <prvAddNewTaskToReadyList+0xc8>)
 8028b8a:	681b      	ldr	r3, [r3, #0]
 8028b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028b8e:	687b      	ldr	r3, [r7, #4]
 8028b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028b92:	429a      	cmp	r2, r3
 8028b94:	d207      	bcs.n	8028ba6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8028b96:	4b0c      	ldr	r3, [pc, #48]	; (8028bc8 <prvAddNewTaskToReadyList+0xdc>)
 8028b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028b9c:	601a      	str	r2, [r3, #0]
 8028b9e:	f3bf 8f4f 	dsb	sy
 8028ba2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8028ba6:	bf00      	nop
 8028ba8:	3708      	adds	r7, #8
 8028baa:	46bd      	mov	sp, r7
 8028bac:	bd80      	pop	{r7, pc}
 8028bae:	bf00      	nop
 8028bb0:	2400202c 	.word	0x2400202c
 8028bb4:	24001b58 	.word	0x24001b58
 8028bb8:	24002038 	.word	0x24002038
 8028bbc:	24002048 	.word	0x24002048
 8028bc0:	24002034 	.word	0x24002034
 8028bc4:	24001b5c 	.word	0x24001b5c
 8028bc8:	e000ed04 	.word	0xe000ed04

08028bcc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8028bcc:	b580      	push	{r7, lr}
 8028bce:	b08a      	sub	sp, #40	; 0x28
 8028bd0:	af00      	add	r7, sp, #0
 8028bd2:	6078      	str	r0, [r7, #4]
 8028bd4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8028bd6:	2300      	movs	r3, #0
 8028bd8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8028bda:	687b      	ldr	r3, [r7, #4]
 8028bdc:	2b00      	cmp	r3, #0
 8028bde:	d109      	bne.n	8028bf4 <vTaskDelayUntil+0x28>
 8028be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028be4:	f383 8811 	msr	BASEPRI, r3
 8028be8:	f3bf 8f6f 	isb	sy
 8028bec:	f3bf 8f4f 	dsb	sy
 8028bf0:	617b      	str	r3, [r7, #20]
 8028bf2:	e7fe      	b.n	8028bf2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8028bf4:	683b      	ldr	r3, [r7, #0]
 8028bf6:	2b00      	cmp	r3, #0
 8028bf8:	d109      	bne.n	8028c0e <vTaskDelayUntil+0x42>
 8028bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028bfe:	f383 8811 	msr	BASEPRI, r3
 8028c02:	f3bf 8f6f 	isb	sy
 8028c06:	f3bf 8f4f 	dsb	sy
 8028c0a:	613b      	str	r3, [r7, #16]
 8028c0c:	e7fe      	b.n	8028c0c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8028c0e:	4b29      	ldr	r3, [pc, #164]	; (8028cb4 <vTaskDelayUntil+0xe8>)
 8028c10:	681b      	ldr	r3, [r3, #0]
 8028c12:	2b00      	cmp	r3, #0
 8028c14:	d009      	beq.n	8028c2a <vTaskDelayUntil+0x5e>
 8028c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028c1a:	f383 8811 	msr	BASEPRI, r3
 8028c1e:	f3bf 8f6f 	isb	sy
 8028c22:	f3bf 8f4f 	dsb	sy
 8028c26:	60fb      	str	r3, [r7, #12]
 8028c28:	e7fe      	b.n	8028c28 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8028c2a:	f000 f8e1 	bl	8028df0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8028c2e:	4b22      	ldr	r3, [pc, #136]	; (8028cb8 <vTaskDelayUntil+0xec>)
 8028c30:	681b      	ldr	r3, [r3, #0]
 8028c32:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8028c34:	687b      	ldr	r3, [r7, #4]
 8028c36:	681b      	ldr	r3, [r3, #0]
 8028c38:	683a      	ldr	r2, [r7, #0]
 8028c3a:	4413      	add	r3, r2
 8028c3c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8028c3e:	687b      	ldr	r3, [r7, #4]
 8028c40:	681b      	ldr	r3, [r3, #0]
 8028c42:	6a3a      	ldr	r2, [r7, #32]
 8028c44:	429a      	cmp	r2, r3
 8028c46:	d20b      	bcs.n	8028c60 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8028c48:	687b      	ldr	r3, [r7, #4]
 8028c4a:	681b      	ldr	r3, [r3, #0]
 8028c4c:	69fa      	ldr	r2, [r7, #28]
 8028c4e:	429a      	cmp	r2, r3
 8028c50:	d211      	bcs.n	8028c76 <vTaskDelayUntil+0xaa>
 8028c52:	69fa      	ldr	r2, [r7, #28]
 8028c54:	6a3b      	ldr	r3, [r7, #32]
 8028c56:	429a      	cmp	r2, r3
 8028c58:	d90d      	bls.n	8028c76 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8028c5a:	2301      	movs	r3, #1
 8028c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8028c5e:	e00a      	b.n	8028c76 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8028c60:	687b      	ldr	r3, [r7, #4]
 8028c62:	681b      	ldr	r3, [r3, #0]
 8028c64:	69fa      	ldr	r2, [r7, #28]
 8028c66:	429a      	cmp	r2, r3
 8028c68:	d303      	bcc.n	8028c72 <vTaskDelayUntil+0xa6>
 8028c6a:	69fa      	ldr	r2, [r7, #28]
 8028c6c:	6a3b      	ldr	r3, [r7, #32]
 8028c6e:	429a      	cmp	r2, r3
 8028c70:	d901      	bls.n	8028c76 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8028c72:	2301      	movs	r3, #1
 8028c74:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8028c76:	687b      	ldr	r3, [r7, #4]
 8028c78:	69fa      	ldr	r2, [r7, #28]
 8028c7a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8028c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028c7e:	2b00      	cmp	r3, #0
 8028c80:	d006      	beq.n	8028c90 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8028c82:	69fa      	ldr	r2, [r7, #28]
 8028c84:	6a3b      	ldr	r3, [r7, #32]
 8028c86:	1ad3      	subs	r3, r2, r3
 8028c88:	2100      	movs	r1, #0
 8028c8a:	4618      	mov	r0, r3
 8028c8c:	f001 f810 	bl	8029cb0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8028c90:	f000 f8bc 	bl	8028e0c <xTaskResumeAll>
 8028c94:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8028c96:	69bb      	ldr	r3, [r7, #24]
 8028c98:	2b00      	cmp	r3, #0
 8028c9a:	d107      	bne.n	8028cac <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8028c9c:	4b07      	ldr	r3, [pc, #28]	; (8028cbc <vTaskDelayUntil+0xf0>)
 8028c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028ca2:	601a      	str	r2, [r3, #0]
 8028ca4:	f3bf 8f4f 	dsb	sy
 8028ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8028cac:	bf00      	nop
 8028cae:	3728      	adds	r7, #40	; 0x28
 8028cb0:	46bd      	mov	sp, r7
 8028cb2:	bd80      	pop	{r7, pc}
 8028cb4:	24002054 	.word	0x24002054
 8028cb8:	24002030 	.word	0x24002030
 8028cbc:	e000ed04 	.word	0xe000ed04

08028cc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8028cc0:	b580      	push	{r7, lr}
 8028cc2:	b084      	sub	sp, #16
 8028cc4:	af00      	add	r7, sp, #0
 8028cc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8028cc8:	2300      	movs	r3, #0
 8028cca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8028ccc:	687b      	ldr	r3, [r7, #4]
 8028cce:	2b00      	cmp	r3, #0
 8028cd0:	d016      	beq.n	8028d00 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8028cd2:	4b13      	ldr	r3, [pc, #76]	; (8028d20 <vTaskDelay+0x60>)
 8028cd4:	681b      	ldr	r3, [r3, #0]
 8028cd6:	2b00      	cmp	r3, #0
 8028cd8:	d009      	beq.n	8028cee <vTaskDelay+0x2e>
 8028cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028cde:	f383 8811 	msr	BASEPRI, r3
 8028ce2:	f3bf 8f6f 	isb	sy
 8028ce6:	f3bf 8f4f 	dsb	sy
 8028cea:	60bb      	str	r3, [r7, #8]
 8028cec:	e7fe      	b.n	8028cec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8028cee:	f000 f87f 	bl	8028df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8028cf2:	2100      	movs	r1, #0
 8028cf4:	6878      	ldr	r0, [r7, #4]
 8028cf6:	f000 ffdb 	bl	8029cb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8028cfa:	f000 f887 	bl	8028e0c <xTaskResumeAll>
 8028cfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8028d00:	68fb      	ldr	r3, [r7, #12]
 8028d02:	2b00      	cmp	r3, #0
 8028d04:	d107      	bne.n	8028d16 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8028d06:	4b07      	ldr	r3, [pc, #28]	; (8028d24 <vTaskDelay+0x64>)
 8028d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028d0c:	601a      	str	r2, [r3, #0]
 8028d0e:	f3bf 8f4f 	dsb	sy
 8028d12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8028d16:	bf00      	nop
 8028d18:	3710      	adds	r7, #16
 8028d1a:	46bd      	mov	sp, r7
 8028d1c:	bd80      	pop	{r7, pc}
 8028d1e:	bf00      	nop
 8028d20:	24002054 	.word	0x24002054
 8028d24:	e000ed04 	.word	0xe000ed04

08028d28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8028d28:	b580      	push	{r7, lr}
 8028d2a:	b08a      	sub	sp, #40	; 0x28
 8028d2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8028d2e:	2300      	movs	r3, #0
 8028d30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8028d32:	2300      	movs	r3, #0
 8028d34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8028d36:	463a      	mov	r2, r7
 8028d38:	1d39      	adds	r1, r7, #4
 8028d3a:	f107 0308 	add.w	r3, r7, #8
 8028d3e:	4618      	mov	r0, r3
 8028d40:	f7fe fcae 	bl	80276a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8028d44:	6839      	ldr	r1, [r7, #0]
 8028d46:	687b      	ldr	r3, [r7, #4]
 8028d48:	68ba      	ldr	r2, [r7, #8]
 8028d4a:	9202      	str	r2, [sp, #8]
 8028d4c:	9301      	str	r3, [sp, #4]
 8028d4e:	2300      	movs	r3, #0
 8028d50:	9300      	str	r3, [sp, #0]
 8028d52:	2300      	movs	r3, #0
 8028d54:	460a      	mov	r2, r1
 8028d56:	4920      	ldr	r1, [pc, #128]	; (8028dd8 <vTaskStartScheduler+0xb0>)
 8028d58:	4820      	ldr	r0, [pc, #128]	; (8028ddc <vTaskStartScheduler+0xb4>)
 8028d5a:	f7ff fd99 	bl	8028890 <xTaskCreateStatic>
 8028d5e:	4602      	mov	r2, r0
 8028d60:	4b1f      	ldr	r3, [pc, #124]	; (8028de0 <vTaskStartScheduler+0xb8>)
 8028d62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8028d64:	4b1e      	ldr	r3, [pc, #120]	; (8028de0 <vTaskStartScheduler+0xb8>)
 8028d66:	681b      	ldr	r3, [r3, #0]
 8028d68:	2b00      	cmp	r3, #0
 8028d6a:	d002      	beq.n	8028d72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8028d6c:	2301      	movs	r3, #1
 8028d6e:	617b      	str	r3, [r7, #20]
 8028d70:	e001      	b.n	8028d76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8028d72:	2300      	movs	r3, #0
 8028d74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8028d76:	697b      	ldr	r3, [r7, #20]
 8028d78:	2b01      	cmp	r3, #1
 8028d7a:	d102      	bne.n	8028d82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8028d7c:	f000 ffec 	bl	8029d58 <xTimerCreateTimerTask>
 8028d80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8028d82:	697b      	ldr	r3, [r7, #20]
 8028d84:	2b01      	cmp	r3, #1
 8028d86:	d115      	bne.n	8028db4 <vTaskStartScheduler+0x8c>
 8028d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028d8c:	f383 8811 	msr	BASEPRI, r3
 8028d90:	f3bf 8f6f 	isb	sy
 8028d94:	f3bf 8f4f 	dsb	sy
 8028d98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8028d9a:	4b12      	ldr	r3, [pc, #72]	; (8028de4 <vTaskStartScheduler+0xbc>)
 8028d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8028da0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8028da2:	4b11      	ldr	r3, [pc, #68]	; (8028de8 <vTaskStartScheduler+0xc0>)
 8028da4:	2201      	movs	r2, #1
 8028da6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8028da8:	4b10      	ldr	r3, [pc, #64]	; (8028dec <vTaskStartScheduler+0xc4>)
 8028daa:	2200      	movs	r2, #0
 8028dac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8028dae:	f001 fb9f 	bl	802a4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8028db2:	e00d      	b.n	8028dd0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8028db4:	697b      	ldr	r3, [r7, #20]
 8028db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028dba:	d109      	bne.n	8028dd0 <vTaskStartScheduler+0xa8>
 8028dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028dc0:	f383 8811 	msr	BASEPRI, r3
 8028dc4:	f3bf 8f6f 	isb	sy
 8028dc8:	f3bf 8f4f 	dsb	sy
 8028dcc:	60fb      	str	r3, [r7, #12]
 8028dce:	e7fe      	b.n	8028dce <vTaskStartScheduler+0xa6>
}
 8028dd0:	bf00      	nop
 8028dd2:	3718      	adds	r7, #24
 8028dd4:	46bd      	mov	sp, r7
 8028dd6:	bd80      	pop	{r7, pc}
 8028dd8:	0802f1d4 	.word	0x0802f1d4
 8028ddc:	08029415 	.word	0x08029415
 8028de0:	24002050 	.word	0x24002050
 8028de4:	2400204c 	.word	0x2400204c
 8028de8:	24002038 	.word	0x24002038
 8028dec:	24002030 	.word	0x24002030

08028df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8028df0:	b480      	push	{r7}
 8028df2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8028df4:	4b04      	ldr	r3, [pc, #16]	; (8028e08 <vTaskSuspendAll+0x18>)
 8028df6:	681b      	ldr	r3, [r3, #0]
 8028df8:	3301      	adds	r3, #1
 8028dfa:	4a03      	ldr	r2, [pc, #12]	; (8028e08 <vTaskSuspendAll+0x18>)
 8028dfc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8028dfe:	bf00      	nop
 8028e00:	46bd      	mov	sp, r7
 8028e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e06:	4770      	bx	lr
 8028e08:	24002054 	.word	0x24002054

08028e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8028e0c:	b580      	push	{r7, lr}
 8028e0e:	b084      	sub	sp, #16
 8028e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8028e12:	2300      	movs	r3, #0
 8028e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8028e16:	2300      	movs	r3, #0
 8028e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8028e1a:	4b41      	ldr	r3, [pc, #260]	; (8028f20 <xTaskResumeAll+0x114>)
 8028e1c:	681b      	ldr	r3, [r3, #0]
 8028e1e:	2b00      	cmp	r3, #0
 8028e20:	d109      	bne.n	8028e36 <xTaskResumeAll+0x2a>
 8028e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028e26:	f383 8811 	msr	BASEPRI, r3
 8028e2a:	f3bf 8f6f 	isb	sy
 8028e2e:	f3bf 8f4f 	dsb	sy
 8028e32:	603b      	str	r3, [r7, #0]
 8028e34:	e7fe      	b.n	8028e34 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8028e36:	f001 fbf9 	bl	802a62c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8028e3a:	4b39      	ldr	r3, [pc, #228]	; (8028f20 <xTaskResumeAll+0x114>)
 8028e3c:	681b      	ldr	r3, [r3, #0]
 8028e3e:	3b01      	subs	r3, #1
 8028e40:	4a37      	ldr	r2, [pc, #220]	; (8028f20 <xTaskResumeAll+0x114>)
 8028e42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8028e44:	4b36      	ldr	r3, [pc, #216]	; (8028f20 <xTaskResumeAll+0x114>)
 8028e46:	681b      	ldr	r3, [r3, #0]
 8028e48:	2b00      	cmp	r3, #0
 8028e4a:	d162      	bne.n	8028f12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8028e4c:	4b35      	ldr	r3, [pc, #212]	; (8028f24 <xTaskResumeAll+0x118>)
 8028e4e:	681b      	ldr	r3, [r3, #0]
 8028e50:	2b00      	cmp	r3, #0
 8028e52:	d05e      	beq.n	8028f12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8028e54:	e02f      	b.n	8028eb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8028e56:	4b34      	ldr	r3, [pc, #208]	; (8028f28 <xTaskResumeAll+0x11c>)
 8028e58:	68db      	ldr	r3, [r3, #12]
 8028e5a:	68db      	ldr	r3, [r3, #12]
 8028e5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8028e5e:	68fb      	ldr	r3, [r7, #12]
 8028e60:	3318      	adds	r3, #24
 8028e62:	4618      	mov	r0, r3
 8028e64:	f7fe fcda 	bl	802781c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8028e68:	68fb      	ldr	r3, [r7, #12]
 8028e6a:	3304      	adds	r3, #4
 8028e6c:	4618      	mov	r0, r3
 8028e6e:	f7fe fcd5 	bl	802781c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8028e72:	68fb      	ldr	r3, [r7, #12]
 8028e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028e76:	4b2d      	ldr	r3, [pc, #180]	; (8028f2c <xTaskResumeAll+0x120>)
 8028e78:	681b      	ldr	r3, [r3, #0]
 8028e7a:	429a      	cmp	r2, r3
 8028e7c:	d903      	bls.n	8028e86 <xTaskResumeAll+0x7a>
 8028e7e:	68fb      	ldr	r3, [r7, #12]
 8028e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028e82:	4a2a      	ldr	r2, [pc, #168]	; (8028f2c <xTaskResumeAll+0x120>)
 8028e84:	6013      	str	r3, [r2, #0]
 8028e86:	68fb      	ldr	r3, [r7, #12]
 8028e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028e8a:	4613      	mov	r3, r2
 8028e8c:	009b      	lsls	r3, r3, #2
 8028e8e:	4413      	add	r3, r2
 8028e90:	009b      	lsls	r3, r3, #2
 8028e92:	4a27      	ldr	r2, [pc, #156]	; (8028f30 <xTaskResumeAll+0x124>)
 8028e94:	441a      	add	r2, r3
 8028e96:	68fb      	ldr	r3, [r7, #12]
 8028e98:	3304      	adds	r3, #4
 8028e9a:	4619      	mov	r1, r3
 8028e9c:	4610      	mov	r0, r2
 8028e9e:	f7fe fc60 	bl	8027762 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8028ea2:	68fb      	ldr	r3, [r7, #12]
 8028ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028ea6:	4b23      	ldr	r3, [pc, #140]	; (8028f34 <xTaskResumeAll+0x128>)
 8028ea8:	681b      	ldr	r3, [r3, #0]
 8028eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028eac:	429a      	cmp	r2, r3
 8028eae:	d302      	bcc.n	8028eb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8028eb0:	4b21      	ldr	r3, [pc, #132]	; (8028f38 <xTaskResumeAll+0x12c>)
 8028eb2:	2201      	movs	r2, #1
 8028eb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8028eb6:	4b1c      	ldr	r3, [pc, #112]	; (8028f28 <xTaskResumeAll+0x11c>)
 8028eb8:	681b      	ldr	r3, [r3, #0]
 8028eba:	2b00      	cmp	r3, #0
 8028ebc:	d1cb      	bne.n	8028e56 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8028ebe:	68fb      	ldr	r3, [r7, #12]
 8028ec0:	2b00      	cmp	r3, #0
 8028ec2:	d001      	beq.n	8028ec8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8028ec4:	f000 fb58 	bl	8029578 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8028ec8:	4b1c      	ldr	r3, [pc, #112]	; (8028f3c <xTaskResumeAll+0x130>)
 8028eca:	681b      	ldr	r3, [r3, #0]
 8028ecc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8028ece:	687b      	ldr	r3, [r7, #4]
 8028ed0:	2b00      	cmp	r3, #0
 8028ed2:	d010      	beq.n	8028ef6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8028ed4:	f000 f858 	bl	8028f88 <xTaskIncrementTick>
 8028ed8:	4603      	mov	r3, r0
 8028eda:	2b00      	cmp	r3, #0
 8028edc:	d002      	beq.n	8028ee4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8028ede:	4b16      	ldr	r3, [pc, #88]	; (8028f38 <xTaskResumeAll+0x12c>)
 8028ee0:	2201      	movs	r2, #1
 8028ee2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8028ee4:	687b      	ldr	r3, [r7, #4]
 8028ee6:	3b01      	subs	r3, #1
 8028ee8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8028eea:	687b      	ldr	r3, [r7, #4]
 8028eec:	2b00      	cmp	r3, #0
 8028eee:	d1f1      	bne.n	8028ed4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8028ef0:	4b12      	ldr	r3, [pc, #72]	; (8028f3c <xTaskResumeAll+0x130>)
 8028ef2:	2200      	movs	r2, #0
 8028ef4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8028ef6:	4b10      	ldr	r3, [pc, #64]	; (8028f38 <xTaskResumeAll+0x12c>)
 8028ef8:	681b      	ldr	r3, [r3, #0]
 8028efa:	2b00      	cmp	r3, #0
 8028efc:	d009      	beq.n	8028f12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8028efe:	2301      	movs	r3, #1
 8028f00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8028f02:	4b0f      	ldr	r3, [pc, #60]	; (8028f40 <xTaskResumeAll+0x134>)
 8028f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8028f08:	601a      	str	r2, [r3, #0]
 8028f0a:	f3bf 8f4f 	dsb	sy
 8028f0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8028f12:	f001 fbb9 	bl	802a688 <vPortExitCritical>

	return xAlreadyYielded;
 8028f16:	68bb      	ldr	r3, [r7, #8]
}
 8028f18:	4618      	mov	r0, r3
 8028f1a:	3710      	adds	r7, #16
 8028f1c:	46bd      	mov	sp, r7
 8028f1e:	bd80      	pop	{r7, pc}
 8028f20:	24002054 	.word	0x24002054
 8028f24:	2400202c 	.word	0x2400202c
 8028f28:	24001fec 	.word	0x24001fec
 8028f2c:	24002034 	.word	0x24002034
 8028f30:	24001b5c 	.word	0x24001b5c
 8028f34:	24001b58 	.word	0x24001b58
 8028f38:	24002040 	.word	0x24002040
 8028f3c:	2400203c 	.word	0x2400203c
 8028f40:	e000ed04 	.word	0xe000ed04

08028f44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8028f44:	b480      	push	{r7}
 8028f46:	b083      	sub	sp, #12
 8028f48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8028f4a:	4b05      	ldr	r3, [pc, #20]	; (8028f60 <xTaskGetTickCount+0x1c>)
 8028f4c:	681b      	ldr	r3, [r3, #0]
 8028f4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8028f50:	687b      	ldr	r3, [r7, #4]
}
 8028f52:	4618      	mov	r0, r3
 8028f54:	370c      	adds	r7, #12
 8028f56:	46bd      	mov	sp, r7
 8028f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f5c:	4770      	bx	lr
 8028f5e:	bf00      	nop
 8028f60:	24002030 	.word	0x24002030

08028f64 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8028f64:	b580      	push	{r7, lr}
 8028f66:	b082      	sub	sp, #8
 8028f68:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8028f6a:	f001 fc3b 	bl	802a7e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8028f6e:	2300      	movs	r3, #0
 8028f70:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8028f72:	4b04      	ldr	r3, [pc, #16]	; (8028f84 <xTaskGetTickCountFromISR+0x20>)
 8028f74:	681b      	ldr	r3, [r3, #0]
 8028f76:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8028f78:	683b      	ldr	r3, [r7, #0]
}
 8028f7a:	4618      	mov	r0, r3
 8028f7c:	3708      	adds	r7, #8
 8028f7e:	46bd      	mov	sp, r7
 8028f80:	bd80      	pop	{r7, pc}
 8028f82:	bf00      	nop
 8028f84:	24002030 	.word	0x24002030

08028f88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8028f88:	b580      	push	{r7, lr}
 8028f8a:	b086      	sub	sp, #24
 8028f8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8028f8e:	2300      	movs	r3, #0
 8028f90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8028f92:	4b4e      	ldr	r3, [pc, #312]	; (80290cc <xTaskIncrementTick+0x144>)
 8028f94:	681b      	ldr	r3, [r3, #0]
 8028f96:	2b00      	cmp	r3, #0
 8028f98:	f040 8088 	bne.w	80290ac <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8028f9c:	4b4c      	ldr	r3, [pc, #304]	; (80290d0 <xTaskIncrementTick+0x148>)
 8028f9e:	681b      	ldr	r3, [r3, #0]
 8028fa0:	3301      	adds	r3, #1
 8028fa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8028fa4:	4a4a      	ldr	r2, [pc, #296]	; (80290d0 <xTaskIncrementTick+0x148>)
 8028fa6:	693b      	ldr	r3, [r7, #16]
 8028fa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8028faa:	693b      	ldr	r3, [r7, #16]
 8028fac:	2b00      	cmp	r3, #0
 8028fae:	d11f      	bne.n	8028ff0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8028fb0:	4b48      	ldr	r3, [pc, #288]	; (80290d4 <xTaskIncrementTick+0x14c>)
 8028fb2:	681b      	ldr	r3, [r3, #0]
 8028fb4:	681b      	ldr	r3, [r3, #0]
 8028fb6:	2b00      	cmp	r3, #0
 8028fb8:	d009      	beq.n	8028fce <xTaskIncrementTick+0x46>
 8028fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8028fbe:	f383 8811 	msr	BASEPRI, r3
 8028fc2:	f3bf 8f6f 	isb	sy
 8028fc6:	f3bf 8f4f 	dsb	sy
 8028fca:	603b      	str	r3, [r7, #0]
 8028fcc:	e7fe      	b.n	8028fcc <xTaskIncrementTick+0x44>
 8028fce:	4b41      	ldr	r3, [pc, #260]	; (80290d4 <xTaskIncrementTick+0x14c>)
 8028fd0:	681b      	ldr	r3, [r3, #0]
 8028fd2:	60fb      	str	r3, [r7, #12]
 8028fd4:	4b40      	ldr	r3, [pc, #256]	; (80290d8 <xTaskIncrementTick+0x150>)
 8028fd6:	681b      	ldr	r3, [r3, #0]
 8028fd8:	4a3e      	ldr	r2, [pc, #248]	; (80290d4 <xTaskIncrementTick+0x14c>)
 8028fda:	6013      	str	r3, [r2, #0]
 8028fdc:	4a3e      	ldr	r2, [pc, #248]	; (80290d8 <xTaskIncrementTick+0x150>)
 8028fde:	68fb      	ldr	r3, [r7, #12]
 8028fe0:	6013      	str	r3, [r2, #0]
 8028fe2:	4b3e      	ldr	r3, [pc, #248]	; (80290dc <xTaskIncrementTick+0x154>)
 8028fe4:	681b      	ldr	r3, [r3, #0]
 8028fe6:	3301      	adds	r3, #1
 8028fe8:	4a3c      	ldr	r2, [pc, #240]	; (80290dc <xTaskIncrementTick+0x154>)
 8028fea:	6013      	str	r3, [r2, #0]
 8028fec:	f000 fac4 	bl	8029578 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8028ff0:	4b3b      	ldr	r3, [pc, #236]	; (80290e0 <xTaskIncrementTick+0x158>)
 8028ff2:	681b      	ldr	r3, [r3, #0]
 8028ff4:	693a      	ldr	r2, [r7, #16]
 8028ff6:	429a      	cmp	r2, r3
 8028ff8:	d349      	bcc.n	802908e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8028ffa:	4b36      	ldr	r3, [pc, #216]	; (80290d4 <xTaskIncrementTick+0x14c>)
 8028ffc:	681b      	ldr	r3, [r3, #0]
 8028ffe:	681b      	ldr	r3, [r3, #0]
 8029000:	2b00      	cmp	r3, #0
 8029002:	d104      	bne.n	802900e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8029004:	4b36      	ldr	r3, [pc, #216]	; (80290e0 <xTaskIncrementTick+0x158>)
 8029006:	f04f 32ff 	mov.w	r2, #4294967295
 802900a:	601a      	str	r2, [r3, #0]
					break;
 802900c:	e03f      	b.n	802908e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802900e:	4b31      	ldr	r3, [pc, #196]	; (80290d4 <xTaskIncrementTick+0x14c>)
 8029010:	681b      	ldr	r3, [r3, #0]
 8029012:	68db      	ldr	r3, [r3, #12]
 8029014:	68db      	ldr	r3, [r3, #12]
 8029016:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8029018:	68bb      	ldr	r3, [r7, #8]
 802901a:	685b      	ldr	r3, [r3, #4]
 802901c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 802901e:	693a      	ldr	r2, [r7, #16]
 8029020:	687b      	ldr	r3, [r7, #4]
 8029022:	429a      	cmp	r2, r3
 8029024:	d203      	bcs.n	802902e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8029026:	4a2e      	ldr	r2, [pc, #184]	; (80290e0 <xTaskIncrementTick+0x158>)
 8029028:	687b      	ldr	r3, [r7, #4]
 802902a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802902c:	e02f      	b.n	802908e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802902e:	68bb      	ldr	r3, [r7, #8]
 8029030:	3304      	adds	r3, #4
 8029032:	4618      	mov	r0, r3
 8029034:	f7fe fbf2 	bl	802781c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8029038:	68bb      	ldr	r3, [r7, #8]
 802903a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802903c:	2b00      	cmp	r3, #0
 802903e:	d004      	beq.n	802904a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8029040:	68bb      	ldr	r3, [r7, #8]
 8029042:	3318      	adds	r3, #24
 8029044:	4618      	mov	r0, r3
 8029046:	f7fe fbe9 	bl	802781c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802904a:	68bb      	ldr	r3, [r7, #8]
 802904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802904e:	4b25      	ldr	r3, [pc, #148]	; (80290e4 <xTaskIncrementTick+0x15c>)
 8029050:	681b      	ldr	r3, [r3, #0]
 8029052:	429a      	cmp	r2, r3
 8029054:	d903      	bls.n	802905e <xTaskIncrementTick+0xd6>
 8029056:	68bb      	ldr	r3, [r7, #8]
 8029058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802905a:	4a22      	ldr	r2, [pc, #136]	; (80290e4 <xTaskIncrementTick+0x15c>)
 802905c:	6013      	str	r3, [r2, #0]
 802905e:	68bb      	ldr	r3, [r7, #8]
 8029060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029062:	4613      	mov	r3, r2
 8029064:	009b      	lsls	r3, r3, #2
 8029066:	4413      	add	r3, r2
 8029068:	009b      	lsls	r3, r3, #2
 802906a:	4a1f      	ldr	r2, [pc, #124]	; (80290e8 <xTaskIncrementTick+0x160>)
 802906c:	441a      	add	r2, r3
 802906e:	68bb      	ldr	r3, [r7, #8]
 8029070:	3304      	adds	r3, #4
 8029072:	4619      	mov	r1, r3
 8029074:	4610      	mov	r0, r2
 8029076:	f7fe fb74 	bl	8027762 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802907a:	68bb      	ldr	r3, [r7, #8]
 802907c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802907e:	4b1b      	ldr	r3, [pc, #108]	; (80290ec <xTaskIncrementTick+0x164>)
 8029080:	681b      	ldr	r3, [r3, #0]
 8029082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029084:	429a      	cmp	r2, r3
 8029086:	d3b8      	bcc.n	8028ffa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8029088:	2301      	movs	r3, #1
 802908a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802908c:	e7b5      	b.n	8028ffa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 802908e:	4b17      	ldr	r3, [pc, #92]	; (80290ec <xTaskIncrementTick+0x164>)
 8029090:	681b      	ldr	r3, [r3, #0]
 8029092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029094:	4914      	ldr	r1, [pc, #80]	; (80290e8 <xTaskIncrementTick+0x160>)
 8029096:	4613      	mov	r3, r2
 8029098:	009b      	lsls	r3, r3, #2
 802909a:	4413      	add	r3, r2
 802909c:	009b      	lsls	r3, r3, #2
 802909e:	440b      	add	r3, r1
 80290a0:	681b      	ldr	r3, [r3, #0]
 80290a2:	2b01      	cmp	r3, #1
 80290a4:	d907      	bls.n	80290b6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80290a6:	2301      	movs	r3, #1
 80290a8:	617b      	str	r3, [r7, #20]
 80290aa:	e004      	b.n	80290b6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80290ac:	4b10      	ldr	r3, [pc, #64]	; (80290f0 <xTaskIncrementTick+0x168>)
 80290ae:	681b      	ldr	r3, [r3, #0]
 80290b0:	3301      	adds	r3, #1
 80290b2:	4a0f      	ldr	r2, [pc, #60]	; (80290f0 <xTaskIncrementTick+0x168>)
 80290b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80290b6:	4b0f      	ldr	r3, [pc, #60]	; (80290f4 <xTaskIncrementTick+0x16c>)
 80290b8:	681b      	ldr	r3, [r3, #0]
 80290ba:	2b00      	cmp	r3, #0
 80290bc:	d001      	beq.n	80290c2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80290be:	2301      	movs	r3, #1
 80290c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80290c2:	697b      	ldr	r3, [r7, #20]
}
 80290c4:	4618      	mov	r0, r3
 80290c6:	3718      	adds	r7, #24
 80290c8:	46bd      	mov	sp, r7
 80290ca:	bd80      	pop	{r7, pc}
 80290cc:	24002054 	.word	0x24002054
 80290d0:	24002030 	.word	0x24002030
 80290d4:	24001fe4 	.word	0x24001fe4
 80290d8:	24001fe8 	.word	0x24001fe8
 80290dc:	24002044 	.word	0x24002044
 80290e0:	2400204c 	.word	0x2400204c
 80290e4:	24002034 	.word	0x24002034
 80290e8:	24001b5c 	.word	0x24001b5c
 80290ec:	24001b58 	.word	0x24001b58
 80290f0:	2400203c 	.word	0x2400203c
 80290f4:	24002040 	.word	0x24002040

080290f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80290f8:	b480      	push	{r7}
 80290fa:	b085      	sub	sp, #20
 80290fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80290fe:	4b27      	ldr	r3, [pc, #156]	; (802919c <vTaskSwitchContext+0xa4>)
 8029100:	681b      	ldr	r3, [r3, #0]
 8029102:	2b00      	cmp	r3, #0
 8029104:	d003      	beq.n	802910e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8029106:	4b26      	ldr	r3, [pc, #152]	; (80291a0 <vTaskSwitchContext+0xa8>)
 8029108:	2201      	movs	r2, #1
 802910a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 802910c:	e040      	b.n	8029190 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 802910e:	4b24      	ldr	r3, [pc, #144]	; (80291a0 <vTaskSwitchContext+0xa8>)
 8029110:	2200      	movs	r2, #0
 8029112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8029114:	4b23      	ldr	r3, [pc, #140]	; (80291a4 <vTaskSwitchContext+0xac>)
 8029116:	681b      	ldr	r3, [r3, #0]
 8029118:	60fb      	str	r3, [r7, #12]
 802911a:	e00f      	b.n	802913c <vTaskSwitchContext+0x44>
 802911c:	68fb      	ldr	r3, [r7, #12]
 802911e:	2b00      	cmp	r3, #0
 8029120:	d109      	bne.n	8029136 <vTaskSwitchContext+0x3e>
 8029122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029126:	f383 8811 	msr	BASEPRI, r3
 802912a:	f3bf 8f6f 	isb	sy
 802912e:	f3bf 8f4f 	dsb	sy
 8029132:	607b      	str	r3, [r7, #4]
 8029134:	e7fe      	b.n	8029134 <vTaskSwitchContext+0x3c>
 8029136:	68fb      	ldr	r3, [r7, #12]
 8029138:	3b01      	subs	r3, #1
 802913a:	60fb      	str	r3, [r7, #12]
 802913c:	491a      	ldr	r1, [pc, #104]	; (80291a8 <vTaskSwitchContext+0xb0>)
 802913e:	68fa      	ldr	r2, [r7, #12]
 8029140:	4613      	mov	r3, r2
 8029142:	009b      	lsls	r3, r3, #2
 8029144:	4413      	add	r3, r2
 8029146:	009b      	lsls	r3, r3, #2
 8029148:	440b      	add	r3, r1
 802914a:	681b      	ldr	r3, [r3, #0]
 802914c:	2b00      	cmp	r3, #0
 802914e:	d0e5      	beq.n	802911c <vTaskSwitchContext+0x24>
 8029150:	68fa      	ldr	r2, [r7, #12]
 8029152:	4613      	mov	r3, r2
 8029154:	009b      	lsls	r3, r3, #2
 8029156:	4413      	add	r3, r2
 8029158:	009b      	lsls	r3, r3, #2
 802915a:	4a13      	ldr	r2, [pc, #76]	; (80291a8 <vTaskSwitchContext+0xb0>)
 802915c:	4413      	add	r3, r2
 802915e:	60bb      	str	r3, [r7, #8]
 8029160:	68bb      	ldr	r3, [r7, #8]
 8029162:	685b      	ldr	r3, [r3, #4]
 8029164:	685a      	ldr	r2, [r3, #4]
 8029166:	68bb      	ldr	r3, [r7, #8]
 8029168:	605a      	str	r2, [r3, #4]
 802916a:	68bb      	ldr	r3, [r7, #8]
 802916c:	685a      	ldr	r2, [r3, #4]
 802916e:	68bb      	ldr	r3, [r7, #8]
 8029170:	3308      	adds	r3, #8
 8029172:	429a      	cmp	r2, r3
 8029174:	d104      	bne.n	8029180 <vTaskSwitchContext+0x88>
 8029176:	68bb      	ldr	r3, [r7, #8]
 8029178:	685b      	ldr	r3, [r3, #4]
 802917a:	685a      	ldr	r2, [r3, #4]
 802917c:	68bb      	ldr	r3, [r7, #8]
 802917e:	605a      	str	r2, [r3, #4]
 8029180:	68bb      	ldr	r3, [r7, #8]
 8029182:	685b      	ldr	r3, [r3, #4]
 8029184:	68db      	ldr	r3, [r3, #12]
 8029186:	4a09      	ldr	r2, [pc, #36]	; (80291ac <vTaskSwitchContext+0xb4>)
 8029188:	6013      	str	r3, [r2, #0]
 802918a:	4a06      	ldr	r2, [pc, #24]	; (80291a4 <vTaskSwitchContext+0xac>)
 802918c:	68fb      	ldr	r3, [r7, #12]
 802918e:	6013      	str	r3, [r2, #0]
}
 8029190:	bf00      	nop
 8029192:	3714      	adds	r7, #20
 8029194:	46bd      	mov	sp, r7
 8029196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802919a:	4770      	bx	lr
 802919c:	24002054 	.word	0x24002054
 80291a0:	24002040 	.word	0x24002040
 80291a4:	24002034 	.word	0x24002034
 80291a8:	24001b5c 	.word	0x24001b5c
 80291ac:	24001b58 	.word	0x24001b58

080291b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80291b0:	b580      	push	{r7, lr}
 80291b2:	b084      	sub	sp, #16
 80291b4:	af00      	add	r7, sp, #0
 80291b6:	6078      	str	r0, [r7, #4]
 80291b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80291ba:	687b      	ldr	r3, [r7, #4]
 80291bc:	2b00      	cmp	r3, #0
 80291be:	d109      	bne.n	80291d4 <vTaskPlaceOnEventList+0x24>
 80291c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80291c4:	f383 8811 	msr	BASEPRI, r3
 80291c8:	f3bf 8f6f 	isb	sy
 80291cc:	f3bf 8f4f 	dsb	sy
 80291d0:	60fb      	str	r3, [r7, #12]
 80291d2:	e7fe      	b.n	80291d2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80291d4:	4b07      	ldr	r3, [pc, #28]	; (80291f4 <vTaskPlaceOnEventList+0x44>)
 80291d6:	681b      	ldr	r3, [r3, #0]
 80291d8:	3318      	adds	r3, #24
 80291da:	4619      	mov	r1, r3
 80291dc:	6878      	ldr	r0, [r7, #4]
 80291de:	f7fe fae4 	bl	80277aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80291e2:	2101      	movs	r1, #1
 80291e4:	6838      	ldr	r0, [r7, #0]
 80291e6:	f000 fd63 	bl	8029cb0 <prvAddCurrentTaskToDelayedList>
}
 80291ea:	bf00      	nop
 80291ec:	3710      	adds	r7, #16
 80291ee:	46bd      	mov	sp, r7
 80291f0:	bd80      	pop	{r7, pc}
 80291f2:	bf00      	nop
 80291f4:	24001b58 	.word	0x24001b58

080291f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80291f8:	b580      	push	{r7, lr}
 80291fa:	b086      	sub	sp, #24
 80291fc:	af00      	add	r7, sp, #0
 80291fe:	60f8      	str	r0, [r7, #12]
 8029200:	60b9      	str	r1, [r7, #8]
 8029202:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8029204:	68fb      	ldr	r3, [r7, #12]
 8029206:	2b00      	cmp	r3, #0
 8029208:	d109      	bne.n	802921e <vTaskPlaceOnEventListRestricted+0x26>
 802920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802920e:	f383 8811 	msr	BASEPRI, r3
 8029212:	f3bf 8f6f 	isb	sy
 8029216:	f3bf 8f4f 	dsb	sy
 802921a:	617b      	str	r3, [r7, #20]
 802921c:	e7fe      	b.n	802921c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802921e:	4b0a      	ldr	r3, [pc, #40]	; (8029248 <vTaskPlaceOnEventListRestricted+0x50>)
 8029220:	681b      	ldr	r3, [r3, #0]
 8029222:	3318      	adds	r3, #24
 8029224:	4619      	mov	r1, r3
 8029226:	68f8      	ldr	r0, [r7, #12]
 8029228:	f7fe fa9b 	bl	8027762 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802922c:	687b      	ldr	r3, [r7, #4]
 802922e:	2b00      	cmp	r3, #0
 8029230:	d002      	beq.n	8029238 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8029232:	f04f 33ff 	mov.w	r3, #4294967295
 8029236:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8029238:	6879      	ldr	r1, [r7, #4]
 802923a:	68b8      	ldr	r0, [r7, #8]
 802923c:	f000 fd38 	bl	8029cb0 <prvAddCurrentTaskToDelayedList>
	}
 8029240:	bf00      	nop
 8029242:	3718      	adds	r7, #24
 8029244:	46bd      	mov	sp, r7
 8029246:	bd80      	pop	{r7, pc}
 8029248:	24001b58 	.word	0x24001b58

0802924c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 802924c:	b580      	push	{r7, lr}
 802924e:	b086      	sub	sp, #24
 8029250:	af00      	add	r7, sp, #0
 8029252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8029254:	687b      	ldr	r3, [r7, #4]
 8029256:	68db      	ldr	r3, [r3, #12]
 8029258:	68db      	ldr	r3, [r3, #12]
 802925a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 802925c:	693b      	ldr	r3, [r7, #16]
 802925e:	2b00      	cmp	r3, #0
 8029260:	d109      	bne.n	8029276 <xTaskRemoveFromEventList+0x2a>
 8029262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029266:	f383 8811 	msr	BASEPRI, r3
 802926a:	f3bf 8f6f 	isb	sy
 802926e:	f3bf 8f4f 	dsb	sy
 8029272:	60fb      	str	r3, [r7, #12]
 8029274:	e7fe      	b.n	8029274 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8029276:	693b      	ldr	r3, [r7, #16]
 8029278:	3318      	adds	r3, #24
 802927a:	4618      	mov	r0, r3
 802927c:	f7fe face 	bl	802781c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8029280:	4b1d      	ldr	r3, [pc, #116]	; (80292f8 <xTaskRemoveFromEventList+0xac>)
 8029282:	681b      	ldr	r3, [r3, #0]
 8029284:	2b00      	cmp	r3, #0
 8029286:	d11d      	bne.n	80292c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8029288:	693b      	ldr	r3, [r7, #16]
 802928a:	3304      	adds	r3, #4
 802928c:	4618      	mov	r0, r3
 802928e:	f7fe fac5 	bl	802781c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8029292:	693b      	ldr	r3, [r7, #16]
 8029294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029296:	4b19      	ldr	r3, [pc, #100]	; (80292fc <xTaskRemoveFromEventList+0xb0>)
 8029298:	681b      	ldr	r3, [r3, #0]
 802929a:	429a      	cmp	r2, r3
 802929c:	d903      	bls.n	80292a6 <xTaskRemoveFromEventList+0x5a>
 802929e:	693b      	ldr	r3, [r7, #16]
 80292a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80292a2:	4a16      	ldr	r2, [pc, #88]	; (80292fc <xTaskRemoveFromEventList+0xb0>)
 80292a4:	6013      	str	r3, [r2, #0]
 80292a6:	693b      	ldr	r3, [r7, #16]
 80292a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80292aa:	4613      	mov	r3, r2
 80292ac:	009b      	lsls	r3, r3, #2
 80292ae:	4413      	add	r3, r2
 80292b0:	009b      	lsls	r3, r3, #2
 80292b2:	4a13      	ldr	r2, [pc, #76]	; (8029300 <xTaskRemoveFromEventList+0xb4>)
 80292b4:	441a      	add	r2, r3
 80292b6:	693b      	ldr	r3, [r7, #16]
 80292b8:	3304      	adds	r3, #4
 80292ba:	4619      	mov	r1, r3
 80292bc:	4610      	mov	r0, r2
 80292be:	f7fe fa50 	bl	8027762 <vListInsertEnd>
 80292c2:	e005      	b.n	80292d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80292c4:	693b      	ldr	r3, [r7, #16]
 80292c6:	3318      	adds	r3, #24
 80292c8:	4619      	mov	r1, r3
 80292ca:	480e      	ldr	r0, [pc, #56]	; (8029304 <xTaskRemoveFromEventList+0xb8>)
 80292cc:	f7fe fa49 	bl	8027762 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80292d0:	693b      	ldr	r3, [r7, #16]
 80292d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80292d4:	4b0c      	ldr	r3, [pc, #48]	; (8029308 <xTaskRemoveFromEventList+0xbc>)
 80292d6:	681b      	ldr	r3, [r3, #0]
 80292d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80292da:	429a      	cmp	r2, r3
 80292dc:	d905      	bls.n	80292ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80292de:	2301      	movs	r3, #1
 80292e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80292e2:	4b0a      	ldr	r3, [pc, #40]	; (802930c <xTaskRemoveFromEventList+0xc0>)
 80292e4:	2201      	movs	r2, #1
 80292e6:	601a      	str	r2, [r3, #0]
 80292e8:	e001      	b.n	80292ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80292ea:	2300      	movs	r3, #0
 80292ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80292ee:	697b      	ldr	r3, [r7, #20]
}
 80292f0:	4618      	mov	r0, r3
 80292f2:	3718      	adds	r7, #24
 80292f4:	46bd      	mov	sp, r7
 80292f6:	bd80      	pop	{r7, pc}
 80292f8:	24002054 	.word	0x24002054
 80292fc:	24002034 	.word	0x24002034
 8029300:	24001b5c 	.word	0x24001b5c
 8029304:	24001fec 	.word	0x24001fec
 8029308:	24001b58 	.word	0x24001b58
 802930c:	24002040 	.word	0x24002040

08029310 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8029310:	b480      	push	{r7}
 8029312:	b083      	sub	sp, #12
 8029314:	af00      	add	r7, sp, #0
 8029316:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8029318:	4b06      	ldr	r3, [pc, #24]	; (8029334 <vTaskInternalSetTimeOutState+0x24>)
 802931a:	681a      	ldr	r2, [r3, #0]
 802931c:	687b      	ldr	r3, [r7, #4]
 802931e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8029320:	4b05      	ldr	r3, [pc, #20]	; (8029338 <vTaskInternalSetTimeOutState+0x28>)
 8029322:	681a      	ldr	r2, [r3, #0]
 8029324:	687b      	ldr	r3, [r7, #4]
 8029326:	605a      	str	r2, [r3, #4]
}
 8029328:	bf00      	nop
 802932a:	370c      	adds	r7, #12
 802932c:	46bd      	mov	sp, r7
 802932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029332:	4770      	bx	lr
 8029334:	24002044 	.word	0x24002044
 8029338:	24002030 	.word	0x24002030

0802933c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 802933c:	b580      	push	{r7, lr}
 802933e:	b088      	sub	sp, #32
 8029340:	af00      	add	r7, sp, #0
 8029342:	6078      	str	r0, [r7, #4]
 8029344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8029346:	687b      	ldr	r3, [r7, #4]
 8029348:	2b00      	cmp	r3, #0
 802934a:	d109      	bne.n	8029360 <xTaskCheckForTimeOut+0x24>
 802934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029350:	f383 8811 	msr	BASEPRI, r3
 8029354:	f3bf 8f6f 	isb	sy
 8029358:	f3bf 8f4f 	dsb	sy
 802935c:	613b      	str	r3, [r7, #16]
 802935e:	e7fe      	b.n	802935e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8029360:	683b      	ldr	r3, [r7, #0]
 8029362:	2b00      	cmp	r3, #0
 8029364:	d109      	bne.n	802937a <xTaskCheckForTimeOut+0x3e>
 8029366:	f04f 0350 	mov.w	r3, #80	; 0x50
 802936a:	f383 8811 	msr	BASEPRI, r3
 802936e:	f3bf 8f6f 	isb	sy
 8029372:	f3bf 8f4f 	dsb	sy
 8029376:	60fb      	str	r3, [r7, #12]
 8029378:	e7fe      	b.n	8029378 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 802937a:	f001 f957 	bl	802a62c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802937e:	4b1d      	ldr	r3, [pc, #116]	; (80293f4 <xTaskCheckForTimeOut+0xb8>)
 8029380:	681b      	ldr	r3, [r3, #0]
 8029382:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8029384:	687b      	ldr	r3, [r7, #4]
 8029386:	685b      	ldr	r3, [r3, #4]
 8029388:	69ba      	ldr	r2, [r7, #24]
 802938a:	1ad3      	subs	r3, r2, r3
 802938c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802938e:	683b      	ldr	r3, [r7, #0]
 8029390:	681b      	ldr	r3, [r3, #0]
 8029392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029396:	d102      	bne.n	802939e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8029398:	2300      	movs	r3, #0
 802939a:	61fb      	str	r3, [r7, #28]
 802939c:	e023      	b.n	80293e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802939e:	687b      	ldr	r3, [r7, #4]
 80293a0:	681a      	ldr	r2, [r3, #0]
 80293a2:	4b15      	ldr	r3, [pc, #84]	; (80293f8 <xTaskCheckForTimeOut+0xbc>)
 80293a4:	681b      	ldr	r3, [r3, #0]
 80293a6:	429a      	cmp	r2, r3
 80293a8:	d007      	beq.n	80293ba <xTaskCheckForTimeOut+0x7e>
 80293aa:	687b      	ldr	r3, [r7, #4]
 80293ac:	685b      	ldr	r3, [r3, #4]
 80293ae:	69ba      	ldr	r2, [r7, #24]
 80293b0:	429a      	cmp	r2, r3
 80293b2:	d302      	bcc.n	80293ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80293b4:	2301      	movs	r3, #1
 80293b6:	61fb      	str	r3, [r7, #28]
 80293b8:	e015      	b.n	80293e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80293ba:	683b      	ldr	r3, [r7, #0]
 80293bc:	681b      	ldr	r3, [r3, #0]
 80293be:	697a      	ldr	r2, [r7, #20]
 80293c0:	429a      	cmp	r2, r3
 80293c2:	d20b      	bcs.n	80293dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80293c4:	683b      	ldr	r3, [r7, #0]
 80293c6:	681a      	ldr	r2, [r3, #0]
 80293c8:	697b      	ldr	r3, [r7, #20]
 80293ca:	1ad2      	subs	r2, r2, r3
 80293cc:	683b      	ldr	r3, [r7, #0]
 80293ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80293d0:	6878      	ldr	r0, [r7, #4]
 80293d2:	f7ff ff9d 	bl	8029310 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80293d6:	2300      	movs	r3, #0
 80293d8:	61fb      	str	r3, [r7, #28]
 80293da:	e004      	b.n	80293e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80293dc:	683b      	ldr	r3, [r7, #0]
 80293de:	2200      	movs	r2, #0
 80293e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80293e2:	2301      	movs	r3, #1
 80293e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80293e6:	f001 f94f 	bl	802a688 <vPortExitCritical>

	return xReturn;
 80293ea:	69fb      	ldr	r3, [r7, #28]
}
 80293ec:	4618      	mov	r0, r3
 80293ee:	3720      	adds	r7, #32
 80293f0:	46bd      	mov	sp, r7
 80293f2:	bd80      	pop	{r7, pc}
 80293f4:	24002030 	.word	0x24002030
 80293f8:	24002044 	.word	0x24002044

080293fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80293fc:	b480      	push	{r7}
 80293fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8029400:	4b03      	ldr	r3, [pc, #12]	; (8029410 <vTaskMissedYield+0x14>)
 8029402:	2201      	movs	r2, #1
 8029404:	601a      	str	r2, [r3, #0]
}
 8029406:	bf00      	nop
 8029408:	46bd      	mov	sp, r7
 802940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802940e:	4770      	bx	lr
 8029410:	24002040 	.word	0x24002040

08029414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8029414:	b580      	push	{r7, lr}
 8029416:	b082      	sub	sp, #8
 8029418:	af00      	add	r7, sp, #0
 802941a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 802941c:	f000 f852 	bl	80294c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8029420:	4b06      	ldr	r3, [pc, #24]	; (802943c <prvIdleTask+0x28>)
 8029422:	681b      	ldr	r3, [r3, #0]
 8029424:	2b01      	cmp	r3, #1
 8029426:	d9f9      	bls.n	802941c <prvIdleTask+0x8>
			{
				taskYIELD();
 8029428:	4b05      	ldr	r3, [pc, #20]	; (8029440 <prvIdleTask+0x2c>)
 802942a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802942e:	601a      	str	r2, [r3, #0]
 8029430:	f3bf 8f4f 	dsb	sy
 8029434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8029438:	e7f0      	b.n	802941c <prvIdleTask+0x8>
 802943a:	bf00      	nop
 802943c:	24001b5c 	.word	0x24001b5c
 8029440:	e000ed04 	.word	0xe000ed04

08029444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8029444:	b580      	push	{r7, lr}
 8029446:	b082      	sub	sp, #8
 8029448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802944a:	2300      	movs	r3, #0
 802944c:	607b      	str	r3, [r7, #4]
 802944e:	e00c      	b.n	802946a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8029450:	687a      	ldr	r2, [r7, #4]
 8029452:	4613      	mov	r3, r2
 8029454:	009b      	lsls	r3, r3, #2
 8029456:	4413      	add	r3, r2
 8029458:	009b      	lsls	r3, r3, #2
 802945a:	4a12      	ldr	r2, [pc, #72]	; (80294a4 <prvInitialiseTaskLists+0x60>)
 802945c:	4413      	add	r3, r2
 802945e:	4618      	mov	r0, r3
 8029460:	f7fe f952 	bl	8027708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8029464:	687b      	ldr	r3, [r7, #4]
 8029466:	3301      	adds	r3, #1
 8029468:	607b      	str	r3, [r7, #4]
 802946a:	687b      	ldr	r3, [r7, #4]
 802946c:	2b37      	cmp	r3, #55	; 0x37
 802946e:	d9ef      	bls.n	8029450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8029470:	480d      	ldr	r0, [pc, #52]	; (80294a8 <prvInitialiseTaskLists+0x64>)
 8029472:	f7fe f949 	bl	8027708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8029476:	480d      	ldr	r0, [pc, #52]	; (80294ac <prvInitialiseTaskLists+0x68>)
 8029478:	f7fe f946 	bl	8027708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 802947c:	480c      	ldr	r0, [pc, #48]	; (80294b0 <prvInitialiseTaskLists+0x6c>)
 802947e:	f7fe f943 	bl	8027708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8029482:	480c      	ldr	r0, [pc, #48]	; (80294b4 <prvInitialiseTaskLists+0x70>)
 8029484:	f7fe f940 	bl	8027708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8029488:	480b      	ldr	r0, [pc, #44]	; (80294b8 <prvInitialiseTaskLists+0x74>)
 802948a:	f7fe f93d 	bl	8027708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802948e:	4b0b      	ldr	r3, [pc, #44]	; (80294bc <prvInitialiseTaskLists+0x78>)
 8029490:	4a05      	ldr	r2, [pc, #20]	; (80294a8 <prvInitialiseTaskLists+0x64>)
 8029492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8029494:	4b0a      	ldr	r3, [pc, #40]	; (80294c0 <prvInitialiseTaskLists+0x7c>)
 8029496:	4a05      	ldr	r2, [pc, #20]	; (80294ac <prvInitialiseTaskLists+0x68>)
 8029498:	601a      	str	r2, [r3, #0]
}
 802949a:	bf00      	nop
 802949c:	3708      	adds	r7, #8
 802949e:	46bd      	mov	sp, r7
 80294a0:	bd80      	pop	{r7, pc}
 80294a2:	bf00      	nop
 80294a4:	24001b5c 	.word	0x24001b5c
 80294a8:	24001fbc 	.word	0x24001fbc
 80294ac:	24001fd0 	.word	0x24001fd0
 80294b0:	24001fec 	.word	0x24001fec
 80294b4:	24002000 	.word	0x24002000
 80294b8:	24002018 	.word	0x24002018
 80294bc:	24001fe4 	.word	0x24001fe4
 80294c0:	24001fe8 	.word	0x24001fe8

080294c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80294c4:	b580      	push	{r7, lr}
 80294c6:	b082      	sub	sp, #8
 80294c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80294ca:	e019      	b.n	8029500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80294cc:	f001 f8ae 	bl	802a62c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80294d0:	4b0f      	ldr	r3, [pc, #60]	; (8029510 <prvCheckTasksWaitingTermination+0x4c>)
 80294d2:	68db      	ldr	r3, [r3, #12]
 80294d4:	68db      	ldr	r3, [r3, #12]
 80294d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80294d8:	687b      	ldr	r3, [r7, #4]
 80294da:	3304      	adds	r3, #4
 80294dc:	4618      	mov	r0, r3
 80294de:	f7fe f99d 	bl	802781c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80294e2:	4b0c      	ldr	r3, [pc, #48]	; (8029514 <prvCheckTasksWaitingTermination+0x50>)
 80294e4:	681b      	ldr	r3, [r3, #0]
 80294e6:	3b01      	subs	r3, #1
 80294e8:	4a0a      	ldr	r2, [pc, #40]	; (8029514 <prvCheckTasksWaitingTermination+0x50>)
 80294ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80294ec:	4b0a      	ldr	r3, [pc, #40]	; (8029518 <prvCheckTasksWaitingTermination+0x54>)
 80294ee:	681b      	ldr	r3, [r3, #0]
 80294f0:	3b01      	subs	r3, #1
 80294f2:	4a09      	ldr	r2, [pc, #36]	; (8029518 <prvCheckTasksWaitingTermination+0x54>)
 80294f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80294f6:	f001 f8c7 	bl	802a688 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80294fa:	6878      	ldr	r0, [r7, #4]
 80294fc:	f000 f80e 	bl	802951c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8029500:	4b05      	ldr	r3, [pc, #20]	; (8029518 <prvCheckTasksWaitingTermination+0x54>)
 8029502:	681b      	ldr	r3, [r3, #0]
 8029504:	2b00      	cmp	r3, #0
 8029506:	d1e1      	bne.n	80294cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8029508:	bf00      	nop
 802950a:	3708      	adds	r7, #8
 802950c:	46bd      	mov	sp, r7
 802950e:	bd80      	pop	{r7, pc}
 8029510:	24002000 	.word	0x24002000
 8029514:	2400202c 	.word	0x2400202c
 8029518:	24002014 	.word	0x24002014

0802951c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 802951c:	b580      	push	{r7, lr}
 802951e:	b084      	sub	sp, #16
 8029520:	af00      	add	r7, sp, #0
 8029522:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8029524:	687b      	ldr	r3, [r7, #4]
 8029526:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 802952a:	2b00      	cmp	r3, #0
 802952c:	d108      	bne.n	8029540 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 802952e:	687b      	ldr	r3, [r7, #4]
 8029530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029532:	4618      	mov	r0, r3
 8029534:	f001 fa56 	bl	802a9e4 <vPortFree>
				vPortFree( pxTCB );
 8029538:	6878      	ldr	r0, [r7, #4]
 802953a:	f001 fa53 	bl	802a9e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802953e:	e017      	b.n	8029570 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8029546:	2b01      	cmp	r3, #1
 8029548:	d103      	bne.n	8029552 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 802954a:	6878      	ldr	r0, [r7, #4]
 802954c:	f001 fa4a 	bl	802a9e4 <vPortFree>
	}
 8029550:	e00e      	b.n	8029570 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8029552:	687b      	ldr	r3, [r7, #4]
 8029554:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8029558:	2b02      	cmp	r3, #2
 802955a:	d009      	beq.n	8029570 <prvDeleteTCB+0x54>
 802955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029560:	f383 8811 	msr	BASEPRI, r3
 8029564:	f3bf 8f6f 	isb	sy
 8029568:	f3bf 8f4f 	dsb	sy
 802956c:	60fb      	str	r3, [r7, #12]
 802956e:	e7fe      	b.n	802956e <prvDeleteTCB+0x52>
	}
 8029570:	bf00      	nop
 8029572:	3710      	adds	r7, #16
 8029574:	46bd      	mov	sp, r7
 8029576:	bd80      	pop	{r7, pc}

08029578 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8029578:	b480      	push	{r7}
 802957a:	b083      	sub	sp, #12
 802957c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802957e:	4b0c      	ldr	r3, [pc, #48]	; (80295b0 <prvResetNextTaskUnblockTime+0x38>)
 8029580:	681b      	ldr	r3, [r3, #0]
 8029582:	681b      	ldr	r3, [r3, #0]
 8029584:	2b00      	cmp	r3, #0
 8029586:	d104      	bne.n	8029592 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8029588:	4b0a      	ldr	r3, [pc, #40]	; (80295b4 <prvResetNextTaskUnblockTime+0x3c>)
 802958a:	f04f 32ff 	mov.w	r2, #4294967295
 802958e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8029590:	e008      	b.n	80295a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8029592:	4b07      	ldr	r3, [pc, #28]	; (80295b0 <prvResetNextTaskUnblockTime+0x38>)
 8029594:	681b      	ldr	r3, [r3, #0]
 8029596:	68db      	ldr	r3, [r3, #12]
 8029598:	68db      	ldr	r3, [r3, #12]
 802959a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	685b      	ldr	r3, [r3, #4]
 80295a0:	4a04      	ldr	r2, [pc, #16]	; (80295b4 <prvResetNextTaskUnblockTime+0x3c>)
 80295a2:	6013      	str	r3, [r2, #0]
}
 80295a4:	bf00      	nop
 80295a6:	370c      	adds	r7, #12
 80295a8:	46bd      	mov	sp, r7
 80295aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295ae:	4770      	bx	lr
 80295b0:	24001fe4 	.word	0x24001fe4
 80295b4:	2400204c 	.word	0x2400204c

080295b8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80295b8:	b480      	push	{r7}
 80295ba:	b083      	sub	sp, #12
 80295bc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80295be:	4b05      	ldr	r3, [pc, #20]	; (80295d4 <xTaskGetCurrentTaskHandle+0x1c>)
 80295c0:	681b      	ldr	r3, [r3, #0]
 80295c2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80295c4:	687b      	ldr	r3, [r7, #4]
	}
 80295c6:	4618      	mov	r0, r3
 80295c8:	370c      	adds	r7, #12
 80295ca:	46bd      	mov	sp, r7
 80295cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295d0:	4770      	bx	lr
 80295d2:	bf00      	nop
 80295d4:	24001b58 	.word	0x24001b58

080295d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80295d8:	b480      	push	{r7}
 80295da:	b083      	sub	sp, #12
 80295dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80295de:	4b0b      	ldr	r3, [pc, #44]	; (802960c <xTaskGetSchedulerState+0x34>)
 80295e0:	681b      	ldr	r3, [r3, #0]
 80295e2:	2b00      	cmp	r3, #0
 80295e4:	d102      	bne.n	80295ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80295e6:	2301      	movs	r3, #1
 80295e8:	607b      	str	r3, [r7, #4]
 80295ea:	e008      	b.n	80295fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80295ec:	4b08      	ldr	r3, [pc, #32]	; (8029610 <xTaskGetSchedulerState+0x38>)
 80295ee:	681b      	ldr	r3, [r3, #0]
 80295f0:	2b00      	cmp	r3, #0
 80295f2:	d102      	bne.n	80295fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80295f4:	2302      	movs	r3, #2
 80295f6:	607b      	str	r3, [r7, #4]
 80295f8:	e001      	b.n	80295fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80295fa:	2300      	movs	r3, #0
 80295fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80295fe:	687b      	ldr	r3, [r7, #4]
	}
 8029600:	4618      	mov	r0, r3
 8029602:	370c      	adds	r7, #12
 8029604:	46bd      	mov	sp, r7
 8029606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802960a:	4770      	bx	lr
 802960c:	24002038 	.word	0x24002038
 8029610:	24002054 	.word	0x24002054

08029614 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8029614:	b580      	push	{r7, lr}
 8029616:	b084      	sub	sp, #16
 8029618:	af00      	add	r7, sp, #0
 802961a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 802961c:	687b      	ldr	r3, [r7, #4]
 802961e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8029620:	2300      	movs	r3, #0
 8029622:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8029624:	687b      	ldr	r3, [r7, #4]
 8029626:	2b00      	cmp	r3, #0
 8029628:	d051      	beq.n	80296ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 802962a:	68bb      	ldr	r3, [r7, #8]
 802962c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802962e:	4b2a      	ldr	r3, [pc, #168]	; (80296d8 <xTaskPriorityInherit+0xc4>)
 8029630:	681b      	ldr	r3, [r3, #0]
 8029632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029634:	429a      	cmp	r2, r3
 8029636:	d241      	bcs.n	80296bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8029638:	68bb      	ldr	r3, [r7, #8]
 802963a:	699b      	ldr	r3, [r3, #24]
 802963c:	2b00      	cmp	r3, #0
 802963e:	db06      	blt.n	802964e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8029640:	4b25      	ldr	r3, [pc, #148]	; (80296d8 <xTaskPriorityInherit+0xc4>)
 8029642:	681b      	ldr	r3, [r3, #0]
 8029644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029646:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802964a:	68bb      	ldr	r3, [r7, #8]
 802964c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 802964e:	68bb      	ldr	r3, [r7, #8]
 8029650:	6959      	ldr	r1, [r3, #20]
 8029652:	68bb      	ldr	r3, [r7, #8]
 8029654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029656:	4613      	mov	r3, r2
 8029658:	009b      	lsls	r3, r3, #2
 802965a:	4413      	add	r3, r2
 802965c:	009b      	lsls	r3, r3, #2
 802965e:	4a1f      	ldr	r2, [pc, #124]	; (80296dc <xTaskPriorityInherit+0xc8>)
 8029660:	4413      	add	r3, r2
 8029662:	4299      	cmp	r1, r3
 8029664:	d122      	bne.n	80296ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8029666:	68bb      	ldr	r3, [r7, #8]
 8029668:	3304      	adds	r3, #4
 802966a:	4618      	mov	r0, r3
 802966c:	f7fe f8d6 	bl	802781c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8029670:	4b19      	ldr	r3, [pc, #100]	; (80296d8 <xTaskPriorityInherit+0xc4>)
 8029672:	681b      	ldr	r3, [r3, #0]
 8029674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029676:	68bb      	ldr	r3, [r7, #8]
 8029678:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 802967a:	68bb      	ldr	r3, [r7, #8]
 802967c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802967e:	4b18      	ldr	r3, [pc, #96]	; (80296e0 <xTaskPriorityInherit+0xcc>)
 8029680:	681b      	ldr	r3, [r3, #0]
 8029682:	429a      	cmp	r2, r3
 8029684:	d903      	bls.n	802968e <xTaskPriorityInherit+0x7a>
 8029686:	68bb      	ldr	r3, [r7, #8]
 8029688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802968a:	4a15      	ldr	r2, [pc, #84]	; (80296e0 <xTaskPriorityInherit+0xcc>)
 802968c:	6013      	str	r3, [r2, #0]
 802968e:	68bb      	ldr	r3, [r7, #8]
 8029690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029692:	4613      	mov	r3, r2
 8029694:	009b      	lsls	r3, r3, #2
 8029696:	4413      	add	r3, r2
 8029698:	009b      	lsls	r3, r3, #2
 802969a:	4a10      	ldr	r2, [pc, #64]	; (80296dc <xTaskPriorityInherit+0xc8>)
 802969c:	441a      	add	r2, r3
 802969e:	68bb      	ldr	r3, [r7, #8]
 80296a0:	3304      	adds	r3, #4
 80296a2:	4619      	mov	r1, r3
 80296a4:	4610      	mov	r0, r2
 80296a6:	f7fe f85c 	bl	8027762 <vListInsertEnd>
 80296aa:	e004      	b.n	80296b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80296ac:	4b0a      	ldr	r3, [pc, #40]	; (80296d8 <xTaskPriorityInherit+0xc4>)
 80296ae:	681b      	ldr	r3, [r3, #0]
 80296b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80296b2:	68bb      	ldr	r3, [r7, #8]
 80296b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80296b6:	2301      	movs	r3, #1
 80296b8:	60fb      	str	r3, [r7, #12]
 80296ba:	e008      	b.n	80296ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80296bc:	68bb      	ldr	r3, [r7, #8]
 80296be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80296c0:	4b05      	ldr	r3, [pc, #20]	; (80296d8 <xTaskPriorityInherit+0xc4>)
 80296c2:	681b      	ldr	r3, [r3, #0]
 80296c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80296c6:	429a      	cmp	r2, r3
 80296c8:	d201      	bcs.n	80296ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80296ca:	2301      	movs	r3, #1
 80296cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80296ce:	68fb      	ldr	r3, [r7, #12]
	}
 80296d0:	4618      	mov	r0, r3
 80296d2:	3710      	adds	r7, #16
 80296d4:	46bd      	mov	sp, r7
 80296d6:	bd80      	pop	{r7, pc}
 80296d8:	24001b58 	.word	0x24001b58
 80296dc:	24001b5c 	.word	0x24001b5c
 80296e0:	24002034 	.word	0x24002034

080296e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80296e4:	b580      	push	{r7, lr}
 80296e6:	b086      	sub	sp, #24
 80296e8:	af00      	add	r7, sp, #0
 80296ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80296ec:	687b      	ldr	r3, [r7, #4]
 80296ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80296f0:	2300      	movs	r3, #0
 80296f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80296f4:	687b      	ldr	r3, [r7, #4]
 80296f6:	2b00      	cmp	r3, #0
 80296f8:	d054      	beq.n	80297a4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80296fa:	4b2d      	ldr	r3, [pc, #180]	; (80297b0 <xTaskPriorityDisinherit+0xcc>)
 80296fc:	681b      	ldr	r3, [r3, #0]
 80296fe:	693a      	ldr	r2, [r7, #16]
 8029700:	429a      	cmp	r2, r3
 8029702:	d009      	beq.n	8029718 <xTaskPriorityDisinherit+0x34>
 8029704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029708:	f383 8811 	msr	BASEPRI, r3
 802970c:	f3bf 8f6f 	isb	sy
 8029710:	f3bf 8f4f 	dsb	sy
 8029714:	60fb      	str	r3, [r7, #12]
 8029716:	e7fe      	b.n	8029716 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8029718:	693b      	ldr	r3, [r7, #16]
 802971a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802971c:	2b00      	cmp	r3, #0
 802971e:	d109      	bne.n	8029734 <xTaskPriorityDisinherit+0x50>
 8029720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029724:	f383 8811 	msr	BASEPRI, r3
 8029728:	f3bf 8f6f 	isb	sy
 802972c:	f3bf 8f4f 	dsb	sy
 8029730:	60bb      	str	r3, [r7, #8]
 8029732:	e7fe      	b.n	8029732 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8029734:	693b      	ldr	r3, [r7, #16]
 8029736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029738:	1e5a      	subs	r2, r3, #1
 802973a:	693b      	ldr	r3, [r7, #16]
 802973c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802973e:	693b      	ldr	r3, [r7, #16]
 8029740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029742:	693b      	ldr	r3, [r7, #16]
 8029744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8029746:	429a      	cmp	r2, r3
 8029748:	d02c      	beq.n	80297a4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 802974a:	693b      	ldr	r3, [r7, #16]
 802974c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802974e:	2b00      	cmp	r3, #0
 8029750:	d128      	bne.n	80297a4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8029752:	693b      	ldr	r3, [r7, #16]
 8029754:	3304      	adds	r3, #4
 8029756:	4618      	mov	r0, r3
 8029758:	f7fe f860 	bl	802781c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 802975c:	693b      	ldr	r3, [r7, #16]
 802975e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8029760:	693b      	ldr	r3, [r7, #16]
 8029762:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8029764:	693b      	ldr	r3, [r7, #16]
 8029766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029768:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 802976c:	693b      	ldr	r3, [r7, #16]
 802976e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8029770:	693b      	ldr	r3, [r7, #16]
 8029772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029774:	4b0f      	ldr	r3, [pc, #60]	; (80297b4 <xTaskPriorityDisinherit+0xd0>)
 8029776:	681b      	ldr	r3, [r3, #0]
 8029778:	429a      	cmp	r2, r3
 802977a:	d903      	bls.n	8029784 <xTaskPriorityDisinherit+0xa0>
 802977c:	693b      	ldr	r3, [r7, #16]
 802977e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029780:	4a0c      	ldr	r2, [pc, #48]	; (80297b4 <xTaskPriorityDisinherit+0xd0>)
 8029782:	6013      	str	r3, [r2, #0]
 8029784:	693b      	ldr	r3, [r7, #16]
 8029786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029788:	4613      	mov	r3, r2
 802978a:	009b      	lsls	r3, r3, #2
 802978c:	4413      	add	r3, r2
 802978e:	009b      	lsls	r3, r3, #2
 8029790:	4a09      	ldr	r2, [pc, #36]	; (80297b8 <xTaskPriorityDisinherit+0xd4>)
 8029792:	441a      	add	r2, r3
 8029794:	693b      	ldr	r3, [r7, #16]
 8029796:	3304      	adds	r3, #4
 8029798:	4619      	mov	r1, r3
 802979a:	4610      	mov	r0, r2
 802979c:	f7fd ffe1 	bl	8027762 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80297a0:	2301      	movs	r3, #1
 80297a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80297a4:	697b      	ldr	r3, [r7, #20]
	}
 80297a6:	4618      	mov	r0, r3
 80297a8:	3718      	adds	r7, #24
 80297aa:	46bd      	mov	sp, r7
 80297ac:	bd80      	pop	{r7, pc}
 80297ae:	bf00      	nop
 80297b0:	24001b58 	.word	0x24001b58
 80297b4:	24002034 	.word	0x24002034
 80297b8:	24001b5c 	.word	0x24001b5c

080297bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80297bc:	b580      	push	{r7, lr}
 80297be:	b088      	sub	sp, #32
 80297c0:	af00      	add	r7, sp, #0
 80297c2:	6078      	str	r0, [r7, #4]
 80297c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80297c6:	687b      	ldr	r3, [r7, #4]
 80297c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80297ca:	2301      	movs	r3, #1
 80297cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80297ce:	687b      	ldr	r3, [r7, #4]
 80297d0:	2b00      	cmp	r3, #0
 80297d2:	d068      	beq.n	80298a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80297d4:	69bb      	ldr	r3, [r7, #24]
 80297d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80297d8:	2b00      	cmp	r3, #0
 80297da:	d109      	bne.n	80297f0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80297dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80297e0:	f383 8811 	msr	BASEPRI, r3
 80297e4:	f3bf 8f6f 	isb	sy
 80297e8:	f3bf 8f4f 	dsb	sy
 80297ec:	60fb      	str	r3, [r7, #12]
 80297ee:	e7fe      	b.n	80297ee <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80297f0:	69bb      	ldr	r3, [r7, #24]
 80297f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80297f4:	683a      	ldr	r2, [r7, #0]
 80297f6:	429a      	cmp	r2, r3
 80297f8:	d902      	bls.n	8029800 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80297fa:	683b      	ldr	r3, [r7, #0]
 80297fc:	61fb      	str	r3, [r7, #28]
 80297fe:	e002      	b.n	8029806 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8029800:	69bb      	ldr	r3, [r7, #24]
 8029802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8029804:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8029806:	69bb      	ldr	r3, [r7, #24]
 8029808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802980a:	69fa      	ldr	r2, [r7, #28]
 802980c:	429a      	cmp	r2, r3
 802980e:	d04a      	beq.n	80298a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8029810:	69bb      	ldr	r3, [r7, #24]
 8029812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029814:	697a      	ldr	r2, [r7, #20]
 8029816:	429a      	cmp	r2, r3
 8029818:	d145      	bne.n	80298a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 802981a:	4b25      	ldr	r3, [pc, #148]	; (80298b0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 802981c:	681b      	ldr	r3, [r3, #0]
 802981e:	69ba      	ldr	r2, [r7, #24]
 8029820:	429a      	cmp	r2, r3
 8029822:	d109      	bne.n	8029838 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8029824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029828:	f383 8811 	msr	BASEPRI, r3
 802982c:	f3bf 8f6f 	isb	sy
 8029830:	f3bf 8f4f 	dsb	sy
 8029834:	60bb      	str	r3, [r7, #8]
 8029836:	e7fe      	b.n	8029836 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8029838:	69bb      	ldr	r3, [r7, #24]
 802983a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802983c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 802983e:	69bb      	ldr	r3, [r7, #24]
 8029840:	69fa      	ldr	r2, [r7, #28]
 8029842:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8029844:	69bb      	ldr	r3, [r7, #24]
 8029846:	699b      	ldr	r3, [r3, #24]
 8029848:	2b00      	cmp	r3, #0
 802984a:	db04      	blt.n	8029856 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802984c:	69fb      	ldr	r3, [r7, #28]
 802984e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8029852:	69bb      	ldr	r3, [r7, #24]
 8029854:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8029856:	69bb      	ldr	r3, [r7, #24]
 8029858:	6959      	ldr	r1, [r3, #20]
 802985a:	693a      	ldr	r2, [r7, #16]
 802985c:	4613      	mov	r3, r2
 802985e:	009b      	lsls	r3, r3, #2
 8029860:	4413      	add	r3, r2
 8029862:	009b      	lsls	r3, r3, #2
 8029864:	4a13      	ldr	r2, [pc, #76]	; (80298b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8029866:	4413      	add	r3, r2
 8029868:	4299      	cmp	r1, r3
 802986a:	d11c      	bne.n	80298a6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802986c:	69bb      	ldr	r3, [r7, #24]
 802986e:	3304      	adds	r3, #4
 8029870:	4618      	mov	r0, r3
 8029872:	f7fd ffd3 	bl	802781c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8029876:	69bb      	ldr	r3, [r7, #24]
 8029878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802987a:	4b0f      	ldr	r3, [pc, #60]	; (80298b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 802987c:	681b      	ldr	r3, [r3, #0]
 802987e:	429a      	cmp	r2, r3
 8029880:	d903      	bls.n	802988a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8029882:	69bb      	ldr	r3, [r7, #24]
 8029884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029886:	4a0c      	ldr	r2, [pc, #48]	; (80298b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8029888:	6013      	str	r3, [r2, #0]
 802988a:	69bb      	ldr	r3, [r7, #24]
 802988c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802988e:	4613      	mov	r3, r2
 8029890:	009b      	lsls	r3, r3, #2
 8029892:	4413      	add	r3, r2
 8029894:	009b      	lsls	r3, r3, #2
 8029896:	4a07      	ldr	r2, [pc, #28]	; (80298b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8029898:	441a      	add	r2, r3
 802989a:	69bb      	ldr	r3, [r7, #24]
 802989c:	3304      	adds	r3, #4
 802989e:	4619      	mov	r1, r3
 80298a0:	4610      	mov	r0, r2
 80298a2:	f7fd ff5e 	bl	8027762 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80298a6:	bf00      	nop
 80298a8:	3720      	adds	r7, #32
 80298aa:	46bd      	mov	sp, r7
 80298ac:	bd80      	pop	{r7, pc}
 80298ae:	bf00      	nop
 80298b0:	24001b58 	.word	0x24001b58
 80298b4:	24001b5c 	.word	0x24001b5c
 80298b8:	24002034 	.word	0x24002034

080298bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80298bc:	b480      	push	{r7}
 80298be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80298c0:	4b07      	ldr	r3, [pc, #28]	; (80298e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80298c2:	681b      	ldr	r3, [r3, #0]
 80298c4:	2b00      	cmp	r3, #0
 80298c6:	d004      	beq.n	80298d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80298c8:	4b05      	ldr	r3, [pc, #20]	; (80298e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80298ca:	681b      	ldr	r3, [r3, #0]
 80298cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80298ce:	3201      	adds	r2, #1
 80298d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80298d2:	4b03      	ldr	r3, [pc, #12]	; (80298e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80298d4:	681b      	ldr	r3, [r3, #0]
	}
 80298d6:	4618      	mov	r0, r3
 80298d8:	46bd      	mov	sp, r7
 80298da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298de:	4770      	bx	lr
 80298e0:	24001b58 	.word	0x24001b58

080298e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80298e4:	b580      	push	{r7, lr}
 80298e6:	b086      	sub	sp, #24
 80298e8:	af00      	add	r7, sp, #0
 80298ea:	60f8      	str	r0, [r7, #12]
 80298ec:	60b9      	str	r1, [r7, #8]
 80298ee:	607a      	str	r2, [r7, #4]
 80298f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80298f2:	f000 fe9b 	bl	802a62c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80298f6:	4b26      	ldr	r3, [pc, #152]	; (8029990 <xTaskNotifyWait+0xac>)
 80298f8:	681b      	ldr	r3, [r3, #0]
 80298fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80298fe:	b2db      	uxtb	r3, r3
 8029900:	2b02      	cmp	r3, #2
 8029902:	d01a      	beq.n	802993a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8029904:	4b22      	ldr	r3, [pc, #136]	; (8029990 <xTaskNotifyWait+0xac>)
 8029906:	681b      	ldr	r3, [r3, #0]
 8029908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 802990a:	68fa      	ldr	r2, [r7, #12]
 802990c:	43d2      	mvns	r2, r2
 802990e:	400a      	ands	r2, r1
 8029910:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8029912:	4b1f      	ldr	r3, [pc, #124]	; (8029990 <xTaskNotifyWait+0xac>)
 8029914:	681b      	ldr	r3, [r3, #0]
 8029916:	2201      	movs	r2, #1
 8029918:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 802991c:	683b      	ldr	r3, [r7, #0]
 802991e:	2b00      	cmp	r3, #0
 8029920:	d00b      	beq.n	802993a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8029922:	2101      	movs	r1, #1
 8029924:	6838      	ldr	r0, [r7, #0]
 8029926:	f000 f9c3 	bl	8029cb0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 802992a:	4b1a      	ldr	r3, [pc, #104]	; (8029994 <xTaskNotifyWait+0xb0>)
 802992c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029930:	601a      	str	r2, [r3, #0]
 8029932:	f3bf 8f4f 	dsb	sy
 8029936:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 802993a:	f000 fea5 	bl	802a688 <vPortExitCritical>

		taskENTER_CRITICAL();
 802993e:	f000 fe75 	bl	802a62c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8029942:	687b      	ldr	r3, [r7, #4]
 8029944:	2b00      	cmp	r3, #0
 8029946:	d004      	beq.n	8029952 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8029948:	4b11      	ldr	r3, [pc, #68]	; (8029990 <xTaskNotifyWait+0xac>)
 802994a:	681b      	ldr	r3, [r3, #0]
 802994c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802994e:	687b      	ldr	r3, [r7, #4]
 8029950:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8029952:	4b0f      	ldr	r3, [pc, #60]	; (8029990 <xTaskNotifyWait+0xac>)
 8029954:	681b      	ldr	r3, [r3, #0]
 8029956:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 802995a:	b2db      	uxtb	r3, r3
 802995c:	2b02      	cmp	r3, #2
 802995e:	d002      	beq.n	8029966 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8029960:	2300      	movs	r3, #0
 8029962:	617b      	str	r3, [r7, #20]
 8029964:	e008      	b.n	8029978 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8029966:	4b0a      	ldr	r3, [pc, #40]	; (8029990 <xTaskNotifyWait+0xac>)
 8029968:	681b      	ldr	r3, [r3, #0]
 802996a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 802996c:	68ba      	ldr	r2, [r7, #8]
 802996e:	43d2      	mvns	r2, r2
 8029970:	400a      	ands	r2, r1
 8029972:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8029974:	2301      	movs	r3, #1
 8029976:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8029978:	4b05      	ldr	r3, [pc, #20]	; (8029990 <xTaskNotifyWait+0xac>)
 802997a:	681b      	ldr	r3, [r3, #0]
 802997c:	2200      	movs	r2, #0
 802997e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8029982:	f000 fe81 	bl	802a688 <vPortExitCritical>

		return xReturn;
 8029986:	697b      	ldr	r3, [r7, #20]
	}
 8029988:	4618      	mov	r0, r3
 802998a:	3718      	adds	r7, #24
 802998c:	46bd      	mov	sp, r7
 802998e:	bd80      	pop	{r7, pc}
 8029990:	24001b58 	.word	0x24001b58
 8029994:	e000ed04 	.word	0xe000ed04

08029998 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8029998:	b580      	push	{r7, lr}
 802999a:	b08a      	sub	sp, #40	; 0x28
 802999c:	af00      	add	r7, sp, #0
 802999e:	60f8      	str	r0, [r7, #12]
 80299a0:	60b9      	str	r1, [r7, #8]
 80299a2:	603b      	str	r3, [r7, #0]
 80299a4:	4613      	mov	r3, r2
 80299a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80299a8:	2301      	movs	r3, #1
 80299aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80299ac:	68fb      	ldr	r3, [r7, #12]
 80299ae:	2b00      	cmp	r3, #0
 80299b0:	d109      	bne.n	80299c6 <xTaskGenericNotify+0x2e>
 80299b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80299b6:	f383 8811 	msr	BASEPRI, r3
 80299ba:	f3bf 8f6f 	isb	sy
 80299be:	f3bf 8f4f 	dsb	sy
 80299c2:	61bb      	str	r3, [r7, #24]
 80299c4:	e7fe      	b.n	80299c4 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80299c6:	68fb      	ldr	r3, [r7, #12]
 80299c8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80299ca:	f000 fe2f 	bl	802a62c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80299ce:	683b      	ldr	r3, [r7, #0]
 80299d0:	2b00      	cmp	r3, #0
 80299d2:	d003      	beq.n	80299dc <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80299d4:	6a3b      	ldr	r3, [r7, #32]
 80299d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80299d8:	683b      	ldr	r3, [r7, #0]
 80299da:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80299dc:	6a3b      	ldr	r3, [r7, #32]
 80299de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80299e2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80299e4:	6a3b      	ldr	r3, [r7, #32]
 80299e6:	2202      	movs	r2, #2
 80299e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80299ec:	79fb      	ldrb	r3, [r7, #7]
 80299ee:	2b04      	cmp	r3, #4
 80299f0:	d827      	bhi.n	8029a42 <xTaskGenericNotify+0xaa>
 80299f2:	a201      	add	r2, pc, #4	; (adr r2, 80299f8 <xTaskGenericNotify+0x60>)
 80299f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80299f8:	08029a61 	.word	0x08029a61
 80299fc:	08029a0d 	.word	0x08029a0d
 8029a00:	08029a1b 	.word	0x08029a1b
 8029a04:	08029a27 	.word	0x08029a27
 8029a08:	08029a2f 	.word	0x08029a2f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8029a0c:	6a3b      	ldr	r3, [r7, #32]
 8029a0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8029a10:	68bb      	ldr	r3, [r7, #8]
 8029a12:	431a      	orrs	r2, r3
 8029a14:	6a3b      	ldr	r3, [r7, #32]
 8029a16:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8029a18:	e025      	b.n	8029a66 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8029a1a:	6a3b      	ldr	r3, [r7, #32]
 8029a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029a1e:	1c5a      	adds	r2, r3, #1
 8029a20:	6a3b      	ldr	r3, [r7, #32]
 8029a22:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8029a24:	e01f      	b.n	8029a66 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8029a26:	6a3b      	ldr	r3, [r7, #32]
 8029a28:	68ba      	ldr	r2, [r7, #8]
 8029a2a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8029a2c:	e01b      	b.n	8029a66 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8029a2e:	7ffb      	ldrb	r3, [r7, #31]
 8029a30:	2b02      	cmp	r3, #2
 8029a32:	d003      	beq.n	8029a3c <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8029a34:	6a3b      	ldr	r3, [r7, #32]
 8029a36:	68ba      	ldr	r2, [r7, #8]
 8029a38:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8029a3a:	e014      	b.n	8029a66 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8029a3c:	2300      	movs	r3, #0
 8029a3e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8029a40:	e011      	b.n	8029a66 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8029a42:	6a3b      	ldr	r3, [r7, #32]
 8029a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029a4a:	d00b      	beq.n	8029a64 <xTaskGenericNotify+0xcc>
 8029a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029a50:	f383 8811 	msr	BASEPRI, r3
 8029a54:	f3bf 8f6f 	isb	sy
 8029a58:	f3bf 8f4f 	dsb	sy
 8029a5c:	617b      	str	r3, [r7, #20]
 8029a5e:	e7fe      	b.n	8029a5e <xTaskGenericNotify+0xc6>
					break;
 8029a60:	bf00      	nop
 8029a62:	e000      	b.n	8029a66 <xTaskGenericNotify+0xce>

					break;
 8029a64:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8029a66:	7ffb      	ldrb	r3, [r7, #31]
 8029a68:	2b01      	cmp	r3, #1
 8029a6a:	d139      	bne.n	8029ae0 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8029a6c:	6a3b      	ldr	r3, [r7, #32]
 8029a6e:	3304      	adds	r3, #4
 8029a70:	4618      	mov	r0, r3
 8029a72:	f7fd fed3 	bl	802781c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8029a76:	6a3b      	ldr	r3, [r7, #32]
 8029a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029a7a:	4b1d      	ldr	r3, [pc, #116]	; (8029af0 <xTaskGenericNotify+0x158>)
 8029a7c:	681b      	ldr	r3, [r3, #0]
 8029a7e:	429a      	cmp	r2, r3
 8029a80:	d903      	bls.n	8029a8a <xTaskGenericNotify+0xf2>
 8029a82:	6a3b      	ldr	r3, [r7, #32]
 8029a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029a86:	4a1a      	ldr	r2, [pc, #104]	; (8029af0 <xTaskGenericNotify+0x158>)
 8029a88:	6013      	str	r3, [r2, #0]
 8029a8a:	6a3b      	ldr	r3, [r7, #32]
 8029a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029a8e:	4613      	mov	r3, r2
 8029a90:	009b      	lsls	r3, r3, #2
 8029a92:	4413      	add	r3, r2
 8029a94:	009b      	lsls	r3, r3, #2
 8029a96:	4a17      	ldr	r2, [pc, #92]	; (8029af4 <xTaskGenericNotify+0x15c>)
 8029a98:	441a      	add	r2, r3
 8029a9a:	6a3b      	ldr	r3, [r7, #32]
 8029a9c:	3304      	adds	r3, #4
 8029a9e:	4619      	mov	r1, r3
 8029aa0:	4610      	mov	r0, r2
 8029aa2:	f7fd fe5e 	bl	8027762 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8029aa6:	6a3b      	ldr	r3, [r7, #32]
 8029aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029aaa:	2b00      	cmp	r3, #0
 8029aac:	d009      	beq.n	8029ac2 <xTaskGenericNotify+0x12a>
 8029aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029ab2:	f383 8811 	msr	BASEPRI, r3
 8029ab6:	f3bf 8f6f 	isb	sy
 8029aba:	f3bf 8f4f 	dsb	sy
 8029abe:	613b      	str	r3, [r7, #16]
 8029ac0:	e7fe      	b.n	8029ac0 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8029ac2:	6a3b      	ldr	r3, [r7, #32]
 8029ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029ac6:	4b0c      	ldr	r3, [pc, #48]	; (8029af8 <xTaskGenericNotify+0x160>)
 8029ac8:	681b      	ldr	r3, [r3, #0]
 8029aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029acc:	429a      	cmp	r2, r3
 8029ace:	d907      	bls.n	8029ae0 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8029ad0:	4b0a      	ldr	r3, [pc, #40]	; (8029afc <xTaskGenericNotify+0x164>)
 8029ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029ad6:	601a      	str	r2, [r3, #0]
 8029ad8:	f3bf 8f4f 	dsb	sy
 8029adc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8029ae0:	f000 fdd2 	bl	802a688 <vPortExitCritical>

		return xReturn;
 8029ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8029ae6:	4618      	mov	r0, r3
 8029ae8:	3728      	adds	r7, #40	; 0x28
 8029aea:	46bd      	mov	sp, r7
 8029aec:	bd80      	pop	{r7, pc}
 8029aee:	bf00      	nop
 8029af0:	24002034 	.word	0x24002034
 8029af4:	24001b5c 	.word	0x24001b5c
 8029af8:	24001b58 	.word	0x24001b58
 8029afc:	e000ed04 	.word	0xe000ed04

08029b00 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8029b00:	b580      	push	{r7, lr}
 8029b02:	b08e      	sub	sp, #56	; 0x38
 8029b04:	af00      	add	r7, sp, #0
 8029b06:	60f8      	str	r0, [r7, #12]
 8029b08:	60b9      	str	r1, [r7, #8]
 8029b0a:	603b      	str	r3, [r7, #0]
 8029b0c:	4613      	mov	r3, r2
 8029b0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8029b10:	2301      	movs	r3, #1
 8029b12:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8029b14:	68fb      	ldr	r3, [r7, #12]
 8029b16:	2b00      	cmp	r3, #0
 8029b18:	d109      	bne.n	8029b2e <xTaskGenericNotifyFromISR+0x2e>
 8029b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029b1e:	f383 8811 	msr	BASEPRI, r3
 8029b22:	f3bf 8f6f 	isb	sy
 8029b26:	f3bf 8f4f 	dsb	sy
 8029b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8029b2c:	e7fe      	b.n	8029b2c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8029b2e:	f000 fe59 	bl	802a7e4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8029b32:	68fb      	ldr	r3, [r7, #12]
 8029b34:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8029b36:	f3ef 8211 	mrs	r2, BASEPRI
 8029b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029b3e:	f383 8811 	msr	BASEPRI, r3
 8029b42:	f3bf 8f6f 	isb	sy
 8029b46:	f3bf 8f4f 	dsb	sy
 8029b4a:	623a      	str	r2, [r7, #32]
 8029b4c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8029b4e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8029b50:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8029b52:	683b      	ldr	r3, [r7, #0]
 8029b54:	2b00      	cmp	r3, #0
 8029b56:	d003      	beq.n	8029b60 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8029b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029b5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8029b5c:	683b      	ldr	r3, [r7, #0]
 8029b5e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8029b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029b62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8029b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8029b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029b6c:	2202      	movs	r2, #2
 8029b6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8029b72:	79fb      	ldrb	r3, [r7, #7]
 8029b74:	2b04      	cmp	r3, #4
 8029b76:	d829      	bhi.n	8029bcc <xTaskGenericNotifyFromISR+0xcc>
 8029b78:	a201      	add	r2, pc, #4	; (adr r2, 8029b80 <xTaskGenericNotifyFromISR+0x80>)
 8029b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029b7e:	bf00      	nop
 8029b80:	08029beb 	.word	0x08029beb
 8029b84:	08029b95 	.word	0x08029b95
 8029b88:	08029ba3 	.word	0x08029ba3
 8029b8c:	08029baf 	.word	0x08029baf
 8029b90:	08029bb7 	.word	0x08029bb7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8029b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029b96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8029b98:	68bb      	ldr	r3, [r7, #8]
 8029b9a:	431a      	orrs	r2, r3
 8029b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029b9e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8029ba0:	e026      	b.n	8029bf0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8029ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029ba6:	1c5a      	adds	r2, r3, #1
 8029ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029baa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8029bac:	e020      	b.n	8029bf0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8029bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029bb0:	68ba      	ldr	r2, [r7, #8]
 8029bb2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8029bb4:	e01c      	b.n	8029bf0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8029bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029bba:	2b02      	cmp	r3, #2
 8029bbc:	d003      	beq.n	8029bc6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8029bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029bc0:	68ba      	ldr	r2, [r7, #8]
 8029bc2:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8029bc4:	e014      	b.n	8029bf0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8029bc6:	2300      	movs	r3, #0
 8029bc8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8029bca:	e011      	b.n	8029bf0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8029bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029bd4:	d00b      	beq.n	8029bee <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8029bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029bda:	f383 8811 	msr	BASEPRI, r3
 8029bde:	f3bf 8f6f 	isb	sy
 8029be2:	f3bf 8f4f 	dsb	sy
 8029be6:	61bb      	str	r3, [r7, #24]
 8029be8:	e7fe      	b.n	8029be8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8029bea:	bf00      	nop
 8029bec:	e000      	b.n	8029bf0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8029bee:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8029bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029bf4:	2b01      	cmp	r3, #1
 8029bf6:	d145      	bne.n	8029c84 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8029bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029bfc:	2b00      	cmp	r3, #0
 8029bfe:	d009      	beq.n	8029c14 <xTaskGenericNotifyFromISR+0x114>
 8029c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029c04:	f383 8811 	msr	BASEPRI, r3
 8029c08:	f3bf 8f6f 	isb	sy
 8029c0c:	f3bf 8f4f 	dsb	sy
 8029c10:	617b      	str	r3, [r7, #20]
 8029c12:	e7fe      	b.n	8029c12 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8029c14:	4b20      	ldr	r3, [pc, #128]	; (8029c98 <xTaskGenericNotifyFromISR+0x198>)
 8029c16:	681b      	ldr	r3, [r3, #0]
 8029c18:	2b00      	cmp	r3, #0
 8029c1a:	d11d      	bne.n	8029c58 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8029c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029c1e:	3304      	adds	r3, #4
 8029c20:	4618      	mov	r0, r3
 8029c22:	f7fd fdfb 	bl	802781c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8029c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029c2a:	4b1c      	ldr	r3, [pc, #112]	; (8029c9c <xTaskGenericNotifyFromISR+0x19c>)
 8029c2c:	681b      	ldr	r3, [r3, #0]
 8029c2e:	429a      	cmp	r2, r3
 8029c30:	d903      	bls.n	8029c3a <xTaskGenericNotifyFromISR+0x13a>
 8029c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029c36:	4a19      	ldr	r2, [pc, #100]	; (8029c9c <xTaskGenericNotifyFromISR+0x19c>)
 8029c38:	6013      	str	r3, [r2, #0]
 8029c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029c3e:	4613      	mov	r3, r2
 8029c40:	009b      	lsls	r3, r3, #2
 8029c42:	4413      	add	r3, r2
 8029c44:	009b      	lsls	r3, r3, #2
 8029c46:	4a16      	ldr	r2, [pc, #88]	; (8029ca0 <xTaskGenericNotifyFromISR+0x1a0>)
 8029c48:	441a      	add	r2, r3
 8029c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029c4c:	3304      	adds	r3, #4
 8029c4e:	4619      	mov	r1, r3
 8029c50:	4610      	mov	r0, r2
 8029c52:	f7fd fd86 	bl	8027762 <vListInsertEnd>
 8029c56:	e005      	b.n	8029c64 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8029c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029c5a:	3318      	adds	r3, #24
 8029c5c:	4619      	mov	r1, r3
 8029c5e:	4811      	ldr	r0, [pc, #68]	; (8029ca4 <xTaskGenericNotifyFromISR+0x1a4>)
 8029c60:	f7fd fd7f 	bl	8027762 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8029c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029c68:	4b0f      	ldr	r3, [pc, #60]	; (8029ca8 <xTaskGenericNotifyFromISR+0x1a8>)
 8029c6a:	681b      	ldr	r3, [r3, #0]
 8029c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029c6e:	429a      	cmp	r2, r3
 8029c70:	d908      	bls.n	8029c84 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8029c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c74:	2b00      	cmp	r3, #0
 8029c76:	d002      	beq.n	8029c7e <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8029c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c7a:	2201      	movs	r2, #1
 8029c7c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8029c7e:	4b0b      	ldr	r3, [pc, #44]	; (8029cac <xTaskGenericNotifyFromISR+0x1ac>)
 8029c80:	2201      	movs	r2, #1
 8029c82:	601a      	str	r2, [r3, #0]
 8029c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029c86:	613b      	str	r3, [r7, #16]
	__asm volatile
 8029c88:	693b      	ldr	r3, [r7, #16]
 8029c8a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8029c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8029c90:	4618      	mov	r0, r3
 8029c92:	3738      	adds	r7, #56	; 0x38
 8029c94:	46bd      	mov	sp, r7
 8029c96:	bd80      	pop	{r7, pc}
 8029c98:	24002054 	.word	0x24002054
 8029c9c:	24002034 	.word	0x24002034
 8029ca0:	24001b5c 	.word	0x24001b5c
 8029ca4:	24001fec 	.word	0x24001fec
 8029ca8:	24001b58 	.word	0x24001b58
 8029cac:	24002040 	.word	0x24002040

08029cb0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8029cb0:	b580      	push	{r7, lr}
 8029cb2:	b084      	sub	sp, #16
 8029cb4:	af00      	add	r7, sp, #0
 8029cb6:	6078      	str	r0, [r7, #4]
 8029cb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8029cba:	4b21      	ldr	r3, [pc, #132]	; (8029d40 <prvAddCurrentTaskToDelayedList+0x90>)
 8029cbc:	681b      	ldr	r3, [r3, #0]
 8029cbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8029cc0:	4b20      	ldr	r3, [pc, #128]	; (8029d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8029cc2:	681b      	ldr	r3, [r3, #0]
 8029cc4:	3304      	adds	r3, #4
 8029cc6:	4618      	mov	r0, r3
 8029cc8:	f7fd fda8 	bl	802781c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8029ccc:	687b      	ldr	r3, [r7, #4]
 8029cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029cd2:	d10a      	bne.n	8029cea <prvAddCurrentTaskToDelayedList+0x3a>
 8029cd4:	683b      	ldr	r3, [r7, #0]
 8029cd6:	2b00      	cmp	r3, #0
 8029cd8:	d007      	beq.n	8029cea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8029cda:	4b1a      	ldr	r3, [pc, #104]	; (8029d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8029cdc:	681b      	ldr	r3, [r3, #0]
 8029cde:	3304      	adds	r3, #4
 8029ce0:	4619      	mov	r1, r3
 8029ce2:	4819      	ldr	r0, [pc, #100]	; (8029d48 <prvAddCurrentTaskToDelayedList+0x98>)
 8029ce4:	f7fd fd3d 	bl	8027762 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8029ce8:	e026      	b.n	8029d38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8029cea:	68fa      	ldr	r2, [r7, #12]
 8029cec:	687b      	ldr	r3, [r7, #4]
 8029cee:	4413      	add	r3, r2
 8029cf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8029cf2:	4b14      	ldr	r3, [pc, #80]	; (8029d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8029cf4:	681b      	ldr	r3, [r3, #0]
 8029cf6:	68ba      	ldr	r2, [r7, #8]
 8029cf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8029cfa:	68ba      	ldr	r2, [r7, #8]
 8029cfc:	68fb      	ldr	r3, [r7, #12]
 8029cfe:	429a      	cmp	r2, r3
 8029d00:	d209      	bcs.n	8029d16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8029d02:	4b12      	ldr	r3, [pc, #72]	; (8029d4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8029d04:	681a      	ldr	r2, [r3, #0]
 8029d06:	4b0f      	ldr	r3, [pc, #60]	; (8029d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8029d08:	681b      	ldr	r3, [r3, #0]
 8029d0a:	3304      	adds	r3, #4
 8029d0c:	4619      	mov	r1, r3
 8029d0e:	4610      	mov	r0, r2
 8029d10:	f7fd fd4b 	bl	80277aa <vListInsert>
}
 8029d14:	e010      	b.n	8029d38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8029d16:	4b0e      	ldr	r3, [pc, #56]	; (8029d50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8029d18:	681a      	ldr	r2, [r3, #0]
 8029d1a:	4b0a      	ldr	r3, [pc, #40]	; (8029d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8029d1c:	681b      	ldr	r3, [r3, #0]
 8029d1e:	3304      	adds	r3, #4
 8029d20:	4619      	mov	r1, r3
 8029d22:	4610      	mov	r0, r2
 8029d24:	f7fd fd41 	bl	80277aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8029d28:	4b0a      	ldr	r3, [pc, #40]	; (8029d54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8029d2a:	681b      	ldr	r3, [r3, #0]
 8029d2c:	68ba      	ldr	r2, [r7, #8]
 8029d2e:	429a      	cmp	r2, r3
 8029d30:	d202      	bcs.n	8029d38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8029d32:	4a08      	ldr	r2, [pc, #32]	; (8029d54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8029d34:	68bb      	ldr	r3, [r7, #8]
 8029d36:	6013      	str	r3, [r2, #0]
}
 8029d38:	bf00      	nop
 8029d3a:	3710      	adds	r7, #16
 8029d3c:	46bd      	mov	sp, r7
 8029d3e:	bd80      	pop	{r7, pc}
 8029d40:	24002030 	.word	0x24002030
 8029d44:	24001b58 	.word	0x24001b58
 8029d48:	24002018 	.word	0x24002018
 8029d4c:	24001fe8 	.word	0x24001fe8
 8029d50:	24001fe4 	.word	0x24001fe4
 8029d54:	2400204c 	.word	0x2400204c

08029d58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8029d58:	b580      	push	{r7, lr}
 8029d5a:	b08a      	sub	sp, #40	; 0x28
 8029d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8029d5e:	2300      	movs	r3, #0
 8029d60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8029d62:	f000 faff 	bl	802a364 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8029d66:	4b1c      	ldr	r3, [pc, #112]	; (8029dd8 <xTimerCreateTimerTask+0x80>)
 8029d68:	681b      	ldr	r3, [r3, #0]
 8029d6a:	2b00      	cmp	r3, #0
 8029d6c:	d021      	beq.n	8029db2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8029d6e:	2300      	movs	r3, #0
 8029d70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8029d72:	2300      	movs	r3, #0
 8029d74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8029d76:	1d3a      	adds	r2, r7, #4
 8029d78:	f107 0108 	add.w	r1, r7, #8
 8029d7c:	f107 030c 	add.w	r3, r7, #12
 8029d80:	4618      	mov	r0, r3
 8029d82:	f7fd fca7 	bl	80276d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8029d86:	6879      	ldr	r1, [r7, #4]
 8029d88:	68bb      	ldr	r3, [r7, #8]
 8029d8a:	68fa      	ldr	r2, [r7, #12]
 8029d8c:	9202      	str	r2, [sp, #8]
 8029d8e:	9301      	str	r3, [sp, #4]
 8029d90:	2302      	movs	r3, #2
 8029d92:	9300      	str	r3, [sp, #0]
 8029d94:	2300      	movs	r3, #0
 8029d96:	460a      	mov	r2, r1
 8029d98:	4910      	ldr	r1, [pc, #64]	; (8029ddc <xTimerCreateTimerTask+0x84>)
 8029d9a:	4811      	ldr	r0, [pc, #68]	; (8029de0 <xTimerCreateTimerTask+0x88>)
 8029d9c:	f7fe fd78 	bl	8028890 <xTaskCreateStatic>
 8029da0:	4602      	mov	r2, r0
 8029da2:	4b10      	ldr	r3, [pc, #64]	; (8029de4 <xTimerCreateTimerTask+0x8c>)
 8029da4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8029da6:	4b0f      	ldr	r3, [pc, #60]	; (8029de4 <xTimerCreateTimerTask+0x8c>)
 8029da8:	681b      	ldr	r3, [r3, #0]
 8029daa:	2b00      	cmp	r3, #0
 8029dac:	d001      	beq.n	8029db2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8029dae:	2301      	movs	r3, #1
 8029db0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8029db2:	697b      	ldr	r3, [r7, #20]
 8029db4:	2b00      	cmp	r3, #0
 8029db6:	d109      	bne.n	8029dcc <xTimerCreateTimerTask+0x74>
	__asm volatile
 8029db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029dbc:	f383 8811 	msr	BASEPRI, r3
 8029dc0:	f3bf 8f6f 	isb	sy
 8029dc4:	f3bf 8f4f 	dsb	sy
 8029dc8:	613b      	str	r3, [r7, #16]
 8029dca:	e7fe      	b.n	8029dca <xTimerCreateTimerTask+0x72>
	return xReturn;
 8029dcc:	697b      	ldr	r3, [r7, #20]
}
 8029dce:	4618      	mov	r0, r3
 8029dd0:	3718      	adds	r7, #24
 8029dd2:	46bd      	mov	sp, r7
 8029dd4:	bd80      	pop	{r7, pc}
 8029dd6:	bf00      	nop
 8029dd8:	24002088 	.word	0x24002088
 8029ddc:	0802f1dc 	.word	0x0802f1dc
 8029de0:	08029f19 	.word	0x08029f19
 8029de4:	2400208c 	.word	0x2400208c

08029de8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8029de8:	b580      	push	{r7, lr}
 8029dea:	b08a      	sub	sp, #40	; 0x28
 8029dec:	af00      	add	r7, sp, #0
 8029dee:	60f8      	str	r0, [r7, #12]
 8029df0:	60b9      	str	r1, [r7, #8]
 8029df2:	607a      	str	r2, [r7, #4]
 8029df4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8029df6:	2300      	movs	r3, #0
 8029df8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8029dfa:	68fb      	ldr	r3, [r7, #12]
 8029dfc:	2b00      	cmp	r3, #0
 8029dfe:	d109      	bne.n	8029e14 <xTimerGenericCommand+0x2c>
 8029e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029e04:	f383 8811 	msr	BASEPRI, r3
 8029e08:	f3bf 8f6f 	isb	sy
 8029e0c:	f3bf 8f4f 	dsb	sy
 8029e10:	623b      	str	r3, [r7, #32]
 8029e12:	e7fe      	b.n	8029e12 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8029e14:	4b19      	ldr	r3, [pc, #100]	; (8029e7c <xTimerGenericCommand+0x94>)
 8029e16:	681b      	ldr	r3, [r3, #0]
 8029e18:	2b00      	cmp	r3, #0
 8029e1a:	d02a      	beq.n	8029e72 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8029e1c:	68bb      	ldr	r3, [r7, #8]
 8029e1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8029e20:	687b      	ldr	r3, [r7, #4]
 8029e22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8029e24:	68fb      	ldr	r3, [r7, #12]
 8029e26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8029e28:	68bb      	ldr	r3, [r7, #8]
 8029e2a:	2b05      	cmp	r3, #5
 8029e2c:	dc18      	bgt.n	8029e60 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8029e2e:	f7ff fbd3 	bl	80295d8 <xTaskGetSchedulerState>
 8029e32:	4603      	mov	r3, r0
 8029e34:	2b02      	cmp	r3, #2
 8029e36:	d109      	bne.n	8029e4c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8029e38:	4b10      	ldr	r3, [pc, #64]	; (8029e7c <xTimerGenericCommand+0x94>)
 8029e3a:	6818      	ldr	r0, [r3, #0]
 8029e3c:	f107 0110 	add.w	r1, r7, #16
 8029e40:	2300      	movs	r3, #0
 8029e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029e44:	f7fd feb8 	bl	8027bb8 <xQueueGenericSend>
 8029e48:	6278      	str	r0, [r7, #36]	; 0x24
 8029e4a:	e012      	b.n	8029e72 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8029e4c:	4b0b      	ldr	r3, [pc, #44]	; (8029e7c <xTimerGenericCommand+0x94>)
 8029e4e:	6818      	ldr	r0, [r3, #0]
 8029e50:	f107 0110 	add.w	r1, r7, #16
 8029e54:	2300      	movs	r3, #0
 8029e56:	2200      	movs	r2, #0
 8029e58:	f7fd feae 	bl	8027bb8 <xQueueGenericSend>
 8029e5c:	6278      	str	r0, [r7, #36]	; 0x24
 8029e5e:	e008      	b.n	8029e72 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8029e60:	4b06      	ldr	r3, [pc, #24]	; (8029e7c <xTimerGenericCommand+0x94>)
 8029e62:	6818      	ldr	r0, [r3, #0]
 8029e64:	f107 0110 	add.w	r1, r7, #16
 8029e68:	2300      	movs	r3, #0
 8029e6a:	683a      	ldr	r2, [r7, #0]
 8029e6c:	f7fd ff9e 	bl	8027dac <xQueueGenericSendFromISR>
 8029e70:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8029e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8029e74:	4618      	mov	r0, r3
 8029e76:	3728      	adds	r7, #40	; 0x28
 8029e78:	46bd      	mov	sp, r7
 8029e7a:	bd80      	pop	{r7, pc}
 8029e7c:	24002088 	.word	0x24002088

08029e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8029e80:	b580      	push	{r7, lr}
 8029e82:	b088      	sub	sp, #32
 8029e84:	af02      	add	r7, sp, #8
 8029e86:	6078      	str	r0, [r7, #4]
 8029e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8029e8a:	4b22      	ldr	r3, [pc, #136]	; (8029f14 <prvProcessExpiredTimer+0x94>)
 8029e8c:	681b      	ldr	r3, [r3, #0]
 8029e8e:	68db      	ldr	r3, [r3, #12]
 8029e90:	68db      	ldr	r3, [r3, #12]
 8029e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8029e94:	697b      	ldr	r3, [r7, #20]
 8029e96:	3304      	adds	r3, #4
 8029e98:	4618      	mov	r0, r3
 8029e9a:	f7fd fcbf 	bl	802781c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8029e9e:	697b      	ldr	r3, [r7, #20]
 8029ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8029ea4:	f003 0304 	and.w	r3, r3, #4
 8029ea8:	2b00      	cmp	r3, #0
 8029eaa:	d021      	beq.n	8029ef0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8029eac:	697b      	ldr	r3, [r7, #20]
 8029eae:	699a      	ldr	r2, [r3, #24]
 8029eb0:	687b      	ldr	r3, [r7, #4]
 8029eb2:	18d1      	adds	r1, r2, r3
 8029eb4:	687b      	ldr	r3, [r7, #4]
 8029eb6:	683a      	ldr	r2, [r7, #0]
 8029eb8:	6978      	ldr	r0, [r7, #20]
 8029eba:	f000 f8d1 	bl	802a060 <prvInsertTimerInActiveList>
 8029ebe:	4603      	mov	r3, r0
 8029ec0:	2b00      	cmp	r3, #0
 8029ec2:	d01e      	beq.n	8029f02 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8029ec4:	2300      	movs	r3, #0
 8029ec6:	9300      	str	r3, [sp, #0]
 8029ec8:	2300      	movs	r3, #0
 8029eca:	687a      	ldr	r2, [r7, #4]
 8029ecc:	2100      	movs	r1, #0
 8029ece:	6978      	ldr	r0, [r7, #20]
 8029ed0:	f7ff ff8a 	bl	8029de8 <xTimerGenericCommand>
 8029ed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8029ed6:	693b      	ldr	r3, [r7, #16]
 8029ed8:	2b00      	cmp	r3, #0
 8029eda:	d112      	bne.n	8029f02 <prvProcessExpiredTimer+0x82>
 8029edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8029ee0:	f383 8811 	msr	BASEPRI, r3
 8029ee4:	f3bf 8f6f 	isb	sy
 8029ee8:	f3bf 8f4f 	dsb	sy
 8029eec:	60fb      	str	r3, [r7, #12]
 8029eee:	e7fe      	b.n	8029eee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8029ef0:	697b      	ldr	r3, [r7, #20]
 8029ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8029ef6:	f023 0301 	bic.w	r3, r3, #1
 8029efa:	b2da      	uxtb	r2, r3
 8029efc:	697b      	ldr	r3, [r7, #20]
 8029efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8029f02:	697b      	ldr	r3, [r7, #20]
 8029f04:	6a1b      	ldr	r3, [r3, #32]
 8029f06:	6978      	ldr	r0, [r7, #20]
 8029f08:	4798      	blx	r3
}
 8029f0a:	bf00      	nop
 8029f0c:	3718      	adds	r7, #24
 8029f0e:	46bd      	mov	sp, r7
 8029f10:	bd80      	pop	{r7, pc}
 8029f12:	bf00      	nop
 8029f14:	24002080 	.word	0x24002080

08029f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8029f18:	b580      	push	{r7, lr}
 8029f1a:	b084      	sub	sp, #16
 8029f1c:	af00      	add	r7, sp, #0
 8029f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8029f20:	f107 0308 	add.w	r3, r7, #8
 8029f24:	4618      	mov	r0, r3
 8029f26:	f000 f857 	bl	8029fd8 <prvGetNextExpireTime>
 8029f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8029f2c:	68bb      	ldr	r3, [r7, #8]
 8029f2e:	4619      	mov	r1, r3
 8029f30:	68f8      	ldr	r0, [r7, #12]
 8029f32:	f000 f803 	bl	8029f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8029f36:	f000 f8d5 	bl	802a0e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8029f3a:	e7f1      	b.n	8029f20 <prvTimerTask+0x8>

08029f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8029f3c:	b580      	push	{r7, lr}
 8029f3e:	b084      	sub	sp, #16
 8029f40:	af00      	add	r7, sp, #0
 8029f42:	6078      	str	r0, [r7, #4]
 8029f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8029f46:	f7fe ff53 	bl	8028df0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8029f4a:	f107 0308 	add.w	r3, r7, #8
 8029f4e:	4618      	mov	r0, r3
 8029f50:	f000 f866 	bl	802a020 <prvSampleTimeNow>
 8029f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8029f56:	68bb      	ldr	r3, [r7, #8]
 8029f58:	2b00      	cmp	r3, #0
 8029f5a:	d130      	bne.n	8029fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8029f5c:	683b      	ldr	r3, [r7, #0]
 8029f5e:	2b00      	cmp	r3, #0
 8029f60:	d10a      	bne.n	8029f78 <prvProcessTimerOrBlockTask+0x3c>
 8029f62:	687a      	ldr	r2, [r7, #4]
 8029f64:	68fb      	ldr	r3, [r7, #12]
 8029f66:	429a      	cmp	r2, r3
 8029f68:	d806      	bhi.n	8029f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8029f6a:	f7fe ff4f 	bl	8028e0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8029f6e:	68f9      	ldr	r1, [r7, #12]
 8029f70:	6878      	ldr	r0, [r7, #4]
 8029f72:	f7ff ff85 	bl	8029e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8029f76:	e024      	b.n	8029fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8029f78:	683b      	ldr	r3, [r7, #0]
 8029f7a:	2b00      	cmp	r3, #0
 8029f7c:	d008      	beq.n	8029f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8029f7e:	4b13      	ldr	r3, [pc, #76]	; (8029fcc <prvProcessTimerOrBlockTask+0x90>)
 8029f80:	681b      	ldr	r3, [r3, #0]
 8029f82:	681b      	ldr	r3, [r3, #0]
 8029f84:	2b00      	cmp	r3, #0
 8029f86:	d101      	bne.n	8029f8c <prvProcessTimerOrBlockTask+0x50>
 8029f88:	2301      	movs	r3, #1
 8029f8a:	e000      	b.n	8029f8e <prvProcessTimerOrBlockTask+0x52>
 8029f8c:	2300      	movs	r3, #0
 8029f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8029f90:	4b0f      	ldr	r3, [pc, #60]	; (8029fd0 <prvProcessTimerOrBlockTask+0x94>)
 8029f92:	6818      	ldr	r0, [r3, #0]
 8029f94:	687a      	ldr	r2, [r7, #4]
 8029f96:	68fb      	ldr	r3, [r7, #12]
 8029f98:	1ad3      	subs	r3, r2, r3
 8029f9a:	683a      	ldr	r2, [r7, #0]
 8029f9c:	4619      	mov	r1, r3
 8029f9e:	f7fe fc43 	bl	8028828 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8029fa2:	f7fe ff33 	bl	8028e0c <xTaskResumeAll>
 8029fa6:	4603      	mov	r3, r0
 8029fa8:	2b00      	cmp	r3, #0
 8029faa:	d10a      	bne.n	8029fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8029fac:	4b09      	ldr	r3, [pc, #36]	; (8029fd4 <prvProcessTimerOrBlockTask+0x98>)
 8029fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8029fb2:	601a      	str	r2, [r3, #0]
 8029fb4:	f3bf 8f4f 	dsb	sy
 8029fb8:	f3bf 8f6f 	isb	sy
}
 8029fbc:	e001      	b.n	8029fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8029fbe:	f7fe ff25 	bl	8028e0c <xTaskResumeAll>
}
 8029fc2:	bf00      	nop
 8029fc4:	3710      	adds	r7, #16
 8029fc6:	46bd      	mov	sp, r7
 8029fc8:	bd80      	pop	{r7, pc}
 8029fca:	bf00      	nop
 8029fcc:	24002084 	.word	0x24002084
 8029fd0:	24002088 	.word	0x24002088
 8029fd4:	e000ed04 	.word	0xe000ed04

08029fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8029fd8:	b480      	push	{r7}
 8029fda:	b085      	sub	sp, #20
 8029fdc:	af00      	add	r7, sp, #0
 8029fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8029fe0:	4b0e      	ldr	r3, [pc, #56]	; (802a01c <prvGetNextExpireTime+0x44>)
 8029fe2:	681b      	ldr	r3, [r3, #0]
 8029fe4:	681b      	ldr	r3, [r3, #0]
 8029fe6:	2b00      	cmp	r3, #0
 8029fe8:	d101      	bne.n	8029fee <prvGetNextExpireTime+0x16>
 8029fea:	2201      	movs	r2, #1
 8029fec:	e000      	b.n	8029ff0 <prvGetNextExpireTime+0x18>
 8029fee:	2200      	movs	r2, #0
 8029ff0:	687b      	ldr	r3, [r7, #4]
 8029ff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8029ff4:	687b      	ldr	r3, [r7, #4]
 8029ff6:	681b      	ldr	r3, [r3, #0]
 8029ff8:	2b00      	cmp	r3, #0
 8029ffa:	d105      	bne.n	802a008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8029ffc:	4b07      	ldr	r3, [pc, #28]	; (802a01c <prvGetNextExpireTime+0x44>)
 8029ffe:	681b      	ldr	r3, [r3, #0]
 802a000:	68db      	ldr	r3, [r3, #12]
 802a002:	681b      	ldr	r3, [r3, #0]
 802a004:	60fb      	str	r3, [r7, #12]
 802a006:	e001      	b.n	802a00c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 802a008:	2300      	movs	r3, #0
 802a00a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 802a00c:	68fb      	ldr	r3, [r7, #12]
}
 802a00e:	4618      	mov	r0, r3
 802a010:	3714      	adds	r7, #20
 802a012:	46bd      	mov	sp, r7
 802a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a018:	4770      	bx	lr
 802a01a:	bf00      	nop
 802a01c:	24002080 	.word	0x24002080

0802a020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 802a020:	b580      	push	{r7, lr}
 802a022:	b084      	sub	sp, #16
 802a024:	af00      	add	r7, sp, #0
 802a026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 802a028:	f7fe ff8c 	bl	8028f44 <xTaskGetTickCount>
 802a02c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 802a02e:	4b0b      	ldr	r3, [pc, #44]	; (802a05c <prvSampleTimeNow+0x3c>)
 802a030:	681b      	ldr	r3, [r3, #0]
 802a032:	68fa      	ldr	r2, [r7, #12]
 802a034:	429a      	cmp	r2, r3
 802a036:	d205      	bcs.n	802a044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 802a038:	f000 f930 	bl	802a29c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 802a03c:	687b      	ldr	r3, [r7, #4]
 802a03e:	2201      	movs	r2, #1
 802a040:	601a      	str	r2, [r3, #0]
 802a042:	e002      	b.n	802a04a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802a044:	687b      	ldr	r3, [r7, #4]
 802a046:	2200      	movs	r2, #0
 802a048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 802a04a:	4a04      	ldr	r2, [pc, #16]	; (802a05c <prvSampleTimeNow+0x3c>)
 802a04c:	68fb      	ldr	r3, [r7, #12]
 802a04e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 802a050:	68fb      	ldr	r3, [r7, #12]
}
 802a052:	4618      	mov	r0, r3
 802a054:	3710      	adds	r7, #16
 802a056:	46bd      	mov	sp, r7
 802a058:	bd80      	pop	{r7, pc}
 802a05a:	bf00      	nop
 802a05c:	24002090 	.word	0x24002090

0802a060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 802a060:	b580      	push	{r7, lr}
 802a062:	b086      	sub	sp, #24
 802a064:	af00      	add	r7, sp, #0
 802a066:	60f8      	str	r0, [r7, #12]
 802a068:	60b9      	str	r1, [r7, #8]
 802a06a:	607a      	str	r2, [r7, #4]
 802a06c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 802a06e:	2300      	movs	r3, #0
 802a070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802a072:	68fb      	ldr	r3, [r7, #12]
 802a074:	68ba      	ldr	r2, [r7, #8]
 802a076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802a078:	68fb      	ldr	r3, [r7, #12]
 802a07a:	68fa      	ldr	r2, [r7, #12]
 802a07c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 802a07e:	68ba      	ldr	r2, [r7, #8]
 802a080:	687b      	ldr	r3, [r7, #4]
 802a082:	429a      	cmp	r2, r3
 802a084:	d812      	bhi.n	802a0ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802a086:	687a      	ldr	r2, [r7, #4]
 802a088:	683b      	ldr	r3, [r7, #0]
 802a08a:	1ad2      	subs	r2, r2, r3
 802a08c:	68fb      	ldr	r3, [r7, #12]
 802a08e:	699b      	ldr	r3, [r3, #24]
 802a090:	429a      	cmp	r2, r3
 802a092:	d302      	bcc.n	802a09a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 802a094:	2301      	movs	r3, #1
 802a096:	617b      	str	r3, [r7, #20]
 802a098:	e01b      	b.n	802a0d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802a09a:	4b10      	ldr	r3, [pc, #64]	; (802a0dc <prvInsertTimerInActiveList+0x7c>)
 802a09c:	681a      	ldr	r2, [r3, #0]
 802a09e:	68fb      	ldr	r3, [r7, #12]
 802a0a0:	3304      	adds	r3, #4
 802a0a2:	4619      	mov	r1, r3
 802a0a4:	4610      	mov	r0, r2
 802a0a6:	f7fd fb80 	bl	80277aa <vListInsert>
 802a0aa:	e012      	b.n	802a0d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 802a0ac:	687a      	ldr	r2, [r7, #4]
 802a0ae:	683b      	ldr	r3, [r7, #0]
 802a0b0:	429a      	cmp	r2, r3
 802a0b2:	d206      	bcs.n	802a0c2 <prvInsertTimerInActiveList+0x62>
 802a0b4:	68ba      	ldr	r2, [r7, #8]
 802a0b6:	683b      	ldr	r3, [r7, #0]
 802a0b8:	429a      	cmp	r2, r3
 802a0ba:	d302      	bcc.n	802a0c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 802a0bc:	2301      	movs	r3, #1
 802a0be:	617b      	str	r3, [r7, #20]
 802a0c0:	e007      	b.n	802a0d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802a0c2:	4b07      	ldr	r3, [pc, #28]	; (802a0e0 <prvInsertTimerInActiveList+0x80>)
 802a0c4:	681a      	ldr	r2, [r3, #0]
 802a0c6:	68fb      	ldr	r3, [r7, #12]
 802a0c8:	3304      	adds	r3, #4
 802a0ca:	4619      	mov	r1, r3
 802a0cc:	4610      	mov	r0, r2
 802a0ce:	f7fd fb6c 	bl	80277aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 802a0d2:	697b      	ldr	r3, [r7, #20]
}
 802a0d4:	4618      	mov	r0, r3
 802a0d6:	3718      	adds	r7, #24
 802a0d8:	46bd      	mov	sp, r7
 802a0da:	bd80      	pop	{r7, pc}
 802a0dc:	24002084 	.word	0x24002084
 802a0e0:	24002080 	.word	0x24002080

0802a0e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802a0e4:	b580      	push	{r7, lr}
 802a0e6:	b08e      	sub	sp, #56	; 0x38
 802a0e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802a0ea:	e0c6      	b.n	802a27a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 802a0ec:	687b      	ldr	r3, [r7, #4]
 802a0ee:	2b00      	cmp	r3, #0
 802a0f0:	da17      	bge.n	802a122 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802a0f2:	1d3b      	adds	r3, r7, #4
 802a0f4:	3304      	adds	r3, #4
 802a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a0fa:	2b00      	cmp	r3, #0
 802a0fc:	d109      	bne.n	802a112 <prvProcessReceivedCommands+0x2e>
 802a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a102:	f383 8811 	msr	BASEPRI, r3
 802a106:	f3bf 8f6f 	isb	sy
 802a10a:	f3bf 8f4f 	dsb	sy
 802a10e:	61fb      	str	r3, [r7, #28]
 802a110:	e7fe      	b.n	802a110 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a114:	681b      	ldr	r3, [r3, #0]
 802a116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a118:	6850      	ldr	r0, [r2, #4]
 802a11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a11c:	6892      	ldr	r2, [r2, #8]
 802a11e:	4611      	mov	r1, r2
 802a120:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802a122:	687b      	ldr	r3, [r7, #4]
 802a124:	2b00      	cmp	r3, #0
 802a126:	f2c0 80a7 	blt.w	802a278 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802a12a:	68fb      	ldr	r3, [r7, #12]
 802a12c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a130:	695b      	ldr	r3, [r3, #20]
 802a132:	2b00      	cmp	r3, #0
 802a134:	d004      	beq.n	802a140 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a138:	3304      	adds	r3, #4
 802a13a:	4618      	mov	r0, r3
 802a13c:	f7fd fb6e 	bl	802781c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802a140:	463b      	mov	r3, r7
 802a142:	4618      	mov	r0, r3
 802a144:	f7ff ff6c 	bl	802a020 <prvSampleTimeNow>
 802a148:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 802a14a:	687b      	ldr	r3, [r7, #4]
 802a14c:	2b09      	cmp	r3, #9
 802a14e:	f200 8094 	bhi.w	802a27a <prvProcessReceivedCommands+0x196>
 802a152:	a201      	add	r2, pc, #4	; (adr r2, 802a158 <prvProcessReceivedCommands+0x74>)
 802a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a158:	0802a181 	.word	0x0802a181
 802a15c:	0802a181 	.word	0x0802a181
 802a160:	0802a181 	.word	0x0802a181
 802a164:	0802a1f3 	.word	0x0802a1f3
 802a168:	0802a207 	.word	0x0802a207
 802a16c:	0802a24f 	.word	0x0802a24f
 802a170:	0802a181 	.word	0x0802a181
 802a174:	0802a181 	.word	0x0802a181
 802a178:	0802a1f3 	.word	0x0802a1f3
 802a17c:	0802a207 	.word	0x0802a207
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802a186:	f043 0301 	orr.w	r3, r3, #1
 802a18a:	b2da      	uxtb	r2, r3
 802a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a18e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802a192:	68ba      	ldr	r2, [r7, #8]
 802a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a196:	699b      	ldr	r3, [r3, #24]
 802a198:	18d1      	adds	r1, r2, r3
 802a19a:	68bb      	ldr	r3, [r7, #8]
 802a19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a1a0:	f7ff ff5e 	bl	802a060 <prvInsertTimerInActiveList>
 802a1a4:	4603      	mov	r3, r0
 802a1a6:	2b00      	cmp	r3, #0
 802a1a8:	d067      	beq.n	802a27a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a1ac:	6a1b      	ldr	r3, [r3, #32]
 802a1ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a1b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802a1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802a1b8:	f003 0304 	and.w	r3, r3, #4
 802a1bc:	2b00      	cmp	r3, #0
 802a1be:	d05c      	beq.n	802a27a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802a1c0:	68ba      	ldr	r2, [r7, #8]
 802a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a1c4:	699b      	ldr	r3, [r3, #24]
 802a1c6:	441a      	add	r2, r3
 802a1c8:	2300      	movs	r3, #0
 802a1ca:	9300      	str	r3, [sp, #0]
 802a1cc:	2300      	movs	r3, #0
 802a1ce:	2100      	movs	r1, #0
 802a1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a1d2:	f7ff fe09 	bl	8029de8 <xTimerGenericCommand>
 802a1d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 802a1d8:	6a3b      	ldr	r3, [r7, #32]
 802a1da:	2b00      	cmp	r3, #0
 802a1dc:	d14d      	bne.n	802a27a <prvProcessReceivedCommands+0x196>
 802a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a1e2:	f383 8811 	msr	BASEPRI, r3
 802a1e6:	f3bf 8f6f 	isb	sy
 802a1ea:	f3bf 8f4f 	dsb	sy
 802a1ee:	61bb      	str	r3, [r7, #24]
 802a1f0:	e7fe      	b.n	802a1f0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a1f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802a1f8:	f023 0301 	bic.w	r3, r3, #1
 802a1fc:	b2da      	uxtb	r2, r3
 802a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802a204:	e039      	b.n	802a27a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802a20c:	f043 0301 	orr.w	r3, r3, #1
 802a210:	b2da      	uxtb	r2, r3
 802a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 802a218:	68ba      	ldr	r2, [r7, #8]
 802a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a21c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a220:	699b      	ldr	r3, [r3, #24]
 802a222:	2b00      	cmp	r3, #0
 802a224:	d109      	bne.n	802a23a <prvProcessReceivedCommands+0x156>
 802a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a22a:	f383 8811 	msr	BASEPRI, r3
 802a22e:	f3bf 8f6f 	isb	sy
 802a232:	f3bf 8f4f 	dsb	sy
 802a236:	617b      	str	r3, [r7, #20]
 802a238:	e7fe      	b.n	802a238 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a23c:	699a      	ldr	r2, [r3, #24]
 802a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a240:	18d1      	adds	r1, r2, r3
 802a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a248:	f7ff ff0a 	bl	802a060 <prvInsertTimerInActiveList>
					break;
 802a24c:	e015      	b.n	802a27a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 802a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802a254:	f003 0302 	and.w	r3, r3, #2
 802a258:	2b00      	cmp	r3, #0
 802a25a:	d103      	bne.n	802a264 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 802a25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a25e:	f000 fbc1 	bl	802a9e4 <vPortFree>
 802a262:	e00a      	b.n	802a27a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802a26a:	f023 0301 	bic.w	r3, r3, #1
 802a26e:	b2da      	uxtb	r2, r3
 802a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 802a276:	e000      	b.n	802a27a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 802a278:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802a27a:	4b07      	ldr	r3, [pc, #28]	; (802a298 <prvProcessReceivedCommands+0x1b4>)
 802a27c:	681b      	ldr	r3, [r3, #0]
 802a27e:	1d39      	adds	r1, r7, #4
 802a280:	2200      	movs	r2, #0
 802a282:	4618      	mov	r0, r3
 802a284:	f7fd feb0 	bl	8027fe8 <xQueueReceive>
 802a288:	4603      	mov	r3, r0
 802a28a:	2b00      	cmp	r3, #0
 802a28c:	f47f af2e 	bne.w	802a0ec <prvProcessReceivedCommands+0x8>
	}
}
 802a290:	bf00      	nop
 802a292:	3730      	adds	r7, #48	; 0x30
 802a294:	46bd      	mov	sp, r7
 802a296:	bd80      	pop	{r7, pc}
 802a298:	24002088 	.word	0x24002088

0802a29c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 802a29c:	b580      	push	{r7, lr}
 802a29e:	b088      	sub	sp, #32
 802a2a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802a2a2:	e047      	b.n	802a334 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802a2a4:	4b2d      	ldr	r3, [pc, #180]	; (802a35c <prvSwitchTimerLists+0xc0>)
 802a2a6:	681b      	ldr	r3, [r3, #0]
 802a2a8:	68db      	ldr	r3, [r3, #12]
 802a2aa:	681b      	ldr	r3, [r3, #0]
 802a2ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802a2ae:	4b2b      	ldr	r3, [pc, #172]	; (802a35c <prvSwitchTimerLists+0xc0>)
 802a2b0:	681b      	ldr	r3, [r3, #0]
 802a2b2:	68db      	ldr	r3, [r3, #12]
 802a2b4:	68db      	ldr	r3, [r3, #12]
 802a2b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802a2b8:	68fb      	ldr	r3, [r7, #12]
 802a2ba:	3304      	adds	r3, #4
 802a2bc:	4618      	mov	r0, r3
 802a2be:	f7fd faad 	bl	802781c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802a2c2:	68fb      	ldr	r3, [r7, #12]
 802a2c4:	6a1b      	ldr	r3, [r3, #32]
 802a2c6:	68f8      	ldr	r0, [r7, #12]
 802a2c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802a2ca:	68fb      	ldr	r3, [r7, #12]
 802a2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802a2d0:	f003 0304 	and.w	r3, r3, #4
 802a2d4:	2b00      	cmp	r3, #0
 802a2d6:	d02d      	beq.n	802a334 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 802a2d8:	68fb      	ldr	r3, [r7, #12]
 802a2da:	699b      	ldr	r3, [r3, #24]
 802a2dc:	693a      	ldr	r2, [r7, #16]
 802a2de:	4413      	add	r3, r2
 802a2e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802a2e2:	68ba      	ldr	r2, [r7, #8]
 802a2e4:	693b      	ldr	r3, [r7, #16]
 802a2e6:	429a      	cmp	r2, r3
 802a2e8:	d90e      	bls.n	802a308 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802a2ea:	68fb      	ldr	r3, [r7, #12]
 802a2ec:	68ba      	ldr	r2, [r7, #8]
 802a2ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802a2f0:	68fb      	ldr	r3, [r7, #12]
 802a2f2:	68fa      	ldr	r2, [r7, #12]
 802a2f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802a2f6:	4b19      	ldr	r3, [pc, #100]	; (802a35c <prvSwitchTimerLists+0xc0>)
 802a2f8:	681a      	ldr	r2, [r3, #0]
 802a2fa:	68fb      	ldr	r3, [r7, #12]
 802a2fc:	3304      	adds	r3, #4
 802a2fe:	4619      	mov	r1, r3
 802a300:	4610      	mov	r0, r2
 802a302:	f7fd fa52 	bl	80277aa <vListInsert>
 802a306:	e015      	b.n	802a334 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802a308:	2300      	movs	r3, #0
 802a30a:	9300      	str	r3, [sp, #0]
 802a30c:	2300      	movs	r3, #0
 802a30e:	693a      	ldr	r2, [r7, #16]
 802a310:	2100      	movs	r1, #0
 802a312:	68f8      	ldr	r0, [r7, #12]
 802a314:	f7ff fd68 	bl	8029de8 <xTimerGenericCommand>
 802a318:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802a31a:	687b      	ldr	r3, [r7, #4]
 802a31c:	2b00      	cmp	r3, #0
 802a31e:	d109      	bne.n	802a334 <prvSwitchTimerLists+0x98>
 802a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a324:	f383 8811 	msr	BASEPRI, r3
 802a328:	f3bf 8f6f 	isb	sy
 802a32c:	f3bf 8f4f 	dsb	sy
 802a330:	603b      	str	r3, [r7, #0]
 802a332:	e7fe      	b.n	802a332 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802a334:	4b09      	ldr	r3, [pc, #36]	; (802a35c <prvSwitchTimerLists+0xc0>)
 802a336:	681b      	ldr	r3, [r3, #0]
 802a338:	681b      	ldr	r3, [r3, #0]
 802a33a:	2b00      	cmp	r3, #0
 802a33c:	d1b2      	bne.n	802a2a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802a33e:	4b07      	ldr	r3, [pc, #28]	; (802a35c <prvSwitchTimerLists+0xc0>)
 802a340:	681b      	ldr	r3, [r3, #0]
 802a342:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802a344:	4b06      	ldr	r3, [pc, #24]	; (802a360 <prvSwitchTimerLists+0xc4>)
 802a346:	681b      	ldr	r3, [r3, #0]
 802a348:	4a04      	ldr	r2, [pc, #16]	; (802a35c <prvSwitchTimerLists+0xc0>)
 802a34a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802a34c:	4a04      	ldr	r2, [pc, #16]	; (802a360 <prvSwitchTimerLists+0xc4>)
 802a34e:	697b      	ldr	r3, [r7, #20]
 802a350:	6013      	str	r3, [r2, #0]
}
 802a352:	bf00      	nop
 802a354:	3718      	adds	r7, #24
 802a356:	46bd      	mov	sp, r7
 802a358:	bd80      	pop	{r7, pc}
 802a35a:	bf00      	nop
 802a35c:	24002080 	.word	0x24002080
 802a360:	24002084 	.word	0x24002084

0802a364 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 802a364:	b580      	push	{r7, lr}
 802a366:	b082      	sub	sp, #8
 802a368:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802a36a:	f000 f95f 	bl	802a62c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802a36e:	4b15      	ldr	r3, [pc, #84]	; (802a3c4 <prvCheckForValidListAndQueue+0x60>)
 802a370:	681b      	ldr	r3, [r3, #0]
 802a372:	2b00      	cmp	r3, #0
 802a374:	d120      	bne.n	802a3b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802a376:	4814      	ldr	r0, [pc, #80]	; (802a3c8 <prvCheckForValidListAndQueue+0x64>)
 802a378:	f7fd f9c6 	bl	8027708 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 802a37c:	4813      	ldr	r0, [pc, #76]	; (802a3cc <prvCheckForValidListAndQueue+0x68>)
 802a37e:	f7fd f9c3 	bl	8027708 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 802a382:	4b13      	ldr	r3, [pc, #76]	; (802a3d0 <prvCheckForValidListAndQueue+0x6c>)
 802a384:	4a10      	ldr	r2, [pc, #64]	; (802a3c8 <prvCheckForValidListAndQueue+0x64>)
 802a386:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 802a388:	4b12      	ldr	r3, [pc, #72]	; (802a3d4 <prvCheckForValidListAndQueue+0x70>)
 802a38a:	4a10      	ldr	r2, [pc, #64]	; (802a3cc <prvCheckForValidListAndQueue+0x68>)
 802a38c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802a38e:	2300      	movs	r3, #0
 802a390:	9300      	str	r3, [sp, #0]
 802a392:	4b11      	ldr	r3, [pc, #68]	; (802a3d8 <prvCheckForValidListAndQueue+0x74>)
 802a394:	4a11      	ldr	r2, [pc, #68]	; (802a3dc <prvCheckForValidListAndQueue+0x78>)
 802a396:	2110      	movs	r1, #16
 802a398:	200a      	movs	r0, #10
 802a39a:	f7fd fad1 	bl	8027940 <xQueueGenericCreateStatic>
 802a39e:	4602      	mov	r2, r0
 802a3a0:	4b08      	ldr	r3, [pc, #32]	; (802a3c4 <prvCheckForValidListAndQueue+0x60>)
 802a3a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 802a3a4:	4b07      	ldr	r3, [pc, #28]	; (802a3c4 <prvCheckForValidListAndQueue+0x60>)
 802a3a6:	681b      	ldr	r3, [r3, #0]
 802a3a8:	2b00      	cmp	r3, #0
 802a3aa:	d005      	beq.n	802a3b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802a3ac:	4b05      	ldr	r3, [pc, #20]	; (802a3c4 <prvCheckForValidListAndQueue+0x60>)
 802a3ae:	681b      	ldr	r3, [r3, #0]
 802a3b0:	490b      	ldr	r1, [pc, #44]	; (802a3e0 <prvCheckForValidListAndQueue+0x7c>)
 802a3b2:	4618      	mov	r0, r3
 802a3b4:	f7fe f9e6 	bl	8028784 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802a3b8:	f000 f966 	bl	802a688 <vPortExitCritical>
}
 802a3bc:	bf00      	nop
 802a3be:	46bd      	mov	sp, r7
 802a3c0:	bd80      	pop	{r7, pc}
 802a3c2:	bf00      	nop
 802a3c4:	24002088 	.word	0x24002088
 802a3c8:	24002058 	.word	0x24002058
 802a3cc:	2400206c 	.word	0x2400206c
 802a3d0:	24002080 	.word	0x24002080
 802a3d4:	24002084 	.word	0x24002084
 802a3d8:	24002134 	.word	0x24002134
 802a3dc:	24002094 	.word	0x24002094
 802a3e0:	0802f1e4 	.word	0x0802f1e4

0802a3e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 802a3e4:	b480      	push	{r7}
 802a3e6:	b085      	sub	sp, #20
 802a3e8:	af00      	add	r7, sp, #0
 802a3ea:	60f8      	str	r0, [r7, #12]
 802a3ec:	60b9      	str	r1, [r7, #8]
 802a3ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 802a3f0:	68fb      	ldr	r3, [r7, #12]
 802a3f2:	3b04      	subs	r3, #4
 802a3f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802a3f6:	68fb      	ldr	r3, [r7, #12]
 802a3f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802a3fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802a3fe:	68fb      	ldr	r3, [r7, #12]
 802a400:	3b04      	subs	r3, #4
 802a402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802a404:	68bb      	ldr	r3, [r7, #8]
 802a406:	f023 0201 	bic.w	r2, r3, #1
 802a40a:	68fb      	ldr	r3, [r7, #12]
 802a40c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802a40e:	68fb      	ldr	r3, [r7, #12]
 802a410:	3b04      	subs	r3, #4
 802a412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802a414:	4a0c      	ldr	r2, [pc, #48]	; (802a448 <pxPortInitialiseStack+0x64>)
 802a416:	68fb      	ldr	r3, [r7, #12]
 802a418:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802a41a:	68fb      	ldr	r3, [r7, #12]
 802a41c:	3b14      	subs	r3, #20
 802a41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 802a420:	687a      	ldr	r2, [r7, #4]
 802a422:	68fb      	ldr	r3, [r7, #12]
 802a424:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802a426:	68fb      	ldr	r3, [r7, #12]
 802a428:	3b04      	subs	r3, #4
 802a42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 802a42c:	68fb      	ldr	r3, [r7, #12]
 802a42e:	f06f 0202 	mvn.w	r2, #2
 802a432:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802a434:	68fb      	ldr	r3, [r7, #12]
 802a436:	3b20      	subs	r3, #32
 802a438:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802a43a:	68fb      	ldr	r3, [r7, #12]
}
 802a43c:	4618      	mov	r0, r3
 802a43e:	3714      	adds	r7, #20
 802a440:	46bd      	mov	sp, r7
 802a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a446:	4770      	bx	lr
 802a448:	0802a44d 	.word	0x0802a44d

0802a44c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802a44c:	b480      	push	{r7}
 802a44e:	b085      	sub	sp, #20
 802a450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 802a452:	2300      	movs	r3, #0
 802a454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802a456:	4b11      	ldr	r3, [pc, #68]	; (802a49c <prvTaskExitError+0x50>)
 802a458:	681b      	ldr	r3, [r3, #0]
 802a45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a45e:	d009      	beq.n	802a474 <prvTaskExitError+0x28>
 802a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a464:	f383 8811 	msr	BASEPRI, r3
 802a468:	f3bf 8f6f 	isb	sy
 802a46c:	f3bf 8f4f 	dsb	sy
 802a470:	60fb      	str	r3, [r7, #12]
 802a472:	e7fe      	b.n	802a472 <prvTaskExitError+0x26>
 802a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a478:	f383 8811 	msr	BASEPRI, r3
 802a47c:	f3bf 8f6f 	isb	sy
 802a480:	f3bf 8f4f 	dsb	sy
 802a484:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 802a486:	bf00      	nop
 802a488:	687b      	ldr	r3, [r7, #4]
 802a48a:	2b00      	cmp	r3, #0
 802a48c:	d0fc      	beq.n	802a488 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 802a48e:	bf00      	nop
 802a490:	3714      	adds	r7, #20
 802a492:	46bd      	mov	sp, r7
 802a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a498:	4770      	bx	lr
 802a49a:	bf00      	nop
 802a49c:	24000668 	.word	0x24000668

0802a4a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 802a4a0:	4b07      	ldr	r3, [pc, #28]	; (802a4c0 <pxCurrentTCBConst2>)
 802a4a2:	6819      	ldr	r1, [r3, #0]
 802a4a4:	6808      	ldr	r0, [r1, #0]
 802a4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a4aa:	f380 8809 	msr	PSP, r0
 802a4ae:	f3bf 8f6f 	isb	sy
 802a4b2:	f04f 0000 	mov.w	r0, #0
 802a4b6:	f380 8811 	msr	BASEPRI, r0
 802a4ba:	4770      	bx	lr
 802a4bc:	f3af 8000 	nop.w

0802a4c0 <pxCurrentTCBConst2>:
 802a4c0:	24001b58 	.word	0x24001b58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 802a4c4:	bf00      	nop
 802a4c6:	bf00      	nop

0802a4c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 802a4c8:	4808      	ldr	r0, [pc, #32]	; (802a4ec <prvPortStartFirstTask+0x24>)
 802a4ca:	6800      	ldr	r0, [r0, #0]
 802a4cc:	6800      	ldr	r0, [r0, #0]
 802a4ce:	f380 8808 	msr	MSP, r0
 802a4d2:	f04f 0000 	mov.w	r0, #0
 802a4d6:	f380 8814 	msr	CONTROL, r0
 802a4da:	b662      	cpsie	i
 802a4dc:	b661      	cpsie	f
 802a4de:	f3bf 8f4f 	dsb	sy
 802a4e2:	f3bf 8f6f 	isb	sy
 802a4e6:	df00      	svc	0
 802a4e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802a4ea:	bf00      	nop
 802a4ec:	e000ed08 	.word	0xe000ed08

0802a4f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 802a4f0:	b580      	push	{r7, lr}
 802a4f2:	b086      	sub	sp, #24
 802a4f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 802a4f6:	4b44      	ldr	r3, [pc, #272]	; (802a608 <xPortStartScheduler+0x118>)
 802a4f8:	681b      	ldr	r3, [r3, #0]
 802a4fa:	4a44      	ldr	r2, [pc, #272]	; (802a60c <xPortStartScheduler+0x11c>)
 802a4fc:	4293      	cmp	r3, r2
 802a4fe:	d109      	bne.n	802a514 <xPortStartScheduler+0x24>
 802a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a504:	f383 8811 	msr	BASEPRI, r3
 802a508:	f3bf 8f6f 	isb	sy
 802a50c:	f3bf 8f4f 	dsb	sy
 802a510:	613b      	str	r3, [r7, #16]
 802a512:	e7fe      	b.n	802a512 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 802a514:	4b3c      	ldr	r3, [pc, #240]	; (802a608 <xPortStartScheduler+0x118>)
 802a516:	681b      	ldr	r3, [r3, #0]
 802a518:	4a3d      	ldr	r2, [pc, #244]	; (802a610 <xPortStartScheduler+0x120>)
 802a51a:	4293      	cmp	r3, r2
 802a51c:	d109      	bne.n	802a532 <xPortStartScheduler+0x42>
 802a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a522:	f383 8811 	msr	BASEPRI, r3
 802a526:	f3bf 8f6f 	isb	sy
 802a52a:	f3bf 8f4f 	dsb	sy
 802a52e:	60fb      	str	r3, [r7, #12]
 802a530:	e7fe      	b.n	802a530 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 802a532:	4b38      	ldr	r3, [pc, #224]	; (802a614 <xPortStartScheduler+0x124>)
 802a534:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802a536:	697b      	ldr	r3, [r7, #20]
 802a538:	781b      	ldrb	r3, [r3, #0]
 802a53a:	b2db      	uxtb	r3, r3
 802a53c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 802a53e:	697b      	ldr	r3, [r7, #20]
 802a540:	22ff      	movs	r2, #255	; 0xff
 802a542:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 802a544:	697b      	ldr	r3, [r7, #20]
 802a546:	781b      	ldrb	r3, [r3, #0]
 802a548:	b2db      	uxtb	r3, r3
 802a54a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 802a54c:	78fb      	ldrb	r3, [r7, #3]
 802a54e:	b2db      	uxtb	r3, r3
 802a550:	f003 0350 	and.w	r3, r3, #80	; 0x50
 802a554:	b2da      	uxtb	r2, r3
 802a556:	4b30      	ldr	r3, [pc, #192]	; (802a618 <xPortStartScheduler+0x128>)
 802a558:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802a55a:	4b30      	ldr	r3, [pc, #192]	; (802a61c <xPortStartScheduler+0x12c>)
 802a55c:	2207      	movs	r2, #7
 802a55e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802a560:	e009      	b.n	802a576 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 802a562:	4b2e      	ldr	r3, [pc, #184]	; (802a61c <xPortStartScheduler+0x12c>)
 802a564:	681b      	ldr	r3, [r3, #0]
 802a566:	3b01      	subs	r3, #1
 802a568:	4a2c      	ldr	r2, [pc, #176]	; (802a61c <xPortStartScheduler+0x12c>)
 802a56a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 802a56c:	78fb      	ldrb	r3, [r7, #3]
 802a56e:	b2db      	uxtb	r3, r3
 802a570:	005b      	lsls	r3, r3, #1
 802a572:	b2db      	uxtb	r3, r3
 802a574:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802a576:	78fb      	ldrb	r3, [r7, #3]
 802a578:	b2db      	uxtb	r3, r3
 802a57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a57e:	2b80      	cmp	r3, #128	; 0x80
 802a580:	d0ef      	beq.n	802a562 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 802a582:	4b26      	ldr	r3, [pc, #152]	; (802a61c <xPortStartScheduler+0x12c>)
 802a584:	681b      	ldr	r3, [r3, #0]
 802a586:	f1c3 0307 	rsb	r3, r3, #7
 802a58a:	2b04      	cmp	r3, #4
 802a58c:	d009      	beq.n	802a5a2 <xPortStartScheduler+0xb2>
 802a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a592:	f383 8811 	msr	BASEPRI, r3
 802a596:	f3bf 8f6f 	isb	sy
 802a59a:	f3bf 8f4f 	dsb	sy
 802a59e:	60bb      	str	r3, [r7, #8]
 802a5a0:	e7fe      	b.n	802a5a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 802a5a2:	4b1e      	ldr	r3, [pc, #120]	; (802a61c <xPortStartScheduler+0x12c>)
 802a5a4:	681b      	ldr	r3, [r3, #0]
 802a5a6:	021b      	lsls	r3, r3, #8
 802a5a8:	4a1c      	ldr	r2, [pc, #112]	; (802a61c <xPortStartScheduler+0x12c>)
 802a5aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802a5ac:	4b1b      	ldr	r3, [pc, #108]	; (802a61c <xPortStartScheduler+0x12c>)
 802a5ae:	681b      	ldr	r3, [r3, #0]
 802a5b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802a5b4:	4a19      	ldr	r2, [pc, #100]	; (802a61c <xPortStartScheduler+0x12c>)
 802a5b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802a5b8:	687b      	ldr	r3, [r7, #4]
 802a5ba:	b2da      	uxtb	r2, r3
 802a5bc:	697b      	ldr	r3, [r7, #20]
 802a5be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802a5c0:	4b17      	ldr	r3, [pc, #92]	; (802a620 <xPortStartScheduler+0x130>)
 802a5c2:	681b      	ldr	r3, [r3, #0]
 802a5c4:	4a16      	ldr	r2, [pc, #88]	; (802a620 <xPortStartScheduler+0x130>)
 802a5c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802a5ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802a5cc:	4b14      	ldr	r3, [pc, #80]	; (802a620 <xPortStartScheduler+0x130>)
 802a5ce:	681b      	ldr	r3, [r3, #0]
 802a5d0:	4a13      	ldr	r2, [pc, #76]	; (802a620 <xPortStartScheduler+0x130>)
 802a5d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802a5d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802a5d8:	f000 f8d6 	bl	802a788 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802a5dc:	4b11      	ldr	r3, [pc, #68]	; (802a624 <xPortStartScheduler+0x134>)
 802a5de:	2200      	movs	r2, #0
 802a5e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802a5e2:	f000 f8f5 	bl	802a7d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802a5e6:	4b10      	ldr	r3, [pc, #64]	; (802a628 <xPortStartScheduler+0x138>)
 802a5e8:	681b      	ldr	r3, [r3, #0]
 802a5ea:	4a0f      	ldr	r2, [pc, #60]	; (802a628 <xPortStartScheduler+0x138>)
 802a5ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 802a5f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802a5f2:	f7ff ff69 	bl	802a4c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802a5f6:	f7fe fd7f 	bl	80290f8 <vTaskSwitchContext>
	prvTaskExitError();
 802a5fa:	f7ff ff27 	bl	802a44c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802a5fe:	2300      	movs	r3, #0
}
 802a600:	4618      	mov	r0, r3
 802a602:	3718      	adds	r7, #24
 802a604:	46bd      	mov	sp, r7
 802a606:	bd80      	pop	{r7, pc}
 802a608:	e000ed00 	.word	0xe000ed00
 802a60c:	410fc271 	.word	0x410fc271
 802a610:	410fc270 	.word	0x410fc270
 802a614:	e000e400 	.word	0xe000e400
 802a618:	24002184 	.word	0x24002184
 802a61c:	24002188 	.word	0x24002188
 802a620:	e000ed20 	.word	0xe000ed20
 802a624:	24000668 	.word	0x24000668
 802a628:	e000ef34 	.word	0xe000ef34

0802a62c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 802a62c:	b480      	push	{r7}
 802a62e:	b083      	sub	sp, #12
 802a630:	af00      	add	r7, sp, #0
 802a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a636:	f383 8811 	msr	BASEPRI, r3
 802a63a:	f3bf 8f6f 	isb	sy
 802a63e:	f3bf 8f4f 	dsb	sy
 802a642:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802a644:	4b0e      	ldr	r3, [pc, #56]	; (802a680 <vPortEnterCritical+0x54>)
 802a646:	681b      	ldr	r3, [r3, #0]
 802a648:	3301      	adds	r3, #1
 802a64a:	4a0d      	ldr	r2, [pc, #52]	; (802a680 <vPortEnterCritical+0x54>)
 802a64c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802a64e:	4b0c      	ldr	r3, [pc, #48]	; (802a680 <vPortEnterCritical+0x54>)
 802a650:	681b      	ldr	r3, [r3, #0]
 802a652:	2b01      	cmp	r3, #1
 802a654:	d10e      	bne.n	802a674 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 802a656:	4b0b      	ldr	r3, [pc, #44]	; (802a684 <vPortEnterCritical+0x58>)
 802a658:	681b      	ldr	r3, [r3, #0]
 802a65a:	b2db      	uxtb	r3, r3
 802a65c:	2b00      	cmp	r3, #0
 802a65e:	d009      	beq.n	802a674 <vPortEnterCritical+0x48>
 802a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a664:	f383 8811 	msr	BASEPRI, r3
 802a668:	f3bf 8f6f 	isb	sy
 802a66c:	f3bf 8f4f 	dsb	sy
 802a670:	603b      	str	r3, [r7, #0]
 802a672:	e7fe      	b.n	802a672 <vPortEnterCritical+0x46>
	}
}
 802a674:	bf00      	nop
 802a676:	370c      	adds	r7, #12
 802a678:	46bd      	mov	sp, r7
 802a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a67e:	4770      	bx	lr
 802a680:	24000668 	.word	0x24000668
 802a684:	e000ed04 	.word	0xe000ed04

0802a688 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 802a688:	b480      	push	{r7}
 802a68a:	b083      	sub	sp, #12
 802a68c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802a68e:	4b11      	ldr	r3, [pc, #68]	; (802a6d4 <vPortExitCritical+0x4c>)
 802a690:	681b      	ldr	r3, [r3, #0]
 802a692:	2b00      	cmp	r3, #0
 802a694:	d109      	bne.n	802a6aa <vPortExitCritical+0x22>
 802a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a69a:	f383 8811 	msr	BASEPRI, r3
 802a69e:	f3bf 8f6f 	isb	sy
 802a6a2:	f3bf 8f4f 	dsb	sy
 802a6a6:	607b      	str	r3, [r7, #4]
 802a6a8:	e7fe      	b.n	802a6a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 802a6aa:	4b0a      	ldr	r3, [pc, #40]	; (802a6d4 <vPortExitCritical+0x4c>)
 802a6ac:	681b      	ldr	r3, [r3, #0]
 802a6ae:	3b01      	subs	r3, #1
 802a6b0:	4a08      	ldr	r2, [pc, #32]	; (802a6d4 <vPortExitCritical+0x4c>)
 802a6b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 802a6b4:	4b07      	ldr	r3, [pc, #28]	; (802a6d4 <vPortExitCritical+0x4c>)
 802a6b6:	681b      	ldr	r3, [r3, #0]
 802a6b8:	2b00      	cmp	r3, #0
 802a6ba:	d104      	bne.n	802a6c6 <vPortExitCritical+0x3e>
 802a6bc:	2300      	movs	r3, #0
 802a6be:	603b      	str	r3, [r7, #0]
	__asm volatile
 802a6c0:	683b      	ldr	r3, [r7, #0]
 802a6c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 802a6c6:	bf00      	nop
 802a6c8:	370c      	adds	r7, #12
 802a6ca:	46bd      	mov	sp, r7
 802a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6d0:	4770      	bx	lr
 802a6d2:	bf00      	nop
 802a6d4:	24000668 	.word	0x24000668
	...

0802a6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 802a6e0:	f3ef 8009 	mrs	r0, PSP
 802a6e4:	f3bf 8f6f 	isb	sy
 802a6e8:	4b15      	ldr	r3, [pc, #84]	; (802a740 <pxCurrentTCBConst>)
 802a6ea:	681a      	ldr	r2, [r3, #0]
 802a6ec:	f01e 0f10 	tst.w	lr, #16
 802a6f0:	bf08      	it	eq
 802a6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 802a6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a6fa:	6010      	str	r0, [r2, #0]
 802a6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 802a700:	f04f 0050 	mov.w	r0, #80	; 0x50
 802a704:	f380 8811 	msr	BASEPRI, r0
 802a708:	f3bf 8f4f 	dsb	sy
 802a70c:	f3bf 8f6f 	isb	sy
 802a710:	f7fe fcf2 	bl	80290f8 <vTaskSwitchContext>
 802a714:	f04f 0000 	mov.w	r0, #0
 802a718:	f380 8811 	msr	BASEPRI, r0
 802a71c:	bc09      	pop	{r0, r3}
 802a71e:	6819      	ldr	r1, [r3, #0]
 802a720:	6808      	ldr	r0, [r1, #0]
 802a722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a726:	f01e 0f10 	tst.w	lr, #16
 802a72a:	bf08      	it	eq
 802a72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 802a730:	f380 8809 	msr	PSP, r0
 802a734:	f3bf 8f6f 	isb	sy
 802a738:	4770      	bx	lr
 802a73a:	bf00      	nop
 802a73c:	f3af 8000 	nop.w

0802a740 <pxCurrentTCBConst>:
 802a740:	24001b58 	.word	0x24001b58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 802a744:	bf00      	nop
 802a746:	bf00      	nop

0802a748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 802a748:	b580      	push	{r7, lr}
 802a74a:	b082      	sub	sp, #8
 802a74c:	af00      	add	r7, sp, #0
	__asm volatile
 802a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a752:	f383 8811 	msr	BASEPRI, r3
 802a756:	f3bf 8f6f 	isb	sy
 802a75a:	f3bf 8f4f 	dsb	sy
 802a75e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 802a760:	f7fe fc12 	bl	8028f88 <xTaskIncrementTick>
 802a764:	4603      	mov	r3, r0
 802a766:	2b00      	cmp	r3, #0
 802a768:	d003      	beq.n	802a772 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802a76a:	4b06      	ldr	r3, [pc, #24]	; (802a784 <SysTick_Handler+0x3c>)
 802a76c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802a770:	601a      	str	r2, [r3, #0]
 802a772:	2300      	movs	r3, #0
 802a774:	603b      	str	r3, [r7, #0]
	__asm volatile
 802a776:	683b      	ldr	r3, [r7, #0]
 802a778:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 802a77c:	bf00      	nop
 802a77e:	3708      	adds	r7, #8
 802a780:	46bd      	mov	sp, r7
 802a782:	bd80      	pop	{r7, pc}
 802a784:	e000ed04 	.word	0xe000ed04

0802a788 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802a788:	b480      	push	{r7}
 802a78a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 802a78c:	4b0b      	ldr	r3, [pc, #44]	; (802a7bc <vPortSetupTimerInterrupt+0x34>)
 802a78e:	2200      	movs	r2, #0
 802a790:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 802a792:	4b0b      	ldr	r3, [pc, #44]	; (802a7c0 <vPortSetupTimerInterrupt+0x38>)
 802a794:	2200      	movs	r2, #0
 802a796:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802a798:	4b0a      	ldr	r3, [pc, #40]	; (802a7c4 <vPortSetupTimerInterrupt+0x3c>)
 802a79a:	681b      	ldr	r3, [r3, #0]
 802a79c:	4a0a      	ldr	r2, [pc, #40]	; (802a7c8 <vPortSetupTimerInterrupt+0x40>)
 802a79e:	fba2 2303 	umull	r2, r3, r2, r3
 802a7a2:	099b      	lsrs	r3, r3, #6
 802a7a4:	4a09      	ldr	r2, [pc, #36]	; (802a7cc <vPortSetupTimerInterrupt+0x44>)
 802a7a6:	3b01      	subs	r3, #1
 802a7a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802a7aa:	4b04      	ldr	r3, [pc, #16]	; (802a7bc <vPortSetupTimerInterrupt+0x34>)
 802a7ac:	2207      	movs	r2, #7
 802a7ae:	601a      	str	r2, [r3, #0]
}
 802a7b0:	bf00      	nop
 802a7b2:	46bd      	mov	sp, r7
 802a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7b8:	4770      	bx	lr
 802a7ba:	bf00      	nop
 802a7bc:	e000e010 	.word	0xe000e010
 802a7c0:	e000e018 	.word	0xe000e018
 802a7c4:	24000658 	.word	0x24000658
 802a7c8:	10624dd3 	.word	0x10624dd3
 802a7cc:	e000e014 	.word	0xe000e014

0802a7d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 802a7d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 802a7e0 <vPortEnableVFP+0x10>
 802a7d4:	6801      	ldr	r1, [r0, #0]
 802a7d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802a7da:	6001      	str	r1, [r0, #0]
 802a7dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 802a7de:	bf00      	nop
 802a7e0:	e000ed88 	.word	0xe000ed88

0802a7e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 802a7e4:	b480      	push	{r7}
 802a7e6:	b085      	sub	sp, #20
 802a7e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802a7ea:	f3ef 8305 	mrs	r3, IPSR
 802a7ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 802a7f0:	68fb      	ldr	r3, [r7, #12]
 802a7f2:	2b0f      	cmp	r3, #15
 802a7f4:	d913      	bls.n	802a81e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802a7f6:	4a16      	ldr	r2, [pc, #88]	; (802a850 <vPortValidateInterruptPriority+0x6c>)
 802a7f8:	68fb      	ldr	r3, [r7, #12]
 802a7fa:	4413      	add	r3, r2
 802a7fc:	781b      	ldrb	r3, [r3, #0]
 802a7fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 802a800:	4b14      	ldr	r3, [pc, #80]	; (802a854 <vPortValidateInterruptPriority+0x70>)
 802a802:	781b      	ldrb	r3, [r3, #0]
 802a804:	7afa      	ldrb	r2, [r7, #11]
 802a806:	429a      	cmp	r2, r3
 802a808:	d209      	bcs.n	802a81e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 802a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a80e:	f383 8811 	msr	BASEPRI, r3
 802a812:	f3bf 8f6f 	isb	sy
 802a816:	f3bf 8f4f 	dsb	sy
 802a81a:	607b      	str	r3, [r7, #4]
 802a81c:	e7fe      	b.n	802a81c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 802a81e:	4b0e      	ldr	r3, [pc, #56]	; (802a858 <vPortValidateInterruptPriority+0x74>)
 802a820:	681b      	ldr	r3, [r3, #0]
 802a822:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802a826:	4b0d      	ldr	r3, [pc, #52]	; (802a85c <vPortValidateInterruptPriority+0x78>)
 802a828:	681b      	ldr	r3, [r3, #0]
 802a82a:	429a      	cmp	r2, r3
 802a82c:	d909      	bls.n	802a842 <vPortValidateInterruptPriority+0x5e>
 802a82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a832:	f383 8811 	msr	BASEPRI, r3
 802a836:	f3bf 8f6f 	isb	sy
 802a83a:	f3bf 8f4f 	dsb	sy
 802a83e:	603b      	str	r3, [r7, #0]
 802a840:	e7fe      	b.n	802a840 <vPortValidateInterruptPriority+0x5c>
	}
 802a842:	bf00      	nop
 802a844:	3714      	adds	r7, #20
 802a846:	46bd      	mov	sp, r7
 802a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a84c:	4770      	bx	lr
 802a84e:	bf00      	nop
 802a850:	e000e3f0 	.word	0xe000e3f0
 802a854:	24002184 	.word	0x24002184
 802a858:	e000ed0c 	.word	0xe000ed0c
 802a85c:	24002188 	.word	0x24002188

0802a860 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 802a860:	b580      	push	{r7, lr}
 802a862:	b08a      	sub	sp, #40	; 0x28
 802a864:	af00      	add	r7, sp, #0
 802a866:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 802a868:	2300      	movs	r3, #0
 802a86a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 802a86c:	f7fe fac0 	bl	8028df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 802a870:	4b57      	ldr	r3, [pc, #348]	; (802a9d0 <pvPortMalloc+0x170>)
 802a872:	681b      	ldr	r3, [r3, #0]
 802a874:	2b00      	cmp	r3, #0
 802a876:	d101      	bne.n	802a87c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 802a878:	f000 f90c 	bl	802aa94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 802a87c:	4b55      	ldr	r3, [pc, #340]	; (802a9d4 <pvPortMalloc+0x174>)
 802a87e:	681a      	ldr	r2, [r3, #0]
 802a880:	687b      	ldr	r3, [r7, #4]
 802a882:	4013      	ands	r3, r2
 802a884:	2b00      	cmp	r3, #0
 802a886:	f040 808c 	bne.w	802a9a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 802a88a:	687b      	ldr	r3, [r7, #4]
 802a88c:	2b00      	cmp	r3, #0
 802a88e:	d01c      	beq.n	802a8ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 802a890:	2208      	movs	r2, #8
 802a892:	687b      	ldr	r3, [r7, #4]
 802a894:	4413      	add	r3, r2
 802a896:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 802a898:	687b      	ldr	r3, [r7, #4]
 802a89a:	f003 0307 	and.w	r3, r3, #7
 802a89e:	2b00      	cmp	r3, #0
 802a8a0:	d013      	beq.n	802a8ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802a8a2:	687b      	ldr	r3, [r7, #4]
 802a8a4:	f023 0307 	bic.w	r3, r3, #7
 802a8a8:	3308      	adds	r3, #8
 802a8aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 802a8ac:	687b      	ldr	r3, [r7, #4]
 802a8ae:	f003 0307 	and.w	r3, r3, #7
 802a8b2:	2b00      	cmp	r3, #0
 802a8b4:	d009      	beq.n	802a8ca <pvPortMalloc+0x6a>
 802a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a8ba:	f383 8811 	msr	BASEPRI, r3
 802a8be:	f3bf 8f6f 	isb	sy
 802a8c2:	f3bf 8f4f 	dsb	sy
 802a8c6:	617b      	str	r3, [r7, #20]
 802a8c8:	e7fe      	b.n	802a8c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 802a8ca:	687b      	ldr	r3, [r7, #4]
 802a8cc:	2b00      	cmp	r3, #0
 802a8ce:	d068      	beq.n	802a9a2 <pvPortMalloc+0x142>
 802a8d0:	4b41      	ldr	r3, [pc, #260]	; (802a9d8 <pvPortMalloc+0x178>)
 802a8d2:	681b      	ldr	r3, [r3, #0]
 802a8d4:	687a      	ldr	r2, [r7, #4]
 802a8d6:	429a      	cmp	r2, r3
 802a8d8:	d863      	bhi.n	802a9a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 802a8da:	4b40      	ldr	r3, [pc, #256]	; (802a9dc <pvPortMalloc+0x17c>)
 802a8dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 802a8de:	4b3f      	ldr	r3, [pc, #252]	; (802a9dc <pvPortMalloc+0x17c>)
 802a8e0:	681b      	ldr	r3, [r3, #0]
 802a8e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802a8e4:	e004      	b.n	802a8f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 802a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a8e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 802a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a8ec:	681b      	ldr	r3, [r3, #0]
 802a8ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a8f2:	685b      	ldr	r3, [r3, #4]
 802a8f4:	687a      	ldr	r2, [r7, #4]
 802a8f6:	429a      	cmp	r2, r3
 802a8f8:	d903      	bls.n	802a902 <pvPortMalloc+0xa2>
 802a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a8fc:	681b      	ldr	r3, [r3, #0]
 802a8fe:	2b00      	cmp	r3, #0
 802a900:	d1f1      	bne.n	802a8e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802a902:	4b33      	ldr	r3, [pc, #204]	; (802a9d0 <pvPortMalloc+0x170>)
 802a904:	681b      	ldr	r3, [r3, #0]
 802a906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a908:	429a      	cmp	r2, r3
 802a90a:	d04a      	beq.n	802a9a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 802a90c:	6a3b      	ldr	r3, [r7, #32]
 802a90e:	681b      	ldr	r3, [r3, #0]
 802a910:	2208      	movs	r2, #8
 802a912:	4413      	add	r3, r2
 802a914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 802a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a918:	681a      	ldr	r2, [r3, #0]
 802a91a:	6a3b      	ldr	r3, [r7, #32]
 802a91c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 802a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a920:	685a      	ldr	r2, [r3, #4]
 802a922:	687b      	ldr	r3, [r7, #4]
 802a924:	1ad2      	subs	r2, r2, r3
 802a926:	2308      	movs	r3, #8
 802a928:	005b      	lsls	r3, r3, #1
 802a92a:	429a      	cmp	r2, r3
 802a92c:	d91e      	bls.n	802a96c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 802a92e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a930:	687b      	ldr	r3, [r7, #4]
 802a932:	4413      	add	r3, r2
 802a934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 802a936:	69bb      	ldr	r3, [r7, #24]
 802a938:	f003 0307 	and.w	r3, r3, #7
 802a93c:	2b00      	cmp	r3, #0
 802a93e:	d009      	beq.n	802a954 <pvPortMalloc+0xf4>
 802a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a944:	f383 8811 	msr	BASEPRI, r3
 802a948:	f3bf 8f6f 	isb	sy
 802a94c:	f3bf 8f4f 	dsb	sy
 802a950:	613b      	str	r3, [r7, #16]
 802a952:	e7fe      	b.n	802a952 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 802a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a956:	685a      	ldr	r2, [r3, #4]
 802a958:	687b      	ldr	r3, [r7, #4]
 802a95a:	1ad2      	subs	r2, r2, r3
 802a95c:	69bb      	ldr	r3, [r7, #24]
 802a95e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a962:	687a      	ldr	r2, [r7, #4]
 802a964:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 802a966:	69b8      	ldr	r0, [r7, #24]
 802a968:	f000 f8f6 	bl	802ab58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 802a96c:	4b1a      	ldr	r3, [pc, #104]	; (802a9d8 <pvPortMalloc+0x178>)
 802a96e:	681a      	ldr	r2, [r3, #0]
 802a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a972:	685b      	ldr	r3, [r3, #4]
 802a974:	1ad3      	subs	r3, r2, r3
 802a976:	4a18      	ldr	r2, [pc, #96]	; (802a9d8 <pvPortMalloc+0x178>)
 802a978:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 802a97a:	4b17      	ldr	r3, [pc, #92]	; (802a9d8 <pvPortMalloc+0x178>)
 802a97c:	681a      	ldr	r2, [r3, #0]
 802a97e:	4b18      	ldr	r3, [pc, #96]	; (802a9e0 <pvPortMalloc+0x180>)
 802a980:	681b      	ldr	r3, [r3, #0]
 802a982:	429a      	cmp	r2, r3
 802a984:	d203      	bcs.n	802a98e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 802a986:	4b14      	ldr	r3, [pc, #80]	; (802a9d8 <pvPortMalloc+0x178>)
 802a988:	681b      	ldr	r3, [r3, #0]
 802a98a:	4a15      	ldr	r2, [pc, #84]	; (802a9e0 <pvPortMalloc+0x180>)
 802a98c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a990:	685a      	ldr	r2, [r3, #4]
 802a992:	4b10      	ldr	r3, [pc, #64]	; (802a9d4 <pvPortMalloc+0x174>)
 802a994:	681b      	ldr	r3, [r3, #0]
 802a996:	431a      	orrs	r2, r3
 802a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a99a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 802a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a99e:	2200      	movs	r2, #0
 802a9a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 802a9a2:	f7fe fa33 	bl	8028e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802a9a6:	69fb      	ldr	r3, [r7, #28]
 802a9a8:	f003 0307 	and.w	r3, r3, #7
 802a9ac:	2b00      	cmp	r3, #0
 802a9ae:	d009      	beq.n	802a9c4 <pvPortMalloc+0x164>
 802a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 802a9b4:	f383 8811 	msr	BASEPRI, r3
 802a9b8:	f3bf 8f6f 	isb	sy
 802a9bc:	f3bf 8f4f 	dsb	sy
 802a9c0:	60fb      	str	r3, [r7, #12]
 802a9c2:	e7fe      	b.n	802a9c2 <pvPortMalloc+0x162>
	return pvReturn;
 802a9c4:	69fb      	ldr	r3, [r7, #28]
}
 802a9c6:	4618      	mov	r0, r3
 802a9c8:	3728      	adds	r7, #40	; 0x28
 802a9ca:	46bd      	mov	sp, r7
 802a9cc:	bd80      	pop	{r7, pc}
 802a9ce:	bf00      	nop
 802a9d0:	24005d94 	.word	0x24005d94
 802a9d4:	24005da0 	.word	0x24005da0
 802a9d8:	24005d98 	.word	0x24005d98
 802a9dc:	24005d8c 	.word	0x24005d8c
 802a9e0:	24005d9c 	.word	0x24005d9c

0802a9e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 802a9e4:	b580      	push	{r7, lr}
 802a9e6:	b086      	sub	sp, #24
 802a9e8:	af00      	add	r7, sp, #0
 802a9ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 802a9ec:	687b      	ldr	r3, [r7, #4]
 802a9ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 802a9f0:	687b      	ldr	r3, [r7, #4]
 802a9f2:	2b00      	cmp	r3, #0
 802a9f4:	d046      	beq.n	802aa84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 802a9f6:	2308      	movs	r3, #8
 802a9f8:	425b      	negs	r3, r3
 802a9fa:	697a      	ldr	r2, [r7, #20]
 802a9fc:	4413      	add	r3, r2
 802a9fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802aa00:	697b      	ldr	r3, [r7, #20]
 802aa02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 802aa04:	693b      	ldr	r3, [r7, #16]
 802aa06:	685a      	ldr	r2, [r3, #4]
 802aa08:	4b20      	ldr	r3, [pc, #128]	; (802aa8c <vPortFree+0xa8>)
 802aa0a:	681b      	ldr	r3, [r3, #0]
 802aa0c:	4013      	ands	r3, r2
 802aa0e:	2b00      	cmp	r3, #0
 802aa10:	d109      	bne.n	802aa26 <vPortFree+0x42>
 802aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aa16:	f383 8811 	msr	BASEPRI, r3
 802aa1a:	f3bf 8f6f 	isb	sy
 802aa1e:	f3bf 8f4f 	dsb	sy
 802aa22:	60fb      	str	r3, [r7, #12]
 802aa24:	e7fe      	b.n	802aa24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 802aa26:	693b      	ldr	r3, [r7, #16]
 802aa28:	681b      	ldr	r3, [r3, #0]
 802aa2a:	2b00      	cmp	r3, #0
 802aa2c:	d009      	beq.n	802aa42 <vPortFree+0x5e>
 802aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 802aa32:	f383 8811 	msr	BASEPRI, r3
 802aa36:	f3bf 8f6f 	isb	sy
 802aa3a:	f3bf 8f4f 	dsb	sy
 802aa3e:	60bb      	str	r3, [r7, #8]
 802aa40:	e7fe      	b.n	802aa40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 802aa42:	693b      	ldr	r3, [r7, #16]
 802aa44:	685a      	ldr	r2, [r3, #4]
 802aa46:	4b11      	ldr	r3, [pc, #68]	; (802aa8c <vPortFree+0xa8>)
 802aa48:	681b      	ldr	r3, [r3, #0]
 802aa4a:	4013      	ands	r3, r2
 802aa4c:	2b00      	cmp	r3, #0
 802aa4e:	d019      	beq.n	802aa84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 802aa50:	693b      	ldr	r3, [r7, #16]
 802aa52:	681b      	ldr	r3, [r3, #0]
 802aa54:	2b00      	cmp	r3, #0
 802aa56:	d115      	bne.n	802aa84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 802aa58:	693b      	ldr	r3, [r7, #16]
 802aa5a:	685a      	ldr	r2, [r3, #4]
 802aa5c:	4b0b      	ldr	r3, [pc, #44]	; (802aa8c <vPortFree+0xa8>)
 802aa5e:	681b      	ldr	r3, [r3, #0]
 802aa60:	43db      	mvns	r3, r3
 802aa62:	401a      	ands	r2, r3
 802aa64:	693b      	ldr	r3, [r7, #16]
 802aa66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 802aa68:	f7fe f9c2 	bl	8028df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802aa6c:	693b      	ldr	r3, [r7, #16]
 802aa6e:	685a      	ldr	r2, [r3, #4]
 802aa70:	4b07      	ldr	r3, [pc, #28]	; (802aa90 <vPortFree+0xac>)
 802aa72:	681b      	ldr	r3, [r3, #0]
 802aa74:	4413      	add	r3, r2
 802aa76:	4a06      	ldr	r2, [pc, #24]	; (802aa90 <vPortFree+0xac>)
 802aa78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802aa7a:	6938      	ldr	r0, [r7, #16]
 802aa7c:	f000 f86c 	bl	802ab58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 802aa80:	f7fe f9c4 	bl	8028e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802aa84:	bf00      	nop
 802aa86:	3718      	adds	r7, #24
 802aa88:	46bd      	mov	sp, r7
 802aa8a:	bd80      	pop	{r7, pc}
 802aa8c:	24005da0 	.word	0x24005da0
 802aa90:	24005d98 	.word	0x24005d98

0802aa94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 802aa94:	b480      	push	{r7}
 802aa96:	b085      	sub	sp, #20
 802aa98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802aa9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 802aa9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 802aaa0:	4b27      	ldr	r3, [pc, #156]	; (802ab40 <prvHeapInit+0xac>)
 802aaa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 802aaa4:	68fb      	ldr	r3, [r7, #12]
 802aaa6:	f003 0307 	and.w	r3, r3, #7
 802aaaa:	2b00      	cmp	r3, #0
 802aaac:	d00c      	beq.n	802aac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802aaae:	68fb      	ldr	r3, [r7, #12]
 802aab0:	3307      	adds	r3, #7
 802aab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802aab4:	68fb      	ldr	r3, [r7, #12]
 802aab6:	f023 0307 	bic.w	r3, r3, #7
 802aaba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802aabc:	68ba      	ldr	r2, [r7, #8]
 802aabe:	68fb      	ldr	r3, [r7, #12]
 802aac0:	1ad3      	subs	r3, r2, r3
 802aac2:	4a1f      	ldr	r2, [pc, #124]	; (802ab40 <prvHeapInit+0xac>)
 802aac4:	4413      	add	r3, r2
 802aac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 802aac8:	68fb      	ldr	r3, [r7, #12]
 802aaca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802aacc:	4a1d      	ldr	r2, [pc, #116]	; (802ab44 <prvHeapInit+0xb0>)
 802aace:	687b      	ldr	r3, [r7, #4]
 802aad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 802aad2:	4b1c      	ldr	r3, [pc, #112]	; (802ab44 <prvHeapInit+0xb0>)
 802aad4:	2200      	movs	r2, #0
 802aad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 802aad8:	687b      	ldr	r3, [r7, #4]
 802aada:	68ba      	ldr	r2, [r7, #8]
 802aadc:	4413      	add	r3, r2
 802aade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 802aae0:	2208      	movs	r2, #8
 802aae2:	68fb      	ldr	r3, [r7, #12]
 802aae4:	1a9b      	subs	r3, r3, r2
 802aae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802aae8:	68fb      	ldr	r3, [r7, #12]
 802aaea:	f023 0307 	bic.w	r3, r3, #7
 802aaee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 802aaf0:	68fb      	ldr	r3, [r7, #12]
 802aaf2:	4a15      	ldr	r2, [pc, #84]	; (802ab48 <prvHeapInit+0xb4>)
 802aaf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 802aaf6:	4b14      	ldr	r3, [pc, #80]	; (802ab48 <prvHeapInit+0xb4>)
 802aaf8:	681b      	ldr	r3, [r3, #0]
 802aafa:	2200      	movs	r2, #0
 802aafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802aafe:	4b12      	ldr	r3, [pc, #72]	; (802ab48 <prvHeapInit+0xb4>)
 802ab00:	681b      	ldr	r3, [r3, #0]
 802ab02:	2200      	movs	r2, #0
 802ab04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 802ab06:	687b      	ldr	r3, [r7, #4]
 802ab08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802ab0a:	683b      	ldr	r3, [r7, #0]
 802ab0c:	68fa      	ldr	r2, [r7, #12]
 802ab0e:	1ad2      	subs	r2, r2, r3
 802ab10:	683b      	ldr	r3, [r7, #0]
 802ab12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 802ab14:	4b0c      	ldr	r3, [pc, #48]	; (802ab48 <prvHeapInit+0xb4>)
 802ab16:	681a      	ldr	r2, [r3, #0]
 802ab18:	683b      	ldr	r3, [r7, #0]
 802ab1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802ab1c:	683b      	ldr	r3, [r7, #0]
 802ab1e:	685b      	ldr	r3, [r3, #4]
 802ab20:	4a0a      	ldr	r2, [pc, #40]	; (802ab4c <prvHeapInit+0xb8>)
 802ab22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802ab24:	683b      	ldr	r3, [r7, #0]
 802ab26:	685b      	ldr	r3, [r3, #4]
 802ab28:	4a09      	ldr	r2, [pc, #36]	; (802ab50 <prvHeapInit+0xbc>)
 802ab2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802ab2c:	4b09      	ldr	r3, [pc, #36]	; (802ab54 <prvHeapInit+0xc0>)
 802ab2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 802ab32:	601a      	str	r2, [r3, #0]
}
 802ab34:	bf00      	nop
 802ab36:	3714      	adds	r7, #20
 802ab38:	46bd      	mov	sp, r7
 802ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab3e:	4770      	bx	lr
 802ab40:	2400218c 	.word	0x2400218c
 802ab44:	24005d8c 	.word	0x24005d8c
 802ab48:	24005d94 	.word	0x24005d94
 802ab4c:	24005d9c 	.word	0x24005d9c
 802ab50:	24005d98 	.word	0x24005d98
 802ab54:	24005da0 	.word	0x24005da0

0802ab58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 802ab58:	b480      	push	{r7}
 802ab5a:	b085      	sub	sp, #20
 802ab5c:	af00      	add	r7, sp, #0
 802ab5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 802ab60:	4b28      	ldr	r3, [pc, #160]	; (802ac04 <prvInsertBlockIntoFreeList+0xac>)
 802ab62:	60fb      	str	r3, [r7, #12]
 802ab64:	e002      	b.n	802ab6c <prvInsertBlockIntoFreeList+0x14>
 802ab66:	68fb      	ldr	r3, [r7, #12]
 802ab68:	681b      	ldr	r3, [r3, #0]
 802ab6a:	60fb      	str	r3, [r7, #12]
 802ab6c:	68fb      	ldr	r3, [r7, #12]
 802ab6e:	681b      	ldr	r3, [r3, #0]
 802ab70:	687a      	ldr	r2, [r7, #4]
 802ab72:	429a      	cmp	r2, r3
 802ab74:	d8f7      	bhi.n	802ab66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 802ab76:	68fb      	ldr	r3, [r7, #12]
 802ab78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802ab7a:	68fb      	ldr	r3, [r7, #12]
 802ab7c:	685b      	ldr	r3, [r3, #4]
 802ab7e:	68ba      	ldr	r2, [r7, #8]
 802ab80:	4413      	add	r3, r2
 802ab82:	687a      	ldr	r2, [r7, #4]
 802ab84:	429a      	cmp	r2, r3
 802ab86:	d108      	bne.n	802ab9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 802ab88:	68fb      	ldr	r3, [r7, #12]
 802ab8a:	685a      	ldr	r2, [r3, #4]
 802ab8c:	687b      	ldr	r3, [r7, #4]
 802ab8e:	685b      	ldr	r3, [r3, #4]
 802ab90:	441a      	add	r2, r3
 802ab92:	68fb      	ldr	r3, [r7, #12]
 802ab94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 802ab96:	68fb      	ldr	r3, [r7, #12]
 802ab98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802ab9a:	687b      	ldr	r3, [r7, #4]
 802ab9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802ab9e:	687b      	ldr	r3, [r7, #4]
 802aba0:	685b      	ldr	r3, [r3, #4]
 802aba2:	68ba      	ldr	r2, [r7, #8]
 802aba4:	441a      	add	r2, r3
 802aba6:	68fb      	ldr	r3, [r7, #12]
 802aba8:	681b      	ldr	r3, [r3, #0]
 802abaa:	429a      	cmp	r2, r3
 802abac:	d118      	bne.n	802abe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802abae:	68fb      	ldr	r3, [r7, #12]
 802abb0:	681a      	ldr	r2, [r3, #0]
 802abb2:	4b15      	ldr	r3, [pc, #84]	; (802ac08 <prvInsertBlockIntoFreeList+0xb0>)
 802abb4:	681b      	ldr	r3, [r3, #0]
 802abb6:	429a      	cmp	r2, r3
 802abb8:	d00d      	beq.n	802abd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802abba:	687b      	ldr	r3, [r7, #4]
 802abbc:	685a      	ldr	r2, [r3, #4]
 802abbe:	68fb      	ldr	r3, [r7, #12]
 802abc0:	681b      	ldr	r3, [r3, #0]
 802abc2:	685b      	ldr	r3, [r3, #4]
 802abc4:	441a      	add	r2, r3
 802abc6:	687b      	ldr	r3, [r7, #4]
 802abc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802abca:	68fb      	ldr	r3, [r7, #12]
 802abcc:	681b      	ldr	r3, [r3, #0]
 802abce:	681a      	ldr	r2, [r3, #0]
 802abd0:	687b      	ldr	r3, [r7, #4]
 802abd2:	601a      	str	r2, [r3, #0]
 802abd4:	e008      	b.n	802abe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 802abd6:	4b0c      	ldr	r3, [pc, #48]	; (802ac08 <prvInsertBlockIntoFreeList+0xb0>)
 802abd8:	681a      	ldr	r2, [r3, #0]
 802abda:	687b      	ldr	r3, [r7, #4]
 802abdc:	601a      	str	r2, [r3, #0]
 802abde:	e003      	b.n	802abe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 802abe0:	68fb      	ldr	r3, [r7, #12]
 802abe2:	681a      	ldr	r2, [r3, #0]
 802abe4:	687b      	ldr	r3, [r7, #4]
 802abe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 802abe8:	68fa      	ldr	r2, [r7, #12]
 802abea:	687b      	ldr	r3, [r7, #4]
 802abec:	429a      	cmp	r2, r3
 802abee:	d002      	beq.n	802abf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 802abf0:	68fb      	ldr	r3, [r7, #12]
 802abf2:	687a      	ldr	r2, [r7, #4]
 802abf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802abf6:	bf00      	nop
 802abf8:	3714      	adds	r7, #20
 802abfa:	46bd      	mov	sp, r7
 802abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac00:	4770      	bx	lr
 802ac02:	bf00      	nop
 802ac04:	24005d8c 	.word	0x24005d8c
 802ac08:	24005d94 	.word	0x24005d94
 802ac0c:	00000000 	.word	0x00000000

0802ac10 <atan>:
 802ac10:	b538      	push	{r3, r4, r5, lr}
 802ac12:	eeb0 7b40 	vmov.f64	d7, d0
 802ac16:	ee17 5a90 	vmov	r5, s15
 802ac1a:	4b73      	ldr	r3, [pc, #460]	; (802ade8 <atan+0x1d8>)
 802ac1c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802ac20:	429c      	cmp	r4, r3
 802ac22:	dd13      	ble.n	802ac4c <atan+0x3c>
 802ac24:	4b71      	ldr	r3, [pc, #452]	; (802adec <atan+0x1dc>)
 802ac26:	429c      	cmp	r4, r3
 802ac28:	dc03      	bgt.n	802ac32 <atan+0x22>
 802ac2a:	d107      	bne.n	802ac3c <atan+0x2c>
 802ac2c:	ee10 3a10 	vmov	r3, s0
 802ac30:	b123      	cbz	r3, 802ac3c <atan+0x2c>
 802ac32:	ee37 7b07 	vadd.f64	d7, d7, d7
 802ac36:	eeb0 0b47 	vmov.f64	d0, d7
 802ac3a:	bd38      	pop	{r3, r4, r5, pc}
 802ac3c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 802ad78 <atan+0x168>
 802ac40:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 802ad80 <atan+0x170>
 802ac44:	2d00      	cmp	r5, #0
 802ac46:	fe37 7b06 	vselgt.f64	d7, d7, d6
 802ac4a:	e7f4      	b.n	802ac36 <atan+0x26>
 802ac4c:	4b68      	ldr	r3, [pc, #416]	; (802adf0 <atan+0x1e0>)
 802ac4e:	429c      	cmp	r4, r3
 802ac50:	dc11      	bgt.n	802ac76 <atan+0x66>
 802ac52:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 802ac56:	429c      	cmp	r4, r3
 802ac58:	dc0a      	bgt.n	802ac70 <atan+0x60>
 802ac5a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 802ac5e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 802ad88 <atan+0x178>
 802ac62:	ee30 6b06 	vadd.f64	d6, d0, d6
 802ac66:	eeb4 6bc5 	vcmpe.f64	d6, d5
 802ac6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802ac6e:	dce2      	bgt.n	802ac36 <atan+0x26>
 802ac70:	f04f 33ff 	mov.w	r3, #4294967295
 802ac74:	e013      	b.n	802ac9e <atan+0x8e>
 802ac76:	f000 f903 	bl	802ae80 <fabs>
 802ac7a:	4b5e      	ldr	r3, [pc, #376]	; (802adf4 <atan+0x1e4>)
 802ac7c:	429c      	cmp	r4, r3
 802ac7e:	dc4f      	bgt.n	802ad20 <atan+0x110>
 802ac80:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 802ac84:	429c      	cmp	r4, r3
 802ac86:	dc41      	bgt.n	802ad0c <atan+0xfc>
 802ac88:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 802ac8c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802ac90:	2300      	movs	r3, #0
 802ac92:	eea0 6b07 	vfma.f64	d6, d0, d7
 802ac96:	ee30 0b07 	vadd.f64	d0, d0, d7
 802ac9a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 802ac9e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802ad90 <atan+0x180>
 802aca2:	ee27 4b07 	vmul.f64	d4, d7, d7
 802aca6:	ee24 5b04 	vmul.f64	d5, d4, d4
 802acaa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 802ad98 <atan+0x188>
 802acae:	eea5 3b06 	vfma.f64	d3, d5, d6
 802acb2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 802ada0 <atan+0x190>
 802acb6:	eea3 6b05 	vfma.f64	d6, d3, d5
 802acba:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 802ada8 <atan+0x198>
 802acbe:	eea6 3b05 	vfma.f64	d3, d6, d5
 802acc2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 802adb0 <atan+0x1a0>
 802acc6:	eea3 6b05 	vfma.f64	d6, d3, d5
 802acca:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 802adb8 <atan+0x1a8>
 802acce:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 802adc0 <atan+0x1b0>
 802acd2:	eea6 3b05 	vfma.f64	d3, d6, d5
 802acd6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802adc8 <atan+0x1b8>
 802acda:	eea5 2b06 	vfma.f64	d2, d5, d6
 802acde:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802add0 <atan+0x1c0>
 802ace2:	eea2 6b05 	vfma.f64	d6, d2, d5
 802ace6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 802add8 <atan+0x1c8>
 802acea:	eea6 2b05 	vfma.f64	d2, d6, d5
 802acee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 802ade0 <atan+0x1d0>
 802acf2:	1c5a      	adds	r2, r3, #1
 802acf4:	eea2 6b05 	vfma.f64	d6, d2, d5
 802acf8:	ee26 6b05 	vmul.f64	d6, d6, d5
 802acfc:	eea3 6b04 	vfma.f64	d6, d3, d4
 802ad00:	ee26 6b07 	vmul.f64	d6, d6, d7
 802ad04:	d121      	bne.n	802ad4a <atan+0x13a>
 802ad06:	ee37 7b46 	vsub.f64	d7, d7, d6
 802ad0a:	e794      	b.n	802ac36 <atan+0x26>
 802ad0c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802ad10:	2301      	movs	r3, #1
 802ad12:	ee30 6b47 	vsub.f64	d6, d0, d7
 802ad16:	ee30 0b07 	vadd.f64	d0, d0, d7
 802ad1a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 802ad1e:	e7be      	b.n	802ac9e <atan+0x8e>
 802ad20:	4b35      	ldr	r3, [pc, #212]	; (802adf8 <atan+0x1e8>)
 802ad22:	429c      	cmp	r4, r3
 802ad24:	dc0b      	bgt.n	802ad3e <atan+0x12e>
 802ad26:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802ad2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802ad2e:	ee30 5b47 	vsub.f64	d5, d0, d7
 802ad32:	eea0 6b07 	vfma.f64	d6, d0, d7
 802ad36:	2302      	movs	r3, #2
 802ad38:	ee85 7b06 	vdiv.f64	d7, d5, d6
 802ad3c:	e7af      	b.n	802ac9e <atan+0x8e>
 802ad3e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802ad42:	2303      	movs	r3, #3
 802ad44:	ee86 7b00 	vdiv.f64	d7, d6, d0
 802ad48:	e7a9      	b.n	802ac9e <atan+0x8e>
 802ad4a:	4a2c      	ldr	r2, [pc, #176]	; (802adfc <atan+0x1ec>)
 802ad4c:	492c      	ldr	r1, [pc, #176]	; (802ae00 <atan+0x1f0>)
 802ad4e:	00db      	lsls	r3, r3, #3
 802ad50:	441a      	add	r2, r3
 802ad52:	440b      	add	r3, r1
 802ad54:	ed93 5b00 	vldr	d5, [r3]
 802ad58:	ee36 6b45 	vsub.f64	d6, d6, d5
 802ad5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 802ad60:	ed92 6b00 	vldr	d6, [r2]
 802ad64:	2d00      	cmp	r5, #0
 802ad66:	ee36 7b47 	vsub.f64	d7, d6, d7
 802ad6a:	bfb8      	it	lt
 802ad6c:	eeb1 7b47 	vneglt.f64	d7, d7
 802ad70:	e761      	b.n	802ac36 <atan+0x26>
 802ad72:	bf00      	nop
 802ad74:	f3af 8000 	nop.w
 802ad78:	54442d18 	.word	0x54442d18
 802ad7c:	bff921fb 	.word	0xbff921fb
 802ad80:	54442d18 	.word	0x54442d18
 802ad84:	3ff921fb 	.word	0x3ff921fb
 802ad88:	8800759c 	.word	0x8800759c
 802ad8c:	7e37e43c 	.word	0x7e37e43c
 802ad90:	e322da11 	.word	0xe322da11
 802ad94:	3f90ad3a 	.word	0x3f90ad3a
 802ad98:	24760deb 	.word	0x24760deb
 802ad9c:	3fa97b4b 	.word	0x3fa97b4b
 802ada0:	a0d03d51 	.word	0xa0d03d51
 802ada4:	3fb10d66 	.word	0x3fb10d66
 802ada8:	c54c206e 	.word	0xc54c206e
 802adac:	3fb745cd 	.word	0x3fb745cd
 802adb0:	920083ff 	.word	0x920083ff
 802adb4:	3fc24924 	.word	0x3fc24924
 802adb8:	5555550d 	.word	0x5555550d
 802adbc:	3fd55555 	.word	0x3fd55555
 802adc0:	52defd9a 	.word	0x52defd9a
 802adc4:	bfadde2d 	.word	0xbfadde2d
 802adc8:	2c6a6c2f 	.word	0x2c6a6c2f
 802adcc:	bfa2b444 	.word	0xbfa2b444
 802add0:	af749a6d 	.word	0xaf749a6d
 802add4:	bfb3b0f2 	.word	0xbfb3b0f2
 802add8:	fe231671 	.word	0xfe231671
 802addc:	bfbc71c6 	.word	0xbfbc71c6
 802ade0:	9998ebc4 	.word	0x9998ebc4
 802ade4:	bfc99999 	.word	0xbfc99999
 802ade8:	440fffff 	.word	0x440fffff
 802adec:	7ff00000 	.word	0x7ff00000
 802adf0:	3fdbffff 	.word	0x3fdbffff
 802adf4:	3ff2ffff 	.word	0x3ff2ffff
 802adf8:	40037fff 	.word	0x40037fff
 802adfc:	0802fce0 	.word	0x0802fce0
 802ae00:	0802fd00 	.word	0x0802fd00
 802ae04:	00000000 	.word	0x00000000

0802ae08 <cos>:
 802ae08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802ae0a:	eeb0 7b40 	vmov.f64	d7, d0
 802ae0e:	ee17 3a90 	vmov	r3, s15
 802ae12:	4a19      	ldr	r2, [pc, #100]	; (802ae78 <cos+0x70>)
 802ae14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802ae18:	4293      	cmp	r3, r2
 802ae1a:	dc04      	bgt.n	802ae26 <cos+0x1e>
 802ae1c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 802ae70 <cos+0x68>
 802ae20:	f001 fd6e 	bl	802c900 <__kernel_cos>
 802ae24:	e004      	b.n	802ae30 <cos+0x28>
 802ae26:	4a15      	ldr	r2, [pc, #84]	; (802ae7c <cos+0x74>)
 802ae28:	4293      	cmp	r3, r2
 802ae2a:	dd04      	ble.n	802ae36 <cos+0x2e>
 802ae2c:	ee30 0b40 	vsub.f64	d0, d0, d0
 802ae30:	b005      	add	sp, #20
 802ae32:	f85d fb04 	ldr.w	pc, [sp], #4
 802ae36:	4668      	mov	r0, sp
 802ae38:	f001 f95e 	bl	802c0f8 <__ieee754_rem_pio2>
 802ae3c:	f000 0003 	and.w	r0, r0, #3
 802ae40:	2801      	cmp	r0, #1
 802ae42:	ed9d 1b02 	vldr	d1, [sp, #8]
 802ae46:	ed9d 0b00 	vldr	d0, [sp]
 802ae4a:	d007      	beq.n	802ae5c <cos+0x54>
 802ae4c:	2802      	cmp	r0, #2
 802ae4e:	d00a      	beq.n	802ae66 <cos+0x5e>
 802ae50:	2800      	cmp	r0, #0
 802ae52:	d0e5      	beq.n	802ae20 <cos+0x18>
 802ae54:	2001      	movs	r0, #1
 802ae56:	f002 f85b 	bl	802cf10 <__kernel_sin>
 802ae5a:	e7e9      	b.n	802ae30 <cos+0x28>
 802ae5c:	f002 f858 	bl	802cf10 <__kernel_sin>
 802ae60:	eeb1 0b40 	vneg.f64	d0, d0
 802ae64:	e7e4      	b.n	802ae30 <cos+0x28>
 802ae66:	f001 fd4b 	bl	802c900 <__kernel_cos>
 802ae6a:	e7f9      	b.n	802ae60 <cos+0x58>
 802ae6c:	f3af 8000 	nop.w
	...
 802ae78:	3fe921fb 	.word	0x3fe921fb
 802ae7c:	7fefffff 	.word	0x7fefffff

0802ae80 <fabs>:
 802ae80:	ec51 0b10 	vmov	r0, r1, d0
 802ae84:	ee10 2a10 	vmov	r2, s0
 802ae88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802ae8c:	ec43 2b10 	vmov	d0, r2, r3
 802ae90:	4770      	bx	lr
 802ae92:	0000      	movs	r0, r0
 802ae94:	0000      	movs	r0, r0
	...

0802ae98 <floor>:
 802ae98:	ee10 1a90 	vmov	r1, s1
 802ae9c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802aea0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 802aea4:	2b13      	cmp	r3, #19
 802aea6:	b530      	push	{r4, r5, lr}
 802aea8:	ee10 0a10 	vmov	r0, s0
 802aeac:	ee10 5a10 	vmov	r5, s0
 802aeb0:	dc33      	bgt.n	802af1a <floor+0x82>
 802aeb2:	2b00      	cmp	r3, #0
 802aeb4:	da17      	bge.n	802aee6 <floor+0x4e>
 802aeb6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 802af78 <floor+0xe0>
 802aeba:	ee30 0b07 	vadd.f64	d0, d0, d7
 802aebe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802aec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802aec6:	dd09      	ble.n	802aedc <floor+0x44>
 802aec8:	2900      	cmp	r1, #0
 802aeca:	da50      	bge.n	802af6e <floor+0xd6>
 802aecc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802aed0:	4a2b      	ldr	r2, [pc, #172]	; (802af80 <floor+0xe8>)
 802aed2:	4303      	orrs	r3, r0
 802aed4:	2000      	movs	r0, #0
 802aed6:	4283      	cmp	r3, r0
 802aed8:	bf18      	it	ne
 802aeda:	4611      	movne	r1, r2
 802aedc:	460b      	mov	r3, r1
 802aede:	4602      	mov	r2, r0
 802aee0:	ec43 2b10 	vmov	d0, r2, r3
 802aee4:	e020      	b.n	802af28 <floor+0x90>
 802aee6:	4a27      	ldr	r2, [pc, #156]	; (802af84 <floor+0xec>)
 802aee8:	411a      	asrs	r2, r3
 802aeea:	ea01 0402 	and.w	r4, r1, r2
 802aeee:	4304      	orrs	r4, r0
 802aef0:	d01a      	beq.n	802af28 <floor+0x90>
 802aef2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 802af78 <floor+0xe0>
 802aef6:	ee30 0b07 	vadd.f64	d0, d0, d7
 802aefa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802aefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802af02:	ddeb      	ble.n	802aedc <floor+0x44>
 802af04:	2900      	cmp	r1, #0
 802af06:	bfbe      	ittt	lt
 802af08:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 802af0c:	fa40 f303 	asrlt.w	r3, r0, r3
 802af10:	18c9      	addlt	r1, r1, r3
 802af12:	ea21 0102 	bic.w	r1, r1, r2
 802af16:	2000      	movs	r0, #0
 802af18:	e7e0      	b.n	802aedc <floor+0x44>
 802af1a:	2b33      	cmp	r3, #51	; 0x33
 802af1c:	dd05      	ble.n	802af2a <floor+0x92>
 802af1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802af22:	d101      	bne.n	802af28 <floor+0x90>
 802af24:	ee30 0b00 	vadd.f64	d0, d0, d0
 802af28:	bd30      	pop	{r4, r5, pc}
 802af2a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 802af2e:	f04f 32ff 	mov.w	r2, #4294967295
 802af32:	40e2      	lsrs	r2, r4
 802af34:	4202      	tst	r2, r0
 802af36:	d0f7      	beq.n	802af28 <floor+0x90>
 802af38:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 802af78 <floor+0xe0>
 802af3c:	ee30 0b07 	vadd.f64	d0, d0, d7
 802af40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802af44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802af48:	ddc8      	ble.n	802aedc <floor+0x44>
 802af4a:	2900      	cmp	r1, #0
 802af4c:	da02      	bge.n	802af54 <floor+0xbc>
 802af4e:	2b14      	cmp	r3, #20
 802af50:	d103      	bne.n	802af5a <floor+0xc2>
 802af52:	3101      	adds	r1, #1
 802af54:	ea20 0002 	bic.w	r0, r0, r2
 802af58:	e7c0      	b.n	802aedc <floor+0x44>
 802af5a:	2401      	movs	r4, #1
 802af5c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802af60:	fa04 f303 	lsl.w	r3, r4, r3
 802af64:	4418      	add	r0, r3
 802af66:	42a8      	cmp	r0, r5
 802af68:	bf38      	it	cc
 802af6a:	1909      	addcc	r1, r1, r4
 802af6c:	e7f2      	b.n	802af54 <floor+0xbc>
 802af6e:	2000      	movs	r0, #0
 802af70:	4601      	mov	r1, r0
 802af72:	e7b3      	b.n	802aedc <floor+0x44>
 802af74:	f3af 8000 	nop.w
 802af78:	8800759c 	.word	0x8800759c
 802af7c:	7e37e43c 	.word	0x7e37e43c
 802af80:	bff00000 	.word	0xbff00000
 802af84:	000fffff 	.word	0x000fffff

0802af88 <sin>:
 802af88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802af8a:	eeb0 7b40 	vmov.f64	d7, d0
 802af8e:	ee17 3a90 	vmov	r3, s15
 802af92:	4a19      	ldr	r2, [pc, #100]	; (802aff8 <sin+0x70>)
 802af94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802af98:	4293      	cmp	r3, r2
 802af9a:	dc05      	bgt.n	802afa8 <sin+0x20>
 802af9c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 802aff0 <sin+0x68>
 802afa0:	2000      	movs	r0, #0
 802afa2:	f001 ffb5 	bl	802cf10 <__kernel_sin>
 802afa6:	e004      	b.n	802afb2 <sin+0x2a>
 802afa8:	4a14      	ldr	r2, [pc, #80]	; (802affc <sin+0x74>)
 802afaa:	4293      	cmp	r3, r2
 802afac:	dd04      	ble.n	802afb8 <sin+0x30>
 802afae:	ee30 0b40 	vsub.f64	d0, d0, d0
 802afb2:	b005      	add	sp, #20
 802afb4:	f85d fb04 	ldr.w	pc, [sp], #4
 802afb8:	4668      	mov	r0, sp
 802afba:	f001 f89d 	bl	802c0f8 <__ieee754_rem_pio2>
 802afbe:	f000 0003 	and.w	r0, r0, #3
 802afc2:	2801      	cmp	r0, #1
 802afc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 802afc8:	ed9d 0b00 	vldr	d0, [sp]
 802afcc:	d004      	beq.n	802afd8 <sin+0x50>
 802afce:	2802      	cmp	r0, #2
 802afd0:	d005      	beq.n	802afde <sin+0x56>
 802afd2:	b950      	cbnz	r0, 802afea <sin+0x62>
 802afd4:	2001      	movs	r0, #1
 802afd6:	e7e4      	b.n	802afa2 <sin+0x1a>
 802afd8:	f001 fc92 	bl	802c900 <__kernel_cos>
 802afdc:	e7e9      	b.n	802afb2 <sin+0x2a>
 802afde:	2001      	movs	r0, #1
 802afe0:	f001 ff96 	bl	802cf10 <__kernel_sin>
 802afe4:	eeb1 0b40 	vneg.f64	d0, d0
 802afe8:	e7e3      	b.n	802afb2 <sin+0x2a>
 802afea:	f001 fc89 	bl	802c900 <__kernel_cos>
 802afee:	e7f9      	b.n	802afe4 <sin+0x5c>
	...
 802aff8:	3fe921fb 	.word	0x3fe921fb
 802affc:	7fefffff 	.word	0x7fefffff

0802b000 <cosf>:
 802b000:	ee10 3a10 	vmov	r3, s0
 802b004:	b507      	push	{r0, r1, r2, lr}
 802b006:	4a1c      	ldr	r2, [pc, #112]	; (802b078 <cosf+0x78>)
 802b008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b00c:	4293      	cmp	r3, r2
 802b00e:	dc04      	bgt.n	802b01a <cosf+0x1a>
 802b010:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802b07c <cosf+0x7c>
 802b014:	f001 ffd4 	bl	802cfc0 <__kernel_cosf>
 802b018:	e004      	b.n	802b024 <cosf+0x24>
 802b01a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802b01e:	db04      	blt.n	802b02a <cosf+0x2a>
 802b020:	ee30 0a40 	vsub.f32	s0, s0, s0
 802b024:	b003      	add	sp, #12
 802b026:	f85d fb04 	ldr.w	pc, [sp], #4
 802b02a:	4668      	mov	r0, sp
 802b02c:	f001 fb36 	bl	802c69c <__ieee754_rem_pio2f>
 802b030:	f000 0003 	and.w	r0, r0, #3
 802b034:	2801      	cmp	r0, #1
 802b036:	d007      	beq.n	802b048 <cosf+0x48>
 802b038:	2802      	cmp	r0, #2
 802b03a:	d00e      	beq.n	802b05a <cosf+0x5a>
 802b03c:	b9a0      	cbnz	r0, 802b068 <cosf+0x68>
 802b03e:	eddd 0a01 	vldr	s1, [sp, #4]
 802b042:	ed9d 0a00 	vldr	s0, [sp]
 802b046:	e7e5      	b.n	802b014 <cosf+0x14>
 802b048:	eddd 0a01 	vldr	s1, [sp, #4]
 802b04c:	ed9d 0a00 	vldr	s0, [sp]
 802b050:	f002 fa96 	bl	802d580 <__kernel_sinf>
 802b054:	eeb1 0a40 	vneg.f32	s0, s0
 802b058:	e7e4      	b.n	802b024 <cosf+0x24>
 802b05a:	eddd 0a01 	vldr	s1, [sp, #4]
 802b05e:	ed9d 0a00 	vldr	s0, [sp]
 802b062:	f001 ffad 	bl	802cfc0 <__kernel_cosf>
 802b066:	e7f5      	b.n	802b054 <cosf+0x54>
 802b068:	2001      	movs	r0, #1
 802b06a:	eddd 0a01 	vldr	s1, [sp, #4]
 802b06e:	ed9d 0a00 	vldr	s0, [sp]
 802b072:	f002 fa85 	bl	802d580 <__kernel_sinf>
 802b076:	e7d5      	b.n	802b024 <cosf+0x24>
 802b078:	3f490fd8 	.word	0x3f490fd8
 802b07c:	00000000 	.word	0x00000000

0802b080 <sinf>:
 802b080:	ee10 3a10 	vmov	r3, s0
 802b084:	b507      	push	{r0, r1, r2, lr}
 802b086:	4a1d      	ldr	r2, [pc, #116]	; (802b0fc <sinf+0x7c>)
 802b088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b08c:	4293      	cmp	r3, r2
 802b08e:	dc05      	bgt.n	802b09c <sinf+0x1c>
 802b090:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802b100 <sinf+0x80>
 802b094:	2000      	movs	r0, #0
 802b096:	f002 fa73 	bl	802d580 <__kernel_sinf>
 802b09a:	e004      	b.n	802b0a6 <sinf+0x26>
 802b09c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802b0a0:	db04      	blt.n	802b0ac <sinf+0x2c>
 802b0a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 802b0a6:	b003      	add	sp, #12
 802b0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 802b0ac:	4668      	mov	r0, sp
 802b0ae:	f001 faf5 	bl	802c69c <__ieee754_rem_pio2f>
 802b0b2:	f000 0003 	and.w	r0, r0, #3
 802b0b6:	2801      	cmp	r0, #1
 802b0b8:	d008      	beq.n	802b0cc <sinf+0x4c>
 802b0ba:	2802      	cmp	r0, #2
 802b0bc:	d00d      	beq.n	802b0da <sinf+0x5a>
 802b0be:	b9b0      	cbnz	r0, 802b0ee <sinf+0x6e>
 802b0c0:	2001      	movs	r0, #1
 802b0c2:	eddd 0a01 	vldr	s1, [sp, #4]
 802b0c6:	ed9d 0a00 	vldr	s0, [sp]
 802b0ca:	e7e4      	b.n	802b096 <sinf+0x16>
 802b0cc:	eddd 0a01 	vldr	s1, [sp, #4]
 802b0d0:	ed9d 0a00 	vldr	s0, [sp]
 802b0d4:	f001 ff74 	bl	802cfc0 <__kernel_cosf>
 802b0d8:	e7e5      	b.n	802b0a6 <sinf+0x26>
 802b0da:	2001      	movs	r0, #1
 802b0dc:	eddd 0a01 	vldr	s1, [sp, #4]
 802b0e0:	ed9d 0a00 	vldr	s0, [sp]
 802b0e4:	f002 fa4c 	bl	802d580 <__kernel_sinf>
 802b0e8:	eeb1 0a40 	vneg.f32	s0, s0
 802b0ec:	e7db      	b.n	802b0a6 <sinf+0x26>
 802b0ee:	eddd 0a01 	vldr	s1, [sp, #4]
 802b0f2:	ed9d 0a00 	vldr	s0, [sp]
 802b0f6:	f001 ff63 	bl	802cfc0 <__kernel_cosf>
 802b0fa:	e7f5      	b.n	802b0e8 <sinf+0x68>
 802b0fc:	3f490fd8 	.word	0x3f490fd8
 802b100:	00000000 	.word	0x00000000

0802b104 <atan2>:
 802b104:	f000 ba78 	b.w	802b5f8 <__ieee754_atan2>

0802b108 <fmod>:
 802b108:	b500      	push	{lr}
 802b10a:	ed2d 8b04 	vpush	{d8-d9}
 802b10e:	eeb0 8b40 	vmov.f64	d8, d0
 802b112:	eeb0 9b41 	vmov.f64	d9, d1
 802b116:	b08b      	sub	sp, #44	; 0x2c
 802b118:	f000 fb50 	bl	802b7bc <__ieee754_fmod>
 802b11c:	4b22      	ldr	r3, [pc, #136]	; (802b1a8 <fmod+0xa0>)
 802b11e:	f993 3000 	ldrsb.w	r3, [r3]
 802b122:	1c5a      	adds	r2, r3, #1
 802b124:	d029      	beq.n	802b17a <fmod+0x72>
 802b126:	eeb4 9b49 	vcmp.f64	d9, d9
 802b12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b12e:	d624      	bvs.n	802b17a <fmod+0x72>
 802b130:	eeb4 8b48 	vcmp.f64	d8, d8
 802b134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b138:	d61f      	bvs.n	802b17a <fmod+0x72>
 802b13a:	ed9f 7b19 	vldr	d7, [pc, #100]	; 802b1a0 <fmod+0x98>
 802b13e:	eeb4 9b47 	vcmp.f64	d9, d7
 802b142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b146:	d118      	bne.n	802b17a <fmod+0x72>
 802b148:	2201      	movs	r2, #1
 802b14a:	9200      	str	r2, [sp, #0]
 802b14c:	4a17      	ldr	r2, [pc, #92]	; (802b1ac <fmod+0xa4>)
 802b14e:	9201      	str	r2, [sp, #4]
 802b150:	2200      	movs	r2, #0
 802b152:	ed8d 8b02 	vstr	d8, [sp, #8]
 802b156:	ed8d 9b04 	vstr	d9, [sp, #16]
 802b15a:	9208      	str	r2, [sp, #32]
 802b15c:	b993      	cbnz	r3, 802b184 <fmod+0x7c>
 802b15e:	ed8d 8b06 	vstr	d8, [sp, #24]
 802b162:	4668      	mov	r0, sp
 802b164:	f002 fa5c 	bl	802d620 <matherr>
 802b168:	b190      	cbz	r0, 802b190 <fmod+0x88>
 802b16a:	9b08      	ldr	r3, [sp, #32]
 802b16c:	b11b      	cbz	r3, 802b176 <fmod+0x6e>
 802b16e:	f002 fd23 	bl	802dbb8 <__errno>
 802b172:	9b08      	ldr	r3, [sp, #32]
 802b174:	6003      	str	r3, [r0, #0]
 802b176:	ed9d 0b06 	vldr	d0, [sp, #24]
 802b17a:	b00b      	add	sp, #44	; 0x2c
 802b17c:	ecbd 8b04 	vpop	{d8-d9}
 802b180:	f85d fb04 	ldr.w	pc, [sp], #4
 802b184:	2b02      	cmp	r3, #2
 802b186:	ee87 6b07 	vdiv.f64	d6, d7, d7
 802b18a:	ed8d 6b06 	vstr	d6, [sp, #24]
 802b18e:	d1e8      	bne.n	802b162 <fmod+0x5a>
 802b190:	f002 fd12 	bl	802dbb8 <__errno>
 802b194:	2321      	movs	r3, #33	; 0x21
 802b196:	6003      	str	r3, [r0, #0]
 802b198:	e7e7      	b.n	802b16a <fmod+0x62>
 802b19a:	bf00      	nop
 802b19c:	f3af 8000 	nop.w
	...
 802b1a8:	2400066c 	.word	0x2400066c
 802b1ac:	0802fd20 	.word	0x0802fd20

0802b1b0 <pow>:
 802b1b0:	b570      	push	{r4, r5, r6, lr}
 802b1b2:	ed2d 8b0a 	vpush	{d8-d12}
 802b1b6:	eeb0 9b40 	vmov.f64	d9, d0
 802b1ba:	eeb0 8b41 	vmov.f64	d8, d1
 802b1be:	4c8c      	ldr	r4, [pc, #560]	; (802b3f0 <pow+0x240>)
 802b1c0:	b08a      	sub	sp, #40	; 0x28
 802b1c2:	f000 fc11 	bl	802b9e8 <__ieee754_pow>
 802b1c6:	f994 3000 	ldrsb.w	r3, [r4]
 802b1ca:	eeb0 ab40 	vmov.f64	d10, d0
 802b1ce:	1c5a      	adds	r2, r3, #1
 802b1d0:	4626      	mov	r6, r4
 802b1d2:	d04b      	beq.n	802b26c <pow+0xbc>
 802b1d4:	eeb4 8b48 	vcmp.f64	d8, d8
 802b1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b1dc:	d646      	bvs.n	802b26c <pow+0xbc>
 802b1de:	eeb4 9b49 	vcmp.f64	d9, d9
 802b1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b1e6:	d719      	bvc.n	802b21c <pow+0x6c>
 802b1e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802b1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b1f0:	d13c      	bne.n	802b26c <pow+0xbc>
 802b1f2:	2201      	movs	r2, #1
 802b1f4:	9200      	str	r2, [sp, #0]
 802b1f6:	497f      	ldr	r1, [pc, #508]	; (802b3f4 <pow+0x244>)
 802b1f8:	4a7f      	ldr	r2, [pc, #508]	; (802b3f8 <pow+0x248>)
 802b1fa:	9201      	str	r2, [sp, #4]
 802b1fc:	2000      	movs	r0, #0
 802b1fe:	2200      	movs	r2, #0
 802b200:	2b02      	cmp	r3, #2
 802b202:	9208      	str	r2, [sp, #32]
 802b204:	ed8d 9b02 	vstr	d9, [sp, #8]
 802b208:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b20c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802b210:	d02a      	beq.n	802b268 <pow+0xb8>
 802b212:	4668      	mov	r0, sp
 802b214:	f002 fa04 	bl	802d620 <matherr>
 802b218:	bb00      	cbnz	r0, 802b25c <pow+0xac>
 802b21a:	e04e      	b.n	802b2ba <pow+0x10a>
 802b21c:	ed9f bb72 	vldr	d11, [pc, #456]	; 802b3e8 <pow+0x238>
 802b220:	eeb4 9b4b 	vcmp.f64	d9, d11
 802b224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b228:	eeb0 cb4b 	vmov.f64	d12, d11
 802b22c:	d14a      	bne.n	802b2c4 <pow+0x114>
 802b22e:	eeb4 8b4b 	vcmp.f64	d8, d11
 802b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b236:	d11f      	bne.n	802b278 <pow+0xc8>
 802b238:	2201      	movs	r2, #1
 802b23a:	9200      	str	r2, [sp, #0]
 802b23c:	4a6e      	ldr	r2, [pc, #440]	; (802b3f8 <pow+0x248>)
 802b23e:	9201      	str	r2, [sp, #4]
 802b240:	2200      	movs	r2, #0
 802b242:	9208      	str	r2, [sp, #32]
 802b244:	ed8d 9b02 	vstr	d9, [sp, #8]
 802b248:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b24c:	ed8d bb06 	vstr	d11, [sp, #24]
 802b250:	2b00      	cmp	r3, #0
 802b252:	d0de      	beq.n	802b212 <pow+0x62>
 802b254:	4b67      	ldr	r3, [pc, #412]	; (802b3f4 <pow+0x244>)
 802b256:	2200      	movs	r2, #0
 802b258:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b25c:	9b08      	ldr	r3, [sp, #32]
 802b25e:	b11b      	cbz	r3, 802b268 <pow+0xb8>
 802b260:	f002 fcaa 	bl	802dbb8 <__errno>
 802b264:	9b08      	ldr	r3, [sp, #32]
 802b266:	6003      	str	r3, [r0, #0]
 802b268:	ed9d ab06 	vldr	d10, [sp, #24]
 802b26c:	eeb0 0b4a 	vmov.f64	d0, d10
 802b270:	b00a      	add	sp, #40	; 0x28
 802b272:	ecbd 8b0a 	vpop	{d8-d12}
 802b276:	bd70      	pop	{r4, r5, r6, pc}
 802b278:	eeb0 0b48 	vmov.f64	d0, d8
 802b27c:	f002 f9c8 	bl	802d610 <finite>
 802b280:	2800      	cmp	r0, #0
 802b282:	d0f3      	beq.n	802b26c <pow+0xbc>
 802b284:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 802b288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b28c:	d5ee      	bpl.n	802b26c <pow+0xbc>
 802b28e:	2301      	movs	r3, #1
 802b290:	9300      	str	r3, [sp, #0]
 802b292:	4b59      	ldr	r3, [pc, #356]	; (802b3f8 <pow+0x248>)
 802b294:	9301      	str	r3, [sp, #4]
 802b296:	2300      	movs	r3, #0
 802b298:	9308      	str	r3, [sp, #32]
 802b29a:	f994 3000 	ldrsb.w	r3, [r4]
 802b29e:	ed8d 9b02 	vstr	d9, [sp, #8]
 802b2a2:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b2a6:	b913      	cbnz	r3, 802b2ae <pow+0xfe>
 802b2a8:	ed8d bb06 	vstr	d11, [sp, #24]
 802b2ac:	e7b1      	b.n	802b212 <pow+0x62>
 802b2ae:	4953      	ldr	r1, [pc, #332]	; (802b3fc <pow+0x24c>)
 802b2b0:	2000      	movs	r0, #0
 802b2b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802b2b6:	2b02      	cmp	r3, #2
 802b2b8:	d1ab      	bne.n	802b212 <pow+0x62>
 802b2ba:	f002 fc7d 	bl	802dbb8 <__errno>
 802b2be:	2321      	movs	r3, #33	; 0x21
 802b2c0:	6003      	str	r3, [r0, #0]
 802b2c2:	e7cb      	b.n	802b25c <pow+0xac>
 802b2c4:	f002 f9a4 	bl	802d610 <finite>
 802b2c8:	4605      	mov	r5, r0
 802b2ca:	2800      	cmp	r0, #0
 802b2cc:	d164      	bne.n	802b398 <pow+0x1e8>
 802b2ce:	eeb0 0b49 	vmov.f64	d0, d9
 802b2d2:	f002 f99d 	bl	802d610 <finite>
 802b2d6:	2800      	cmp	r0, #0
 802b2d8:	d05e      	beq.n	802b398 <pow+0x1e8>
 802b2da:	eeb0 0b48 	vmov.f64	d0, d8
 802b2de:	f002 f997 	bl	802d610 <finite>
 802b2e2:	2800      	cmp	r0, #0
 802b2e4:	d058      	beq.n	802b398 <pow+0x1e8>
 802b2e6:	eeb4 ab4a 	vcmp.f64	d10, d10
 802b2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b2ee:	f994 3000 	ldrsb.w	r3, [r4]
 802b2f2:	4a41      	ldr	r2, [pc, #260]	; (802b3f8 <pow+0x248>)
 802b2f4:	d70e      	bvc.n	802b314 <pow+0x164>
 802b2f6:	2101      	movs	r1, #1
 802b2f8:	e9cd 1200 	strd	r1, r2, [sp]
 802b2fc:	9508      	str	r5, [sp, #32]
 802b2fe:	ed8d 9b02 	vstr	d9, [sp, #8]
 802b302:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b306:	2b00      	cmp	r3, #0
 802b308:	d0ce      	beq.n	802b2a8 <pow+0xf8>
 802b30a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 802b30e:	ed8d 7b06 	vstr	d7, [sp, #24]
 802b312:	e7d0      	b.n	802b2b6 <pow+0x106>
 802b314:	2103      	movs	r1, #3
 802b316:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b31a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802b31e:	ee28 8b07 	vmul.f64	d8, d8, d7
 802b322:	e9cd 1200 	strd	r1, r2, [sp]
 802b326:	9508      	str	r5, [sp, #32]
 802b328:	ed8d 9b02 	vstr	d9, [sp, #8]
 802b32c:	b9fb      	cbnz	r3, 802b36e <pow+0x1be>
 802b32e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 802b332:	4b33      	ldr	r3, [pc, #204]	; (802b400 <pow+0x250>)
 802b334:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802b338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b33c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b340:	d54b      	bpl.n	802b3da <pow+0x22a>
 802b342:	eeb0 0b48 	vmov.f64	d0, d8
 802b346:	f002 f977 	bl	802d638 <rint>
 802b34a:	eeb4 0b48 	vcmp.f64	d0, d8
 802b34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b352:	d004      	beq.n	802b35e <pow+0x1ae>
 802b354:	4b2b      	ldr	r3, [pc, #172]	; (802b404 <pow+0x254>)
 802b356:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802b35a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b35e:	f996 3000 	ldrsb.w	r3, [r6]
 802b362:	2b02      	cmp	r3, #2
 802b364:	d139      	bne.n	802b3da <pow+0x22a>
 802b366:	f002 fc27 	bl	802dbb8 <__errno>
 802b36a:	2322      	movs	r3, #34	; 0x22
 802b36c:	e7a8      	b.n	802b2c0 <pow+0x110>
 802b36e:	4b26      	ldr	r3, [pc, #152]	; (802b408 <pow+0x258>)
 802b370:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 802b374:	2200      	movs	r2, #0
 802b376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b37a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802b37e:	d5ee      	bpl.n	802b35e <pow+0x1ae>
 802b380:	eeb0 0b48 	vmov.f64	d0, d8
 802b384:	f002 f958 	bl	802d638 <rint>
 802b388:	eeb4 0b48 	vcmp.f64	d0, d8
 802b38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b390:	d0e5      	beq.n	802b35e <pow+0x1ae>
 802b392:	2200      	movs	r2, #0
 802b394:	4b19      	ldr	r3, [pc, #100]	; (802b3fc <pow+0x24c>)
 802b396:	e7e0      	b.n	802b35a <pow+0x1aa>
 802b398:	eeb5 ab40 	vcmp.f64	d10, #0.0
 802b39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b3a0:	f47f af64 	bne.w	802b26c <pow+0xbc>
 802b3a4:	eeb0 0b49 	vmov.f64	d0, d9
 802b3a8:	f002 f932 	bl	802d610 <finite>
 802b3ac:	2800      	cmp	r0, #0
 802b3ae:	f43f af5d 	beq.w	802b26c <pow+0xbc>
 802b3b2:	eeb0 0b48 	vmov.f64	d0, d8
 802b3b6:	f002 f92b 	bl	802d610 <finite>
 802b3ba:	2800      	cmp	r0, #0
 802b3bc:	f43f af56 	beq.w	802b26c <pow+0xbc>
 802b3c0:	2304      	movs	r3, #4
 802b3c2:	9300      	str	r3, [sp, #0]
 802b3c4:	4b0c      	ldr	r3, [pc, #48]	; (802b3f8 <pow+0x248>)
 802b3c6:	9301      	str	r3, [sp, #4]
 802b3c8:	2300      	movs	r3, #0
 802b3ca:	9308      	str	r3, [sp, #32]
 802b3cc:	ed8d 9b02 	vstr	d9, [sp, #8]
 802b3d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b3d4:	ed8d cb06 	vstr	d12, [sp, #24]
 802b3d8:	e7c1      	b.n	802b35e <pow+0x1ae>
 802b3da:	4668      	mov	r0, sp
 802b3dc:	f002 f920 	bl	802d620 <matherr>
 802b3e0:	2800      	cmp	r0, #0
 802b3e2:	f47f af3b 	bne.w	802b25c <pow+0xac>
 802b3e6:	e7be      	b.n	802b366 <pow+0x1b6>
	...
 802b3f0:	2400066c 	.word	0x2400066c
 802b3f4:	3ff00000 	.word	0x3ff00000
 802b3f8:	0802fd25 	.word	0x0802fd25
 802b3fc:	fff00000 	.word	0xfff00000
 802b400:	47efffff 	.word	0x47efffff
 802b404:	c7efffff 	.word	0xc7efffff
 802b408:	7ff00000 	.word	0x7ff00000
 802b40c:	00000000 	.word	0x00000000

0802b410 <sqrt>:
 802b410:	b500      	push	{lr}
 802b412:	ed2d 8b02 	vpush	{d8}
 802b416:	eeb0 8b40 	vmov.f64	d8, d0
 802b41a:	b08b      	sub	sp, #44	; 0x2c
 802b41c:	f000 ffa8 	bl	802c370 <__ieee754_sqrt>
 802b420:	4b1f      	ldr	r3, [pc, #124]	; (802b4a0 <sqrt+0x90>)
 802b422:	f993 3000 	ldrsb.w	r3, [r3]
 802b426:	1c5a      	adds	r2, r3, #1
 802b428:	d024      	beq.n	802b474 <sqrt+0x64>
 802b42a:	eeb4 8b48 	vcmp.f64	d8, d8
 802b42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b432:	d61f      	bvs.n	802b474 <sqrt+0x64>
 802b434:	ed9f 7b18 	vldr	d7, [pc, #96]	; 802b498 <sqrt+0x88>
 802b438:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802b43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b440:	d518      	bpl.n	802b474 <sqrt+0x64>
 802b442:	2201      	movs	r2, #1
 802b444:	9200      	str	r2, [sp, #0]
 802b446:	4a17      	ldr	r2, [pc, #92]	; (802b4a4 <sqrt+0x94>)
 802b448:	9201      	str	r2, [sp, #4]
 802b44a:	2200      	movs	r2, #0
 802b44c:	9208      	str	r2, [sp, #32]
 802b44e:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b452:	ed8d 8b02 	vstr	d8, [sp, #8]
 802b456:	b993      	cbnz	r3, 802b47e <sqrt+0x6e>
 802b458:	ed8d 7b06 	vstr	d7, [sp, #24]
 802b45c:	4668      	mov	r0, sp
 802b45e:	f002 f8df 	bl	802d620 <matherr>
 802b462:	b190      	cbz	r0, 802b48a <sqrt+0x7a>
 802b464:	9b08      	ldr	r3, [sp, #32]
 802b466:	b11b      	cbz	r3, 802b470 <sqrt+0x60>
 802b468:	f002 fba6 	bl	802dbb8 <__errno>
 802b46c:	9b08      	ldr	r3, [sp, #32]
 802b46e:	6003      	str	r3, [r0, #0]
 802b470:	ed9d 0b06 	vldr	d0, [sp, #24]
 802b474:	b00b      	add	sp, #44	; 0x2c
 802b476:	ecbd 8b02 	vpop	{d8}
 802b47a:	f85d fb04 	ldr.w	pc, [sp], #4
 802b47e:	2b02      	cmp	r3, #2
 802b480:	ee87 6b07 	vdiv.f64	d6, d7, d7
 802b484:	ed8d 6b06 	vstr	d6, [sp, #24]
 802b488:	d1e8      	bne.n	802b45c <sqrt+0x4c>
 802b48a:	f002 fb95 	bl	802dbb8 <__errno>
 802b48e:	2321      	movs	r3, #33	; 0x21
 802b490:	6003      	str	r3, [r0, #0]
 802b492:	e7e7      	b.n	802b464 <sqrt+0x54>
 802b494:	f3af 8000 	nop.w
	...
 802b4a0:	2400066c 	.word	0x2400066c
 802b4a4:	0802fd29 	.word	0x0802fd29

0802b4a8 <asinf>:
 802b4a8:	b510      	push	{r4, lr}
 802b4aa:	ed2d 8b02 	vpush	{d8}
 802b4ae:	4c25      	ldr	r4, [pc, #148]	; (802b544 <asinf+0x9c>)
 802b4b0:	b08a      	sub	sp, #40	; 0x28
 802b4b2:	eeb0 8a40 	vmov.f32	s16, s0
 802b4b6:	f000 ff5f 	bl	802c378 <__ieee754_asinf>
 802b4ba:	f994 3000 	ldrsb.w	r3, [r4]
 802b4be:	3301      	adds	r3, #1
 802b4c0:	eef0 8a40 	vmov.f32	s17, s0
 802b4c4:	d038      	beq.n	802b538 <asinf+0x90>
 802b4c6:	eeb4 8a48 	vcmp.f32	s16, s16
 802b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b4ce:	d633      	bvs.n	802b538 <asinf+0x90>
 802b4d0:	eeb0 0a48 	vmov.f32	s0, s16
 802b4d4:	f002 fa8c 	bl	802d9f0 <fabsf>
 802b4d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802b4dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802b4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b4e4:	dd28      	ble.n	802b538 <asinf+0x90>
 802b4e6:	2301      	movs	r3, #1
 802b4e8:	9300      	str	r3, [sp, #0]
 802b4ea:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 802b4ee:	4b16      	ldr	r3, [pc, #88]	; (802b548 <asinf+0xa0>)
 802b4f0:	9301      	str	r3, [sp, #4]
 802b4f2:	4816      	ldr	r0, [pc, #88]	; (802b54c <asinf+0xa4>)
 802b4f4:	2300      	movs	r3, #0
 802b4f6:	9308      	str	r3, [sp, #32]
 802b4f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b4fc:	ed8d 8b02 	vstr	d8, [sp, #8]
 802b500:	f002 f892 	bl	802d628 <nan>
 802b504:	f994 3000 	ldrsb.w	r3, [r4]
 802b508:	2b02      	cmp	r3, #2
 802b50a:	ed8d 0b06 	vstr	d0, [sp, #24]
 802b50e:	d104      	bne.n	802b51a <asinf+0x72>
 802b510:	f002 fb52 	bl	802dbb8 <__errno>
 802b514:	2321      	movs	r3, #33	; 0x21
 802b516:	6003      	str	r3, [r0, #0]
 802b518:	e004      	b.n	802b524 <asinf+0x7c>
 802b51a:	4668      	mov	r0, sp
 802b51c:	f002 f880 	bl	802d620 <matherr>
 802b520:	2800      	cmp	r0, #0
 802b522:	d0f5      	beq.n	802b510 <asinf+0x68>
 802b524:	9b08      	ldr	r3, [sp, #32]
 802b526:	b11b      	cbz	r3, 802b530 <asinf+0x88>
 802b528:	f002 fb46 	bl	802dbb8 <__errno>
 802b52c:	9b08      	ldr	r3, [sp, #32]
 802b52e:	6003      	str	r3, [r0, #0]
 802b530:	ed9d 0b06 	vldr	d0, [sp, #24]
 802b534:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 802b538:	eeb0 0a68 	vmov.f32	s0, s17
 802b53c:	b00a      	add	sp, #40	; 0x28
 802b53e:	ecbd 8b02 	vpop	{d8}
 802b542:	bd10      	pop	{r4, pc}
 802b544:	2400066c 	.word	0x2400066c
 802b548:	0802fd2e 	.word	0x0802fd2e
 802b54c:	08030393 	.word	0x08030393

0802b550 <atan2f>:
 802b550:	f000 bffa 	b.w	802c548 <__ieee754_atan2f>
 802b554:	0000      	movs	r0, r0
	...

0802b558 <sqrtf>:
 802b558:	b500      	push	{lr}
 802b55a:	ed2d 8b02 	vpush	{d8}
 802b55e:	b08b      	sub	sp, #44	; 0x2c
 802b560:	eeb0 8a40 	vmov.f32	s16, s0
 802b564:	f001 f9c6 	bl	802c8f4 <__ieee754_sqrtf>
 802b568:	4b21      	ldr	r3, [pc, #132]	; (802b5f0 <sqrtf+0x98>)
 802b56a:	f993 3000 	ldrsb.w	r3, [r3]
 802b56e:	1c5a      	adds	r2, r3, #1
 802b570:	d028      	beq.n	802b5c4 <sqrtf+0x6c>
 802b572:	eeb4 8a48 	vcmp.f32	s16, s16
 802b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b57a:	d623      	bvs.n	802b5c4 <sqrtf+0x6c>
 802b57c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b584:	d51e      	bpl.n	802b5c4 <sqrtf+0x6c>
 802b586:	2201      	movs	r2, #1
 802b588:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 802b58c:	9200      	str	r2, [sp, #0]
 802b58e:	4a19      	ldr	r2, [pc, #100]	; (802b5f4 <sqrtf+0x9c>)
 802b590:	9201      	str	r2, [sp, #4]
 802b592:	2200      	movs	r2, #0
 802b594:	9208      	str	r2, [sp, #32]
 802b596:	ed8d 8b04 	vstr	d8, [sp, #16]
 802b59a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802b59e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 802b5e8 <sqrtf+0x90>
 802b5a2:	b9a3      	cbnz	r3, 802b5ce <sqrtf+0x76>
 802b5a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 802b5a8:	4668      	mov	r0, sp
 802b5aa:	f002 f839 	bl	802d620 <matherr>
 802b5ae:	b1a0      	cbz	r0, 802b5da <sqrtf+0x82>
 802b5b0:	9b08      	ldr	r3, [sp, #32]
 802b5b2:	b11b      	cbz	r3, 802b5bc <sqrtf+0x64>
 802b5b4:	f002 fb00 	bl	802dbb8 <__errno>
 802b5b8:	9b08      	ldr	r3, [sp, #32]
 802b5ba:	6003      	str	r3, [r0, #0]
 802b5bc:	ed9d 0b06 	vldr	d0, [sp, #24]
 802b5c0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802b5c4:	b00b      	add	sp, #44	; 0x2c
 802b5c6:	ecbd 8b02 	vpop	{d8}
 802b5ca:	f85d fb04 	ldr.w	pc, [sp], #4
 802b5ce:	2b02      	cmp	r3, #2
 802b5d0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 802b5d4:	ed8d 6b06 	vstr	d6, [sp, #24]
 802b5d8:	d1e6      	bne.n	802b5a8 <sqrtf+0x50>
 802b5da:	f002 faed 	bl	802dbb8 <__errno>
 802b5de:	2321      	movs	r3, #33	; 0x21
 802b5e0:	6003      	str	r3, [r0, #0]
 802b5e2:	e7e5      	b.n	802b5b0 <sqrtf+0x58>
 802b5e4:	f3af 8000 	nop.w
	...
 802b5f0:	2400066c 	.word	0x2400066c
 802b5f4:	0802fd34 	.word	0x0802fd34

0802b5f8 <__ieee754_atan2>:
 802b5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b5fa:	ee11 6a10 	vmov	r6, s2
 802b5fe:	ee11 0a90 	vmov	r0, s3
 802b602:	4273      	negs	r3, r6
 802b604:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 802b608:	4333      	orrs	r3, r6
 802b60a:	4f6b      	ldr	r7, [pc, #428]	; (802b7b8 <__ieee754_atan2+0x1c0>)
 802b60c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 802b610:	42bb      	cmp	r3, r7
 802b612:	ed8d 0b00 	vstr	d0, [sp]
 802b616:	d80b      	bhi.n	802b630 <__ieee754_atan2+0x38>
 802b618:	e9dd c500 	ldrd	ip, r5, [sp]
 802b61c:	f1cc 0100 	rsb	r1, ip, #0
 802b620:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802b624:	ea41 010c 	orr.w	r1, r1, ip
 802b628:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 802b62c:	42b9      	cmp	r1, r7
 802b62e:	d906      	bls.n	802b63e <__ieee754_atan2+0x46>
 802b630:	ed9d 7b00 	vldr	d7, [sp]
 802b634:	ee37 7b01 	vadd.f64	d7, d7, d1
 802b638:	ed8d 7b00 	vstr	d7, [sp]
 802b63c:	e063      	b.n	802b706 <__ieee754_atan2+0x10e>
 802b63e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 802b642:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 802b646:	4331      	orrs	r1, r6
 802b648:	d104      	bne.n	802b654 <__ieee754_atan2+0x5c>
 802b64a:	b003      	add	sp, #12
 802b64c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802b650:	f7ff bade 	b.w	802ac10 <atan>
 802b654:	1784      	asrs	r4, r0, #30
 802b656:	f004 0402 	and.w	r4, r4, #2
 802b65a:	ea53 010c 	orrs.w	r1, r3, ip
 802b65e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 802b662:	d109      	bne.n	802b678 <__ieee754_atan2+0x80>
 802b664:	2c02      	cmp	r4, #2
 802b666:	d078      	beq.n	802b75a <__ieee754_atan2+0x162>
 802b668:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 802b760 <__ieee754_atan2+0x168>
 802b66c:	ed9d 6b00 	vldr	d6, [sp]
 802b670:	2c03      	cmp	r4, #3
 802b672:	fe07 7b06 	vseleq.f64	d7, d7, d6
 802b676:	e7df      	b.n	802b638 <__ieee754_atan2+0x40>
 802b678:	ea52 0106 	orrs.w	r1, r2, r6
 802b67c:	d107      	bne.n	802b68e <__ieee754_atan2+0x96>
 802b67e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 802b768 <__ieee754_atan2+0x170>
 802b682:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 802b770 <__ieee754_atan2+0x178>
 802b686:	2d00      	cmp	r5, #0
 802b688:	fe26 7b07 	vselge.f64	d7, d6, d7
 802b68c:	e7d4      	b.n	802b638 <__ieee754_atan2+0x40>
 802b68e:	42ba      	cmp	r2, r7
 802b690:	d120      	bne.n	802b6d4 <__ieee754_atan2+0xdc>
 802b692:	4293      	cmp	r3, r2
 802b694:	d111      	bne.n	802b6ba <__ieee754_atan2+0xc2>
 802b696:	2c02      	cmp	r4, #2
 802b698:	d009      	beq.n	802b6ae <__ieee754_atan2+0xb6>
 802b69a:	2c03      	cmp	r4, #3
 802b69c:	d00a      	beq.n	802b6b4 <__ieee754_atan2+0xbc>
 802b69e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 802b778 <__ieee754_atan2+0x180>
 802b6a2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 802b780 <__ieee754_atan2+0x188>
 802b6a6:	2c01      	cmp	r4, #1
 802b6a8:	fe06 7b07 	vseleq.f64	d7, d6, d7
 802b6ac:	e7c4      	b.n	802b638 <__ieee754_atan2+0x40>
 802b6ae:	ed9f 7b36 	vldr	d7, [pc, #216]	; 802b788 <__ieee754_atan2+0x190>
 802b6b2:	e7c1      	b.n	802b638 <__ieee754_atan2+0x40>
 802b6b4:	ed9f 7b36 	vldr	d7, [pc, #216]	; 802b790 <__ieee754_atan2+0x198>
 802b6b8:	e7be      	b.n	802b638 <__ieee754_atan2+0x40>
 802b6ba:	2c02      	cmp	r4, #2
 802b6bc:	d04d      	beq.n	802b75a <__ieee754_atan2+0x162>
 802b6be:	2c03      	cmp	r4, #3
 802b6c0:	d005      	beq.n	802b6ce <__ieee754_atan2+0xd6>
 802b6c2:	2c01      	cmp	r4, #1
 802b6c4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 802b798 <__ieee754_atan2+0x1a0>
 802b6c8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 802b7a0 <__ieee754_atan2+0x1a8>
 802b6cc:	e7ec      	b.n	802b6a8 <__ieee754_atan2+0xb0>
 802b6ce:	ed9f 7b24 	vldr	d7, [pc, #144]	; 802b760 <__ieee754_atan2+0x168>
 802b6d2:	e7b1      	b.n	802b638 <__ieee754_atan2+0x40>
 802b6d4:	42bb      	cmp	r3, r7
 802b6d6:	d0d2      	beq.n	802b67e <__ieee754_atan2+0x86>
 802b6d8:	1a9b      	subs	r3, r3, r2
 802b6da:	151b      	asrs	r3, r3, #20
 802b6dc:	2b3c      	cmp	r3, #60	; 0x3c
 802b6de:	dc16      	bgt.n	802b70e <__ieee754_atan2+0x116>
 802b6e0:	2800      	cmp	r0, #0
 802b6e2:	da01      	bge.n	802b6e8 <__ieee754_atan2+0xf0>
 802b6e4:	333c      	adds	r3, #60	; 0x3c
 802b6e6:	db17      	blt.n	802b718 <__ieee754_atan2+0x120>
 802b6e8:	ed9d 7b00 	vldr	d7, [sp]
 802b6ec:	ee87 0b01 	vdiv.f64	d0, d7, d1
 802b6f0:	f7ff fbc6 	bl	802ae80 <fabs>
 802b6f4:	f7ff fa8c 	bl	802ac10 <atan>
 802b6f8:	ed8d 0b00 	vstr	d0, [sp]
 802b6fc:	2c01      	cmp	r4, #1
 802b6fe:	d00e      	beq.n	802b71e <__ieee754_atan2+0x126>
 802b700:	2c02      	cmp	r4, #2
 802b702:	d014      	beq.n	802b72e <__ieee754_atan2+0x136>
 802b704:	b9f4      	cbnz	r4, 802b744 <__ieee754_atan2+0x14c>
 802b706:	ed9d 0b00 	vldr	d0, [sp]
 802b70a:	b003      	add	sp, #12
 802b70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b70e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 802b768 <__ieee754_atan2+0x170>
 802b712:	ed8d 7b00 	vstr	d7, [sp]
 802b716:	e7f1      	b.n	802b6fc <__ieee754_atan2+0x104>
 802b718:	ed9f 7b21 	vldr	d7, [pc, #132]	; 802b7a0 <__ieee754_atan2+0x1a8>
 802b71c:	e7f9      	b.n	802b712 <__ieee754_atan2+0x11a>
 802b71e:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b722:	9901      	ldr	r1, [sp, #4]
 802b724:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802b728:	e9cd 2300 	strd	r2, r3, [sp]
 802b72c:	e7eb      	b.n	802b706 <__ieee754_atan2+0x10e>
 802b72e:	ed9d 6b00 	vldr	d6, [sp]
 802b732:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 802b7a8 <__ieee754_atan2+0x1b0>
 802b736:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b73a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 802b7b0 <__ieee754_atan2+0x1b8>
 802b73e:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b742:	e779      	b.n	802b638 <__ieee754_atan2+0x40>
 802b744:	ed9d 6b00 	vldr	d6, [sp]
 802b748:	ed9f 7b17 	vldr	d7, [pc, #92]	; 802b7a8 <__ieee754_atan2+0x1b0>
 802b74c:	ee36 7b47 	vsub.f64	d7, d6, d7
 802b750:	ed9f 6b17 	vldr	d6, [pc, #92]	; 802b7b0 <__ieee754_atan2+0x1b8>
 802b754:	ee37 7b46 	vsub.f64	d7, d7, d6
 802b758:	e76e      	b.n	802b638 <__ieee754_atan2+0x40>
 802b75a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 802b7b0 <__ieee754_atan2+0x1b8>
 802b75e:	e76b      	b.n	802b638 <__ieee754_atan2+0x40>
 802b760:	54442d18 	.word	0x54442d18
 802b764:	c00921fb 	.word	0xc00921fb
 802b768:	54442d18 	.word	0x54442d18
 802b76c:	3ff921fb 	.word	0x3ff921fb
 802b770:	54442d18 	.word	0x54442d18
 802b774:	bff921fb 	.word	0xbff921fb
 802b778:	54442d18 	.word	0x54442d18
 802b77c:	bfe921fb 	.word	0xbfe921fb
 802b780:	54442d18 	.word	0x54442d18
 802b784:	3fe921fb 	.word	0x3fe921fb
 802b788:	7f3321d2 	.word	0x7f3321d2
 802b78c:	4002d97c 	.word	0x4002d97c
 802b790:	7f3321d2 	.word	0x7f3321d2
 802b794:	c002d97c 	.word	0xc002d97c
 802b798:	00000000 	.word	0x00000000
 802b79c:	80000000 	.word	0x80000000
	...
 802b7a8:	33145c07 	.word	0x33145c07
 802b7ac:	3ca1a626 	.word	0x3ca1a626
 802b7b0:	54442d18 	.word	0x54442d18
 802b7b4:	400921fb 	.word	0x400921fb
 802b7b8:	7ff00000 	.word	0x7ff00000

0802b7bc <__ieee754_fmod>:
 802b7bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802b7c0:	ed8d 1b00 	vstr	d1, [sp]
 802b7c4:	e9dd 5600 	ldrd	r5, r6, [sp]
 802b7c8:	f026 4200 	bic.w	r2, r6, #2147483648	; 0x80000000
 802b7cc:	ea52 0305 	orrs.w	r3, r2, r5
 802b7d0:	46ac      	mov	ip, r5
 802b7d2:	d00d      	beq.n	802b7f0 <__ieee754_fmod+0x34>
 802b7d4:	ee10 9a90 	vmov	r9, s1
 802b7d8:	4b7c      	ldr	r3, [pc, #496]	; (802b9cc <__ieee754_fmod+0x210>)
 802b7da:	f029 4100 	bic.w	r1, r9, #2147483648	; 0x80000000
 802b7de:	4299      	cmp	r1, r3
 802b7e0:	dc06      	bgt.n	802b7f0 <__ieee754_fmod+0x34>
 802b7e2:	426b      	negs	r3, r5
 802b7e4:	432b      	orrs	r3, r5
 802b7e6:	487a      	ldr	r0, [pc, #488]	; (802b9d0 <__ieee754_fmod+0x214>)
 802b7e8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 802b7ec:	4283      	cmp	r3, r0
 802b7ee:	d908      	bls.n	802b802 <__ieee754_fmod+0x46>
 802b7f0:	ed9d 7b00 	vldr	d7, [sp]
 802b7f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 802b7f8:	ee87 0b07 	vdiv.f64	d0, d7, d7
 802b7fc:	b003      	add	sp, #12
 802b7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b802:	4291      	cmp	r1, r2
 802b804:	ee10 ea10 	vmov	lr, s0
 802b808:	ee10 7a10 	vmov	r7, s0
 802b80c:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 802b810:	dc0a      	bgt.n	802b828 <__ieee754_fmod+0x6c>
 802b812:	dbf3      	blt.n	802b7fc <__ieee754_fmod+0x40>
 802b814:	45ae      	cmp	lr, r5
 802b816:	d3f1      	bcc.n	802b7fc <__ieee754_fmod+0x40>
 802b818:	d106      	bne.n	802b828 <__ieee754_fmod+0x6c>
 802b81a:	496e      	ldr	r1, [pc, #440]	; (802b9d4 <__ieee754_fmod+0x218>)
 802b81c:	0fe4      	lsrs	r4, r4, #31
 802b81e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 802b822:	ed94 0b00 	vldr	d0, [r4]
 802b826:	e7e9      	b.n	802b7fc <__ieee754_fmod+0x40>
 802b828:	4b6b      	ldr	r3, [pc, #428]	; (802b9d8 <__ieee754_fmod+0x21c>)
 802b82a:	4299      	cmp	r1, r3
 802b82c:	dc50      	bgt.n	802b8d0 <__ieee754_fmod+0x114>
 802b82e:	2900      	cmp	r1, #0
 802b830:	d143      	bne.n	802b8ba <__ieee754_fmod+0xfe>
 802b832:	486a      	ldr	r0, [pc, #424]	; (802b9dc <__ieee754_fmod+0x220>)
 802b834:	46f0      	mov	r8, lr
 802b836:	f1b8 0f00 	cmp.w	r8, #0
 802b83a:	dc3a      	bgt.n	802b8b2 <__ieee754_fmod+0xf6>
 802b83c:	429a      	cmp	r2, r3
 802b83e:	dc5a      	bgt.n	802b8f6 <__ieee754_fmod+0x13a>
 802b840:	2a00      	cmp	r2, #0
 802b842:	d14d      	bne.n	802b8e0 <__ieee754_fmod+0x124>
 802b844:	4b65      	ldr	r3, [pc, #404]	; (802b9dc <__ieee754_fmod+0x220>)
 802b846:	46a8      	mov	r8, r5
 802b848:	f1b8 0f00 	cmp.w	r8, #0
 802b84c:	dc44      	bgt.n	802b8d8 <__ieee754_fmod+0x11c>
 802b84e:	f8df 8190 	ldr.w	r8, [pc, #400]	; 802b9e0 <__ieee754_fmod+0x224>
 802b852:	4540      	cmp	r0, r8
 802b854:	db53      	blt.n	802b8fe <__ieee754_fmod+0x142>
 802b856:	f3c9 0113 	ubfx	r1, r9, #0, #20
 802b85a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802b85e:	f8df e180 	ldr.w	lr, [pc, #384]	; 802b9e0 <__ieee754_fmod+0x224>
 802b862:	4573      	cmp	r3, lr
 802b864:	db5f      	blt.n	802b926 <__ieee754_fmod+0x16a>
 802b866:	f3c6 0613 	ubfx	r6, r6, #0, #20
 802b86a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 802b86e:	1ac0      	subs	r0, r0, r3
 802b870:	1b8a      	subs	r2, r1, r6
 802b872:	eba7 050c 	sub.w	r5, r7, ip
 802b876:	2800      	cmp	r0, #0
 802b878:	d16b      	bne.n	802b952 <__ieee754_fmod+0x196>
 802b87a:	4567      	cmp	r7, ip
 802b87c:	bf38      	it	cc
 802b87e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 802b882:	2a00      	cmp	r2, #0
 802b884:	bfbc      	itt	lt
 802b886:	463d      	movlt	r5, r7
 802b888:	460a      	movlt	r2, r1
 802b88a:	ea52 0105 	orrs.w	r1, r2, r5
 802b88e:	d0c4      	beq.n	802b81a <__ieee754_fmod+0x5e>
 802b890:	4951      	ldr	r1, [pc, #324]	; (802b9d8 <__ieee754_fmod+0x21c>)
 802b892:	428a      	cmp	r2, r1
 802b894:	dd72      	ble.n	802b97c <__ieee754_fmod+0x1c0>
 802b896:	4952      	ldr	r1, [pc, #328]	; (802b9e0 <__ieee754_fmod+0x224>)
 802b898:	428b      	cmp	r3, r1
 802b89a:	db75      	blt.n	802b988 <__ieee754_fmod+0x1cc>
 802b89c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 802b8a0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 802b8a4:	4314      	orrs	r4, r2
 802b8a6:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 802b8aa:	4628      	mov	r0, r5
 802b8ac:	ec41 0b10 	vmov	d0, r0, r1
 802b8b0:	e7a4      	b.n	802b7fc <__ieee754_fmod+0x40>
 802b8b2:	3801      	subs	r0, #1
 802b8b4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802b8b8:	e7bd      	b.n	802b836 <__ieee754_fmod+0x7a>
 802b8ba:	4849      	ldr	r0, [pc, #292]	; (802b9e0 <__ieee754_fmod+0x224>)
 802b8bc:	ea4f 28c1 	mov.w	r8, r1, lsl #11
 802b8c0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802b8c4:	f1b8 0f00 	cmp.w	r8, #0
 802b8c8:	f100 30ff 	add.w	r0, r0, #4294967295
 802b8cc:	dcf8      	bgt.n	802b8c0 <__ieee754_fmod+0x104>
 802b8ce:	e7b5      	b.n	802b83c <__ieee754_fmod+0x80>
 802b8d0:	1508      	asrs	r0, r1, #20
 802b8d2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 802b8d6:	e7b1      	b.n	802b83c <__ieee754_fmod+0x80>
 802b8d8:	3b01      	subs	r3, #1
 802b8da:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802b8de:	e7b3      	b.n	802b848 <__ieee754_fmod+0x8c>
 802b8e0:	4b3f      	ldr	r3, [pc, #252]	; (802b9e0 <__ieee754_fmod+0x224>)
 802b8e2:	ea4f 28c2 	mov.w	r8, r2, lsl #11
 802b8e6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802b8ea:	f1b8 0f00 	cmp.w	r8, #0
 802b8ee:	f103 33ff 	add.w	r3, r3, #4294967295
 802b8f2:	dcf8      	bgt.n	802b8e6 <__ieee754_fmod+0x12a>
 802b8f4:	e7ab      	b.n	802b84e <__ieee754_fmod+0x92>
 802b8f6:	1513      	asrs	r3, r2, #20
 802b8f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802b8fc:	e7a7      	b.n	802b84e <__ieee754_fmod+0x92>
 802b8fe:	eba8 0700 	sub.w	r7, r8, r0
 802b902:	2f1f      	cmp	r7, #31
 802b904:	dc09      	bgt.n	802b91a <__ieee754_fmod+0x15e>
 802b906:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 802b90a:	40b9      	lsls	r1, r7
 802b90c:	fa2e f808 	lsr.w	r8, lr, r8
 802b910:	ea48 0101 	orr.w	r1, r8, r1
 802b914:	fa0e f707 	lsl.w	r7, lr, r7
 802b918:	e7a1      	b.n	802b85e <__ieee754_fmod+0xa2>
 802b91a:	4932      	ldr	r1, [pc, #200]	; (802b9e4 <__ieee754_fmod+0x228>)
 802b91c:	1a09      	subs	r1, r1, r0
 802b91e:	fa0e f101 	lsl.w	r1, lr, r1
 802b922:	2700      	movs	r7, #0
 802b924:	e79b      	b.n	802b85e <__ieee754_fmod+0xa2>
 802b926:	ebae 0c03 	sub.w	ip, lr, r3
 802b92a:	f1bc 0f1f 	cmp.w	ip, #31
 802b92e:	dc09      	bgt.n	802b944 <__ieee754_fmod+0x188>
 802b930:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 802b934:	fa02 f20c 	lsl.w	r2, r2, ip
 802b938:	fa25 f606 	lsr.w	r6, r5, r6
 802b93c:	4316      	orrs	r6, r2
 802b93e:	fa05 fc0c 	lsl.w	ip, r5, ip
 802b942:	e794      	b.n	802b86e <__ieee754_fmod+0xb2>
 802b944:	4e27      	ldr	r6, [pc, #156]	; (802b9e4 <__ieee754_fmod+0x228>)
 802b946:	1af6      	subs	r6, r6, r3
 802b948:	fa05 f606 	lsl.w	r6, r5, r6
 802b94c:	f04f 0c00 	mov.w	ip, #0
 802b950:	e78d      	b.n	802b86e <__ieee754_fmod+0xb2>
 802b952:	4567      	cmp	r7, ip
 802b954:	bf38      	it	cc
 802b956:	f102 32ff 	addcc.w	r2, r2, #4294967295
 802b95a:	2a00      	cmp	r2, #0
 802b95c:	da05      	bge.n	802b96a <__ieee754_fmod+0x1ae>
 802b95e:	0ffa      	lsrs	r2, r7, #31
 802b960:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802b964:	007f      	lsls	r7, r7, #1
 802b966:	3801      	subs	r0, #1
 802b968:	e782      	b.n	802b870 <__ieee754_fmod+0xb4>
 802b96a:	ea52 0105 	orrs.w	r1, r2, r5
 802b96e:	f43f af54 	beq.w	802b81a <__ieee754_fmod+0x5e>
 802b972:	0fe9      	lsrs	r1, r5, #31
 802b974:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 802b978:	006f      	lsls	r7, r5, #1
 802b97a:	e7f4      	b.n	802b966 <__ieee754_fmod+0x1aa>
 802b97c:	0fe8      	lsrs	r0, r5, #31
 802b97e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802b982:	006d      	lsls	r5, r5, #1
 802b984:	3b01      	subs	r3, #1
 802b986:	e784      	b.n	802b892 <__ieee754_fmod+0xd6>
 802b988:	1ac9      	subs	r1, r1, r3
 802b98a:	2914      	cmp	r1, #20
 802b98c:	dc0a      	bgt.n	802b9a4 <__ieee754_fmod+0x1e8>
 802b98e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 802b992:	fa02 f303 	lsl.w	r3, r2, r3
 802b996:	40cd      	lsrs	r5, r1
 802b998:	432b      	orrs	r3, r5
 802b99a:	410a      	asrs	r2, r1
 802b99c:	ea42 0104 	orr.w	r1, r2, r4
 802b9a0:	4618      	mov	r0, r3
 802b9a2:	e783      	b.n	802b8ac <__ieee754_fmod+0xf0>
 802b9a4:	291f      	cmp	r1, #31
 802b9a6:	dc07      	bgt.n	802b9b8 <__ieee754_fmod+0x1fc>
 802b9a8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 802b9ac:	40cd      	lsrs	r5, r1
 802b9ae:	fa02 f303 	lsl.w	r3, r2, r3
 802b9b2:	432b      	orrs	r3, r5
 802b9b4:	4622      	mov	r2, r4
 802b9b6:	e7f1      	b.n	802b99c <__ieee754_fmod+0x1e0>
 802b9b8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 802b9bc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 802b9c0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 802b9c4:	33e2      	adds	r3, #226	; 0xe2
 802b9c6:	fa42 f303 	asr.w	r3, r2, r3
 802b9ca:	e7f3      	b.n	802b9b4 <__ieee754_fmod+0x1f8>
 802b9cc:	7fefffff 	.word	0x7fefffff
 802b9d0:	7ff00000 	.word	0x7ff00000
 802b9d4:	0802fd40 	.word	0x0802fd40
 802b9d8:	000fffff 	.word	0x000fffff
 802b9dc:	fffffbed 	.word	0xfffffbed
 802b9e0:	fffffc02 	.word	0xfffffc02
 802b9e4:	fffffbe2 	.word	0xfffffbe2

0802b9e8 <__ieee754_pow>:
 802b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b9ec:	ec57 6b11 	vmov	r6, r7, d1
 802b9f0:	ed2d 8b02 	vpush	{d8}
 802b9f4:	eeb0 8b40 	vmov.f64	d8, d0
 802b9f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 802b9fc:	ea58 0306 	orrs.w	r3, r8, r6
 802ba00:	b085      	sub	sp, #20
 802ba02:	46b9      	mov	r9, r7
 802ba04:	ee11 2a10 	vmov	r2, s2
 802ba08:	f000 8306 	beq.w	802c018 <__ieee754_pow+0x630>
 802ba0c:	ee18 aa90 	vmov	sl, s17
 802ba10:	4bb9      	ldr	r3, [pc, #740]	; (802bcf8 <__ieee754_pow+0x310>)
 802ba12:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 802ba16:	429c      	cmp	r4, r3
 802ba18:	ee10 ba10 	vmov	fp, s0
 802ba1c:	dc0b      	bgt.n	802ba36 <__ieee754_pow+0x4e>
 802ba1e:	d105      	bne.n	802ba2c <__ieee754_pow+0x44>
 802ba20:	f1bb 0f00 	cmp.w	fp, #0
 802ba24:	d107      	bne.n	802ba36 <__ieee754_pow+0x4e>
 802ba26:	45a0      	cmp	r8, r4
 802ba28:	dc0d      	bgt.n	802ba46 <__ieee754_pow+0x5e>
 802ba2a:	e001      	b.n	802ba30 <__ieee754_pow+0x48>
 802ba2c:	4598      	cmp	r8, r3
 802ba2e:	dc02      	bgt.n	802ba36 <__ieee754_pow+0x4e>
 802ba30:	4598      	cmp	r8, r3
 802ba32:	d110      	bne.n	802ba56 <__ieee754_pow+0x6e>
 802ba34:	b17a      	cbz	r2, 802ba56 <__ieee754_pow+0x6e>
 802ba36:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802ba3a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802ba3e:	ea54 030b 	orrs.w	r3, r4, fp
 802ba42:	f000 82e9 	beq.w	802c018 <__ieee754_pow+0x630>
 802ba46:	48ad      	ldr	r0, [pc, #692]	; (802bcfc <__ieee754_pow+0x314>)
 802ba48:	b005      	add	sp, #20
 802ba4a:	ecbd 8b02 	vpop	{d8}
 802ba4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ba52:	f001 bde9 	b.w	802d628 <nan>
 802ba56:	f1ba 0f00 	cmp.w	sl, #0
 802ba5a:	da4e      	bge.n	802bafa <__ieee754_pow+0x112>
 802ba5c:	4ba8      	ldr	r3, [pc, #672]	; (802bd00 <__ieee754_pow+0x318>)
 802ba5e:	4598      	cmp	r8, r3
 802ba60:	dc49      	bgt.n	802baf6 <__ieee754_pow+0x10e>
 802ba62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802ba66:	4598      	cmp	r8, r3
 802ba68:	dd47      	ble.n	802bafa <__ieee754_pow+0x112>
 802ba6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802ba6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802ba72:	2b14      	cmp	r3, #20
 802ba74:	dd24      	ble.n	802bac0 <__ieee754_pow+0xd8>
 802ba76:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802ba7a:	fa22 f503 	lsr.w	r5, r2, r3
 802ba7e:	fa05 f303 	lsl.w	r3, r5, r3
 802ba82:	4293      	cmp	r3, r2
 802ba84:	d139      	bne.n	802bafa <__ieee754_pow+0x112>
 802ba86:	f005 0501 	and.w	r5, r5, #1
 802ba8a:	f1c5 0502 	rsb	r5, r5, #2
 802ba8e:	2a00      	cmp	r2, #0
 802ba90:	d15a      	bne.n	802bb48 <__ieee754_pow+0x160>
 802ba92:	4b99      	ldr	r3, [pc, #612]	; (802bcf8 <__ieee754_pow+0x310>)
 802ba94:	4598      	cmp	r8, r3
 802ba96:	d122      	bne.n	802bade <__ieee754_pow+0xf6>
 802ba98:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802ba9c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802baa0:	ea53 030b 	orrs.w	r3, r3, fp
 802baa4:	f000 82b8 	beq.w	802c018 <__ieee754_pow+0x630>
 802baa8:	4b96      	ldr	r3, [pc, #600]	; (802bd04 <__ieee754_pow+0x31c>)
 802baaa:	429c      	cmp	r4, r3
 802baac:	dd27      	ble.n	802bafe <__ieee754_pow+0x116>
 802baae:	f1b9 0f00 	cmp.w	r9, #0
 802bab2:	f280 82b4 	bge.w	802c01e <__ieee754_pow+0x636>
 802bab6:	ed9f 7b84 	vldr	d7, [pc, #528]	; 802bcc8 <__ieee754_pow+0x2e0>
 802baba:	ed8d 7b00 	vstr	d7, [sp]
 802babe:	e026      	b.n	802bb0e <__ieee754_pow+0x126>
 802bac0:	2a00      	cmp	r2, #0
 802bac2:	d140      	bne.n	802bb46 <__ieee754_pow+0x15e>
 802bac4:	f1c3 0314 	rsb	r3, r3, #20
 802bac8:	fa48 f503 	asr.w	r5, r8, r3
 802bacc:	fa05 f303 	lsl.w	r3, r5, r3
 802bad0:	4543      	cmp	r3, r8
 802bad2:	f040 82aa 	bne.w	802c02a <__ieee754_pow+0x642>
 802bad6:	f005 0501 	and.w	r5, r5, #1
 802bada:	f1c5 0502 	rsb	r5, r5, #2
 802bade:	4b8a      	ldr	r3, [pc, #552]	; (802bd08 <__ieee754_pow+0x320>)
 802bae0:	4598      	cmp	r8, r3
 802bae2:	d11b      	bne.n	802bb1c <__ieee754_pow+0x134>
 802bae4:	f1b9 0f00 	cmp.w	r9, #0
 802bae8:	f280 829c 	bge.w	802c024 <__ieee754_pow+0x63c>
 802baec:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802baf0:	ee87 7b08 	vdiv.f64	d7, d7, d8
 802baf4:	e7e1      	b.n	802baba <__ieee754_pow+0xd2>
 802baf6:	2502      	movs	r5, #2
 802baf8:	e7c9      	b.n	802ba8e <__ieee754_pow+0xa6>
 802bafa:	2500      	movs	r5, #0
 802bafc:	e7c7      	b.n	802ba8e <__ieee754_pow+0xa6>
 802bafe:	f1b9 0f00 	cmp.w	r9, #0
 802bb02:	dad8      	bge.n	802bab6 <__ieee754_pow+0xce>
 802bb04:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 802bb08:	4633      	mov	r3, r6
 802bb0a:	e9cd 3400 	strd	r3, r4, [sp]
 802bb0e:	ed9d 0b00 	vldr	d0, [sp]
 802bb12:	b005      	add	sp, #20
 802bb14:	ecbd 8b02 	vpop	{d8}
 802bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb1c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802bb20:	d102      	bne.n	802bb28 <__ieee754_pow+0x140>
 802bb22:	ee28 7b08 	vmul.f64	d7, d8, d8
 802bb26:	e7c8      	b.n	802baba <__ieee754_pow+0xd2>
 802bb28:	4b78      	ldr	r3, [pc, #480]	; (802bd0c <__ieee754_pow+0x324>)
 802bb2a:	4599      	cmp	r9, r3
 802bb2c:	d10c      	bne.n	802bb48 <__ieee754_pow+0x160>
 802bb2e:	f1ba 0f00 	cmp.w	sl, #0
 802bb32:	db09      	blt.n	802bb48 <__ieee754_pow+0x160>
 802bb34:	eeb0 0b48 	vmov.f64	d0, d8
 802bb38:	b005      	add	sp, #20
 802bb3a:	ecbd 8b02 	vpop	{d8}
 802bb3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb42:	f000 bc15 	b.w	802c370 <__ieee754_sqrt>
 802bb46:	2500      	movs	r5, #0
 802bb48:	eeb0 0b48 	vmov.f64	d0, d8
 802bb4c:	f7ff f998 	bl	802ae80 <fabs>
 802bb50:	ed8d 0b00 	vstr	d0, [sp]
 802bb54:	f1bb 0f00 	cmp.w	fp, #0
 802bb58:	d128      	bne.n	802bbac <__ieee754_pow+0x1c4>
 802bb5a:	b124      	cbz	r4, 802bb66 <__ieee754_pow+0x17e>
 802bb5c:	4b6a      	ldr	r3, [pc, #424]	; (802bd08 <__ieee754_pow+0x320>)
 802bb5e:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 802bb62:	429a      	cmp	r2, r3
 802bb64:	d122      	bne.n	802bbac <__ieee754_pow+0x1c4>
 802bb66:	f1b9 0f00 	cmp.w	r9, #0
 802bb6a:	da07      	bge.n	802bb7c <__ieee754_pow+0x194>
 802bb6c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802bb70:	ed9d 6b00 	vldr	d6, [sp]
 802bb74:	ee87 7b06 	vdiv.f64	d7, d7, d6
 802bb78:	ed8d 7b00 	vstr	d7, [sp]
 802bb7c:	f1ba 0f00 	cmp.w	sl, #0
 802bb80:	dac5      	bge.n	802bb0e <__ieee754_pow+0x126>
 802bb82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802bb86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802bb8a:	ea54 0305 	orrs.w	r3, r4, r5
 802bb8e:	d106      	bne.n	802bb9e <__ieee754_pow+0x1b6>
 802bb90:	ed9d 7b00 	vldr	d7, [sp]
 802bb94:	ee37 7b47 	vsub.f64	d7, d7, d7
 802bb98:	ee87 7b07 	vdiv.f64	d7, d7, d7
 802bb9c:	e78d      	b.n	802baba <__ieee754_pow+0xd2>
 802bb9e:	2d01      	cmp	r5, #1
 802bba0:	d1b5      	bne.n	802bb0e <__ieee754_pow+0x126>
 802bba2:	ed9d 7b00 	vldr	d7, [sp]
 802bba6:	eeb1 7b47 	vneg.f64	d7, d7
 802bbaa:	e786      	b.n	802baba <__ieee754_pow+0xd2>
 802bbac:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 802bbb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 802bbb4:	ea55 030a 	orrs.w	r3, r5, sl
 802bbb8:	d104      	bne.n	802bbc4 <__ieee754_pow+0x1dc>
 802bbba:	ee38 8b48 	vsub.f64	d8, d8, d8
 802bbbe:	ee88 7b08 	vdiv.f64	d7, d8, d8
 802bbc2:	e77a      	b.n	802baba <__ieee754_pow+0xd2>
 802bbc4:	4b52      	ldr	r3, [pc, #328]	; (802bd10 <__ieee754_pow+0x328>)
 802bbc6:	4598      	cmp	r8, r3
 802bbc8:	f340 80a8 	ble.w	802bd1c <__ieee754_pow+0x334>
 802bbcc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802bbd0:	4598      	cmp	r8, r3
 802bbd2:	dd0b      	ble.n	802bbec <__ieee754_pow+0x204>
 802bbd4:	4b4b      	ldr	r3, [pc, #300]	; (802bd04 <__ieee754_pow+0x31c>)
 802bbd6:	429c      	cmp	r4, r3
 802bbd8:	dc0e      	bgt.n	802bbf8 <__ieee754_pow+0x210>
 802bbda:	f1b9 0f00 	cmp.w	r9, #0
 802bbde:	f6bf af6a 	bge.w	802bab6 <__ieee754_pow+0xce>
 802bbe2:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 802bcd0 <__ieee754_pow+0x2e8>
 802bbe6:	ee27 7b07 	vmul.f64	d7, d7, d7
 802bbea:	e766      	b.n	802baba <__ieee754_pow+0xd2>
 802bbec:	4b49      	ldr	r3, [pc, #292]	; (802bd14 <__ieee754_pow+0x32c>)
 802bbee:	429c      	cmp	r4, r3
 802bbf0:	ddf3      	ble.n	802bbda <__ieee754_pow+0x1f2>
 802bbf2:	4b45      	ldr	r3, [pc, #276]	; (802bd08 <__ieee754_pow+0x320>)
 802bbf4:	429c      	cmp	r4, r3
 802bbf6:	dd03      	ble.n	802bc00 <__ieee754_pow+0x218>
 802bbf8:	f1b9 0f00 	cmp.w	r9, #0
 802bbfc:	dcf1      	bgt.n	802bbe2 <__ieee754_pow+0x1fa>
 802bbfe:	e75a      	b.n	802bab6 <__ieee754_pow+0xce>
 802bc00:	ed9d 7b00 	vldr	d7, [sp]
 802bc04:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802bc08:	ed9f 5b33 	vldr	d5, [pc, #204]	; 802bcd8 <__ieee754_pow+0x2f0>
 802bc0c:	ee37 6b46 	vsub.f64	d6, d7, d6
 802bc10:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 802bc14:	eeb1 3b46 	vneg.f64	d3, d6
 802bc18:	eea3 5b07 	vfma.f64	d5, d3, d7
 802bc1c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802bc20:	eea5 7b46 	vfms.f64	d7, d5, d6
 802bc24:	ee26 5b06 	vmul.f64	d5, d6, d6
 802bc28:	ee27 5b05 	vmul.f64	d5, d7, d5
 802bc2c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 802bce0 <__ieee754_pow+0x2f8>
 802bc30:	ee27 7b45 	vnmul.f64	d7, d7, d5
 802bc34:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 802bce8 <__ieee754_pow+0x300>
 802bc38:	eea6 7b05 	vfma.f64	d7, d6, d5
 802bc3c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 802bcf0 <__ieee754_pow+0x308>
 802bc40:	eeb0 4b47 	vmov.f64	d4, d7
 802bc44:	eea6 4b05 	vfma.f64	d4, d6, d5
 802bc48:	ec53 2b14 	vmov	r2, r3, d4
 802bc4c:	2200      	movs	r2, #0
 802bc4e:	ec43 2b14 	vmov	d4, r2, r3
 802bc52:	eeb0 6b44 	vmov.f64	d6, d4
 802bc56:	eea3 6b05 	vfma.f64	d6, d3, d5
 802bc5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802bc5e:	3d01      	subs	r5, #1
 802bc60:	ea55 030a 	orrs.w	r3, r5, sl
 802bc64:	f04f 0200 	mov.w	r2, #0
 802bc68:	463b      	mov	r3, r7
 802bc6a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 802bc6e:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 802bc72:	ec47 6b15 	vmov	d5, r6, r7
 802bc76:	fe06 8b08 	vseleq.f64	d8, d6, d8
 802bc7a:	ec47 6b13 	vmov	d3, r6, r7
 802bc7e:	ec43 2b16 	vmov	d6, r2, r3
 802bc82:	ee27 7b03 	vmul.f64	d7, d7, d3
 802bc86:	ee35 5b46 	vsub.f64	d5, d5, d6
 802bc8a:	4b23      	ldr	r3, [pc, #140]	; (802bd18 <__ieee754_pow+0x330>)
 802bc8c:	eea5 7b04 	vfma.f64	d7, d5, d4
 802bc90:	ee24 6b06 	vmul.f64	d6, d4, d6
 802bc94:	ee37 5b06 	vadd.f64	d5, d7, d6
 802bc98:	ee15 1a90 	vmov	r1, s11
 802bc9c:	4299      	cmp	r1, r3
 802bc9e:	ee15 2a10 	vmov	r2, s10
 802bca2:	f340 819b 	ble.w	802bfdc <__ieee754_pow+0x5f4>
 802bca6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802bcaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802bcae:	4313      	orrs	r3, r2
 802bcb0:	f000 810a 	beq.w	802bec8 <__ieee754_pow+0x4e0>
 802bcb4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 802bcd0 <__ieee754_pow+0x2e8>
 802bcb8:	ee28 8b07 	vmul.f64	d8, d8, d7
 802bcbc:	ee28 7b07 	vmul.f64	d7, d8, d7
 802bcc0:	e6fb      	b.n	802baba <__ieee754_pow+0xd2>
 802bcc2:	bf00      	nop
 802bcc4:	f3af 8000 	nop.w
	...
 802bcd0:	8800759c 	.word	0x8800759c
 802bcd4:	7e37e43c 	.word	0x7e37e43c
 802bcd8:	55555555 	.word	0x55555555
 802bcdc:	3fd55555 	.word	0x3fd55555
 802bce0:	652b82fe 	.word	0x652b82fe
 802bce4:	3ff71547 	.word	0x3ff71547
 802bce8:	f85ddf44 	.word	0xf85ddf44
 802bcec:	3e54ae0b 	.word	0x3e54ae0b
 802bcf0:	60000000 	.word	0x60000000
 802bcf4:	3ff71547 	.word	0x3ff71547
 802bcf8:	7ff00000 	.word	0x7ff00000
 802bcfc:	08030393 	.word	0x08030393
 802bd00:	433fffff 	.word	0x433fffff
 802bd04:	3fefffff 	.word	0x3fefffff
 802bd08:	3ff00000 	.word	0x3ff00000
 802bd0c:	3fe00000 	.word	0x3fe00000
 802bd10:	41e00000 	.word	0x41e00000
 802bd14:	3feffffe 	.word	0x3feffffe
 802bd18:	408fffff 	.word	0x408fffff
 802bd1c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 802bd20:	f280 80ce 	bge.w	802bec0 <__ieee754_pow+0x4d8>
 802bd24:	ed9d 6b00 	vldr	d6, [sp]
 802bd28:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 802c030 <__ieee754_pow+0x648>
 802bd2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 802bd30:	ed8d 7b00 	vstr	d7, [sp]
 802bd34:	9c01      	ldr	r4, [sp, #4]
 802bd36:	f06f 0334 	mvn.w	r3, #52	; 0x34
 802bd3a:	1521      	asrs	r1, r4, #20
 802bd3c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802bd40:	4419      	add	r1, r3
 802bd42:	4be3      	ldr	r3, [pc, #908]	; (802c0d0 <__ieee754_pow+0x6e8>)
 802bd44:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802bd48:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 802bd4c:	429c      	cmp	r4, r3
 802bd4e:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 802bd52:	dd06      	ble.n	802bd62 <__ieee754_pow+0x37a>
 802bd54:	4bdf      	ldr	r3, [pc, #892]	; (802c0d4 <__ieee754_pow+0x6ec>)
 802bd56:	429c      	cmp	r4, r3
 802bd58:	f340 80b4 	ble.w	802bec4 <__ieee754_pow+0x4dc>
 802bd5c:	3101      	adds	r1, #1
 802bd5e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 802bd62:	2400      	movs	r4, #0
 802bd64:	e9dd 2300 	ldrd	r2, r3, [sp]
 802bd68:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 802bd6c:	4603      	mov	r3, r0
 802bd6e:	ec43 2b17 	vmov	d7, r2, r3
 802bd72:	4bd9      	ldr	r3, [pc, #868]	; (802c0d8 <__ieee754_pow+0x6f0>)
 802bd74:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 802bd78:	4463      	add	r3, ip
 802bd7a:	ed93 5b00 	vldr	d5, [r3]
 802bd7e:	1040      	asrs	r0, r0, #1
 802bd80:	ee37 2b45 	vsub.f64	d2, d7, d5
 802bd84:	ee35 6b07 	vadd.f64	d6, d5, d7
 802bd88:	ee84 1b06 	vdiv.f64	d1, d4, d6
 802bd8c:	ee22 6b01 	vmul.f64	d6, d2, d1
 802bd90:	ed8d 6b00 	vstr	d6, [sp]
 802bd94:	e9dd 8900 	ldrd	r8, r9, [sp]
 802bd98:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 802bd9c:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 802bda0:	f04f 0800 	mov.w	r8, #0
 802bda4:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 802bda8:	2200      	movs	r2, #0
 802bdaa:	ec49 8b14 	vmov	d4, r8, r9
 802bdae:	ec43 2b16 	vmov	d6, r2, r3
 802bdb2:	eeb1 3b44 	vneg.f64	d3, d4
 802bdb6:	eea3 2b06 	vfma.f64	d2, d3, d6
 802bdba:	ee36 6b45 	vsub.f64	d6, d6, d5
 802bdbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 802bdc2:	eea3 2b07 	vfma.f64	d2, d3, d7
 802bdc6:	ed9d 7b00 	vldr	d7, [sp]
 802bdca:	ee22 2b01 	vmul.f64	d2, d2, d1
 802bdce:	ee27 5b07 	vmul.f64	d5, d7, d7
 802bdd2:	ee37 6b04 	vadd.f64	d6, d7, d4
 802bdd6:	ed9f 1b98 	vldr	d1, [pc, #608]	; 802c038 <__ieee754_pow+0x650>
 802bdda:	ee25 0b05 	vmul.f64	d0, d5, d5
 802bdde:	ee26 6b02 	vmul.f64	d6, d6, d2
 802bde2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 802c040 <__ieee754_pow+0x658>
 802bde6:	eea5 7b01 	vfma.f64	d7, d5, d1
 802bdea:	ed9f 1b97 	vldr	d1, [pc, #604]	; 802c048 <__ieee754_pow+0x660>
 802bdee:	eea7 1b05 	vfma.f64	d1, d7, d5
 802bdf2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 802c050 <__ieee754_pow+0x668>
 802bdf6:	eea1 7b05 	vfma.f64	d7, d1, d5
 802bdfa:	ed9f 1b97 	vldr	d1, [pc, #604]	; 802c058 <__ieee754_pow+0x670>
 802bdfe:	eea7 1b05 	vfma.f64	d1, d7, d5
 802be02:	ed9f 7b97 	vldr	d7, [pc, #604]	; 802c060 <__ieee754_pow+0x678>
 802be06:	eea1 7b05 	vfma.f64	d7, d1, d5
 802be0a:	eea0 6b07 	vfma.f64	d6, d0, d7
 802be0e:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 802be12:	eeb0 5b47 	vmov.f64	d5, d7
 802be16:	eea4 5b04 	vfma.f64	d5, d4, d4
 802be1a:	ee35 5b06 	vadd.f64	d5, d5, d6
 802be1e:	ed8d 5b02 	vstr	d5, [sp, #8]
 802be22:	f8cd 8008 	str.w	r8, [sp, #8]
 802be26:	ed9d 5b02 	vldr	d5, [sp, #8]
 802be2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 802be2e:	eea3 7b04 	vfma.f64	d7, d3, d4
 802be32:	ee36 7b47 	vsub.f64	d7, d6, d7
 802be36:	ed9d 6b00 	vldr	d6, [sp]
 802be3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802be3e:	eea2 7b05 	vfma.f64	d7, d2, d5
 802be42:	eeb0 6b47 	vmov.f64	d6, d7
 802be46:	eea4 6b05 	vfma.f64	d6, d4, d5
 802be4a:	ed8d 6b00 	vstr	d6, [sp]
 802be4e:	f8cd 8000 	str.w	r8, [sp]
 802be52:	ed9d 2b00 	vldr	d2, [sp]
 802be56:	eeb0 6b42 	vmov.f64	d6, d2
 802be5a:	eea3 6b05 	vfma.f64	d6, d3, d5
 802be5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 802be62:	ed9f 6b81 	vldr	d6, [pc, #516]	; 802c068 <__ieee754_pow+0x680>
 802be66:	4b9d      	ldr	r3, [pc, #628]	; (802c0dc <__ieee754_pow+0x6f4>)
 802be68:	ee27 7b06 	vmul.f64	d7, d7, d6
 802be6c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 802c070 <__ieee754_pow+0x688>
 802be70:	4463      	add	r3, ip
 802be72:	eea2 7b06 	vfma.f64	d7, d2, d6
 802be76:	ed93 6b00 	vldr	d6, [r3]
 802be7a:	4b99      	ldr	r3, [pc, #612]	; (802c0e0 <__ieee754_pow+0x6f8>)
 802be7c:	ee37 6b06 	vadd.f64	d6, d7, d6
 802be80:	449c      	add	ip, r3
 802be82:	ed9c 1b00 	vldr	d1, [ip]
 802be86:	eeb0 4b46 	vmov.f64	d4, d6
 802be8a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 802c078 <__ieee754_pow+0x690>
 802be8e:	ee07 1a90 	vmov	s15, r1
 802be92:	eea2 4b03 	vfma.f64	d4, d2, d3
 802be96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802be9a:	ee34 4b01 	vadd.f64	d4, d4, d1
 802be9e:	ee34 5b07 	vadd.f64	d5, d4, d7
 802bea2:	ed8d 5b00 	vstr	d5, [sp]
 802bea6:	f8cd 8000 	str.w	r8, [sp]
 802beaa:	ed9d 4b00 	vldr	d4, [sp]
 802beae:	ee34 7b47 	vsub.f64	d7, d4, d7
 802beb2:	ee37 7b41 	vsub.f64	d7, d7, d1
 802beb6:	eea2 7b43 	vfms.f64	d7, d2, d3
 802beba:	ee36 7b47 	vsub.f64	d7, d6, d7
 802bebe:	e6ce      	b.n	802bc5e <__ieee754_pow+0x276>
 802bec0:	2300      	movs	r3, #0
 802bec2:	e73a      	b.n	802bd3a <__ieee754_pow+0x352>
 802bec4:	2401      	movs	r4, #1
 802bec6:	e74d      	b.n	802bd64 <__ieee754_pow+0x37c>
 802bec8:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 802c080 <__ieee754_pow+0x698>
 802becc:	ee35 5b46 	vsub.f64	d5, d5, d6
 802bed0:	ee37 4b04 	vadd.f64	d4, d7, d4
 802bed4:	eeb4 4bc5 	vcmpe.f64	d4, d5
 802bed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802bedc:	f73f aeea 	bgt.w	802bcb4 <__ieee754_pow+0x2cc>
 802bee0:	4a80      	ldr	r2, [pc, #512]	; (802c0e4 <__ieee754_pow+0x6fc>)
 802bee2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802bee6:	4293      	cmp	r3, r2
 802bee8:	f340 808e 	ble.w	802c008 <__ieee754_pow+0x620>
 802beec:	151b      	asrs	r3, r3, #20
 802beee:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 802bef2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802bef6:	4103      	asrs	r3, r0
 802bef8:	440b      	add	r3, r1
 802befa:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802befe:	487a      	ldr	r0, [pc, #488]	; (802c0e8 <__ieee754_pow+0x700>)
 802bf00:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802bf04:	4110      	asrs	r0, r2
 802bf06:	ea23 0500 	bic.w	r5, r3, r0
 802bf0a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 802bf0e:	2400      	movs	r4, #0
 802bf10:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 802bf14:	f1c2 0214 	rsb	r2, r2, #20
 802bf18:	ec45 4b15 	vmov	d5, r4, r5
 802bf1c:	4110      	asrs	r0, r2
 802bf1e:	2900      	cmp	r1, #0
 802bf20:	bfb8      	it	lt
 802bf22:	4240      	neglt	r0, r0
 802bf24:	ee36 6b45 	vsub.f64	d6, d6, d5
 802bf28:	ee36 5b07 	vadd.f64	d5, d6, d7
 802bf2c:	ec53 2b15 	vmov	r2, r3, d5
 802bf30:	2200      	movs	r2, #0
 802bf32:	ec43 2b15 	vmov	d5, r2, r3
 802bf36:	ed9f 4b54 	vldr	d4, [pc, #336]	; 802c088 <__ieee754_pow+0x6a0>
 802bf3a:	ee35 6b46 	vsub.f64	d6, d5, d6
 802bf3e:	ee37 6b46 	vsub.f64	d6, d7, d6
 802bf42:	ed9f 7b53 	vldr	d7, [pc, #332]	; 802c090 <__ieee754_pow+0x6a8>
 802bf46:	ee25 7b07 	vmul.f64	d7, d5, d7
 802bf4a:	eea6 7b04 	vfma.f64	d7, d6, d4
 802bf4e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 802c098 <__ieee754_pow+0x6b0>
 802bf52:	eeb0 4b47 	vmov.f64	d4, d7
 802bf56:	eea5 4b06 	vfma.f64	d4, d5, d6
 802bf5a:	eeb0 3b44 	vmov.f64	d3, d4
 802bf5e:	eea5 3b46 	vfms.f64	d3, d5, d6
 802bf62:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 802c0a0 <__ieee754_pow+0x6b8>
 802bf66:	ee37 7b43 	vsub.f64	d7, d7, d3
 802bf6a:	ee24 6b04 	vmul.f64	d6, d4, d4
 802bf6e:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 802c0a8 <__ieee754_pow+0x6c0>
 802bf72:	eea4 7b07 	vfma.f64	d7, d4, d7
 802bf76:	eea6 3b05 	vfma.f64	d3, d6, d5
 802bf7a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 802c0b0 <__ieee754_pow+0x6c8>
 802bf7e:	eea3 5b06 	vfma.f64	d5, d3, d6
 802bf82:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 802c0b8 <__ieee754_pow+0x6d0>
 802bf86:	eea5 3b06 	vfma.f64	d3, d5, d6
 802bf8a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 802c0c0 <__ieee754_pow+0x6d8>
 802bf8e:	eea3 5b06 	vfma.f64	d5, d3, d6
 802bf92:	eeb0 3b44 	vmov.f64	d3, d4
 802bf96:	eea5 3b46 	vfms.f64	d3, d5, d6
 802bf9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 802bf9e:	eeb0 6b43 	vmov.f64	d6, d3
 802bfa2:	ee24 3b03 	vmul.f64	d3, d4, d3
 802bfa6:	ee36 5b45 	vsub.f64	d5, d6, d5
 802bfaa:	ee83 6b05 	vdiv.f64	d6, d3, d5
 802bfae:	ee36 7b47 	vsub.f64	d7, d6, d7
 802bfb2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802bfb6:	ee37 7b44 	vsub.f64	d7, d7, d4
 802bfba:	ee36 7b47 	vsub.f64	d7, d6, d7
 802bfbe:	ed8d 7b00 	vstr	d7, [sp]
 802bfc2:	9901      	ldr	r1, [sp, #4]
 802bfc4:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 802bfc8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 802bfcc:	da1e      	bge.n	802c00c <__ieee754_pow+0x624>
 802bfce:	eeb0 0b47 	vmov.f64	d0, d7
 802bfd2:	f001 fbbd 	bl	802d750 <scalbn>
 802bfd6:	ee20 7b08 	vmul.f64	d7, d0, d8
 802bfda:	e56e      	b.n	802baba <__ieee754_pow+0xd2>
 802bfdc:	4b43      	ldr	r3, [pc, #268]	; (802c0ec <__ieee754_pow+0x704>)
 802bfde:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 802bfe2:	4298      	cmp	r0, r3
 802bfe4:	f77f af7c 	ble.w	802bee0 <__ieee754_pow+0x4f8>
 802bfe8:	4b41      	ldr	r3, [pc, #260]	; (802c0f0 <__ieee754_pow+0x708>)
 802bfea:	440b      	add	r3, r1
 802bfec:	4313      	orrs	r3, r2
 802bfee:	d002      	beq.n	802bff6 <__ieee754_pow+0x60e>
 802bff0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 802c0c8 <__ieee754_pow+0x6e0>
 802bff4:	e660      	b.n	802bcb8 <__ieee754_pow+0x2d0>
 802bff6:	ee35 5b46 	vsub.f64	d5, d5, d6
 802bffa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802bffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c002:	f6ff af6d 	blt.w	802bee0 <__ieee754_pow+0x4f8>
 802c006:	e7f3      	b.n	802bff0 <__ieee754_pow+0x608>
 802c008:	2000      	movs	r0, #0
 802c00a:	e78d      	b.n	802bf28 <__ieee754_pow+0x540>
 802c00c:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c010:	460b      	mov	r3, r1
 802c012:	ec43 2b10 	vmov	d0, r2, r3
 802c016:	e7de      	b.n	802bfd6 <__ieee754_pow+0x5ee>
 802c018:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802c01c:	e54d      	b.n	802baba <__ieee754_pow+0xd2>
 802c01e:	e9cd 6700 	strd	r6, r7, [sp]
 802c022:	e574      	b.n	802bb0e <__ieee754_pow+0x126>
 802c024:	ed8d 8b00 	vstr	d8, [sp]
 802c028:	e571      	b.n	802bb0e <__ieee754_pow+0x126>
 802c02a:	4615      	mov	r5, r2
 802c02c:	e557      	b.n	802bade <__ieee754_pow+0xf6>
 802c02e:	bf00      	nop
 802c030:	00000000 	.word	0x00000000
 802c034:	43400000 	.word	0x43400000
 802c038:	4a454eef 	.word	0x4a454eef
 802c03c:	3fca7e28 	.word	0x3fca7e28
 802c040:	93c9db65 	.word	0x93c9db65
 802c044:	3fcd864a 	.word	0x3fcd864a
 802c048:	a91d4101 	.word	0xa91d4101
 802c04c:	3fd17460 	.word	0x3fd17460
 802c050:	518f264d 	.word	0x518f264d
 802c054:	3fd55555 	.word	0x3fd55555
 802c058:	db6fabff 	.word	0xdb6fabff
 802c05c:	3fdb6db6 	.word	0x3fdb6db6
 802c060:	33333303 	.word	0x33333303
 802c064:	3fe33333 	.word	0x3fe33333
 802c068:	dc3a03fd 	.word	0xdc3a03fd
 802c06c:	3feec709 	.word	0x3feec709
 802c070:	145b01f5 	.word	0x145b01f5
 802c074:	be3e2fe0 	.word	0xbe3e2fe0
 802c078:	e0000000 	.word	0xe0000000
 802c07c:	3feec709 	.word	0x3feec709
 802c080:	652b82fe 	.word	0x652b82fe
 802c084:	3c971547 	.word	0x3c971547
 802c088:	fefa39ef 	.word	0xfefa39ef
 802c08c:	3fe62e42 	.word	0x3fe62e42
 802c090:	0ca86c39 	.word	0x0ca86c39
 802c094:	be205c61 	.word	0xbe205c61
 802c098:	00000000 	.word	0x00000000
 802c09c:	3fe62e43 	.word	0x3fe62e43
 802c0a0:	72bea4d0 	.word	0x72bea4d0
 802c0a4:	3e663769 	.word	0x3e663769
 802c0a8:	c5d26bf1 	.word	0xc5d26bf1
 802c0ac:	bebbbd41 	.word	0xbebbbd41
 802c0b0:	af25de2c 	.word	0xaf25de2c
 802c0b4:	3f11566a 	.word	0x3f11566a
 802c0b8:	16bebd93 	.word	0x16bebd93
 802c0bc:	bf66c16c 	.word	0xbf66c16c
 802c0c0:	5555553e 	.word	0x5555553e
 802c0c4:	3fc55555 	.word	0x3fc55555
 802c0c8:	c2f8f359 	.word	0xc2f8f359
 802c0cc:	01a56e1f 	.word	0x01a56e1f
 802c0d0:	0003988e 	.word	0x0003988e
 802c0d4:	000bb679 	.word	0x000bb679
 802c0d8:	0802fd50 	.word	0x0802fd50
 802c0dc:	0802fd70 	.word	0x0802fd70
 802c0e0:	0802fd60 	.word	0x0802fd60
 802c0e4:	3fe00000 	.word	0x3fe00000
 802c0e8:	000fffff 	.word	0x000fffff
 802c0ec:	4090cbff 	.word	0x4090cbff
 802c0f0:	3f6f3400 	.word	0x3f6f3400
 802c0f4:	00000000 	.word	0x00000000

0802c0f8 <__ieee754_rem_pio2>:
 802c0f8:	b570      	push	{r4, r5, r6, lr}
 802c0fa:	eeb0 7b40 	vmov.f64	d7, d0
 802c0fe:	ee17 5a90 	vmov	r5, s15
 802c102:	4b95      	ldr	r3, [pc, #596]	; (802c358 <__ieee754_rem_pio2+0x260>)
 802c104:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802c108:	429e      	cmp	r6, r3
 802c10a:	b088      	sub	sp, #32
 802c10c:	4604      	mov	r4, r0
 802c10e:	dc07      	bgt.n	802c120 <__ieee754_rem_pio2+0x28>
 802c110:	2200      	movs	r2, #0
 802c112:	2300      	movs	r3, #0
 802c114:	ed84 0b00 	vstr	d0, [r4]
 802c118:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802c11c:	2000      	movs	r0, #0
 802c11e:	e01b      	b.n	802c158 <__ieee754_rem_pio2+0x60>
 802c120:	4b8e      	ldr	r3, [pc, #568]	; (802c35c <__ieee754_rem_pio2+0x264>)
 802c122:	429e      	cmp	r6, r3
 802c124:	dc3b      	bgt.n	802c19e <__ieee754_rem_pio2+0xa6>
 802c126:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 802c12a:	2d00      	cmp	r5, #0
 802c12c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 802c318 <__ieee754_rem_pio2+0x220>
 802c130:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 802c134:	dd19      	ble.n	802c16a <__ieee754_rem_pio2+0x72>
 802c136:	ee30 7b46 	vsub.f64	d7, d0, d6
 802c13a:	429e      	cmp	r6, r3
 802c13c:	d00e      	beq.n	802c15c <__ieee754_rem_pio2+0x64>
 802c13e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 802c320 <__ieee754_rem_pio2+0x228>
 802c142:	ee37 5b46 	vsub.f64	d5, d7, d6
 802c146:	ee37 7b45 	vsub.f64	d7, d7, d5
 802c14a:	ed84 5b00 	vstr	d5, [r4]
 802c14e:	ee37 7b46 	vsub.f64	d7, d7, d6
 802c152:	ed84 7b02 	vstr	d7, [r4, #8]
 802c156:	2001      	movs	r0, #1
 802c158:	b008      	add	sp, #32
 802c15a:	bd70      	pop	{r4, r5, r6, pc}
 802c15c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 802c328 <__ieee754_rem_pio2+0x230>
 802c160:	ee37 7b46 	vsub.f64	d7, d7, d6
 802c164:	ed9f 6b72 	vldr	d6, [pc, #456]	; 802c330 <__ieee754_rem_pio2+0x238>
 802c168:	e7eb      	b.n	802c142 <__ieee754_rem_pio2+0x4a>
 802c16a:	429e      	cmp	r6, r3
 802c16c:	ee30 7b06 	vadd.f64	d7, d0, d6
 802c170:	d00e      	beq.n	802c190 <__ieee754_rem_pio2+0x98>
 802c172:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 802c320 <__ieee754_rem_pio2+0x228>
 802c176:	ee37 5b06 	vadd.f64	d5, d7, d6
 802c17a:	ee37 7b45 	vsub.f64	d7, d7, d5
 802c17e:	ed84 5b00 	vstr	d5, [r4]
 802c182:	ee37 7b06 	vadd.f64	d7, d7, d6
 802c186:	f04f 30ff 	mov.w	r0, #4294967295
 802c18a:	ed84 7b02 	vstr	d7, [r4, #8]
 802c18e:	e7e3      	b.n	802c158 <__ieee754_rem_pio2+0x60>
 802c190:	ed9f 6b65 	vldr	d6, [pc, #404]	; 802c328 <__ieee754_rem_pio2+0x230>
 802c194:	ee37 7b06 	vadd.f64	d7, d7, d6
 802c198:	ed9f 6b65 	vldr	d6, [pc, #404]	; 802c330 <__ieee754_rem_pio2+0x238>
 802c19c:	e7eb      	b.n	802c176 <__ieee754_rem_pio2+0x7e>
 802c19e:	4b70      	ldr	r3, [pc, #448]	; (802c360 <__ieee754_rem_pio2+0x268>)
 802c1a0:	429e      	cmp	r6, r3
 802c1a2:	dc6c      	bgt.n	802c27e <__ieee754_rem_pio2+0x186>
 802c1a4:	f7fe fe6c 	bl	802ae80 <fabs>
 802c1a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802c1ac:	ed9f 6b62 	vldr	d6, [pc, #392]	; 802c338 <__ieee754_rem_pio2+0x240>
 802c1b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 802c1b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802c1b8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802c1bc:	ee17 0a90 	vmov	r0, s15
 802c1c0:	eeb1 5b44 	vneg.f64	d5, d4
 802c1c4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 802c318 <__ieee754_rem_pio2+0x220>
 802c1c8:	eea5 0b07 	vfma.f64	d0, d5, d7
 802c1cc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 802c320 <__ieee754_rem_pio2+0x228>
 802c1d0:	281f      	cmp	r0, #31
 802c1d2:	ee24 7b07 	vmul.f64	d7, d4, d7
 802c1d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 802c1da:	dc08      	bgt.n	802c1ee <__ieee754_rem_pio2+0xf6>
 802c1dc:	1e42      	subs	r2, r0, #1
 802c1de:	4b61      	ldr	r3, [pc, #388]	; (802c364 <__ieee754_rem_pio2+0x26c>)
 802c1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802c1e4:	42b3      	cmp	r3, r6
 802c1e6:	d002      	beq.n	802c1ee <__ieee754_rem_pio2+0xf6>
 802c1e8:	ed84 6b00 	vstr	d6, [r4]
 802c1ec:	e022      	b.n	802c234 <__ieee754_rem_pio2+0x13c>
 802c1ee:	ee16 3a90 	vmov	r3, s13
 802c1f2:	1536      	asrs	r6, r6, #20
 802c1f4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 802c1f8:	1af3      	subs	r3, r6, r3
 802c1fa:	2b10      	cmp	r3, #16
 802c1fc:	ddf4      	ble.n	802c1e8 <__ieee754_rem_pio2+0xf0>
 802c1fe:	eeb0 6b40 	vmov.f64	d6, d0
 802c202:	ed9f 3b49 	vldr	d3, [pc, #292]	; 802c328 <__ieee754_rem_pio2+0x230>
 802c206:	eea5 6b03 	vfma.f64	d6, d5, d3
 802c20a:	ee30 7b46 	vsub.f64	d7, d0, d6
 802c20e:	eea5 7b03 	vfma.f64	d7, d5, d3
 802c212:	ed9f 3b47 	vldr	d3, [pc, #284]	; 802c330 <__ieee754_rem_pio2+0x238>
 802c216:	ee94 7b03 	vfnms.f64	d7, d4, d3
 802c21a:	ee36 3b47 	vsub.f64	d3, d6, d7
 802c21e:	ee13 3a90 	vmov	r3, s7
 802c222:	f3c3 530a 	ubfx	r3, r3, #20, #11
 802c226:	1af6      	subs	r6, r6, r3
 802c228:	2e31      	cmp	r6, #49	; 0x31
 802c22a:	dc17      	bgt.n	802c25c <__ieee754_rem_pio2+0x164>
 802c22c:	eeb0 0b46 	vmov.f64	d0, d6
 802c230:	ed84 3b00 	vstr	d3, [r4]
 802c234:	ed94 6b00 	vldr	d6, [r4]
 802c238:	2d00      	cmp	r5, #0
 802c23a:	ee30 0b46 	vsub.f64	d0, d0, d6
 802c23e:	ee30 7b47 	vsub.f64	d7, d0, d7
 802c242:	ed84 7b02 	vstr	d7, [r4, #8]
 802c246:	da87      	bge.n	802c158 <__ieee754_rem_pio2+0x60>
 802c248:	eeb1 6b46 	vneg.f64	d6, d6
 802c24c:	ed84 6b00 	vstr	d6, [r4]
 802c250:	eeb1 7b47 	vneg.f64	d7, d7
 802c254:	4240      	negs	r0, r0
 802c256:	ed84 7b02 	vstr	d7, [r4, #8]
 802c25a:	e77d      	b.n	802c158 <__ieee754_rem_pio2+0x60>
 802c25c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 802c340 <__ieee754_rem_pio2+0x248>
 802c260:	eeb0 0b46 	vmov.f64	d0, d6
 802c264:	eea5 0b03 	vfma.f64	d0, d5, d3
 802c268:	ee36 7b40 	vsub.f64	d7, d6, d0
 802c26c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 802c348 <__ieee754_rem_pio2+0x250>
 802c270:	eea5 7b03 	vfma.f64	d7, d5, d3
 802c274:	ee94 7b06 	vfnms.f64	d7, d4, d6
 802c278:	ee30 6b47 	vsub.f64	d6, d0, d7
 802c27c:	e7b4      	b.n	802c1e8 <__ieee754_rem_pio2+0xf0>
 802c27e:	4b3a      	ldr	r3, [pc, #232]	; (802c368 <__ieee754_rem_pio2+0x270>)
 802c280:	429e      	cmp	r6, r3
 802c282:	dd06      	ble.n	802c292 <__ieee754_rem_pio2+0x19a>
 802c284:	ee30 7b40 	vsub.f64	d7, d0, d0
 802c288:	ed80 7b02 	vstr	d7, [r0, #8]
 802c28c:	ed80 7b00 	vstr	d7, [r0]
 802c290:	e744      	b.n	802c11c <__ieee754_rem_pio2+0x24>
 802c292:	1532      	asrs	r2, r6, #20
 802c294:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 802c298:	ee10 0a10 	vmov	r0, s0
 802c29c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 802c2a0:	ec41 0b17 	vmov	d7, r0, r1
 802c2a4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 802c2a8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 802c350 <__ieee754_rem_pio2+0x258>
 802c2ac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 802c2b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 802c2b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 802c2b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 802c2bc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 802c2c0:	a908      	add	r1, sp, #32
 802c2c2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 802c2c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 802c2ca:	ed8d 6b04 	vstr	d6, [sp, #16]
 802c2ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 802c2d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 802c2d6:	2303      	movs	r3, #3
 802c2d8:	ed31 7b02 	vldmdb	r1!, {d7}
 802c2dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802c2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c2e4:	f103 30ff 	add.w	r0, r3, #4294967295
 802c2e8:	d013      	beq.n	802c312 <__ieee754_rem_pio2+0x21a>
 802c2ea:	4920      	ldr	r1, [pc, #128]	; (802c36c <__ieee754_rem_pio2+0x274>)
 802c2ec:	9101      	str	r1, [sp, #4]
 802c2ee:	2102      	movs	r1, #2
 802c2f0:	9100      	str	r1, [sp, #0]
 802c2f2:	a802      	add	r0, sp, #8
 802c2f4:	4621      	mov	r1, r4
 802c2f6:	f000 fb6f 	bl	802c9d8 <__kernel_rem_pio2>
 802c2fa:	2d00      	cmp	r5, #0
 802c2fc:	f6bf af2c 	bge.w	802c158 <__ieee754_rem_pio2+0x60>
 802c300:	ed94 7b00 	vldr	d7, [r4]
 802c304:	eeb1 7b47 	vneg.f64	d7, d7
 802c308:	ed84 7b00 	vstr	d7, [r4]
 802c30c:	ed94 7b02 	vldr	d7, [r4, #8]
 802c310:	e79e      	b.n	802c250 <__ieee754_rem_pio2+0x158>
 802c312:	4603      	mov	r3, r0
 802c314:	e7e0      	b.n	802c2d8 <__ieee754_rem_pio2+0x1e0>
 802c316:	bf00      	nop
 802c318:	54400000 	.word	0x54400000
 802c31c:	3ff921fb 	.word	0x3ff921fb
 802c320:	1a626331 	.word	0x1a626331
 802c324:	3dd0b461 	.word	0x3dd0b461
 802c328:	1a600000 	.word	0x1a600000
 802c32c:	3dd0b461 	.word	0x3dd0b461
 802c330:	2e037073 	.word	0x2e037073
 802c334:	3ba3198a 	.word	0x3ba3198a
 802c338:	6dc9c883 	.word	0x6dc9c883
 802c33c:	3fe45f30 	.word	0x3fe45f30
 802c340:	2e000000 	.word	0x2e000000
 802c344:	3ba3198a 	.word	0x3ba3198a
 802c348:	252049c1 	.word	0x252049c1
 802c34c:	397b839a 	.word	0x397b839a
 802c350:	00000000 	.word	0x00000000
 802c354:	41700000 	.word	0x41700000
 802c358:	3fe921fb 	.word	0x3fe921fb
 802c35c:	4002d97b 	.word	0x4002d97b
 802c360:	413921fb 	.word	0x413921fb
 802c364:	0802fd80 	.word	0x0802fd80
 802c368:	7fefffff 	.word	0x7fefffff
 802c36c:	0802fe00 	.word	0x0802fe00

0802c370 <__ieee754_sqrt>:
 802c370:	eeb1 0bc0 	vsqrt.f64	d0, d0
 802c374:	4770      	bx	lr
	...

0802c378 <__ieee754_asinf>:
 802c378:	b538      	push	{r3, r4, r5, lr}
 802c37a:	ee10 5a10 	vmov	r5, s0
 802c37e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802c382:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 802c386:	ed2d 8b04 	vpush	{d8-d9}
 802c38a:	d10c      	bne.n	802c3a6 <__ieee754_asinf+0x2e>
 802c38c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 802c508 <__ieee754_asinf+0x190>
 802c390:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 802c50c <__ieee754_asinf+0x194>
 802c394:	ee60 7a27 	vmul.f32	s15, s0, s15
 802c398:	eee0 7a07 	vfma.f32	s15, s0, s14
 802c39c:	eeb0 0a67 	vmov.f32	s0, s15
 802c3a0:	ecbd 8b04 	vpop	{d8-d9}
 802c3a4:	bd38      	pop	{r3, r4, r5, pc}
 802c3a6:	dd04      	ble.n	802c3b2 <__ieee754_asinf+0x3a>
 802c3a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 802c3ac:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 802c3b0:	e7f6      	b.n	802c3a0 <__ieee754_asinf+0x28>
 802c3b2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 802c3b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 802c3ba:	da0b      	bge.n	802c3d4 <__ieee754_asinf+0x5c>
 802c3bc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 802c3c0:	da52      	bge.n	802c468 <__ieee754_asinf+0xf0>
 802c3c2:	eddf 7a53 	vldr	s15, [pc, #332]	; 802c510 <__ieee754_asinf+0x198>
 802c3c6:	ee70 7a27 	vadd.f32	s15, s0, s15
 802c3ca:	eef4 7ae8 	vcmpe.f32	s15, s17
 802c3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c3d2:	dce5      	bgt.n	802c3a0 <__ieee754_asinf+0x28>
 802c3d4:	f001 fb0c 	bl	802d9f0 <fabsf>
 802c3d8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 802c3dc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 802c3e0:	ee20 8a08 	vmul.f32	s16, s0, s16
 802c3e4:	eddf 7a4b 	vldr	s15, [pc, #300]	; 802c514 <__ieee754_asinf+0x19c>
 802c3e8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 802c518 <__ieee754_asinf+0x1a0>
 802c3ec:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 802c51c <__ieee754_asinf+0x1a4>
 802c3f0:	eea8 7a27 	vfma.f32	s14, s16, s15
 802c3f4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 802c520 <__ieee754_asinf+0x1a8>
 802c3f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 802c3fc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802c524 <__ieee754_asinf+0x1ac>
 802c400:	eea7 7a88 	vfma.f32	s14, s15, s16
 802c404:	eddf 7a48 	vldr	s15, [pc, #288]	; 802c528 <__ieee754_asinf+0x1b0>
 802c408:	eee7 7a08 	vfma.f32	s15, s14, s16
 802c40c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 802c52c <__ieee754_asinf+0x1b4>
 802c410:	eea7 9a88 	vfma.f32	s18, s15, s16
 802c414:	eddf 7a46 	vldr	s15, [pc, #280]	; 802c530 <__ieee754_asinf+0x1b8>
 802c418:	eee8 7a07 	vfma.f32	s15, s16, s14
 802c41c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 802c534 <__ieee754_asinf+0x1bc>
 802c420:	eea7 7a88 	vfma.f32	s14, s15, s16
 802c424:	eddf 7a44 	vldr	s15, [pc, #272]	; 802c538 <__ieee754_asinf+0x1c0>
 802c428:	eee7 7a08 	vfma.f32	s15, s14, s16
 802c42c:	eeb0 0a48 	vmov.f32	s0, s16
 802c430:	eee7 8a88 	vfma.f32	s17, s15, s16
 802c434:	f000 fa5e 	bl	802c8f4 <__ieee754_sqrtf>
 802c438:	4b40      	ldr	r3, [pc, #256]	; (802c53c <__ieee754_asinf+0x1c4>)
 802c43a:	ee29 9a08 	vmul.f32	s18, s18, s16
 802c43e:	429c      	cmp	r4, r3
 802c440:	ee89 6a28 	vdiv.f32	s12, s18, s17
 802c444:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802c448:	dd3d      	ble.n	802c4c6 <__ieee754_asinf+0x14e>
 802c44a:	eea0 0a06 	vfma.f32	s0, s0, s12
 802c44e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 802c540 <__ieee754_asinf+0x1c8>
 802c452:	eee0 7a07 	vfma.f32	s15, s0, s14
 802c456:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 802c50c <__ieee754_asinf+0x194>
 802c45a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c45e:	2d00      	cmp	r5, #0
 802c460:	bfd8      	it	le
 802c462:	eeb1 0a40 	vnegle.f32	s0, s0
 802c466:	e79b      	b.n	802c3a0 <__ieee754_asinf+0x28>
 802c468:	ee60 7a00 	vmul.f32	s15, s0, s0
 802c46c:	eddf 6a29 	vldr	s13, [pc, #164]	; 802c514 <__ieee754_asinf+0x19c>
 802c470:	ed9f 7a29 	vldr	s14, [pc, #164]	; 802c518 <__ieee754_asinf+0x1a0>
 802c474:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 802c52c <__ieee754_asinf+0x1b4>
 802c478:	eea7 7aa6 	vfma.f32	s14, s15, s13
 802c47c:	eddf 6a28 	vldr	s13, [pc, #160]	; 802c520 <__ieee754_asinf+0x1a8>
 802c480:	eee7 6a27 	vfma.f32	s13, s14, s15
 802c484:	ed9f 7a27 	vldr	s14, [pc, #156]	; 802c524 <__ieee754_asinf+0x1ac>
 802c488:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802c48c:	eddf 6a26 	vldr	s13, [pc, #152]	; 802c528 <__ieee754_asinf+0x1b0>
 802c490:	eee7 6a27 	vfma.f32	s13, s14, s15
 802c494:	ed9f 7a21 	vldr	s14, [pc, #132]	; 802c51c <__ieee754_asinf+0x1a4>
 802c498:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802c49c:	eddf 6a24 	vldr	s13, [pc, #144]	; 802c530 <__ieee754_asinf+0x1b8>
 802c4a0:	eee7 6a86 	vfma.f32	s13, s15, s12
 802c4a4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 802c534 <__ieee754_asinf+0x1bc>
 802c4a8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802c4ac:	eddf 6a22 	vldr	s13, [pc, #136]	; 802c538 <__ieee754_asinf+0x1c0>
 802c4b0:	eee6 6a27 	vfma.f32	s13, s12, s15
 802c4b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 802c4b8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 802c4bc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 802c4c0:	eea0 0a27 	vfma.f32	s0, s0, s15
 802c4c4:	e76c      	b.n	802c3a0 <__ieee754_asinf+0x28>
 802c4c6:	ee10 3a10 	vmov	r3, s0
 802c4ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802c4ce:	f023 030f 	bic.w	r3, r3, #15
 802c4d2:	ee07 3a90 	vmov	s15, r3
 802c4d6:	eef1 6a67 	vneg.f32	s13, s15
 802c4da:	eea6 8aa7 	vfma.f32	s16, s13, s15
 802c4de:	ee70 5a00 	vadd.f32	s11, s0, s0
 802c4e2:	ee37 0a80 	vadd.f32	s0, s15, s0
 802c4e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 802c508 <__ieee754_asinf+0x190>
 802c4ea:	ee88 5a00 	vdiv.f32	s10, s16, s0
 802c4ee:	ed9f 0a15 	vldr	s0, [pc, #84]	; 802c544 <__ieee754_asinf+0x1cc>
 802c4f2:	eee5 7a47 	vfms.f32	s15, s10, s14
 802c4f6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 802c4fa:	eeb0 6a40 	vmov.f32	s12, s0
 802c4fe:	eea6 6a87 	vfma.f32	s12, s13, s14
 802c502:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802c506:	e7a8      	b.n	802c45a <__ieee754_asinf+0xe2>
 802c508:	b33bbd2e 	.word	0xb33bbd2e
 802c50c:	3fc90fdb 	.word	0x3fc90fdb
 802c510:	7149f2ca 	.word	0x7149f2ca
 802c514:	3811ef08 	.word	0x3811ef08
 802c518:	3a4f7f04 	.word	0x3a4f7f04
 802c51c:	3e2aaaab 	.word	0x3e2aaaab
 802c520:	bd241146 	.word	0xbd241146
 802c524:	3e4e0aa8 	.word	0x3e4e0aa8
 802c528:	bea6b090 	.word	0xbea6b090
 802c52c:	3d9dc62e 	.word	0x3d9dc62e
 802c530:	bf303361 	.word	0xbf303361
 802c534:	4001572d 	.word	0x4001572d
 802c538:	c019d139 	.word	0xc019d139
 802c53c:	3f799999 	.word	0x3f799999
 802c540:	333bbd2e 	.word	0x333bbd2e
 802c544:	3f490fdb 	.word	0x3f490fdb

0802c548 <__ieee754_atan2f>:
 802c548:	ee10 2a90 	vmov	r2, s1
 802c54c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 802c550:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802c554:	b510      	push	{r4, lr}
 802c556:	eef0 7a40 	vmov.f32	s15, s0
 802c55a:	dc06      	bgt.n	802c56a <__ieee754_atan2f+0x22>
 802c55c:	ee10 0a10 	vmov	r0, s0
 802c560:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 802c564:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802c568:	dd04      	ble.n	802c574 <__ieee754_atan2f+0x2c>
 802c56a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802c56e:	eeb0 0a67 	vmov.f32	s0, s15
 802c572:	bd10      	pop	{r4, pc}
 802c574:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 802c578:	d103      	bne.n	802c582 <__ieee754_atan2f+0x3a>
 802c57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c57e:	f001 b965 	b.w	802d84c <atanf>
 802c582:	1794      	asrs	r4, r2, #30
 802c584:	f004 0402 	and.w	r4, r4, #2
 802c588:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802c58c:	b93b      	cbnz	r3, 802c59e <__ieee754_atan2f+0x56>
 802c58e:	2c02      	cmp	r4, #2
 802c590:	d06b      	beq.n	802c66a <__ieee754_atan2f+0x122>
 802c592:	ed9f 7a37 	vldr	s14, [pc, #220]	; 802c670 <__ieee754_atan2f+0x128>
 802c596:	2c03      	cmp	r4, #3
 802c598:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802c59c:	e7e7      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c59e:	b939      	cbnz	r1, 802c5b0 <__ieee754_atan2f+0x68>
 802c5a0:	eddf 7a34 	vldr	s15, [pc, #208]	; 802c674 <__ieee754_atan2f+0x12c>
 802c5a4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 802c678 <__ieee754_atan2f+0x130>
 802c5a8:	2800      	cmp	r0, #0
 802c5aa:	fe67 7a87 	vselge.f32	s15, s15, s14
 802c5ae:	e7de      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c5b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802c5b4:	d121      	bne.n	802c5fa <__ieee754_atan2f+0xb2>
 802c5b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802c5ba:	d111      	bne.n	802c5e0 <__ieee754_atan2f+0x98>
 802c5bc:	2c02      	cmp	r4, #2
 802c5be:	d009      	beq.n	802c5d4 <__ieee754_atan2f+0x8c>
 802c5c0:	2c03      	cmp	r4, #3
 802c5c2:	d00a      	beq.n	802c5da <__ieee754_atan2f+0x92>
 802c5c4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 802c67c <__ieee754_atan2f+0x134>
 802c5c8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 802c680 <__ieee754_atan2f+0x138>
 802c5cc:	2c01      	cmp	r4, #1
 802c5ce:	fe47 7a87 	vseleq.f32	s15, s15, s14
 802c5d2:	e7cc      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c5d4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802c684 <__ieee754_atan2f+0x13c>
 802c5d8:	e7c9      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c5da:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802c688 <__ieee754_atan2f+0x140>
 802c5de:	e7c6      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c5e0:	2c02      	cmp	r4, #2
 802c5e2:	d042      	beq.n	802c66a <__ieee754_atan2f+0x122>
 802c5e4:	2c03      	cmp	r4, #3
 802c5e6:	d005      	beq.n	802c5f4 <__ieee754_atan2f+0xac>
 802c5e8:	2c01      	cmp	r4, #1
 802c5ea:	eddf 7a28 	vldr	s15, [pc, #160]	; 802c68c <__ieee754_atan2f+0x144>
 802c5ee:	ed9f 7a28 	vldr	s14, [pc, #160]	; 802c690 <__ieee754_atan2f+0x148>
 802c5f2:	e7ec      	b.n	802c5ce <__ieee754_atan2f+0x86>
 802c5f4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802c670 <__ieee754_atan2f+0x128>
 802c5f8:	e7b9      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c5fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802c5fe:	d0cf      	beq.n	802c5a0 <__ieee754_atan2f+0x58>
 802c600:	1a5b      	subs	r3, r3, r1
 802c602:	15db      	asrs	r3, r3, #23
 802c604:	2b3c      	cmp	r3, #60	; 0x3c
 802c606:	dc1a      	bgt.n	802c63e <__ieee754_atan2f+0xf6>
 802c608:	2a00      	cmp	r2, #0
 802c60a:	da01      	bge.n	802c610 <__ieee754_atan2f+0xc8>
 802c60c:	333c      	adds	r3, #60	; 0x3c
 802c60e:	db19      	blt.n	802c644 <__ieee754_atan2f+0xfc>
 802c610:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802c614:	f001 f9ec 	bl	802d9f0 <fabsf>
 802c618:	f001 f918 	bl	802d84c <atanf>
 802c61c:	eef0 7a40 	vmov.f32	s15, s0
 802c620:	2c01      	cmp	r4, #1
 802c622:	d012      	beq.n	802c64a <__ieee754_atan2f+0x102>
 802c624:	2c02      	cmp	r4, #2
 802c626:	d017      	beq.n	802c658 <__ieee754_atan2f+0x110>
 802c628:	2c00      	cmp	r4, #0
 802c62a:	d0a0      	beq.n	802c56e <__ieee754_atan2f+0x26>
 802c62c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 802c694 <__ieee754_atan2f+0x14c>
 802c630:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c634:	ed9f 7a18 	vldr	s14, [pc, #96]	; 802c698 <__ieee754_atan2f+0x150>
 802c638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c63c:	e797      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c63e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802c674 <__ieee754_atan2f+0x12c>
 802c642:	e7ed      	b.n	802c620 <__ieee754_atan2f+0xd8>
 802c644:	eddf 7a12 	vldr	s15, [pc, #72]	; 802c690 <__ieee754_atan2f+0x148>
 802c648:	e7ea      	b.n	802c620 <__ieee754_atan2f+0xd8>
 802c64a:	ee17 3a90 	vmov	r3, s15
 802c64e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802c652:	ee07 3a90 	vmov	s15, r3
 802c656:	e78a      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c658:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 802c694 <__ieee754_atan2f+0x14c>
 802c65c:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c660:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 802c698 <__ieee754_atan2f+0x150>
 802c664:	ee77 7a67 	vsub.f32	s15, s14, s15
 802c668:	e781      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c66a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 802c698 <__ieee754_atan2f+0x150>
 802c66e:	e77e      	b.n	802c56e <__ieee754_atan2f+0x26>
 802c670:	c0490fdb 	.word	0xc0490fdb
 802c674:	3fc90fdb 	.word	0x3fc90fdb
 802c678:	bfc90fdb 	.word	0xbfc90fdb
 802c67c:	bf490fdb 	.word	0xbf490fdb
 802c680:	3f490fdb 	.word	0x3f490fdb
 802c684:	4016cbe4 	.word	0x4016cbe4
 802c688:	c016cbe4 	.word	0xc016cbe4
 802c68c:	80000000 	.word	0x80000000
 802c690:	00000000 	.word	0x00000000
 802c694:	33bbbd2e 	.word	0x33bbbd2e
 802c698:	40490fdb 	.word	0x40490fdb

0802c69c <__ieee754_rem_pio2f>:
 802c69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c69e:	ee10 6a10 	vmov	r6, s0
 802c6a2:	4b86      	ldr	r3, [pc, #536]	; (802c8bc <__ieee754_rem_pio2f+0x220>)
 802c6a4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 802c6a8:	429c      	cmp	r4, r3
 802c6aa:	b087      	sub	sp, #28
 802c6ac:	4605      	mov	r5, r0
 802c6ae:	dc05      	bgt.n	802c6bc <__ieee754_rem_pio2f+0x20>
 802c6b0:	2300      	movs	r3, #0
 802c6b2:	ed85 0a00 	vstr	s0, [r5]
 802c6b6:	6043      	str	r3, [r0, #4]
 802c6b8:	2000      	movs	r0, #0
 802c6ba:	e020      	b.n	802c6fe <__ieee754_rem_pio2f+0x62>
 802c6bc:	4b80      	ldr	r3, [pc, #512]	; (802c8c0 <__ieee754_rem_pio2f+0x224>)
 802c6be:	429c      	cmp	r4, r3
 802c6c0:	dc38      	bgt.n	802c734 <__ieee754_rem_pio2f+0x98>
 802c6c2:	2e00      	cmp	r6, #0
 802c6c4:	f024 040f 	bic.w	r4, r4, #15
 802c6c8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 802c8c4 <__ieee754_rem_pio2f+0x228>
 802c6cc:	4b7e      	ldr	r3, [pc, #504]	; (802c8c8 <__ieee754_rem_pio2f+0x22c>)
 802c6ce:	dd18      	ble.n	802c702 <__ieee754_rem_pio2f+0x66>
 802c6d0:	429c      	cmp	r4, r3
 802c6d2:	ee70 7a47 	vsub.f32	s15, s0, s14
 802c6d6:	bf09      	itett	eq
 802c6d8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 802c8cc <__ieee754_rem_pio2f+0x230>
 802c6dc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 802c8d0 <__ieee754_rem_pio2f+0x234>
 802c6e0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802c6e4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 802c8d4 <__ieee754_rem_pio2f+0x238>
 802c6e8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802c6ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c6f0:	edc0 6a00 	vstr	s13, [r0]
 802c6f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c6f8:	edc0 7a01 	vstr	s15, [r0, #4]
 802c6fc:	2001      	movs	r0, #1
 802c6fe:	b007      	add	sp, #28
 802c700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c702:	429c      	cmp	r4, r3
 802c704:	ee70 7a07 	vadd.f32	s15, s0, s14
 802c708:	bf09      	itett	eq
 802c70a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 802c8cc <__ieee754_rem_pio2f+0x230>
 802c70e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 802c8d0 <__ieee754_rem_pio2f+0x234>
 802c712:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802c716:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 802c8d4 <__ieee754_rem_pio2f+0x238>
 802c71a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802c71e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802c722:	edc0 6a00 	vstr	s13, [r0]
 802c726:	ee77 7a87 	vadd.f32	s15, s15, s14
 802c72a:	edc0 7a01 	vstr	s15, [r0, #4]
 802c72e:	f04f 30ff 	mov.w	r0, #4294967295
 802c732:	e7e4      	b.n	802c6fe <__ieee754_rem_pio2f+0x62>
 802c734:	4b68      	ldr	r3, [pc, #416]	; (802c8d8 <__ieee754_rem_pio2f+0x23c>)
 802c736:	429c      	cmp	r4, r3
 802c738:	dc71      	bgt.n	802c81e <__ieee754_rem_pio2f+0x182>
 802c73a:	f001 f959 	bl	802d9f0 <fabsf>
 802c73e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802c8dc <__ieee754_rem_pio2f+0x240>
 802c742:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802c746:	eee0 7a07 	vfma.f32	s15, s0, s14
 802c74a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802c74e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 802c752:	ee17 0a90 	vmov	r0, s15
 802c756:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802c8c4 <__ieee754_rem_pio2f+0x228>
 802c75a:	eeb1 7a46 	vneg.f32	s14, s12
 802c75e:	eea7 0a27 	vfma.f32	s0, s14, s15
 802c762:	281f      	cmp	r0, #31
 802c764:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802c8d0 <__ieee754_rem_pio2f+0x234>
 802c768:	ee66 7a27 	vmul.f32	s15, s12, s15
 802c76c:	ee70 6a67 	vsub.f32	s13, s0, s15
 802c770:	ee16 3a90 	vmov	r3, s13
 802c774:	dc1c      	bgt.n	802c7b0 <__ieee754_rem_pio2f+0x114>
 802c776:	1e47      	subs	r7, r0, #1
 802c778:	4959      	ldr	r1, [pc, #356]	; (802c8e0 <__ieee754_rem_pio2f+0x244>)
 802c77a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802c77e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 802c782:	428a      	cmp	r2, r1
 802c784:	d014      	beq.n	802c7b0 <__ieee754_rem_pio2f+0x114>
 802c786:	602b      	str	r3, [r5, #0]
 802c788:	ed95 7a00 	vldr	s14, [r5]
 802c78c:	ee30 0a47 	vsub.f32	s0, s0, s14
 802c790:	2e00      	cmp	r6, #0
 802c792:	ee30 0a67 	vsub.f32	s0, s0, s15
 802c796:	ed85 0a01 	vstr	s0, [r5, #4]
 802c79a:	dab0      	bge.n	802c6fe <__ieee754_rem_pio2f+0x62>
 802c79c:	eeb1 7a47 	vneg.f32	s14, s14
 802c7a0:	eeb1 0a40 	vneg.f32	s0, s0
 802c7a4:	ed85 7a00 	vstr	s14, [r5]
 802c7a8:	ed85 0a01 	vstr	s0, [r5, #4]
 802c7ac:	4240      	negs	r0, r0
 802c7ae:	e7a6      	b.n	802c6fe <__ieee754_rem_pio2f+0x62>
 802c7b0:	15e4      	asrs	r4, r4, #23
 802c7b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c7b6:	1aa2      	subs	r2, r4, r2
 802c7b8:	2a08      	cmp	r2, #8
 802c7ba:	dde4      	ble.n	802c786 <__ieee754_rem_pio2f+0xea>
 802c7bc:	eddf 7a43 	vldr	s15, [pc, #268]	; 802c8cc <__ieee754_rem_pio2f+0x230>
 802c7c0:	eef0 6a40 	vmov.f32	s13, s0
 802c7c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 802c7c8:	ee30 0a66 	vsub.f32	s0, s0, s13
 802c7cc:	eea7 0a27 	vfma.f32	s0, s14, s15
 802c7d0:	eddf 7a40 	vldr	s15, [pc, #256]	; 802c8d4 <__ieee754_rem_pio2f+0x238>
 802c7d4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 802c7d8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802c7dc:	eef0 7a40 	vmov.f32	s15, s0
 802c7e0:	ee15 3a90 	vmov	r3, s11
 802c7e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802c7e8:	1aa4      	subs	r4, r4, r2
 802c7ea:	2c19      	cmp	r4, #25
 802c7ec:	dc04      	bgt.n	802c7f8 <__ieee754_rem_pio2f+0x15c>
 802c7ee:	edc5 5a00 	vstr	s11, [r5]
 802c7f2:	eeb0 0a66 	vmov.f32	s0, s13
 802c7f6:	e7c7      	b.n	802c788 <__ieee754_rem_pio2f+0xec>
 802c7f8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802c8e4 <__ieee754_rem_pio2f+0x248>
 802c7fc:	eeb0 0a66 	vmov.f32	s0, s13
 802c800:	eea7 0a25 	vfma.f32	s0, s14, s11
 802c804:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802c808:	eee7 7a25 	vfma.f32	s15, s14, s11
 802c80c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 802c8e8 <__ieee754_rem_pio2f+0x24c>
 802c810:	eed6 7a07 	vfnms.f32	s15, s12, s14
 802c814:	ee30 7a67 	vsub.f32	s14, s0, s15
 802c818:	ed85 7a00 	vstr	s14, [r5]
 802c81c:	e7b4      	b.n	802c788 <__ieee754_rem_pio2f+0xec>
 802c81e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802c822:	db06      	blt.n	802c832 <__ieee754_rem_pio2f+0x196>
 802c824:	ee70 7a40 	vsub.f32	s15, s0, s0
 802c828:	edc0 7a01 	vstr	s15, [r0, #4]
 802c82c:	edc0 7a00 	vstr	s15, [r0]
 802c830:	e742      	b.n	802c6b8 <__ieee754_rem_pio2f+0x1c>
 802c832:	15e2      	asrs	r2, r4, #23
 802c834:	3a86      	subs	r2, #134	; 0x86
 802c836:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 802c83a:	ee07 3a90 	vmov	s15, r3
 802c83e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c842:	eddf 6a2a 	vldr	s13, [pc, #168]	; 802c8ec <__ieee754_rem_pio2f+0x250>
 802c846:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c84a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c84e:	ed8d 7a03 	vstr	s14, [sp, #12]
 802c852:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c856:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802c85a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802c85e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802c862:	ed8d 7a04 	vstr	s14, [sp, #16]
 802c866:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802c86a:	eef5 7a40 	vcmp.f32	s15, #0.0
 802c86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c872:	edcd 7a05 	vstr	s15, [sp, #20]
 802c876:	d11e      	bne.n	802c8b6 <__ieee754_rem_pio2f+0x21a>
 802c878:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802c87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802c880:	bf0c      	ite	eq
 802c882:	2301      	moveq	r3, #1
 802c884:	2302      	movne	r3, #2
 802c886:	491a      	ldr	r1, [pc, #104]	; (802c8f0 <__ieee754_rem_pio2f+0x254>)
 802c888:	9101      	str	r1, [sp, #4]
 802c88a:	2102      	movs	r1, #2
 802c88c:	9100      	str	r1, [sp, #0]
 802c88e:	a803      	add	r0, sp, #12
 802c890:	4629      	mov	r1, r5
 802c892:	f000 fbf3 	bl	802d07c <__kernel_rem_pio2f>
 802c896:	2e00      	cmp	r6, #0
 802c898:	f6bf af31 	bge.w	802c6fe <__ieee754_rem_pio2f+0x62>
 802c89c:	edd5 7a00 	vldr	s15, [r5]
 802c8a0:	eef1 7a67 	vneg.f32	s15, s15
 802c8a4:	edc5 7a00 	vstr	s15, [r5]
 802c8a8:	edd5 7a01 	vldr	s15, [r5, #4]
 802c8ac:	eef1 7a67 	vneg.f32	s15, s15
 802c8b0:	edc5 7a01 	vstr	s15, [r5, #4]
 802c8b4:	e77a      	b.n	802c7ac <__ieee754_rem_pio2f+0x110>
 802c8b6:	2303      	movs	r3, #3
 802c8b8:	e7e5      	b.n	802c886 <__ieee754_rem_pio2f+0x1ea>
 802c8ba:	bf00      	nop
 802c8bc:	3f490fd8 	.word	0x3f490fd8
 802c8c0:	4016cbe3 	.word	0x4016cbe3
 802c8c4:	3fc90f80 	.word	0x3fc90f80
 802c8c8:	3fc90fd0 	.word	0x3fc90fd0
 802c8cc:	37354400 	.word	0x37354400
 802c8d0:	37354443 	.word	0x37354443
 802c8d4:	2e85a308 	.word	0x2e85a308
 802c8d8:	43490f80 	.word	0x43490f80
 802c8dc:	3f22f984 	.word	0x3f22f984
 802c8e0:	0802ff08 	.word	0x0802ff08
 802c8e4:	2e85a300 	.word	0x2e85a300
 802c8e8:	248d3132 	.word	0x248d3132
 802c8ec:	43800000 	.word	0x43800000
 802c8f0:	0802ff88 	.word	0x0802ff88

0802c8f4 <__ieee754_sqrtf>:
 802c8f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802c8f8:	4770      	bx	lr
 802c8fa:	0000      	movs	r0, r0
 802c8fc:	0000      	movs	r0, r0
	...

0802c900 <__kernel_cos>:
 802c900:	ee10 1a90 	vmov	r1, s1
 802c904:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802c908:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802c90c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 802c910:	da05      	bge.n	802c91e <__kernel_cos+0x1e>
 802c912:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 802c916:	ee16 3a90 	vmov	r3, s13
 802c91a:	2b00      	cmp	r3, #0
 802c91c:	d03d      	beq.n	802c99a <__kernel_cos+0x9a>
 802c91e:	ee20 4b00 	vmul.f64	d4, d0, d0
 802c922:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 802c926:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 802c9a0 <__kernel_cos+0xa0>
 802c92a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 802c92e:	ee24 6b06 	vmul.f64	d6, d4, d6
 802c932:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 802c9a8 <__kernel_cos+0xa8>
 802c936:	eea4 5b03 	vfma.f64	d5, d4, d3
 802c93a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 802c9b0 <__kernel_cos+0xb0>
 802c93e:	eea5 3b04 	vfma.f64	d3, d5, d4
 802c942:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 802c9b8 <__kernel_cos+0xb8>
 802c946:	eea3 5b04 	vfma.f64	d5, d3, d4
 802c94a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 802c9c0 <__kernel_cos+0xc0>
 802c94e:	4b20      	ldr	r3, [pc, #128]	; (802c9d0 <__kernel_cos+0xd0>)
 802c950:	eea5 3b04 	vfma.f64	d3, d5, d4
 802c954:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 802c9c8 <__kernel_cos+0xc8>
 802c958:	4299      	cmp	r1, r3
 802c95a:	eea3 5b04 	vfma.f64	d5, d3, d4
 802c95e:	ee25 5b04 	vmul.f64	d5, d5, d4
 802c962:	eea4 1b05 	vfma.f64	d1, d4, d5
 802c966:	dc04      	bgt.n	802c972 <__kernel_cos+0x72>
 802c968:	ee36 6b41 	vsub.f64	d6, d6, d1
 802c96c:	ee37 0b46 	vsub.f64	d0, d7, d6
 802c970:	4770      	bx	lr
 802c972:	4b18      	ldr	r3, [pc, #96]	; (802c9d4 <__kernel_cos+0xd4>)
 802c974:	4299      	cmp	r1, r3
 802c976:	dc0d      	bgt.n	802c994 <__kernel_cos+0x94>
 802c978:	2200      	movs	r2, #0
 802c97a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 802c97e:	ec43 2b15 	vmov	d5, r2, r3
 802c982:	ee37 0b45 	vsub.f64	d0, d7, d5
 802c986:	ee36 6b45 	vsub.f64	d6, d6, d5
 802c98a:	ee36 6b41 	vsub.f64	d6, d6, d1
 802c98e:	ee30 0b46 	vsub.f64	d0, d0, d6
 802c992:	4770      	bx	lr
 802c994:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 802c998:	e7f3      	b.n	802c982 <__kernel_cos+0x82>
 802c99a:	eeb0 0b47 	vmov.f64	d0, d7
 802c99e:	4770      	bx	lr
 802c9a0:	be8838d4 	.word	0xbe8838d4
 802c9a4:	bda8fae9 	.word	0xbda8fae9
 802c9a8:	bdb4b1c4 	.word	0xbdb4b1c4
 802c9ac:	3e21ee9e 	.word	0x3e21ee9e
 802c9b0:	809c52ad 	.word	0x809c52ad
 802c9b4:	be927e4f 	.word	0xbe927e4f
 802c9b8:	19cb1590 	.word	0x19cb1590
 802c9bc:	3efa01a0 	.word	0x3efa01a0
 802c9c0:	16c15177 	.word	0x16c15177
 802c9c4:	bf56c16c 	.word	0xbf56c16c
 802c9c8:	5555554c 	.word	0x5555554c
 802c9cc:	3fa55555 	.word	0x3fa55555
 802c9d0:	3fd33332 	.word	0x3fd33332
 802c9d4:	3fe90000 	.word	0x3fe90000

0802c9d8 <__kernel_rem_pio2>:
 802c9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c9dc:	ed2d 8b06 	vpush	{d8-d10}
 802c9e0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 802c9e4:	469b      	mov	fp, r3
 802c9e6:	460e      	mov	r6, r1
 802c9e8:	4bc7      	ldr	r3, [pc, #796]	; (802cd08 <__kernel_rem_pio2+0x330>)
 802c9ea:	99a2      	ldr	r1, [sp, #648]	; 0x288
 802c9ec:	9002      	str	r0, [sp, #8]
 802c9ee:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 802c9f2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 802c9f4:	1ed1      	subs	r1, r2, #3
 802c9f6:	2318      	movs	r3, #24
 802c9f8:	f06f 0417 	mvn.w	r4, #23
 802c9fc:	fb91 f1f3 	sdiv	r1, r1, r3
 802ca00:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802ca04:	f10b 3aff 	add.w	sl, fp, #4294967295
 802ca08:	fb01 4404 	mla	r4, r1, r4, r4
 802ca0c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 802ccf0 <__kernel_rem_pio2+0x318>
 802ca10:	4414      	add	r4, r2
 802ca12:	eba1 050a 	sub.w	r5, r1, sl
 802ca16:	aa1a      	add	r2, sp, #104	; 0x68
 802ca18:	eb09 070a 	add.w	r7, r9, sl
 802ca1c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 802ca20:	4696      	mov	lr, r2
 802ca22:	2300      	movs	r3, #0
 802ca24:	42bb      	cmp	r3, r7
 802ca26:	dd0f      	ble.n	802ca48 <__kernel_rem_pio2+0x70>
 802ca28:	af6a      	add	r7, sp, #424	; 0x1a8
 802ca2a:	2200      	movs	r2, #0
 802ca2c:	454a      	cmp	r2, r9
 802ca2e:	dc28      	bgt.n	802ca82 <__kernel_rem_pio2+0xaa>
 802ca30:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 802ca34:	eb0b 0302 	add.w	r3, fp, r2
 802ca38:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 802ca3c:	9d02      	ldr	r5, [sp, #8]
 802ca3e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 802ccf0 <__kernel_rem_pio2+0x318>
 802ca42:	f04f 0c00 	mov.w	ip, #0
 802ca46:	e016      	b.n	802ca76 <__kernel_rem_pio2+0x9e>
 802ca48:	42dd      	cmn	r5, r3
 802ca4a:	d409      	bmi.n	802ca60 <__kernel_rem_pio2+0x88>
 802ca4c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802ca50:	ee07 2a90 	vmov	s15, r2
 802ca54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802ca58:	ecae 7b02 	vstmia	lr!, {d7}
 802ca5c:	3301      	adds	r3, #1
 802ca5e:	e7e1      	b.n	802ca24 <__kernel_rem_pio2+0x4c>
 802ca60:	eeb0 7b46 	vmov.f64	d7, d6
 802ca64:	e7f8      	b.n	802ca58 <__kernel_rem_pio2+0x80>
 802ca66:	ecb5 5b02 	vldmia	r5!, {d5}
 802ca6a:	ed33 6b02 	vldmdb	r3!, {d6}
 802ca6e:	f10c 0c01 	add.w	ip, ip, #1
 802ca72:	eea5 7b06 	vfma.f64	d7, d5, d6
 802ca76:	45d4      	cmp	ip, sl
 802ca78:	ddf5      	ble.n	802ca66 <__kernel_rem_pio2+0x8e>
 802ca7a:	eca7 7b02 	vstmia	r7!, {d7}
 802ca7e:	3201      	adds	r2, #1
 802ca80:	e7d4      	b.n	802ca2c <__kernel_rem_pio2+0x54>
 802ca82:	ab06      	add	r3, sp, #24
 802ca84:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 802ca88:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 802ccf8 <__kernel_rem_pio2+0x320>
 802ca8c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 802cd00 <__kernel_rem_pio2+0x328>
 802ca90:	9304      	str	r3, [sp, #16]
 802ca92:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 802ca96:	9303      	str	r3, [sp, #12]
 802ca98:	464d      	mov	r5, r9
 802ca9a:	ab92      	add	r3, sp, #584	; 0x248
 802ca9c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 802caa0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802caa4:	3f01      	subs	r7, #1
 802caa6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 802caaa:	00ff      	lsls	r7, r7, #3
 802caac:	ab92      	add	r3, sp, #584	; 0x248
 802caae:	19da      	adds	r2, r3, r7
 802cab0:	3a98      	subs	r2, #152	; 0x98
 802cab2:	2300      	movs	r3, #0
 802cab4:	1ae9      	subs	r1, r5, r3
 802cab6:	2900      	cmp	r1, #0
 802cab8:	dc4e      	bgt.n	802cb58 <__kernel_rem_pio2+0x180>
 802caba:	4620      	mov	r0, r4
 802cabc:	f000 fe48 	bl	802d750 <scalbn>
 802cac0:	eeb0 8b40 	vmov.f64	d8, d0
 802cac4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 802cac8:	ee28 0b00 	vmul.f64	d0, d8, d0
 802cacc:	f7fe f9e4 	bl	802ae98 <floor>
 802cad0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 802cad4:	eea0 8b47 	vfms.f64	d8, d0, d7
 802cad8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 802cadc:	2c00      	cmp	r4, #0
 802cade:	edcd 7a01 	vstr	s15, [sp, #4]
 802cae2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802cae6:	ee38 8b47 	vsub.f64	d8, d8, d7
 802caea:	dd4a      	ble.n	802cb82 <__kernel_rem_pio2+0x1aa>
 802caec:	1e69      	subs	r1, r5, #1
 802caee:	ab06      	add	r3, sp, #24
 802caf0:	f1c4 0018 	rsb	r0, r4, #24
 802caf4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 802caf8:	9a01      	ldr	r2, [sp, #4]
 802cafa:	fa4c f300 	asr.w	r3, ip, r0
 802cafe:	441a      	add	r2, r3
 802cb00:	4083      	lsls	r3, r0
 802cb02:	9201      	str	r2, [sp, #4]
 802cb04:	ebac 0203 	sub.w	r2, ip, r3
 802cb08:	ab06      	add	r3, sp, #24
 802cb0a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 802cb0e:	f1c4 0317 	rsb	r3, r4, #23
 802cb12:	fa42 f803 	asr.w	r8, r2, r3
 802cb16:	f1b8 0f00 	cmp.w	r8, #0
 802cb1a:	dd43      	ble.n	802cba4 <__kernel_rem_pio2+0x1cc>
 802cb1c:	9b01      	ldr	r3, [sp, #4]
 802cb1e:	2000      	movs	r0, #0
 802cb20:	3301      	adds	r3, #1
 802cb22:	9301      	str	r3, [sp, #4]
 802cb24:	4601      	mov	r1, r0
 802cb26:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 802cb2a:	4285      	cmp	r5, r0
 802cb2c:	dc6e      	bgt.n	802cc0c <__kernel_rem_pio2+0x234>
 802cb2e:	2c00      	cmp	r4, #0
 802cb30:	dd04      	ble.n	802cb3c <__kernel_rem_pio2+0x164>
 802cb32:	2c01      	cmp	r4, #1
 802cb34:	d07f      	beq.n	802cc36 <__kernel_rem_pio2+0x25e>
 802cb36:	2c02      	cmp	r4, #2
 802cb38:	f000 8087 	beq.w	802cc4a <__kernel_rem_pio2+0x272>
 802cb3c:	f1b8 0f02 	cmp.w	r8, #2
 802cb40:	d130      	bne.n	802cba4 <__kernel_rem_pio2+0x1cc>
 802cb42:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802cb46:	ee30 8b48 	vsub.f64	d8, d0, d8
 802cb4a:	b359      	cbz	r1, 802cba4 <__kernel_rem_pio2+0x1cc>
 802cb4c:	4620      	mov	r0, r4
 802cb4e:	f000 fdff 	bl	802d750 <scalbn>
 802cb52:	ee38 8b40 	vsub.f64	d8, d8, d0
 802cb56:	e025      	b.n	802cba4 <__kernel_rem_pio2+0x1cc>
 802cb58:	ee20 7b09 	vmul.f64	d7, d0, d9
 802cb5c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 802cb60:	a806      	add	r0, sp, #24
 802cb62:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 802cb66:	eea7 0b4a 	vfms.f64	d0, d7, d10
 802cb6a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802cb6e:	ee10 1a10 	vmov	r1, s0
 802cb72:	ed32 0b02 	vldmdb	r2!, {d0}
 802cb76:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 802cb7a:	ee37 0b00 	vadd.f64	d0, d7, d0
 802cb7e:	3301      	adds	r3, #1
 802cb80:	e798      	b.n	802cab4 <__kernel_rem_pio2+0xdc>
 802cb82:	d106      	bne.n	802cb92 <__kernel_rem_pio2+0x1ba>
 802cb84:	1e6b      	subs	r3, r5, #1
 802cb86:	aa06      	add	r2, sp, #24
 802cb88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802cb8c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 802cb90:	e7c1      	b.n	802cb16 <__kernel_rem_pio2+0x13e>
 802cb92:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802cb96:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802cb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cb9e:	da32      	bge.n	802cc06 <__kernel_rem_pio2+0x22e>
 802cba0:	f04f 0800 	mov.w	r8, #0
 802cba4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802cba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cbac:	f040 80b0 	bne.w	802cd10 <__kernel_rem_pio2+0x338>
 802cbb0:	1e6b      	subs	r3, r5, #1
 802cbb2:	4618      	mov	r0, r3
 802cbb4:	2200      	movs	r2, #0
 802cbb6:	4548      	cmp	r0, r9
 802cbb8:	da4e      	bge.n	802cc58 <__kernel_rem_pio2+0x280>
 802cbba:	2a00      	cmp	r2, #0
 802cbbc:	f000 8088 	beq.w	802ccd0 <__kernel_rem_pio2+0x2f8>
 802cbc0:	aa06      	add	r2, sp, #24
 802cbc2:	3c18      	subs	r4, #24
 802cbc4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802cbc8:	2900      	cmp	r1, #0
 802cbca:	f000 808e 	beq.w	802ccea <__kernel_rem_pio2+0x312>
 802cbce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802cbd2:	4620      	mov	r0, r4
 802cbd4:	9302      	str	r3, [sp, #8]
 802cbd6:	f000 fdbb 	bl	802d750 <scalbn>
 802cbda:	9b02      	ldr	r3, [sp, #8]
 802cbdc:	aa6a      	add	r2, sp, #424	; 0x1a8
 802cbde:	00d9      	lsls	r1, r3, #3
 802cbe0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 802ccf8 <__kernel_rem_pio2+0x320>
 802cbe4:	1850      	adds	r0, r2, r1
 802cbe6:	f100 0508 	add.w	r5, r0, #8
 802cbea:	461c      	mov	r4, r3
 802cbec:	2c00      	cmp	r4, #0
 802cbee:	f280 80bd 	bge.w	802cd6c <__kernel_rem_pio2+0x394>
 802cbf2:	2500      	movs	r5, #0
 802cbf4:	1b5c      	subs	r4, r3, r5
 802cbf6:	2c00      	cmp	r4, #0
 802cbf8:	f2c0 80dd 	blt.w	802cdb6 <__kernel_rem_pio2+0x3de>
 802cbfc:	4f43      	ldr	r7, [pc, #268]	; (802cd0c <__kernel_rem_pio2+0x334>)
 802cbfe:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 802ccf0 <__kernel_rem_pio2+0x318>
 802cc02:	2400      	movs	r4, #0
 802cc04:	e0cb      	b.n	802cd9e <__kernel_rem_pio2+0x3c6>
 802cc06:	f04f 0802 	mov.w	r8, #2
 802cc0a:	e787      	b.n	802cb1c <__kernel_rem_pio2+0x144>
 802cc0c:	ab06      	add	r3, sp, #24
 802cc0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802cc12:	b949      	cbnz	r1, 802cc28 <__kernel_rem_pio2+0x250>
 802cc14:	b12b      	cbz	r3, 802cc22 <__kernel_rem_pio2+0x24a>
 802cc16:	aa06      	add	r2, sp, #24
 802cc18:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 802cc1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802cc20:	2301      	movs	r3, #1
 802cc22:	3001      	adds	r0, #1
 802cc24:	4619      	mov	r1, r3
 802cc26:	e780      	b.n	802cb2a <__kernel_rem_pio2+0x152>
 802cc28:	aa06      	add	r2, sp, #24
 802cc2a:	ebac 0303 	sub.w	r3, ip, r3
 802cc2e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802cc32:	460b      	mov	r3, r1
 802cc34:	e7f5      	b.n	802cc22 <__kernel_rem_pio2+0x24a>
 802cc36:	1e68      	subs	r0, r5, #1
 802cc38:	ab06      	add	r3, sp, #24
 802cc3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802cc3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802cc42:	aa06      	add	r2, sp, #24
 802cc44:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802cc48:	e778      	b.n	802cb3c <__kernel_rem_pio2+0x164>
 802cc4a:	1e68      	subs	r0, r5, #1
 802cc4c:	ab06      	add	r3, sp, #24
 802cc4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802cc52:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802cc56:	e7f4      	b.n	802cc42 <__kernel_rem_pio2+0x26a>
 802cc58:	a906      	add	r1, sp, #24
 802cc5a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802cc5e:	3801      	subs	r0, #1
 802cc60:	430a      	orrs	r2, r1
 802cc62:	e7a8      	b.n	802cbb6 <__kernel_rem_pio2+0x1de>
 802cc64:	f10c 0c01 	add.w	ip, ip, #1
 802cc68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802cc6c:	2a00      	cmp	r2, #0
 802cc6e:	d0f9      	beq.n	802cc64 <__kernel_rem_pio2+0x28c>
 802cc70:	eb0b 0305 	add.w	r3, fp, r5
 802cc74:	aa1a      	add	r2, sp, #104	; 0x68
 802cc76:	00db      	lsls	r3, r3, #3
 802cc78:	1898      	adds	r0, r3, r2
 802cc7a:	3008      	adds	r0, #8
 802cc7c:	1c69      	adds	r1, r5, #1
 802cc7e:	3708      	adds	r7, #8
 802cc80:	2200      	movs	r2, #0
 802cc82:	4465      	add	r5, ip
 802cc84:	9005      	str	r0, [sp, #20]
 802cc86:	428d      	cmp	r5, r1
 802cc88:	f6ff af07 	blt.w	802ca9a <__kernel_rem_pio2+0xc2>
 802cc8c:	a81a      	add	r0, sp, #104	; 0x68
 802cc8e:	eb02 0c03 	add.w	ip, r2, r3
 802cc92:	4484      	add	ip, r0
 802cc94:	9803      	ldr	r0, [sp, #12]
 802cc96:	f8dd e008 	ldr.w	lr, [sp, #8]
 802cc9a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 802cc9e:	9001      	str	r0, [sp, #4]
 802cca0:	ee07 0a90 	vmov	s15, r0
 802cca4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802cca8:	9805      	ldr	r0, [sp, #20]
 802ccaa:	ed8c 7b00 	vstr	d7, [ip]
 802ccae:	ed9f 7b10 	vldr	d7, [pc, #64]	; 802ccf0 <__kernel_rem_pio2+0x318>
 802ccb2:	eb00 0802 	add.w	r8, r0, r2
 802ccb6:	f04f 0c00 	mov.w	ip, #0
 802ccba:	45d4      	cmp	ip, sl
 802ccbc:	dd0c      	ble.n	802ccd8 <__kernel_rem_pio2+0x300>
 802ccbe:	eb02 0c07 	add.w	ip, r2, r7
 802ccc2:	a86a      	add	r0, sp, #424	; 0x1a8
 802ccc4:	4484      	add	ip, r0
 802ccc6:	ed8c 7b02 	vstr	d7, [ip, #8]
 802ccca:	3101      	adds	r1, #1
 802cccc:	3208      	adds	r2, #8
 802ccce:	e7da      	b.n	802cc86 <__kernel_rem_pio2+0x2ae>
 802ccd0:	9b04      	ldr	r3, [sp, #16]
 802ccd2:	f04f 0c01 	mov.w	ip, #1
 802ccd6:	e7c7      	b.n	802cc68 <__kernel_rem_pio2+0x290>
 802ccd8:	ecbe 5b02 	vldmia	lr!, {d5}
 802ccdc:	ed38 6b02 	vldmdb	r8!, {d6}
 802cce0:	f10c 0c01 	add.w	ip, ip, #1
 802cce4:	eea5 7b06 	vfma.f64	d7, d5, d6
 802cce8:	e7e7      	b.n	802ccba <__kernel_rem_pio2+0x2e2>
 802ccea:	3b01      	subs	r3, #1
 802ccec:	e768      	b.n	802cbc0 <__kernel_rem_pio2+0x1e8>
 802ccee:	bf00      	nop
	...
 802ccfc:	3e700000 	.word	0x3e700000
 802cd00:	00000000 	.word	0x00000000
 802cd04:	41700000 	.word	0x41700000
 802cd08:	080302e0 	.word	0x080302e0
 802cd0c:	080302a0 	.word	0x080302a0
 802cd10:	4260      	negs	r0, r4
 802cd12:	eeb0 0b48 	vmov.f64	d0, d8
 802cd16:	f000 fd1b 	bl	802d750 <scalbn>
 802cd1a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 802cef8 <__kernel_rem_pio2+0x520>
 802cd1e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 802cd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802cd26:	db18      	blt.n	802cd5a <__kernel_rem_pio2+0x382>
 802cd28:	ed9f 7b75 	vldr	d7, [pc, #468]	; 802cf00 <__kernel_rem_pio2+0x528>
 802cd2c:	ee20 7b07 	vmul.f64	d7, d0, d7
 802cd30:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 802cd34:	aa06      	add	r2, sp, #24
 802cd36:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 802cd3a:	eea5 0b46 	vfms.f64	d0, d5, d6
 802cd3e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802cd42:	a906      	add	r1, sp, #24
 802cd44:	ee10 3a10 	vmov	r3, s0
 802cd48:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802cd4c:	1c6b      	adds	r3, r5, #1
 802cd4e:	ee17 2a10 	vmov	r2, s14
 802cd52:	3418      	adds	r4, #24
 802cd54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802cd58:	e739      	b.n	802cbce <__kernel_rem_pio2+0x1f6>
 802cd5a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802cd5e:	aa06      	add	r2, sp, #24
 802cd60:	ee10 3a10 	vmov	r3, s0
 802cd64:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802cd68:	462b      	mov	r3, r5
 802cd6a:	e730      	b.n	802cbce <__kernel_rem_pio2+0x1f6>
 802cd6c:	aa06      	add	r2, sp, #24
 802cd6e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 802cd72:	9202      	str	r2, [sp, #8]
 802cd74:	ee07 2a90 	vmov	s15, r2
 802cd78:	3c01      	subs	r4, #1
 802cd7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802cd7e:	ee27 7b00 	vmul.f64	d7, d7, d0
 802cd82:	ee20 0b06 	vmul.f64	d0, d0, d6
 802cd86:	ed25 7b02 	vstmdb	r5!, {d7}
 802cd8a:	e72f      	b.n	802cbec <__kernel_rem_pio2+0x214>
 802cd8c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 802cd90:	ecb7 5b02 	vldmia	r7!, {d5}
 802cd94:	ed9c 6b00 	vldr	d6, [ip]
 802cd98:	3401      	adds	r4, #1
 802cd9a:	eea5 7b06 	vfma.f64	d7, d5, d6
 802cd9e:	454c      	cmp	r4, r9
 802cda0:	dc01      	bgt.n	802cda6 <__kernel_rem_pio2+0x3ce>
 802cda2:	42a5      	cmp	r5, r4
 802cda4:	daf2      	bge.n	802cd8c <__kernel_rem_pio2+0x3b4>
 802cda6:	aa42      	add	r2, sp, #264	; 0x108
 802cda8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 802cdac:	ed84 7b00 	vstr	d7, [r4]
 802cdb0:	3501      	adds	r5, #1
 802cdb2:	3808      	subs	r0, #8
 802cdb4:	e71e      	b.n	802cbf4 <__kernel_rem_pio2+0x21c>
 802cdb6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 802cdb8:	2a03      	cmp	r2, #3
 802cdba:	d84e      	bhi.n	802ce5a <__kernel_rem_pio2+0x482>
 802cdbc:	e8df f002 	tbb	[pc, r2]
 802cdc0:	021f1f3e 	.word	0x021f1f3e
 802cdc4:	3108      	adds	r1, #8
 802cdc6:	aa42      	add	r2, sp, #264	; 0x108
 802cdc8:	4411      	add	r1, r2
 802cdca:	4608      	mov	r0, r1
 802cdcc:	461c      	mov	r4, r3
 802cdce:	2c00      	cmp	r4, #0
 802cdd0:	dc61      	bgt.n	802ce96 <__kernel_rem_pio2+0x4be>
 802cdd2:	4608      	mov	r0, r1
 802cdd4:	461c      	mov	r4, r3
 802cdd6:	2c01      	cmp	r4, #1
 802cdd8:	dc6d      	bgt.n	802ceb6 <__kernel_rem_pio2+0x4de>
 802cdda:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 802cf08 <__kernel_rem_pio2+0x530>
 802cdde:	2b01      	cmp	r3, #1
 802cde0:	dc79      	bgt.n	802ced6 <__kernel_rem_pio2+0x4fe>
 802cde2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 802cde6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 802cdea:	f1b8 0f00 	cmp.w	r8, #0
 802cdee:	d178      	bne.n	802cee2 <__kernel_rem_pio2+0x50a>
 802cdf0:	ed86 5b00 	vstr	d5, [r6]
 802cdf4:	ed86 6b02 	vstr	d6, [r6, #8]
 802cdf8:	ed86 7b04 	vstr	d7, [r6, #16]
 802cdfc:	e02d      	b.n	802ce5a <__kernel_rem_pio2+0x482>
 802cdfe:	ed9f 6b42 	vldr	d6, [pc, #264]	; 802cf08 <__kernel_rem_pio2+0x530>
 802ce02:	3108      	adds	r1, #8
 802ce04:	aa42      	add	r2, sp, #264	; 0x108
 802ce06:	4411      	add	r1, r2
 802ce08:	4618      	mov	r0, r3
 802ce0a:	2800      	cmp	r0, #0
 802ce0c:	da34      	bge.n	802ce78 <__kernel_rem_pio2+0x4a0>
 802ce0e:	f1b8 0f00 	cmp.w	r8, #0
 802ce12:	d037      	beq.n	802ce84 <__kernel_rem_pio2+0x4ac>
 802ce14:	eeb1 7b46 	vneg.f64	d7, d6
 802ce18:	ed86 7b00 	vstr	d7, [r6]
 802ce1c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 802ce20:	a844      	add	r0, sp, #272	; 0x110
 802ce22:	2101      	movs	r1, #1
 802ce24:	ee37 7b46 	vsub.f64	d7, d7, d6
 802ce28:	428b      	cmp	r3, r1
 802ce2a:	da2e      	bge.n	802ce8a <__kernel_rem_pio2+0x4b2>
 802ce2c:	f1b8 0f00 	cmp.w	r8, #0
 802ce30:	d001      	beq.n	802ce36 <__kernel_rem_pio2+0x45e>
 802ce32:	eeb1 7b47 	vneg.f64	d7, d7
 802ce36:	ed86 7b02 	vstr	d7, [r6, #8]
 802ce3a:	e00e      	b.n	802ce5a <__kernel_rem_pio2+0x482>
 802ce3c:	aa92      	add	r2, sp, #584	; 0x248
 802ce3e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 802cf08 <__kernel_rem_pio2+0x530>
 802ce42:	4411      	add	r1, r2
 802ce44:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 802ce48:	2b00      	cmp	r3, #0
 802ce4a:	da0f      	bge.n	802ce6c <__kernel_rem_pio2+0x494>
 802ce4c:	f1b8 0f00 	cmp.w	r8, #0
 802ce50:	d001      	beq.n	802ce56 <__kernel_rem_pio2+0x47e>
 802ce52:	eeb1 7b47 	vneg.f64	d7, d7
 802ce56:	ed86 7b00 	vstr	d7, [r6]
 802ce5a:	9b01      	ldr	r3, [sp, #4]
 802ce5c:	f003 0007 	and.w	r0, r3, #7
 802ce60:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 802ce64:	ecbd 8b06 	vpop	{d8-d10}
 802ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ce6c:	ed31 6b02 	vldmdb	r1!, {d6}
 802ce70:	3b01      	subs	r3, #1
 802ce72:	ee37 7b06 	vadd.f64	d7, d7, d6
 802ce76:	e7e7      	b.n	802ce48 <__kernel_rem_pio2+0x470>
 802ce78:	ed31 7b02 	vldmdb	r1!, {d7}
 802ce7c:	3801      	subs	r0, #1
 802ce7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 802ce82:	e7c2      	b.n	802ce0a <__kernel_rem_pio2+0x432>
 802ce84:	eeb0 7b46 	vmov.f64	d7, d6
 802ce88:	e7c6      	b.n	802ce18 <__kernel_rem_pio2+0x440>
 802ce8a:	ecb0 6b02 	vldmia	r0!, {d6}
 802ce8e:	3101      	adds	r1, #1
 802ce90:	ee37 7b06 	vadd.f64	d7, d7, d6
 802ce94:	e7c8      	b.n	802ce28 <__kernel_rem_pio2+0x450>
 802ce96:	ed10 7b04 	vldr	d7, [r0, #-16]
 802ce9a:	ed30 5b02 	vldmdb	r0!, {d5}
 802ce9e:	3c01      	subs	r4, #1
 802cea0:	ee37 6b05 	vadd.f64	d6, d7, d5
 802cea4:	ee37 7b46 	vsub.f64	d7, d7, d6
 802cea8:	ed00 6b02 	vstr	d6, [r0, #-8]
 802ceac:	ee37 7b05 	vadd.f64	d7, d7, d5
 802ceb0:	ed80 7b00 	vstr	d7, [r0]
 802ceb4:	e78b      	b.n	802cdce <__kernel_rem_pio2+0x3f6>
 802ceb6:	ed10 7b04 	vldr	d7, [r0, #-16]
 802ceba:	ed30 5b02 	vldmdb	r0!, {d5}
 802cebe:	3c01      	subs	r4, #1
 802cec0:	ee37 6b05 	vadd.f64	d6, d7, d5
 802cec4:	ee37 7b46 	vsub.f64	d7, d7, d6
 802cec8:	ed00 6b02 	vstr	d6, [r0, #-8]
 802cecc:	ee37 7b05 	vadd.f64	d7, d7, d5
 802ced0:	ed80 7b00 	vstr	d7, [r0]
 802ced4:	e77f      	b.n	802cdd6 <__kernel_rem_pio2+0x3fe>
 802ced6:	ed31 6b02 	vldmdb	r1!, {d6}
 802ceda:	3b01      	subs	r3, #1
 802cedc:	ee37 7b06 	vadd.f64	d7, d7, d6
 802cee0:	e77d      	b.n	802cdde <__kernel_rem_pio2+0x406>
 802cee2:	eeb1 5b45 	vneg.f64	d5, d5
 802cee6:	eeb1 6b46 	vneg.f64	d6, d6
 802ceea:	ed86 5b00 	vstr	d5, [r6]
 802ceee:	eeb1 7b47 	vneg.f64	d7, d7
 802cef2:	ed86 6b02 	vstr	d6, [r6, #8]
 802cef6:	e77f      	b.n	802cdf8 <__kernel_rem_pio2+0x420>
 802cef8:	00000000 	.word	0x00000000
 802cefc:	41700000 	.word	0x41700000
 802cf00:	00000000 	.word	0x00000000
 802cf04:	3e700000 	.word	0x3e700000
	...

0802cf10 <__kernel_sin>:
 802cf10:	ee10 3a90 	vmov	r3, s1
 802cf14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802cf18:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802cf1c:	da04      	bge.n	802cf28 <__kernel_sin+0x18>
 802cf1e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 802cf22:	ee17 3a90 	vmov	r3, s15
 802cf26:	b35b      	cbz	r3, 802cf80 <__kernel_sin+0x70>
 802cf28:	ee20 6b00 	vmul.f64	d6, d0, d0
 802cf2c:	ee20 5b06 	vmul.f64	d5, d0, d6
 802cf30:	ed9f 7b15 	vldr	d7, [pc, #84]	; 802cf88 <__kernel_sin+0x78>
 802cf34:	ed9f 4b16 	vldr	d4, [pc, #88]	; 802cf90 <__kernel_sin+0x80>
 802cf38:	eea6 4b07 	vfma.f64	d4, d6, d7
 802cf3c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 802cf98 <__kernel_sin+0x88>
 802cf40:	eea4 7b06 	vfma.f64	d7, d4, d6
 802cf44:	ed9f 4b16 	vldr	d4, [pc, #88]	; 802cfa0 <__kernel_sin+0x90>
 802cf48:	eea7 4b06 	vfma.f64	d4, d7, d6
 802cf4c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 802cfa8 <__kernel_sin+0x98>
 802cf50:	eea4 7b06 	vfma.f64	d7, d4, d6
 802cf54:	b930      	cbnz	r0, 802cf64 <__kernel_sin+0x54>
 802cf56:	ed9f 4b16 	vldr	d4, [pc, #88]	; 802cfb0 <__kernel_sin+0xa0>
 802cf5a:	eea6 4b07 	vfma.f64	d4, d6, d7
 802cf5e:	eea4 0b05 	vfma.f64	d0, d4, d5
 802cf62:	4770      	bx	lr
 802cf64:	ee27 7b45 	vnmul.f64	d7, d7, d5
 802cf68:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 802cf6c:	eea1 7b04 	vfma.f64	d7, d1, d4
 802cf70:	ee97 1b06 	vfnms.f64	d1, d7, d6
 802cf74:	ed9f 7b10 	vldr	d7, [pc, #64]	; 802cfb8 <__kernel_sin+0xa8>
 802cf78:	eea5 1b07 	vfma.f64	d1, d5, d7
 802cf7c:	ee30 0b41 	vsub.f64	d0, d0, d1
 802cf80:	4770      	bx	lr
 802cf82:	bf00      	nop
 802cf84:	f3af 8000 	nop.w
 802cf88:	5acfd57c 	.word	0x5acfd57c
 802cf8c:	3de5d93a 	.word	0x3de5d93a
 802cf90:	8a2b9ceb 	.word	0x8a2b9ceb
 802cf94:	be5ae5e6 	.word	0xbe5ae5e6
 802cf98:	57b1fe7d 	.word	0x57b1fe7d
 802cf9c:	3ec71de3 	.word	0x3ec71de3
 802cfa0:	19c161d5 	.word	0x19c161d5
 802cfa4:	bf2a01a0 	.word	0xbf2a01a0
 802cfa8:	1110f8a6 	.word	0x1110f8a6
 802cfac:	3f811111 	.word	0x3f811111
 802cfb0:	55555549 	.word	0x55555549
 802cfb4:	bfc55555 	.word	0xbfc55555
 802cfb8:	55555549 	.word	0x55555549
 802cfbc:	3fc55555 	.word	0x3fc55555

0802cfc0 <__kernel_cosf>:
 802cfc0:	ee10 3a10 	vmov	r3, s0
 802cfc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802cfc8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802cfcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802cfd0:	da05      	bge.n	802cfde <__kernel_cosf+0x1e>
 802cfd2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802cfd6:	ee17 2a90 	vmov	r2, s15
 802cfda:	2a00      	cmp	r2, #0
 802cfdc:	d03b      	beq.n	802d056 <__kernel_cosf+0x96>
 802cfde:	ee20 6a00 	vmul.f32	s12, s0, s0
 802cfe2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802cfe6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 802d05c <__kernel_cosf+0x9c>
 802cfea:	4a1d      	ldr	r2, [pc, #116]	; (802d060 <__kernel_cosf+0xa0>)
 802cfec:	ee66 7a07 	vmul.f32	s15, s12, s14
 802cff0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 802d064 <__kernel_cosf+0xa4>
 802cff4:	eea6 7a25 	vfma.f32	s14, s12, s11
 802cff8:	4293      	cmp	r3, r2
 802cffa:	eddf 5a1b 	vldr	s11, [pc, #108]	; 802d068 <__kernel_cosf+0xa8>
 802cffe:	eee7 5a06 	vfma.f32	s11, s14, s12
 802d002:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 802d06c <__kernel_cosf+0xac>
 802d006:	eea5 7a86 	vfma.f32	s14, s11, s12
 802d00a:	eddf 5a19 	vldr	s11, [pc, #100]	; 802d070 <__kernel_cosf+0xb0>
 802d00e:	eee7 5a06 	vfma.f32	s11, s14, s12
 802d012:	ed9f 7a18 	vldr	s14, [pc, #96]	; 802d074 <__kernel_cosf+0xb4>
 802d016:	eea5 7a86 	vfma.f32	s14, s11, s12
 802d01a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802d01e:	ee27 7a06 	vmul.f32	s14, s14, s12
 802d022:	eee6 0a07 	vfma.f32	s1, s12, s14
 802d026:	dc04      	bgt.n	802d032 <__kernel_cosf+0x72>
 802d028:	ee77 0ae0 	vsub.f32	s1, s15, s1
 802d02c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 802d030:	4770      	bx	lr
 802d032:	4a11      	ldr	r2, [pc, #68]	; (802d078 <__kernel_cosf+0xb8>)
 802d034:	4293      	cmp	r3, r2
 802d036:	bfda      	itte	le
 802d038:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802d03c:	ee07 3a10 	vmovle	s14, r3
 802d040:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 802d044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d048:	ee36 0ac7 	vsub.f32	s0, s13, s14
 802d04c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802d050:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d054:	4770      	bx	lr
 802d056:	eeb0 0a66 	vmov.f32	s0, s13
 802d05a:	4770      	bx	lr
 802d05c:	ad47d74e 	.word	0xad47d74e
 802d060:	3e999999 	.word	0x3e999999
 802d064:	310f74f6 	.word	0x310f74f6
 802d068:	b493f27c 	.word	0xb493f27c
 802d06c:	37d00d01 	.word	0x37d00d01
 802d070:	bab60b61 	.word	0xbab60b61
 802d074:	3d2aaaab 	.word	0x3d2aaaab
 802d078:	3f480000 	.word	0x3f480000

0802d07c <__kernel_rem_pio2f>:
 802d07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d080:	ed2d 8b04 	vpush	{d8-d9}
 802d084:	b0d7      	sub	sp, #348	; 0x15c
 802d086:	469b      	mov	fp, r3
 802d088:	460e      	mov	r6, r1
 802d08a:	4bbe      	ldr	r3, [pc, #760]	; (802d384 <__kernel_rem_pio2f+0x308>)
 802d08c:	9964      	ldr	r1, [sp, #400]	; 0x190
 802d08e:	9002      	str	r0, [sp, #8]
 802d090:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 802d094:	9865      	ldr	r0, [sp, #404]	; 0x194
 802d096:	ed9f 7abf 	vldr	s14, [pc, #764]	; 802d394 <__kernel_rem_pio2f+0x318>
 802d09a:	1ed1      	subs	r1, r2, #3
 802d09c:	2308      	movs	r3, #8
 802d09e:	fb91 f1f3 	sdiv	r1, r1, r3
 802d0a2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802d0a6:	f10b 3aff 	add.w	sl, fp, #4294967295
 802d0aa:	1c4c      	adds	r4, r1, #1
 802d0ac:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 802d0b0:	eba1 050a 	sub.w	r5, r1, sl
 802d0b4:	aa1a      	add	r2, sp, #104	; 0x68
 802d0b6:	eb09 070a 	add.w	r7, r9, sl
 802d0ba:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 802d0be:	4696      	mov	lr, r2
 802d0c0:	2300      	movs	r3, #0
 802d0c2:	42bb      	cmp	r3, r7
 802d0c4:	dd0f      	ble.n	802d0e6 <__kernel_rem_pio2f+0x6a>
 802d0c6:	af42      	add	r7, sp, #264	; 0x108
 802d0c8:	2200      	movs	r2, #0
 802d0ca:	454a      	cmp	r2, r9
 802d0cc:	dc27      	bgt.n	802d11e <__kernel_rem_pio2f+0xa2>
 802d0ce:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 802d0d2:	eb0b 0302 	add.w	r3, fp, r2
 802d0d6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 802d0da:	9d02      	ldr	r5, [sp, #8]
 802d0dc:	eddf 7aad 	vldr	s15, [pc, #692]	; 802d394 <__kernel_rem_pio2f+0x318>
 802d0e0:	f04f 0c00 	mov.w	ip, #0
 802d0e4:	e015      	b.n	802d112 <__kernel_rem_pio2f+0x96>
 802d0e6:	42dd      	cmn	r5, r3
 802d0e8:	bf5d      	ittte	pl
 802d0ea:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 802d0ee:	ee07 2a90 	vmovpl	s15, r2
 802d0f2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802d0f6:	eef0 7a47 	vmovmi.f32	s15, s14
 802d0fa:	ecee 7a01 	vstmia	lr!, {s15}
 802d0fe:	3301      	adds	r3, #1
 802d100:	e7df      	b.n	802d0c2 <__kernel_rem_pio2f+0x46>
 802d102:	ecf5 6a01 	vldmia	r5!, {s13}
 802d106:	ed33 7a01 	vldmdb	r3!, {s14}
 802d10a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d10e:	f10c 0c01 	add.w	ip, ip, #1
 802d112:	45d4      	cmp	ip, sl
 802d114:	ddf5      	ble.n	802d102 <__kernel_rem_pio2f+0x86>
 802d116:	ece7 7a01 	vstmia	r7!, {s15}
 802d11a:	3201      	adds	r2, #1
 802d11c:	e7d5      	b.n	802d0ca <__kernel_rem_pio2f+0x4e>
 802d11e:	ab06      	add	r3, sp, #24
 802d120:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 802d124:	9304      	str	r3, [sp, #16]
 802d126:	eddf 8a9a 	vldr	s17, [pc, #616]	; 802d390 <__kernel_rem_pio2f+0x314>
 802d12a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 802d38c <__kernel_rem_pio2f+0x310>
 802d12e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 802d132:	9303      	str	r3, [sp, #12]
 802d134:	464d      	mov	r5, r9
 802d136:	ab56      	add	r3, sp, #344	; 0x158
 802d138:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 802d13c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802d140:	3f01      	subs	r7, #1
 802d142:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802d146:	00bf      	lsls	r7, r7, #2
 802d148:	ab56      	add	r3, sp, #344	; 0x158
 802d14a:	19da      	adds	r2, r3, r7
 802d14c:	3a4c      	subs	r2, #76	; 0x4c
 802d14e:	2300      	movs	r3, #0
 802d150:	1ae9      	subs	r1, r5, r3
 802d152:	2900      	cmp	r1, #0
 802d154:	dc4c      	bgt.n	802d1f0 <__kernel_rem_pio2f+0x174>
 802d156:	4620      	mov	r0, r4
 802d158:	f000 fc94 	bl	802da84 <scalbnf>
 802d15c:	eeb0 8a40 	vmov.f32	s16, s0
 802d160:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802d164:	ee28 0a00 	vmul.f32	s0, s16, s0
 802d168:	f000 fc4a 	bl	802da00 <floorf>
 802d16c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802d170:	eea0 8a67 	vfms.f32	s16, s0, s15
 802d174:	2c00      	cmp	r4, #0
 802d176:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802d17a:	edcd 7a01 	vstr	s15, [sp, #4]
 802d17e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d182:	ee38 8a67 	vsub.f32	s16, s16, s15
 802d186:	dd48      	ble.n	802d21a <__kernel_rem_pio2f+0x19e>
 802d188:	1e69      	subs	r1, r5, #1
 802d18a:	ab06      	add	r3, sp, #24
 802d18c:	f1c4 0008 	rsb	r0, r4, #8
 802d190:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 802d194:	9a01      	ldr	r2, [sp, #4]
 802d196:	fa4c f300 	asr.w	r3, ip, r0
 802d19a:	441a      	add	r2, r3
 802d19c:	4083      	lsls	r3, r0
 802d19e:	9201      	str	r2, [sp, #4]
 802d1a0:	ebac 0203 	sub.w	r2, ip, r3
 802d1a4:	ab06      	add	r3, sp, #24
 802d1a6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 802d1aa:	f1c4 0307 	rsb	r3, r4, #7
 802d1ae:	fa42 f803 	asr.w	r8, r2, r3
 802d1b2:	f1b8 0f00 	cmp.w	r8, #0
 802d1b6:	dd41      	ble.n	802d23c <__kernel_rem_pio2f+0x1c0>
 802d1b8:	9b01      	ldr	r3, [sp, #4]
 802d1ba:	2000      	movs	r0, #0
 802d1bc:	3301      	adds	r3, #1
 802d1be:	9301      	str	r3, [sp, #4]
 802d1c0:	4601      	mov	r1, r0
 802d1c2:	4285      	cmp	r5, r0
 802d1c4:	dc6d      	bgt.n	802d2a2 <__kernel_rem_pio2f+0x226>
 802d1c6:	2c00      	cmp	r4, #0
 802d1c8:	dd04      	ble.n	802d1d4 <__kernel_rem_pio2f+0x158>
 802d1ca:	2c01      	cmp	r4, #1
 802d1cc:	d07e      	beq.n	802d2cc <__kernel_rem_pio2f+0x250>
 802d1ce:	2c02      	cmp	r4, #2
 802d1d0:	f000 8086 	beq.w	802d2e0 <__kernel_rem_pio2f+0x264>
 802d1d4:	f1b8 0f02 	cmp.w	r8, #2
 802d1d8:	d130      	bne.n	802d23c <__kernel_rem_pio2f+0x1c0>
 802d1da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802d1de:	ee30 8a48 	vsub.f32	s16, s0, s16
 802d1e2:	b359      	cbz	r1, 802d23c <__kernel_rem_pio2f+0x1c0>
 802d1e4:	4620      	mov	r0, r4
 802d1e6:	f000 fc4d 	bl	802da84 <scalbnf>
 802d1ea:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d1ee:	e025      	b.n	802d23c <__kernel_rem_pio2f+0x1c0>
 802d1f0:	ee60 7a28 	vmul.f32	s15, s0, s17
 802d1f4:	a806      	add	r0, sp, #24
 802d1f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d1fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d1fe:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802d202:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d206:	ee10 1a10 	vmov	r1, s0
 802d20a:	ed32 0a01 	vldmdb	r2!, {s0}
 802d20e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 802d212:	ee37 0a80 	vadd.f32	s0, s15, s0
 802d216:	3301      	adds	r3, #1
 802d218:	e79a      	b.n	802d150 <__kernel_rem_pio2f+0xd4>
 802d21a:	d106      	bne.n	802d22a <__kernel_rem_pio2f+0x1ae>
 802d21c:	1e6b      	subs	r3, r5, #1
 802d21e:	aa06      	add	r2, sp, #24
 802d220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802d224:	ea4f 2822 	mov.w	r8, r2, asr #8
 802d228:	e7c3      	b.n	802d1b2 <__kernel_rem_pio2f+0x136>
 802d22a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802d22e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802d232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d236:	da31      	bge.n	802d29c <__kernel_rem_pio2f+0x220>
 802d238:	f04f 0800 	mov.w	r8, #0
 802d23c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802d240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d244:	f040 80a8 	bne.w	802d398 <__kernel_rem_pio2f+0x31c>
 802d248:	1e6b      	subs	r3, r5, #1
 802d24a:	4618      	mov	r0, r3
 802d24c:	2200      	movs	r2, #0
 802d24e:	4548      	cmp	r0, r9
 802d250:	da4d      	bge.n	802d2ee <__kernel_rem_pio2f+0x272>
 802d252:	2a00      	cmp	r2, #0
 802d254:	f000 8087 	beq.w	802d366 <__kernel_rem_pio2f+0x2ea>
 802d258:	aa06      	add	r2, sp, #24
 802d25a:	3c08      	subs	r4, #8
 802d25c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802d260:	2900      	cmp	r1, #0
 802d262:	f000 808d 	beq.w	802d380 <__kernel_rem_pio2f+0x304>
 802d266:	4620      	mov	r0, r4
 802d268:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802d26c:	9302      	str	r3, [sp, #8]
 802d26e:	f000 fc09 	bl	802da84 <scalbnf>
 802d272:	9b02      	ldr	r3, [sp, #8]
 802d274:	ed9f 7a46 	vldr	s14, [pc, #280]	; 802d390 <__kernel_rem_pio2f+0x314>
 802d278:	0099      	lsls	r1, r3, #2
 802d27a:	aa42      	add	r2, sp, #264	; 0x108
 802d27c:	1850      	adds	r0, r2, r1
 802d27e:	1d05      	adds	r5, r0, #4
 802d280:	461c      	mov	r4, r3
 802d282:	2c00      	cmp	r4, #0
 802d284:	f280 80b8 	bge.w	802d3f8 <__kernel_rem_pio2f+0x37c>
 802d288:	2500      	movs	r5, #0
 802d28a:	1b5c      	subs	r4, r3, r5
 802d28c:	2c00      	cmp	r4, #0
 802d28e:	f2c0 80d8 	blt.w	802d442 <__kernel_rem_pio2f+0x3c6>
 802d292:	4f3d      	ldr	r7, [pc, #244]	; (802d388 <__kernel_rem_pio2f+0x30c>)
 802d294:	eddf 7a3f 	vldr	s15, [pc, #252]	; 802d394 <__kernel_rem_pio2f+0x318>
 802d298:	2400      	movs	r4, #0
 802d29a:	e0c6      	b.n	802d42a <__kernel_rem_pio2f+0x3ae>
 802d29c:	f04f 0802 	mov.w	r8, #2
 802d2a0:	e78a      	b.n	802d1b8 <__kernel_rem_pio2f+0x13c>
 802d2a2:	ab06      	add	r3, sp, #24
 802d2a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802d2a8:	b949      	cbnz	r1, 802d2be <__kernel_rem_pio2f+0x242>
 802d2aa:	b12b      	cbz	r3, 802d2b8 <__kernel_rem_pio2f+0x23c>
 802d2ac:	aa06      	add	r2, sp, #24
 802d2ae:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802d2b2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802d2b6:	2301      	movs	r3, #1
 802d2b8:	3001      	adds	r0, #1
 802d2ba:	4619      	mov	r1, r3
 802d2bc:	e781      	b.n	802d1c2 <__kernel_rem_pio2f+0x146>
 802d2be:	aa06      	add	r2, sp, #24
 802d2c0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 802d2c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802d2c8:	460b      	mov	r3, r1
 802d2ca:	e7f5      	b.n	802d2b8 <__kernel_rem_pio2f+0x23c>
 802d2cc:	1e68      	subs	r0, r5, #1
 802d2ce:	ab06      	add	r3, sp, #24
 802d2d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802d2d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802d2d8:	aa06      	add	r2, sp, #24
 802d2da:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 802d2de:	e779      	b.n	802d1d4 <__kernel_rem_pio2f+0x158>
 802d2e0:	1e68      	subs	r0, r5, #1
 802d2e2:	ab06      	add	r3, sp, #24
 802d2e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 802d2e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802d2ec:	e7f4      	b.n	802d2d8 <__kernel_rem_pio2f+0x25c>
 802d2ee:	a906      	add	r1, sp, #24
 802d2f0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802d2f4:	3801      	subs	r0, #1
 802d2f6:	430a      	orrs	r2, r1
 802d2f8:	e7a9      	b.n	802d24e <__kernel_rem_pio2f+0x1d2>
 802d2fa:	f10c 0c01 	add.w	ip, ip, #1
 802d2fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802d302:	2a00      	cmp	r2, #0
 802d304:	d0f9      	beq.n	802d2fa <__kernel_rem_pio2f+0x27e>
 802d306:	eb0b 0305 	add.w	r3, fp, r5
 802d30a:	aa1a      	add	r2, sp, #104	; 0x68
 802d30c:	009b      	lsls	r3, r3, #2
 802d30e:	1898      	adds	r0, r3, r2
 802d310:	3004      	adds	r0, #4
 802d312:	1c69      	adds	r1, r5, #1
 802d314:	3704      	adds	r7, #4
 802d316:	2200      	movs	r2, #0
 802d318:	4465      	add	r5, ip
 802d31a:	9005      	str	r0, [sp, #20]
 802d31c:	428d      	cmp	r5, r1
 802d31e:	f6ff af0a 	blt.w	802d136 <__kernel_rem_pio2f+0xba>
 802d322:	a81a      	add	r0, sp, #104	; 0x68
 802d324:	eb02 0c03 	add.w	ip, r2, r3
 802d328:	4484      	add	ip, r0
 802d32a:	9803      	ldr	r0, [sp, #12]
 802d32c:	f8dd e008 	ldr.w	lr, [sp, #8]
 802d330:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 802d334:	9001      	str	r0, [sp, #4]
 802d336:	ee07 0a90 	vmov	s15, r0
 802d33a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d33e:	9805      	ldr	r0, [sp, #20]
 802d340:	edcc 7a00 	vstr	s15, [ip]
 802d344:	eddf 7a13 	vldr	s15, [pc, #76]	; 802d394 <__kernel_rem_pio2f+0x318>
 802d348:	eb00 0802 	add.w	r8, r0, r2
 802d34c:	f04f 0c00 	mov.w	ip, #0
 802d350:	45d4      	cmp	ip, sl
 802d352:	dd0c      	ble.n	802d36e <__kernel_rem_pio2f+0x2f2>
 802d354:	eb02 0c07 	add.w	ip, r2, r7
 802d358:	a842      	add	r0, sp, #264	; 0x108
 802d35a:	4484      	add	ip, r0
 802d35c:	edcc 7a01 	vstr	s15, [ip, #4]
 802d360:	3101      	adds	r1, #1
 802d362:	3204      	adds	r2, #4
 802d364:	e7da      	b.n	802d31c <__kernel_rem_pio2f+0x2a0>
 802d366:	9b04      	ldr	r3, [sp, #16]
 802d368:	f04f 0c01 	mov.w	ip, #1
 802d36c:	e7c7      	b.n	802d2fe <__kernel_rem_pio2f+0x282>
 802d36e:	ecfe 6a01 	vldmia	lr!, {s13}
 802d372:	ed38 7a01 	vldmdb	r8!, {s14}
 802d376:	f10c 0c01 	add.w	ip, ip, #1
 802d37a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d37e:	e7e7      	b.n	802d350 <__kernel_rem_pio2f+0x2d4>
 802d380:	3b01      	subs	r3, #1
 802d382:	e769      	b.n	802d258 <__kernel_rem_pio2f+0x1dc>
 802d384:	0803031c 	.word	0x0803031c
 802d388:	080302f0 	.word	0x080302f0
 802d38c:	43800000 	.word	0x43800000
 802d390:	3b800000 	.word	0x3b800000
 802d394:	00000000 	.word	0x00000000
 802d398:	4260      	negs	r0, r4
 802d39a:	eeb0 0a48 	vmov.f32	s0, s16
 802d39e:	f000 fb71 	bl	802da84 <scalbnf>
 802d3a2:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 802d38c <__kernel_rem_pio2f+0x310>
 802d3a6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802d3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d3ae:	db1a      	blt.n	802d3e6 <__kernel_rem_pio2f+0x36a>
 802d3b0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802d390 <__kernel_rem_pio2f+0x314>
 802d3b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 802d3b8:	aa06      	add	r2, sp, #24
 802d3ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d3be:	a906      	add	r1, sp, #24
 802d3c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d3c4:	3408      	adds	r4, #8
 802d3c6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802d3ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d3ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d3d2:	ee10 3a10 	vmov	r3, s0
 802d3d6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802d3da:	1c6b      	adds	r3, r5, #1
 802d3dc:	ee17 2a90 	vmov	r2, s15
 802d3e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802d3e4:	e73f      	b.n	802d266 <__kernel_rem_pio2f+0x1ea>
 802d3e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d3ea:	aa06      	add	r2, sp, #24
 802d3ec:	ee10 3a10 	vmov	r3, s0
 802d3f0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802d3f4:	462b      	mov	r3, r5
 802d3f6:	e736      	b.n	802d266 <__kernel_rem_pio2f+0x1ea>
 802d3f8:	aa06      	add	r2, sp, #24
 802d3fa:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 802d3fe:	9202      	str	r2, [sp, #8]
 802d400:	ee07 2a90 	vmov	s15, r2
 802d404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d408:	3c01      	subs	r4, #1
 802d40a:	ee67 7a80 	vmul.f32	s15, s15, s0
 802d40e:	ee20 0a07 	vmul.f32	s0, s0, s14
 802d412:	ed65 7a01 	vstmdb	r5!, {s15}
 802d416:	e734      	b.n	802d282 <__kernel_rem_pio2f+0x206>
 802d418:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 802d41c:	ecf7 6a01 	vldmia	r7!, {s13}
 802d420:	ed9c 7a00 	vldr	s14, [ip]
 802d424:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d428:	3401      	adds	r4, #1
 802d42a:	454c      	cmp	r4, r9
 802d42c:	dc01      	bgt.n	802d432 <__kernel_rem_pio2f+0x3b6>
 802d42e:	42a5      	cmp	r5, r4
 802d430:	daf2      	bge.n	802d418 <__kernel_rem_pio2f+0x39c>
 802d432:	aa56      	add	r2, sp, #344	; 0x158
 802d434:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 802d438:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 802d43c:	3501      	adds	r5, #1
 802d43e:	3804      	subs	r0, #4
 802d440:	e723      	b.n	802d28a <__kernel_rem_pio2f+0x20e>
 802d442:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802d444:	2a03      	cmp	r2, #3
 802d446:	d84d      	bhi.n	802d4e4 <__kernel_rem_pio2f+0x468>
 802d448:	e8df f002 	tbb	[pc, r2]
 802d44c:	021f1f3e 	.word	0x021f1f3e
 802d450:	aa56      	add	r2, sp, #344	; 0x158
 802d452:	4411      	add	r1, r2
 802d454:	399c      	subs	r1, #156	; 0x9c
 802d456:	4608      	mov	r0, r1
 802d458:	461c      	mov	r4, r3
 802d45a:	2c00      	cmp	r4, #0
 802d45c:	dc5f      	bgt.n	802d51e <__kernel_rem_pio2f+0x4a2>
 802d45e:	4608      	mov	r0, r1
 802d460:	461c      	mov	r4, r3
 802d462:	2c01      	cmp	r4, #1
 802d464:	dc6b      	bgt.n	802d53e <__kernel_rem_pio2f+0x4c2>
 802d466:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 802d394 <__kernel_rem_pio2f+0x318>
 802d46a:	2b01      	cmp	r3, #1
 802d46c:	dc77      	bgt.n	802d55e <__kernel_rem_pio2f+0x4e2>
 802d46e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802d472:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802d476:	f1b8 0f00 	cmp.w	r8, #0
 802d47a:	d176      	bne.n	802d56a <__kernel_rem_pio2f+0x4ee>
 802d47c:	edc6 6a00 	vstr	s13, [r6]
 802d480:	ed86 7a01 	vstr	s14, [r6, #4]
 802d484:	edc6 7a02 	vstr	s15, [r6, #8]
 802d488:	e02c      	b.n	802d4e4 <__kernel_rem_pio2f+0x468>
 802d48a:	aa56      	add	r2, sp, #344	; 0x158
 802d48c:	4411      	add	r1, r2
 802d48e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 802d394 <__kernel_rem_pio2f+0x318>
 802d492:	399c      	subs	r1, #156	; 0x9c
 802d494:	4618      	mov	r0, r3
 802d496:	2800      	cmp	r0, #0
 802d498:	da32      	bge.n	802d500 <__kernel_rem_pio2f+0x484>
 802d49a:	f1b8 0f00 	cmp.w	r8, #0
 802d49e:	d035      	beq.n	802d50c <__kernel_rem_pio2f+0x490>
 802d4a0:	eef1 7a47 	vneg.f32	s15, s14
 802d4a4:	edc6 7a00 	vstr	s15, [r6]
 802d4a8:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802d4ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d4b0:	a82f      	add	r0, sp, #188	; 0xbc
 802d4b2:	2101      	movs	r1, #1
 802d4b4:	428b      	cmp	r3, r1
 802d4b6:	da2c      	bge.n	802d512 <__kernel_rem_pio2f+0x496>
 802d4b8:	f1b8 0f00 	cmp.w	r8, #0
 802d4bc:	d001      	beq.n	802d4c2 <__kernel_rem_pio2f+0x446>
 802d4be:	eef1 7a67 	vneg.f32	s15, s15
 802d4c2:	edc6 7a01 	vstr	s15, [r6, #4]
 802d4c6:	e00d      	b.n	802d4e4 <__kernel_rem_pio2f+0x468>
 802d4c8:	aa56      	add	r2, sp, #344	; 0x158
 802d4ca:	4411      	add	r1, r2
 802d4cc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802d394 <__kernel_rem_pio2f+0x318>
 802d4d0:	399c      	subs	r1, #156	; 0x9c
 802d4d2:	2b00      	cmp	r3, #0
 802d4d4:	da0e      	bge.n	802d4f4 <__kernel_rem_pio2f+0x478>
 802d4d6:	f1b8 0f00 	cmp.w	r8, #0
 802d4da:	d001      	beq.n	802d4e0 <__kernel_rem_pio2f+0x464>
 802d4dc:	eef1 7a67 	vneg.f32	s15, s15
 802d4e0:	edc6 7a00 	vstr	s15, [r6]
 802d4e4:	9b01      	ldr	r3, [sp, #4]
 802d4e6:	f003 0007 	and.w	r0, r3, #7
 802d4ea:	b057      	add	sp, #348	; 0x15c
 802d4ec:	ecbd 8b04 	vpop	{d8-d9}
 802d4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d4f4:	ed31 7a01 	vldmdb	r1!, {s14}
 802d4f8:	3b01      	subs	r3, #1
 802d4fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d4fe:	e7e8      	b.n	802d4d2 <__kernel_rem_pio2f+0x456>
 802d500:	ed71 7a01 	vldmdb	r1!, {s15}
 802d504:	3801      	subs	r0, #1
 802d506:	ee37 7a27 	vadd.f32	s14, s14, s15
 802d50a:	e7c4      	b.n	802d496 <__kernel_rem_pio2f+0x41a>
 802d50c:	eef0 7a47 	vmov.f32	s15, s14
 802d510:	e7c8      	b.n	802d4a4 <__kernel_rem_pio2f+0x428>
 802d512:	ecb0 7a01 	vldmia	r0!, {s14}
 802d516:	3101      	adds	r1, #1
 802d518:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d51c:	e7ca      	b.n	802d4b4 <__kernel_rem_pio2f+0x438>
 802d51e:	ed50 7a02 	vldr	s15, [r0, #-8]
 802d522:	ed70 6a01 	vldmdb	r0!, {s13}
 802d526:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d52a:	3c01      	subs	r4, #1
 802d52c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d530:	ed00 7a01 	vstr	s14, [r0, #-4]
 802d534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d538:	edc0 7a00 	vstr	s15, [r0]
 802d53c:	e78d      	b.n	802d45a <__kernel_rem_pio2f+0x3de>
 802d53e:	ed50 7a02 	vldr	s15, [r0, #-8]
 802d542:	ed70 6a01 	vldmdb	r0!, {s13}
 802d546:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802d54a:	3c01      	subs	r4, #1
 802d54c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d550:	ed00 7a01 	vstr	s14, [r0, #-4]
 802d554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802d558:	edc0 7a00 	vstr	s15, [r0]
 802d55c:	e781      	b.n	802d462 <__kernel_rem_pio2f+0x3e6>
 802d55e:	ed31 7a01 	vldmdb	r1!, {s14}
 802d562:	3b01      	subs	r3, #1
 802d564:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d568:	e77f      	b.n	802d46a <__kernel_rem_pio2f+0x3ee>
 802d56a:	eef1 6a66 	vneg.f32	s13, s13
 802d56e:	eeb1 7a47 	vneg.f32	s14, s14
 802d572:	edc6 6a00 	vstr	s13, [r6]
 802d576:	ed86 7a01 	vstr	s14, [r6, #4]
 802d57a:	eef1 7a67 	vneg.f32	s15, s15
 802d57e:	e781      	b.n	802d484 <__kernel_rem_pio2f+0x408>

0802d580 <__kernel_sinf>:
 802d580:	ee10 3a10 	vmov	r3, s0
 802d584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d588:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802d58c:	da04      	bge.n	802d598 <__kernel_sinf+0x18>
 802d58e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802d592:	ee17 3a90 	vmov	r3, s15
 802d596:	b35b      	cbz	r3, 802d5f0 <__kernel_sinf+0x70>
 802d598:	ee20 7a00 	vmul.f32	s14, s0, s0
 802d59c:	eddf 7a15 	vldr	s15, [pc, #84]	; 802d5f4 <__kernel_sinf+0x74>
 802d5a0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802d5f8 <__kernel_sinf+0x78>
 802d5a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 802d5a8:	eddf 7a14 	vldr	s15, [pc, #80]	; 802d5fc <__kernel_sinf+0x7c>
 802d5ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d5b0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802d600 <__kernel_sinf+0x80>
 802d5b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 802d5b8:	eddf 7a12 	vldr	s15, [pc, #72]	; 802d604 <__kernel_sinf+0x84>
 802d5bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 802d5c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 802d5c4:	b930      	cbnz	r0, 802d5d4 <__kernel_sinf+0x54>
 802d5c6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802d608 <__kernel_sinf+0x88>
 802d5ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 802d5ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 802d5d2:	4770      	bx	lr
 802d5d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802d5d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802d5dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 802d5e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802d5e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 802d60c <__kernel_sinf+0x8c>
 802d5e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802d5ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 802d5f0:	4770      	bx	lr
 802d5f2:	bf00      	nop
 802d5f4:	2f2ec9d3 	.word	0x2f2ec9d3
 802d5f8:	b2d72f34 	.word	0xb2d72f34
 802d5fc:	3638ef1b 	.word	0x3638ef1b
 802d600:	b9500d01 	.word	0xb9500d01
 802d604:	3c088889 	.word	0x3c088889
 802d608:	be2aaaab 	.word	0xbe2aaaab
 802d60c:	3e2aaaab 	.word	0x3e2aaaab

0802d610 <finite>:
 802d610:	ee10 3a90 	vmov	r3, s1
 802d614:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 802d618:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802d61c:	0fc0      	lsrs	r0, r0, #31
 802d61e:	4770      	bx	lr

0802d620 <matherr>:
 802d620:	2000      	movs	r0, #0
 802d622:	4770      	bx	lr
 802d624:	0000      	movs	r0, r0
	...

0802d628 <nan>:
 802d628:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802d630 <nan+0x8>
 802d62c:	4770      	bx	lr
 802d62e:	bf00      	nop
 802d630:	00000000 	.word	0x00000000
 802d634:	7ff80000 	.word	0x7ff80000

0802d638 <rint>:
 802d638:	b530      	push	{r4, r5, lr}
 802d63a:	b085      	sub	sp, #20
 802d63c:	ed8d 0b00 	vstr	d0, [sp]
 802d640:	e9dd 2300 	ldrd	r2, r3, [sp]
 802d644:	f3c3 510a 	ubfx	r1, r3, #20, #11
 802d648:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 802d64c:	2813      	cmp	r0, #19
 802d64e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 802d652:	dc5a      	bgt.n	802d70a <rint+0xd2>
 802d654:	2800      	cmp	r0, #0
 802d656:	da2f      	bge.n	802d6b8 <rint+0x80>
 802d658:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d65c:	4311      	orrs	r1, r2
 802d65e:	d027      	beq.n	802d6b0 <rint+0x78>
 802d660:	f3c3 0513 	ubfx	r5, r3, #0, #20
 802d664:	4315      	orrs	r5, r2
 802d666:	426a      	negs	r2, r5
 802d668:	432a      	orrs	r2, r5
 802d66a:	0b12      	lsrs	r2, r2, #12
 802d66c:	0c5b      	lsrs	r3, r3, #17
 802d66e:	045b      	lsls	r3, r3, #17
 802d670:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 802d674:	e9dd 0100 	ldrd	r0, r1, [sp]
 802d678:	ea42 0103 	orr.w	r1, r2, r3
 802d67c:	4b31      	ldr	r3, [pc, #196]	; (802d744 <rint+0x10c>)
 802d67e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802d682:	ed93 6b00 	vldr	d6, [r3]
 802d686:	ec41 0b17 	vmov	d7, r0, r1
 802d68a:	ee36 7b07 	vadd.f64	d7, d6, d7
 802d68e:	ed8d 7b02 	vstr	d7, [sp, #8]
 802d692:	ed9d 7b02 	vldr	d7, [sp, #8]
 802d696:	ee37 7b46 	vsub.f64	d7, d7, d6
 802d69a:	ed8d 7b00 	vstr	d7, [sp]
 802d69e:	9b01      	ldr	r3, [sp, #4]
 802d6a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802d6a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d6a8:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 802d6ac:	e9cd 0100 	strd	r0, r1, [sp]
 802d6b0:	ed9d 0b00 	vldr	d0, [sp]
 802d6b4:	b005      	add	sp, #20
 802d6b6:	bd30      	pop	{r4, r5, pc}
 802d6b8:	4923      	ldr	r1, [pc, #140]	; (802d748 <rint+0x110>)
 802d6ba:	4101      	asrs	r1, r0
 802d6bc:	ea03 0501 	and.w	r5, r3, r1
 802d6c0:	4315      	orrs	r5, r2
 802d6c2:	d0f5      	beq.n	802d6b0 <rint+0x78>
 802d6c4:	0849      	lsrs	r1, r1, #1
 802d6c6:	ea03 0501 	and.w	r5, r3, r1
 802d6ca:	432a      	orrs	r2, r5
 802d6cc:	d00b      	beq.n	802d6e6 <rint+0xae>
 802d6ce:	ea23 0101 	bic.w	r1, r3, r1
 802d6d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802d6d6:	2813      	cmp	r0, #19
 802d6d8:	fa43 f300 	asr.w	r3, r3, r0
 802d6dc:	bf0c      	ite	eq
 802d6de:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 802d6e2:	2200      	movne	r2, #0
 802d6e4:	430b      	orrs	r3, r1
 802d6e6:	4619      	mov	r1, r3
 802d6e8:	4b16      	ldr	r3, [pc, #88]	; (802d744 <rint+0x10c>)
 802d6ea:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 802d6ee:	ed94 6b00 	vldr	d6, [r4]
 802d6f2:	4610      	mov	r0, r2
 802d6f4:	ec41 0b17 	vmov	d7, r0, r1
 802d6f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 802d6fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 802d700:	ed9d 7b02 	vldr	d7, [sp, #8]
 802d704:	ee37 7b46 	vsub.f64	d7, d7, d6
 802d708:	e008      	b.n	802d71c <rint+0xe4>
 802d70a:	2833      	cmp	r0, #51	; 0x33
 802d70c:	dd09      	ble.n	802d722 <rint+0xea>
 802d70e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 802d712:	d1cd      	bne.n	802d6b0 <rint+0x78>
 802d714:	ed9d 7b00 	vldr	d7, [sp]
 802d718:	ee37 7b07 	vadd.f64	d7, d7, d7
 802d71c:	ed8d 7b00 	vstr	d7, [sp]
 802d720:	e7c6      	b.n	802d6b0 <rint+0x78>
 802d722:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 802d726:	f04f 31ff 	mov.w	r1, #4294967295
 802d72a:	40c1      	lsrs	r1, r0
 802d72c:	420a      	tst	r2, r1
 802d72e:	d0bf      	beq.n	802d6b0 <rint+0x78>
 802d730:	0849      	lsrs	r1, r1, #1
 802d732:	420a      	tst	r2, r1
 802d734:	bf1f      	itttt	ne
 802d736:	ea22 0101 	bicne.w	r1, r2, r1
 802d73a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 802d73e:	4102      	asrne	r2, r0
 802d740:	430a      	orrne	r2, r1
 802d742:	e7d0      	b.n	802d6e6 <rint+0xae>
 802d744:	08030328 	.word	0x08030328
 802d748:	000fffff 	.word	0x000fffff
 802d74c:	00000000 	.word	0x00000000

0802d750 <scalbn>:
 802d750:	b500      	push	{lr}
 802d752:	ed2d 8b02 	vpush	{d8}
 802d756:	b083      	sub	sp, #12
 802d758:	ed8d 0b00 	vstr	d0, [sp]
 802d75c:	9b01      	ldr	r3, [sp, #4]
 802d75e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802d762:	b9a2      	cbnz	r2, 802d78e <scalbn+0x3e>
 802d764:	9a00      	ldr	r2, [sp, #0]
 802d766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d76a:	4313      	orrs	r3, r2
 802d76c:	d03a      	beq.n	802d7e4 <scalbn+0x94>
 802d76e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 802d828 <scalbn+0xd8>
 802d772:	4b35      	ldr	r3, [pc, #212]	; (802d848 <scalbn+0xf8>)
 802d774:	ee20 7b07 	vmul.f64	d7, d0, d7
 802d778:	4298      	cmp	r0, r3
 802d77a:	ed8d 7b00 	vstr	d7, [sp]
 802d77e:	da11      	bge.n	802d7a4 <scalbn+0x54>
 802d780:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 802d830 <scalbn+0xe0>
 802d784:	ed9d 6b00 	vldr	d6, [sp]
 802d788:	ee27 7b06 	vmul.f64	d7, d7, d6
 802d78c:	e007      	b.n	802d79e <scalbn+0x4e>
 802d78e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802d792:	428a      	cmp	r2, r1
 802d794:	d10a      	bne.n	802d7ac <scalbn+0x5c>
 802d796:	ed9d 7b00 	vldr	d7, [sp]
 802d79a:	ee37 7b07 	vadd.f64	d7, d7, d7
 802d79e:	ed8d 7b00 	vstr	d7, [sp]
 802d7a2:	e01f      	b.n	802d7e4 <scalbn+0x94>
 802d7a4:	9b01      	ldr	r3, [sp, #4]
 802d7a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802d7aa:	3a36      	subs	r2, #54	; 0x36
 802d7ac:	4402      	add	r2, r0
 802d7ae:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802d7b2:	428a      	cmp	r2, r1
 802d7b4:	dd0a      	ble.n	802d7cc <scalbn+0x7c>
 802d7b6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 802d838 <scalbn+0xe8>
 802d7ba:	eeb0 0b48 	vmov.f64	d0, d8
 802d7be:	ed9d 1b00 	vldr	d1, [sp]
 802d7c2:	f000 f9bf 	bl	802db44 <copysign>
 802d7c6:	ee20 7b08 	vmul.f64	d7, d0, d8
 802d7ca:	e7e8      	b.n	802d79e <scalbn+0x4e>
 802d7cc:	2a00      	cmp	r2, #0
 802d7ce:	dd10      	ble.n	802d7f2 <scalbn+0xa2>
 802d7d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802d7d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802d7d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802d7dc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802d7e0:	e9cd 0100 	strd	r0, r1, [sp]
 802d7e4:	ed9d 0b00 	vldr	d0, [sp]
 802d7e8:	b003      	add	sp, #12
 802d7ea:	ecbd 8b02 	vpop	{d8}
 802d7ee:	f85d fb04 	ldr.w	pc, [sp], #4
 802d7f2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802d7f6:	da06      	bge.n	802d806 <scalbn+0xb6>
 802d7f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 802d7fc:	4298      	cmp	r0, r3
 802d7fe:	dcda      	bgt.n	802d7b6 <scalbn+0x66>
 802d800:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 802d830 <scalbn+0xe0>
 802d804:	e7d9      	b.n	802d7ba <scalbn+0x6a>
 802d806:	e9dd 0100 	ldrd	r0, r1, [sp]
 802d80a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802d80e:	3236      	adds	r2, #54	; 0x36
 802d810:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802d814:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802d818:	ec41 0b17 	vmov	d7, r0, r1
 802d81c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 802d840 <scalbn+0xf0>
 802d820:	e7b2      	b.n	802d788 <scalbn+0x38>
 802d822:	bf00      	nop
 802d824:	f3af 8000 	nop.w
 802d828:	00000000 	.word	0x00000000
 802d82c:	43500000 	.word	0x43500000
 802d830:	c2f8f359 	.word	0xc2f8f359
 802d834:	01a56e1f 	.word	0x01a56e1f
 802d838:	8800759c 	.word	0x8800759c
 802d83c:	7e37e43c 	.word	0x7e37e43c
 802d840:	00000000 	.word	0x00000000
 802d844:	3c900000 	.word	0x3c900000
 802d848:	ffff3cb0 	.word	0xffff3cb0

0802d84c <atanf>:
 802d84c:	b538      	push	{r3, r4, r5, lr}
 802d84e:	ee10 5a10 	vmov	r5, s0
 802d852:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802d856:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 802d85a:	eef0 7a40 	vmov.f32	s15, s0
 802d85e:	db0f      	blt.n	802d880 <atanf+0x34>
 802d860:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802d864:	dd04      	ble.n	802d870 <atanf+0x24>
 802d866:	ee70 7a00 	vadd.f32	s15, s0, s0
 802d86a:	eeb0 0a67 	vmov.f32	s0, s15
 802d86e:	bd38      	pop	{r3, r4, r5, pc}
 802d870:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 802d9a4 <atanf+0x158>
 802d874:	eddf 7a4c 	vldr	s15, [pc, #304]	; 802d9a8 <atanf+0x15c>
 802d878:	2d00      	cmp	r5, #0
 802d87a:	fe77 7a87 	vselgt.f32	s15, s15, s14
 802d87e:	e7f4      	b.n	802d86a <atanf+0x1e>
 802d880:	4b4a      	ldr	r3, [pc, #296]	; (802d9ac <atanf+0x160>)
 802d882:	429c      	cmp	r4, r3
 802d884:	dc10      	bgt.n	802d8a8 <atanf+0x5c>
 802d886:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 802d88a:	da0a      	bge.n	802d8a2 <atanf+0x56>
 802d88c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 802d9b0 <atanf+0x164>
 802d890:	ee30 7a07 	vadd.f32	s14, s0, s14
 802d894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802d898:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802d89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d8a0:	dce3      	bgt.n	802d86a <atanf+0x1e>
 802d8a2:	f04f 33ff 	mov.w	r3, #4294967295
 802d8a6:	e013      	b.n	802d8d0 <atanf+0x84>
 802d8a8:	f000 f8a2 	bl	802d9f0 <fabsf>
 802d8ac:	4b41      	ldr	r3, [pc, #260]	; (802d9b4 <atanf+0x168>)
 802d8ae:	429c      	cmp	r4, r3
 802d8b0:	dc4f      	bgt.n	802d952 <atanf+0x106>
 802d8b2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 802d8b6:	429c      	cmp	r4, r3
 802d8b8:	dc41      	bgt.n	802d93e <atanf+0xf2>
 802d8ba:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802d8be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802d8c2:	eea0 7a27 	vfma.f32	s14, s0, s15
 802d8c6:	2300      	movs	r3, #0
 802d8c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d8cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802d8d0:	1c5a      	adds	r2, r3, #1
 802d8d2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802d8d6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802d9b8 <atanf+0x16c>
 802d8da:	eddf 5a38 	vldr	s11, [pc, #224]	; 802d9bc <atanf+0x170>
 802d8de:	ed9f 5a38 	vldr	s10, [pc, #224]	; 802d9c0 <atanf+0x174>
 802d8e2:	ee66 6a06 	vmul.f32	s13, s12, s12
 802d8e6:	eee6 5a87 	vfma.f32	s11, s13, s14
 802d8ea:	ed9f 7a36 	vldr	s14, [pc, #216]	; 802d9c4 <atanf+0x178>
 802d8ee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802d8f2:	eddf 5a35 	vldr	s11, [pc, #212]	; 802d9c8 <atanf+0x17c>
 802d8f6:	eee7 5a26 	vfma.f32	s11, s14, s13
 802d8fa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 802d9cc <atanf+0x180>
 802d8fe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802d902:	eddf 5a33 	vldr	s11, [pc, #204]	; 802d9d0 <atanf+0x184>
 802d906:	eee7 5a26 	vfma.f32	s11, s14, s13
 802d90a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 802d9d4 <atanf+0x188>
 802d90e:	eea6 5a87 	vfma.f32	s10, s13, s14
 802d912:	ed9f 7a31 	vldr	s14, [pc, #196]	; 802d9d8 <atanf+0x18c>
 802d916:	eea5 7a26 	vfma.f32	s14, s10, s13
 802d91a:	ed9f 5a30 	vldr	s10, [pc, #192]	; 802d9dc <atanf+0x190>
 802d91e:	eea7 5a26 	vfma.f32	s10, s14, s13
 802d922:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 802d9e0 <atanf+0x194>
 802d926:	eea5 7a26 	vfma.f32	s14, s10, s13
 802d92a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802d92e:	eea5 7a86 	vfma.f32	s14, s11, s12
 802d932:	ee27 7a27 	vmul.f32	s14, s14, s15
 802d936:	d121      	bne.n	802d97c <atanf+0x130>
 802d938:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d93c:	e795      	b.n	802d86a <atanf+0x1e>
 802d93e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802d942:	ee30 7a67 	vsub.f32	s14, s0, s15
 802d946:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d94a:	2301      	movs	r3, #1
 802d94c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802d950:	e7be      	b.n	802d8d0 <atanf+0x84>
 802d952:	4b24      	ldr	r3, [pc, #144]	; (802d9e4 <atanf+0x198>)
 802d954:	429c      	cmp	r4, r3
 802d956:	dc0b      	bgt.n	802d970 <atanf+0x124>
 802d958:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 802d95c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802d960:	eea0 7a27 	vfma.f32	s14, s0, s15
 802d964:	2302      	movs	r3, #2
 802d966:	ee70 6a67 	vsub.f32	s13, s0, s15
 802d96a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802d96e:	e7af      	b.n	802d8d0 <atanf+0x84>
 802d970:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802d974:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802d978:	2303      	movs	r3, #3
 802d97a:	e7a9      	b.n	802d8d0 <atanf+0x84>
 802d97c:	4a1a      	ldr	r2, [pc, #104]	; (802d9e8 <atanf+0x19c>)
 802d97e:	491b      	ldr	r1, [pc, #108]	; (802d9ec <atanf+0x1a0>)
 802d980:	009b      	lsls	r3, r3, #2
 802d982:	441a      	add	r2, r3
 802d984:	440b      	add	r3, r1
 802d986:	edd3 6a00 	vldr	s13, [r3]
 802d98a:	ee37 7a66 	vsub.f32	s14, s14, s13
 802d98e:	2d00      	cmp	r5, #0
 802d990:	ee77 7a67 	vsub.f32	s15, s14, s15
 802d994:	ed92 7a00 	vldr	s14, [r2]
 802d998:	ee77 7a67 	vsub.f32	s15, s14, s15
 802d99c:	bfb8      	it	lt
 802d99e:	eef1 7a67 	vneglt.f32	s15, s15
 802d9a2:	e762      	b.n	802d86a <atanf+0x1e>
 802d9a4:	bfc90fdb 	.word	0xbfc90fdb
 802d9a8:	3fc90fdb 	.word	0x3fc90fdb
 802d9ac:	3edfffff 	.word	0x3edfffff
 802d9b0:	7149f2ca 	.word	0x7149f2ca
 802d9b4:	3f97ffff 	.word	0x3f97ffff
 802d9b8:	3c8569d7 	.word	0x3c8569d7
 802d9bc:	3d4bda59 	.word	0x3d4bda59
 802d9c0:	bd6ef16b 	.word	0xbd6ef16b
 802d9c4:	3d886b35 	.word	0x3d886b35
 802d9c8:	3dba2e6e 	.word	0x3dba2e6e
 802d9cc:	3e124925 	.word	0x3e124925
 802d9d0:	3eaaaaab 	.word	0x3eaaaaab
 802d9d4:	bd15a221 	.word	0xbd15a221
 802d9d8:	bd9d8795 	.word	0xbd9d8795
 802d9dc:	bde38e38 	.word	0xbde38e38
 802d9e0:	be4ccccd 	.word	0xbe4ccccd
 802d9e4:	401bffff 	.word	0x401bffff
 802d9e8:	08030338 	.word	0x08030338
 802d9ec:	08030348 	.word	0x08030348

0802d9f0 <fabsf>:
 802d9f0:	ee10 3a10 	vmov	r3, s0
 802d9f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d9f8:	ee00 3a10 	vmov	s0, r3
 802d9fc:	4770      	bx	lr
	...

0802da00 <floorf>:
 802da00:	ee10 3a10 	vmov	r3, s0
 802da04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802da08:	0dca      	lsrs	r2, r1, #23
 802da0a:	3a7f      	subs	r2, #127	; 0x7f
 802da0c:	2a16      	cmp	r2, #22
 802da0e:	dc2a      	bgt.n	802da66 <floorf+0x66>
 802da10:	2a00      	cmp	r2, #0
 802da12:	da11      	bge.n	802da38 <floorf+0x38>
 802da14:	eddf 7a18 	vldr	s15, [pc, #96]	; 802da78 <floorf+0x78>
 802da18:	ee30 0a27 	vadd.f32	s0, s0, s15
 802da1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802da20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802da24:	dd05      	ble.n	802da32 <floorf+0x32>
 802da26:	2b00      	cmp	r3, #0
 802da28:	da23      	bge.n	802da72 <floorf+0x72>
 802da2a:	4a14      	ldr	r2, [pc, #80]	; (802da7c <floorf+0x7c>)
 802da2c:	2900      	cmp	r1, #0
 802da2e:	bf18      	it	ne
 802da30:	4613      	movne	r3, r2
 802da32:	ee00 3a10 	vmov	s0, r3
 802da36:	4770      	bx	lr
 802da38:	4911      	ldr	r1, [pc, #68]	; (802da80 <floorf+0x80>)
 802da3a:	4111      	asrs	r1, r2
 802da3c:	420b      	tst	r3, r1
 802da3e:	d0fa      	beq.n	802da36 <floorf+0x36>
 802da40:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802da78 <floorf+0x78>
 802da44:	ee30 0a27 	vadd.f32	s0, s0, s15
 802da48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802da4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802da50:	ddef      	ble.n	802da32 <floorf+0x32>
 802da52:	2b00      	cmp	r3, #0
 802da54:	bfbe      	ittt	lt
 802da56:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802da5a:	fa40 f202 	asrlt.w	r2, r0, r2
 802da5e:	189b      	addlt	r3, r3, r2
 802da60:	ea23 0301 	bic.w	r3, r3, r1
 802da64:	e7e5      	b.n	802da32 <floorf+0x32>
 802da66:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802da6a:	d3e4      	bcc.n	802da36 <floorf+0x36>
 802da6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 802da70:	4770      	bx	lr
 802da72:	2300      	movs	r3, #0
 802da74:	e7dd      	b.n	802da32 <floorf+0x32>
 802da76:	bf00      	nop
 802da78:	7149f2ca 	.word	0x7149f2ca
 802da7c:	bf800000 	.word	0xbf800000
 802da80:	007fffff 	.word	0x007fffff

0802da84 <scalbnf>:
 802da84:	b508      	push	{r3, lr}
 802da86:	ee10 2a10 	vmov	r2, s0
 802da8a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 802da8e:	ed2d 8b02 	vpush	{d8}
 802da92:	eef0 0a40 	vmov.f32	s1, s0
 802da96:	d004      	beq.n	802daa2 <scalbnf+0x1e>
 802da98:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802da9c:	d306      	bcc.n	802daac <scalbnf+0x28>
 802da9e:	ee70 0a00 	vadd.f32	s1, s0, s0
 802daa2:	ecbd 8b02 	vpop	{d8}
 802daa6:	eeb0 0a60 	vmov.f32	s0, s1
 802daaa:	bd08      	pop	{r3, pc}
 802daac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802dab0:	d21c      	bcs.n	802daec <scalbnf+0x68>
 802dab2:	4b1f      	ldr	r3, [pc, #124]	; (802db30 <scalbnf+0xac>)
 802dab4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802db34 <scalbnf+0xb0>
 802dab8:	4298      	cmp	r0, r3
 802daba:	ee60 0a27 	vmul.f32	s1, s0, s15
 802dabe:	db10      	blt.n	802dae2 <scalbnf+0x5e>
 802dac0:	ee10 2a90 	vmov	r2, s1
 802dac4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 802dac8:	3b19      	subs	r3, #25
 802daca:	4403      	add	r3, r0
 802dacc:	2bfe      	cmp	r3, #254	; 0xfe
 802dace:	dd0f      	ble.n	802daf0 <scalbnf+0x6c>
 802dad0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 802db38 <scalbnf+0xb4>
 802dad4:	eeb0 0a48 	vmov.f32	s0, s16
 802dad8:	f000 f843 	bl	802db62 <copysignf>
 802dadc:	ee60 0a08 	vmul.f32	s1, s0, s16
 802dae0:	e7df      	b.n	802daa2 <scalbnf+0x1e>
 802dae2:	eddf 7a16 	vldr	s15, [pc, #88]	; 802db3c <scalbnf+0xb8>
 802dae6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 802daea:	e7da      	b.n	802daa2 <scalbnf+0x1e>
 802daec:	0ddb      	lsrs	r3, r3, #23
 802daee:	e7ec      	b.n	802daca <scalbnf+0x46>
 802daf0:	2b00      	cmp	r3, #0
 802daf2:	dd06      	ble.n	802db02 <scalbnf+0x7e>
 802daf4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802daf8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802dafc:	ee00 3a90 	vmov	s1, r3
 802db00:	e7cf      	b.n	802daa2 <scalbnf+0x1e>
 802db02:	f113 0f16 	cmn.w	r3, #22
 802db06:	da06      	bge.n	802db16 <scalbnf+0x92>
 802db08:	f24c 3350 	movw	r3, #50000	; 0xc350
 802db0c:	4298      	cmp	r0, r3
 802db0e:	dcdf      	bgt.n	802dad0 <scalbnf+0x4c>
 802db10:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 802db3c <scalbnf+0xb8>
 802db14:	e7de      	b.n	802dad4 <scalbnf+0x50>
 802db16:	3319      	adds	r3, #25
 802db18:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802db1c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802db20:	eddf 7a07 	vldr	s15, [pc, #28]	; 802db40 <scalbnf+0xbc>
 802db24:	ee07 3a10 	vmov	s14, r3
 802db28:	ee67 0a27 	vmul.f32	s1, s14, s15
 802db2c:	e7b9      	b.n	802daa2 <scalbnf+0x1e>
 802db2e:	bf00      	nop
 802db30:	ffff3cb0 	.word	0xffff3cb0
 802db34:	4c000000 	.word	0x4c000000
 802db38:	7149f2ca 	.word	0x7149f2ca
 802db3c:	0da24260 	.word	0x0da24260
 802db40:	33000000 	.word	0x33000000

0802db44 <copysign>:
 802db44:	ec51 0b10 	vmov	r0, r1, d0
 802db48:	ee11 0a90 	vmov	r0, s3
 802db4c:	ee10 2a10 	vmov	r2, s0
 802db50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802db54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 802db58:	ea41 0300 	orr.w	r3, r1, r0
 802db5c:	ec43 2b10 	vmov	d0, r2, r3
 802db60:	4770      	bx	lr

0802db62 <copysignf>:
 802db62:	ee10 3a10 	vmov	r3, s0
 802db66:	ee10 2a90 	vmov	r2, s1
 802db6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802db6e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802db72:	4313      	orrs	r3, r2
 802db74:	ee00 3a10 	vmov	s0, r3
 802db78:	4770      	bx	lr
	...

0802db7c <__assert_func>:
 802db7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802db7e:	461c      	mov	r4, r3
 802db80:	4b09      	ldr	r3, [pc, #36]	; (802dba8 <__assert_func+0x2c>)
 802db82:	681b      	ldr	r3, [r3, #0]
 802db84:	4605      	mov	r5, r0
 802db86:	68d8      	ldr	r0, [r3, #12]
 802db88:	b152      	cbz	r2, 802dba0 <__assert_func+0x24>
 802db8a:	4b08      	ldr	r3, [pc, #32]	; (802dbac <__assert_func+0x30>)
 802db8c:	9100      	str	r1, [sp, #0]
 802db8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802db92:	4907      	ldr	r1, [pc, #28]	; (802dbb0 <__assert_func+0x34>)
 802db94:	462b      	mov	r3, r5
 802db96:	4622      	mov	r2, r4
 802db98:	f000 f814 	bl	802dbc4 <fiprintf>
 802db9c:	f000 fcb8 	bl	802e510 <abort>
 802dba0:	4b04      	ldr	r3, [pc, #16]	; (802dbb4 <__assert_func+0x38>)
 802dba2:	461a      	mov	r2, r3
 802dba4:	e7f2      	b.n	802db8c <__assert_func+0x10>
 802dba6:	bf00      	nop
 802dba8:	24000670 	.word	0x24000670
 802dbac:	08030358 	.word	0x08030358
 802dbb0:	08030365 	.word	0x08030365
 802dbb4:	08030393 	.word	0x08030393

0802dbb8 <__errno>:
 802dbb8:	4b01      	ldr	r3, [pc, #4]	; (802dbc0 <__errno+0x8>)
 802dbba:	6818      	ldr	r0, [r3, #0]
 802dbbc:	4770      	bx	lr
 802dbbe:	bf00      	nop
 802dbc0:	24000670 	.word	0x24000670

0802dbc4 <fiprintf>:
 802dbc4:	b40e      	push	{r1, r2, r3}
 802dbc6:	b503      	push	{r0, r1, lr}
 802dbc8:	4601      	mov	r1, r0
 802dbca:	ab03      	add	r3, sp, #12
 802dbcc:	4805      	ldr	r0, [pc, #20]	; (802dbe4 <fiprintf+0x20>)
 802dbce:	f853 2b04 	ldr.w	r2, [r3], #4
 802dbd2:	6800      	ldr	r0, [r0, #0]
 802dbd4:	9301      	str	r3, [sp, #4]
 802dbd6:	f000 f867 	bl	802dca8 <_vfiprintf_r>
 802dbda:	b002      	add	sp, #8
 802dbdc:	f85d eb04 	ldr.w	lr, [sp], #4
 802dbe0:	b003      	add	sp, #12
 802dbe2:	4770      	bx	lr
 802dbe4:	24000670 	.word	0x24000670

0802dbe8 <__libc_init_array>:
 802dbe8:	b570      	push	{r4, r5, r6, lr}
 802dbea:	4e0d      	ldr	r6, [pc, #52]	; (802dc20 <__libc_init_array+0x38>)
 802dbec:	4c0d      	ldr	r4, [pc, #52]	; (802dc24 <__libc_init_array+0x3c>)
 802dbee:	1ba4      	subs	r4, r4, r6
 802dbf0:	10a4      	asrs	r4, r4, #2
 802dbf2:	2500      	movs	r5, #0
 802dbf4:	42a5      	cmp	r5, r4
 802dbf6:	d109      	bne.n	802dc0c <__libc_init_array+0x24>
 802dbf8:	4e0b      	ldr	r6, [pc, #44]	; (802dc28 <__libc_init_array+0x40>)
 802dbfa:	4c0c      	ldr	r4, [pc, #48]	; (802dc2c <__libc_init_array+0x44>)
 802dbfc:	f001 f9ba 	bl	802ef74 <_init>
 802dc00:	1ba4      	subs	r4, r4, r6
 802dc02:	10a4      	asrs	r4, r4, #2
 802dc04:	2500      	movs	r5, #0
 802dc06:	42a5      	cmp	r5, r4
 802dc08:	d105      	bne.n	802dc16 <__libc_init_array+0x2e>
 802dc0a:	bd70      	pop	{r4, r5, r6, pc}
 802dc0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802dc10:	4798      	blx	r3
 802dc12:	3501      	adds	r5, #1
 802dc14:	e7ee      	b.n	802dbf4 <__libc_init_array+0xc>
 802dc16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802dc1a:	4798      	blx	r3
 802dc1c:	3501      	adds	r5, #1
 802dc1e:	e7f2      	b.n	802dc06 <__libc_init_array+0x1e>
 802dc20:	08030434 	.word	0x08030434
 802dc24:	08030434 	.word	0x08030434
 802dc28:	08030434 	.word	0x08030434
 802dc2c:	0803045c 	.word	0x0803045c

0802dc30 <memcpy>:
 802dc30:	b510      	push	{r4, lr}
 802dc32:	1e43      	subs	r3, r0, #1
 802dc34:	440a      	add	r2, r1
 802dc36:	4291      	cmp	r1, r2
 802dc38:	d100      	bne.n	802dc3c <memcpy+0xc>
 802dc3a:	bd10      	pop	{r4, pc}
 802dc3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802dc40:	f803 4f01 	strb.w	r4, [r3, #1]!
 802dc44:	e7f7      	b.n	802dc36 <memcpy+0x6>

0802dc46 <memset>:
 802dc46:	4402      	add	r2, r0
 802dc48:	4603      	mov	r3, r0
 802dc4a:	4293      	cmp	r3, r2
 802dc4c:	d100      	bne.n	802dc50 <memset+0xa>
 802dc4e:	4770      	bx	lr
 802dc50:	f803 1b01 	strb.w	r1, [r3], #1
 802dc54:	e7f9      	b.n	802dc4a <memset+0x4>

0802dc56 <__sfputc_r>:
 802dc56:	6893      	ldr	r3, [r2, #8]
 802dc58:	3b01      	subs	r3, #1
 802dc5a:	2b00      	cmp	r3, #0
 802dc5c:	b410      	push	{r4}
 802dc5e:	6093      	str	r3, [r2, #8]
 802dc60:	da08      	bge.n	802dc74 <__sfputc_r+0x1e>
 802dc62:	6994      	ldr	r4, [r2, #24]
 802dc64:	42a3      	cmp	r3, r4
 802dc66:	db01      	blt.n	802dc6c <__sfputc_r+0x16>
 802dc68:	290a      	cmp	r1, #10
 802dc6a:	d103      	bne.n	802dc74 <__sfputc_r+0x1e>
 802dc6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802dc70:	f000 bb8e 	b.w	802e390 <__swbuf_r>
 802dc74:	6813      	ldr	r3, [r2, #0]
 802dc76:	1c58      	adds	r0, r3, #1
 802dc78:	6010      	str	r0, [r2, #0]
 802dc7a:	7019      	strb	r1, [r3, #0]
 802dc7c:	4608      	mov	r0, r1
 802dc7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802dc82:	4770      	bx	lr

0802dc84 <__sfputs_r>:
 802dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dc86:	4606      	mov	r6, r0
 802dc88:	460f      	mov	r7, r1
 802dc8a:	4614      	mov	r4, r2
 802dc8c:	18d5      	adds	r5, r2, r3
 802dc8e:	42ac      	cmp	r4, r5
 802dc90:	d101      	bne.n	802dc96 <__sfputs_r+0x12>
 802dc92:	2000      	movs	r0, #0
 802dc94:	e007      	b.n	802dca6 <__sfputs_r+0x22>
 802dc96:	463a      	mov	r2, r7
 802dc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 802dc9c:	4630      	mov	r0, r6
 802dc9e:	f7ff ffda 	bl	802dc56 <__sfputc_r>
 802dca2:	1c43      	adds	r3, r0, #1
 802dca4:	d1f3      	bne.n	802dc8e <__sfputs_r+0xa>
 802dca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802dca8 <_vfiprintf_r>:
 802dca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dcac:	460c      	mov	r4, r1
 802dcae:	b09d      	sub	sp, #116	; 0x74
 802dcb0:	4617      	mov	r7, r2
 802dcb2:	461d      	mov	r5, r3
 802dcb4:	4606      	mov	r6, r0
 802dcb6:	b118      	cbz	r0, 802dcc0 <_vfiprintf_r+0x18>
 802dcb8:	6983      	ldr	r3, [r0, #24]
 802dcba:	b90b      	cbnz	r3, 802dcc0 <_vfiprintf_r+0x18>
 802dcbc:	f000 fd20 	bl	802e700 <__sinit>
 802dcc0:	4b7c      	ldr	r3, [pc, #496]	; (802deb4 <_vfiprintf_r+0x20c>)
 802dcc2:	429c      	cmp	r4, r3
 802dcc4:	d158      	bne.n	802dd78 <_vfiprintf_r+0xd0>
 802dcc6:	6874      	ldr	r4, [r6, #4]
 802dcc8:	89a3      	ldrh	r3, [r4, #12]
 802dcca:	0718      	lsls	r0, r3, #28
 802dccc:	d55e      	bpl.n	802dd8c <_vfiprintf_r+0xe4>
 802dcce:	6923      	ldr	r3, [r4, #16]
 802dcd0:	2b00      	cmp	r3, #0
 802dcd2:	d05b      	beq.n	802dd8c <_vfiprintf_r+0xe4>
 802dcd4:	2300      	movs	r3, #0
 802dcd6:	9309      	str	r3, [sp, #36]	; 0x24
 802dcd8:	2320      	movs	r3, #32
 802dcda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802dcde:	2330      	movs	r3, #48	; 0x30
 802dce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802dce4:	9503      	str	r5, [sp, #12]
 802dce6:	f04f 0b01 	mov.w	fp, #1
 802dcea:	46b8      	mov	r8, r7
 802dcec:	4645      	mov	r5, r8
 802dcee:	f815 3b01 	ldrb.w	r3, [r5], #1
 802dcf2:	b10b      	cbz	r3, 802dcf8 <_vfiprintf_r+0x50>
 802dcf4:	2b25      	cmp	r3, #37	; 0x25
 802dcf6:	d154      	bne.n	802dda2 <_vfiprintf_r+0xfa>
 802dcf8:	ebb8 0a07 	subs.w	sl, r8, r7
 802dcfc:	d00b      	beq.n	802dd16 <_vfiprintf_r+0x6e>
 802dcfe:	4653      	mov	r3, sl
 802dd00:	463a      	mov	r2, r7
 802dd02:	4621      	mov	r1, r4
 802dd04:	4630      	mov	r0, r6
 802dd06:	f7ff ffbd 	bl	802dc84 <__sfputs_r>
 802dd0a:	3001      	adds	r0, #1
 802dd0c:	f000 80c2 	beq.w	802de94 <_vfiprintf_r+0x1ec>
 802dd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dd12:	4453      	add	r3, sl
 802dd14:	9309      	str	r3, [sp, #36]	; 0x24
 802dd16:	f898 3000 	ldrb.w	r3, [r8]
 802dd1a:	2b00      	cmp	r3, #0
 802dd1c:	f000 80ba 	beq.w	802de94 <_vfiprintf_r+0x1ec>
 802dd20:	2300      	movs	r3, #0
 802dd22:	f04f 32ff 	mov.w	r2, #4294967295
 802dd26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802dd2a:	9304      	str	r3, [sp, #16]
 802dd2c:	9307      	str	r3, [sp, #28]
 802dd2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802dd32:	931a      	str	r3, [sp, #104]	; 0x68
 802dd34:	46a8      	mov	r8, r5
 802dd36:	2205      	movs	r2, #5
 802dd38:	f818 1b01 	ldrb.w	r1, [r8], #1
 802dd3c:	485e      	ldr	r0, [pc, #376]	; (802deb8 <_vfiprintf_r+0x210>)
 802dd3e:	f7d2 facf 	bl	80002e0 <memchr>
 802dd42:	9b04      	ldr	r3, [sp, #16]
 802dd44:	bb78      	cbnz	r0, 802dda6 <_vfiprintf_r+0xfe>
 802dd46:	06d9      	lsls	r1, r3, #27
 802dd48:	bf44      	itt	mi
 802dd4a:	2220      	movmi	r2, #32
 802dd4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802dd50:	071a      	lsls	r2, r3, #28
 802dd52:	bf44      	itt	mi
 802dd54:	222b      	movmi	r2, #43	; 0x2b
 802dd56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802dd5a:	782a      	ldrb	r2, [r5, #0]
 802dd5c:	2a2a      	cmp	r2, #42	; 0x2a
 802dd5e:	d02a      	beq.n	802ddb6 <_vfiprintf_r+0x10e>
 802dd60:	9a07      	ldr	r2, [sp, #28]
 802dd62:	46a8      	mov	r8, r5
 802dd64:	2000      	movs	r0, #0
 802dd66:	250a      	movs	r5, #10
 802dd68:	4641      	mov	r1, r8
 802dd6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802dd6e:	3b30      	subs	r3, #48	; 0x30
 802dd70:	2b09      	cmp	r3, #9
 802dd72:	d969      	bls.n	802de48 <_vfiprintf_r+0x1a0>
 802dd74:	b360      	cbz	r0, 802ddd0 <_vfiprintf_r+0x128>
 802dd76:	e024      	b.n	802ddc2 <_vfiprintf_r+0x11a>
 802dd78:	4b50      	ldr	r3, [pc, #320]	; (802debc <_vfiprintf_r+0x214>)
 802dd7a:	429c      	cmp	r4, r3
 802dd7c:	d101      	bne.n	802dd82 <_vfiprintf_r+0xda>
 802dd7e:	68b4      	ldr	r4, [r6, #8]
 802dd80:	e7a2      	b.n	802dcc8 <_vfiprintf_r+0x20>
 802dd82:	4b4f      	ldr	r3, [pc, #316]	; (802dec0 <_vfiprintf_r+0x218>)
 802dd84:	429c      	cmp	r4, r3
 802dd86:	bf08      	it	eq
 802dd88:	68f4      	ldreq	r4, [r6, #12]
 802dd8a:	e79d      	b.n	802dcc8 <_vfiprintf_r+0x20>
 802dd8c:	4621      	mov	r1, r4
 802dd8e:	4630      	mov	r0, r6
 802dd90:	f000 fb50 	bl	802e434 <__swsetup_r>
 802dd94:	2800      	cmp	r0, #0
 802dd96:	d09d      	beq.n	802dcd4 <_vfiprintf_r+0x2c>
 802dd98:	f04f 30ff 	mov.w	r0, #4294967295
 802dd9c:	b01d      	add	sp, #116	; 0x74
 802dd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dda2:	46a8      	mov	r8, r5
 802dda4:	e7a2      	b.n	802dcec <_vfiprintf_r+0x44>
 802dda6:	4a44      	ldr	r2, [pc, #272]	; (802deb8 <_vfiprintf_r+0x210>)
 802dda8:	1a80      	subs	r0, r0, r2
 802ddaa:	fa0b f000 	lsl.w	r0, fp, r0
 802ddae:	4318      	orrs	r0, r3
 802ddb0:	9004      	str	r0, [sp, #16]
 802ddb2:	4645      	mov	r5, r8
 802ddb4:	e7be      	b.n	802dd34 <_vfiprintf_r+0x8c>
 802ddb6:	9a03      	ldr	r2, [sp, #12]
 802ddb8:	1d11      	adds	r1, r2, #4
 802ddba:	6812      	ldr	r2, [r2, #0]
 802ddbc:	9103      	str	r1, [sp, #12]
 802ddbe:	2a00      	cmp	r2, #0
 802ddc0:	db01      	blt.n	802ddc6 <_vfiprintf_r+0x11e>
 802ddc2:	9207      	str	r2, [sp, #28]
 802ddc4:	e004      	b.n	802ddd0 <_vfiprintf_r+0x128>
 802ddc6:	4252      	negs	r2, r2
 802ddc8:	f043 0302 	orr.w	r3, r3, #2
 802ddcc:	9207      	str	r2, [sp, #28]
 802ddce:	9304      	str	r3, [sp, #16]
 802ddd0:	f898 3000 	ldrb.w	r3, [r8]
 802ddd4:	2b2e      	cmp	r3, #46	; 0x2e
 802ddd6:	d10e      	bne.n	802ddf6 <_vfiprintf_r+0x14e>
 802ddd8:	f898 3001 	ldrb.w	r3, [r8, #1]
 802dddc:	2b2a      	cmp	r3, #42	; 0x2a
 802ddde:	d138      	bne.n	802de52 <_vfiprintf_r+0x1aa>
 802dde0:	9b03      	ldr	r3, [sp, #12]
 802dde2:	1d1a      	adds	r2, r3, #4
 802dde4:	681b      	ldr	r3, [r3, #0]
 802dde6:	9203      	str	r2, [sp, #12]
 802dde8:	2b00      	cmp	r3, #0
 802ddea:	bfb8      	it	lt
 802ddec:	f04f 33ff 	movlt.w	r3, #4294967295
 802ddf0:	f108 0802 	add.w	r8, r8, #2
 802ddf4:	9305      	str	r3, [sp, #20]
 802ddf6:	4d33      	ldr	r5, [pc, #204]	; (802dec4 <_vfiprintf_r+0x21c>)
 802ddf8:	f898 1000 	ldrb.w	r1, [r8]
 802ddfc:	2203      	movs	r2, #3
 802ddfe:	4628      	mov	r0, r5
 802de00:	f7d2 fa6e 	bl	80002e0 <memchr>
 802de04:	b140      	cbz	r0, 802de18 <_vfiprintf_r+0x170>
 802de06:	2340      	movs	r3, #64	; 0x40
 802de08:	1b40      	subs	r0, r0, r5
 802de0a:	fa03 f000 	lsl.w	r0, r3, r0
 802de0e:	9b04      	ldr	r3, [sp, #16]
 802de10:	4303      	orrs	r3, r0
 802de12:	f108 0801 	add.w	r8, r8, #1
 802de16:	9304      	str	r3, [sp, #16]
 802de18:	f898 1000 	ldrb.w	r1, [r8]
 802de1c:	482a      	ldr	r0, [pc, #168]	; (802dec8 <_vfiprintf_r+0x220>)
 802de1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802de22:	2206      	movs	r2, #6
 802de24:	f108 0701 	add.w	r7, r8, #1
 802de28:	f7d2 fa5a 	bl	80002e0 <memchr>
 802de2c:	2800      	cmp	r0, #0
 802de2e:	d037      	beq.n	802dea0 <_vfiprintf_r+0x1f8>
 802de30:	4b26      	ldr	r3, [pc, #152]	; (802decc <_vfiprintf_r+0x224>)
 802de32:	bb1b      	cbnz	r3, 802de7c <_vfiprintf_r+0x1d4>
 802de34:	9b03      	ldr	r3, [sp, #12]
 802de36:	3307      	adds	r3, #7
 802de38:	f023 0307 	bic.w	r3, r3, #7
 802de3c:	3308      	adds	r3, #8
 802de3e:	9303      	str	r3, [sp, #12]
 802de40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802de42:	444b      	add	r3, r9
 802de44:	9309      	str	r3, [sp, #36]	; 0x24
 802de46:	e750      	b.n	802dcea <_vfiprintf_r+0x42>
 802de48:	fb05 3202 	mla	r2, r5, r2, r3
 802de4c:	2001      	movs	r0, #1
 802de4e:	4688      	mov	r8, r1
 802de50:	e78a      	b.n	802dd68 <_vfiprintf_r+0xc0>
 802de52:	2300      	movs	r3, #0
 802de54:	f108 0801 	add.w	r8, r8, #1
 802de58:	9305      	str	r3, [sp, #20]
 802de5a:	4619      	mov	r1, r3
 802de5c:	250a      	movs	r5, #10
 802de5e:	4640      	mov	r0, r8
 802de60:	f810 2b01 	ldrb.w	r2, [r0], #1
 802de64:	3a30      	subs	r2, #48	; 0x30
 802de66:	2a09      	cmp	r2, #9
 802de68:	d903      	bls.n	802de72 <_vfiprintf_r+0x1ca>
 802de6a:	2b00      	cmp	r3, #0
 802de6c:	d0c3      	beq.n	802ddf6 <_vfiprintf_r+0x14e>
 802de6e:	9105      	str	r1, [sp, #20]
 802de70:	e7c1      	b.n	802ddf6 <_vfiprintf_r+0x14e>
 802de72:	fb05 2101 	mla	r1, r5, r1, r2
 802de76:	2301      	movs	r3, #1
 802de78:	4680      	mov	r8, r0
 802de7a:	e7f0      	b.n	802de5e <_vfiprintf_r+0x1b6>
 802de7c:	ab03      	add	r3, sp, #12
 802de7e:	9300      	str	r3, [sp, #0]
 802de80:	4622      	mov	r2, r4
 802de82:	4b13      	ldr	r3, [pc, #76]	; (802ded0 <_vfiprintf_r+0x228>)
 802de84:	a904      	add	r1, sp, #16
 802de86:	4630      	mov	r0, r6
 802de88:	f3af 8000 	nop.w
 802de8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 802de90:	4681      	mov	r9, r0
 802de92:	d1d5      	bne.n	802de40 <_vfiprintf_r+0x198>
 802de94:	89a3      	ldrh	r3, [r4, #12]
 802de96:	065b      	lsls	r3, r3, #25
 802de98:	f53f af7e 	bmi.w	802dd98 <_vfiprintf_r+0xf0>
 802de9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802de9e:	e77d      	b.n	802dd9c <_vfiprintf_r+0xf4>
 802dea0:	ab03      	add	r3, sp, #12
 802dea2:	9300      	str	r3, [sp, #0]
 802dea4:	4622      	mov	r2, r4
 802dea6:	4b0a      	ldr	r3, [pc, #40]	; (802ded0 <_vfiprintf_r+0x228>)
 802dea8:	a904      	add	r1, sp, #16
 802deaa:	4630      	mov	r0, r6
 802deac:	f000 f888 	bl	802dfc0 <_printf_i>
 802deb0:	e7ec      	b.n	802de8c <_vfiprintf_r+0x1e4>
 802deb2:	bf00      	nop
 802deb4:	080303ec 	.word	0x080303ec
 802deb8:	08030398 	.word	0x08030398
 802debc:	0803040c 	.word	0x0803040c
 802dec0:	080303cc 	.word	0x080303cc
 802dec4:	0803039e 	.word	0x0803039e
 802dec8:	080303a2 	.word	0x080303a2
 802decc:	00000000 	.word	0x00000000
 802ded0:	0802dc85 	.word	0x0802dc85

0802ded4 <_printf_common>:
 802ded4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ded8:	4691      	mov	r9, r2
 802deda:	461f      	mov	r7, r3
 802dedc:	688a      	ldr	r2, [r1, #8]
 802dede:	690b      	ldr	r3, [r1, #16]
 802dee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802dee4:	4293      	cmp	r3, r2
 802dee6:	bfb8      	it	lt
 802dee8:	4613      	movlt	r3, r2
 802deea:	f8c9 3000 	str.w	r3, [r9]
 802deee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802def2:	4606      	mov	r6, r0
 802def4:	460c      	mov	r4, r1
 802def6:	b112      	cbz	r2, 802defe <_printf_common+0x2a>
 802def8:	3301      	adds	r3, #1
 802defa:	f8c9 3000 	str.w	r3, [r9]
 802defe:	6823      	ldr	r3, [r4, #0]
 802df00:	0699      	lsls	r1, r3, #26
 802df02:	bf42      	ittt	mi
 802df04:	f8d9 3000 	ldrmi.w	r3, [r9]
 802df08:	3302      	addmi	r3, #2
 802df0a:	f8c9 3000 	strmi.w	r3, [r9]
 802df0e:	6825      	ldr	r5, [r4, #0]
 802df10:	f015 0506 	ands.w	r5, r5, #6
 802df14:	d107      	bne.n	802df26 <_printf_common+0x52>
 802df16:	f104 0a19 	add.w	sl, r4, #25
 802df1a:	68e3      	ldr	r3, [r4, #12]
 802df1c:	f8d9 2000 	ldr.w	r2, [r9]
 802df20:	1a9b      	subs	r3, r3, r2
 802df22:	42ab      	cmp	r3, r5
 802df24:	dc28      	bgt.n	802df78 <_printf_common+0xa4>
 802df26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802df2a:	6822      	ldr	r2, [r4, #0]
 802df2c:	3300      	adds	r3, #0
 802df2e:	bf18      	it	ne
 802df30:	2301      	movne	r3, #1
 802df32:	0692      	lsls	r2, r2, #26
 802df34:	d42d      	bmi.n	802df92 <_printf_common+0xbe>
 802df36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802df3a:	4639      	mov	r1, r7
 802df3c:	4630      	mov	r0, r6
 802df3e:	47c0      	blx	r8
 802df40:	3001      	adds	r0, #1
 802df42:	d020      	beq.n	802df86 <_printf_common+0xb2>
 802df44:	6823      	ldr	r3, [r4, #0]
 802df46:	68e5      	ldr	r5, [r4, #12]
 802df48:	f8d9 2000 	ldr.w	r2, [r9]
 802df4c:	f003 0306 	and.w	r3, r3, #6
 802df50:	2b04      	cmp	r3, #4
 802df52:	bf08      	it	eq
 802df54:	1aad      	subeq	r5, r5, r2
 802df56:	68a3      	ldr	r3, [r4, #8]
 802df58:	6922      	ldr	r2, [r4, #16]
 802df5a:	bf0c      	ite	eq
 802df5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802df60:	2500      	movne	r5, #0
 802df62:	4293      	cmp	r3, r2
 802df64:	bfc4      	itt	gt
 802df66:	1a9b      	subgt	r3, r3, r2
 802df68:	18ed      	addgt	r5, r5, r3
 802df6a:	f04f 0900 	mov.w	r9, #0
 802df6e:	341a      	adds	r4, #26
 802df70:	454d      	cmp	r5, r9
 802df72:	d11a      	bne.n	802dfaa <_printf_common+0xd6>
 802df74:	2000      	movs	r0, #0
 802df76:	e008      	b.n	802df8a <_printf_common+0xb6>
 802df78:	2301      	movs	r3, #1
 802df7a:	4652      	mov	r2, sl
 802df7c:	4639      	mov	r1, r7
 802df7e:	4630      	mov	r0, r6
 802df80:	47c0      	blx	r8
 802df82:	3001      	adds	r0, #1
 802df84:	d103      	bne.n	802df8e <_printf_common+0xba>
 802df86:	f04f 30ff 	mov.w	r0, #4294967295
 802df8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802df8e:	3501      	adds	r5, #1
 802df90:	e7c3      	b.n	802df1a <_printf_common+0x46>
 802df92:	18e1      	adds	r1, r4, r3
 802df94:	1c5a      	adds	r2, r3, #1
 802df96:	2030      	movs	r0, #48	; 0x30
 802df98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802df9c:	4422      	add	r2, r4
 802df9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802dfa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802dfa6:	3302      	adds	r3, #2
 802dfa8:	e7c5      	b.n	802df36 <_printf_common+0x62>
 802dfaa:	2301      	movs	r3, #1
 802dfac:	4622      	mov	r2, r4
 802dfae:	4639      	mov	r1, r7
 802dfb0:	4630      	mov	r0, r6
 802dfb2:	47c0      	blx	r8
 802dfb4:	3001      	adds	r0, #1
 802dfb6:	d0e6      	beq.n	802df86 <_printf_common+0xb2>
 802dfb8:	f109 0901 	add.w	r9, r9, #1
 802dfbc:	e7d8      	b.n	802df70 <_printf_common+0x9c>
	...

0802dfc0 <_printf_i>:
 802dfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802dfc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802dfc8:	460c      	mov	r4, r1
 802dfca:	7e09      	ldrb	r1, [r1, #24]
 802dfcc:	b085      	sub	sp, #20
 802dfce:	296e      	cmp	r1, #110	; 0x6e
 802dfd0:	4617      	mov	r7, r2
 802dfd2:	4606      	mov	r6, r0
 802dfd4:	4698      	mov	r8, r3
 802dfd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802dfd8:	f000 80b3 	beq.w	802e142 <_printf_i+0x182>
 802dfdc:	d822      	bhi.n	802e024 <_printf_i+0x64>
 802dfde:	2963      	cmp	r1, #99	; 0x63
 802dfe0:	d036      	beq.n	802e050 <_printf_i+0x90>
 802dfe2:	d80a      	bhi.n	802dffa <_printf_i+0x3a>
 802dfe4:	2900      	cmp	r1, #0
 802dfe6:	f000 80b9 	beq.w	802e15c <_printf_i+0x19c>
 802dfea:	2958      	cmp	r1, #88	; 0x58
 802dfec:	f000 8083 	beq.w	802e0f6 <_printf_i+0x136>
 802dff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802dff4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802dff8:	e032      	b.n	802e060 <_printf_i+0xa0>
 802dffa:	2964      	cmp	r1, #100	; 0x64
 802dffc:	d001      	beq.n	802e002 <_printf_i+0x42>
 802dffe:	2969      	cmp	r1, #105	; 0x69
 802e000:	d1f6      	bne.n	802dff0 <_printf_i+0x30>
 802e002:	6820      	ldr	r0, [r4, #0]
 802e004:	6813      	ldr	r3, [r2, #0]
 802e006:	0605      	lsls	r5, r0, #24
 802e008:	f103 0104 	add.w	r1, r3, #4
 802e00c:	d52a      	bpl.n	802e064 <_printf_i+0xa4>
 802e00e:	681b      	ldr	r3, [r3, #0]
 802e010:	6011      	str	r1, [r2, #0]
 802e012:	2b00      	cmp	r3, #0
 802e014:	da03      	bge.n	802e01e <_printf_i+0x5e>
 802e016:	222d      	movs	r2, #45	; 0x2d
 802e018:	425b      	negs	r3, r3
 802e01a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802e01e:	486f      	ldr	r0, [pc, #444]	; (802e1dc <_printf_i+0x21c>)
 802e020:	220a      	movs	r2, #10
 802e022:	e039      	b.n	802e098 <_printf_i+0xd8>
 802e024:	2973      	cmp	r1, #115	; 0x73
 802e026:	f000 809d 	beq.w	802e164 <_printf_i+0x1a4>
 802e02a:	d808      	bhi.n	802e03e <_printf_i+0x7e>
 802e02c:	296f      	cmp	r1, #111	; 0x6f
 802e02e:	d020      	beq.n	802e072 <_printf_i+0xb2>
 802e030:	2970      	cmp	r1, #112	; 0x70
 802e032:	d1dd      	bne.n	802dff0 <_printf_i+0x30>
 802e034:	6823      	ldr	r3, [r4, #0]
 802e036:	f043 0320 	orr.w	r3, r3, #32
 802e03a:	6023      	str	r3, [r4, #0]
 802e03c:	e003      	b.n	802e046 <_printf_i+0x86>
 802e03e:	2975      	cmp	r1, #117	; 0x75
 802e040:	d017      	beq.n	802e072 <_printf_i+0xb2>
 802e042:	2978      	cmp	r1, #120	; 0x78
 802e044:	d1d4      	bne.n	802dff0 <_printf_i+0x30>
 802e046:	2378      	movs	r3, #120	; 0x78
 802e048:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802e04c:	4864      	ldr	r0, [pc, #400]	; (802e1e0 <_printf_i+0x220>)
 802e04e:	e055      	b.n	802e0fc <_printf_i+0x13c>
 802e050:	6813      	ldr	r3, [r2, #0]
 802e052:	1d19      	adds	r1, r3, #4
 802e054:	681b      	ldr	r3, [r3, #0]
 802e056:	6011      	str	r1, [r2, #0]
 802e058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e060:	2301      	movs	r3, #1
 802e062:	e08c      	b.n	802e17e <_printf_i+0x1be>
 802e064:	681b      	ldr	r3, [r3, #0]
 802e066:	6011      	str	r1, [r2, #0]
 802e068:	f010 0f40 	tst.w	r0, #64	; 0x40
 802e06c:	bf18      	it	ne
 802e06e:	b21b      	sxthne	r3, r3
 802e070:	e7cf      	b.n	802e012 <_printf_i+0x52>
 802e072:	6813      	ldr	r3, [r2, #0]
 802e074:	6825      	ldr	r5, [r4, #0]
 802e076:	1d18      	adds	r0, r3, #4
 802e078:	6010      	str	r0, [r2, #0]
 802e07a:	0628      	lsls	r0, r5, #24
 802e07c:	d501      	bpl.n	802e082 <_printf_i+0xc2>
 802e07e:	681b      	ldr	r3, [r3, #0]
 802e080:	e002      	b.n	802e088 <_printf_i+0xc8>
 802e082:	0668      	lsls	r0, r5, #25
 802e084:	d5fb      	bpl.n	802e07e <_printf_i+0xbe>
 802e086:	881b      	ldrh	r3, [r3, #0]
 802e088:	4854      	ldr	r0, [pc, #336]	; (802e1dc <_printf_i+0x21c>)
 802e08a:	296f      	cmp	r1, #111	; 0x6f
 802e08c:	bf14      	ite	ne
 802e08e:	220a      	movne	r2, #10
 802e090:	2208      	moveq	r2, #8
 802e092:	2100      	movs	r1, #0
 802e094:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e098:	6865      	ldr	r5, [r4, #4]
 802e09a:	60a5      	str	r5, [r4, #8]
 802e09c:	2d00      	cmp	r5, #0
 802e09e:	f2c0 8095 	blt.w	802e1cc <_printf_i+0x20c>
 802e0a2:	6821      	ldr	r1, [r4, #0]
 802e0a4:	f021 0104 	bic.w	r1, r1, #4
 802e0a8:	6021      	str	r1, [r4, #0]
 802e0aa:	2b00      	cmp	r3, #0
 802e0ac:	d13d      	bne.n	802e12a <_printf_i+0x16a>
 802e0ae:	2d00      	cmp	r5, #0
 802e0b0:	f040 808e 	bne.w	802e1d0 <_printf_i+0x210>
 802e0b4:	4665      	mov	r5, ip
 802e0b6:	2a08      	cmp	r2, #8
 802e0b8:	d10b      	bne.n	802e0d2 <_printf_i+0x112>
 802e0ba:	6823      	ldr	r3, [r4, #0]
 802e0bc:	07db      	lsls	r3, r3, #31
 802e0be:	d508      	bpl.n	802e0d2 <_printf_i+0x112>
 802e0c0:	6923      	ldr	r3, [r4, #16]
 802e0c2:	6862      	ldr	r2, [r4, #4]
 802e0c4:	429a      	cmp	r2, r3
 802e0c6:	bfde      	ittt	le
 802e0c8:	2330      	movle	r3, #48	; 0x30
 802e0ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 802e0ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 802e0d2:	ebac 0305 	sub.w	r3, ip, r5
 802e0d6:	6123      	str	r3, [r4, #16]
 802e0d8:	f8cd 8000 	str.w	r8, [sp]
 802e0dc:	463b      	mov	r3, r7
 802e0de:	aa03      	add	r2, sp, #12
 802e0e0:	4621      	mov	r1, r4
 802e0e2:	4630      	mov	r0, r6
 802e0e4:	f7ff fef6 	bl	802ded4 <_printf_common>
 802e0e8:	3001      	adds	r0, #1
 802e0ea:	d14d      	bne.n	802e188 <_printf_i+0x1c8>
 802e0ec:	f04f 30ff 	mov.w	r0, #4294967295
 802e0f0:	b005      	add	sp, #20
 802e0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e0f6:	4839      	ldr	r0, [pc, #228]	; (802e1dc <_printf_i+0x21c>)
 802e0f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802e0fc:	6813      	ldr	r3, [r2, #0]
 802e0fe:	6821      	ldr	r1, [r4, #0]
 802e100:	1d1d      	adds	r5, r3, #4
 802e102:	681b      	ldr	r3, [r3, #0]
 802e104:	6015      	str	r5, [r2, #0]
 802e106:	060a      	lsls	r2, r1, #24
 802e108:	d50b      	bpl.n	802e122 <_printf_i+0x162>
 802e10a:	07ca      	lsls	r2, r1, #31
 802e10c:	bf44      	itt	mi
 802e10e:	f041 0120 	orrmi.w	r1, r1, #32
 802e112:	6021      	strmi	r1, [r4, #0]
 802e114:	b91b      	cbnz	r3, 802e11e <_printf_i+0x15e>
 802e116:	6822      	ldr	r2, [r4, #0]
 802e118:	f022 0220 	bic.w	r2, r2, #32
 802e11c:	6022      	str	r2, [r4, #0]
 802e11e:	2210      	movs	r2, #16
 802e120:	e7b7      	b.n	802e092 <_printf_i+0xd2>
 802e122:	064d      	lsls	r5, r1, #25
 802e124:	bf48      	it	mi
 802e126:	b29b      	uxthmi	r3, r3
 802e128:	e7ef      	b.n	802e10a <_printf_i+0x14a>
 802e12a:	4665      	mov	r5, ip
 802e12c:	fbb3 f1f2 	udiv	r1, r3, r2
 802e130:	fb02 3311 	mls	r3, r2, r1, r3
 802e134:	5cc3      	ldrb	r3, [r0, r3]
 802e136:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802e13a:	460b      	mov	r3, r1
 802e13c:	2900      	cmp	r1, #0
 802e13e:	d1f5      	bne.n	802e12c <_printf_i+0x16c>
 802e140:	e7b9      	b.n	802e0b6 <_printf_i+0xf6>
 802e142:	6813      	ldr	r3, [r2, #0]
 802e144:	6825      	ldr	r5, [r4, #0]
 802e146:	6961      	ldr	r1, [r4, #20]
 802e148:	1d18      	adds	r0, r3, #4
 802e14a:	6010      	str	r0, [r2, #0]
 802e14c:	0628      	lsls	r0, r5, #24
 802e14e:	681b      	ldr	r3, [r3, #0]
 802e150:	d501      	bpl.n	802e156 <_printf_i+0x196>
 802e152:	6019      	str	r1, [r3, #0]
 802e154:	e002      	b.n	802e15c <_printf_i+0x19c>
 802e156:	066a      	lsls	r2, r5, #25
 802e158:	d5fb      	bpl.n	802e152 <_printf_i+0x192>
 802e15a:	8019      	strh	r1, [r3, #0]
 802e15c:	2300      	movs	r3, #0
 802e15e:	6123      	str	r3, [r4, #16]
 802e160:	4665      	mov	r5, ip
 802e162:	e7b9      	b.n	802e0d8 <_printf_i+0x118>
 802e164:	6813      	ldr	r3, [r2, #0]
 802e166:	1d19      	adds	r1, r3, #4
 802e168:	6011      	str	r1, [r2, #0]
 802e16a:	681d      	ldr	r5, [r3, #0]
 802e16c:	6862      	ldr	r2, [r4, #4]
 802e16e:	2100      	movs	r1, #0
 802e170:	4628      	mov	r0, r5
 802e172:	f7d2 f8b5 	bl	80002e0 <memchr>
 802e176:	b108      	cbz	r0, 802e17c <_printf_i+0x1bc>
 802e178:	1b40      	subs	r0, r0, r5
 802e17a:	6060      	str	r0, [r4, #4]
 802e17c:	6863      	ldr	r3, [r4, #4]
 802e17e:	6123      	str	r3, [r4, #16]
 802e180:	2300      	movs	r3, #0
 802e182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e186:	e7a7      	b.n	802e0d8 <_printf_i+0x118>
 802e188:	6923      	ldr	r3, [r4, #16]
 802e18a:	462a      	mov	r2, r5
 802e18c:	4639      	mov	r1, r7
 802e18e:	4630      	mov	r0, r6
 802e190:	47c0      	blx	r8
 802e192:	3001      	adds	r0, #1
 802e194:	d0aa      	beq.n	802e0ec <_printf_i+0x12c>
 802e196:	6823      	ldr	r3, [r4, #0]
 802e198:	079b      	lsls	r3, r3, #30
 802e19a:	d413      	bmi.n	802e1c4 <_printf_i+0x204>
 802e19c:	68e0      	ldr	r0, [r4, #12]
 802e19e:	9b03      	ldr	r3, [sp, #12]
 802e1a0:	4298      	cmp	r0, r3
 802e1a2:	bfb8      	it	lt
 802e1a4:	4618      	movlt	r0, r3
 802e1a6:	e7a3      	b.n	802e0f0 <_printf_i+0x130>
 802e1a8:	2301      	movs	r3, #1
 802e1aa:	464a      	mov	r2, r9
 802e1ac:	4639      	mov	r1, r7
 802e1ae:	4630      	mov	r0, r6
 802e1b0:	47c0      	blx	r8
 802e1b2:	3001      	adds	r0, #1
 802e1b4:	d09a      	beq.n	802e0ec <_printf_i+0x12c>
 802e1b6:	3501      	adds	r5, #1
 802e1b8:	68e3      	ldr	r3, [r4, #12]
 802e1ba:	9a03      	ldr	r2, [sp, #12]
 802e1bc:	1a9b      	subs	r3, r3, r2
 802e1be:	42ab      	cmp	r3, r5
 802e1c0:	dcf2      	bgt.n	802e1a8 <_printf_i+0x1e8>
 802e1c2:	e7eb      	b.n	802e19c <_printf_i+0x1dc>
 802e1c4:	2500      	movs	r5, #0
 802e1c6:	f104 0919 	add.w	r9, r4, #25
 802e1ca:	e7f5      	b.n	802e1b8 <_printf_i+0x1f8>
 802e1cc:	2b00      	cmp	r3, #0
 802e1ce:	d1ac      	bne.n	802e12a <_printf_i+0x16a>
 802e1d0:	7803      	ldrb	r3, [r0, #0]
 802e1d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e1d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e1da:	e76c      	b.n	802e0b6 <_printf_i+0xf6>
 802e1dc:	080303a9 	.word	0x080303a9
 802e1e0:	080303ba 	.word	0x080303ba

0802e1e4 <setvbuf>:
 802e1e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802e1e8:	461d      	mov	r5, r3
 802e1ea:	4b51      	ldr	r3, [pc, #324]	; (802e330 <setvbuf+0x14c>)
 802e1ec:	681e      	ldr	r6, [r3, #0]
 802e1ee:	4604      	mov	r4, r0
 802e1f0:	460f      	mov	r7, r1
 802e1f2:	4690      	mov	r8, r2
 802e1f4:	b126      	cbz	r6, 802e200 <setvbuf+0x1c>
 802e1f6:	69b3      	ldr	r3, [r6, #24]
 802e1f8:	b913      	cbnz	r3, 802e200 <setvbuf+0x1c>
 802e1fa:	4630      	mov	r0, r6
 802e1fc:	f000 fa80 	bl	802e700 <__sinit>
 802e200:	4b4c      	ldr	r3, [pc, #304]	; (802e334 <setvbuf+0x150>)
 802e202:	429c      	cmp	r4, r3
 802e204:	d152      	bne.n	802e2ac <setvbuf+0xc8>
 802e206:	6874      	ldr	r4, [r6, #4]
 802e208:	f1b8 0f02 	cmp.w	r8, #2
 802e20c:	d006      	beq.n	802e21c <setvbuf+0x38>
 802e20e:	f1b8 0f01 	cmp.w	r8, #1
 802e212:	f200 8089 	bhi.w	802e328 <setvbuf+0x144>
 802e216:	2d00      	cmp	r5, #0
 802e218:	f2c0 8086 	blt.w	802e328 <setvbuf+0x144>
 802e21c:	4621      	mov	r1, r4
 802e21e:	4630      	mov	r0, r6
 802e220:	f000 fa04 	bl	802e62c <_fflush_r>
 802e224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e226:	b141      	cbz	r1, 802e23a <setvbuf+0x56>
 802e228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e22c:	4299      	cmp	r1, r3
 802e22e:	d002      	beq.n	802e236 <setvbuf+0x52>
 802e230:	4630      	mov	r0, r6
 802e232:	f000 fb75 	bl	802e920 <_free_r>
 802e236:	2300      	movs	r3, #0
 802e238:	6363      	str	r3, [r4, #52]	; 0x34
 802e23a:	2300      	movs	r3, #0
 802e23c:	61a3      	str	r3, [r4, #24]
 802e23e:	6063      	str	r3, [r4, #4]
 802e240:	89a3      	ldrh	r3, [r4, #12]
 802e242:	061b      	lsls	r3, r3, #24
 802e244:	d503      	bpl.n	802e24e <setvbuf+0x6a>
 802e246:	6921      	ldr	r1, [r4, #16]
 802e248:	4630      	mov	r0, r6
 802e24a:	f000 fb69 	bl	802e920 <_free_r>
 802e24e:	89a3      	ldrh	r3, [r4, #12]
 802e250:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 802e254:	f023 0303 	bic.w	r3, r3, #3
 802e258:	f1b8 0f02 	cmp.w	r8, #2
 802e25c:	81a3      	strh	r3, [r4, #12]
 802e25e:	d05d      	beq.n	802e31c <setvbuf+0x138>
 802e260:	ab01      	add	r3, sp, #4
 802e262:	466a      	mov	r2, sp
 802e264:	4621      	mov	r1, r4
 802e266:	4630      	mov	r0, r6
 802e268:	f000 fad4 	bl	802e814 <__swhatbuf_r>
 802e26c:	89a3      	ldrh	r3, [r4, #12]
 802e26e:	4318      	orrs	r0, r3
 802e270:	81a0      	strh	r0, [r4, #12]
 802e272:	bb2d      	cbnz	r5, 802e2c0 <setvbuf+0xdc>
 802e274:	9d00      	ldr	r5, [sp, #0]
 802e276:	4628      	mov	r0, r5
 802e278:	f000 fb30 	bl	802e8dc <malloc>
 802e27c:	4607      	mov	r7, r0
 802e27e:	2800      	cmp	r0, #0
 802e280:	d14e      	bne.n	802e320 <setvbuf+0x13c>
 802e282:	f8dd 9000 	ldr.w	r9, [sp]
 802e286:	45a9      	cmp	r9, r5
 802e288:	d13c      	bne.n	802e304 <setvbuf+0x120>
 802e28a:	f04f 30ff 	mov.w	r0, #4294967295
 802e28e:	89a3      	ldrh	r3, [r4, #12]
 802e290:	f043 0302 	orr.w	r3, r3, #2
 802e294:	81a3      	strh	r3, [r4, #12]
 802e296:	2300      	movs	r3, #0
 802e298:	60a3      	str	r3, [r4, #8]
 802e29a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802e29e:	6023      	str	r3, [r4, #0]
 802e2a0:	6123      	str	r3, [r4, #16]
 802e2a2:	2301      	movs	r3, #1
 802e2a4:	6163      	str	r3, [r4, #20]
 802e2a6:	b003      	add	sp, #12
 802e2a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e2ac:	4b22      	ldr	r3, [pc, #136]	; (802e338 <setvbuf+0x154>)
 802e2ae:	429c      	cmp	r4, r3
 802e2b0:	d101      	bne.n	802e2b6 <setvbuf+0xd2>
 802e2b2:	68b4      	ldr	r4, [r6, #8]
 802e2b4:	e7a8      	b.n	802e208 <setvbuf+0x24>
 802e2b6:	4b21      	ldr	r3, [pc, #132]	; (802e33c <setvbuf+0x158>)
 802e2b8:	429c      	cmp	r4, r3
 802e2ba:	bf08      	it	eq
 802e2bc:	68f4      	ldreq	r4, [r6, #12]
 802e2be:	e7a3      	b.n	802e208 <setvbuf+0x24>
 802e2c0:	2f00      	cmp	r7, #0
 802e2c2:	d0d8      	beq.n	802e276 <setvbuf+0x92>
 802e2c4:	69b3      	ldr	r3, [r6, #24]
 802e2c6:	b913      	cbnz	r3, 802e2ce <setvbuf+0xea>
 802e2c8:	4630      	mov	r0, r6
 802e2ca:	f000 fa19 	bl	802e700 <__sinit>
 802e2ce:	f1b8 0f01 	cmp.w	r8, #1
 802e2d2:	bf08      	it	eq
 802e2d4:	89a3      	ldrheq	r3, [r4, #12]
 802e2d6:	6027      	str	r7, [r4, #0]
 802e2d8:	bf04      	itt	eq
 802e2da:	f043 0301 	orreq.w	r3, r3, #1
 802e2de:	81a3      	strheq	r3, [r4, #12]
 802e2e0:	89a3      	ldrh	r3, [r4, #12]
 802e2e2:	f013 0008 	ands.w	r0, r3, #8
 802e2e6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 802e2ea:	d01b      	beq.n	802e324 <setvbuf+0x140>
 802e2ec:	f013 0001 	ands.w	r0, r3, #1
 802e2f0:	bf18      	it	ne
 802e2f2:	426d      	negne	r5, r5
 802e2f4:	f04f 0300 	mov.w	r3, #0
 802e2f8:	bf1d      	ittte	ne
 802e2fa:	60a3      	strne	r3, [r4, #8]
 802e2fc:	61a5      	strne	r5, [r4, #24]
 802e2fe:	4618      	movne	r0, r3
 802e300:	60a5      	streq	r5, [r4, #8]
 802e302:	e7d0      	b.n	802e2a6 <setvbuf+0xc2>
 802e304:	4648      	mov	r0, r9
 802e306:	f000 fae9 	bl	802e8dc <malloc>
 802e30a:	4607      	mov	r7, r0
 802e30c:	2800      	cmp	r0, #0
 802e30e:	d0bc      	beq.n	802e28a <setvbuf+0xa6>
 802e310:	89a3      	ldrh	r3, [r4, #12]
 802e312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e316:	81a3      	strh	r3, [r4, #12]
 802e318:	464d      	mov	r5, r9
 802e31a:	e7d3      	b.n	802e2c4 <setvbuf+0xe0>
 802e31c:	2000      	movs	r0, #0
 802e31e:	e7b6      	b.n	802e28e <setvbuf+0xaa>
 802e320:	46a9      	mov	r9, r5
 802e322:	e7f5      	b.n	802e310 <setvbuf+0x12c>
 802e324:	60a0      	str	r0, [r4, #8]
 802e326:	e7be      	b.n	802e2a6 <setvbuf+0xc2>
 802e328:	f04f 30ff 	mov.w	r0, #4294967295
 802e32c:	e7bb      	b.n	802e2a6 <setvbuf+0xc2>
 802e32e:	bf00      	nop
 802e330:	24000670 	.word	0x24000670
 802e334:	080303ec 	.word	0x080303ec
 802e338:	0803040c 	.word	0x0803040c
 802e33c:	080303cc 	.word	0x080303cc

0802e340 <siprintf>:
 802e340:	b40e      	push	{r1, r2, r3}
 802e342:	b500      	push	{lr}
 802e344:	b09c      	sub	sp, #112	; 0x70
 802e346:	ab1d      	add	r3, sp, #116	; 0x74
 802e348:	9002      	str	r0, [sp, #8]
 802e34a:	9006      	str	r0, [sp, #24]
 802e34c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802e350:	4809      	ldr	r0, [pc, #36]	; (802e378 <siprintf+0x38>)
 802e352:	9107      	str	r1, [sp, #28]
 802e354:	9104      	str	r1, [sp, #16]
 802e356:	4909      	ldr	r1, [pc, #36]	; (802e37c <siprintf+0x3c>)
 802e358:	f853 2b04 	ldr.w	r2, [r3], #4
 802e35c:	9105      	str	r1, [sp, #20]
 802e35e:	6800      	ldr	r0, [r0, #0]
 802e360:	9301      	str	r3, [sp, #4]
 802e362:	a902      	add	r1, sp, #8
 802e364:	f000 fc04 	bl	802eb70 <_svfiprintf_r>
 802e368:	9b02      	ldr	r3, [sp, #8]
 802e36a:	2200      	movs	r2, #0
 802e36c:	701a      	strb	r2, [r3, #0]
 802e36e:	b01c      	add	sp, #112	; 0x70
 802e370:	f85d eb04 	ldr.w	lr, [sp], #4
 802e374:	b003      	add	sp, #12
 802e376:	4770      	bx	lr
 802e378:	24000670 	.word	0x24000670
 802e37c:	ffff0208 	.word	0xffff0208

0802e380 <strcpy>:
 802e380:	4603      	mov	r3, r0
 802e382:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e386:	f803 2b01 	strb.w	r2, [r3], #1
 802e38a:	2a00      	cmp	r2, #0
 802e38c:	d1f9      	bne.n	802e382 <strcpy+0x2>
 802e38e:	4770      	bx	lr

0802e390 <__swbuf_r>:
 802e390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e392:	460e      	mov	r6, r1
 802e394:	4614      	mov	r4, r2
 802e396:	4605      	mov	r5, r0
 802e398:	b118      	cbz	r0, 802e3a2 <__swbuf_r+0x12>
 802e39a:	6983      	ldr	r3, [r0, #24]
 802e39c:	b90b      	cbnz	r3, 802e3a2 <__swbuf_r+0x12>
 802e39e:	f000 f9af 	bl	802e700 <__sinit>
 802e3a2:	4b21      	ldr	r3, [pc, #132]	; (802e428 <__swbuf_r+0x98>)
 802e3a4:	429c      	cmp	r4, r3
 802e3a6:	d12a      	bne.n	802e3fe <__swbuf_r+0x6e>
 802e3a8:	686c      	ldr	r4, [r5, #4]
 802e3aa:	69a3      	ldr	r3, [r4, #24]
 802e3ac:	60a3      	str	r3, [r4, #8]
 802e3ae:	89a3      	ldrh	r3, [r4, #12]
 802e3b0:	071a      	lsls	r2, r3, #28
 802e3b2:	d52e      	bpl.n	802e412 <__swbuf_r+0x82>
 802e3b4:	6923      	ldr	r3, [r4, #16]
 802e3b6:	b363      	cbz	r3, 802e412 <__swbuf_r+0x82>
 802e3b8:	6923      	ldr	r3, [r4, #16]
 802e3ba:	6820      	ldr	r0, [r4, #0]
 802e3bc:	1ac0      	subs	r0, r0, r3
 802e3be:	6963      	ldr	r3, [r4, #20]
 802e3c0:	b2f6      	uxtb	r6, r6
 802e3c2:	4283      	cmp	r3, r0
 802e3c4:	4637      	mov	r7, r6
 802e3c6:	dc04      	bgt.n	802e3d2 <__swbuf_r+0x42>
 802e3c8:	4621      	mov	r1, r4
 802e3ca:	4628      	mov	r0, r5
 802e3cc:	f000 f92e 	bl	802e62c <_fflush_r>
 802e3d0:	bb28      	cbnz	r0, 802e41e <__swbuf_r+0x8e>
 802e3d2:	68a3      	ldr	r3, [r4, #8]
 802e3d4:	3b01      	subs	r3, #1
 802e3d6:	60a3      	str	r3, [r4, #8]
 802e3d8:	6823      	ldr	r3, [r4, #0]
 802e3da:	1c5a      	adds	r2, r3, #1
 802e3dc:	6022      	str	r2, [r4, #0]
 802e3de:	701e      	strb	r6, [r3, #0]
 802e3e0:	6963      	ldr	r3, [r4, #20]
 802e3e2:	3001      	adds	r0, #1
 802e3e4:	4283      	cmp	r3, r0
 802e3e6:	d004      	beq.n	802e3f2 <__swbuf_r+0x62>
 802e3e8:	89a3      	ldrh	r3, [r4, #12]
 802e3ea:	07db      	lsls	r3, r3, #31
 802e3ec:	d519      	bpl.n	802e422 <__swbuf_r+0x92>
 802e3ee:	2e0a      	cmp	r6, #10
 802e3f0:	d117      	bne.n	802e422 <__swbuf_r+0x92>
 802e3f2:	4621      	mov	r1, r4
 802e3f4:	4628      	mov	r0, r5
 802e3f6:	f000 f919 	bl	802e62c <_fflush_r>
 802e3fa:	b190      	cbz	r0, 802e422 <__swbuf_r+0x92>
 802e3fc:	e00f      	b.n	802e41e <__swbuf_r+0x8e>
 802e3fe:	4b0b      	ldr	r3, [pc, #44]	; (802e42c <__swbuf_r+0x9c>)
 802e400:	429c      	cmp	r4, r3
 802e402:	d101      	bne.n	802e408 <__swbuf_r+0x78>
 802e404:	68ac      	ldr	r4, [r5, #8]
 802e406:	e7d0      	b.n	802e3aa <__swbuf_r+0x1a>
 802e408:	4b09      	ldr	r3, [pc, #36]	; (802e430 <__swbuf_r+0xa0>)
 802e40a:	429c      	cmp	r4, r3
 802e40c:	bf08      	it	eq
 802e40e:	68ec      	ldreq	r4, [r5, #12]
 802e410:	e7cb      	b.n	802e3aa <__swbuf_r+0x1a>
 802e412:	4621      	mov	r1, r4
 802e414:	4628      	mov	r0, r5
 802e416:	f000 f80d 	bl	802e434 <__swsetup_r>
 802e41a:	2800      	cmp	r0, #0
 802e41c:	d0cc      	beq.n	802e3b8 <__swbuf_r+0x28>
 802e41e:	f04f 37ff 	mov.w	r7, #4294967295
 802e422:	4638      	mov	r0, r7
 802e424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e426:	bf00      	nop
 802e428:	080303ec 	.word	0x080303ec
 802e42c:	0803040c 	.word	0x0803040c
 802e430:	080303cc 	.word	0x080303cc

0802e434 <__swsetup_r>:
 802e434:	4b32      	ldr	r3, [pc, #200]	; (802e500 <__swsetup_r+0xcc>)
 802e436:	b570      	push	{r4, r5, r6, lr}
 802e438:	681d      	ldr	r5, [r3, #0]
 802e43a:	4606      	mov	r6, r0
 802e43c:	460c      	mov	r4, r1
 802e43e:	b125      	cbz	r5, 802e44a <__swsetup_r+0x16>
 802e440:	69ab      	ldr	r3, [r5, #24]
 802e442:	b913      	cbnz	r3, 802e44a <__swsetup_r+0x16>
 802e444:	4628      	mov	r0, r5
 802e446:	f000 f95b 	bl	802e700 <__sinit>
 802e44a:	4b2e      	ldr	r3, [pc, #184]	; (802e504 <__swsetup_r+0xd0>)
 802e44c:	429c      	cmp	r4, r3
 802e44e:	d10f      	bne.n	802e470 <__swsetup_r+0x3c>
 802e450:	686c      	ldr	r4, [r5, #4]
 802e452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e456:	b29a      	uxth	r2, r3
 802e458:	0715      	lsls	r5, r2, #28
 802e45a:	d42c      	bmi.n	802e4b6 <__swsetup_r+0x82>
 802e45c:	06d0      	lsls	r0, r2, #27
 802e45e:	d411      	bmi.n	802e484 <__swsetup_r+0x50>
 802e460:	2209      	movs	r2, #9
 802e462:	6032      	str	r2, [r6, #0]
 802e464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e468:	81a3      	strh	r3, [r4, #12]
 802e46a:	f04f 30ff 	mov.w	r0, #4294967295
 802e46e:	e03e      	b.n	802e4ee <__swsetup_r+0xba>
 802e470:	4b25      	ldr	r3, [pc, #148]	; (802e508 <__swsetup_r+0xd4>)
 802e472:	429c      	cmp	r4, r3
 802e474:	d101      	bne.n	802e47a <__swsetup_r+0x46>
 802e476:	68ac      	ldr	r4, [r5, #8]
 802e478:	e7eb      	b.n	802e452 <__swsetup_r+0x1e>
 802e47a:	4b24      	ldr	r3, [pc, #144]	; (802e50c <__swsetup_r+0xd8>)
 802e47c:	429c      	cmp	r4, r3
 802e47e:	bf08      	it	eq
 802e480:	68ec      	ldreq	r4, [r5, #12]
 802e482:	e7e6      	b.n	802e452 <__swsetup_r+0x1e>
 802e484:	0751      	lsls	r1, r2, #29
 802e486:	d512      	bpl.n	802e4ae <__swsetup_r+0x7a>
 802e488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e48a:	b141      	cbz	r1, 802e49e <__swsetup_r+0x6a>
 802e48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e490:	4299      	cmp	r1, r3
 802e492:	d002      	beq.n	802e49a <__swsetup_r+0x66>
 802e494:	4630      	mov	r0, r6
 802e496:	f000 fa43 	bl	802e920 <_free_r>
 802e49a:	2300      	movs	r3, #0
 802e49c:	6363      	str	r3, [r4, #52]	; 0x34
 802e49e:	89a3      	ldrh	r3, [r4, #12]
 802e4a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802e4a4:	81a3      	strh	r3, [r4, #12]
 802e4a6:	2300      	movs	r3, #0
 802e4a8:	6063      	str	r3, [r4, #4]
 802e4aa:	6923      	ldr	r3, [r4, #16]
 802e4ac:	6023      	str	r3, [r4, #0]
 802e4ae:	89a3      	ldrh	r3, [r4, #12]
 802e4b0:	f043 0308 	orr.w	r3, r3, #8
 802e4b4:	81a3      	strh	r3, [r4, #12]
 802e4b6:	6923      	ldr	r3, [r4, #16]
 802e4b8:	b94b      	cbnz	r3, 802e4ce <__swsetup_r+0x9a>
 802e4ba:	89a3      	ldrh	r3, [r4, #12]
 802e4bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802e4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e4c4:	d003      	beq.n	802e4ce <__swsetup_r+0x9a>
 802e4c6:	4621      	mov	r1, r4
 802e4c8:	4630      	mov	r0, r6
 802e4ca:	f000 f9c7 	bl	802e85c <__smakebuf_r>
 802e4ce:	89a2      	ldrh	r2, [r4, #12]
 802e4d0:	f012 0301 	ands.w	r3, r2, #1
 802e4d4:	d00c      	beq.n	802e4f0 <__swsetup_r+0xbc>
 802e4d6:	2300      	movs	r3, #0
 802e4d8:	60a3      	str	r3, [r4, #8]
 802e4da:	6963      	ldr	r3, [r4, #20]
 802e4dc:	425b      	negs	r3, r3
 802e4de:	61a3      	str	r3, [r4, #24]
 802e4e0:	6923      	ldr	r3, [r4, #16]
 802e4e2:	b953      	cbnz	r3, 802e4fa <__swsetup_r+0xc6>
 802e4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e4e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802e4ec:	d1ba      	bne.n	802e464 <__swsetup_r+0x30>
 802e4ee:	bd70      	pop	{r4, r5, r6, pc}
 802e4f0:	0792      	lsls	r2, r2, #30
 802e4f2:	bf58      	it	pl
 802e4f4:	6963      	ldrpl	r3, [r4, #20]
 802e4f6:	60a3      	str	r3, [r4, #8]
 802e4f8:	e7f2      	b.n	802e4e0 <__swsetup_r+0xac>
 802e4fa:	2000      	movs	r0, #0
 802e4fc:	e7f7      	b.n	802e4ee <__swsetup_r+0xba>
 802e4fe:	bf00      	nop
 802e500:	24000670 	.word	0x24000670
 802e504:	080303ec 	.word	0x080303ec
 802e508:	0803040c 	.word	0x0803040c
 802e50c:	080303cc 	.word	0x080303cc

0802e510 <abort>:
 802e510:	b508      	push	{r3, lr}
 802e512:	2006      	movs	r0, #6
 802e514:	f000 fc5c 	bl	802edd0 <raise>
 802e518:	2001      	movs	r0, #1
 802e51a:	f7e5 f919 	bl	8013750 <_exit>
	...

0802e520 <__sflush_r>:
 802e520:	898a      	ldrh	r2, [r1, #12]
 802e522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e526:	4605      	mov	r5, r0
 802e528:	0710      	lsls	r0, r2, #28
 802e52a:	460c      	mov	r4, r1
 802e52c:	d458      	bmi.n	802e5e0 <__sflush_r+0xc0>
 802e52e:	684b      	ldr	r3, [r1, #4]
 802e530:	2b00      	cmp	r3, #0
 802e532:	dc05      	bgt.n	802e540 <__sflush_r+0x20>
 802e534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802e536:	2b00      	cmp	r3, #0
 802e538:	dc02      	bgt.n	802e540 <__sflush_r+0x20>
 802e53a:	2000      	movs	r0, #0
 802e53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e542:	2e00      	cmp	r6, #0
 802e544:	d0f9      	beq.n	802e53a <__sflush_r+0x1a>
 802e546:	2300      	movs	r3, #0
 802e548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802e54c:	682f      	ldr	r7, [r5, #0]
 802e54e:	6a21      	ldr	r1, [r4, #32]
 802e550:	602b      	str	r3, [r5, #0]
 802e552:	d032      	beq.n	802e5ba <__sflush_r+0x9a>
 802e554:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802e556:	89a3      	ldrh	r3, [r4, #12]
 802e558:	075a      	lsls	r2, r3, #29
 802e55a:	d505      	bpl.n	802e568 <__sflush_r+0x48>
 802e55c:	6863      	ldr	r3, [r4, #4]
 802e55e:	1ac0      	subs	r0, r0, r3
 802e560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802e562:	b10b      	cbz	r3, 802e568 <__sflush_r+0x48>
 802e564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802e566:	1ac0      	subs	r0, r0, r3
 802e568:	2300      	movs	r3, #0
 802e56a:	4602      	mov	r2, r0
 802e56c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e56e:	6a21      	ldr	r1, [r4, #32]
 802e570:	4628      	mov	r0, r5
 802e572:	47b0      	blx	r6
 802e574:	1c43      	adds	r3, r0, #1
 802e576:	89a3      	ldrh	r3, [r4, #12]
 802e578:	d106      	bne.n	802e588 <__sflush_r+0x68>
 802e57a:	6829      	ldr	r1, [r5, #0]
 802e57c:	291d      	cmp	r1, #29
 802e57e:	d848      	bhi.n	802e612 <__sflush_r+0xf2>
 802e580:	4a29      	ldr	r2, [pc, #164]	; (802e628 <__sflush_r+0x108>)
 802e582:	40ca      	lsrs	r2, r1
 802e584:	07d6      	lsls	r6, r2, #31
 802e586:	d544      	bpl.n	802e612 <__sflush_r+0xf2>
 802e588:	2200      	movs	r2, #0
 802e58a:	6062      	str	r2, [r4, #4]
 802e58c:	04d9      	lsls	r1, r3, #19
 802e58e:	6922      	ldr	r2, [r4, #16]
 802e590:	6022      	str	r2, [r4, #0]
 802e592:	d504      	bpl.n	802e59e <__sflush_r+0x7e>
 802e594:	1c42      	adds	r2, r0, #1
 802e596:	d101      	bne.n	802e59c <__sflush_r+0x7c>
 802e598:	682b      	ldr	r3, [r5, #0]
 802e59a:	b903      	cbnz	r3, 802e59e <__sflush_r+0x7e>
 802e59c:	6560      	str	r0, [r4, #84]	; 0x54
 802e59e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e5a0:	602f      	str	r7, [r5, #0]
 802e5a2:	2900      	cmp	r1, #0
 802e5a4:	d0c9      	beq.n	802e53a <__sflush_r+0x1a>
 802e5a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e5aa:	4299      	cmp	r1, r3
 802e5ac:	d002      	beq.n	802e5b4 <__sflush_r+0x94>
 802e5ae:	4628      	mov	r0, r5
 802e5b0:	f000 f9b6 	bl	802e920 <_free_r>
 802e5b4:	2000      	movs	r0, #0
 802e5b6:	6360      	str	r0, [r4, #52]	; 0x34
 802e5b8:	e7c0      	b.n	802e53c <__sflush_r+0x1c>
 802e5ba:	2301      	movs	r3, #1
 802e5bc:	4628      	mov	r0, r5
 802e5be:	47b0      	blx	r6
 802e5c0:	1c41      	adds	r1, r0, #1
 802e5c2:	d1c8      	bne.n	802e556 <__sflush_r+0x36>
 802e5c4:	682b      	ldr	r3, [r5, #0]
 802e5c6:	2b00      	cmp	r3, #0
 802e5c8:	d0c5      	beq.n	802e556 <__sflush_r+0x36>
 802e5ca:	2b1d      	cmp	r3, #29
 802e5cc:	d001      	beq.n	802e5d2 <__sflush_r+0xb2>
 802e5ce:	2b16      	cmp	r3, #22
 802e5d0:	d101      	bne.n	802e5d6 <__sflush_r+0xb6>
 802e5d2:	602f      	str	r7, [r5, #0]
 802e5d4:	e7b1      	b.n	802e53a <__sflush_r+0x1a>
 802e5d6:	89a3      	ldrh	r3, [r4, #12]
 802e5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e5dc:	81a3      	strh	r3, [r4, #12]
 802e5de:	e7ad      	b.n	802e53c <__sflush_r+0x1c>
 802e5e0:	690f      	ldr	r7, [r1, #16]
 802e5e2:	2f00      	cmp	r7, #0
 802e5e4:	d0a9      	beq.n	802e53a <__sflush_r+0x1a>
 802e5e6:	0793      	lsls	r3, r2, #30
 802e5e8:	680e      	ldr	r6, [r1, #0]
 802e5ea:	bf08      	it	eq
 802e5ec:	694b      	ldreq	r3, [r1, #20]
 802e5ee:	600f      	str	r7, [r1, #0]
 802e5f0:	bf18      	it	ne
 802e5f2:	2300      	movne	r3, #0
 802e5f4:	eba6 0807 	sub.w	r8, r6, r7
 802e5f8:	608b      	str	r3, [r1, #8]
 802e5fa:	f1b8 0f00 	cmp.w	r8, #0
 802e5fe:	dd9c      	ble.n	802e53a <__sflush_r+0x1a>
 802e600:	4643      	mov	r3, r8
 802e602:	463a      	mov	r2, r7
 802e604:	6a21      	ldr	r1, [r4, #32]
 802e606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e608:	4628      	mov	r0, r5
 802e60a:	47b0      	blx	r6
 802e60c:	2800      	cmp	r0, #0
 802e60e:	dc06      	bgt.n	802e61e <__sflush_r+0xfe>
 802e610:	89a3      	ldrh	r3, [r4, #12]
 802e612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e616:	81a3      	strh	r3, [r4, #12]
 802e618:	f04f 30ff 	mov.w	r0, #4294967295
 802e61c:	e78e      	b.n	802e53c <__sflush_r+0x1c>
 802e61e:	4407      	add	r7, r0
 802e620:	eba8 0800 	sub.w	r8, r8, r0
 802e624:	e7e9      	b.n	802e5fa <__sflush_r+0xda>
 802e626:	bf00      	nop
 802e628:	20400001 	.word	0x20400001

0802e62c <_fflush_r>:
 802e62c:	b538      	push	{r3, r4, r5, lr}
 802e62e:	690b      	ldr	r3, [r1, #16]
 802e630:	4605      	mov	r5, r0
 802e632:	460c      	mov	r4, r1
 802e634:	b1db      	cbz	r3, 802e66e <_fflush_r+0x42>
 802e636:	b118      	cbz	r0, 802e640 <_fflush_r+0x14>
 802e638:	6983      	ldr	r3, [r0, #24]
 802e63a:	b90b      	cbnz	r3, 802e640 <_fflush_r+0x14>
 802e63c:	f000 f860 	bl	802e700 <__sinit>
 802e640:	4b0c      	ldr	r3, [pc, #48]	; (802e674 <_fflush_r+0x48>)
 802e642:	429c      	cmp	r4, r3
 802e644:	d109      	bne.n	802e65a <_fflush_r+0x2e>
 802e646:	686c      	ldr	r4, [r5, #4]
 802e648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e64c:	b17b      	cbz	r3, 802e66e <_fflush_r+0x42>
 802e64e:	4621      	mov	r1, r4
 802e650:	4628      	mov	r0, r5
 802e652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e656:	f7ff bf63 	b.w	802e520 <__sflush_r>
 802e65a:	4b07      	ldr	r3, [pc, #28]	; (802e678 <_fflush_r+0x4c>)
 802e65c:	429c      	cmp	r4, r3
 802e65e:	d101      	bne.n	802e664 <_fflush_r+0x38>
 802e660:	68ac      	ldr	r4, [r5, #8]
 802e662:	e7f1      	b.n	802e648 <_fflush_r+0x1c>
 802e664:	4b05      	ldr	r3, [pc, #20]	; (802e67c <_fflush_r+0x50>)
 802e666:	429c      	cmp	r4, r3
 802e668:	bf08      	it	eq
 802e66a:	68ec      	ldreq	r4, [r5, #12]
 802e66c:	e7ec      	b.n	802e648 <_fflush_r+0x1c>
 802e66e:	2000      	movs	r0, #0
 802e670:	bd38      	pop	{r3, r4, r5, pc}
 802e672:	bf00      	nop
 802e674:	080303ec 	.word	0x080303ec
 802e678:	0803040c 	.word	0x0803040c
 802e67c:	080303cc 	.word	0x080303cc

0802e680 <std>:
 802e680:	2300      	movs	r3, #0
 802e682:	b510      	push	{r4, lr}
 802e684:	4604      	mov	r4, r0
 802e686:	e9c0 3300 	strd	r3, r3, [r0]
 802e68a:	6083      	str	r3, [r0, #8]
 802e68c:	8181      	strh	r1, [r0, #12]
 802e68e:	6643      	str	r3, [r0, #100]	; 0x64
 802e690:	81c2      	strh	r2, [r0, #14]
 802e692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802e696:	6183      	str	r3, [r0, #24]
 802e698:	4619      	mov	r1, r3
 802e69a:	2208      	movs	r2, #8
 802e69c:	305c      	adds	r0, #92	; 0x5c
 802e69e:	f7ff fad2 	bl	802dc46 <memset>
 802e6a2:	4b05      	ldr	r3, [pc, #20]	; (802e6b8 <std+0x38>)
 802e6a4:	6263      	str	r3, [r4, #36]	; 0x24
 802e6a6:	4b05      	ldr	r3, [pc, #20]	; (802e6bc <std+0x3c>)
 802e6a8:	62a3      	str	r3, [r4, #40]	; 0x28
 802e6aa:	4b05      	ldr	r3, [pc, #20]	; (802e6c0 <std+0x40>)
 802e6ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 802e6ae:	4b05      	ldr	r3, [pc, #20]	; (802e6c4 <std+0x44>)
 802e6b0:	6224      	str	r4, [r4, #32]
 802e6b2:	6323      	str	r3, [r4, #48]	; 0x30
 802e6b4:	bd10      	pop	{r4, pc}
 802e6b6:	bf00      	nop
 802e6b8:	0802ee09 	.word	0x0802ee09
 802e6bc:	0802ee2b 	.word	0x0802ee2b
 802e6c0:	0802ee63 	.word	0x0802ee63
 802e6c4:	0802ee87 	.word	0x0802ee87

0802e6c8 <_cleanup_r>:
 802e6c8:	4901      	ldr	r1, [pc, #4]	; (802e6d0 <_cleanup_r+0x8>)
 802e6ca:	f000 b885 	b.w	802e7d8 <_fwalk_reent>
 802e6ce:	bf00      	nop
 802e6d0:	0802e62d 	.word	0x0802e62d

0802e6d4 <__sfmoreglue>:
 802e6d4:	b570      	push	{r4, r5, r6, lr}
 802e6d6:	1e4a      	subs	r2, r1, #1
 802e6d8:	2568      	movs	r5, #104	; 0x68
 802e6da:	4355      	muls	r5, r2
 802e6dc:	460e      	mov	r6, r1
 802e6de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802e6e2:	f000 f96b 	bl	802e9bc <_malloc_r>
 802e6e6:	4604      	mov	r4, r0
 802e6e8:	b140      	cbz	r0, 802e6fc <__sfmoreglue+0x28>
 802e6ea:	2100      	movs	r1, #0
 802e6ec:	e9c0 1600 	strd	r1, r6, [r0]
 802e6f0:	300c      	adds	r0, #12
 802e6f2:	60a0      	str	r0, [r4, #8]
 802e6f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802e6f8:	f7ff faa5 	bl	802dc46 <memset>
 802e6fc:	4620      	mov	r0, r4
 802e6fe:	bd70      	pop	{r4, r5, r6, pc}

0802e700 <__sinit>:
 802e700:	6983      	ldr	r3, [r0, #24]
 802e702:	b510      	push	{r4, lr}
 802e704:	4604      	mov	r4, r0
 802e706:	bb33      	cbnz	r3, 802e756 <__sinit+0x56>
 802e708:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802e70c:	6503      	str	r3, [r0, #80]	; 0x50
 802e70e:	4b12      	ldr	r3, [pc, #72]	; (802e758 <__sinit+0x58>)
 802e710:	4a12      	ldr	r2, [pc, #72]	; (802e75c <__sinit+0x5c>)
 802e712:	681b      	ldr	r3, [r3, #0]
 802e714:	6282      	str	r2, [r0, #40]	; 0x28
 802e716:	4298      	cmp	r0, r3
 802e718:	bf04      	itt	eq
 802e71a:	2301      	moveq	r3, #1
 802e71c:	6183      	streq	r3, [r0, #24]
 802e71e:	f000 f81f 	bl	802e760 <__sfp>
 802e722:	6060      	str	r0, [r4, #4]
 802e724:	4620      	mov	r0, r4
 802e726:	f000 f81b 	bl	802e760 <__sfp>
 802e72a:	60a0      	str	r0, [r4, #8]
 802e72c:	4620      	mov	r0, r4
 802e72e:	f000 f817 	bl	802e760 <__sfp>
 802e732:	2200      	movs	r2, #0
 802e734:	60e0      	str	r0, [r4, #12]
 802e736:	2104      	movs	r1, #4
 802e738:	6860      	ldr	r0, [r4, #4]
 802e73a:	f7ff ffa1 	bl	802e680 <std>
 802e73e:	2201      	movs	r2, #1
 802e740:	2109      	movs	r1, #9
 802e742:	68a0      	ldr	r0, [r4, #8]
 802e744:	f7ff ff9c 	bl	802e680 <std>
 802e748:	2202      	movs	r2, #2
 802e74a:	2112      	movs	r1, #18
 802e74c:	68e0      	ldr	r0, [r4, #12]
 802e74e:	f7ff ff97 	bl	802e680 <std>
 802e752:	2301      	movs	r3, #1
 802e754:	61a3      	str	r3, [r4, #24]
 802e756:	bd10      	pop	{r4, pc}
 802e758:	08030394 	.word	0x08030394
 802e75c:	0802e6c9 	.word	0x0802e6c9

0802e760 <__sfp>:
 802e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e762:	4b1b      	ldr	r3, [pc, #108]	; (802e7d0 <__sfp+0x70>)
 802e764:	681e      	ldr	r6, [r3, #0]
 802e766:	69b3      	ldr	r3, [r6, #24]
 802e768:	4607      	mov	r7, r0
 802e76a:	b913      	cbnz	r3, 802e772 <__sfp+0x12>
 802e76c:	4630      	mov	r0, r6
 802e76e:	f7ff ffc7 	bl	802e700 <__sinit>
 802e772:	3648      	adds	r6, #72	; 0x48
 802e774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e778:	3b01      	subs	r3, #1
 802e77a:	d503      	bpl.n	802e784 <__sfp+0x24>
 802e77c:	6833      	ldr	r3, [r6, #0]
 802e77e:	b133      	cbz	r3, 802e78e <__sfp+0x2e>
 802e780:	6836      	ldr	r6, [r6, #0]
 802e782:	e7f7      	b.n	802e774 <__sfp+0x14>
 802e784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e788:	b16d      	cbz	r5, 802e7a6 <__sfp+0x46>
 802e78a:	3468      	adds	r4, #104	; 0x68
 802e78c:	e7f4      	b.n	802e778 <__sfp+0x18>
 802e78e:	2104      	movs	r1, #4
 802e790:	4638      	mov	r0, r7
 802e792:	f7ff ff9f 	bl	802e6d4 <__sfmoreglue>
 802e796:	6030      	str	r0, [r6, #0]
 802e798:	2800      	cmp	r0, #0
 802e79a:	d1f1      	bne.n	802e780 <__sfp+0x20>
 802e79c:	230c      	movs	r3, #12
 802e79e:	603b      	str	r3, [r7, #0]
 802e7a0:	4604      	mov	r4, r0
 802e7a2:	4620      	mov	r0, r4
 802e7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e7a6:	4b0b      	ldr	r3, [pc, #44]	; (802e7d4 <__sfp+0x74>)
 802e7a8:	6665      	str	r5, [r4, #100]	; 0x64
 802e7aa:	e9c4 5500 	strd	r5, r5, [r4]
 802e7ae:	60a5      	str	r5, [r4, #8]
 802e7b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802e7b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802e7b8:	2208      	movs	r2, #8
 802e7ba:	4629      	mov	r1, r5
 802e7bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e7c0:	f7ff fa41 	bl	802dc46 <memset>
 802e7c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e7c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e7cc:	e7e9      	b.n	802e7a2 <__sfp+0x42>
 802e7ce:	bf00      	nop
 802e7d0:	08030394 	.word	0x08030394
 802e7d4:	ffff0001 	.word	0xffff0001

0802e7d8 <_fwalk_reent>:
 802e7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e7dc:	4680      	mov	r8, r0
 802e7de:	4689      	mov	r9, r1
 802e7e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e7e4:	2600      	movs	r6, #0
 802e7e6:	b914      	cbnz	r4, 802e7ee <_fwalk_reent+0x16>
 802e7e8:	4630      	mov	r0, r6
 802e7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e7ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802e7f2:	3f01      	subs	r7, #1
 802e7f4:	d501      	bpl.n	802e7fa <_fwalk_reent+0x22>
 802e7f6:	6824      	ldr	r4, [r4, #0]
 802e7f8:	e7f5      	b.n	802e7e6 <_fwalk_reent+0xe>
 802e7fa:	89ab      	ldrh	r3, [r5, #12]
 802e7fc:	2b01      	cmp	r3, #1
 802e7fe:	d907      	bls.n	802e810 <_fwalk_reent+0x38>
 802e800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e804:	3301      	adds	r3, #1
 802e806:	d003      	beq.n	802e810 <_fwalk_reent+0x38>
 802e808:	4629      	mov	r1, r5
 802e80a:	4640      	mov	r0, r8
 802e80c:	47c8      	blx	r9
 802e80e:	4306      	orrs	r6, r0
 802e810:	3568      	adds	r5, #104	; 0x68
 802e812:	e7ee      	b.n	802e7f2 <_fwalk_reent+0x1a>

0802e814 <__swhatbuf_r>:
 802e814:	b570      	push	{r4, r5, r6, lr}
 802e816:	460e      	mov	r6, r1
 802e818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e81c:	2900      	cmp	r1, #0
 802e81e:	b096      	sub	sp, #88	; 0x58
 802e820:	4614      	mov	r4, r2
 802e822:	461d      	mov	r5, r3
 802e824:	da07      	bge.n	802e836 <__swhatbuf_r+0x22>
 802e826:	2300      	movs	r3, #0
 802e828:	602b      	str	r3, [r5, #0]
 802e82a:	89b3      	ldrh	r3, [r6, #12]
 802e82c:	061a      	lsls	r2, r3, #24
 802e82e:	d410      	bmi.n	802e852 <__swhatbuf_r+0x3e>
 802e830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e834:	e00e      	b.n	802e854 <__swhatbuf_r+0x40>
 802e836:	466a      	mov	r2, sp
 802e838:	f000 fb4c 	bl	802eed4 <_fstat_r>
 802e83c:	2800      	cmp	r0, #0
 802e83e:	dbf2      	blt.n	802e826 <__swhatbuf_r+0x12>
 802e840:	9a01      	ldr	r2, [sp, #4]
 802e842:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802e846:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802e84a:	425a      	negs	r2, r3
 802e84c:	415a      	adcs	r2, r3
 802e84e:	602a      	str	r2, [r5, #0]
 802e850:	e7ee      	b.n	802e830 <__swhatbuf_r+0x1c>
 802e852:	2340      	movs	r3, #64	; 0x40
 802e854:	2000      	movs	r0, #0
 802e856:	6023      	str	r3, [r4, #0]
 802e858:	b016      	add	sp, #88	; 0x58
 802e85a:	bd70      	pop	{r4, r5, r6, pc}

0802e85c <__smakebuf_r>:
 802e85c:	898b      	ldrh	r3, [r1, #12]
 802e85e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802e860:	079d      	lsls	r5, r3, #30
 802e862:	4606      	mov	r6, r0
 802e864:	460c      	mov	r4, r1
 802e866:	d507      	bpl.n	802e878 <__smakebuf_r+0x1c>
 802e868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802e86c:	6023      	str	r3, [r4, #0]
 802e86e:	6123      	str	r3, [r4, #16]
 802e870:	2301      	movs	r3, #1
 802e872:	6163      	str	r3, [r4, #20]
 802e874:	b002      	add	sp, #8
 802e876:	bd70      	pop	{r4, r5, r6, pc}
 802e878:	ab01      	add	r3, sp, #4
 802e87a:	466a      	mov	r2, sp
 802e87c:	f7ff ffca 	bl	802e814 <__swhatbuf_r>
 802e880:	9900      	ldr	r1, [sp, #0]
 802e882:	4605      	mov	r5, r0
 802e884:	4630      	mov	r0, r6
 802e886:	f000 f899 	bl	802e9bc <_malloc_r>
 802e88a:	b948      	cbnz	r0, 802e8a0 <__smakebuf_r+0x44>
 802e88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e890:	059a      	lsls	r2, r3, #22
 802e892:	d4ef      	bmi.n	802e874 <__smakebuf_r+0x18>
 802e894:	f023 0303 	bic.w	r3, r3, #3
 802e898:	f043 0302 	orr.w	r3, r3, #2
 802e89c:	81a3      	strh	r3, [r4, #12]
 802e89e:	e7e3      	b.n	802e868 <__smakebuf_r+0xc>
 802e8a0:	4b0d      	ldr	r3, [pc, #52]	; (802e8d8 <__smakebuf_r+0x7c>)
 802e8a2:	62b3      	str	r3, [r6, #40]	; 0x28
 802e8a4:	89a3      	ldrh	r3, [r4, #12]
 802e8a6:	6020      	str	r0, [r4, #0]
 802e8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e8ac:	81a3      	strh	r3, [r4, #12]
 802e8ae:	9b00      	ldr	r3, [sp, #0]
 802e8b0:	6163      	str	r3, [r4, #20]
 802e8b2:	9b01      	ldr	r3, [sp, #4]
 802e8b4:	6120      	str	r0, [r4, #16]
 802e8b6:	b15b      	cbz	r3, 802e8d0 <__smakebuf_r+0x74>
 802e8b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e8bc:	4630      	mov	r0, r6
 802e8be:	f000 fb1b 	bl	802eef8 <_isatty_r>
 802e8c2:	b128      	cbz	r0, 802e8d0 <__smakebuf_r+0x74>
 802e8c4:	89a3      	ldrh	r3, [r4, #12]
 802e8c6:	f023 0303 	bic.w	r3, r3, #3
 802e8ca:	f043 0301 	orr.w	r3, r3, #1
 802e8ce:	81a3      	strh	r3, [r4, #12]
 802e8d0:	89a3      	ldrh	r3, [r4, #12]
 802e8d2:	431d      	orrs	r5, r3
 802e8d4:	81a5      	strh	r5, [r4, #12]
 802e8d6:	e7cd      	b.n	802e874 <__smakebuf_r+0x18>
 802e8d8:	0802e6c9 	.word	0x0802e6c9

0802e8dc <malloc>:
 802e8dc:	4b02      	ldr	r3, [pc, #8]	; (802e8e8 <malloc+0xc>)
 802e8de:	4601      	mov	r1, r0
 802e8e0:	6818      	ldr	r0, [r3, #0]
 802e8e2:	f000 b86b 	b.w	802e9bc <_malloc_r>
 802e8e6:	bf00      	nop
 802e8e8:	24000670 	.word	0x24000670

0802e8ec <memmove>:
 802e8ec:	4288      	cmp	r0, r1
 802e8ee:	b510      	push	{r4, lr}
 802e8f0:	eb01 0302 	add.w	r3, r1, r2
 802e8f4:	d807      	bhi.n	802e906 <memmove+0x1a>
 802e8f6:	1e42      	subs	r2, r0, #1
 802e8f8:	4299      	cmp	r1, r3
 802e8fa:	d00a      	beq.n	802e912 <memmove+0x26>
 802e8fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e900:	f802 4f01 	strb.w	r4, [r2, #1]!
 802e904:	e7f8      	b.n	802e8f8 <memmove+0xc>
 802e906:	4283      	cmp	r3, r0
 802e908:	d9f5      	bls.n	802e8f6 <memmove+0xa>
 802e90a:	1881      	adds	r1, r0, r2
 802e90c:	1ad2      	subs	r2, r2, r3
 802e90e:	42d3      	cmn	r3, r2
 802e910:	d100      	bne.n	802e914 <memmove+0x28>
 802e912:	bd10      	pop	{r4, pc}
 802e914:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802e918:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802e91c:	e7f7      	b.n	802e90e <memmove+0x22>
	...

0802e920 <_free_r>:
 802e920:	b538      	push	{r3, r4, r5, lr}
 802e922:	4605      	mov	r5, r0
 802e924:	2900      	cmp	r1, #0
 802e926:	d045      	beq.n	802e9b4 <_free_r+0x94>
 802e928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e92c:	1f0c      	subs	r4, r1, #4
 802e92e:	2b00      	cmp	r3, #0
 802e930:	bfb8      	it	lt
 802e932:	18e4      	addlt	r4, r4, r3
 802e934:	f000 fb02 	bl	802ef3c <__malloc_lock>
 802e938:	4a1f      	ldr	r2, [pc, #124]	; (802e9b8 <_free_r+0x98>)
 802e93a:	6813      	ldr	r3, [r2, #0]
 802e93c:	4610      	mov	r0, r2
 802e93e:	b933      	cbnz	r3, 802e94e <_free_r+0x2e>
 802e940:	6063      	str	r3, [r4, #4]
 802e942:	6014      	str	r4, [r2, #0]
 802e944:	4628      	mov	r0, r5
 802e946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e94a:	f000 baf8 	b.w	802ef3e <__malloc_unlock>
 802e94e:	42a3      	cmp	r3, r4
 802e950:	d90c      	bls.n	802e96c <_free_r+0x4c>
 802e952:	6821      	ldr	r1, [r4, #0]
 802e954:	1862      	adds	r2, r4, r1
 802e956:	4293      	cmp	r3, r2
 802e958:	bf04      	itt	eq
 802e95a:	681a      	ldreq	r2, [r3, #0]
 802e95c:	685b      	ldreq	r3, [r3, #4]
 802e95e:	6063      	str	r3, [r4, #4]
 802e960:	bf04      	itt	eq
 802e962:	1852      	addeq	r2, r2, r1
 802e964:	6022      	streq	r2, [r4, #0]
 802e966:	6004      	str	r4, [r0, #0]
 802e968:	e7ec      	b.n	802e944 <_free_r+0x24>
 802e96a:	4613      	mov	r3, r2
 802e96c:	685a      	ldr	r2, [r3, #4]
 802e96e:	b10a      	cbz	r2, 802e974 <_free_r+0x54>
 802e970:	42a2      	cmp	r2, r4
 802e972:	d9fa      	bls.n	802e96a <_free_r+0x4a>
 802e974:	6819      	ldr	r1, [r3, #0]
 802e976:	1858      	adds	r0, r3, r1
 802e978:	42a0      	cmp	r0, r4
 802e97a:	d10b      	bne.n	802e994 <_free_r+0x74>
 802e97c:	6820      	ldr	r0, [r4, #0]
 802e97e:	4401      	add	r1, r0
 802e980:	1858      	adds	r0, r3, r1
 802e982:	4282      	cmp	r2, r0
 802e984:	6019      	str	r1, [r3, #0]
 802e986:	d1dd      	bne.n	802e944 <_free_r+0x24>
 802e988:	6810      	ldr	r0, [r2, #0]
 802e98a:	6852      	ldr	r2, [r2, #4]
 802e98c:	605a      	str	r2, [r3, #4]
 802e98e:	4401      	add	r1, r0
 802e990:	6019      	str	r1, [r3, #0]
 802e992:	e7d7      	b.n	802e944 <_free_r+0x24>
 802e994:	d902      	bls.n	802e99c <_free_r+0x7c>
 802e996:	230c      	movs	r3, #12
 802e998:	602b      	str	r3, [r5, #0]
 802e99a:	e7d3      	b.n	802e944 <_free_r+0x24>
 802e99c:	6820      	ldr	r0, [r4, #0]
 802e99e:	1821      	adds	r1, r4, r0
 802e9a0:	428a      	cmp	r2, r1
 802e9a2:	bf04      	itt	eq
 802e9a4:	6811      	ldreq	r1, [r2, #0]
 802e9a6:	6852      	ldreq	r2, [r2, #4]
 802e9a8:	6062      	str	r2, [r4, #4]
 802e9aa:	bf04      	itt	eq
 802e9ac:	1809      	addeq	r1, r1, r0
 802e9ae:	6021      	streq	r1, [r4, #0]
 802e9b0:	605c      	str	r4, [r3, #4]
 802e9b2:	e7c7      	b.n	802e944 <_free_r+0x24>
 802e9b4:	bd38      	pop	{r3, r4, r5, pc}
 802e9b6:	bf00      	nop
 802e9b8:	24005da4 	.word	0x24005da4

0802e9bc <_malloc_r>:
 802e9bc:	b570      	push	{r4, r5, r6, lr}
 802e9be:	1ccd      	adds	r5, r1, #3
 802e9c0:	f025 0503 	bic.w	r5, r5, #3
 802e9c4:	3508      	adds	r5, #8
 802e9c6:	2d0c      	cmp	r5, #12
 802e9c8:	bf38      	it	cc
 802e9ca:	250c      	movcc	r5, #12
 802e9cc:	2d00      	cmp	r5, #0
 802e9ce:	4606      	mov	r6, r0
 802e9d0:	db01      	blt.n	802e9d6 <_malloc_r+0x1a>
 802e9d2:	42a9      	cmp	r1, r5
 802e9d4:	d903      	bls.n	802e9de <_malloc_r+0x22>
 802e9d6:	230c      	movs	r3, #12
 802e9d8:	6033      	str	r3, [r6, #0]
 802e9da:	2000      	movs	r0, #0
 802e9dc:	bd70      	pop	{r4, r5, r6, pc}
 802e9de:	f000 faad 	bl	802ef3c <__malloc_lock>
 802e9e2:	4a21      	ldr	r2, [pc, #132]	; (802ea68 <_malloc_r+0xac>)
 802e9e4:	6814      	ldr	r4, [r2, #0]
 802e9e6:	4621      	mov	r1, r4
 802e9e8:	b991      	cbnz	r1, 802ea10 <_malloc_r+0x54>
 802e9ea:	4c20      	ldr	r4, [pc, #128]	; (802ea6c <_malloc_r+0xb0>)
 802e9ec:	6823      	ldr	r3, [r4, #0]
 802e9ee:	b91b      	cbnz	r3, 802e9f8 <_malloc_r+0x3c>
 802e9f0:	4630      	mov	r0, r6
 802e9f2:	f000 f9b5 	bl	802ed60 <_sbrk_r>
 802e9f6:	6020      	str	r0, [r4, #0]
 802e9f8:	4629      	mov	r1, r5
 802e9fa:	4630      	mov	r0, r6
 802e9fc:	f000 f9b0 	bl	802ed60 <_sbrk_r>
 802ea00:	1c43      	adds	r3, r0, #1
 802ea02:	d124      	bne.n	802ea4e <_malloc_r+0x92>
 802ea04:	230c      	movs	r3, #12
 802ea06:	6033      	str	r3, [r6, #0]
 802ea08:	4630      	mov	r0, r6
 802ea0a:	f000 fa98 	bl	802ef3e <__malloc_unlock>
 802ea0e:	e7e4      	b.n	802e9da <_malloc_r+0x1e>
 802ea10:	680b      	ldr	r3, [r1, #0]
 802ea12:	1b5b      	subs	r3, r3, r5
 802ea14:	d418      	bmi.n	802ea48 <_malloc_r+0x8c>
 802ea16:	2b0b      	cmp	r3, #11
 802ea18:	d90f      	bls.n	802ea3a <_malloc_r+0x7e>
 802ea1a:	600b      	str	r3, [r1, #0]
 802ea1c:	50cd      	str	r5, [r1, r3]
 802ea1e:	18cc      	adds	r4, r1, r3
 802ea20:	4630      	mov	r0, r6
 802ea22:	f000 fa8c 	bl	802ef3e <__malloc_unlock>
 802ea26:	f104 000b 	add.w	r0, r4, #11
 802ea2a:	1d23      	adds	r3, r4, #4
 802ea2c:	f020 0007 	bic.w	r0, r0, #7
 802ea30:	1ac3      	subs	r3, r0, r3
 802ea32:	d0d3      	beq.n	802e9dc <_malloc_r+0x20>
 802ea34:	425a      	negs	r2, r3
 802ea36:	50e2      	str	r2, [r4, r3]
 802ea38:	e7d0      	b.n	802e9dc <_malloc_r+0x20>
 802ea3a:	428c      	cmp	r4, r1
 802ea3c:	684b      	ldr	r3, [r1, #4]
 802ea3e:	bf16      	itet	ne
 802ea40:	6063      	strne	r3, [r4, #4]
 802ea42:	6013      	streq	r3, [r2, #0]
 802ea44:	460c      	movne	r4, r1
 802ea46:	e7eb      	b.n	802ea20 <_malloc_r+0x64>
 802ea48:	460c      	mov	r4, r1
 802ea4a:	6849      	ldr	r1, [r1, #4]
 802ea4c:	e7cc      	b.n	802e9e8 <_malloc_r+0x2c>
 802ea4e:	1cc4      	adds	r4, r0, #3
 802ea50:	f024 0403 	bic.w	r4, r4, #3
 802ea54:	42a0      	cmp	r0, r4
 802ea56:	d005      	beq.n	802ea64 <_malloc_r+0xa8>
 802ea58:	1a21      	subs	r1, r4, r0
 802ea5a:	4630      	mov	r0, r6
 802ea5c:	f000 f980 	bl	802ed60 <_sbrk_r>
 802ea60:	3001      	adds	r0, #1
 802ea62:	d0cf      	beq.n	802ea04 <_malloc_r+0x48>
 802ea64:	6025      	str	r5, [r4, #0]
 802ea66:	e7db      	b.n	802ea20 <_malloc_r+0x64>
 802ea68:	24005da4 	.word	0x24005da4
 802ea6c:	24005da8 	.word	0x24005da8

0802ea70 <_realloc_r>:
 802ea70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ea72:	4607      	mov	r7, r0
 802ea74:	4614      	mov	r4, r2
 802ea76:	460e      	mov	r6, r1
 802ea78:	b921      	cbnz	r1, 802ea84 <_realloc_r+0x14>
 802ea7a:	4611      	mov	r1, r2
 802ea7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802ea80:	f7ff bf9c 	b.w	802e9bc <_malloc_r>
 802ea84:	b922      	cbnz	r2, 802ea90 <_realloc_r+0x20>
 802ea86:	f7ff ff4b 	bl	802e920 <_free_r>
 802ea8a:	4625      	mov	r5, r4
 802ea8c:	4628      	mov	r0, r5
 802ea8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ea90:	f000 fa56 	bl	802ef40 <_malloc_usable_size_r>
 802ea94:	42a0      	cmp	r0, r4
 802ea96:	d20f      	bcs.n	802eab8 <_realloc_r+0x48>
 802ea98:	4621      	mov	r1, r4
 802ea9a:	4638      	mov	r0, r7
 802ea9c:	f7ff ff8e 	bl	802e9bc <_malloc_r>
 802eaa0:	4605      	mov	r5, r0
 802eaa2:	2800      	cmp	r0, #0
 802eaa4:	d0f2      	beq.n	802ea8c <_realloc_r+0x1c>
 802eaa6:	4631      	mov	r1, r6
 802eaa8:	4622      	mov	r2, r4
 802eaaa:	f7ff f8c1 	bl	802dc30 <memcpy>
 802eaae:	4631      	mov	r1, r6
 802eab0:	4638      	mov	r0, r7
 802eab2:	f7ff ff35 	bl	802e920 <_free_r>
 802eab6:	e7e9      	b.n	802ea8c <_realloc_r+0x1c>
 802eab8:	4635      	mov	r5, r6
 802eaba:	e7e7      	b.n	802ea8c <_realloc_r+0x1c>

0802eabc <__ssputs_r>:
 802eabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802eac0:	688e      	ldr	r6, [r1, #8]
 802eac2:	429e      	cmp	r6, r3
 802eac4:	4682      	mov	sl, r0
 802eac6:	460c      	mov	r4, r1
 802eac8:	4690      	mov	r8, r2
 802eaca:	4699      	mov	r9, r3
 802eacc:	d837      	bhi.n	802eb3e <__ssputs_r+0x82>
 802eace:	898a      	ldrh	r2, [r1, #12]
 802ead0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ead4:	d031      	beq.n	802eb3a <__ssputs_r+0x7e>
 802ead6:	6825      	ldr	r5, [r4, #0]
 802ead8:	6909      	ldr	r1, [r1, #16]
 802eada:	1a6f      	subs	r7, r5, r1
 802eadc:	6965      	ldr	r5, [r4, #20]
 802eade:	2302      	movs	r3, #2
 802eae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802eae4:	fb95 f5f3 	sdiv	r5, r5, r3
 802eae8:	f109 0301 	add.w	r3, r9, #1
 802eaec:	443b      	add	r3, r7
 802eaee:	429d      	cmp	r5, r3
 802eaf0:	bf38      	it	cc
 802eaf2:	461d      	movcc	r5, r3
 802eaf4:	0553      	lsls	r3, r2, #21
 802eaf6:	d530      	bpl.n	802eb5a <__ssputs_r+0x9e>
 802eaf8:	4629      	mov	r1, r5
 802eafa:	f7ff ff5f 	bl	802e9bc <_malloc_r>
 802eafe:	4606      	mov	r6, r0
 802eb00:	b950      	cbnz	r0, 802eb18 <__ssputs_r+0x5c>
 802eb02:	230c      	movs	r3, #12
 802eb04:	f8ca 3000 	str.w	r3, [sl]
 802eb08:	89a3      	ldrh	r3, [r4, #12]
 802eb0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802eb0e:	81a3      	strh	r3, [r4, #12]
 802eb10:	f04f 30ff 	mov.w	r0, #4294967295
 802eb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802eb18:	463a      	mov	r2, r7
 802eb1a:	6921      	ldr	r1, [r4, #16]
 802eb1c:	f7ff f888 	bl	802dc30 <memcpy>
 802eb20:	89a3      	ldrh	r3, [r4, #12]
 802eb22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802eb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802eb2a:	81a3      	strh	r3, [r4, #12]
 802eb2c:	6126      	str	r6, [r4, #16]
 802eb2e:	6165      	str	r5, [r4, #20]
 802eb30:	443e      	add	r6, r7
 802eb32:	1bed      	subs	r5, r5, r7
 802eb34:	6026      	str	r6, [r4, #0]
 802eb36:	60a5      	str	r5, [r4, #8]
 802eb38:	464e      	mov	r6, r9
 802eb3a:	454e      	cmp	r6, r9
 802eb3c:	d900      	bls.n	802eb40 <__ssputs_r+0x84>
 802eb3e:	464e      	mov	r6, r9
 802eb40:	4632      	mov	r2, r6
 802eb42:	4641      	mov	r1, r8
 802eb44:	6820      	ldr	r0, [r4, #0]
 802eb46:	f7ff fed1 	bl	802e8ec <memmove>
 802eb4a:	68a3      	ldr	r3, [r4, #8]
 802eb4c:	1b9b      	subs	r3, r3, r6
 802eb4e:	60a3      	str	r3, [r4, #8]
 802eb50:	6823      	ldr	r3, [r4, #0]
 802eb52:	441e      	add	r6, r3
 802eb54:	6026      	str	r6, [r4, #0]
 802eb56:	2000      	movs	r0, #0
 802eb58:	e7dc      	b.n	802eb14 <__ssputs_r+0x58>
 802eb5a:	462a      	mov	r2, r5
 802eb5c:	f7ff ff88 	bl	802ea70 <_realloc_r>
 802eb60:	4606      	mov	r6, r0
 802eb62:	2800      	cmp	r0, #0
 802eb64:	d1e2      	bne.n	802eb2c <__ssputs_r+0x70>
 802eb66:	6921      	ldr	r1, [r4, #16]
 802eb68:	4650      	mov	r0, sl
 802eb6a:	f7ff fed9 	bl	802e920 <_free_r>
 802eb6e:	e7c8      	b.n	802eb02 <__ssputs_r+0x46>

0802eb70 <_svfiprintf_r>:
 802eb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eb74:	461d      	mov	r5, r3
 802eb76:	898b      	ldrh	r3, [r1, #12]
 802eb78:	061f      	lsls	r7, r3, #24
 802eb7a:	b09d      	sub	sp, #116	; 0x74
 802eb7c:	4680      	mov	r8, r0
 802eb7e:	460c      	mov	r4, r1
 802eb80:	4616      	mov	r6, r2
 802eb82:	d50f      	bpl.n	802eba4 <_svfiprintf_r+0x34>
 802eb84:	690b      	ldr	r3, [r1, #16]
 802eb86:	b96b      	cbnz	r3, 802eba4 <_svfiprintf_r+0x34>
 802eb88:	2140      	movs	r1, #64	; 0x40
 802eb8a:	f7ff ff17 	bl	802e9bc <_malloc_r>
 802eb8e:	6020      	str	r0, [r4, #0]
 802eb90:	6120      	str	r0, [r4, #16]
 802eb92:	b928      	cbnz	r0, 802eba0 <_svfiprintf_r+0x30>
 802eb94:	230c      	movs	r3, #12
 802eb96:	f8c8 3000 	str.w	r3, [r8]
 802eb9a:	f04f 30ff 	mov.w	r0, #4294967295
 802eb9e:	e0c8      	b.n	802ed32 <_svfiprintf_r+0x1c2>
 802eba0:	2340      	movs	r3, #64	; 0x40
 802eba2:	6163      	str	r3, [r4, #20]
 802eba4:	2300      	movs	r3, #0
 802eba6:	9309      	str	r3, [sp, #36]	; 0x24
 802eba8:	2320      	movs	r3, #32
 802ebaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ebae:	2330      	movs	r3, #48	; 0x30
 802ebb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ebb4:	9503      	str	r5, [sp, #12]
 802ebb6:	f04f 0b01 	mov.w	fp, #1
 802ebba:	4637      	mov	r7, r6
 802ebbc:	463d      	mov	r5, r7
 802ebbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 802ebc2:	b10b      	cbz	r3, 802ebc8 <_svfiprintf_r+0x58>
 802ebc4:	2b25      	cmp	r3, #37	; 0x25
 802ebc6:	d13e      	bne.n	802ec46 <_svfiprintf_r+0xd6>
 802ebc8:	ebb7 0a06 	subs.w	sl, r7, r6
 802ebcc:	d00b      	beq.n	802ebe6 <_svfiprintf_r+0x76>
 802ebce:	4653      	mov	r3, sl
 802ebd0:	4632      	mov	r2, r6
 802ebd2:	4621      	mov	r1, r4
 802ebd4:	4640      	mov	r0, r8
 802ebd6:	f7ff ff71 	bl	802eabc <__ssputs_r>
 802ebda:	3001      	adds	r0, #1
 802ebdc:	f000 80a4 	beq.w	802ed28 <_svfiprintf_r+0x1b8>
 802ebe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ebe2:	4453      	add	r3, sl
 802ebe4:	9309      	str	r3, [sp, #36]	; 0x24
 802ebe6:	783b      	ldrb	r3, [r7, #0]
 802ebe8:	2b00      	cmp	r3, #0
 802ebea:	f000 809d 	beq.w	802ed28 <_svfiprintf_r+0x1b8>
 802ebee:	2300      	movs	r3, #0
 802ebf0:	f04f 32ff 	mov.w	r2, #4294967295
 802ebf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ebf8:	9304      	str	r3, [sp, #16]
 802ebfa:	9307      	str	r3, [sp, #28]
 802ebfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ec00:	931a      	str	r3, [sp, #104]	; 0x68
 802ec02:	462f      	mov	r7, r5
 802ec04:	2205      	movs	r2, #5
 802ec06:	f817 1b01 	ldrb.w	r1, [r7], #1
 802ec0a:	4850      	ldr	r0, [pc, #320]	; (802ed4c <_svfiprintf_r+0x1dc>)
 802ec0c:	f7d1 fb68 	bl	80002e0 <memchr>
 802ec10:	9b04      	ldr	r3, [sp, #16]
 802ec12:	b9d0      	cbnz	r0, 802ec4a <_svfiprintf_r+0xda>
 802ec14:	06d9      	lsls	r1, r3, #27
 802ec16:	bf44      	itt	mi
 802ec18:	2220      	movmi	r2, #32
 802ec1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802ec1e:	071a      	lsls	r2, r3, #28
 802ec20:	bf44      	itt	mi
 802ec22:	222b      	movmi	r2, #43	; 0x2b
 802ec24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802ec28:	782a      	ldrb	r2, [r5, #0]
 802ec2a:	2a2a      	cmp	r2, #42	; 0x2a
 802ec2c:	d015      	beq.n	802ec5a <_svfiprintf_r+0xea>
 802ec2e:	9a07      	ldr	r2, [sp, #28]
 802ec30:	462f      	mov	r7, r5
 802ec32:	2000      	movs	r0, #0
 802ec34:	250a      	movs	r5, #10
 802ec36:	4639      	mov	r1, r7
 802ec38:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ec3c:	3b30      	subs	r3, #48	; 0x30
 802ec3e:	2b09      	cmp	r3, #9
 802ec40:	d94d      	bls.n	802ecde <_svfiprintf_r+0x16e>
 802ec42:	b1b8      	cbz	r0, 802ec74 <_svfiprintf_r+0x104>
 802ec44:	e00f      	b.n	802ec66 <_svfiprintf_r+0xf6>
 802ec46:	462f      	mov	r7, r5
 802ec48:	e7b8      	b.n	802ebbc <_svfiprintf_r+0x4c>
 802ec4a:	4a40      	ldr	r2, [pc, #256]	; (802ed4c <_svfiprintf_r+0x1dc>)
 802ec4c:	1a80      	subs	r0, r0, r2
 802ec4e:	fa0b f000 	lsl.w	r0, fp, r0
 802ec52:	4318      	orrs	r0, r3
 802ec54:	9004      	str	r0, [sp, #16]
 802ec56:	463d      	mov	r5, r7
 802ec58:	e7d3      	b.n	802ec02 <_svfiprintf_r+0x92>
 802ec5a:	9a03      	ldr	r2, [sp, #12]
 802ec5c:	1d11      	adds	r1, r2, #4
 802ec5e:	6812      	ldr	r2, [r2, #0]
 802ec60:	9103      	str	r1, [sp, #12]
 802ec62:	2a00      	cmp	r2, #0
 802ec64:	db01      	blt.n	802ec6a <_svfiprintf_r+0xfa>
 802ec66:	9207      	str	r2, [sp, #28]
 802ec68:	e004      	b.n	802ec74 <_svfiprintf_r+0x104>
 802ec6a:	4252      	negs	r2, r2
 802ec6c:	f043 0302 	orr.w	r3, r3, #2
 802ec70:	9207      	str	r2, [sp, #28]
 802ec72:	9304      	str	r3, [sp, #16]
 802ec74:	783b      	ldrb	r3, [r7, #0]
 802ec76:	2b2e      	cmp	r3, #46	; 0x2e
 802ec78:	d10c      	bne.n	802ec94 <_svfiprintf_r+0x124>
 802ec7a:	787b      	ldrb	r3, [r7, #1]
 802ec7c:	2b2a      	cmp	r3, #42	; 0x2a
 802ec7e:	d133      	bne.n	802ece8 <_svfiprintf_r+0x178>
 802ec80:	9b03      	ldr	r3, [sp, #12]
 802ec82:	1d1a      	adds	r2, r3, #4
 802ec84:	681b      	ldr	r3, [r3, #0]
 802ec86:	9203      	str	r2, [sp, #12]
 802ec88:	2b00      	cmp	r3, #0
 802ec8a:	bfb8      	it	lt
 802ec8c:	f04f 33ff 	movlt.w	r3, #4294967295
 802ec90:	3702      	adds	r7, #2
 802ec92:	9305      	str	r3, [sp, #20]
 802ec94:	4d2e      	ldr	r5, [pc, #184]	; (802ed50 <_svfiprintf_r+0x1e0>)
 802ec96:	7839      	ldrb	r1, [r7, #0]
 802ec98:	2203      	movs	r2, #3
 802ec9a:	4628      	mov	r0, r5
 802ec9c:	f7d1 fb20 	bl	80002e0 <memchr>
 802eca0:	b138      	cbz	r0, 802ecb2 <_svfiprintf_r+0x142>
 802eca2:	2340      	movs	r3, #64	; 0x40
 802eca4:	1b40      	subs	r0, r0, r5
 802eca6:	fa03 f000 	lsl.w	r0, r3, r0
 802ecaa:	9b04      	ldr	r3, [sp, #16]
 802ecac:	4303      	orrs	r3, r0
 802ecae:	3701      	adds	r7, #1
 802ecb0:	9304      	str	r3, [sp, #16]
 802ecb2:	7839      	ldrb	r1, [r7, #0]
 802ecb4:	4827      	ldr	r0, [pc, #156]	; (802ed54 <_svfiprintf_r+0x1e4>)
 802ecb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ecba:	2206      	movs	r2, #6
 802ecbc:	1c7e      	adds	r6, r7, #1
 802ecbe:	f7d1 fb0f 	bl	80002e0 <memchr>
 802ecc2:	2800      	cmp	r0, #0
 802ecc4:	d038      	beq.n	802ed38 <_svfiprintf_r+0x1c8>
 802ecc6:	4b24      	ldr	r3, [pc, #144]	; (802ed58 <_svfiprintf_r+0x1e8>)
 802ecc8:	bb13      	cbnz	r3, 802ed10 <_svfiprintf_r+0x1a0>
 802ecca:	9b03      	ldr	r3, [sp, #12]
 802eccc:	3307      	adds	r3, #7
 802ecce:	f023 0307 	bic.w	r3, r3, #7
 802ecd2:	3308      	adds	r3, #8
 802ecd4:	9303      	str	r3, [sp, #12]
 802ecd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ecd8:	444b      	add	r3, r9
 802ecda:	9309      	str	r3, [sp, #36]	; 0x24
 802ecdc:	e76d      	b.n	802ebba <_svfiprintf_r+0x4a>
 802ecde:	fb05 3202 	mla	r2, r5, r2, r3
 802ece2:	2001      	movs	r0, #1
 802ece4:	460f      	mov	r7, r1
 802ece6:	e7a6      	b.n	802ec36 <_svfiprintf_r+0xc6>
 802ece8:	2300      	movs	r3, #0
 802ecea:	3701      	adds	r7, #1
 802ecec:	9305      	str	r3, [sp, #20]
 802ecee:	4619      	mov	r1, r3
 802ecf0:	250a      	movs	r5, #10
 802ecf2:	4638      	mov	r0, r7
 802ecf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ecf8:	3a30      	subs	r2, #48	; 0x30
 802ecfa:	2a09      	cmp	r2, #9
 802ecfc:	d903      	bls.n	802ed06 <_svfiprintf_r+0x196>
 802ecfe:	2b00      	cmp	r3, #0
 802ed00:	d0c8      	beq.n	802ec94 <_svfiprintf_r+0x124>
 802ed02:	9105      	str	r1, [sp, #20]
 802ed04:	e7c6      	b.n	802ec94 <_svfiprintf_r+0x124>
 802ed06:	fb05 2101 	mla	r1, r5, r1, r2
 802ed0a:	2301      	movs	r3, #1
 802ed0c:	4607      	mov	r7, r0
 802ed0e:	e7f0      	b.n	802ecf2 <_svfiprintf_r+0x182>
 802ed10:	ab03      	add	r3, sp, #12
 802ed12:	9300      	str	r3, [sp, #0]
 802ed14:	4622      	mov	r2, r4
 802ed16:	4b11      	ldr	r3, [pc, #68]	; (802ed5c <_svfiprintf_r+0x1ec>)
 802ed18:	a904      	add	r1, sp, #16
 802ed1a:	4640      	mov	r0, r8
 802ed1c:	f3af 8000 	nop.w
 802ed20:	f1b0 3fff 	cmp.w	r0, #4294967295
 802ed24:	4681      	mov	r9, r0
 802ed26:	d1d6      	bne.n	802ecd6 <_svfiprintf_r+0x166>
 802ed28:	89a3      	ldrh	r3, [r4, #12]
 802ed2a:	065b      	lsls	r3, r3, #25
 802ed2c:	f53f af35 	bmi.w	802eb9a <_svfiprintf_r+0x2a>
 802ed30:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ed32:	b01d      	add	sp, #116	; 0x74
 802ed34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ed38:	ab03      	add	r3, sp, #12
 802ed3a:	9300      	str	r3, [sp, #0]
 802ed3c:	4622      	mov	r2, r4
 802ed3e:	4b07      	ldr	r3, [pc, #28]	; (802ed5c <_svfiprintf_r+0x1ec>)
 802ed40:	a904      	add	r1, sp, #16
 802ed42:	4640      	mov	r0, r8
 802ed44:	f7ff f93c 	bl	802dfc0 <_printf_i>
 802ed48:	e7ea      	b.n	802ed20 <_svfiprintf_r+0x1b0>
 802ed4a:	bf00      	nop
 802ed4c:	08030398 	.word	0x08030398
 802ed50:	0803039e 	.word	0x0803039e
 802ed54:	080303a2 	.word	0x080303a2
 802ed58:	00000000 	.word	0x00000000
 802ed5c:	0802eabd 	.word	0x0802eabd

0802ed60 <_sbrk_r>:
 802ed60:	b538      	push	{r3, r4, r5, lr}
 802ed62:	4c06      	ldr	r4, [pc, #24]	; (802ed7c <_sbrk_r+0x1c>)
 802ed64:	2300      	movs	r3, #0
 802ed66:	4605      	mov	r5, r0
 802ed68:	4608      	mov	r0, r1
 802ed6a:	6023      	str	r3, [r4, #0]
 802ed6c:	f7e4 fd68 	bl	8013840 <_sbrk>
 802ed70:	1c43      	adds	r3, r0, #1
 802ed72:	d102      	bne.n	802ed7a <_sbrk_r+0x1a>
 802ed74:	6823      	ldr	r3, [r4, #0]
 802ed76:	b103      	cbz	r3, 802ed7a <_sbrk_r+0x1a>
 802ed78:	602b      	str	r3, [r5, #0]
 802ed7a:	bd38      	pop	{r3, r4, r5, pc}
 802ed7c:	2400d3a4 	.word	0x2400d3a4

0802ed80 <_raise_r>:
 802ed80:	291f      	cmp	r1, #31
 802ed82:	b538      	push	{r3, r4, r5, lr}
 802ed84:	4604      	mov	r4, r0
 802ed86:	460d      	mov	r5, r1
 802ed88:	d904      	bls.n	802ed94 <_raise_r+0x14>
 802ed8a:	2316      	movs	r3, #22
 802ed8c:	6003      	str	r3, [r0, #0]
 802ed8e:	f04f 30ff 	mov.w	r0, #4294967295
 802ed92:	bd38      	pop	{r3, r4, r5, pc}
 802ed94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ed96:	b112      	cbz	r2, 802ed9e <_raise_r+0x1e>
 802ed98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802ed9c:	b94b      	cbnz	r3, 802edb2 <_raise_r+0x32>
 802ed9e:	4620      	mov	r0, r4
 802eda0:	f000 f830 	bl	802ee04 <_getpid_r>
 802eda4:	462a      	mov	r2, r5
 802eda6:	4601      	mov	r1, r0
 802eda8:	4620      	mov	r0, r4
 802edaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802edae:	f000 b817 	b.w	802ede0 <_kill_r>
 802edb2:	2b01      	cmp	r3, #1
 802edb4:	d00a      	beq.n	802edcc <_raise_r+0x4c>
 802edb6:	1c59      	adds	r1, r3, #1
 802edb8:	d103      	bne.n	802edc2 <_raise_r+0x42>
 802edba:	2316      	movs	r3, #22
 802edbc:	6003      	str	r3, [r0, #0]
 802edbe:	2001      	movs	r0, #1
 802edc0:	e7e7      	b.n	802ed92 <_raise_r+0x12>
 802edc2:	2400      	movs	r4, #0
 802edc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802edc8:	4628      	mov	r0, r5
 802edca:	4798      	blx	r3
 802edcc:	2000      	movs	r0, #0
 802edce:	e7e0      	b.n	802ed92 <_raise_r+0x12>

0802edd0 <raise>:
 802edd0:	4b02      	ldr	r3, [pc, #8]	; (802eddc <raise+0xc>)
 802edd2:	4601      	mov	r1, r0
 802edd4:	6818      	ldr	r0, [r3, #0]
 802edd6:	f7ff bfd3 	b.w	802ed80 <_raise_r>
 802edda:	bf00      	nop
 802eddc:	24000670 	.word	0x24000670

0802ede0 <_kill_r>:
 802ede0:	b538      	push	{r3, r4, r5, lr}
 802ede2:	4c07      	ldr	r4, [pc, #28]	; (802ee00 <_kill_r+0x20>)
 802ede4:	2300      	movs	r3, #0
 802ede6:	4605      	mov	r5, r0
 802ede8:	4608      	mov	r0, r1
 802edea:	4611      	mov	r1, r2
 802edec:	6023      	str	r3, [r4, #0]
 802edee:	f7e4 fc9f 	bl	8013730 <_kill>
 802edf2:	1c43      	adds	r3, r0, #1
 802edf4:	d102      	bne.n	802edfc <_kill_r+0x1c>
 802edf6:	6823      	ldr	r3, [r4, #0]
 802edf8:	b103      	cbz	r3, 802edfc <_kill_r+0x1c>
 802edfa:	602b      	str	r3, [r5, #0]
 802edfc:	bd38      	pop	{r3, r4, r5, pc}
 802edfe:	bf00      	nop
 802ee00:	2400d3a4 	.word	0x2400d3a4

0802ee04 <_getpid_r>:
 802ee04:	f7e4 bc8c 	b.w	8013720 <_getpid>

0802ee08 <__sread>:
 802ee08:	b510      	push	{r4, lr}
 802ee0a:	460c      	mov	r4, r1
 802ee0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ee10:	f000 f89e 	bl	802ef50 <_read_r>
 802ee14:	2800      	cmp	r0, #0
 802ee16:	bfab      	itete	ge
 802ee18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ee1a:	89a3      	ldrhlt	r3, [r4, #12]
 802ee1c:	181b      	addge	r3, r3, r0
 802ee1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ee22:	bfac      	ite	ge
 802ee24:	6563      	strge	r3, [r4, #84]	; 0x54
 802ee26:	81a3      	strhlt	r3, [r4, #12]
 802ee28:	bd10      	pop	{r4, pc}

0802ee2a <__swrite>:
 802ee2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ee2e:	461f      	mov	r7, r3
 802ee30:	898b      	ldrh	r3, [r1, #12]
 802ee32:	05db      	lsls	r3, r3, #23
 802ee34:	4605      	mov	r5, r0
 802ee36:	460c      	mov	r4, r1
 802ee38:	4616      	mov	r6, r2
 802ee3a:	d505      	bpl.n	802ee48 <__swrite+0x1e>
 802ee3c:	2302      	movs	r3, #2
 802ee3e:	2200      	movs	r2, #0
 802ee40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ee44:	f000 f868 	bl	802ef18 <_lseek_r>
 802ee48:	89a3      	ldrh	r3, [r4, #12]
 802ee4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ee4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ee52:	81a3      	strh	r3, [r4, #12]
 802ee54:	4632      	mov	r2, r6
 802ee56:	463b      	mov	r3, r7
 802ee58:	4628      	mov	r0, r5
 802ee5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ee5e:	f000 b817 	b.w	802ee90 <_write_r>

0802ee62 <__sseek>:
 802ee62:	b510      	push	{r4, lr}
 802ee64:	460c      	mov	r4, r1
 802ee66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ee6a:	f000 f855 	bl	802ef18 <_lseek_r>
 802ee6e:	1c43      	adds	r3, r0, #1
 802ee70:	89a3      	ldrh	r3, [r4, #12]
 802ee72:	bf15      	itete	ne
 802ee74:	6560      	strne	r0, [r4, #84]	; 0x54
 802ee76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ee7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ee7e:	81a3      	strheq	r3, [r4, #12]
 802ee80:	bf18      	it	ne
 802ee82:	81a3      	strhne	r3, [r4, #12]
 802ee84:	bd10      	pop	{r4, pc}

0802ee86 <__sclose>:
 802ee86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ee8a:	f000 b813 	b.w	802eeb4 <_close_r>
	...

0802ee90 <_write_r>:
 802ee90:	b538      	push	{r3, r4, r5, lr}
 802ee92:	4c07      	ldr	r4, [pc, #28]	; (802eeb0 <_write_r+0x20>)
 802ee94:	4605      	mov	r5, r0
 802ee96:	4608      	mov	r0, r1
 802ee98:	4611      	mov	r1, r2
 802ee9a:	2200      	movs	r2, #0
 802ee9c:	6022      	str	r2, [r4, #0]
 802ee9e:	461a      	mov	r2, r3
 802eea0:	f7e4 fc7d 	bl	801379e <_write>
 802eea4:	1c43      	adds	r3, r0, #1
 802eea6:	d102      	bne.n	802eeae <_write_r+0x1e>
 802eea8:	6823      	ldr	r3, [r4, #0]
 802eeaa:	b103      	cbz	r3, 802eeae <_write_r+0x1e>
 802eeac:	602b      	str	r3, [r5, #0]
 802eeae:	bd38      	pop	{r3, r4, r5, pc}
 802eeb0:	2400d3a4 	.word	0x2400d3a4

0802eeb4 <_close_r>:
 802eeb4:	b538      	push	{r3, r4, r5, lr}
 802eeb6:	4c06      	ldr	r4, [pc, #24]	; (802eed0 <_close_r+0x1c>)
 802eeb8:	2300      	movs	r3, #0
 802eeba:	4605      	mov	r5, r0
 802eebc:	4608      	mov	r0, r1
 802eebe:	6023      	str	r3, [r4, #0]
 802eec0:	f7e4 fc89 	bl	80137d6 <_close>
 802eec4:	1c43      	adds	r3, r0, #1
 802eec6:	d102      	bne.n	802eece <_close_r+0x1a>
 802eec8:	6823      	ldr	r3, [r4, #0]
 802eeca:	b103      	cbz	r3, 802eece <_close_r+0x1a>
 802eecc:	602b      	str	r3, [r5, #0]
 802eece:	bd38      	pop	{r3, r4, r5, pc}
 802eed0:	2400d3a4 	.word	0x2400d3a4

0802eed4 <_fstat_r>:
 802eed4:	b538      	push	{r3, r4, r5, lr}
 802eed6:	4c07      	ldr	r4, [pc, #28]	; (802eef4 <_fstat_r+0x20>)
 802eed8:	2300      	movs	r3, #0
 802eeda:	4605      	mov	r5, r0
 802eedc:	4608      	mov	r0, r1
 802eede:	4611      	mov	r1, r2
 802eee0:	6023      	str	r3, [r4, #0]
 802eee2:	f7e4 fc84 	bl	80137ee <_fstat>
 802eee6:	1c43      	adds	r3, r0, #1
 802eee8:	d102      	bne.n	802eef0 <_fstat_r+0x1c>
 802eeea:	6823      	ldr	r3, [r4, #0]
 802eeec:	b103      	cbz	r3, 802eef0 <_fstat_r+0x1c>
 802eeee:	602b      	str	r3, [r5, #0]
 802eef0:	bd38      	pop	{r3, r4, r5, pc}
 802eef2:	bf00      	nop
 802eef4:	2400d3a4 	.word	0x2400d3a4

0802eef8 <_isatty_r>:
 802eef8:	b538      	push	{r3, r4, r5, lr}
 802eefa:	4c06      	ldr	r4, [pc, #24]	; (802ef14 <_isatty_r+0x1c>)
 802eefc:	2300      	movs	r3, #0
 802eefe:	4605      	mov	r5, r0
 802ef00:	4608      	mov	r0, r1
 802ef02:	6023      	str	r3, [r4, #0]
 802ef04:	f7e4 fc83 	bl	801380e <_isatty>
 802ef08:	1c43      	adds	r3, r0, #1
 802ef0a:	d102      	bne.n	802ef12 <_isatty_r+0x1a>
 802ef0c:	6823      	ldr	r3, [r4, #0]
 802ef0e:	b103      	cbz	r3, 802ef12 <_isatty_r+0x1a>
 802ef10:	602b      	str	r3, [r5, #0]
 802ef12:	bd38      	pop	{r3, r4, r5, pc}
 802ef14:	2400d3a4 	.word	0x2400d3a4

0802ef18 <_lseek_r>:
 802ef18:	b538      	push	{r3, r4, r5, lr}
 802ef1a:	4c07      	ldr	r4, [pc, #28]	; (802ef38 <_lseek_r+0x20>)
 802ef1c:	4605      	mov	r5, r0
 802ef1e:	4608      	mov	r0, r1
 802ef20:	4611      	mov	r1, r2
 802ef22:	2200      	movs	r2, #0
 802ef24:	6022      	str	r2, [r4, #0]
 802ef26:	461a      	mov	r2, r3
 802ef28:	f7e4 fc7c 	bl	8013824 <_lseek>
 802ef2c:	1c43      	adds	r3, r0, #1
 802ef2e:	d102      	bne.n	802ef36 <_lseek_r+0x1e>
 802ef30:	6823      	ldr	r3, [r4, #0]
 802ef32:	b103      	cbz	r3, 802ef36 <_lseek_r+0x1e>
 802ef34:	602b      	str	r3, [r5, #0]
 802ef36:	bd38      	pop	{r3, r4, r5, pc}
 802ef38:	2400d3a4 	.word	0x2400d3a4

0802ef3c <__malloc_lock>:
 802ef3c:	4770      	bx	lr

0802ef3e <__malloc_unlock>:
 802ef3e:	4770      	bx	lr

0802ef40 <_malloc_usable_size_r>:
 802ef40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ef44:	1f18      	subs	r0, r3, #4
 802ef46:	2b00      	cmp	r3, #0
 802ef48:	bfbc      	itt	lt
 802ef4a:	580b      	ldrlt	r3, [r1, r0]
 802ef4c:	18c0      	addlt	r0, r0, r3
 802ef4e:	4770      	bx	lr

0802ef50 <_read_r>:
 802ef50:	b538      	push	{r3, r4, r5, lr}
 802ef52:	4c07      	ldr	r4, [pc, #28]	; (802ef70 <_read_r+0x20>)
 802ef54:	4605      	mov	r5, r0
 802ef56:	4608      	mov	r0, r1
 802ef58:	4611      	mov	r1, r2
 802ef5a:	2200      	movs	r2, #0
 802ef5c:	6022      	str	r2, [r4, #0]
 802ef5e:	461a      	mov	r2, r3
 802ef60:	f7e4 fc00 	bl	8013764 <_read>
 802ef64:	1c43      	adds	r3, r0, #1
 802ef66:	d102      	bne.n	802ef6e <_read_r+0x1e>
 802ef68:	6823      	ldr	r3, [r4, #0]
 802ef6a:	b103      	cbz	r3, 802ef6e <_read_r+0x1e>
 802ef6c:	602b      	str	r3, [r5, #0]
 802ef6e:	bd38      	pop	{r3, r4, r5, pc}
 802ef70:	2400d3a4 	.word	0x2400d3a4

0802ef74 <_init>:
 802ef74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ef76:	bf00      	nop
 802ef78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ef7a:	bc08      	pop	{r3}
 802ef7c:	469e      	mov	lr, r3
 802ef7e:	4770      	bx	lr

0802ef80 <_fini>:
 802ef80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ef82:	bf00      	nop
 802ef84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ef86:	bc08      	pop	{r3}
 802ef88:	469e      	mov	lr, r3
 802ef8a:	4770      	bx	lr
